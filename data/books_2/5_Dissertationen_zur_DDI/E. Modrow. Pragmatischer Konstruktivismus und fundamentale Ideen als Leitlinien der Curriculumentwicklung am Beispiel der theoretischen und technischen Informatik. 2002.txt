      Pragmatischer Konstruktivismus  und fundamentale Ideen  als Leitlinien der Curriculumentwicklung  am Beispiel der theoretischen   und technischen Informatik       Dissertation    zur Erlangung des akademischen Grades  doctor paedagogicae (Dr. paed.)    vorgelegt der     Mathematisch-Naturwissensch aftlich-Technischen Fakultät  (mathematisch-naturwisse nschaftlicher Bereich)  der Martin-Luther-Unive rsität Halle-Wittenberg     von Herrn Eckart Modrow  geb. am 18. Februar 1948 in Reinbek      Gutachter:    1. Prof. Dr. Wilfried He rget, Halle (Saale)  2. Prof. Dr. Andreas Schwill, Potsdam  3. Prof. Dr. Peter H ubwieser, München      Halle (Saale), (Datum der Verteidigung)                                                             Ich erkläre hiermit, dass ich meine Arbei t selbstständig und ohne fremde Hilfe verfasst, andere als die von mir angegebenen Q uellen und Hilfsmi ttel nicht benutzt  und die den benutzten Werken wörtlich oder  inhaltlich entnommenen Stellen als  solche kenntlich gemacht habe.                                                                                                   27.10.2002, Scheden        Vorwort    3  Vorwort  Die vorliegende Arbeit geht  von meinen 1991/92 ersch ienenen Büchern „Zur Didaktik des Informatikunterrichts, Bd.1 und 2“1 sowie „Automaten–Schaltwerke– Sprachen“2 aus. Sie erweitert und ergänzt diesen Ansatz in Hinsicht auf allgemeindidaktische Fragen und hat das Ziel, nach ei ner Pause von zehn Jahren einige der  damals aufgestellten Behauptun gen kritisch vor dem Hintergrund der fachlichen,  didaktischen und bildungspolitischen Entwickl ung in dieser Zeit zu überprüfen und  fortzuschreiben, vor allem aber mit der  vorangeschrittenen fachdidaktischen Diskussion zu verknüpfen. Sie versucht dies es exemplarisch anhand eines Themas,  das ich für grundlegend für die Schulinforma tik halte: der theoretischen Informatik.  Didaktische Arbeiten befinden sich immer in der Gefahr, die „Bodenhaftung“ zu  verlieren. Im Bestreben, pädagogisch e Detailentscheidungen von allgemeinen  pädagogischen und fachlichen Überlegun gen her zu begründen, übersehen sie  oft, dass die Adressaten des Unterrichts , die Schülerinnen und Schüler, diese  Überlegungen nicht mit vollzie hen. Denen erscheint der Un terricht allein als Folge  von Resultaten dieser Überlegungen, den Unterrichtsinhalten und Unterrichtsformen der einzelnen Stunden. Didaktiker versuchen meist, von ihren Zielen über  eine Folge von Einschränkungen und Anpa ssungen an die Schule zu konkreten,  meist also stark reduzierten Unterrichtsbei spielen zu kommen, die in ihrer Gesamtheit die Ziele erreichen sollen. Von den Unterrichteten wird erwartet, dass  sich bei ihnen aus den Beispielen die angestrebten Einsichten und Fähigkeiten  entwickeln, sie also z. B. die überordnete Sicht des Faches auf die Wirklichkeit  rekonstruieren. Dass dies nicht immer funk tionieren muss, erlebt  man als Praktiker  leider täglich. Hier hat in den letzten J ahren mit dem Konstruktivismus eine veränderte Position zum Lernprozess gerade in der mathematisch-naturwissenschaftlichen Didaktik an Boden gewonnen, die dies en Aspekt m. E. angemessen berücksichtigt. Wenn ich auch nicht alle K onsequenzen des Konstruktivismus für pädagogisch sinnvoll halte, so scheint  doch eine pragmatische Variante3 auch für die  Informatikdidaktik fruchtbar zu sein.  Didaktische Überlegungen sind  m. E. daran zu messen,  ob die Abfolge der daraus  resultierenden Unterrichtsstunden in ihrer Wirkung den angestrebten Zielen gerecht wird. Entscheidend ist also nicht, was gewollt, sondern was erreicht wird –  und in welchem Umfang es erreicht wird. Al s Praktiker ist für mich die Frage entscheidend, ob die Folge der Unterrichtsst unden trotz der meist extremen Reduktion die ursprünglichen Intent ionen noch widerspiegelt, ob also – hier nur als Beispiel – eine Unterrichtseinheit zum „ Verstehen natürlicher Sprache “4 dem selbst  gesetzten Anspruch gerecht wird, wenn darin allein ei ne ziemlich primitive endliche, also auch regulär formulierbare Spra che definiert und „g eparst“ wird. Natürlich kann man sich anhand eines solch en Beispiels über natürliche Sprache Gedanken machen. Zu fragen ist aber, ob ein r egulärer Parser in diesem Fall überhaupt notwendig oder hilfreich ist und ob ei ne Unterrichtseinheit, in der die entscheidenden Aspekte des Themas nicht wir klich thematisiert werden, nicht am  Thema vorbei geht. Verliert sich bei der  notwendigen Reduktion der Bezug zu den  Zielen, dann ist es für die Schülerinn en und Schüler unmöglich, aus den übrig                                                    1 [Mod91], [Mod92a]  2 [Mod92b]   3 z. B. in [Mül98], [Ple98]  4 [Bau96a] S. 361 Vorwort    4  bleibenden Beispielen die angestrebten Ei nsichten zu gewinnen – der Unterricht  wird (unter diesem Aspekt) sinnlos, und das spüren alle Beteiligten sehr genau.  Übertriebene (und dann nicht eingelöste) Ansprüche f ühren zu falschen Erwartungen und damit zu Frustrationen. Dami t wird die Chance vergeben, die erreichbaren Ziele des Informatikunterrichts als po sitiv zu erfahren. Versucht ein Fach,  seine Existenz überwiegend über sehr anspruc hsvolle Ziele zu rechtfertigen, dann  gefährdet insbesondere ein „neues“ Fach beim Nichterreichen dieser Ziele seine  Akzeptanz, im Extremfall seine Existenz. Berücksichtigt man weiter, dass Unterrichtsziele immer nur teilweise erreicht  werden, dann muss zur Rechtfertigung eines Faches eine Hierarchie von Zielen heran gezogen werden, die ausgehend von  „einfachen“, sicher erreichbaren, bei anspruchsvollen endet, und die sicher er-reichbaren Ziele allein müssen das Fa ch ausreichend begründen. Ausgehend von  solidem fachlichen Arbeiten sollte der Unterricht dann auch zu Fragen führen, die  innerhalb  der Schule weitgehend offen bleib en müssen, die aber einzelne Schülerinnen und Schüler motivieren können, sich nach  der Schule auf diesen Gebieten  zu betätigen. Themen wie das oben angesprochene „Verstehen natürlicher Sprache“ oder die aktuellen „Agenten“ des Inter nets, die auch innerhalb der Universität  noch nicht annähernd abgeschloss en behandelt sind, können al so als „Ausblicke“,  „Erweiterungen“ u. Ä. zu sehr intere ssanten Stunden führen.  Sie aber heute entscheidend zur Rechtfertigung des Schulfaches heran zu ziehen, halte ich für    aberwitzig: Bestehenden Unterricht an solchen,  m. E. derzeit kaum erreichbaren  Zielen zu messen und damit  zu entwerten, entzieht de r real existierenden Version  des Fachs seine Existenzberechtigung, ohne  sie durch etwas Besseres zu ersetzen. Das hat Wolfgang Ambros schon 1991 treffend formuliert:   „So wird man mit dem Schuldgefühl entla ssen, dass die augenblickliche Praxis nicht  mehr zu verantworten ist. Es wird einem aber nicht ge sagt, wie man es besser machen kann“. 5  Die Schulinformatik spielt i nnerhalb der Schulfächer eine Sonderrolle, die im Weiteren zu begründen ist. Hier schon soll erw ähnt werden, dass die Möglichkeiten  des Fachs nicht nur im kognitiven Bereic h liegen. Vielmehr spielen Aspekte der  Persönlichkeitsentwicklung, des selbststän digen Arbeitens und  sozialen Lernens  eine wesentliche Rolle,  die für die Begründung des Schulfaches entscheidend ist.  Diese Aspekte müssen bei der Auswahl von Unterrichtsinhalten und -formen  ebenso entscheidend sein wie fachliche Fra gen. Schulinformatik bildet keine Informatiker aus, sondern leistet einen wicht igen Beitrag zur Allgemeinund Persönlichkeitsbildung der Schülerinnen und Schüle r, dient also ganz  altmodisch auch  zur „Erziehung“. Die alte Forderung der Reformpädagogik des „ Lernens mit Kopf,  Herz und Hand “ kann nicht ungestraft auf den K opf reduziert werden. Zur „Herzensbildung“ dient u. a.  die Freude am Lernen und am eigenen Schaffen, die sich  über erfolgreiches selbstständiges Arbei ten mit Hilfe des Werkzeugs Computer  entwickeln kann. Ebenso wie die „ Erfahrung Mathematik “6 nicht nur für erfolgreiches mathematisches Arbeit en und eine mögliche Entsc heidung „zur Mathematik“  (z. B. als späterem Studienf ach) wichtig ist, sondern auch  zur Herausbildung einer  positiven Einstellung zum Fach der kün ftigen „mündigen Bür gerinnen und Bürger“  dient, die meist auf ganz a nderen Gebieten tätig sind, sollte der Informatikunterricht eine „ Erfahrung Informatik “ liefern, die es den Schülerinnen und Schülern                                                    5 in [Amb91] zu [Bau90]   6 [Dav94] Vorwort    5  gestattet, zu entscheiden, ob Ar beiten in diesem Bereich für sie eine persönliche  Perspektive bilden – oder nicht. Schule, und besonders  die Sekundarstufe II, hat  neben der Vermittlung fachlicher Inhalte die Aufgabe, den Unterrichteten alternative Lebenswege aufzuzeigen. Informatik ist in diesem Umfeld das einzige Fach mit einem starken technisch-ing enieurwissenschaftlichen Bezug 7. Nur in diesem  Fach können die Schülerinn en und Schüler erproben, ob di e konstruktive Arbeit  mit technischen Werkzeugen (im Gegensatz zur weitgehend deskriptiven und interpretierenden Arbeit in vielen anderen Fäc hern) für sie möglich und attraktiv,  eben eine Lebensperspektive ist.   Die vorgelegte Arbeit bezieht sich fast ausschließlich auf das Schulfach Informatik  in der Sekundarstufe II, geht also von Schülerinnen und Schü lern aus, die das  Fach freiwillig und durchgehen d gewählt haben. (Dies umfasst auch die Wahl „in  einem Bündel von Fächern“, wie sie etwa in der gepl anten Profiloberstufe vorgesehen ist.) Sie versucht nicht, das Fach als Teil einer „informationstechnischen  Bildung für alle“8 darzustellen. Sie soll neben den fachlichen Aspekten auch die  angesprochenen allgemeinund persönlichk eitsbildenden berücksichtigen und am  gewählten Thema zeigen, wie diese im Unterricht zu erreichen sind. Ausgehend  von allgemeinen Zielen soll der Weg zur einzelnen Unterrichtsstunde konsequent  und ohne Bruch gegangen werden. Ich hoffe, dass dies gelungen ist.   Ich danke Prof. Wilfried Herget, Universität Halle, und Prof. Andreas Schwill, Universität Potsdam, für ihre Ermutigungen, Hi lfen und ihre Betreuung in den letzten  zwei Jahren. Ohne ihre freundliche Unterstützung hätte ich diese Arbeit nicht rea-lisiert.    Göttingen, im Oktober 2002   Eckart Modrow                                                        7 siehe auch [Mag00] S. 4  8 die nach Ansicht nicht nur der GI in der „integ rierten“ Form weitgehend gescheitert ist. [GI01] Inhaltsverzeichnis    6   Vorwort ...................................................................................................................... ....     3     Inhaltsverzeichnis ..........................................................................................................     6    1. Aufgaben und Ziele der Informatikdidaktik ....................................................................     7     1.1 Einige Vorgaben der Allgemeinen Didaktik ..........................................................     7    1.1.1 Zum Praxisbezug .....................................................................................     7   1.1.2 Zum „Allgemeinen“ der Allgemeinbildung ................................................     9   1.1.3 Zur Stellung der „Bildung“ in der Allgemeinbildung ..................................   11     1.2 Zum Lernen ..........................................................................................................   14     1.2.1 Lernen in Strukturen .................................................................................   14    1.2.2 Entdeckendes Lernen ..............................................................................   15   1.2.3 Soziales Lernen .......................................................................................   17   1.2.4 Pragmatischer Konstruktivismus …………………………………………….   19     1.3 Folgerungen für die Informatikdidaktik .................................................................   25  1.3.1 Zur Auswahl fachdidaktischer Themen ....................................................   25   1.3.2 Zum Aufgabenkatalog von Bussmann und Heymann ..............................   27  1.3.3 Kriterien für Unterrichtsinhalte ..................................................................   35    2. Spezielle fachdidaktische Fragen ..................................................................................   37     2.1 Offener Lernzielkatalog und ortsnahe Curriculumentwicklung .............................   37     2.2 Zu den fundamentalen Ideen der Informatik ........................................................   40    2.2.1 Zur Wirkung fundamentaler Ideen ............................................................   40    2.2.2 Zu Schwills Kriterien für fundamentale Ideen ...........................................   41    2.2.3 Zu Schwills Masterideen ..........................................................................   46     2.3 Zu den vorhandenen Didaktikansätzen ................................................................   51     2.4 Zum Programmieren und der OOP ......................................................................   58   2.4.1 Zum Programmierkurs in der Kursfolge ...................................................   58   2.4.2 Zur Programmiersprache .........................................................................   59     2.5 Zur Klassifizierung von Unterrichtseinheiten ........................................................   63    3. Zur Theorie im Informatikunterricht ...............................................................................   67     3.1 Zur Stellung der Theorie in der Schule .................................................................   67   3.2 Fundamentale Ideen der theoretischen Informatik ...............................................   70   3.3 Zur Rekonstruktion der fundamentalen Ideen ......................................................   72   3.4 Technische Informatik im Theoriekurs? ...............................................................   75  3.5 Zum Unterrichtsgang ............................................................................................   80   3.5.1 Zur Anwendung der Kriterien für Unterrichtsinhalte .................................   80   3.5.2 Eine mögliche Unterrichtssequenz ...........................................................   82    4. Beispiele .................................................................................................................. ......   86      4.1 Zur Präfiguration der Zustands-Idee ....................................................................   86   4.2 Rechnermodelle ...................................................................................................   90  4.3 Gekoppelte Automaten .........................................................................................  96  4.4 Eine Sprache für LEGO-Roboter ..........................................................................102    Anhang: Einige Ergebnisse zweier Umfragen ………………………………………………. 109   A1: Zur Selbsteinschätzung der Lernenden ……………………………………………. 109   A2: Vergleich mit einem Lehrerweiterbildungskurs ……………………………………. 113  A3: Zu den Erwartungen an den Unterricht …………………………………………….. 115     Nachwort …………….……………… ………………………………………………………... 122     Literaturverzeichnis ….……… …………………………………………………………….… 124    Materialien 1: Java-Quelltexte zu Beispiel 1 ....................................................................... 132   Materialien 2: Delphi-Quelltexte zu Beispiel 3 ..................................................................... 134   Materialien 3: Delphi-Quelltexte zu Beispiel 4 ..................................................................... 139    Lebenslauf ……………………………………… ………………………………………………… 152 1.1 Einige Vorgaben der Allgemeinen Didaktik    7  1. Aufgaben und Ziele der Informatikdidaktik  Das Schulfach Informatik ist ein Baustein im Unterricht allgemein bildender Schulen,  der derzeit meist nicht zum verpflicht enden Fächerkanon gehört. Insbesondere in der  Sekundarstufe II werden Informatikkurse von den Teilnehmerinne n und Teilnehmern  ausschließlich freiwillig belegt. In dies em Abschnitt soll zuerst der Rahmen abgesteckt werden, innerhalb de ssen sich ein technisch ori entiertes Schulfach bewegt.  Dazu wird der Begriff der Allgemeinbildung  mit Hilfe einiger für das Thema dieser  Arbeit wichtiger Aspekte der Allgemeinen Didaktik präzisiert9 und in Hinsicht auf die  Schulinformatik bewertet10. Als Folgerung ergeben sich Anforderungen an die Schulfächer11, die sich besonders auf den Stellenwert der fach lichen Inhalte beziehen.  Nach einem Ausflug in die Lerntheorie wir d der spezielle Beitrag des Informatikunterrichts zur Allgemeinb ildung untersucht, durch den dann die Anforderungen an  die das Thema betreffende Informatikdidaktik definiert sind.     1.1 Einige Vorgaben der Allgemeinen Didaktik  1.1.1 Zum Praxisbezug  Didaktik ist die Wissenschaft vom Unterri cht. Sie wird verstanden als Theorie der  Bildungsinhalte, ihrer Struktur und Auswahl12. Verglichen mit de m rasanten Tempo,  in dem sich Themen und „Par adigmen“ in der Informat ikdidaktik abwechseln – wesentlich dokumentiert in den Beiträgen der Zeitschrift LOG IN –, ist die Entwicklung in  der Allgemeinen Didaktik geradezu gemächlich:  Immerhin spielen Ergebnisse z. B.  von Jerome S. Bruner13 aus den 60er Jahren in der aktuellen Diskussion eine wesentliche Rolle, etwa bei der Diskussion  der „fundamentalen Ideen der Informatik“  durch Andreas Schwill14. Im Gegensatz zur Allgemeinen Didaktik ist es in der Informatikdidaktik schon aus Zeitgründen kaum m öglich, aktuell diskutierte Themen in  breit angelegten Erpr obungen zu untersuchen15, weil die Zeiträume, in dem die Themen jeweils eine Rolle in der didaktischen Diskussion spielen,  viel zu kurz sind, um  sorgfältiger Evaluation Raum zu geben16. Damit hat die Informa tikdidaktik aber ein  Problem, denn die Didaktik wird nach Wolfgang Klafki „nicht als reine theoretische Disziplin verstanden, sondern  als Wissenschaft von de r Praxis für die Praxis “17. Er beschränkt  diesen Anspruch nicht auf die geisteswissenschaftliche  Didaktik, sondern betont  durch den Begriff „ konstruktiv “ in seiner kritisch-konstruktiven  Version der Didaktik  ausdrücklich den Praxisbezug seiner eigenen Theorie18. Auch Paul Heimann sieht  Didaktik als Theorie des Unterrichts und den Unterricht „als Ort, wo die ungelösten Fragen der didaktischen Gesamtsituation als k onkret zu lösende Lehrund Lernprobleme auftre                                                  9 Dabei wird auch aus Platzgründen keine systematische Darstellung versucht.  10 Es wird also von Anfang an auf Neutralität zugunste n einer eigenen Position verzichtet. Entsprechend ist die  Auswahl der Zitate sehr selektiv.  11 also auch an die Informatik  12 W. Klafki, zitiert nach [Kop65] S. 8  13 [Bru70]  14 [Schw93a]  15 Entsprechend fundierter scheinen aber auch die von der allgemeinen Didaktik vertretenen Thesen zu sein,  insbesondere die Überprüfung in Schulversuchen und normalem Unterricht spielt eine andere Rolle.   16 Als Beispiel kann die Diskussion der didaktischen Möglichkeiten von PROLOG dienen, die nach (gut gerechnet) zehn Jahren weitgehend durch eine Diskussion über JAVA abgelöst wurde, ohne dass PROLOG im Unter-richt schon wirklich flächendeckend verankert gewesen wäre.  17 [Kla85] S. 37, [Kla98a]  18 [Kla85] S. 38 1.1 Einige Vorgaben der Allgemeinen Didaktik    8  ten“19. Da Klafkis Didaktik als Beitrag zu m allgemeinen Rahmen einer Informatikdidaktik in der Literatur weitgehe nd akzeptiert zu sein scheint20, muss der geforderte  Praxisbezug sehr ernst genommen werden. Theoretische didaktische Überlegungen  finden ihre Berechtigung also nicht in sich selbst, sondern im Bezug zum und in der  Umsetzung in Unterricht:  Wissenschaftliche Pädagogik ist na ch dieser Auffassung keine In stanz, die in rein theoretischem Erkenntnisinteresse – „um der bl oßen Erkenntnis will en“ – beobachtend und  analysierend an die pädagogische Praxis herantritt.21  Will die Informatikdidaktik diesem Anspru ch genügen, dann kann sie sich nicht darauf beschränken, mehr oder weniger unverbin dlich jeweils neue Vorschläge zu machen, also Erwägungen abzuliefern, „was  man denn tun könnte“ , sondern sie muss  der Praxis Zeit geben, ihre Vorschläge zu realisieren, sie kritis ch zu erproben und  ggf. zu verändern. Fasst man den Begriff „Pra xis“ nicht nur als „einzelne Unterrichtseinheit eines einzelnen Lehrer s“ auf, sondern etwas breiter wenigstens als „normaler  Unterricht einer größeren Gruppe von Unte rrichtenden in einem  größeren geografischen Gebiet“, dann sind für die Ausbreitun g neuer Ideen in dieser Gruppe, ihre Umsetzung in Unterrichtseinheiten,  die Entwicklung von Unterri chtsmaterialien usw. jeweils viele Jahre erforderlich. Eine Fachdi daktik, die diese einfache Tatsache nicht  berücksichtigt, gibt ihren Anspruch auf Re levanz auf, weil sie nicht mehr erwarten  kann, dass ihre Ergebnisse  auch umgesetzt werden22.  Praxisbezug bedeutet auch, dass didaktische Überlegungen die Realisierbarkeit der  Vorschläge, also die aktuelle Situation der Praxis, wenigstens mit bedenken müssen,  z. B. die vorhandenen Kenntnisse der Un terrichtenden, den Zeitaufwand, den die  Einführung neuer Themen erfordert, und den Anteil der Arbeitszeit, der den Lehrenden insgesamt dafür zur Verfügung steht. In sbesondere ist bei Brüchen der Entwicklung23, z. B. der Einführung g anz neuer Inhalte und We rkzeuge, abzuwägen, ob  der für diese Veränderungen erforderliche  Aufwand wirklich de n erhofften Vorteil  bringt oder ob durch eine k ontinuierliche Weiterentwickl ung, die bestehende Ressourcen weiternutzt, nicht mehr zu erreichen wäre.24                                                    19 [Hei68] S. 9  20 z. B. in [Fri95], [Tho00], [Hum00], [Hub00]  21 [Kla76] S. 17  22 In der informatikdidaktischen Diskussion wird fast immer darauf hingewiesen, dass sich die Inhalte des Informatikunterrichts nicht im Tempo der Bezugswissenschaft Informatik ändern dürfen. Fast immer folgt nach  diesem Vorspann aber eine Erörterung neuer  Themen, neuer  Programmiersprachen, neuer  Anwendungen (z. B.  in [For97], [Bau96a], [Hub00]), statt Bestehendes zu festigen und zu verbessern. Als Folge hat es die Mehrzahl  der unterrichtenden Kolleginnen und Kollegen m. E. aufgegeben, der aktuellen Diskussion zu folgen – wenn sie sich nicht schon ganz aus dem Informatikunterricht zurü ckgezogen hat. Folglich legt diese Arbeit auch weniger  Wert auf „Neuigkeiten“ als auf „solide Weiterentwicklung“ des Bestehenden.  23 Gemeint sind die in der Schulinformatik im Vergleich zu anderen Fächern merkwürdigerweise gehäuft auftretenden „Paradigmenwechsel“.  24 Sigrid Schubert schreibt dazu, „dass die Allgemeinbildung (...) nicht durch hektische Veränderungen vorangebracht wird, sondern durch eine Folge wohldurchdachter kleiner Schritte.“  [Schu99] S. 24 1.1 Einige Vorgaben der Allgemeinen Didaktik    9  1.1.2 Zum „Allgemeinen“ der Allgemeinbildung  Informatikunterricht ist in allgemein bild enden Schulen kein Selb stzweck, sondern hat  im Zusammenspiel der Fäc her der Allgemeinbildung25 zu dienen. In einer Antwort auf  einen Artikel Peter Rechenbergs26 schreibt Heide Schel howe zum Thema Allgemeinbildung, „dass es nicht ausreicht,  die Begründung für eine Didak tik der Informatik in  der Entwicklung der wissenschaft lichen Disziplin zu suchen. Vi elmehr muss der Blick gerichtet sein auf die gesell schaftlichen, ökonomischen, kulturel len Entwicklungen, um von dort aus  zu fragen, welche allgemein bedeutsamen Antwor ten die jeweilige wissenschaftliche Disziplin  darauf geben kann, diese Entwicklungen zu begreifen und mit zu gestalten“27. Diese Definition entspricht teilweise der Klafkis, der alle rdings vorsichtiger bzgl. der Prognostizierbarkeit der Zukunft ist und so ziale Kompetenzen stärker betont28. Insbesondere  präzisiert er den Begriff „all gemein“ in der Allgemeinbildung: 29  1. „Allgemein“ besagt hier, dass Bildung ei ne Möglichkeit und ein Anspruch aller  Menschen der betreffenden Gesellschaft bzw. des betreffenden Kulturkreises, ja  letztlich der Menschheit im Ganzen ist.   2. „Allgemein“ zielt weiterhin auf das Insg esamt der menschlichen Möglichkeiten.   3. Die Bestimmung „allgemein“ im Begriff der Allgemei nbildung meint schließlich,  dass Bildung sich zentral im Medium de s Allgemeinen vollzieht oder vollziehen  sollte, d. h. in der Aneignung von und de r Auseinandersetzung mit dem die Menschen gemeinsam Angehenden, mit ihre n gemeinsamen Aufgaben und Problemen,  den in der Geschichte bereits entwickelten Den kergebnissen und Lösungsversuchen.  Nun können die Schulfäc her natürlich nicht in gleichen Maßen zu allen drei Aspekten  so verstandener Allgemeinbil dung beitragen. Trotzdem k ann man erwarten, dass sie  den Rahmen ihrer Möglichkeiten ausschöpfen.  In der informatikd idaktischen Diskussion entspricht Horst Hischer dem ersten As pekt der Allgemeinbild ung, wenn er im  Vorwort zum Tagungsband einer mathemati sch-fachdidaktischen Arbeitstagung aus  einer Rede des damaligen Bundespräsidenten Herzog zitiert:  Wie die Mathematik kennt di e Informatik keine Klassenunt erschiede, keine nationalen  Grenzen und keine kulturellen Barrieren. Ihr Potenzial ist überall emanzipatorisch. Es  gibt dem arbeitssuchenden J ugendlichen in Brasilien die gleiche Chance wie dem in  Thüringen, Kalifornien oder Indonesien. (...) Sie kann deswegen zur Integration der  Randgruppen der Gesellschaft in regionalen , nationalen oder kulturellen Gemeinschaften ebenso gut beitragen wie zum Abbau der wirtschaftlichen Ungleichgewichte  zwischen Nord und Süd in der Weltwirtschaft.30   Wenn ich diese Ansicht auch für reichlich optimistisch halte31, so ist doch zu beachten, dass die Aussagen als Ausgangspunk t für die fachdidaktische Diskussion gewählt wurden. Auch die GI in  ihren „Empfehlungen für ein Gesamtkonzept zur infor                                                  25 B.F. Skinner: „Bildung ist das was bleibt, wenn man alles vergisst, was man einmal gelernt hat.“   26 [Rec97]  27 [Sche97]  28 „Allgemeinbildung bedeutet, ein geschichtlich vermittelte s Bewusstsein von zentralen Problemen der Gegenwart und – soweit voraussehbar – der Zukunft zu gewinnen, Einsicht in die Mitverantwortlichkeit aller ange-sichts solcher Probleme und Bereitschaft, an ihre r Bewältigung mitzuwirken. Abkürzend kann man von der  Konzentration auf epochaltypische Schlüsselprobleme sprechen.“  Klafki, zitiert nach [Fri95]  29 [Kla85] S. 17  30 [His95] S. 5  31 Es reicht schon, sich die Verteilung der Computer auf die Nationen anzusehen, um die Chancen der arbeitssuchenden brasilianischen Jugendlichen einzuschätzen. 1.1 Einige Vorgaben der Allgemeinen Didaktik    10  matischen Bildung“32 betont den Stellenwert des glei chberechtigten Zugangs zu IuKTechniken. In jedem Fall entspricht di e Unterstützung der Em anzipation Benachteiligter dem Bildungsziel der Solidarität  (z. B. nach Klafki33 und Rolff34).  Der zweite Aspekt kann so interpretier t werden, dass den Schülerinnen und Schülern  die ganze Breite ihrer Möglichkeiten vo r Augen zu führen ist, und dazu gehört in der  Sekundarstufe II35 sicherlich auch ein Überbli ck über die verschiedenen Wissenschaften. Der riesige Bereich der Ingenieu rwissenschaften hat im Fächerkanon des  Gymnasiums kein zugeordnetes Fach. Ph ysik – das die Aufgabe eigentlich übernehmen könnte – wird an Universität und Sc hule als reines Grundlagenfach betrieben, fast ohne Bezug zu aktueller Tech nik. Wenn also technische Disziplinen mit  ihrer anwendungsorientierten Art des Umgangs mit Wissen und ihrer teilweise heu-ristischen Arbeitsweise v on den Heranwachsenden überhaupt  als Berufsperspektiven wahrgenommen werden soll en, dann sollte ein Fach sich darum kümmern – und  Informatik als einziges technikorientiertes  Fach im Gymnasium wäre dafür hervorragend geeignet, weil in seinem Unterricht gerade diese Arbeitswe isen von den Schülerinnen und Schülern erprobt 36 werden können.   Zum „ Insgesamt der menschlichen Möglichkeiten ”37 gehören auch Er fahrungen über  die eigenen Möglichkeiten und Grenzen. Da ich diesen Punkt für entscheidend wichtig für das Schulfach Informatik halte, gehe ich darauf später ausführlicher ein.  Der dritte Allgemeinbildungsas pekt Klafkis relativiert die Bedeutung fachspezifischer  Inhalte. Als allgemein bildend fasst Kl afki vor allem die Beschäftigung mit Schlüsselproblemen der Menschheit wie Friedensfrag en, Umweltprobleme usw. auf:  Allgemeinbildung heißt im Bli ck auf solche Schlüsselprobl eme also: Auf den verschiedenen Stufen des Bildungsganges bzw. des Bildungswesens sollte jeder junge Mensch  und jeder Erwachsene mindestens in einige solcher Zentralprobleme – im Sinne exemplarischen, gründlichen, verstehenden bz w. entdeckenden Lernens – eingedrungen  sein.38  Teilt man diese Auffassung, dann muss vers ucht werden, entsprechende Schlüsselprobleme, zu denen das betrachtete Fach einen Beitrag leistet, zu benennen, und  dann fachliche Aspekte auch daraufhin zu untersuchen, ob sie auf schulischem Niveau  einen Beitrag zur Beurteilung der Probl eme liefern können, ob sie also den zukünftigen mündigen Bürger daz u befähigen, an der politischen Diskussion dieser  Probleme teilzunehmen39. Hans-Werner Heymann formuliert das so:  Die Verwirklichung von Demokratie und Mens chenrechten setzt Allgemeinbildung als  Bildung für alle (und nicht nur für eine Elite) voraus.40  In diesem Sinne leisten di e naturwissenschaftlich-techni schen Fächer einen wesentlichen Beitrag zur Demokratie , indem sie zur Diskursfähi gkeit unterschiedlicher ge                                                  32 [GI01]  33 [Kla85] S. 17  34 zitiert nach [Hop96]  35 In den Klassenstufen 10 und 11 ist das vermutlich noch wichtiger, weil dort die Entscheidungen für die Leistungsfächer und damit oft eine grobe berufliche Vororientierung fällt – weniger als Positivdenn als Negativentscheidung: Fächer werden „abgewählt“. Eine „Nachwuc hswerbung“ z. B. für den naturwissenschaftlichen Bereich in der Sek. II erreicht damit die Mehrzahl der Schülerinnen und Schüler gar nicht mehr.  36 im Sinne der „Erfahrung Informatik“ (s. o.)  37 bei Heymann zu finden unter „Stärkung des Schüler-Ichs“, z. B. in [Hey95]  38 [Kla85] S. 21  39 Eine ausführliche Erörterung von mir zu diesem Thema findet man in [Mod92a] S. 189  40 [Hey95] S. 47  1.1 Einige Vorgaben der Allgemeinen Didaktik    11  sellschaftlicher (Inter essen-)Gruppen beitragen.41 Im Bereich der Informationstechniken ist der Bedarf im diesem Bereich gerad e jetzt offensichtlich und wird vermutlich  eher steigen als sinken.42     1.1.3 Zur Stellung der „Bildung“ in der Allgemeinbildung  Bildung dient der „wesensmäßigen Selbstverwirklichung der Person“43. Sie muss  „als  Selbstbestimmungsund Mitbestimmungsfähigkeit des Einzelnen und als Solidaritätsfähigkeit  verstanden werden“44.   Unterricht schafft in diesem Sinne eine anregende Umgebung, in der Menschen auf der  Grundlage bedeutsamer Kulturgüter in eine n kulturellen Vermittlungsprozess eintreten  können, in welchem sie ihre ei gene wertvolle Persönlichkeit herausbilden bzw. sich zu  dieser bilden können.45  Weist der Begriff der „ bedeutsamen Kulturgüter “ hier auf eine mehr materiale Auffassung von Bildung hin, also „einen Kanon in sich wertvoller Lerngegenstände, die der gebildete Mensch kennen sollte“46, so lässt die „ Herausbildung der eigenen wertvollen  Persönlichkeit “ immer noch die Frage offen, wie denn dieser Prozess eingeleitet  werden kann, bietet also auch einer fo rmalen Bildungstheorie Raum, die Methoden47  vermitteln möchte, mit deren Hilfe  dann Inhalte, also auch die „ wertvollen Lerngegenstände “ individuell erschlossen werden können.   Die Inhalte eines neuen Fachs werden si ch wohl kaum in einem etablierten festen   Kanon von Lerngegenständen finden. Es ist des halb für die Schulinformatik entscheidend, dass entweder im Sinne der  materialen Bildung innerhalb eines offenen   Kanons Kriterien zur Auswahl von Ler ngegenständen angegeb en werden, anhand  dessen sich „wertvolle“ identifizieren lasse n, oder dass im Sinne einer formalen Bildung zu erwerbende Methoden genannt  werden, die sich nur im Informatikunterricht,  oder wenigstens dort besser al s in anderen Fächern, erwer ben lassen. Für die Praxis  ist diese Trennung künstlich, es ist, wie so oft, ein „Sowohl-als-auch“ wünschenswert,  das der kategorialen  Bildung nach Klafki entsprich t: Im Sinne des exemplarischen  Lehrens und Lehrens we rden anhand ausgewählter  „wertvoller“ Inhalte sowohl Methoden erlernt wie auch Einsichten gewonnen48. Marco Thomas beschreibt das so:  Kategoriale Bildung meint, dass Menschen in der Lage sind, von der Welt begründete,  d. h. durch Erkenntnis gewonnene, geprüfte Aussagen zu machen. Diese Fähigkeit ist  stets an die Inhalte gebunden, die zur Auss age stehen. Formales und materiales Moment bilden damit eine Einheit, die auch de n Bildungsprozess ausmacht, in dem die Fähigkeit zur Aussage und die Aussage selbst gewonnen werden.49                                                        41 Im Bezug zur Kernenergiediskussion: siehe H. Körner in [His95] S. 72  42 Die fehlenden Investitionen der Vergangenheit in den B ildungsbereich beginnen sich ja gerade z. B. bei der  „Greencard“-Diskussion zu zeigen.  43 Stippel, zitiert nach [Kop65] S. 11  44 [Kla85] S. 17, [Kla98a] S. 4  45 [Tho00] S. 1  46 [Bau96a] S. 24  47 Dieser Begriff wird ziemlich weit aufgefasst.  48 [Kla85] S. 90  49 [Tho00] S. 2 1.1 Einige Vorgaben der Allgemeinen Didaktik    12  Der Konsens über einen all gemeinen, weit gefassten Bild ungsbegriff in einer Gesellschaft, der u. a. Entscheidungen darüber zu lässt, bei welchen Ku lturgütern es sich  um „ bedeutsame “ handelt, ermöglicht es, die Element e des Unterrichts und seiner  Planung einzuordnen, zu bewert en, begründet zu akzeptieren oder zu verwerfen:   Eine zentrale Kategorie wie der Bildungs begriff (…) ist unbedingt notwendig, wenn die  pädagogischen Bemühungen (…) nicht in ei n unverbundenes Nebeneinander oder gar  Gegeneinander von zahllosen Einzelaktivi täten auseinander fallen sollen, wenn vielmehr pädagogisch gemeinte Hilfen, Maßnahm en, Handlungen und individuelle Lernbemühungen begründbar und verantwortbar bleiben oder werden sollen.50  Für die praktische Arbeit ist es deshalb entscheidend, über ei nen hantierbaren Bildungsbegriff zu verfügen, also Kriterien zu besitzen, nach denen sich z. B. die „ bedeutsamen “ Kulturgüter eines Faches identifizier en lassen. Ein Beispiel dafür finden  wir in den Kriterien für  Bildungswerte  nach Rolff51:  • Gestaltbarkeit  – historische und politis che Zusammenhänge aufzeigen.  • Durchschaubarkeit  – Wissenschaftsorientie rung und Erkenntniskritik.  • Sinnlichkeit  – zu Eigentätigkeit anregen und Erfahrungen mit dem Erleben verbinden.  • Ganzheitlichkeit  – den Zusammenhang mit der Lebe nspraxis verständlich machen.  • Solidarität  – Beschränkungen abbauen und Lernende stärken.  In der Informatikdidaktik hat sich  der Katalog von Bussmann und Heymann52 weitgehend durchgesetzt, der sehr viel konkretere  und damit direkt an wendbare Kriterien  enthält. Danach dient die Bildung  • der Vorbereitung auf zukünf tige Lebenssituationen,  • der Stiftung kultureller Kohärenz,  • dem Aufbau eines Weltbildes,  • der Anleitung zum kritischen Vernunftgebrauch,  • der Entfaltung eines verantwortlichen Umgangs mit erworbenen Kompetenzen  • und der Stärkung des Schüler-Ichs.  Von diesem Katalog wird in den folgenden  fachdidaktischen Kapiteln ausgegangen,  und dabei wird er noch genauer diskutiert.  Zu beachten ist, dass die in der öffentlichen Diskussion so stark herausgestellte  „Brauchbarkeit “ von Bildung53, individuell gesehen z. B. zur „ Berufsvorbereitung “ oder  Herstellung einer „ Studierfähigkeit “, gesamtgesellschaftlich gesehen als „ Konkurrenzfähigkeit “ der Bildungssysteme im globalen We ttbewerb, in diesen Katalogen nur  sehr versteckt zu finden ist. Solche Gesichtspunkte können  natürlich unter Begriffen  wie „ Vorbereitung auf zukünftige Lebenssituationen “ und „ Stärkung des Schüler-Ichs “  subsumiert werden, sie müssen  es aber nicht. Es bleibt der  aktuellen bildungspolitischen und didaktischen Diskussion überlassen, wie sie die Kriteri en der Allgemeinen  Didaktik im aktuellen gesellschaft lichen Kontext interpretieren will.                                                     50 [Kla85] S. 13  51 zitiert nach [Hop96]  52 [Bus87]  53 Bildung gesehen als Ausbildung 1.1 Einige Vorgaben der Allgemeinen Didaktik    13  Der Wert des Rahmens, den ein allgemein gef asster, im Vergleich zu aktuellen Änderungen zeitlich relativ konst anter Bildungsbegriff für die fachdidaktische Debatte  liefert, liegt gerade darin, dass mit seiner Hilfe unterschiedliche aktuelle Entwicklungen begründet  bewertet werden können54. Er ermöglicht zwar keine Entscheidung  darüber, welche fachlichen Themen im Einzelnen zu behandeln sind55, er gestattet  es aber sehr wohl, den Stellenwert  von fachlichen Inhalten und die Zielrichtung , unter  der sie unterrichtet werden sollten, zu bes timmen und damit z. B. äquivalente Themen zu ermitteln, die einander ablösen können.  In diesem Sinne ka nn die allgemeine  Didaktik der sich viel zu schnell ändernden Informatikdidaktik als dringend erforderliche zeitlich konstante Stütze dienen, di e im Zusammenspiel von allgemeinen und  fachlichen Kriterien einen relativ dauerhaft en Themenkatalog ermittelt, in dem einzelne Bausteine durch gleich wertige aktuelle bei Bedarf ersetzt werden können, ohne  gleich das ganze Ideengebäude zum Einsturz zu bringen.   Ein allgemeindidaktischer Rahmen kann die fachdidaktische Diskussion vor Entgleisungen wie z. B. dem unsäglichen „ Programmiersprachenstreit “56 und der Diskussion  der Brauchbarkeit  von Programmiersprachenkenntni ssen schützen, deren Bewertung  durch die Wirtschaft57 ja ähnlich schnell wechselt wie  die fachdidaktischen Themen.  Er ermöglicht Evaluation des Bestehenden und evolutionäre Weit erentwicklung, und  er sorgt für Werterhaltung bei den Kennt nissen der Unterrichtenden, ohne die ein  Schulfach dauerhaft nicht existieren kann58. Die Vorgaben der A llgemeinen Didaktik  relativieren die Bedeutung ak tueller Fachthemen durch die Frage nach deren Bedeutsamkeit als Kulturgut und dem Bedarf, bei  ihrer Behandlung allgemeine Methodenkenntnisse im oben angegebenen Sinne zu erwerben. Sie erzwingen so m. E.  eine stärkere „Theoretisierung“ des Informati kunterrichts, da die Beiträge zur Kultur  eher in den dauerhaften theoret ischen Grundlagen als in technischen Details zu finden sind59. Sie ermöglichen durch ihre Weite aber auch das Eingehen auf aktuelle  Trends, wenn diese nicht als Selbstzwe ck behandelt werden, sondern innerhalb des  Zielkatalogs zu begründen sind60. Da der Reiz des Faches bei den Unterrichteten  und wohl auch bei vielen Unterri chtenden gerade in der Aktualität liegt, bietet sich so  die Chance, diesen speziellen Charme des Fachs zumindest teilweise zu erhalten.                                                    54 s. auch [Mod91] S. 36  55 s. [Hey95] S. 48  56 der m. E. nach wie vor andauert, denn in der Litera tur nehmen Beiträge über di e jeweils neuesten Programmiersprachen – unter wechselnden Überschriften, z. B. getarnt als „Paradigmendiskussion“ – immer noch einen  unverhältnismäßigen Raum ein.   57 Aktuelle Brauchbarkeit ist m. E. überhaupt kein Kriterium für allgemein bildende Schulen, weil die Vorlaufzeiten bis zum Berufseintritt für unsere Schülerinnen und Schüler viel zu hoch sind, als dass die aktuellen Stellungnahmen der Wirtschaft zu diesem späten Zeitpunkt noch eine Relevanz hätten.  58 In der derzeitigen Situation meist ohne universitäre Fachausbildung kann den we itgehend autodidaktisch „ausgebildeten“ Lehrerinnen und Lehrern kaum zugemutet werden, diesen Lernaufwand dauerhaft durchzuhalten.  Aber auch dann, wenn Informatik als Studienfach etabliert ist, müssen die in der Universität gewonnenen Fachkenntnisse eine längere „relevante“ Lebensdauer haben als heute.  59 s. a [Schu99] S. 8  60 z. B. durch persönlichkeitsbildende Ziele 1.2 Zum Lernen    14  1.2 Zum Lernen  1.2.1 Lernen in Strukturen61  Um die Wirkung von Unterricht zu beurteilen,  sind die formalen Aspekte der Bildung  schlechter geeignet als die materialen, und  auch die müssen erst mal eine Auswirkung hinterlassen, also im Gedächtnis vera nkert werden. Zu fragen ist also nicht nur,  was gelehrt werden soll, sondern ebenso, wie die Vermittlung zu erfolgen hat, um  diese „Spuren“ zu erzeugen. Jero me Bruner beschreibt das so:  Vielleicht das Grundlegendste, was man nac h einem Jahrhundert intensiver Forschung  über das menschliche Gedächtnis sagen kann, ist, dass Einzelheiten schnell wieder ver-gessen werden, wenn sie nicht in eine strukt urierte Form gebracht worden sind. Detailliertes Material wird im Gedächtnis unt er Anwendung vereinfachender Darstellungsweisen aufbewahrt. Diese vereinfachenden Darstellungen haben sozusagen eine „regenerative“ Funktion. 62   Lernen erfordert also die Umwa ndlung des präsentierten „S toffs“ in mehreren weitgehend gleichzeitig ablaufenden Schritten63 über die Aneignung  zur Transformation64  und Wertung . Diese sind „nur über die aktive Betei ligung der Lernenden möglich“65.  „Verstehen ist auf die geistige Aktivität der Lernenden angewiesen.”66 Dafür müssen die  Lernenden u. a. das Zi el und den Sinn des Unterrich ts erkennen, sie müssen das zu  Lernende mit möglichst viel vorhandenem Wi ssen in Beziehung setzen, es „vernetzen“, und sie müssen vor allem in der Lage se in, dies zu tun. Da die vorliegende Arbeit sich nur mit Informatikkursen der Sek.  II beschäftigt, sind die lernpsychologischen Voraussetzungen in der betrachteten Altersgruppe nach Piaget erfüllt, um  neues Wissen konstruktiv in bestehendes ei nzuordnen. Zu fragen ist aber nach einem Kontext, in dem das effizient geschehen kann.  „Der Erwerb von Wissen setz t stets schon Vorwissen voraus“67, das in sehr unterschiedlicher, nicht unbedingt bewusster Form vo rliegen kann. Dieses vorhandene Weltbild  prägt die Haltung der Ler nenden zum Lerngegenstand, aber auch zum Lernen überhaupt, nicht nur in kognitiver, sondern auch in affektiver und operativer Hinsicht; es  kann Lernen erleichtern, aber  auch erschweren und sogar verhindern. Besonders die  Transformation und die Wertung neuer Informati onen erfordern, wenn sie fast gleichzeitig mit dem Wissenserwerb ablaufen, einen ordnenden Rahmen, also Vorwissen.  Neues Wissen muss einerseits in bes tehende Strukturen eingeordnet werden68, andererseits Strukturen und Ha ltungen aufbauen, die weit eres Lernen ermöglichen69.  „Zur Beherrschung der grundlegenden Kategorien eines Lehrfachs gehört nicht nur das Be-greifen allgemeiner Prinzipien, sondern auch das Herausbilden einer Einstellung gegenüber  Lernen und Forschen, Vermutungen und Ahnungen, sowie der Möglichke it, Probleme aus  eigener Kraft zu lösen.” 70 Wenn Lernen also Haltungen verändert, die wiederum das                                                    61 weitgehend nach Bruner und Klafki  62 [Bru70] S. 36  63 [Bru70] S. 57  64 um ihn für neue Anwendungen tauglich zu machen  65 [Hub00] S. 10  66 [Hey95] S. 54  67 [Ber98] S. 41  68 und diese dabei ggf. verändern.  69 [Ben02] S. 4: “ Knowledge is acquired recursively: sensory data is combined with existing knowledge to create  new cognitive structures, which are in turn the basis for further construction.”  70 [Bru70] S. 33  1.2 Zum Lernen    15  Lernen beeinflussen, dann muss das Gelernte71 nicht in einem Schritt erworben werden, sondern ist besser über eine „Spirale “ aus Vorbereitungsund Präzisierungsschritten zunehmend zu erfassen. Die einzel nen Schritte müssen fortsetzbar sein,  Begriffe präfigurieren72 und können, wenn es erforder lich ist, Wissensgebiete schon  in einer einfachen Sicht vorwegnehmen, bev or sie später abschließend behandelt  werden. Sie müssen den Lernenden vor allem die Strukturen deutlich machen, also  die Regeln, die auf dem gerade bearbeiteten Gebiet herrschen:  Wie kann man erreichen, dass seine Darstellung  in ihrem Denken fü r den Rest ihres Lebens etwas bedeuten wird? Nach der vorherrs chenden Ansicht (...) liegt die Antwort auf  diese Frage darin, den Schülern ein Verst ändnis der Grundstruktur jeglichen Lehrgegenstandes zu vermitteln, den wi r für den Unterricht auswählen.73  Nach Bruner zeigt sich die Stru ktur eines Faches in seinen fundamentalen Ideen74,  weil erst in deren Kontext fachliche Inhalte, also spezifische Sachverhalte und Fertigkeiten, einzuordnen sind. Sie gestatten es, Ge lerntes zu verallgemeinern, zu übertragen und so „ praktisch verwendbar “ zu machen. Ähnlicher Meinung ist Klafki:  Lernen ... muss in seinem Kern entdeckendes bzw. nachentdeckendes und sinnhaft, verstehendes Lernen anhand exemplarischer Them en sein, ein Lernen, dem die reproduktive Übernahme von Kenntnissen und alles Tr ainieren, Üben, Wiederholen von Fertigkeiten eindeutig nachgeordnet oder besser: ei ngeordnet werden muss, also als notwendige, aber nur vom entdeckenden und/oder verstehenden Lernen her pädagogisch begründbare Momente.75    1.2.2 Entdeckendes Lernen  Das nicht nur von Klafki geforderte entdeckende  Lernen76 setzt nun noch mehr als  das Lernen überhaupt aktive  Lernende voraus und damit ei ne Haltung, die Lernen  fördert. „Um solche Einstellungen durch Unterricht  zu vermitteln, braucht man ein wenig  mehr als die bloße Darbietung gr undlegender Ideen. (...) aber es  scheint, dass dabei ein für  Entdeckungen zu begeisternder Sinn ein wichtig es Ingredienz ist für die Entdeckung von Regelhaftigkeiten bislang nicht erkannter Beziehungen und von Ä hnlichkeiten zwischen Ideen  mit einem sich daraus ergebenden Gefühl des Selbstvertrauens in die eigenen Fähigkeiten.”77  Entdeckendes Lernen förder t also genau die Haltungen, di e für entdeckendes Lernen  erforderlich sind. Ein solcher Unterricht, re chtzeitig begonnen, trägt, wenn er erfolgreich ist, sich selbst.  In diesem Zusammenhang ist Vorsicht bei der Unterrichtsplanung geboten. Wird der  Unterricht stark lernzielorientiert aus gerichtet, dann kann entdeckendes Lernen erschwert werden:  Wer das Ziel verfolgt, dass Schüler (...) eigene Fragen und Vorsc hläge einbringen, dass  sie möglichst selbstständige Wege zu einem von ihnen als sinnvoll erkannten Ziel erlernen, sei es auch über Irrtümer und Umweg e, der kann das „zweckrationale Unterrichtskonzept“ allenfalls für begren zte Teile des Unterrichts akzeptieren.78                                                    71 zitiert nach [Tho00] S. 18  72 Die Begriffe werden intuitiv benutzt, bevor sie vollständig analysiert werden.  73 [Bru70] S. 25   74 [Bru70] S. 42  75 [Kla85] S. 85  76 z. B. [Wag80]  77 [Bru70] S. 33  78 [Kla85] S. 85 1.2 Zum Lernen    16  Entdeckendes Lernen setzt aktive Be schäftigung mit dem Ler ngegenstand voraus,  und die kann – besonders anfangs – nicht nur im kognitiven Bereich liegen. Selbstständiges Arbeiten in einem Bereich, mit einem Gegenst and, für einen Zweck, hilft,  Probleme erst einmal zu finden, einzuor dnen und adäquate Fragen zu formulieren.  „So liegt ja auch den praktischen Übungen in  den Schullaboratorien die Annahme zugrunde,  dass etwas tun einem hilft, es zu verstehen.“79 Wenn also in den Naturwissenschaften  praktisches Experimentieren für unverzich tbar für einen erfolgreichen Unterricht  gehalten wird80: Weshalb sollte im Informatikunte rricht auf Phasen aktiver Schülerarbeit zugunsten von noch mehr deskripti vem und interpretierendem Handeln verzichtet werden? Die „Vergeisteswissenschaftlichung“  der Informatik entspricht zwar weitgehend der „normalen“ Arbeitsweise der Sek.  II, nimmt dieser Schulform aber die  Chance, auch eine andere Seite produktiven Tuns erlebbar zu machen. Die im Anhang dieser Arbeit vorgestellten Ergebnisse geben zumindest für die Schülerinnen  und Schüler von Informatikkursen starke Hin weise, dass gerade diese ein entsprechendes Vorgehen auch wünschen.  Eine der am wenigsten erörterten Möglich keiten, einen Schüler durch eine schwierige  Unterrichtseinheit zu bringen, ist, ihn durch eine Gelegenheit, einmal zu zeigen, was in  ihm steckt, anzuspornen, damit er die Freude entdeckt, erfolgreich und völlig aus sich  heraus zu wirken.81  Wenn die Experimentierphasen  des entdeckenden Lernens teilweise dem analytischen Ordnen und Werten der Erfahrungen vo rangehen, wenn also Vorerfahrungen  gemacht werden, die erst später in neue oder vor handene Strukturen einzuordnen  sind, dann kann das für die Ar beit auf einem Gebiet ei gentlich benötigte systematische Wissen nicht vorausgesetzt werden, denn das soll ja erst gewonnen werden.  Wollen die Schülerinnen und Schüler trot zdem aktiv „forschen“, dann müssen sie  zumindest teilweise die nächsten Arbeitsschritte  intuitiv ermitteln: sie müssen „raten“.   „Was wir die Schüler zu erkennen lehren so llten ist wahrscheinlich sowohl, wann die  Kosten des Nicht-Ratens zu hoch sind, als auch wann das Raten selbst zu teuer wird.“82   Wenn „ Raten “ bedeutet, mit der Arbeit zu beginn en, ohne die Lösung,  das Ergebnis  der Arbeit, zu kennen oder überhaupt zu wiss en, ob es eine Lösung gibt, dann bildet  im Bereich der Informatik der Prozess, zu  einem Problem einen eigenen Algorithmus  zu finden, wenigstens teilweise eine Form des  Ratens. Natürlich gibt es systematische Verfahren, die bei der Lösungssuche helf en. Trotzdem bleibt ein wesentlicher  Rest intuitiven Denkens erforderlich, da diese Verfahren das Ergebnis nicht determinieren. „Solches Denken erfordert daher die Bereit willigkeit, im Bemühen um Lösungen von  Aufgaben, ehrliche Fehler zu machen.“83 „Ehrliche“  Fehler führen in Sackgassen, müssen gefunden, analysiert und korrigiert werd en – und das erfordert Zeit. Dieser Zeitbedarf ist gerechtfertig, wenn der Lösungsproz ess inklusive aller Fehler selbst Gegenstand des Unterrichts ist, wenn also die Inhalte, anhand derer Problemlösungsverfahren erprobt werden, den Me thoden klar nachgeordnet sind.  Gerade die Möglichkeit, Fehler zu machen  und daraus zu lernen, erfordert Zeit und  Muße. Diese wird sich aber kaum einstell en, wenn Lehrer, Schülerinnen und Schüler in  dem Bewusstsein leben, in dieser Zeit  „nicht im Stoff voranzukommen“.84                                                     79 [Bru70] S. 41  80 „Begreifen“ kommt ja nicht ohne Grund „von den Händen“.  81 [Bru70] S. 59  82 [Bru70] S. 72  83 [Bru70] S. 73  84 [Mod91] S. 22 1.2 Zum Lernen    17  Selbstständig arbeitende, intrinsisch motivi erte Schülerinnen und Schüler lernen im  Lernen das Lernen, und sie lernen das wesent lich besser, als wenn sie nur durch  Zensuren motiviert werden. In dies em Fall besteht immer die Gefahr, „dass das Lernen  aufhört, sobald die Zensuren nicht mehr er teilt werden – nach der Abschlussprüfung.”85 Aktive Auseinandersetzung mit dem Unterrich tsthema, möglichst nach eigenen Fragestellungen und mit selbst gew ählten Methoden, mit der Möglichkeit Fehler zu machen, sie zu lokalisieren und zu korrigier en, fördert eine Haltung, die dem zu beobachtenden Trend des passiven „Unterhalt enwerdens“ massiv entgegensteuert. Sie  erzeugt „Frustrationstoleranz“ und Durc hhaltevermögen durch b egründetes Selbstvertrauen, und sie verleiht der Bildung ei nen Eigenwert, der au ch dann Bestand behält, wenn der Gebrauchswert des Gelernten nicht den Erwartungen entspricht.    1.2.3 Soziales Lernen  Lernen in der Schule findet immer im sozial en Verband statt. Man kann es unter dem  Gesichtspunkt der beteiligten Akteure sehen. Darunter sind Lehrer innen und Lehrer,  Schülerinnen und Schüler und – im Bereich der Informatik – ggf. auch Computer und  die daraus gebildeten Netze zu verstehen. Die letzteren, meist bezeichnet als Informatiksysteme , verschieben ein wenig den Gesi chtspunkt auf eine eher technische  Sicht der Kommunikation. Sigrid Schubert z. B. rechnet zum Bildungswert der Informatik u. a. Sozialkompetenz  und versteht darunter „Bewertungskriterien, Möglichkeiten  und Grenzen, gesellschaftliche Auswirkunge n, Verständnis für Sprachen, Mensch-MaschineKommunikation, Telekommunikation“86. Das sind sicherlich alles Aspekte, die im Sozialen eine Rolle spielen; sicherlich stehen aber  z. B. die hier gemeinten formalen Sprachen nicht im Zentrum der (menschlich en) Kommunikation in der Schule.  Man kann soziales Lernen auc h auffassen als ein Lernen miteinander , voneinander   und füreinander .   Das Miteinander  ergibt sich zwangslä ufig durch die schulis che Organisation, wenn  man sich auf die physische Anwesenheit beschränkt. Ob das Lernen aber wirklich  gemeinsam erfolgt, also im Miteinander , hängt wesentlich vom Ablauf des Unterrichts  ab und wird durch eine ausschließlich indivi duelle Leistungsbewertung in der Sek. II  nicht gerade gefördert87.   In jeder Kommunikation ist ein Inhaltsund ein Beziehungsaspekt zu erkennen. Die Inhaltsebene wird in der Schule weitgehend dur ch das Curriculum festgelegt. Auf der Beziehungsebene kommt die Art und Weise zum Tragen, wie die Information im LehrerSchüler-Verhältnis vermittelt wird.88  Miteinander Lernen erfordert die Bereit schaft, aufeinander einzugehen, zuzuhören,  zu argumentieren, eig ene Ansichten darzulegen89 und zu verteidigen. Es fördert die  Einsicht in eigenes Können und eigene Grenz en, die entweder akzeptiert oder überwunden werden müssen. Es erfordert Rücksich t einerseits auf Langsamere, die ein  Recht auf sinnvolle Teilhabe am Lernproz ess haben, wie auf Schnellere, die ebenso                                                    85 [Bru70] S. 60  86 [Schu99] S. 24  87 Auch die unverhältnismäßige Bedeutung, die den Zensuren in der Vergangenheit z. B. bei der Studienplatzverteilung zugemessen wurde, verhinderte oft ein Klima der Zusammenarbeit.  88 Watzlawick 1972, zitiert nach [Tho00] S. 4  89 und natürlich erst einmal zu entwickeln 1.2 Zum Lernen    18  ein Recht auf die Erprobung und Erwe iterung eigenen K önnens besitzen90. Das alles  braucht Eigenschaften, die im Zeitalter der Ein-Kind-Familien weniger denn je als  selbstverständlich vorausgesetzt wer den können, die aber unter dem Stichwort  „Teamfähigkeit “ inzwischen oft höher als fachliche  Kenntnisse eingeschätzt werden.  Steffen Friedrich fasst das wie folgt zusammen:  Informatik hat in der Allgemeinbildung erst  recht einen festen Platz, wenn man das  Schulfach nicht nur als fachlichen Aspekt be trachtet. Im Rahmen des Unterrichts werden Arbeitsmethoden entwickelt und gefestigt, deren Bedeut ung für den Schüler zu wenig beachtet wird. Das betrif ft. z. B. handlungsorientiertes Lernen / experimentelles Arbeiten, Gruppenarbeit / Projekt als Arbeitsfo rmen, Präzision / Genauigkeit im Arbeitsablauf, Arbeit mit computer gestützten Lernumgebungen.91  Beim Miteinander-Lernen muss es sich nicht unbedingt um eine sehr ernsthafte Veranstaltung handeln. Bei Jugendlichen hat das Mi teinander immer auch einen spielerischen Zug, den Hischer betont: „Die so genannte ‚Wissenschaftsorientierung’ hat zu  einer unerfreulichen kogniti ven Überbetonung des Unterr ichts insgesamt geführt.“92 Er  empfiehlt, Mathematik und Informatik te ilweise als Spiel zu  betreiben, denn „Spielen  öffnet Spiel-Räume“93, und Spielraum braucht  der Mensch zur eigenen Entfaltung. In  Spielen werden Fähigkeit en entwickelt und er probt sowie Erfa hrungen gewonnen,  die auf ernsthafte Tätigkeiten vorbereiten.  In diesem Sinne ist Schule ein Spiel, sie  kann und sollte diesen Aspekt sehr viel st ärker betonen als bisher, denn Spielen hat  auch mit Spaß und Freude zu tun, die dem Lernen nur gut tun können.  Zum Miteinander kommt das Voneinander , wenn unterschiedliche Qualitäten der  Beteiligten eingebracht werden94. Eine altbekannte Form davon ist das „ EinanderHelfen “, wobei der Helfende meist mehr lern t als der, dem geholfen wird. Bezieht  man den Computer in die „sozialen“ Beziehungen ein, dann kann dem Computer  „geholfen “ werden, indem helfende,  weil mit Verständnis gesegnete Schülerinnen  und Schüler ihm ihre Kenntnisse „ beibringen “, ihn also programmieren.95 Die Rolle  „des Lernenden “ scheint mir in der Schule für den Computer sehr viel angemessener  zu sein als die des „ geduldigen Lehrers “. Heranwachsende96 geheimnissen in Computer Kenntnisse und F ähigkeiten herein, die di ese weitgehend personifizieren97. Wir  sollten diese irrationale Sicht nicht noch ve rstärken. Wenn Aufklärung bedeutet, Systeme durchsichtig und somit verständ lich zu machen, dann kann Programmieren  eben dazu verhelfen, indem es den Schül erinnen und Schülern Rechner als Maschinen zeigt, die so gesteuert werden, dass sie verständnislos Teile dessen automa-tisch verrichten, das die Programmi erer selbst können und verstanden haben. 98  In projektartigen Unterrichtsphasen mit unt erschiedlicher Aufgabenverteilung ergibt  sich das Voneinander, ohne eine Hierarchi e zwischen den Betroffenen zu erzeugen.  Auch wenn hier auf diese Arbeits form nicht näher eingegangen werden kann99, bleibt  festzustellen, dass die dafür erforderli che Organisation der Zusammenarbeit einer                                                  90 [Kla98c] S. 4: „Lehrer guter Schulen richten ihr Augenmerk in mindestens gleichem Umfang auf die leistungsstärkeren wie auch auf die leistungsschwächeren Schüler.“   91 [Fri95] S. 33  92 [His94] S. 14  93 gemeint als „spielerische Freiräume“  94 s. a. “the peer-learning aspect” in [Dan00]  95 s. auch [Schw96] Teil B  96 und nicht nur die  97 s. nächster Abschnitt  98 nach [Bus87] S. 17: „In erster Näherung lässt sich also sagen, dass ein Computer genau die intelligenten  Operationen ersetzen kann, die der Mensch re gelhaft darstellen und symbolisieren kann.“  99 siehe dazu z. B. [Mod91] oder [Schu99] 1.2 Zum Lernen    19  seits erhebliche erzieherisc he Bedeutung hat, andererseits in  der Schule nur selten  zu finden ist. Entsprechend rechtfertigen viele Au toren das Schulfach Informatik u. a.  damit, dass diese Arbeitsform informatikspezifisch ist: „Die kooperative Arbeit, die soziales Lernen befördert,  ist Grundbaustein der Didaktik der Informatik.“100 „Die kooperativen  Arbeitsformen sind so informatikspezifisch, dass sie im Rahmen einer wissenschaftspropädeutischen Ausbildung unve rzichtbar erscheinen.“101  Das Füreinander-Lernen  fördert die von Klaf ki und Rolff geforderte Solidaritätsfähigkeit102, die sich z. B. in „der Entfaltung eines verantwort lichen Umgangs mit erworbenen  Kompetenzen“103 manifestiert. Es setzt Kenntnisse der Möglichkeiten und Grenzen  von Computersystemen voraus, die sich nicht nur fachlich ergeben, sondern ebenso  aus ethisch-moralischen Überlegungen: „Hierzu gehören nicht nur prinzipielle Grenzen  des Computers, sondern auch mensch liche Grenzen seines Einsatzes.“104 Füreinander Lernen bedeutet auch, die erworbenen Kenntni sse und Fähigkeiten nicht nur für sich  einzusetzen (z. B. für bessere Zensuren) , sondern anderen zur Verfügung zu stellen  (z. B. um das Gruppenprojekt erfolgreich abzusch ließen), es erfordert Einsicht in das  Privileg, lernen und sich per sönlich weiterentwickeln zu  können, in die Voraussetzungen, unter denen das geschieht, und in die Verpflichtungen, die sich daraus ergeben.  Veränderungen durch soziales  Lernen zeigen sich nicht nur bei den Schülerinnen  und Schülern, sondern auch bei den Unterri chtenden. So schreibt Berger in „ Informatische Weltbilder: Profe ssionelle Konzeptionen von Mathematik-Informatik-Lehrern“: „Informatiklehrer sind a posteriori innov ativ. Die Beschäftigung mit und das Lehren  von Informatik ‚macht’ gewissermaßen innovativ.“105      1.2.4 Pragmatischer Konstruktivismus  Die bisher angestellten Überlegungen finde n einen einheitlichen theoretischen Rahmen in der erkenntnistheoretischen106 Denkschule des Konstruktivismus. Dieser basiert u. a. auf den Arbeiten Piagets107 und nimmt eine Position ein, die der nichtklassischen Physik sehr ähnelt, indem er nich t mehr von einem erkennenden Subjekt  ausgeht, das einer objektiven Wirklichkeit gegenüber steht, sondern feststellt, dass  sich alles Wissen über  eine – scheinbare – „ Wirklichkeit “ ausschließlich im erkennenden Subjekt findet, das sich ein Bild  seiner (Um-)Welt konstruiert108. Der Konstruktivismus untersucht also „die Art und Weise, wie wir Menschen unsere eigene Wirklichkeit erschaffen“109.                                                      100 [Hum00] S. 11  101 [Schu99] S. 105  102 [Kla85] S. 17  103 [Bus87]   104 [Koe95] S. 64  105 [Ber98] S. 48  106 oder lerntheoretischen – je nach Sichtweise  107 und wohl auch auf denen Bruners: s. [Ben02] S. 5  108 Christiane Floyd in „Das Mögliche ermöglichen“ (1997): „Der Konstruktivismus lehrt, dass unsere Erkenntnis durch Konstruktion zustande kommt, er macht damit keine Aussage über das Seiende.“   109 Paul Watzlawick zitiert nach [BeB02] 1.2 Zum Lernen    20  Der Konstruktivismus ist keine Theorie des Seins, formuliert keine Aussagen über die  Existenz der Dinge an sich, sondern ist eine Theorie der Genese des Wissens von den  Dingen, eine genetische Erke nntnistheorie. Für den Konstr uktivismus ist Wissen kein  Abbild der externen Realität, sondern eine Funktion des Erkenntnisprozesses.110  Ich kann hier aus Platzgründen nicht auf die erkenntnistheoretischen Folgen einer  solchen Position eingehen, so ndern will mich auf die o ffensichtlichen lerntheoretischen Folgerungen beschränken.  Dieter Wolff meint dazu:  Lernen wird als eine aktive Tätigkeit ge sehen, die vom Lernenden selbstständig durchgeführt werden muss. Der Lernende konstr uiert sich sein Wisse n aus den angebotenen  Informationen – Lernen wird als „kreativer Konstruktionsprozess“ gesehen.111   In dieser Sicht ist Wissen nicht direkt vermittelbar, sondern muss durch Aktivitäten  der Lernenden erworben werden112. Diese entwickeln, ausgehend von ihrem Vorwissen113, ein Modell der erfahrenen Wirklichkeit, das  „passt“, also zu keinen direkten  Kollisionen mit der  Erfahrung führt114. Da an die entwickelten Vorstellungen von der  Welt nur die Forderung gestellt wird, zu passen,  werden die von verschiedenen Lernenden konstruierten mentalen Wirklichkeiten nicht identisch sein, müssen sich noch  nicht einmal ähneln. Sie müssen nur gültig115 sein – jede auf ihre Art.   Constructivism claims each individual neces sarily creates cognitive structures […].  Furthermore, it claims that each individual will perform the construction differently,  depending on his or her pre-existing knowle dge, learning style and personality traits.  Hopefully, the construction is viable […]. Un fortunately, but perhaps inevitably, many  users construct non-viable models.116  Der Grad der erforderlichen Gültigkeit des  Wissens hängt nun davon ab, mit welcher  Intensität eine Auseinanderse tzung mit dem Bereich der Welt erfolgt, über den dieses Wissen erforderlich ist. Bleibt der K ontakt oberflächlich, so genügen auch oberflächliche Konstrukte, um die Kontakte erfo lgreich – jedenfalls nicht negativ – zu bewältigen. Je eingehender di e Beschäftigung mit einem Bereich wird, desto häufiger  werden Kollisionen des bi sher konstruierten Modells dieses Bereichs mit der Erfahrung erfolgen, und desto genauer wird das nach diesen Kol lisionen umkonstruierte  Modell auf diesen Bereich passen.   Die konstruktivistische Lerntheorie sieht Le rnen also als eine Art „Verschärfungsprozess“, in dem ein anfangs ungenaues – aber ni cht falsches – Bild der Wirklichkeit  durch aktive Auseinanderse tzung zunehmend präzisiert – also „schärfer“ – wird.117                                                    110 Rolf Schulmeister, zitiert nach [BeB02]  111 [Wol97]  112 [Thi97] S. 12: „Lernen ist nicht Übernahme von Wissen, sond ern aktives Aufbauen von Wissensstrukturen,  ein aktives Konstruieren.“  113 [Wer98 ]:  „Einfach gesagt umfasst diese Auffassung, dass eine Person nicht von außen zu einer bestimmten  Reaktion veranlasst bzw. determiniert werden kann, s ondern dass immer die interne Struktur der Person bestimmt, wie sie sich mit Anregungen, die aus dem umge benden Milieu kommen, auseinandersetzt. Jede Form der  Beeinflussung […] muss sich damit auseinandersetzen, da ss es keine direkten, instruktiven Interaktionsbeziehungen geben kann.“  114 Diese Art der „Passung“ entspricht der evolutionären Anpassung an die Umwelt.  115 und nicht „wahr“  116 [Ben02]  117 Hier werden Einflüsse der evolutionären Erkenntnistheorie spürbar, etwa die Beschreibung des Weltbilds  einer Amöbe von Konrad Lorenz. 1.2 Zum Lernen    21  Lernen heißt, mentale, kognitive Landkarten zu konstruieren, die i mmer mehr detailliert  und verfeinert werden. Nicht sequentiell vo m Einfachen zum Komplexen voranschreiten118, sondern Gesamtstruktur konstruieren lassen, die im Laufe des individuellen  Lernprozesses an Schärfe gewinnt , d. h. Gesamtheit vor Detail.119  Eine Änderung in diesen „Landkarten“ – neues  Wissen – wird konstruiert, wenn Störungen auftreten, also das bi sherige Modell zu Misserfol gen führt. Damit stören Probleme nicht den Lernprozess, sondern sie verursachen ihn: „Lernschwierigkeiten und  Probleme sind nicht möglichst schnell abzuste llen, sondern bieten die Chance, die wesentlichen Fragen und damit das Thema tiefer zu verstehen.“120. Da Störungen von den  Lernenden selbst als stör end empfunden werden müssen, erfordert Lernen einen  engen Bezug der Lernenden zum T hema. Im günstigen Fall kann dieser schon vorhanden sein, z. B. weil das Thema in Be ziehung zur Erfahrungswe lt der Lernenden  steht. Anderenfalls muss er z. B. aus der praktischen Auseinandersetzung mit dem  Thema entstehen121. Bleibt die Beziehung zwisch en Lernenden und Thema indifferent, dann bleiben diese gegenü ber Störungen gleichgülti g und haben keinen Anlass,  neues Wissen zu konstruieren. „Ereignisse im Unterricht, die nicht als Perturbationen  wirken, führen auch nicht zu strukturelle n Umwandlungen subjektiver  Systeme und können  somit auch keine Lernprozesse in Gang setzen.“122 Das verlagert einen Teil der Verantwortung für den Erfolg und/oder Misserfol g von Lernprozessen hin zu den Lernenden. Zwar müssen die Unterrichtenden für Unte rrichtsinhalte motivieren, aber es wird  auch von den Lernenden die Bereitschaft und di e Fähigkeit erwart et, Interesse zu  entwickeln. Bleibt Passivität und Desinteresse vorherrsc hend, dann sind Lernerfolge  ausgeschlossen123.  Man braucht in der Tat gar nich t sehr tief in das konstruk tivistische Denken einzudringen, um sich darüber klar zu werden, dass di ese Erkenntnistheorie zur einer alleinigen  Verantwortlichkeit des denkenden Menschen für sein Denken, Wissen und Tun führt.  Behavioristen schieben alle Verantwortung nach wie vor auf die Umw elt, Soziobiologen  einen großen Teil auf die Gene; daher ist eine Lehre ungemütlich, die andeutet, dass  wir unsere Lebenswelt uns selbst zu verdanken haben.124  Was folgt nun daraus für die Lehrenden?  Unterrichten ist somit der Versuch der Anregung von komplexen affektiv-kognitiven  Systemen, die nach ihrer eigenen Logik operier en. Sie sind selbstreferentiell, weil jede  ihrer Handlungen auf ihre Struktur zurückwir kt und diese bestätigen oder verändern  kann. Aufgrund der funktionalen Beziehungsst ruktur zwischen Organismus und Umwelt  werden ständig Wirklichkeitskonstruktione n als Routinen angewendet, teilweise neu  entwickelt, überprüft, bestä tigt, verworfen usw. Diese aktive Beziehungsgestaltung zwischen Subjekt und Umwelt ist der Ansatzpunkt jeder Beeinflussung.125                                                     118 [DLP02]: “Encourage students to make meaning by breaking wholes into parts. Avoid starting with the parts  to build a ‘whole.’”   119 [Thi97] S. 9  120 [Thi97] S. 9  121 [Boy00]: “A central constructivist criticism of traditional form al teaching is that it is disembedded from the  students’ experience outside the classroom.”   122 [Dah00]  123 Diese einfache Einsicht entspricht natürlich auch der Erfahrung.  124 Ernst von Glaserfeld 1995, zitiert nach [Dor99]  125 [Wer98] 1.2 Zum Lernen    22  Die Unterrichtenden unterstützen den Konstruktionsprozess durch Anregungen, Hilfen und Kontrollen126. „Dem Lehrer ist es unmöglich, sein e Kenntnisse dem Lerner direkt  weiterzugeben. Vielmehr hilft er dem Lerner  durch sein Tun, durch Hinweise, Fragen und  Informationen, selbst Wissen zu konstruieren.“127 Wissen entsteht, indem frühere Erfahrungen des Lernenden mit neuen Situatio nen in Beziehung gesetzt werden.128 Soll  der Prozess gesteuert ablaufen, dann müss en die Lehrenden natürlich Kenntnisse  über dieses Vorwissen besitzen. Die Vorerfahrungen der Lernenden werden normalerweise bei einer weniger detaillierten Betrachtung des Lerngegenstands als in der  aktuellen Unterrichtssituati on gebildet worden sein. Sie sind deshalb in der neuen  Sicht nicht mehr gültig, auf unterschiedliche  Art unvollständig, aber nicht falsch. In  diesem Zusammenhang sind dann einfache Tests, die zur Leistungsmessung meist  ungeeignet sind, als Hilfsmittel zur Diagnostik des Vorwissens in einem neuen Licht zu sehen. Gemeint sind damit Aufgaben wie die Ermittlung der Resultate bestimmter  Befehlfolgen 129: z. B.  read(A,B);  read(B);  write(A,B,B); .  Werden diese nicht zur  Leistungsmessung eingesetzt, sondern um ungül tige Vorstellung (hier: vom Variablenkonzept) offen zu legen, dann haben sie in diesem Zusammenhang durchaus  ihren Sinn.130  Entscheidend für den konstruktiven Prozess des Wissenserwerbs sind bereits bestehende  Wissensstrukturen; der Lernende  konstruiert sein Wissen, indem er die Erfahrungen in  Abhängigkeit von diesem Vorwissen und auf Grundlage bestehender Überzeugungen interpretiert.131   Damit ist „Lehren nicht die Vermittlung und Lernen nicht die Aneignung eines extern vorgegebenen ‚objektiven’ Zielzustandes, sondern Le hren ist die Anregung des Subjekts, seine Konstruktionen von Wirklichkeit zu  hinterfragen, zu überprüfen, weiterzuentwickeln, zu verwerfen, zu bestätigen etc. Das bedeutet auch, eine  Vielfalt von Lernwegen zu ermöglichen, wie sie  in Formen des offenen Unterrichts, des projek torientierten Unterrichts und des forschenden  Lernens umgesetzt wird. Vielfalt bedeutet die Öffnung der Räume.“132 Die unterschiedlichen – und den Lehrenden nur unvollkommen bekannten – mentalen Konstrukte der  Lernenden erfordern die Au seinandersetzung mit dem Lerngegenstand auf unterschiedliche Weise:  • einerseits, um dem unterschied lichen Vorwissen gerecht zu werden,  • andererseits, um durch die Vernetz ung des neu Gelernten mit unterschiedlichen Bereichen der Vorerfahrung ein möglic hst valides Bild der Realität zu  konstruieren.   Als erstes sollten daher den Lernenden die Gründe vermittelt werden, warum bestimmte  Weisen des Handelns und Denkens als wünschenswert betrachtet werden. Daraus folgt notwendig die Erklärung der spezifischen Zu sammenhänge, in denen das zu erwerbende  Wissen angeblich funktionieren soll. 133                                                    126 [Hen96]: “The goals of the teacher are to engage the learner in active participation, problem solving,  interdisciplinary work, reflection and discussion.”   127 [Thi97] S. 8  128 [Wer98]  129 nach [Ben02] S. 7  130 Analoges ist aus dem Physikunterricht für elementare  Fragen aus der Mechanik bekannt: Hier können auf  ähnliche Weise aus Erfahrung erworbene Vorstellungen der Aristotelischen Mechanik („Impetusprinzip“) der  Newtonschen Mechanik gegenüber gestellt werden.  131 [Bra97]  132 [Wer98]  133 Glasersfeld 1997, zitiert nach [Bra97] 1.2 Zum Lernen    23  Wissen wird über Handlungen gewonnen134, indem sich die Lernenden aktiv mit dem  zu Erlernenden auseinandersetzen. Dazu mu ss der Unterricht so angelegt sein, dass  aktives Handeln für die Ler nenden möglich wird. Vers tehen wir Reden im Sinne  Hartmut von Hentigs als „Probehandeln“135, so sind projektartige Unterrichtsphasen,  die zu gemeinsamem Pl anen und Agieren anregen, dafür besonders geeignet136. In  diesen werden die Unterrichtenden überwie gend als Berater und Anreger tätig werden, die den Unterrichteten Rückmeldungen über die Qualität137 ihrer Denkkonstrukte geben138 und durch Rückfragen, Gegenbeis piele und Erweiterungen neue  kognitive Konflikte verursachen.   Im Gegensatz zu gängigen „Eintrichterungstheo rien“ wird eine konstruktivistische Didaktik das Lernen als einen Prozess der Se lbstorganisation von Wissen verstehen. Das  bedeutet, jeder Schüler wird neue Lerni nhalte zunächst in Zusa mmenhang zu seinen Erlebnissen, seiner Weltsicht setzen. Dieser Prozess ist damit rela tiv, individuell und unvorhersagbar. Ziel der Lehrer muss sein, möglichst reichhaltige kommunikationsori-entierte Umgebungen zu schaffen, welche di e subjektiven Erfahrungsbereiche ansprechen und gleichzeitig neue „R ätsel“ beinhalten, die pragmatisch, inte raktiv und kreativ  zur Selbstorientierung einladen. Die Kunst de s Lehrers besteht darin, zwischen der ursprünglichen Wirklichkeitskonstruktion des Lerners und derjenigen, die wissenschaftlich und gesellschaftlich als konsensfähig gilt , eine Kette von op timalen Diskrepanzen  vorzusehen, die von den Lernern als Erwart ungswiderspruch erlebt und durch Versuch  und Irrtum produktiv überwunden werden. 139  Was ist nun pragmatisch am Konstruktivismus? Weil Konstruktivisten auf „wahre“ Aussage n verzichten, stellen sie konsequenterweise auch ihre eigene Theorie nicht als abs olut gültig dar, sonde rn verstehen sie als  eine im Rahmen des Erforder lichen gültige Näherung. Der K onstruktivismus ist deshalb bemerkenswert undogmatisch. Auch wenn man seinen ontologischen Aussagen  skeptisch gegenüber steht, k önnen die sehr handfesten lern theoretischen Folgerungen ziemlich problemlos auf den Unterricht angewandt werden. Vor allem aber können sie bestehende Lehrund Lernformen ergänzen, ohne sie zu verdrängen: “Note  that Bruner seems to agree with  the constructivist viewpoint t hat unfettered discovery is not  helpful; he distinguis hes between episodic empiricism, wh ere the student accumulates unconnected facts, and cumulative constructioni sm, where the disco very is organized.” 140 Der  Konstruktivismus kann als umfassendes le rntheoretisches Mode ll fungieren, das aus  unterschiedlichen Qu ellen, z. B. aus der Re formpädagogik stammende, bewährte  Konzepte zusammenfasst. Diese Art des Unte rrichtens entspricht im Fach Informatik  auch weitgehend den Erwartunge n und Fähigkeiten der Lernenden (s. Anhang).  Begreifen wir nun „pragmat isch“ im Sinne von „undogma tisch“ und „unter den gegebenen Umständen realisierba r“, dann versucht die „pragmatisch-konstruktivistische  Lernkultur eine Symbiose zwis chen der traditionell  lehrerzentrierten Instruktionspädagogik  und einer lernerzentrierten Konstruktions pädagogik herzustellen. Je nach Schulfach, Wissensgebiet und Lehrplan sollen dabei eher instru ktionelle und eher kons truktivistische Lehr                                                  134 [Dah00]  135 und Denken als „Probereden“  136 [Boy00]: “Dialogue and the negotiation of meaning provide th e basis for the individual to develop, test and  refine their ideas.”   137 [Dor99]  138 Außerdem werden sie ggf. deutlich machen müssen, dass Lernen auf Eigenaktivitäten der Lernenden basiert!  139 [Mül98]  140 [Ben02] S. 5 1.2 Zum Lernen    24  Lern-Phasen einander abwechseln141 und ergänzen.“142 Durch den Konstruktivismus geprägte Unterrichtseinheiten fügen sich in bestehenden Unterricht ein143, sollen ihn  „durch Elemente und Projekte erweitern, die explorativen und selbstge steuerten Wissenserwerb fördern. Dabei geht es letztendlich auc h darum, dass Lernende Wissen so aufbauen,  dass sie es möglichst dauerhaft anwenden können“144.  Die pragmatisch-konstruktivistische Sich t gestattet es demnach, bestehende Unterrichtskonzepte graduell zu ve rändern in eine Richtung, die  • dauerhafte Lernerfolge ermöglicht (statt  der kurzfristigen Akkumulation von  Fakten),  • Strukturen betont (statt Details),  • Voraussetzungen für selbstständiges lebenslanges Lernen145 schafft,  • anwendungsorientiert arbeitet  • und die Lernenden als individu elle Subjekte in den Mittelpunkt des Lernprozesses stellt.  Sie kommt damit zu ähnlichen Er gebnissen wie Wilfried Herget – aus anderen Überlegungen – für den Mathematikunterricht: „… Ein derart veränderter Unterricht ist eben  eher prozessorientiert, weniger produktorienti ert, ist mehr auf die Schülerinnen und Schüler  hin ausgerichtet und weniger von Lehrerdom inanz geprägt. Querverbindungen […] werden  stärker herausgestellt, die fachliche Systematik tritt etwas zurück.“146  Dass die Arbeit der Unterrichtenden damit ni cht gerade einfacher wird, betont Mordechai Ben-Ari: “The task of the teacher in the constr uctivist paradigm is significantly more  difficult than in the classical one, because guidance must  be based on the understanding of  each student’s currently existing cognitive structures.”147 Andererseits erhalten damit  Qualitäten einen höheren St ellenwert, an denen es im deutschen Schulwesen offensichtlich mangelt, wie sich gerade in der letzten Zeit148 dramatisch gezeigt hat. Konstruktivistische Denkweisen zeigen hier ei nen Weg zu mehr Verständnis und mehr  Anwendungsbezug149. Der pragmatische Aspekt ermög licht einen gleitenden – und  somit bei Misserfolg auch reversiblen – Übergang zu verändertem Lehrverhalten. Er  zeigt eine klare Richtung, ohne Systembrüche zu erzwing en, lässt punktuelle Erprobungen und Erfahrungen zu, die bei  Erfolg erweitert wer den können. Pragmatischer  Konstruktivismus erscheint mir deshalb al s ein Weg, im Sinne Sigrid Schuberts  „durch eine Folge wohldurchdachter kleiner Schritte“150 den Informatikunterricht kontinuierlich zu verbessern.                                                     141 [Hen96]: “Even so, this still leads to a change in the role of the teacher, where the teacher needs to create  situations, where the student can work on useful prob lems, where the teacher prov ides counter-examples compelling reflection and reconsideration of solutions, and where the teacher is acting as mentor stimulating initia-tive and research rather then being a lecturer who transmits ready-made solutions.”   142 [Mül98]  143 „Instruktion und Konstruktion sind allenfalls in 'ideologischen' Auseinandersetzungen ein Gegensatz, in der  Praxis dagegen eine sinnvolle Ergänzung“  (Mandl/Reinmann-Rothmeier 1996).  144 [Ple98]  145 [Dan00] “… we must also equip them (the students) for continual learning subsequently”   146 [Her98] S. 24  147 [Ben02]  148 durch die PISA-Studien  149 statt auf die Krise mit „mehr Pauken“ zu reagieren.  150 [Schu99] S. 24 1.3 Folgerungen für die Informatikdidaktik    25  1.3 Folgerungen für die Informatikdidaktik   1.3.1 Zur Auswahl fachdidaktischer Themen  Schülerinnen und Schülern er leben Unterricht ausschließlich  als Fachunterricht, dessen einzelne Stunden in ihrer Gesamtheit di e angestrebte Allgemeinbildung erzielen  sollen. Fachunterricht kann in diesem Si nne allgemein bildend wi rksam werden, weil  nach Klafki „die Aufnahme und Aneignung von Inhalte n stets verbunden ist mit der Formung, Entwicklung und Reifung von körperliche n, seelischen und geistigen Kräften.“151 Diese Fachinhalte müssen dazu geeignet ausgewählt werden. „ Es ist Aufgabe der Fachdidaktik Informatik, die von der Fachwissens chaft gewonnenen Erkenntnisse – unter Einbeziehung von Erkenntnissen der Al lgemeinen Didaktik – für die Schule (...) zu transformieren und aufzubereiten, um somit den Unterrichte nden eine ausreichende Vorbereitung für das  Unterrichten allgemein bildender inform atischer Inhalte vermitteln zu können.“152 Bezeichnet man Unterrichtsstunden und ihre Komponenten als „ feinste Verästelungen “, die  im Rahmen der Entscheidungsund Bedingungsfe lder des Unterrichts detailliert geplant werden, dann lautet der Anspruch der Berliner Didaktiker in einer Formulierung  von Wolfgang Schulz:   Von den Wurzeln ihrer Voraussetzungen her bi s in die feinsten Verästelungen ihrer  Folgen hinein versucht die lehrende Intelligenz im System der Didaktik ihre Handlungs-situation aufzuklären, um zu wissen und ei ner aufgeklärten Gesellschaft gegenüber verantworten zu können, was sie tut. 153  Die lehrende Intelligenz hat es dabei nich t ganz leicht, denn weder sind die Ergebnisse der Allgemeinen Didak tik eindeutig, noch besteht  Konsens darüber, welche  Inhalte der Fachwissenschaft allgemein bildenden Charakter haben154. „Entsprechend  existiert derzeit noch keine theo retische Basis der Informatikdi daktik, die zu einer annähernd  geschlossenen Theorie führt.“155   Es gibt also keinen eindeutigen Weg von all gemeinen Zielen hin zu konkretem Unterricht. Fachdidaktiker müssen sich deshalb entscheiden, welche a llgemein bildenden  Ziele sie verfolgen wollen156, und sie müssen dann unter den in der Schule unterrichtbaren Fachinhalten und -methoden diej enigen auswählen, mit denen sie diese  Ziele zu erreichen glauben. Fachdidaktik ha t immer mit Wertung und Entscheidung  zwischen verschiedenen Alternativen zu tun.  Sie ist „objektiv“, also ohne den Einfluss  persönlicher Gewichtungen, nicht möglich.157 Fachdidaktische Entscheidungen müssen deshalb unter Angabe und vor dem Hin tergrund ihrer Ziele begründet werden.  Sie sind dann daran zu messen, ob sie diese Ziele erreichen. In diesem Sinne sind  sie dann auch verifizierbar.158                                                     151 zitiert nach [Tho00] S. 2  152 [Tho00] S. 10  153 [Hei68] S. 17  154 [Hey95] S. 48: „Allgemeinbildungskonzepte bringen (...) selb st keinen Unterricht hervor und schon gar  keinen Fachunterricht. Und aus einem Allgemeinbildun gskonzept lässt sich, für sich genommen, keineswegs deduzieren, wie ein der Allgemeinbildung verpflichteter Fachunterricht im Detail auszusehen hätte.“    155 [Tho00] Vorwort  156 In dieser Arbeit ist das z. B. durch Auswahl entsprechender Literatur geschehen.  157 Das gilt ganz allgemein für Schule.  158 Es ist bequem, Didaktik nach Comenius als Kunst  aufzufassen, weil man damit dem Begründungszwang  weitgehend entgeht. 1.3 Folgerungen für die Informatikdidaktik    26  Ist ein Katalog allgemein bildender Ziele159 ausgewählt, dann hat die Fachdidaktik zu  zeigen, dass mindestens einige dieser Ziel e durch das Lehren fachlicher Inhalte und  Methoden erreicht werden können und dass di ese Ziele entweder nur innerhalb des  betrachteten Faches, zumindest aber dort we sentlich besser als in anderen zu verwirklichen sind. Die fehlende Eindeutigkeit erschwert alle rdings diese Auswahl, und  ob mit den ausgewählten Inhalten wirklich di e angestrebten Ziele zu erreichen sind,  muss empirisch geprüft werden. Dieser zeitauf wändige Prozess ist für die Informatik,  die ihre Inhalte sehr schnell ändert, nicht annähernd abgeschlossen: „Bis heute kann  die Hochschulinformatik (...) ni cht auf solides und fundiertes Vorwissen im Bereich der Informatik aus der Schule zurückgreifen.“160  Diese Situation ist eigentlich nicht zu  verstehen, denn an den Unterrichtsschwerpunkten hat sich in den vergangenen Jahren erstaunlich wenig geändert161, wie Wilfried Herget162 zeigt. Wenn trotzdem in der Schulinformatik die „nahezu beliebige Vielfalt der vorgeschlagenen Themen“163 nicht abreißt, zeigt das doch nur, dass die bisherigen entweder den didaktischen Ansprüchen nicht genügten,  oder dass überhaupt  nicht ernsthaft versucht wurde, didaktische Relevanz zu erreichen. Es ist – besonders im Rückblick – erstaunlich zu sehen, mi t welchem Vertrauen die an der didaktischen Diskussion Beteiligten offensichtlich  glauben, dass die je weils neuen Themen  länger bestehen werden als die alten. Es is t aber noch erstaunlicher , dass in vielen  Fällen genau diejenig en, die die schnellen Themenwec hsel beklagen, nach wenigen  Sätzen schon wieder bei der Diskussion „n euer“ Programmiersprachen o. Ä. angelangt sind.164 Peter Hubwieser klagt zu Recht, dass „die Vermittlung allgemein bildender Inhalte der Informatik nicht in dem Maße berücksichtigt wurde, wie es im Rückblick angebracht gewesen wäre.”165 Wenn also nach den Erf ahrungen der Vergangenheit von  neuen Themen keine wesentlich größere Relevanz als von den alten zu erwarten ist,  dann scheint es Erfolg verspr echender, die alten in Ruhe zu erproben, zu verbessern  und aufbauend auf Unterrichtserfahrungen im Si nne von Sigrid Sc hubert „evolutionär“ zu ändern.166 Insbesondere scheint es mir sinnv oll zu sein, Veränderungen nicht  so sehr bei den Fachinhalt en vorzunehmen, sondern im kons truktivistischen Sinne  die im Laufe der Zeit sich ändernden Vo rerfahrungen der Schülerinnen und Schüler  zu berücksichtigen und zu nutzen, um mith ilfe geeigneter Zwischenschritte den Weg  von diesen zu den angestrebten Zielen des  Unterrichts durchschaubarer und damit  auch gangbarer zu machen als bisher.                                                      159 Marco Thomas ([Tho00]  S. 10) zählt unter den Zielsetzungen des Schulsystems  die Ausbildung von Allgemeinbildung , die allgemeine Vorbereitung auf die Berufswelt  und die Vermittlung einer Allgemeinen Studierfähigkeit  auf. Nach den genannten gängigen Kriterien für Allgemeinbildung lassen sich die letzten beiden Punkte  allerdings als Unterpunkte de r Allgemeinbildung auffassen.  160 [Hum00] S. 1  161 Wohl aber an ihrer Gewichtung.  162 [Her94] S. 31  163 [Lav98] S. 19  164 z. B. ebenfalls [Lav98]  165 [Hub97] S. 42  166 [Schu99] S. 8: „Es geht deshalb nicht so sehr darum, etwas ganz anderes im Informatikunterricht zu lehren,  sondern auf den guten Lehrerfahrungen aufzubauen und Schwächen zu überwinden.“  1.3 Folgerungen für die Informatikdidaktik    27  1.3.2 Zum Aufgabenkatalog von Bussmann und Heymann  Die Ergebnisse der Allgem einen Didaktik erzeugen zwar ke inen Unterricht, sie liefern  aber Kriterien , an denen sich Fachunterricht messen lässt.   Sie liefern (...) einen pädagogischen Orient ierungsrahmen, durch den die Ansprüche  unterschiedlicher Interessengruppen, etwa de r Fachwissenschaftler, der Wirtschaft, des  Staates, kritisierbar werden. Allgemeinbildungskonzepte werden der Idee der Allge-meinbildung nur gerecht, wenn sie helfen, ei ne Balance zu finden zwischen dem Recht  des einzelnen auf seine Personwerdung, seinen  individuellen Interessen und Bedürfnissen auf der einen Seite, und der allgemeinen Kultur gese llschaftlichen Anforderungen  und Notwendigkeiten auf der anderen. Im Wech selspiel mit einschlägigen fachdidaktischen und fachlichen Überlegungen sollte sich also mittels eines hinlänglich ausgearbeiteten Allgemeinbildungskonzepts konkreti sieren lassen, was für einen „allgemein  bildenden Unterricht" in dem betre ffenden Fach charakteristisch ist. 167  Damit ist der Bezug zur Fachdidaktik präzise beschrieben. Der aus diesen Überlegungen folgende Aufgabenkatalog von Bussm ann und Heymann wurde schon genannt. Er wird in der fachdidaktischen Lite ratur weitgehend akzeptiert und eingehend  in Bezug auf das Schulfa ch Informatik analysiert168. Hier sollen zu den einzelnen  Punkten nur kurze Zusammenfassungen und einige mir wichtig erscheinende Anmerkungen gemacht werden.    Zur Vorbereitung auf künftige Lebenssituationen  Heymann versteht darunter „Lebensvorbereitung im engen Sinne“169, also einen Begriff,  der nicht so weit gemeint ist, dass er alles umfasst, was in der Schule geschieht oder  geschehen könnte.170 Peter Hubwieser übernimmt di e Interpretation von Bussmann  und Heymann171 als Aufgabe   Qualifikationen [zu] vermitteln,  (a) die zur Bewältigung realer und auf absehbare Zeit in unserer Gesellschaft verbreiteter Lebenssitu ationen beitragen,   (b) die nicht auf die Ausübung eines besti mmten Berufes hin ausgerichtet sind,  (c) von denen anzunehmen ist, dass sie ni cht gleichsam automatisch, nebenher von  jedem Heranwachsenden erworben werden und  (d) die durch eine gewisse Universalität, also Anwendbarkeit in sehr verschiedenen  Situationen gekennzeichnet sind.  Er betont die Rolle der Automatisierung ge istiger Tätigkeiten durch den Computer172  und die unterschiedlichen Rollen173, in denen Menschen dem Computer gegenüber  treten. Da von den sechs angegebenen Rollen vier direkt  computerbezogene Arbeitsplätze betreffen, kollid iert diese Interpretation a llerdings heftig mit Heymanns  Aussagen, der beton t, dass eigentlich „die große Mehrheit derjenigen [gemeint ist], die  auf gänzlich andere Weise ihren Le bensunterhalt verdienen werden“ . Auch Heymanns                                                    167 [Hey95] S. 48  168 z. B. [Hey95] S. 49, [Hub00] S. 57ff, [T ho00] S. 11, [Leh82] S26ff, [Bau96a] S. 169  169 [Hey95] S. 48  170 Also keinen „Freibrief“ für alles.  171 [Bus87] S. 5  172 nach [Hop96], S. 8  173 als Nutzer, Betroffener, Planer, Entwickler, ... 1.3 Folgerungen für die Informatikdidaktik    28  Forderung, „alle Niveaus, keinesfalls nur das Gymnasium“  im Auge zu behalten, legt  eine andere Auslegung nahe. Gabriele Lehmann geht in ihrem Aufsatz „ Ziele im Informatikunterricht “174 direkt auf den Aufgabenkatalog ei n, sieht den Beitrag der Informatik in den Aspekten „Verständnis für informationelle Prozesse, Einblick in gesellschaftlich relevante Anwendungen, Problemlösef ähigkeiten, Befähigung zum Denken in Abläufen und Zusammenhängen“175 und beschreibt damit Aufgaben,  die üblicherweise von  der Informationstechnischen Grundbildung (ITG) zu leisten sind176. Die betrifft allerdings alle Schülerinnen und Schüler, so da ss diese ITG-Aufgaben schon deshalb  nicht in einen Informatikku rs der Oberstufe verlagert werden dürfen. Verstehen wir  die Lebensvorbereitung im Sinne von Heym ann, dann trägt ein Informatikkurs durch  die Vermittlung vertiefender  Einsichten in Arbeitsweise und Auswirkungen von Informatiksystemen natürlich auch  zu diesem Aspekt bei, es kann aber nicht seine  zentrale Aufgabe sein. Trotzdem sollte a ber auch beim Unterrichten spezifischer  Fachinhalte die Frage von Ludg er Humbert beachtet werden: „Wie viel Wissen braucht  die ‚mündige Bürgerin’, um ih re Rechte wahrnehmen zu können und um sachkundig an zentralen Diskussionen über die Gest altung der Zukunft mitzuwirken?“177   Die Aufgabe der Lebensvorbereitung ka nn nach Bussmann und Heymann missbraucht werden, wenn nur eine mögliche Zukunft prognostiziert wird, die dann als  quasi naturgesetzlich festgeschrieben dargeste llt wird und auf die vorbereitet werden  muss. Dabei geht der Gesichtspunkt der Gestal tbarkeit der Zukunft z. B. durch Bildung der Agierenden oder politisches Eng agement verloren und damit die Bereitschaft, Verantwortung für diese Gestal tung zu übernehmen und die Zukunft solidarisch zu gestalten.178  Eine Folge des Postulats der Lebensvorberei tung ist, dass die materiale hinter die  formale Bildung zurücktritt179, schon deshalb, weil in einer schnell veränderlichen  Gesellschaft in der Schule erworbenes Wiss en nicht mehr für ein ganzes Berufsleben, besser: noch nicht einmal für länger e Abschnitte davon, ausreicht. Folglich  müssen möglichst die Inhalte, anhand derer die Qualifikatione n gewonnen werden,  und natürlich die Qualifikat ionen selbst auf neue Situati onen übertragbar sein. In diesem Zusammenhang wird die aus dem Konstruk tivismus folgende Priorität der Lernmethoden vor den Inhalten wieder interessant.180 Notwendig ist ein Transfer , der  zwar nach Bender nicht nachweisbar ist181, trotzdem aber vorhanden sein kann. Je  offener die Zukunft, auf die vorbereitet wer den soll, aufgefasst wir d, desto allgemeiner sind die darauf „vorberei tenden“ Qualifikationen, und desto schwerer wird es,  deren „Vorbereitungstauglichkei t“ zu begründen. Da sehr allgemeine Qualifikationen  an praktisch allen Inhalten erworben werd en können, besteht die Gefahr, dass die  Auswahl der Unterrichtsinhalte unter dies em Aspekt beliebig wird. Obwohl die Aufgabe so augenscheinlich sinnvoll erscheint, t augt sie doch nur eingeschränkt als Unterrichtskriterium.                                                    174 [Leh92] S. 27  175 Leider ist sie bei der Präzisierung dieser Begrif fe schon nach zwei Sätzen mitten in PROLOG.  176 Dass Heymann Ähnliches meint, ergibt sich aus seinen Ausführungen zu den lebensvorbereitenden Aspekten  der Mathematik in [Hey95] S. 50ff  177 [Hum00] S. 2  178 Derzeit ist die Warnung mehr als aktuell, wenn im Rahmen der Globalisierung soziale Rechte oder moralische Prinzipien als „nicht mehr haltbar“ dargeste llt werden, weil die Entwicklung anderes erfordert.  179 [Bus87] S. 6  180 [Boy00]: “ A focus on the learning and reproduction of factual knowledge is thus not helpful. Both teachers  and students will have to constantly relearn their subj ect skills and knowledge. The constructivist emphasis on  learning problem-solving skills rather than factual knowledge thus seems appropriate.“  181 [Ben95] S. 13: „Tatsächlich sind mir aus der allgemeinen pädagogisch-didaktischen Forschung keine breiten, dauerhaften Transfer-Erfolge bekannt.“ 1.3 Folgerungen für die Informatikdidaktik    29  Anzumerken ist, dass die auf niedrigem Ni veau angesiedelten „lebensvorbereitenden“ Inhalte der ITG – im Si nne von Bedienerfertigkeiten – ein sehr zweischneidiges  Schwert sind: Einerseits erhal ten sie ihre Bedeutung durch  die schnelle Verbreitung  von Informatiksystemen, andererseits relativi ert gerade diese Verbreitung ihre Relevanz für die Schule, weil sie teilweise schon flächendeckend an anderer Stelle erworben werden, bevor das Erle rnen ihrer Beherrschung in Sc hulen wirklich verbreitet  ist.182 ITG-Inhalte beruhen meist auf Prognosen der zukünftigen Entwicklung – und  die stimmen erfahrungsgemäß oft nicht183. Gerechtfertigt werden entsprechende  ITG-Einheiten meist dadurch, dass über die Benutzerfertigkeiten hinaus die Schülerinnen und Schüler dazu geführt würden, In formatiksysteme und ihre Auswirkungen  „kritisch zu beurteilen“ o. Ä. Da einerseit s Kritikund Beurteilungsfähigkeit eine intensive Beschäftigung mit der Materie und erh ebliche Fachkenntnisse voraussetzt und  andererseits für die ITG nur wenige Stunden bereit stehen, in denen bestenfalls etwas Wissen und Übung vermittelt werden k önnen, erscheint mir der erhobene Anspruch kaum verwirklichbar zu sein. Es is t also kein Wunder, wenn die GI feststellt,  dass die ITG „gescheitert“ sei.184 In übertragenem Sinne gelten diese Aussagen teilweise auch für Inhalte des Informatikunte rrichts, z. B. für die Gestaltung von  „Mensch-Maschine-Schnittstellen “ bei Pascal-Programmen185, die lange Zeit für wichtig gehalten wurden. Auch die Kritik, dass mit modernen graf ischen Programmentwicklungssystemen Programme einfach „zus ammengeklickt“ werden, zieht nur, wenn  die Oberfläche schon den wesentliche n Teil des Programms darstellt.    Zur Stiftung kultureller Kohärenz  Kulturelle Kohärenz wird erze ugt durch die Tradierung gewi sser schulischer Inhalte,  u. a. um die Gesprächsfähigkeit zw ischen den Generati onen zu erhalten186, und  scheint ein geschlossenes Curriculum zu er zwingen, wie es früher weitgehend üblich  war187. In einer schnelllebigen, sich rapide ändernden Gesellschaft ist eine solche  Schule nicht mehr denkbar. Kulturelle Kohärenz kann des halb nur die Bewahrung  eines gewissen Teils schulischer Themen über die Zeit bedeuten, und sie weist auf  die Bedeutung zumindest mittelfrist ig wichtiger Lehrinhalte hin188. Sie berührt damit  ein zentrales Problem der Informatikdidaktik.   Die Einordnung informatischer Systeme in di e Technikund Kulturgeschichte, das  Eingehen auf ihre Wurzeln aus Mathematik und aus anderen Wissenschaften macht die Entwicklung der Disziplin deutlich, li efert Anknüpfungspunkte an traditionelle  schulische Themen und hebt so die Isolie rung vom sonstigen schulischen Umfeld  auf. An dieser Stelle sind auch die Ausführungen von Hoppe  und Luther zum „Bemühen um die Automatisier ung geistiger Tätigkeiten“ 189 hilfreich, und Baumanns Auflistung  der „Ursprünge der Informatik“190 liefert reichlich Quellen. Da historische Gesichtspunkte aber meist nur ein Aspekt des Unterr ichts unter vielen bleiben, muss für die  restlichen Themen die Relevanz der geste llten Aufgabe ebenfalls bestimmt werden.                                                    182 das, obwohl S. Schubert noch 1999 feststellt: „Tastatur und Maus sind als Eingabegeräte  [für Schüler!] neu  und gewöhnungsbedürftig.“  [Schu99] S. 56  183 s. dazu [Mod92a] S. 191 über „Waschmaschinen“  184 [GI01] S. 1  185 s. dazu [Mod91] S. 36  186 [Bus87] S. 9  187 und damit wäre die Informatik „draußen“.  188 Hubwiesers Vereinheitlichung der Fachsprache  ist damit sicherlich nicht gemeint: [Hub00] S. 63  189 [Hop96] S. 8  190 [Bau96a] S. 50ff 1.3 Folgerungen für die Informatikdidaktik    30  Heymann überschreibt seine auf die Mat hematik bezogenen Au sführungen zu diesem Punkt erweiternd als „Stiftung kultureller Kohärenz durch Vermittlung zentraler   Ideen“191 und weist damit der Informatikdidaktik einen Weg. Greifen wir auf Schwills  „fundamentale Ideen  der Informatik “192 zurück, anhand derer sich Unterrichtsinhalte  bewerten lassen, dann haben wir damit offens ichtlich eine Methode gefunden, die  diesem Gedanken entspricht. Weil fundamentale Ideen sich auf jedem Niveau  innerhalb eines Spiralcurriculums wieder fi nden sollten, sind sie auch und gerade für die  Oberstufenkurse wichtig, weil sie Anknüpf ungspunkte einerseits an vorhergehenden  Unterricht, andererseits nach draußen zur Lebenswelt der Schülerinnen und Schüler  herstellen193, und nebenbei erzwingen si e durch das Zeitkriter ium eine gewisse Konstanz der Unterrichtsinhalte.    Zur Weltorientierung  Zur Weltorientierung gehört exemplarisches  Wissen über die Welt und über die erkannten Zusammenhänge. Da hier der materi ale Begriff der Bildung überwiegt, fügen  die einzelnen Schulfächer in ihrem Bereic h als wichtig geltende Beispiele dem Gesamtbild bei. Inzwischen ist wohl unbestri tten, dass hierzu auch ein informatischer  Beitrag gehört. G.  Lehmann betont die fächerübergreifende Arbeit  im Informatikbereich, die dazu führt, dass die in ander en Fächern gebildeten Facetten zusammengefügt werden können. P. Hubwieser we ist auf die Bedeutung des Informationsbegriffs194 hin, der eine ähnlich tief greifende F unktion habe wie der Materie(besser:  Energie-)  Begriff. Damit wird der eigenständige Beitrag der Informatik zum Aufbau  eines Weltbildes deutlich.  Heymann diskutiert diese Aufgabe für die Mathematik und betont dabei ihren Modellierungsaspekt und ihren Anwendungsbezug:  Mathematikunterricht sollte vi elfältige Erfahrungen ermög lichen, wie Mathematik zu  Deutung und Modellierung, zum besseren Ve rständnis und zur Beherrschung primär  nicht-mathematischer Phänomene herangezogen werden kann.195  Ersetzen wir den Begriff „Mathematik“ durch  „Informatik“, dann sind wir mit der Modellbildung  mitten in einem zentralen Bereich der Informatik196. Da ein Weltbild  selbst ein Modell der Welt ist, ist Einsic ht in den Modellbildungsprozess wichtig für  die kritische Einschätzung der eigenen Ansichten. Die Anwendung informatischer  Methoden  auf unterschiedliche G ebiete zeigt einerseits di e Bedeutung von Modellen  im Alltag, andererseit s durch das aktive Modellier en ihr Zustandekommen, ihre Möglichkeiten und Grenzen und trägt so in Anal ogie zu einem etablierten Fach zur Weltorientierung bei. Auf diesen Aspekt wird noch einzugehen sein.  Bedenken wir, dass nach Bruner und im konstr uktivistischen Sinne durch ein Fach  Strukturen im Denken der  Lernenden aufgebaut werden müss en, in die aktuelles  Wissen eingeordnet wird, dann dienen übergeor dnete Begriffe wie der der Information und ihrer Verarbeitung sicherlich diesem  Ziel. Sie können den Unterrichteten als                                                    191 [Hey95] S. 51  192 z. B. in [Schw96]  193 und so im konstruktivistischen Sinne das Lernen erleichtern.  194 nach Breier  195 [Hey95] S. 52  196 und der Mathematik. [His00] S. 6: „Es wird damit deutlich, dass das das Thema ‚Modellbildung’ für den  Mathematikunterricht zwingend eine außerhalb der Mathematik liegende und damit fächerübergreifende Perspektive hat: Im vorliegenden Kontext betreiben wir Modellbildung also i. d. R. außerhalb der Mathematik,  davon nicht losgelöst dann innerhalb der Mathematik Strukturbildung.“ 1.3 Folgerungen für die Informatikdidaktik    31  Leitlinien der Entwicklung dienen und si nd in jedem Fall ei ner ungeordneten Anhäufung von Details vorzuziehen. Anderer seits reduziert die Beschränkung auf einen   Aspekt natürlich die Weite eines Fachs – es  sei denn, der Aspek t ist so allgemein  gefasst, dass sich darunter praktisch alle s einordnen lässt. In diesem Fall aber verlöre der Aspekt seine strukturbildende Eigenschaft.  Statt also ein „Paradigma“ herauszustellen, sollte ein Fach über ein Spektrum  von  wenigen spezifischen Sichten auf  die Welt verfügen, die es gestatten, die fachspezifischen Eigenheiten herauszust ellen, die Fülle des Wissens zu ordnen und insbesondere neues, später zu erwe rbendes Wissen einzuordnen. Die materiale Dimension  der fachspezifischen Bildung sollte dann dies e Sichten erzeugen und stärken; Fakten  dienen als Exempel. Beschreib t man die Sichten durch fundamentale Ideen , dann  bilden diese das langfristig gültige Gerüst, das durch  unterschiedliche Bausteine erzeugt wird, in das unterschiedliche Bausteine exempl arisch eingeordnet werden und  das Ordnung in spätere Erfahrungen bringt. In di esem Sinne liegt kein so großer Unterschied zwischen der vorherigen Aufgabe und dieser. Beide erfo rdern Einsicht in  Zusammenhänge, die anhand von Wissen erworben werden. Die Stiftung kultureller  Kohärenz betont dabei den ze itlichen Aspekt, die Weltorientierung die Strukturbildung.    Zur Anleitung zum kritischen Vernunftgebrauch  Kritikfähigkeit ist als emanzipatorisches  Element des Unterrichts grundlegend für  mündige Bürgerinnen und Bürger  und damit für die Demokr atie westlicher Ausprägung. Zur Kritik gehört die Fähigkeit, selbst zu denken197 und die Ergebnisse dieses  Denkens zu artikulieren und gegenüber anderen zu vertreten. Dazu sind die Fähigkeit zur Erfassung einer Situation eines Systems, also Modellbildung198, folgerichtiges Denken und Diskursfähigkeit erforderlic h. Da nicht jede Situation neu ist und  nicht jede oder jeder permanent völlig ne ue Modelle entwickeln kann, gehört zum  kritischen Denken die Möglichkeit, auf vo rhandenes Wissen zurückzugreifen und vorhandene Erfahrungen auf die neue Situat ion zu übertragen, also wieder Transfer .  Weil Denken an bestimmten Inhalten gelernt wird, muss auch der Transfer auf andere Inhalte ausdrücklich geübt werden199. Es ist also wenig sinnvoll, wenn nur ein  Beispiel pro Problemkreis im Unterricht auftaucht, weil dann die Gefahr besteht, dass  die erworbenen Fähigkeiten nur mit di esem Beispiel verbunden bleiben.  Folgerichtiges Denken k ann in Teilen durch Maschinen erfolgen, wenn Fakten und  Schlussregeln geeignet aufber eitet werden. Es kann aber nur automatisiert werden,  falls eindeutige Beziehungen vorherrschen.  Wenn überwiegend diffuses Wissen vorliegt und Bewertungen sowie Erfahrungen den weiteren G ang der Argumentation  bestimmen, dann muss schon ein menschliches  Gehirn am Diskurs beteiligt sein200.  Erfahrungen mit maschinellem Folgern, di e Kommunikation über formale Sprachen  mit Maschinen und das Modellieren realer Systeme führt zu Erfahrungen über Möglichkeiten und Grenzen der Automatisierbar keit und damit zum Wert spezifisch  menschlicher Eigenschaften. Folgen auf  diese Erfahrungen Be trachtungen über die                                                    197 Daraus kann dann durchaus die Kritik an anderen und an z. B. gesellschaftlichen Zuständen folgen.  198 [Mon98] S. 27: „Andererseits gehört zum Allgemeinwissen eines mündigen Bürgers des 20. Jahrhunderts,  dass er weiß, wie die Wissenschaften zur Erkenntnis kommen: Modellbildung muss in der Schule thematisiert  und praktiziert werden.“  199 [Hey95] S. 54  200 Die Existenz von Expertensystemen schränkt diese Aussage nicht ein, weil ja auch dort zuerst die Erfahrungen von menschlichen Experten in Regelsysteme „gegossen“ werden. 1.3 Folgerungen für die Informatikdidaktik    32  Grenzen des Einsatzes von Informatiksystemen , die durchaus nicht nur durch die  Mathematik gegeben sind, sonder n auch im ethisch-moralischem Bereich liegen oder  einfach im Unvermögen, für einen Bereic h computergeeignete Modelle zu erzeugen201, dann fördert die auf Kenntnis beruhende Ei nsicht in die Pr oblematik der Nutzung von Informatiksystemen sicherlich die Mündigkeit im allgem ein bildenden Sinne.   Einsicht in die Möglichk eiten und die Grenzen von Computersystemen ergeben sich  m. E. nicht so sehr aus der Betrachtung der Rollen, in denen Menschen diesen Systemen gegenüber stehen202, sondern aus den Rollen, die Computer in dieser Gesellschaft spielen. Informatiksysteme als Rechner , Datenverarbeiter , Roboter , Symbolverarbeiter , Medium  und Kommunikationspartner , Planer , Entscheider  oder künstliche Intelligenz203 übernehmen ehemals menschliche Aufgaben, und damit wird auch  ein Teil der menschlichen Ver antwortung delegiert. Aus Betrachtungen dieser Rollen  ergeben sich einige fachliche Einsichten; viel  wichtiger aber erscheint mir, dass sich  daraus fachlich fundierte Fragen entwickeln, die einer politischen Beantwortung harren. Auch wenn im Unterricht diese Fragen nur ansatzweise beantwortet werden, so  liegt der eigentliche Wert des Unterrichts  darin, dass die Schülerinnen und Schüler  lernen, sich von den Verantwortlichen nich t mit Nebensächlichkeiten abspeisen zu  lassen, sondern die ent scheidenden Punkte erkennen.    Zur Entfaltung von Verantwortungsbe reitschaft und zur Einübung in  Verständigung und Kooperation  Verantwortungsbereitschaft kann man nicht so einfach lehren wie materiale Bildungsaspekte, man muss sie erwerben. Da es sich um eine Haltung handelt, kann die Schule dazu beitragen, diese Haltung zu  fördern, indem sie den Schülerinnen  und Schülern zeigt, dass Handlungen Folgen haben, von denen viel e durchaus nicht  vorausgesehen und damit beabsichtigt sein müss en. Sie sollte Beispiele dafür bringen, dass Entwicklungen nicht zwangsläufig ablaufen, sondern dass es Alternativen  gibt, die Zukunft also durch Übernahme von Verantwortung beeinflussbar bleibt.  „Gebildet ist, wer (...) (sach-) kompetent is t und darüber hinaus von seiner Sachkompetenz  verantwortungsvoll Gebrauch macht.“ 204 Sie kann den Schülerinnen und Schülern  durch soziales Lernen Erfahrungen verscha ffen, die deren Bereitschaft steigern, diese Haltung zu entwickeln205. Die Entfaltung von Verantwo rtungsbereitschaft hängt  deshalb kaum von Unterrichtsinhalten ab, sie ist eine Frage der Unterrichtskultur206.  Zur Bedeutung des sozialen Lernens mit Zi elen wie Kommunikationsfähigkeit und  Teamfähigkeit, die in der Diskussion um Schlüsselqualifikat ionen einen zentralen  Platz einnehmen207, habe ich mich schon vorher geäußert.                                                           201 [Mod91] S. 67  202 wie Hubwieser meint: s. [Hub00] S. 63  203 [Mod92a] S. 196ff  204 [Bus87] S. 13  205 Bemerkenswerterweise findet man zu dieser und vergleichbaren Aufgaben kaum Äußerungen in der fachdidaktischen Literatur.  206 [Hey95] S. 55  207 [Hey95] S. 50 1.3 Folgerungen für die Informatikdidaktik    33  Zur Stärkung des Schüler-Ichs  Bei P. Hubwieser und G. Lehmann finden si ch erstaunliche Aussagen darüber, dass  der Informatikunterricht den Schülerinnen u nd Schülern das Gefühl vermitteln soll,  „Computer zu beherrschen, statt von ihnen beherrscht zu werden“208 bzw. „sich der Überlegenheit gegenüber dem Computer bewusst zu werden“209. Meiner Erfahrung nach sind  unsere Unterrichteten weit entfernt davon , Computer als gleichberechtigt, geschweige denn als überlegen anzusehen, und auch die Computer sind noch nicht  annähernd so entwickelt, dass sich diese Frage stellt. Die Frage nach der Beherrschung durch Computer  lenkt m. E. eher davon ab, dass Herrschaft nicht durch  technische Systeme erfolgt, sondern durch di ejenigen, die diese einsetzen, sowie  politische Verhältnisse, die dieses zulassen.   Der Wert des Informatikunterrichts in allgem ein bildenden Schulen ergibt sich m. E.  zu einem großen Teil aus den Defiziten a nderer Fächer, die stoffüberfrachtet den  Schülerinnen und Schülern keinen Raum m ehr lassen, um deren eigenen Stärken  und Schwächen zu erproben, um zu probier en, ob und wie sie eigene Ideen entwickeln210, konkretisieren und realisieren k önnen, und ob sie so etwas gerne tun211. Die  Schule bewegt sich viel zu viel entlang au sgetretener, gut erprobter Wege. Sie unterrichtet die Ergebnisse  der Ideen anderer, meist auß ergewöhnlicher Koryphäen, neben denen sich die Schülerinnen und Schüler – und nicht nur die – klein vorkommen  müssen. Sie zeigt nur unvollkommen die W ege zu diesen Ergebnissen, die Umwege  und Irrungen, die dabei auftraten.  Sie stellt eine „perfekte Denkwelt“ vor, mit „eleganten“ Schlüssen und ausgefeilten Argument en, ohne zu zeigen, dass diese Eleganz erst das Endprodukt, die aufpolierte Ve rsion einer Rohfassung ist, die unter  Mühen gewonnen wurde. Der di rekte Weg zu den Endergebnissen, der Umwege und  Schwierigkeiten versteckt, verhindert o ft (Denk-)Kollisionen mit den Vorerfahrungen  der Lernenden und damit Anlässe für das Umk onstruieren und Erweitern des bisher  Gelernten, also neues Lernen. Erst die Kenntnis des Kärrnerwegs kann junge Leute  ermutigen, sich ebenfalls auf den Weg zu machen in der Hoffnung, dass einige ihrer  Ergebnisse dann auch irgendwann den Weg in di e „Hochglanzwissenschaft“ finden  werden. Natürlich findet materiale Bildung an den Gl anzpunkten von Wissenschaft  und Kunst statt, aber selbstve rständlich darf nicht der Eindr uck erweckt werden, dass  Glanzpunkte der einzige und erste Ertrag von Wissenschaft sind.  Persönlichkeitsstärkend212 ist also die Erfahrung, selb stständig und erfolgreich ein  Problem bearbeiten u nd lösen zu können. „Wenn man anerkennt, dass eines der allgemeinen Ziele einer humanen und demokratischen Erziehung (...) die Be fähigung zur Selbstbestimmung sein muss, dann muss man zugleich Se lbsttätigkeit als notwendiges pädagogisches  Prinzip anerkennen.“213 Soll dieses sinnvoll geschehen,  dann muss das bearbeitete  Problem so gewählt werden, dass von den B earbeitern selbst, hier von den Schülerinnen und Schülern, die Arbeit als lohnen d empfunden wird. Dazu müssen sie an  der Auswahl der Problemstellung mindestens beteiligt sein – ein typisches Merkmal  für Projektunterricht . Fast ausgeschlossen werden ka nn die reine Aufgabenstellung  durch den Lehrer, wenn sie nicht nur Übung szwecken dient. Sie wird auch von den  Schülerinnen und Schülern nicht gerade gesc hätzt (s. Anhang). Selbst gewählte                                                    208 [Hub00] S. 64  209 [Leh92] S. 30  210 [Hey95] S. 49: „ ... es gilt, selbst zu denken und der Kraft des eigenen Verstandes zu vertrauen.“   211 [Hey95] S. 50: „Schülerinnen und Schülern muss in der Schule Raum gewährt werden, ihre eigenen Bedürfnisse und Möglichkeiten zu entfalten, ihre spezifis chen Stärken zu entdeck en und zu entwickeln.  212 ab jetzt weitgehend nach [Mod91] S. 29  213 [Kla98b] S. 2 1.3 Folgerungen für die Informatikdidaktik    34  Problemstellungen bedeuten natürlich, dass verschie dene Lernende auch an verschiedenen Problemen arbeiten werden (selbst wenn es sich um unterschiedliche  Teile des gleichen Projekts handelt). Da mit müssen die Schülerinnen und Schüler  sich zumindest teilweise die für die Lösung benötigten Info rmationen selbst beschaffen, denn sie können nicht erwarten, da ss der Lehrer gleichzeitig in verschiedenen Arbeitsgruppen so präsent ist,  wie er es bei einheitlic her Aufgabenstellung wäre.  „Gerade, wenn Unterricht zur Entwicklung der selb stständigen Lernfähig keit beitragen soll,  dann darf er nicht durchgehend so organisiert se in, dass alle Kinder einer Klasse ständig  unter direkter Leitung des Lehrers zur gleichen Zeit immer die gleichen Aufgaben in der gleichen Weise und im gleichen Lerntempo bearbeiten sollen.“214 Schülerinnen und Schüler  sind also als Problemlöser sehr viel auto nomer als im normalen Unterricht, der Lernprozess ist sowohl im Lerntempo wie in de r Art des Lernens stärker individualisiert  und bereitet lebenslanges Lernen215 effektiv vor.   Wesentlich erscheint mir, dass ein zuer st als unüberschaubar erscheinendes Problem angegangen werden kann, ohne vorher zu wissen, wie die endgültige Lösung  aussehen wird. Im Gegensatz zu  anderen Fächern lehrt die In formatik Methoden, um  allgemein Probleme zu lös en, aber nur selten, wie ein bestimmtes Problem behandelt wird. Machen Schülerinnen und Schüler mehrfach die Erfahrung, dass die erlernten Lösungswege für sie gangbar sind , dann sollten sie so viel begründetes  Selbstbewusstsein gewinnen, dass sie auch auf anderen Gebieten aktiv werden.  Wichtig ist die Erfahrung, dass Fehler  zum normalen Lösungsverfahren dazugehören, dass aus ihnen gelernt werden kann216. Dieser Prozess des „Debugging“ ist in  der Informatik effizient möglich, weil schon erste, noch fehlerhafte Lösungsversuche  realisiert und auf dem Rechner getestet werden können. Schül erinnen und Schüler  lernen, dass zur erfolgreichen Problembewälti gung sowohl Ideen wie sorgfältige Arbeit erforderlich sind. Keines von beiden genügt – von Ausnahmen abgesehen – alleine. Die Erfahrung,  dass sich Arbeit lohnt, dass Durchhaltevermögen und Sorgfalt  zum Ziel führen, auch ohne v on anderen, z. B. dem Lehrer, ständig geleitet zu werden, können andere Fächer so kaum vermittel n. Der Versuch, durch frühes Eingreifen des Lehrers Fehler zu vermeiden, wä re deshalb auch unter diesem Gesichtspunkt fehl am Platz.217  Die Behandlung komplexerer Probleme ka nn von einzelnen Schülerinnen und Schülern jedenfalls in der Unterrichtszeit ni cht mehr geleistet we rden. Die schon deshalb  notwendige Arbeitsteilung erfordert die Fähigk eit, im Team zu arbeiten, Absprachen  zu treffen und einzuhalten, dasselbe Problem unter ver schiedenen Aspekten zu untersuchen, Vorschläge anderer zur Kenntnis zu nehmen, ihnen also erst einmal zuzuhören (obwohl sicherlich ei gene Ideen vorliegen), Komp romisse zu schließen –  kurz Teamfähigkeit. “Projects have, in our opinion, a pot ential of being an excellent form  for covering the whole spectrum from theory to skill including soci al competence and personal development for computer science students (…).”218 Informatik fördert in solchen  Unterrichtsphasen damit nicht nur die Kommunikation mit dem Rechner, sondern vor  allem das Gespräch und die Zusammenarbeit mit anderen Lernenden.                                                    214 [Kla98b] S. 5  215 [Ste01]: “Computer science education, moreover, must seek to prepare students for lifelong learning that will  enable them to move beyond today’s technology to meet the challenges of the future.”   216 besonders aus konstruktivistischer Sicht.  217 [Ben02] S. 15: “You must provide as much opportunity as possible for individual reflection (for example,  analysis of errors) and social interaction (for example, group labs).”   218 [Dan00] 1.3 Folgerungen für die Informatikdidaktik    35  Die Abbildung von Teilen der We lt auf Programme im Rec hner erfordert in erheblichem Maße Abstraktionsfähigk eiten. Die Reduktion der Rea lität auf die einerseits für  das behandelte Problem vermuteten wesent lichen Aspekte, andererseits auf noch  bewältigbare Größenordnungen, also Modellbildung,  bedingt immer Verluste an Präzision, so dass die gefundenen Lösungen höchst  kritisch gewürdigt werden müssen.  In unserem Fall ist also Kritik an der eig enen Arbeit erforderlich, und die Fähigkeit zur  Selbstkritik kann kaum hoc h genug eingeschätzt werden.  Wenn diese Aspekte den von mir so gesehenen Stellenwert haben, dann ist es unverzichtbar für den Informati kunterricht, die entsprechende Zeit und geeignete Anreize und Hilfen für selbstständiges Lernen zu r Verfügung zu stellen, und diese Zeit  fehlt dann natürlich fürs „Stofflernen“. Ei ne wesentliche Folge dieser Überlegungen  ist deshalb, bei didaktischen Planungen den erforderlic hen Zeitbedarf angemessen,  d. h. höchst kritisch zu berücksichtigen.219 Ein wesentlicher Teil der informatikdidaktischen Literatur tut das  m. E. nicht und landet desh alb bei Vorschlägen, deren  „Vorbereitungsschritte“ schon den Zeitrahmen ausschöpfen, so dass für die eigentlichen Inhalte nicht mehr angemessen Zeit zur Verfügung steht.   Unter dem Aspekt der Motivation zur selbst ständigen Arbeit gewinnen aktuelle Unterrichtsinhalte, die wegen der Beständigkeit des  Fachs eigentlich mit Vorsicht zu betrachten sind, einen neuen Wert. Jugendliche sind natürlich an den neuesten Entwicklungen interessiert. Können diese gleichwe rtige „traditionelle“ Inhalte ersetzen  und sind alle Beteiligte – u. a. auch di e Unterrichtenden – willens und in der Lage,  den Austausch sinnvoll vorzunehmen, dann – aber auch nur dann – spricht nichts  dagegen, im Unterricht „a ktuell“ zu bleiben.    1.3.3 Kriterien für Unterrichtsinhalte  Die vorangehenden Über legungen ergeben einen  relativ kurzen Katalog von vorerst  allgemeinen220 Kriterien, die zur Auswahl von In formatik-Unterrichtseinheiten herangezogen werden können.   Die Inhalte des Informatikunterrichts müssen  • formale Bildung  ermöglichen   Da formale Qualifikationen vorrangig sind,  müssen die gewünschten Qualifikationen anhand der Inhalte erwerbbar sein. Eine nur durch fachimmanente Überlegungen scheinbar erforderliche  Ausweitung der Inhalte über diesen Zweck hinaus  ist zu vermeiden.   • anhand fundamentaler Ideen ausgewählt werden   Da einerseits das konstruktive Lernen der Schülerinnen und Schüler effizient in  Strukturen erfolgt und andererseits diese Strukturen erst aufg ebaut werden müssen, sollten die Inhalte  danach ausgewählt werden, ob  sie fundamentale Ideen  des Fachs verdeutlichen. Es  reicht dabei nicht, dass diese Ideen nur den Unterrichtenden bei der Planung ihres Unterrich ts deutlich sind, sondern auch und gerade die Schülerinnen und Schüler müssen im  Bewusstsein dieser Ordnung neue  Inhalte in das entstehende fa chliche Raster einbauen.                                                      219 Aussagekräftig werden solche Schätzungen immer dann, wenn der Unterricht von anderen als den Entwicklern gehalten wird, wenn sich also neue Inhalte verbreiten.  220 Der Katalog muss natürlich noch für die einzelnen Fachthemen konkretisiert werden. 1.3 Folgerungen für die Informatikdidaktik    36  • einen Bezug zu Schlüsselproblemen haben   Weil Informatiksysteme eine immer größer e Bedeutung im politischen, wirtschaftlichen, gesellschaftlichen und privaten Bereich gewinnen,  weil einerseits Problemlösungen in diesen Bereichen mit ihre r Hilfe versucht werden und andererseits  Probleme durch sie erst entstehen, weil sie neue Chancen eröffnen und den Zugang zu Informationsressourcen bestimmen,  kann und muss der Informatikunterricht Klafkis Forderung an die Allgemei nbildung gerecht wer den und einen vertiefenden Zugang zu diesen Themen liefern. Er  kann das auch problemlos, weil sich  die Bezüge einerseits zwanglos aus den fachlichen Fragen er geben und sich andererseits fachliche Fragestellungen dire kt aus diesen Bez ügen gewinnen lassen.   • Transfer einüben  Die fundamentalen Ideen müssen an unter schiedlichen Beispi elen erprobt werden, denn erst in der Übersicht kann sich  ja das Fundamentale dieser Ideen zeigen. Die Breite dieser Basis muss ausre ichend sein, um den Transfer von erlernten Qualifikationen aktiv zu üben.  • Modellbildung ermöglichen  Informatikmethoden müssen auf unterschied liche Gebiete angew andt werden, um  einerseits den Modell bildungsprozess deutlich zu ma chen, andererseits die Beschäftigung mit Folgen der Anwendung zu e rmöglichen. Die Gebiete sollten so  gewählt werden, dass sich Anknüpfungsp unkte zur Lebensund Erfahrungswelt  der Lernenden ergeben, so dass neues Wissen auf diese aufbauen kann.   • Projektunterricht unterstützen  Die Unterrichtsmethode der Wahl ist projektartiges Arbeiten221, in dem einerseits  Formen des sozialen Lernens geübt wer den, andererseits phasenweise selbstständiges Arbeiten der Schüler innen und Schüler möglich ist.    • als Bausteine eines offenen Kanons dienen  Die erforderliche relative Konstanz der Un terrichtsinhalte legt es nahe, einen Kanon von Inhalten festzulegen, der die ge wünschten Eigenschaften hat. Dabei sollte das Ziel des Unterrichtens dieser Inhalte deutlich sein, damit bei Bedarf einzelne Themen durch aktuellere Auspr ägungen ersetzt werden können, die dem  gleichen Ziel dienen222.                                                    221 Die Abschwächung erfolgt, weil es vielleicht etwas übertrieben ist, grundsätzlich „richtigen“ Projektunterricht zu fordern.  222 In [Mod91] hatte ich das vor zehn Jahren so formuliert:  Der Informatikunterricht an einer Schule ist gerechtfertigt, wenn  1. Problemlösungsmethoden unterrichtet werden, die die Schülerinnen und Schüler in die Lage versetzen, selbstständig eigene Lösungen auf einem geeigneten Niveau zu finden, zu testen und zu verbessern.  2. die behandelten Probleme geeignet sind, gesellschaftspolitische und moralische Aspekte des Computereinsatzes fachlich begründet zu diskutieren.  3. die behandelten Probleme zumindest phasenweise so bearbeitet werden, dass soziales Lernen und Arbeiten  gefördert wird. Projektarbeit ist dafür eine geeignete Form.  4. die für die praktische Arbeit notwendigen Kenntnisse und Fertigkeiten einerseits solide unterrichtet werden,  andererseits aber nicht so in den Vordergrund tret en, dass sie den Zweck, aus dem sie unterrichtet werden,  verdrängen. Inhalte sind den Methoden klar nachgeordnet. 2.1 Offener Lernzielkatalog und ortsnahe Curriculumentwicklung    37  2. Spezielle fachdidaktische Fragen  Wenn die Allgemeine Didaktik der Fachdi daktik auch einen Rahmen setzt, dann fehlen immer noch allgemeinere fachdidaktisc he Vereinbarungen, vor deren Hintergrund  Teilbereiche informatischer Bi ldung zu bewerten, zu gewic hten und in Unterricht umzusetzen sind. Die im ersten Abschnitt gef undenen sehr allgemei nen Kriterien zur  Auswahl von Unterrichtsinhalten ermöglic hen es, aus dem umfangreichen Katalog  möglicher Themen geeignete auszu wählen. Von diesen ist dann  aber noch nicht klar,  mit welchem Ziel und mit welcher Akzent uierung sie im Unterricht behandelt werden  sollen. Um diese Fragen zu klären, benötigt man eine etwas detailliertere Vorstellung  davon, was genau denn z. B. unt er einem offenen Lernzielk atalog, fundamentalen  Ideen oder der Rolle des Progr ammierkurses im Unterrich t zu verstehen ist. Diesen  Fragen widmet sich der zweite Abschnitt.    2.1 Offener Lernzielkatalog und    ortsnahe Curriculumentwicklung  Die Informatikdidaktik wird die Frage zu klär en haben, wie ein sich schnell weiterentwickelndes Fach wie die Informatik223 in einem sehr trägen System wie dem öffentlichen Schulwesen langfristig exis tieren kann. Diese Frage stellt  sich verschärft in der  aktuellen Situation224, wird aber auch bei verbesserter Lehrerausbildung virulent bleiben. Schulfächer brauchen St andards, die üblicherweise durch die Universität gesetzt werden225, und damit Beständigkeit. Die Unterrichtenden brauchen Zeit, um  Erfahrungen zu machen und auf dieser Grundl age ihren Unterricht zu verbessern.  Das Fach braucht Veränder ungen, um seine motivierende Wirkung bei den Unterrichteten226 zu erhalten und neuen En twicklungen zu folgen, aber diese Veränderungen brauchen, wenn sie zu Standards werden sollen, wiederum sehr viel Zeit. Es  muss also geklärt werden, wie in einem re lativ konstanten Rahmen aktuelle Veränderungen möglich sind, ohne den Bezug zur „info rmatischen Umwelt“ in den Schulen zu  verlieren.  The rapid evolution of computer scien ce requires an ongoing r eview of the corresponding curriculum. Given the pace of change in our discipline, the process of updating the curriculum once a decade has beco me unworkable. The professional associations in this discipline must establish an ongoing review proc ess that allows individual  components of the curriculum recommendati ons to be updated on a recurring basis.227  Anregungen zu diesem Problemkreis k önnen in Klafkis Ausführungen zur Handlungsforschung und zur schul nahen Curriculumentwicklung228 gefunden werden. Voraussetzung für diese Konzepte ist ein offener Lernzielkatalog , der durch das Primat  formaler Bildung im Bereich der Schulinformatik ohnehin nahe gelegt wird. „Offen“                                                    223 [Tuc96]: “The distance between the foundations of computing and its research and application frontiers is  considerably shorter than in many other fields. As a result, the curriculum in computer science and engineering   faces constant evolutionary pressure to  integrate new critical developments.”  224 unter den erschwerten Bedingungen mit leeren öffe ntlichen Kassen und überwiegend unzureichend ausgebildeten Unterrichtenden.  225 im fachlichen Bereich z. B. durch die weitgehend standardisierte Grundausbildung, die einen Kanon von  Inhalten bereitstellt, der Fachlehrerinnen und –lehrern dann zur Verfügung steht.  226 und nicht zuletzt auch bei den Unterrichtenden  227 [Ste01]  228 [Kla76] S.123ff 2.1 Offener Lernzielkatalog und ortsnahe Curriculumentwicklung    38  bedeutet in diesem Zusammenhang, dass es  offen gehalten werden kann, an welchen materialen Inhalten die gewünschte fo rmale Bildung erworben wird. Das darf  aber nicht als Beliebigkeit missverstanden  werden: Im Gegente il kann ein offenes  Konzept nur dann Bestand haben, wenn die Anforderungen an die formale Bildung  so präzise formuliert sind, dass im Deta il entschieden werden kann, welche materialen Inhalte diesen Anfor derungen gerecht werden. Da in  der kategorialen Bildung  materiale und formale Momente eine Einheit  bilden, also formale Bildung stets an  Inhalte gebunden ist, muss entschieden wer den können, welche der vielen möglichen Inhalte die jeweiligen Anforderungen er füllen. Solche Präzisierung erfolgt am  deutlichsten am Beispiel. Ist in diesen Beispielen der Be zug der Fachinhalte zu den  formalen Zielen des Unterrichts hinreichend deutlich, ist also die Stellung des Fachinhalts in der Unterrichtsfolge klar umri ssen, dann kann „offen“ entschieden werden,  welche alternativen Inhalte die gleiche Rolle übernehmen können. Diese Entscheidung kann dann in weiten Bereichen auch „vor Or t“ fallen, also durch die Unterrichtenden und/oder die Fachkonferenzen der Sc hulen, ohne an den Zielen des Unterrichts und der Ausrichtung des Faches Wesentliches zu ändern.  Ein offener Lernzielkatalog setzt also Präz ision bei den formalen Zielen des Unterrichts voraus. Er muss im Detail Inhalte enthalten, die es erl auben, diese Ziele zu  erreichen229. Die Inhalte bestimmen aber nicht den Unterricht, sondern sind das Medium, in dem und anhand dessen Unterricht st attfindet. Die einen bestimmten Unterrichtsgang zu einem bestimmten Zeitpunkt bi ldende Folge von Inhalten ist dann als  eine aktuelle Manifestierung eines all gemeineren Konzepts zu verstehen, das zu  einem anderen Zeitpunkt in an derer Ausprägung, aber gleicher  Intention verwirklicht  wird. Ist die Stellung  der Inhalte im Unterrichtsgang klar definiert, dann brauchen alternative Inhalte, also austauschbare Ko mponenten, zum Zeitpunkt der Verabschiedung des Konzepts nicht genannt, noch nicht einm al bekannt zu sein. Es genügt, ihre  Funktion zu beschreiben. Ein entsprechend k onzipierter Unterricht verhindert m. E.  die unerträgliche Situation, bei jedem  Wechsel auch eher unbedeutender Inhalte neu  in eine Grundsatzdiskussion über die Ziele des Faches einzutreten, die dann natürlich die kontinuierliche Ar beit und Verbesserung des schon Erreichten verhindert.  Sigrid Schubert formuliert das so:   „Informatik sollte ni cht ständig neu begründet werde n, aber die Entwicklung zum erfolgreichen Schulfach ist fo rtzusetzen. Dazu sind gute Er fahrungen zu bewahren. Aus  erkanntem Mangel folgt die Suc he nach Elementen, die den Lehrgegenstand bereichern,  ohne ihn zu überladen.“230  Im Schulinformatikbereich übersteigt die für die Verbreitung mancher neuer Inhalte  erforderliche Zeit oft die Dauer, in der diese Inhalte für den Unterricht relevant  sind231. Dadurch entfällt für diese Teilbereich e auch der übliche Weg, über didaktische Forschung, Schulversuche, Entwicklu ng und Erprobung von Materialien, Revision der Rahmenrichtlinien, Lehr erfortbildung usw. für die Verbreitung dieser Inhalte  zu sorgen. Benötigt wird deshalb der offene Lernzielkatalog, um ortsnah Curriculumentwicklung  in dem Sinne zu e rmöglichen, dass vorhanden e Inhalte gegen andere  von den Unterrichtenden selbst  ausgetauscht werden. Praktisch bedeutet dieses für  die Lehrerinnen und Lehrer, dass sie für ihr en eigenen Unterricht nicht nur Unterrichtsvorbereitung und -analyse im fa chlich bekannten Rahm en und im bekannten                                                    229 Die in vielen Rahmenrichtlinien zu  findende „Offenheit“ in Form von se hr allgemein gehaltenen Formulierungen, die den Fachunterricht ggf. der Beliebigkeit ausliefern, sind das genaue Gegenteil davon.   230 [Schu99] S. 6  231 Genau dieses hat ja zur starken Zersplitterung des Faches geführt. 2.1 Offener Lernzielkatalog und ortsnahe Curriculumentwicklung    39  Umfang232 zu betreiben haben, sondern dass eine Art Handlungsforschung233 von  ihnen erwartet wird, obwohl si e meist für diese Aufgabe ni cht hinreichend qualifiziert  sind. Nach Klafki führt dies e Arbeit unter diesen Bedingungen „bei allen Beteiligten  notwendigerweise [zu]  Enttäuschungen.“ 234 Speziell für den Informa tikunterricht hält er  die Anforderungen an Lehrer „derzeit“ nicht für erfüllbar.235 Aber stimmt das unter  allen Bedingungen?  Man findet die „schwierigen“ Anteile des Info rmatikunterrichts eher  bei den theoretischen oder abstrakten Inhalten des Faches als im schnell veränderlichen Bereich der  Programmiersprachen und anderer Tools – und die Theorieteile ändern sich nun  wirklich nicht täglich. W enn die schnelle Änderung trot zdem überall beklagt wird,  dann hat das seine Ursache m. E. auch darin , dass die „aktuellen“ Inhalte des Unterrichts einen unverhältnism äßig hohen Anteil am Unte rricht beanspruchen – und das  liegt vermutlich an der über wiegend schlechten und/oder we itgehend fehlenden fachlichen Ausbildung der Unterrichtenden, denen die Theorieteile damit ziemlich fern liegen236. Entsprechend selten werden sie dann angemessen unterrichtet.237 Rechnet  man also zum offenen Lernzielkatalog einen angemessenen Teil Theorie und Grundlagen der Informatik, dann verbleiben bei den schnell veränderlichen Teilen eher  Themen, die keinen ü berhöhten intellektuellen Anspruch  erheben. Als Beispiel mag  die Simulation digitaler Gr undbausteine dienen: Die Frage, wie aus „Schaltern“ programmierbare Systeme entstehen, gehört zum „U rgestein“ der Schulinformatik. Auch  die Simulation dieser Bauteile durch So ftwarekomponenten ist ziemlich alt. Jeweils  neu ist nur die aktuelle Auspr ägung dieser Simulation, z. B.  derzeit als ei n exzellenter  Anwendungsfall für OOP. Die Einarbeitung in eine neue Programmiersprache ist ab  und zu bewältigbar – wenn man andere gut k ennt. Die Benutzung einer integrierten  Entwicklungsumgebung ist ohne großen Aufwand möglic h – wenn man auch sonst  intensiv mit Computern arbeitet. Der Um gang mit neuen Tools wie etwa einem SQLServer erfordert etwas Zei t, aber keine neuen Konzepte238. Die Erfahrungen  mit diesen Werkzeugen, die unbedingt nötig sind, um die Schüle rinnen und Schüler im Unterricht angemessen zu unterstützen, erforder n allerdings erhebliche Arbeit und auch  Arbeitszeit. Sie sind „nebenbei“ nicht ständig neu zu erwerben.  Betreibt man schulnahe Curriculumentwi cklung im genannten Sinne,  dann reduziert  sich die Handlungs forschung  weitgehend auf den Erwerb von Erfahrungen mit neuen  Werkzeugen, das Erlernen neuer technischer Details und die damit meist verbun-dene Materialienentwicklung. Wirklich neue Konzepte 239 tauchen eher selten auf –  wie in anderen Fächern auch. Solche Änderungen im Detail  und besonders die Mate                                                  232 [Hei68] S. S22: Zwei Situationen sind es vor allem, die die Fähigkeit des einzelnen Lehrers zu Reflexionen  alltäglich herausfordern: Nach dem Unterricht muss desse n Analyse ihm helfen, klüger als vorher zu werden.(...)  In der Analyse wird er später auch die Konstruktion prüfen, um die Ergebnisse der Prüfung wiederum in die Planung eingehen zu lassen.   233 [Kla85] S. 99  234 [Kla76] S. 123  235 [Kla85] S. 135 Da sich die Situation zwischenzeitlich nicht grundlegend geändert hat, bleibt diese Aussage  gültig.  236 Deutlich wurde dieses z. B. innerhalb der Lehrerfort bildung, wenn sich bei einem „Auffrischungskurs in  theoretischer Informatik“ sich die schon länger unterrichtenden Kolleginnen und Kollegen auffallend intensiv  immer noch mit dem beliebten „Blumenautomaten“ beschäftigten. Es entstand der Eindruck, dass trotz vorhan-dener Unterrichtspraxis die „Theorie“ bei ihnen fast ausschließlich aus diesem Beispiel bestand.  237 [Schu99] S. 22: „Es ist nicht zu erwarten, dass die angehenden Lehrer das, was sie selbst nicht umfassend  verstanden haben, an ihre zukünftigen Schüler vermitteln können.“  238 Relationale Datenbanken und Abfragesprachen gehören schon lange zum Standard. Neu ist nur deren (kostenfreie) Verfügbarkeit für Schulen, z. B. mit MySQL.  239 wie die „objektorientierte Programmierung“ 2.1 Offener Lernzielkatalog und ortsnahe Curriculumentwicklung    40  rialentwicklung kann effizient dur ch ortsnahe Lehrerfortbildung240 unterstützt werden,  am besten unter Beteiligung der Universi täten, denn diese können auf Grund ihres  Sachverstandes eine Sichtung  und Bewertung neuer Ent wicklungen vornehmen, die  für Praktiker oft schon zeitlich nicht möglich ist241 – und zwar in Kenntnis des offenen  Lernzielkatalogs. In diesem Rahmen könne n die Universitäten dann auch „richtige“  Handlungsforschung betreiben, „Forschung beim Unterrichten unter Einmischung“242.  Gefordert ist deshalb immer noch eine „schulnahe Curriculumentwicklung, gekoppelt mit  neuen Formen der praktischen Lehrerfortbi ldung, und zwar mit einem unterrichtsnahen inservice-training“243. Wird auf diese Weise den Prakti kern die Sichtung neuer Entwicklungen und die ggf. daraus folgende Materialentwicklung zumindest teilweise abge-nommen, dann scheint es mir durchaus möglich, „ortsnah“  aktuelle Curricula zusammenzustellen.       2.2 Zu den fundamentalen Ideen der Informatik  Fundamentale Ideen strukturieren ein Fach sowohl wissenschaftlich wie erkenntnistheoretisch244. Sie stellen „ ‚Schnittstellen’ zwischen der (...) informatischen Fachsprache  und Fachkultur auf der einen Seite und der auße r[informatischen] Kultur unserer Gesellschaft auf der anderen Seite dar“245 und tragen so zur kult urellen Kohärenz bei246. Sie  „schaffen Beziehungsnetze, prägen [fachlichen]  Details eine verbinde nde Struktur auf und  unterstützen so den nich tspezifischen Transfer“247. Fundamentale Ideen sind also außerordentlich hilfreich – aber was sind „fundamentale Ideen“?    2.2.1 Zur Wirkung fundamentaler Ideen  Begriffe wie „fundamental“ und „strukturbildend“  werden oft in einem etwas diffusen  Zusammenhang benutzt. Jeder hat eine vage Vorstellung davon, aber eine exakte  Definition fehlt meist – schon bei Bruner248. Gehen wir deshalb von der Funktion fundamentaler Ideen aus: In ei ner Menge ungeordneter Detail s können Strukturen erzeugt werden, indem man sie anhand unterschiedlicher  Ideen ordnet. Ideen induzieren also Ordnung, und ver schiedene Ideen erzeugen unterschiedliche Ordnungen.  Ideen zeigen Zusammenhänge und ve rdeutlichen Beziehungen unter einem bestimmten Aspekt , sie reduzieren damit die Komplexi tät durch Weglassen der für diesen Aspekt unwesentlichen Details. In diesem  Sinne reduzieren sie die Wirklichkeit  auf ihr „Wesen“, ihren eigentlichen Sinn249 und ermöglichen durch diese Reduktion                                                    240 die auch den dringend erforderlichen Erfahrungsaustausch zwischen den oft sehr alleine arbeitenden Unterrichtenden ermöglicht.  241 Deshalb wird diese Aufgabe oft den neuesten Ausgaben  der Computerzeitschriften übertragen, die bei aller  fachlichen Sachkenntnis und manchmal anzuerkennendem Bemühen pädagogisch wirklich nicht qualifiziert  sind.  242 [Kla76] S. 121  243 [Kla76] S. 128  244 J. Bruner, zitiert nach [Schw95]  245 [Hey95]  246 [Tuc96]: “We believe it is important to implement a simila r curriculum for computer science that identifies  the "great ideas" in the computing and how th ese ideas affect the world in which we live.”   247 [Schw96]  248 nach [Schw96]  249 [Bro69] 2.2 Zu den fundamentalen Ideen der Informatik    41  Lernen. Die Ideen eines Faches verdeutlich en damit die mit diesem Fach verbundenen Sichten auf die Welt250, sie unterscheiden das Fa ch von anderen fachlichen  Sichten und heben seine speziellen Ansätz e und Gewichtungen, aber auch Beschränkungen hervor. Damit machen si e die grundlegenden Fragestellungen und  Möglichkeiten eines Fachs auch Nichtfa chleuten zugänglich, ermöglichen den Diskurs zwischen Spezialisten u nd Laien. Sie bilden in diesem  Sinne die Grundlage für  demokratische Entscheidungspr ozesse. Wählen wir als Anwendungsfälle  fundamentaler Ideen Fragen, die nac h Klafki einen Bezug zu Sc hlüsselproblemen haben,  dann ermöglichen wir damit eine ggf. durc haus kontroverse, aber im notwendigen  Rahmen fachlich fundierte politische Diskuss ion eben dieser Probleme in unserer  Gesellschaft und tragen so zur rational en demokratische Willensbildung bei.  Die Ordnungswirkung fachlicher Ideen wird in der Schule ergänzt durch andere ihrer  Wirkungen. Zum Unterrichten werden Filter b enötigt, die in der Masse möglicher Unterrichtsinhalte erst einmal die wenigen ze itlich realisierbaren Kandidaten für exemplarisches Lernen  und Lehren ident ifizieren helfen251. Fundamentale Ideen wirken  hier in dreierlei Weise: Einerseits können sie bei den Unterrichtenden  in ihrer Gesamtheit genau diesen Filter bi lden, andererseits sollen sie bei den Unterrichteten   durch die Bearbeitung solcher Beispiele sowohl selbst wiedererstehen – durch Rekonstruktion der speziellen fachlichen Si chten durch die Schülerinnen und Schüler –  als auch hilfreich das Lernen fördern, indem sie es gestatten, eben diese neuen Inhalte in teilweise vorhandene, aber noch wachsende Strukturen einzuordnen und so  wiederum zu deren Wachsen beizutragen. Diese unterschiedlichen Rollen machen  es schwierig, ein klares Anforderungsprof il für fundamentale Ideen  zu entwickeln. Die  Unterrichtenden sollten über ein breites Basi swissen verfügen, das von den fachlichen Ideen strukturiert wir d, und eben diese Ideen sollten sie beim Unterrichten leiten. Dieses Unterrichten ist aber nur  dann wirksam, wenn die meist nur implizit  im  Unterricht z. B. als „Leit linien“ vorhandenen I deen in den Köpfen der Unterrichteten –  notwendigerweise ohne dieses breite Wi ssen – neu entstehen. Ich meine deshalb,  dass die fundamentalen Ideen des Fa ches an geeigneten Stellen auch explizit  thematisiert werden müssen, schon um den Un terrichteten die Zielrichtung des Lernprozesses zu verdeutlichen252. Da diese Ideen den speziellen Beitrag eines Faches zur  Welterkenntnis bestimmen, ist es gerade in  der Sekundarstufe II angebracht, anhand  dieses Themas die Stellung des Fachs i nnerhalb des Kanons der Wissenschaften zu  diskutieren – nachdem genügend Kenntnisse erworben worden sind, um diese Diskussion seitens der Schülerinnen und Schüler sinnvoll zu führen253.                                                       250 Davon kann es durchaus mehrere geben, aber nicht viele.  251 Denn die Ideen selbst bilden nicht die Inhalte [Hey95]: Die zentralen Ideen dürfen nicht mit den Grundbegriffen des Fachs verwechselt werden.   252 “Make Thinking Processes Explicit”  Johnson 1992, zitiert nach [Schu01] S. 8  253 [Schu01] S. 14: „Der spezifische Beitrag des Informatikunterrich ts zur Allgemeinbildung ist, ob nun gewollt  oder nicht, gebunden an eine bestimmte Sichtweise auf die typischen Probleme einer technisierten Gesellschaft  und auf mögliche Lösungen dafür. Man kann sogar vermu ten, dass im Informatikunterricht implizit und unvermeidbar Ansätze für ein bestimmtes Weltbild vermittelt werden.“  2.2 Zu den fundamentalen Ideen der Informatik    42  2.2.2 Zu Schwills Kriterien für fundamentale Ideen  Beachten wir die struktur gebende Eigenschaft der fundam entalen Ideen, ihre Stellung beim Lernprozess und vor allem auch di e Notwendigkeit, sie durch Rekonstruktion in den Köpfen der Unterrichteten neu en tstehen zu lassen, dann können wir uns  jetzt der „Fundamentalität“ selbst wid men. Nach Andreas Schwill ist „eine fundamentale Idee der Informatik ein Denk-, Handlungs-, Beschreibu ngsoder Erklärungsschema, das  vier Kriterien erfüllt: das Ho rizontalkriterium, das Vertikal kriterium, das Sinnkriterium und  das Zeitkriterium.“254 Für diese Kriterien gilt:  • das Horizontalkriterium: Die Idee ist in verschiedenen Bereichen der Informatik  vielfältig anwendbar oder erkennbar.   • das Vertikalkriterium: Die Idee kann auf jedem inte llektuellen Niveau aufgezeigt  und vermittelt werden.   • das Zeitkriterium: Die Idee ist in der historischen Entwicklung der Informatik deutlich wahrnehmbar und bleibt längerfristig relevant.   • das Sinnkriterium: Die Idee besitzt eine Verankerung im Alltagsdenken und eine lebensweltliche Bedeutung.   Als „Masterideen“ identifiziert er Algorithmisierung , strukturierte Zerlegung  und Sprache, und aus diesen leitet er einen Katal og weiterer fundamentaler Ideen her, der  mehr als fünfzig Elemente umfasst. Die schi ere Zahl alleine schon scheint mir der  „Fundamentalitätseigenschaft“ all dieser El emente zu widersprec hen. Nach Wilhelm  von Ockham255 „liegt das Universale nur in der Seele und darum nicht in der Sache“ .  Wenn wir Sachverhalte untersuchen, dann muss sich das Universale (hier: das Fundamentale) in diesen zeigen, und dazu dar f keine Inflation von fachlichen Inhalten  nötig sein, weil in der Menge der Details die Klarheit und Übersichtlichkeit allgemeiner Prinzipien verloren geht. Da der genannte Ideenkatalog aber anhand der so einleuchtenden Schwillschen Kr iterien gefunden wurde, mü ssen diese wohl etwas  schärfer gefasst oder zumindest schärfer interpretiert werden, um „die Spreu vom Weizen“ zu trennen. Ich werde si e deshalb eingehender untersuchen.  Peter Bender nennt als Kriterien für univers elle Ideen der Mathem atik die Kriterien  Weite  (logische Allgemeinheit), Fülle  (vielfältige Verkörperung innerund außerhalb  der Disziplin) und Sinn (Verankerung in der Lebenswelt) 256. Die fundamentalen Ideen  der Informatik, insbesondere die Masterideen,  hält er für inhaltliche Verkörperungen  universeller mathematischer Ideen, die im  Gegensatz zu den durch die Mathematiklehrenden nur „wirksam werdende n“ universellen Ideen allerdings „selbst die Inhalte  eines ernst gemeinten Informatikunterrichts sein [müssten]“  – und damit „sei die allgemein  bildende Schule erheblich überfordert“257. Er macht es sich damit m. E. ziemlich einfach, weil einerseits das „Wirksamwerden“  der universellen Ideen wohl nur schwer  nachzuprüfen ist, und er andererseits pauschal den doch sehr konstruktiven Schwillschen Ideen die Realisierbarkeit abspricht – und sich somit einer inhaltlichen Diskussion entzieht. Insbesondere übersieht er258, dass – selbst wenn die Mathematik wirklich die Informatik umfassen würde – dieses für die Unterrichteten unerheblich wäre,  solange die prinzipiell vor handenen Möglichkeiten nicht wir klich realisiert werden,                                                    254 [Schw93a]  255 ca. 1285 – ca. 1350  256 Schreiber, zitiert nach [Ben95] S. 12  257 [Ben95] S. 13  258 in der weiteren Argumentation 2.2 Zu den fundamentalen Ideen der Informatik    43  also die spezifischen Stär ken des Schulfaches Informatik auch wirklich im Mathematikunterricht zu erfahren sind.259   Sigrid Schubert und Wilfried He rget sehen Schwills Kriter ien für fundamentale Ideen  wesentlich positiver, halten die Diskussion darum aber offensichtlich noch nicht für  abgeschlossen, „da er einen sehr eingeschrän kten Bereich der Informatik260 in die Auswahl einbezieht. Aspekte der t echnischen und angewandten Informatik261 fehlen darin.“262  Auch nach Herget „decken die drei Hauptideen noch nicht das ganze Spektrum ab, und  insbesondere der dritte Punkt [die Sprache] unt erscheidet sich vom We sen her doch sehr von  den ersten beiden.“263  Bedenken wir, dass jedenfalls in dieser  Arbeit fundamental e Ideen nur als ein Aspekt   zur Auswahl von Unterrichtsinhalten bei tragen, dann brauchen wir  von diesen nicht  gleich alles zu fordern, was insgesamt  für diesen Ausleseprozess von Bedeutung ist.  Wir müssen aber fordern, dass sie zur fachlichen Beurteilung beitragen – und dazu  dürfen sie nicht allzu abgeho ben vom Konkreten sein. Wir müssen auch fordern,  dass sie den Lernprozess unterst ützen, und dazu dürfen sie ni cht in erster Linie auf  die Bedürfnisse der Unterrichtenden z ugeschnitten sein, sondern müssen den Lernenden dienen. Die verfügen nu n weder über ein enzyklopädisches fachliches Wissen, noch sollen sie dieses erwerben. Deshalb tritt die vorhandenes Wissen ordnende  Eigenschaft der fundamentalen Ideen hint er ihre den Wissenserwerb fördernde strukturierende  zurück, und weil für diesen zwei ten Aspekt Übersichtlichkeit  notwendig ist, muss die Anzahl fundamenta ler Ideen gering gehalten werden. Die  Kriterien zu ihrer Auswahl müssen dieses gewährleisten. Darüber hinaus müssen die  Kriterien so gewählt wer den, dass auch bei einer beschränkten Menge von fachlichem Wissen im Unterricht die Bedeutung der Ideen deutlich wird264.     Zum Horizontalkriterium  Eine Idee muss in verschiedenen Bereichen de r Informatik vielfältig anwendbar oder erkennbar sein, um als fundamental zu gelten.  Das wird nach Schwill wie folgt veranschaulicht265:        Das Kriterium sortiert reines Spezialwissen aus , ist offensichtlich sinnvoll. Es ist aber  eigentlich ein Kriterium für „erfahrene Informatiker“, da es breites Fachwissen voraussetzt, aus dem die gemeinsame Idee durch Abstraktion gewonnen werden kann.  Im Unterricht wird den Schülerinnen und Sc hülern diese Eigenschaft einer Idee nur                                                     259 An der Diskussion, ob die Informatikinhalte in den Mathematikunterricht integrierbar sind – oder nicht –,  möchte ich mich hier nicht beteiligen, weil ich das für ein eher organisatorisches Problem halte. Wenn Elemente  des Informatikunterrichts für die Schülerinnen und Schüler von Bedeutung sind, dann ist entscheidend, dass sie  diesen Unterricht erhalten, und nicht, unter welchem Etikett  das geschieht: s. [Mod95b]  260 den der Software-Entwicklung  261 M. Thomas sieht das ähnlich: [Tho00] S. 17   262 [Schu99] S. 95  263 [Her94] S. 36  264 zumindest werden kann.  265 Definitionen und Bilder nach [Schw96] Idee  Anwendungsbereiche 2.2 Zu den fundamentalen Ideen der Informatik    44  geistige NiveausIdee  geringes Niveau hohes Niveau  Anwendungsbereich dann deutlich werden, wenn wirklich unter schiedliche Anwendungsbereiche vorkommen, in denen die Idee relevant ist – also mindestens zwei266. Und auch dann wird  die übergreifende Gültigkeit wo hl nur erkannt werden, wenn sie explizit thematisiert  wird. Da Anwendungsgebiete,  die durch gemeinsame Ideen gekennzeichnet sind,  meist auch ähnliche Problemlösungsmethoden erfordern, zumindest ermöglichen,  eröffnet die ernsthafte Umsetzung der Fo lgerungen aus diesem Kr iterium einen Unterricht, in dem anhand dieser Beispiele der spezifische Transfer  erlernter Methoden  aktiv geübt werden kann und muss. Dar aus kann dann anhand der erworbenen Haltungen und Arbeitsmethoden auch nichtspezifi scher Transfer folgen – jedenfalls ist  das zu hoffen.    Zum Vertikalkriterium  Eine Idee muss auf jedem intellektuellen  Niveau aufgezeigt und vermittelt werden  können, um als fundamental zu gelten.  Das  wird nach Schwill im nebenstehenden Bild veranschaulicht. Das Kriterium ist noch mehr als das vorherige ein Krite-rium für Lehrer, denn die Heranwach-senden überblicken nicht ihren Bil-dungsgang als Ganzes 267, sondern erfahren  ihre momentane Position in diesem. Das Kriterium ist Grundlage des Spiralcurriculums. Für das Schulfach Informatik ermöglicht es einen Unter-richtsgang, der an unterschiedlichen Stelle n sinnvoll abgebrochen werden kann, also  sinnvollen Unterricht auch für die Schüle rinnen und Schüler, die nur  einen Teil der  Kursfolge durchlaufen 268. Voraussetzung dafür ist natürlich, dass der Unterricht wirklich an diesem Kriterium ausgerichtet ist. Innerhalb eines Bildungsgangs – z. B. des  gymnasialen – ermöglicht es den Unte rrichteten die Erfahr ung der zunehmenden  Vertiefung und Fundierung ihrer Kenntnisse.  Es rechtfertigt einen phänomenologischen ersten Zugang zu einem  Problembereich durch enak tiv „handfeste“ und ikonisch „betrachtende“ Erfahrungen zur Vo rbereitung späterer Formalisierung.    Zum Zeitkriterium  Eine Idee muss in der historischen Entwicklung  der Informatik deutlich wahrnehmbar und  längerfristig relevant sein, um als fundamental zu gelten.  Nach Schwill können durch Betrachtung der geschichtlichen Entwicklung funda mentale Ideen ident ifiziert werden269.  Das Kriterium sichert die Kontinuität des  Unterrichts und den Wert der Kenntnisse  und Erfahrungen der Unterrichtenden und verhi ndert fachliche „Moden“. Offensichtlich wird es im Bereich der Informatik kaum beachtet.                                                      266 Weil nur ein kleiner Teil der Unterrichteten später Informatik – oder verwandte Fächer – studieren wird,  bliebe den meisten sonst die Bedeutung dieses Kriteriums für immer verschlossen.  267 schon weil sie ihn noch nicht vollständig durchlaufen haben  268 was ja derzeit für die Mehrzahl gilt.  269 [DLP02]: “How do I apply constructivism in my classroom? You can define or find "essential concepts" in  different ways. You might refer to the list of standards your professional group publishes. Or, you can organize  your constructivist work by exploring significant historic al events or seminal works from multiple perspectives.”   2.2 Zu den fundamentalen Ideen der Informatik    45  Zum Sinnkriterium  Eine Idee muss eine Verankerung im Alltagsde nken und eine lebensweltliche Bedeutung haben, um als fundamental zu gelten.  Schwill interpretiert das so, dass der Kontext dieser  Ideen vortheoretisch sein muss und erst i nnerhalb des Faches zu einem (Fach-)Begriff präzisiert wird. Mir ist das zu wenig. Da  „Sinn“ ein sehr weit  gefasster Begriff ist,  kann dieses Kriterium auch so interpretier t werden, dass die Z ahl der fundamentalen  Ideen überschaubar bleibt270. Wenn wir bedenken, dass fundamentale Ideen die  spezifische Sicht eines Faches auf die Welt  definieren – also „d ie Idee“ des Fachs –  dann kann eine Idee – in meinem Verständn is – nur als „fundamental“ gelten, wenn  sie wirklich zum Fundament des Fachs gehört, wenn sie für das Verständnis des  Faches notwendig ist . Erst dann ist auch der Aufwand gerechtfertigt, der zur Rekonstruktion dieser Idee bei den Unterrichtet en erforderlich ist. Bilden also die Schülerinnen und Schüler so  verstandene Ideen heraus, dann verstehen sie das Fach –  und darin liegt der Sinn des Unterrichts . Ein Satz solcher notwendigen Ideen  muss nicht nur orthogonale Elemente enthalt en. Im Gegenteil: Weil fundamentale  Ideen vortheoretisch sind, nicht wissenscha ftlich präzisiert, werden sie zwar unterschiedliche Aspekte des Faches sichtbar machen, das Fach aus unterschiedlicher  Sicht beleuchten; sie wer den aber auch „Überl appungsbereiche“ haben,  in denen es  möglich ist, diesen Bereich der ei nen oder der anderen Idee zuzuordnen.   Die Einführung eines „Notwendigkeits-Kriteri ums“ erübrigt sich, wenn wir das Sinnkriterium entsprec hend erweitern:  Eine Idee muss eine Verankerung im Alltagsdenken und eine lebensweltliche Bedeutung  haben, und sie muss für das Verständnis des Faches notwendig sein , um als fundamental zu gelten.   Der Unterricht muss dann so angelegt werden,  dass sich diese – wenigen – fundamentalen Ideen bei den Schül erinnen und Schülern bilden können, er muss Kenntnisse und Erfahrungen vermitte ln, die anhand dieser Ideen zu  ordnen sind, und er  muss diese Ideen zu einem geeigneten Zeitpunk t explizit thematisieren, um die spezifischen Möglichkeiten und Beschränkun gen der Informatik in Abgrenzung gegen  andere Disziplinen erkennbar zu machen.  Akzeptiert man diese Änderung am Sinnkri terium, dann hat das gravierende Folgen:  In der Schwillschen Form sind die Kriterien weit gehend objektiv anwendbar, d. h. mit  einer Durchmusterung vorhandener Materialien und Daten lässt sich  feststellen, ob  das Horizontal-, Vertikalund Zeitkriterium je weils gelten. Auch Sc hwills Sinnkriterium  wird von ihm – übrigens sehr  knapp – nur eingesetzt, um die Eigenschaft einer Idee,  vortheoretisch271 zu sein, objektiv zu überprüfen. Diese Eigenschaft ist in der Tat  sehr wichtig, weil es die Kommunikation mi t der Welt außerhalb des Faches sichert.  In der Objektivität der  Kriterien liegt m. E. aber auch ihre Schwäche. Der Verzicht auf  Wertung, also auf das Annehmen einer speziellen  Sicht, billigt jeder  die „objektiven“  Kriterien erfüllenden Idee di e Fundamentalitätseigenschaft zu. Weil es unterschiedliche Sichten auf die Welt gibt, kann man a ber auch unterschiedliche Sätze von – jeweils wenigen – Ideen finden, die zur Beschre ibung einer Sicht notwendig sind. Diese Sichten entsprechen den in 1.3.1 genann ten Alternativen, zwischen denen Fachdidaktiker eine Entscheidung treffen müss en. Schwill verzichtet auf diese Entscheidung, und deshalb enthäl t sein Katalog (fast) alle in Frage kommenden Ideen,                                                    270 Dadurch wird auch eine „Inflation der Kriterien“ vermieden, mit der die „Inflation der Ideen“ verhindert  werden soll – in Analogie zu „Ockhams Rasiermesser“: Man sollte ohne Notwendigkeit die Zahl der unbewiesenen Annahmen nicht vermehren;  zitiert nach [Con94] S. 417   271 Das können wir als „an Laien vermittelbar“ übersetzen. 2.2 Zu den fundamentalen Ideen der Informatik    46  also viel zu viele. Unterrichtende müssen sich zwischen vielen möglichen Zielen für  eines (oder wenige) entschei den, sie müssen eine Positi on beziehen, die klar ist.  Diese Positionierung beinhaltet Einschr änkungen, weil andere Positionen damit ausgeschlossen sind, eben nicht eingenommen werden. Daraus folgt eine Einschränkung der Zahl der diese Position beschreibenden Ideen, und diese sind dann für  diese Position fundamental . Sie beschreiben den Sinn des Faches aus dieser  Sicht. Notwendig  ist also das, was die einge nommene Position zutreffend und  knapp beschreibt , die „Notwendigkeits-Eigenschaft“ von Ideen ist ein Ergebnis einer  – teilweise subjektiven – Bewertung. Die  oben genannte Erweiter ung des Sinnkriteriums entspricht m. E. der Bedeu tung des Begriffs „Sinn“, der  immer mit In terpretation  und Wertung, meist mit einem Zweck, also  mit subjektiver Auslegung und Zielsetzung verbunden ist. Das erweiterte Sinnkriteri um befördert Schwills  Kriterienkatalog  aus dem Bereich (natur-)wissenschaftlicher Ob jektivität heraus, direkt hinein in die  (geistesund sozial-)wissenschaftliche Herm eneutik, und da sich hier  u. a. die Didaktik tummelt, gehört er dort auch hin.    2.2.3 Zu Schwills Masterideen  Schwill nennt als Masterideen die Algorithmisierung , die strukturierte Zerlegung  und  die Sprache272. Offensichtlich gehört der Begriff „Sprache“ zu einer anderen Kategorie als die ersten beiden. Au ch bei der Aufgliederung in Unterideen zeigen sich Unterschiede. Während die ersten Masterideen zu  einer Kaskade nachgeordneter Ideen  führen, bleibt der „Sprachbaum“ recht mager.                                                    272 Hubwieser vergleicht diese in seinem informationsorientierten Ansatz mit Verarbeitung , Darstellung  und  Verteilung  von Informationen: [Hub00] S. 81 Algorithmisierung  Entwurfsparadigmen  Branch and Bound  Divide and Conquer  Greedy-Methode  Line sweeping  Backtracking Programmierkonzepte Konkatenation (Seque nz, Feld, Verbund)  Alternative (if, case, var, Verbund)  Iteration (while, Liste, File, Keller, Schlange)  Rekursion (rek. Prozedur, Baum, Suchbaum) Nichtdeterminismus  Parametrisierung Ablauf  Prozess  Nebenläufigkeit  Prozessor Evaluation  Verifikation  part. Korrektheit  Terminierung  Konsistenz  Vollständigkeit  Fairness Komplexität Reduktion  Diagonalisierung  Ordnung  unit-cost Maß  log-cost Maß  worst/average/  amortized case strukturierte Zerlegung  Orthogonalisierung  Emulation Modularisierung  Methoden  Top-down-Methode  Bottom-up-Methode  Geheimnisprinzip (Black Box Denken) Hilfsmittel  Lokalität von Objekten  Spezifikation  abstrakter Datentyp  Teamarbeit Hierarchisierung  Realisierung  Übersetzung  Interpretation  operationale Erweiterung Darstellung  Schachtelung  Baum  Klammerung  Einrückung 2.2 Zu den fundamentalen Ideen der Informatik    47        Schwill bezeichnet alle in diesen drei  Bäumen auftauchenden Id een ausdrücklich als  fundamental 273, sie müssen also seinen Kriteri en genügen. Ob aber das „log-costMaß“, „Line sweeping“ und „par tielle Korrektheit“ wirklic h eine Verankerung im Alltagsdenken und eine lebensweltliche Bedeutung haben, mag dahingestellt sein274.   Untersuchen wir die dr ei Ideenbäume etwas genauer:  Algorithmisierung und strukturierte Zerlegu ng führen direkt zu sehr handfesten Unterideen, sie sind konkret anwendbar, am in formatischen Handeln orientiert. Sie sind  aber nicht klar gegen einander abgegrenzt275, weil einerseits stru kturierte Zerlegung  sicher als Teil des Algorit hmisierungsprozesses aufgefa sst werden kann, und anderseits z. B. die algor ithmischen Grundstruktu ren Anfang oder Ende276 des Zerlegungsprozesses definieren. Innerhalb der B äume können wir die einzelnen Ebenen als  Präzisierungen der vorangegangenen auffass en, als zunehmende fachliche Durchdringung der übergeordneten Ideen. Ebenso wie Weite , Fülle  und Sinn als Kriterien  nicht spezifisch für die Auswahl mathemati scher Ideen sind, son dern nicht nur in Hinsicht auf die Mathematik noch einer er heblichen Präzisierung bedürfen, können  Algorithmisierung  und strukturierte Zerlegung  als fundamentale Ideen nicht als spezifisch informatisch angesehen werden. Jede  Naturwissenschaft und natürlich auch  und gerade die Mathematik nimmt entspre chende Ideen für sich zu Recht in Anspruch. Schwills „Unterideen“ präzisieren nun die Masterideen in Hinsicht auf die  Informatik, stellen das spezifisch In formatische an ihnen heraus. Fundamentalen  Ideen scheint es eigen zu sein, dass sie nicht besonders fachspezifisch formuliert  werden können, besser: dass di e Fundamentalitätseigensc haft sich in dem Maße  verliert, wie sie fachlich präzisiert werden277, und dass sich das Fachliche verliert,  wenn die Fundamentalität zunimmt278. Schwills Ideenbäume erläutern in diesem Sinne, wie die Masterideen zu verstehen sind,  wenn man sie auf di e Informatik anwendet. Wenden wir sie auf ein anderes Fach an, dann erhalten wir andere Ideenbäume,  und die werden wir auch erhalt en, wenn wir das gleiche Fa ch „anders verstehen“,  also eine andere Sicht einnehmen (s. o.).   Weil Unterideen die jeweiligen übergeordnet en Ideen fachlich präzisieren, gewinnen  sie ihre Bedeutung u. a. auch durch diese Funktion. So aufgefa sst muss eine ziemlich spezielle Idee wie „parti elle Korrektheit“ nicht mehr  einen allzu engen Kontakt zur  Erfahrungswelt haben, weil sie diesen Aspek t teilweise von den Ideen der „Verifikation“ und „Evaluation“ erbt. Sie ist also al s Unteridee weniger fundamental als z. B.  die Masterideen und genügt deshalb auch w eniger den Kriterien für Fundamentalität.  Sie ist aber wesentlich präziser in Hins icht auf die informatische Ausprägung und  deshalb notwendig zur Erl äuterung des Gemeinten.                                                    273 [Schw96] Teil C letzte Seite  274 Zumindest erscheint mir das strittig und einer Erklärung bedürftig, und somit ist es mit der „objektiven Anwendbarkeit“ dieses Kriteriums auch in  der bisherigen Form nicht weit her.   275 und brauchen das auch nicht zu sein (s. o.)  276 je nach „Arbeitsrichtung“  277 siehe Schwills Unterideen   278 siehe Benders universelle Ideen  Sprache  Semantik  Konsistenz Syntax  Erkennen  Erzeugen Vollständigkeit  Transformation 2.2 Zu den fundamentalen Ideen der Informatik    48  Betrachten wir einmal zum Vergleich die Algorithmisierung  und die strukturierte Zerlegung , angewandt auf die Physik: Ebenso wie in der Informatik können wir die betrachteten Systeme modellier en, die erkannten Gesetzmäßigkeiten formal beschreiben und so z. B. Voraussagen über die ze itliche Entwicklung des Systems machen –  natürlich jeweils mit den fachspezifi schen Methoden und Werkzeugen. Wir können  die Systeme zerlegen, unter vers chiedenen Aspekten vereinfachen279, unterschiedliche Module und Hierarchien herausarbeiten,  und eine ganze Weile lang kommen wir  dann auch in der Physik zu immer einfac heren Teilsystemen, die komplexes Verhalten im Rahmen des Modells „erklären“ – z.  B. von der Thermodynamik über die elementare Atomistik zur klassischen Mechanik280. Bei diesen Prozessen werden Ideen  der Physik deutlich, die beschre iben, wie beobachtete System e „strukturiert zerlegt“  werden können, um zu fachlich beherrsc hbaren Teilproblemen zu kommen – aber  ganz anders als in der Informatik. Bei der Fortsetzung des Prozesses in der Physik  erreichen wir dann jedoch eine  neue Ebene der Wirklichkei tsbeschreibung, die alles  andere als eine weitere Vereinfa chung darstellt – z. B. in  der Quantenmechanik oder  in der nichtlinearen Dynamik281. Hier zeigen sich entscheidende Unterschiede: Während die Informatik – solange sie nicht auf  ein reales System  angewandt wird und  damit ggf. dessen Kontext über nimmt – als Strukturwissenschaft betrachtet sich mit  abstrakten Konstrukten beschäftigt, der en Komplexität beim Zerlegungsprozess abnehmen muss , wenn beherrschbare Systeme das Zi el der Entwicklung sind, misst  sich die Physik als Naturwissenschaft an der – angenommenen – Realität, die sich in  immer neuen Wahrnehmungsebenen auf immer neue Weise offenbart. Im üblichen  Bild des Modellbildungsproze sses als Kreislauf, in dem wiederholt Modelle gebildet,  auf mathematische und/oder informatisc he Konstrukte abgebildet, getestet und neu  angepasst werden282, konzentriert sich eine so aufgef asste „physikalische“ strukturierte Zerlegung eher auf die Konstrukti on und die Veränderung von geeigneten Modellen, also ggf. auf eine Folge von Modellen  und deren jeweiligen Gültigkeitsbereiche, während die Informatik im engeren Sinne diese Idee bei der Realisierung des  Modells  wirksam werden lässt. Diese Unterschiede werden dann in den tiefer liegenden Ebenen der entsprechenden Ideenbäume zu Tage treten.  Fundamentale Ideen erfordern also eine ge wisse Allgemeinheit, die einer fachlichen  Erläuterung bedarf, die besagt, was genau aus der Sicht des Faches  unter diesen  Ideen zu verstehen ist. Nun wird ein Fach an allgemein bildenden Schulen nie in seiner vollen Breite und immer mi t unterschiedlicher Vertiefung unterrichtet. Es ist also  zu fragen, welche der Äste und welche Verzweigungstiefe für eine hinreichend genaue Rekonstruktion der angestrebten informa torischen Weltsicht bei den Lernenden  notwendig sind. Es erscheint mir unstritti g, dass Algorithmisieru ng und strukturierte  Zerlegung zu den fundamentalen Ideen der In formatik gehören, es ist aber nach den  oben angestellten Überlegungen o ffensichtlich, dass diese Masterideen noch zu allgemein sind, um das Fach hinreichend zu  beschreiben. Notwendig sind sicherlich  Vorstellungen von den Ergebnissen der Algorithmisierung283 und den Wegen zu diesen. Die Lernenden sollten z. B. wissen, dass durch Reihung , Alternative  und Iteration Algorithmen so formuliert werden kön nen, dass Computer sie abarbeiten können. Zur Formulierung können aber auch Reihung , Alternative  und Rekursion  herangezogen werden. Es ist sicher nicht unbedingt  notwendig, beide Möglichkeiten auf                                                  279 z. B. durch die Wahl der Observablen  280 oder umgekehrt  281 z. B. in [Con94], [Man91], [Schr91], [Cra88], [Arg94], [Pri81], [Gle90]  282 z. B. in [Hen98] S. 9  283 also z. B. den „Programmen“ 2.2 Zu den fundamentalen Ideen der Informatik    49  zuführen, und keine der beiden ist qualitativ besser284; beide sind aber möglich und  stellen so jeweils eine Präzisierung der f undamentalen Ideen in di esem Bereich dar –  je nach Ziel des Unterrichts. Entsprechen d ist es notwendig, Entwurfsmethoden zu  konkretisieren – durch mindestes ein Verfah ren. Welches davon gewählt wird, sollte  den Lehrenden überlassen bleiben.  Die Evaluation von Algorithmen gehört in den  Unterricht. Ob dieses mi t formalen Methoden – und welchen – und/oder Tests – und  welchen – erfolgt, hängt von vielen Faktoren ab285.  Sprache  als Masteridee gehört zu einer ander en Kategorie als die ersten beiden. Der  Begriff passt schlecht zu den anderen, eher handlungsorientierten, er  wirkt künstlich  angefügt. Die „Sprachidee“ bedarf sicherlich einer Interpreta tion. Schwill liefert die  durch Beispiele, die eine Gemeinsamkeit haben:  Es handelt sich (fast) ausschließlich  um formale Sprachen und Verfahren, die da nn wiederum sehr konkret sind. Ich denke, dass die Sprach -Idee durch die Masteridee Formalisierung286 ersetzt werden  sollte. Diese ist nicht auf Sprachen beschrä nkt, trifft aber den m. E. von Schwill gemeinten Bereich besser, umfasst ihn und pa sst auch besser zu den beiden anderen.  Verstehen wir unter Formalisierung  die Idee, bekannte oder  neu gewonnene Verfahren so zu beschreiben, dass sie nach fest en Regeln ohne weiter en menschlichen –  also denkenden – Eingriff ablaufen können, dann beschreibt die Idee das Bemühen, von den Verständnis voraussetzenden Tätigkei ten die von einem formalen System  durchführbaren Bereiche abzutrennen, um si ch dann von menschlicher Seite auf den  „interessanten, nicht formalisierbaren Rest “ zu konzentrieren – wenn es den gibt 287.  Formalisierung umfasst damit die Automatisierung  und den Begriff der Maschine .  Damit genügt die Idee offensichtlich dem Ho rizontalkriterium, denn diese Begriffe  tauchen praktisch in allen Bereichen der Informatik auf. Beschreiben wir Maschinen  durch Zustände  und deren Übergänge, da nn haben wir eine Idee, die auf jeder  Komplexitätsebene anwendbar ist, vom Bl umenautomaten und einf achen Addierer  über OOP-Systeme bis zu Spezialthemen der theoretischen Informatik – also ist das  Vertikalkriterium erfüllt. Da s Zeitkriterium gilt ebenfalls , denn die Untersuchung der  Möglichkeiten und Grenzen formaler Syst eme gehört mit den Arbeiten Turings, Gödels, Churchs und anderer einerseits zu den Wurzeln der Informatik, während andererseits die theoretische Durchdringung komplexer Systeme aktuelle Forschungs-themen bietet. Bleibt das Sinnkriterium in  der von mir gewählten Form. Die automatische Bearbeitung von Aufgaben, die ehemals menschliches Verständnis voraus-setzten, gehört nun in der Tat zur lebenswelt lichen Bedeutung. Sie fi ndet sich im Alltagsdenken, beherrscht es schon teilweise und weiter zunehmend, sei es bei der Arbeit, in der Freizeit 288 oder als „Betroffener“. Ist nun Formalisierung für das Verständnis des Faches notwendig ? Ich meine ja, denn die Überführung immer weiterer  Bereiche in eine Form, die formalen Methoden zugänglich ist, beschreibt zentral das, was Informatik für die Gesellschaft bedeute t. Die automatische Bearbeitung erleichtert vieles, bietet neue Möglichkeiten und schafft Raum für neue Aufgaben. Sie  nimmt aber auch Einflussmöglichkeiten, erfo rdert Vereinheitlichung und erschwert  Individualität. Komplexe formale Syst eme können den Eindruck von Verständnis erzeugen, sie spiegeln Personal ität und ersetzen so – z. B. bei den Computerspielen                                                     284 aber natürlich ist – je nach Anwendungsfall – oft eine vorzuziehen, weil „eleganter“.  285 z. B. von der Kursart: Grundoder Leistungskurs  286 aufgefasst als „nach Regeln ohne Verständnis bearbeitbar“  287 Als Beispiel aus den Naturwissenschaften kann die Entstehung von komplexen Organismen dienen, die einerseits – ehemals ausschließlich – durch transzendente Überlegungen erklärt werden können, jetzt aber auch zu-mindest teilweise durch Prozesse wie Selbstorganisation und Evolution.  288 Die Bedeutung von Computern als Spielpartner bei Jugendlichen – und zunehmend auch bei Erwachsenen –  ist erschreckend. 2.2 Zu den fundamentalen Ideen der Informatik    50  oder in Lehrsystemen – menschliche Kommuni kation. Einsicht in die Möglichkeiten  formaler Systeme kann die Gefahren der  Entfremdung im sozialen und mentalen  Bereich zeigen, die eine Entsprechung zur Entfremdung von der Natur in der modernen Industriegesellschaft bildet, sie kann auch die Notwendigkeit von Grenzen für  den Einsatz solcher Systeme ve rdeutlichen, die ähnlich wie in der nichtlinearen Dynamik bei genügend großer  Komplexität kaum noch beherrschbar sind.             Die Idee der Formalisierung ist wiederum nicht orthogonal zu den anderen beiden  Masterideen. Sie beschreibt aber einen an deren wesentlichen Aspekt und erweitert  das Spektrum stark in Richtung auf die t heoretische und technische Informatik. Im  Bereich der Schule führt sie zu dauerhaft en Inhalten und betont die Verantwortung  bei der Behandlung von Schlüsselproblemen, die sich direkt aus den technischen  oder erkenntnistheoretisc hen Anwendungen der formal en Konzepte ergeben.   Da die Ideenbäume nicht mit den Inhalten verwechselt werden dürfen, anhand derer  die Ideen zu verdeutlichen sind, muss auch hier ausdrücklich darauf hingewiesen  werden, dass der Baum keine Übersicht über  die Inhalte der theoretischen Informatik  an Schulen liefern soll. Ähnlich wie die anderen beiden Bäume lassen sich aber auch  hier den angegebenen Ideen le icht Inhalte zuordnen. Die Ideenbäume sollten deshalb – in der etwas modifizierten Form – geei gnet sein, Unterrichtsinhalte zu klassifizieren und damit geeignete Unterrichtsgänge au szuwählen. Schwills Ideenbäume zur  Algorithmisierung und strukturierten Zerle gung sowie meiner zu r Formalisierung umfassen also m. E. unterschiedliche Sätz e fundamentaler Ideen, die von den Unterrichtenden jeweils geeignet zu wählen sind. Es  wäre sicherlich ein Kunstfehler, sich  bei dieser Auswahl auf einen Ast oder einen Baum zu besch ränken, also z. B. einen  reinen Programmierkurs (im Sinne von „Codierkurs“) einzurichten. Die Bäume kön-nen als Hilfen angesehen werden, die den Lehr enden unterschiedliche Möglichkeiten  aufzeigen, je nach Vertief ungsgrad übergeordnete Ideen unter schiedlich detailliert zu  behandeln. Im Groben kann gefordert werden, ke inen der Äste im Unterricht zu vergessen; in welchem Ausmaß dieses jewe ils geschieht, muss den Unterrichtenden –  natürlich in Übereinstimmung mit den R ahmenrichtlinien – überlassen bleiben.  Der Vorwurf der „beengten Sicht“, der z. B. von Schubert und Herget gegen Schwills  Masterideen erhoben wird, ist, w enn man seine Beispiele betrachtet, wohl nicht zutreffend. Informatikanwendungen si nd notwendig mit den Masterideen Algorithmisierung und strukturierte Zerlegung  verbunden. Schwills Sprach -Idee z. B. umfasst  durchaus die theoretische und technische In formatik, sie legt dort aber keinen  Schwerpunkt. Ersetzen wir sie durch die Formalisierungs -Idee, dann liefern formale  Sprachen, zugeordnete Automaten, Anwe ndungen bei Schaltwerken reichlich gut  erprobte schulische Standardthem en aus diesem Bereich. Netzwerke unterschiedlicher Klassen, gekoppelte Automaten und deren Anwendungen liefern Zugang zu  aktuellen und auch für die Unterrichteten spannenden Themen.     Formalisierung  Syntax formale Sprache Automat  erkennen  erzeugen Semantik  Konsistenz   Vollständigkeit   Transformation  Zustand  beschreiben erzeugenÜbergang  verursachenBerechenbarkeit  Grenzen  Vernetzung synchron  asynchron Durchführbarkeit 2.3 Zu den vorhandenen Didaktikansätzen    51  2.3 Zu den vorhandenen Didaktikansätzen   In der Informatikdidaktik findet man eine Reihe von unterschiedlic hen Konzepten, die  sich in der „Orientierung“ der jeweiligen  Ansätze zeigen. Untersuchungen dazu finden sich z. B. bei Wilfried Herget289, der herausstellt, dass sich bei allen vordergründigen Unterschieden die Zi ele relativ wenig von einander unterscheiden290, auf hoher  Ebene sogar weitgehend mit denen des Mathemat ikunterrichts übereinstimmen. Die  unterschiedlichen Ori entierungen der Informatikdidakti k ergaben sich in der Vergangenheit teilweise aus den vorhandenen technischen M öglichkeiten der Schule291,  teilweise auch aus dem jeweiligen Kenntnisstand der Lehrenden. Die Folge aus Hardware-, Algorithmen-, Anwendungs-, B enutzer-, Informationsund anderen Orientierungen spiegelt so auch die technisc he Entwicklung der Geräte und teilweise  die fachliche Entwicklung der Lehrenden wi der, und das beklagte Verharren der  Schule beim algorithmenorientierten Ansatz  ist eine logische Folge der fehlenden  fachspezifischen Ausund Weiterbildung de r Lehrkräfte. Die dann ebenfalls logische  Folge der sinkenden Teilnehmerzahlen an Informatikkursen ergibt sich aus den  wachsenden Unterschieden zwischen „erfahr ener“ Computerwelt und der Schulwirklichkeit. (Dabei muss deutlich unterschieden werden zwischen einem „Verharren aus  Einsicht“ – also einer Be tonung der auch aktuell gültig en und hilfreichen Grundlagen  des Faches – und einem „Verharren aus  Mangel und/oder Resi gnation“.) Wesentlichen Einfluss auf die Di skussion hat m. E. auch die je weilige bildungspolitische  Situation genommen. So sp ielte in den Anfangsjahren de s Faches die Abgrenzung  gegen die Mathematik eine große Rolle – was zu einer grotesken „Verteufelung“ der  so reizvollen mathematischen Inhalte führ te –, während später mit dem Aufkommen  der Standardsoftware teilweise eine Abgren zung gegen die informationstechnische  Grundbildung, teilweise ein Aufgehen in dieser für notwendig befunden wurde – mit der Folge der „Verteufelung“  des Programmierens. Mit dem  z. B. von der GI festgestellten Scheitern der ITG 292 werden aktuell wieder or iginär informatische Gesichtspunkte stärker gewichtet.  Der Ablauf der Diskussion ist für das Verstä ndnis der aktuellen Situation wichtig. Der  Dauerstreit z. B. um die St ellung des Programmier ens in der Kursfolge kann nur verstanden werden, wenn man berücksichtigt, dass offensichtlich nicht geklärt ist, aus welchem Grund in Schulen überhaupt progr ammiert werden soll – und das hängt  wiederum mit fehlender Klarheit über die Rolle  des Informatikunterrichts im Spektrum  der Schulfächer zusammen. Die Ziele eines  Schulfaches werden nun u. a. von den  unterschiedlichen gesellsch aftlichen Gruppen beeinflusst, die meist aufgrund der  aktuellen Situation und auch ihrer sehr s pezifischen Sichtweise urteilen und nicht auf  der Basis langfristiger er ziehungswissenschaftlicher Ü berlegungen. Man kann den  Wechsel bei den Ansätzen der Informatikdidaktik deshalb zwar überspitzt, aber doch recht gut mit dem jeweils aktuellen Bedar f auf dem IT-Arbeitsmarkt und der Ausstattung der Schulen erklären. Schon früh wu rden Computer „irgendwie“ für wichtig  gehalten, und weil Schulen kein e hatten, sollten sie wenigst ens „irgendwas“ in dieser                                                     289 [Her94]  290 Wie richtig er damit liegt, zeigt sich, wenn man di e in den Schulbüchern und Veröffentlichungen jeweils  bearbeiteten Probleme und „Aufgaben“ vergleicht. Da tu t sich nämlich kaum etwas: Vom Zeichnen von Funktionsgraphen über die Sortierung von Telefonnummern bis zu den allseits beliebten Bundesjugendspielen und der  Organisation der Schulbibliothek (den „Projekten“) findet  sich alles mit verblüffender Konstanz wieder – nur  jeweils mit einem neuen Tool bearbeitet.  291 So ist „Hardwareorientierung“  zwanglos zu übersetzen als Fehlen von Schulcomputern , aber Vorhandensein  von digitalen Bausteinsätzen .  292 [GI01] 2.3 Zu den vorhandenen Didaktikansätzen    52  Richtung unternehmen, also digitale Schalt ungen entwerfen: Es folgt der „hardwareorientierte Ansatz“. Mit dem Aufkommen der Schulcomputer wurde der direkte Umgang mit diesen Systemen möglich, und Anf ang der 80-er Jahre war Programmieren  die einzige Möglichkeit, die Geräte sinnvoll zu benutzen: Es folgt der „algorithmenorientierte Ansatz“, anfangs, weil nur wenige Geräte bezahlbar waren, als Fach für „besondere“ (wenige) Schülerinne n und Schüler, also als Oberstufenkurs. Standardsoftwarepakete sind wesentlich einfacher  zu benutzen als Pr ogrammentwicklungssysteme, lösen viele Aufgaben und fanden so schnell Verbreitung: Es folgt der „anwendungsorientierte Ansatz“, verbunden du rch fallende Computerpreise mit einer  Verbreiterung der Basis in Richtung „ITG fü r alle (kommenden Arbeitskräfte)“ und in  Richtung Mittelstufe. Den derzeit igen „informationsorientierten Ansatz“ kann man      u. a. mit dem Aufkommen des Internets, seiner prognostizierten wirtschaftlichen und  gesellschaftlichen Bedeutung und der damit aufziehenden globalen Informationsgesellschaft begründen. Wenn dies e Beschreibung auch eine st ark verkürzte Sicht darstellt293, so ist sie m. E. doch nicht ganz falsch , und wenn das so ist, dann zeigt sich,  dass außerhalb des Bildungsbereichs ein orig inäres Interesse am Bildungswert bestimmter Informatikinhalte oder sogar am Fa ch selbst gar nicht besteht, sondern nur  ein diffuses Interesse bei Eltern und Ar beitgebern festzustellen ist, den Umgang mit  Computern „in brauchbarer For m“ irgendwie sicherzustellen294. Dazu meinte man  zuerst – als seinerzeit einzige Alternativ e – das Schulfach Informatik zu brauchen,  danach wurde dieses mit der  ITG anders gesehen, und nun scheint wieder die Informatik an Ansehen zu gewinnen.  Dass die Informatikdidaktik wenigstens te ilweise wirklich durch  diese Trends beeinflusst wurde, zeigt sich auch in der akt uellen Diskussion: Es ist m. E. ungeklärt, ob  Informatik nun auch für eine Breiten-Grundbildung sorgen soll295 (im Sinne der ITG)  oder nur ein Spezialistenfach für wenige ist. Die damit verbundene n Entscheidungen  zwischen                                                   Pflichtfach ÅÆ Wahlfach                                     Oberflächenwissen ÅÆ vertieftem Wissen                                Anwenderkenntnissen ÅÆ Fachkenntnissen  sind nicht gefallen, und so fi ndet man in der didaktischen Literatur erhebliche Widersprüche:  • Einerseits wird eine Sammlung außerordent lich anspruchsvoller Ziele formuliert („Auswirkungen reflektieren und beurteilen296“, „Fähigkeiten zur Auswahl und  der problembezogenen selbstständigen Nutz ung geeigneter Systeme sowie deren Anpassung “, „Chancen und Risiken der Anwendung von Informatiksystemen erkennen  und zum verantwortungsvollen Einsatz v on Informatiksystemen bereit sein “, „Bewertung von Informatiksystemen “297), die erhebliche Erfahrungen und Fachkenntnisse bei den Unterrichteten voraussetzt,  andererseits lassen es die vorgelegt en Beispiele und der angesetzte Zeitbedarf zweifelhaft erscheinen, dass di ese Ziele erreicht werden können298.                                                    293 und ein wenig lästerlich ist  294 Die Forderung, das Fach nach den aktuellen Gegebenheiten auf dem Arbeitsmarkt und den momentanen  Forderungen gesellschaftlicher Gruppen auszurichten, ist schon deshalb unsinnig, weil sich deren Empfehlungen  sehr schnell ändern, teilweise ins genaue Gegenteil.   295 Dass die ITG „gescheitert“ ist, kann ja wohl nicht ernsthaft als Lösung dieser Frage angesehen werden.  296 „Aufgaben und Ziele der Grundbildung“, Nordrhein-Westfalen 1990  297 [Fri95]  298 z. B. in [Bau96a] S. 342, 361 2.3 Zu den vorhandenen Didaktikansätzen    53  • Einerseits wird aktive Schüler arbeit und Projektunterricht299 als grundlegend  für das Fach herausgestellt300,  andererseits wird die für Projektunterri cht wesentliche Produktund Ergebnisorientierung, die im Informatikunt erricht weitgehend durch Programmierung realisiert wird, erschwert oder verh indert, indem ein in den Unterricht integrierter Programmierkurs als schädl ich oder überflüssig hingestellt wird,  zumindest aber nicht genügend Zeit bek ommt, obwohl anderseits verschiedene Programmierparadigmen kennen gele rnt und beurteilt werden sollen.  • Einerseits wird der schnelle Wechsel be i den Informatikinhalten beklagt und  die Besinnung auf Grundlagen gefordert301,  andererseits wird das Fach weitgehend dur ch die starke Anwendungsorientierung begründet.  • Einerseits wird ein Pflichtfa ch Informatik gefordert, „ weil die notwendige  Einsatzbereitschaft der Schül erinnen und Schüler nur in ei nem Pflichtfach erwartet  werden kann“302 (m. E. eine merkwürdige Auffassung von Schule!),  andererseits werden die motivierenden Mo mente des Faches, die zu eben  dieser Einsatzbereitschaft führen,  zugunsten formaler Methoden (bei Hubwieser alleine in Klasse 9 praktisch a lle in der Informat ik gebräuchlichen Diagrammtypen gleichzeitig303) herabgestuft304. Eine wenig überraschende Konsequenz ist, dass „die am Versuch beteiligten Schüler (...) beängstigend wenig Interesse erkennen  [ließen]“305 – und dann braucht man eben ein Pflichtfach.  Ich halte eine fachliche „Orientierung“ des In formatikunterrichts – gleich welcher Art –  für kontraproduktiv306. Obwohl eine einheitliche Ausrichtung intellektuell reizvoll ist,  werden die pädagogischen Möglichkeiten des Faches unnötig beschränkt und die Fachinhalte erhalten eine Gewic htung, die diesen nicht zukommt 307. Ein Fach sollte  den durch allgemeindidakti sche Überlegungen gesteckt en Rahmen vollständig ausfüllen und nicht versuchen, ihn aus fach lichen Überlegungen we iter einzuschränken308. Vor allem aber sollte es nicht Ausricht ungen vornehmen, die mit lerntheoretischen Ergebnissen kollidie ren. So widersprich t die Orientierung an einem  fachlichen  Oberbegriff, z. B. dem der Information, kl ar dem konstruktivistisch gedachten Aufbau  von Denkstrukturen, die von vielfältigem  bestehendem Wissen ausgehen, das der  Erfahrungswelt der Lernenden entlehnt ist. Natürlich kann eine informationsorientierte Sicht das Ziel des Unterrichts sein; sie darf aber nicht den Unterrichtsgang  prä                                                  299 [Hum00] S. 11  300 praktisch in allen didaktischen Arbeiten  301 [Hum00] S. 11  302 [Hub00] S. 70 und [GI01] S. VI  303 in [Hub97]: ER-, Objekt-, Zustandsübergangs diagramme, Datenflussmodelle, Aktionsgraphen, ...  304 z. B. in [Bur94] zu Lehmanns Arbeiten: „ Die Veröffentlichung von Musterprojekten [...] hatte eher abschreckenden Charakter: Die Formalisierung durch Formulare u. a. konnte auch die letzte Kreativität der Schüler vertreiben. “  305 [Leh92] S. 30  306 Unterricht sollte zielgruppenhier: schülerorientiert sein.  307 [Kla85] S. 35: „ Fachdidaktische Entscheidungen können folglich nicht aus den einzelnen Fachwissenschaften  abgeleitet werden, da Schulfächer  [...] und Fachwissenschaften nicht notwendig kongruent sind.  [...] Die Fachwissenschaften entwickeln als solche keine hineichenden Auswahlkriterien, wiewohl di daktische Entscheidungen  selbstverständlich nicht ohne Bezug auf die jeweilige Bezugswissenschaft gefällt werden können. “   308 [His91] S. 13: „Eine didaktische Standortbestimmung kann – für welches Fach auch immer – weder allein  aus Sicht dieses Unterrichtsfachs noch aus der Sicht einer ggf. existierenden Mutterwissenschaft vorgenommen  werden. Vielmehr ist es erforderlich, auch übergreifende  Standorte zu erklimmen, um damit den Bildungsauftrag  der Schule – für die Gesellschaft und das Individuum – in den Blich nehmen zu können.“   2.3 Zu den vorhandenen Didaktikansätzen    54  gen und schon gar nicht als Startpunkt  gewählt werden309. Weiterhin bezweifele ich  in vielen Fällen, dass die übergeordnete Si chtweise, die den Entwicklern eines Didaktikansatzes zur Verfügung steht, v on den Lernenden aus den Unterrichtsinhalten  wieder erschließbar, also rekonstruierbar ist. Insofern wäre dann die Orientierung  sinnlos, weil sie die Adressaten des Unterrichts nicht erreicht.   Weil die existierenden Didaktikansätze auße rordentlich unterschiedlich sind, lässt  sich ein einheitliches Schema zu ihrer Be wertung in Rahmen dieser Arbeit kaum finden. Sie anhand der hi er entwickelten Maßstäbe zu messen, wäre unfair, da sie andere Zielsetzungen haben. Ich be schränke mich deshalb auf eine punktuelle Kritik,  die von den in den jeweiligen Arbeiten selbst zugrunde gelegten Kriterien ausgeht.  Am Beispiel von Peter Hubwiesers Didaktik310 ist der ungute Einfluss der (hier: Informations-)Orientierung nachzuvollziehen: Nach erfreulichen Aussagen zu Motivation  und Kreativitätsförderung311 und einer einleuchtenden Be gründung für die Bedeutung  des Informationsbegriffs im Informatikunt erricht, der Entwicklung eines Grundschemas der Informationsverarbeitung312 und einer Darlegung der Wichtigkeit langfristig  relevanter Inhalte erfolgt eine Einschr änkung auf die zuletz t genannten Punkte, die  m. E. unzulässig ist, weil sie alleine fachimmanent  begründet ist: Hubwieser rechnet  Programmiersprachenkenntnisse nicht zum Kanon allgemein bildender Inhalte – obwohl er sie für einen „unverzichtbaren Baustein zum Ve rständnis elektronischer Informationsund Kommunikationssysteme“313 hält – und vermeidet die Erstellung konkreter Programme, wo immer es geht. Er folgert: „Es liegt auf der Hand, dass Software-Entwicklungsmethoden für den Schulunterricht umso we rtvoller sind, je allgemeiner, sprachund  plattformunabhängiger sie sind.“314 Er verzichtet weitgehend auf die Implementierung  der entwickelten Methoden und so m. E. auf  den aus allgemeindidaktischer Sicht  entscheidenden Grund für ein Schulfach Informatik315 (s. 2.4.1). Um die Programmierung zu umgehen und planendes Handeln zu unterstützen, benutzt er diverse Arten  von Diagrammen bei der Mode llierung und Darstellung von Informationen. Er bleibt  aber auf eine Begrün dung schuldig, weshalb denn ER-Diagramme, Datenflussmodelle oder Transitionsgraphen al lgemein bildend sein sollen316. Dass die Beschränkung auf den Umgang mit diesen Graphen in der  beschriebenen 9. Klassenstufe motivationsund kreativitätsförder nd sein soll, widerspricht a ll meiner Berufserfahrung.  Die als Kompromiss angebotene Pascal-Implementierung v on Automatenmodellen in  einem völlig starren Schema,  aufgegliedert in Etappen, die nach einzelnen Kontrollstrukturen geordnet sind, ersch wert durch ihre Einseitigkeit die Nutzung des Programmentwicklungssystems als Werkzeug zu r Realisierung eigener Ideen. Die Informationsorientierung weitgehend ohne Impl ementation der Modelle führt bei Hubwieser zu vorbereitendem Lernen – das schon in anderen Fächern nicht funktioniert  und die Motivation töten kann. Die z. B. in  der Klasse 6 eingeführten, an Java angelehnten formalen Objektbeschreibungen bleiben zu diesem Zeitpunkt folgenlos und  werden wohl vergessen sein, wenn laut Lehrplan nach zwei Sc huljahren weiterfüh                                                  309 Jedenfalls solange nicht, wie Informationsorientierung nicht zur Erfahrungswelt der Lernenden gehört.  310 [Hub00]  311 [Hub00] S. 17: „Die Kreativität der Schüler ist jedenfalls Voraussetzung für die Neukonstruktion von Wissen.  Deshalb gehört ihre Förderung zu den wichtigsten Zielen des Unterrichts.“  312 Darstellung, Verarbeitung, Transport und Interpretation von Informationen  313 [Hub00] S. 169  314 [Hub97] S. 44  315 Das wirklich Neue am Fach besteht ja darin, dass die Ideen der Unterrichteten standardmäßig realisiert werden können, nicht nur „besprochen“ werden. Wird hierauf verzichtet, dann wird das Spektrum der Schule nicht  entscheidend erweitert.  316 es sei denn, das „Nicht-Progra mmieren“ wäre ein Wert für sich 2.3 Zu den vorhandenen Didaktikansätzen    55  rende Einheiten auftauchen. Ich hielte es für besser, wenn Unterrichtsinhalte den  Unterrichteten zum aktuellen Zeitpunkt  hilfreich und si nnvoll erscheinen317 und ihren  Sinn nicht nur aus der Fortsetzung zu ei nem späteren Zeitpunkt erhalten. Hubwieser  zahlt m. E. für seinen informationszentrier ten Ansatz einen hohen  Preis: Seine Beispiele passen nicht mehr so recht zu se inen sehr ansprechenden,  offensichtlich aus  Erfahrung gewonnenen Pr axistipps vom Anfang seines Buches318, und er läuft m. E.  Gefahr, die Schülerinnen und Schüler zu verlieren319, denn sonst wäre seine Forderung nach Pflichtunterricht, weil „ die Schüler nur in einem solchen Fach zu derartigen Anstrengungen bereit sind“ , kaum zu erklären320. Die informationszentri erte Sicht auf die  Informatik ist natürlich ein interessanter  und wohlbegründeter Ansatz; sie ist aber  nicht die einzig mögliche, und die dar aus gezogenen Folgerungen wären gegen andere, z. B. allgemeinpädagogi sche, abzuwägen. Geschieht das nicht, dann kann der  Unterricht einseitig werden.321  Ähnliches lässt sich zur Didaktik Rüdiger Baumanns322 sagen. In einer enormen  Fleißarbeit hat Baumann eine erste Didaktik geschrieben, in der er einen informationswissenschaftlichen Ansatz herausarbeitet, der allerdings – weil er auf weitgehend  nicht vorhandene Voraussetzungen aufsetzt323 – in der Schule wenig Bedeutung erlangt hat324. Baumann beginnt mit den Bezugswisse nschaften und einer Handlungstheorie, die er formal zu formulieren versucht325 und die er als gr undlegend für die  Informatik bezeichnet. Leider aber findet sich in den folgen den Überlegungen zur  Informatikdidaktik keinerlei Bezug mehr zur „Handlungstheorie“ . Ähnliche Brüche  finden sich häufiger, so z.  B. wenn eine Gliederung326, angelehnt an Kategorien der  allgemeinen Didaktik, ein ganzes Arbeitsprogramm enthält, das aber nirgends angegangen wird327. Wenn so etwas bei einem ersten Versuch, eine geschlossene Fachdidaktik vorzulegen, auch verständlich ist, so muss doch kritisiert werden, dass Baumann immer wieder Ansprüche erhebt, die er zw ar selbst nicht einlöst, trotzdem aber  als Grundlage zur Kritik an bestehendem Unte rricht wählt. So konstatiert er, dass  „ein Informatikunterricht, de r nicht ausgiebig und intensiv Themen der KI-Forschung und  der Kognitionswissenschaft aufgreift,  sein (Bildungs-)Ziel verfehlt.“328 Danach kommen einige Seiten Aufzählungen – z. B. ganze neun Zeilen zu  Diagnostiksystemen –, auf  die ein bemerkenswertes Resümee folgt: „Das im Unterricht entwickelte Minimalsystem  kann natürlich keine zutreffende Vorstellung davon vermitteln, was derzeit machbar ist, und  erst recht keine davon, was in Zu kunft erreichbar sein wird. D aher sind Aussagen über prinzipielle Grenzen dessen, was Computer verm ögen, in der Schule höchst problematisch. Es  kann sich eigentlich nur um einen Beginn de s Nachdenkens über Fragen dieser Art handeln.“   Wenn also einerseits das Thema essentiell fü r das Fach sein soll und andererseits in                                                    317 und sie sollten natürlich auch sinnvoll sein!  318 [Hub00] S. 18: „ Kreativität kann in einer fest vorgeplanten Umgebung nicht gedeihen, ein gewisser chaotischer Bereich ist unabdingbar .“  319 In [Hub97] S. 45 weist er selbst auf die „ leidvollen Erfahrungen “ mit abstrakten Konzepten hin.  320 Die anders begründete Forderung nach einem Pflichtfach – z. B. durch die Bedeutung von Informatikkenntnissen als vierter Kulturtechnik – wird von dieser Kritik natürlich nicht betoffen.  321 In diesem Zusammenhang zeigt sich auch der Sinn von Bergers Frage: „ Ist dann eine Professionalisierung in  Hinsicht auf Starrheit (wie in der Mathematik) überhaupt wünschenswert. Ist Informatik nicht gerade wegen  ihrer ‚Unprofessionalität’ eine Wohltat für das Schulsystem? “ [Ber98]  322 [Bau90], [Bau96a]  323 z. B. ein durchgehendes Pflichtfach Informatik  324 [Hum00] S. 20  325 [Bau96a] S. 33: „ Er realisiert damit die Handlung H = (P,Z,T*) = opt{Ti} “  326 auf S. 45  327 z. B. „ Erarbeitung der Zusammenhänge zwischen Informatikunterricht und allgemeinen Bildungszielen und  Erörterung der Sinnfrage im Informatikunterricht “.  328 [Bau96a] S. 341 2.3 Zu den vorhandenen Didaktikansätzen    56  der Schule kaum behandelbar: welche Hilfe stellen dies e Überlegungen dar? Baumann neigt zu Formulierungen, die bestehenden  Unterricht in sehr scharfer Form  abqualifizieren, ohne praktikable Alternativen zu nennen. Er  will den Unterricht nicht  weiterentwickeln, sondern (jew eils neu) radikal ändern, und er erhebt Ansprüche, die  er leider durch seine Unterri chtsbeispiele nicht einlöst.329 Ich halte dieses Vorgehen  für gefährlich, weil dadurch  die Nutzung bestehender Unte rrichtserfahrungen, also  Kontinuität, verhindert werden kann. Sch limmer noch: Die Entwertung des meist autodidaktisch erworbenen Wissens der Un terrichtenden kann diese entmutigen, auf  ihrem Weg fortzuschreiten. Unbeschadet davon sind Baumanns Arbeiten immer eine  Quelle interessanter Ideen u nd schlagen oft eine Bresche in neue Bereic he, die ohne  seine Vorarbeiten nicht – od er wesentlich schwieriger – zugänglich wären. Leider  propagiert er eher einen Unterricht, der extr em „kopfzentriert“ ist und die Bedeutung  von enaktiven Unterrichtsphasen m. E. völlig unterschätzt330.  Einen ganz anderen W eg als die beiden g enannten Didaktiker zei gen die Ergebnisse  der „fachdidaktischen Gespräche der TU Dresden“331, die aktuell zusammen mit Hubwiesers informationszentrierte r Didaktik offensichtlich in  die „Empfehlungen für ein  Gesamtkonzept zur informatischen Bild ung an allgemein bildenden Schulen“332 der  Gesellschaft für Informatik eingeflossen si nd. Der Unterschied besteht darin, dass  einerseits aktuelle Inhalte aus den allgemeindidaktischen Zi elen abgeleitet werden,  andererseits bestehende Ansätze zusammengef ührt und fortgesetzt werden. Die von  Steffen Friedrich initiiert en Treffen führten zu vier Leitlinien, mit deren Hilfe Sachkompetenz , Methodenkompetenz  und Handlungskompetenz  bei den Unterrichteten  erreicht werden sollen. Die angestrebte in formatische Bildung wird  handfest definiert  und soll durch Unterrichtsbeispiele unterfütte rt werden. Gelingt dieses überzeugend,  dann kann aus der Initiative ein konkretes, in Schulen umsetzbares Modell für Informatikunterricht entstehen – wie es die GI jetz t ja auch anstrebt. Die Leitlinien lauten:  Umgang mit Informationen:   Verständnis für informationelle Prozesse entw ickeln und wesentliche Merkmale von Informationen erkennen; Codierung al s Prinzip der Informationsverarbeitung erkennen; Methoden zur Strukturierung und Darbietung v on Informationen kennen und anwenden; einen  Einblick in die Prinzi pien der Organisation von Wissen  erhalten; Methoden zur Beschaffung von Informationen kennen und nutzen; Kommunikationsnetze al s Bestandteil soziotechnischer Systeme erkennen und nutzen; Date nschutz und informationelle Selbstbestimmung als Grundrecht verstehen und zum verantwo rtungsvollen Umgang mit Informationen  bereit sein.  Wirkprinzipien von Informatiksystemen:  Aufbau und die Funktionsweise von Informatiksyst emen in ihrer Einheit von Hardware und  Software kennen; die Fähigkeit erwerben, sich in die Nutzung von Informatiksystemen einzuarbeiten; einen Einblick in die historische Entwicklung v on Informatiksystemen erhalten; Chancen und Risiken der Anwendung von In formatiksystemen erkennen und zum verantwortungsvollen Einsatz von Info rmatiksystemen bereit sein.  Problemlösen mit Informatiksystemen:  Probleme erkennen, die mit Inform atiksystemen gelöst werden können; einen Einblick in  gesellschaftlich bedeutsame Anwendungen de r Informationsund Kommunikationstechnik  erhalten; erkennen, dass Modellb ildung ein zentrales Element des Problemlösens mit In                                                  329 Auch in seinen Schulbüchern nicht, die nach der Herausgabe der Didaktik erschienen sind. [Bau92], [Bau93]  330 z. B. in [Bau96a] S. 305  zur technischen Informatik  331 [Fri95], [Fri96]  332 [GI01] 2.3 Zu den vorhandenen Didaktikansätzen    57  formatiksystemen ist; problemadäquate Softwar ewerkzeuge (Standardsoftware, Softwaretools, Programmiersprachen) zur Lösung v on Problemen auswählen  und anwenden; Problemlösungen hinsichtlich ihrer Relevanz , Korrektheit und Effizienz beurteilen.  Arbeiten mit Modellen:  Erkennen, dass die Arbeit mit Informatiksystemen  ein Arbeiten mit Modellen ist; erkennen,  dass jedes Modell ein Abbild der Realität ist; Methoden zur Modellbildung kennen und  anwenden; Phasen der Modellbildung anwe nden können, insbesondere die Notwendigkeit  der Modellkritik einsehen.  Die Ergebnisse der Arbeits gruppe fußen auf Klafkis epochaltypischen Schlüsselproblemen  und den Arbeiten von Heymann und Bu ssmann. Sie landen entsprechend  bei Empfehlungen, die nicht alleine fachspezifisch be gründet sind, sondern den pädagogischen Rahmen berücksichtigen und R aum für unterschiedliche (An-)Sichten  lassen. Als Arbeitsprinzip wird exemplar ischer Unterricht gefordert, und Unterrichtsinhalte werden nac h den Kriterien „handlungsorientiert; Bezug zu r Praxis, zu Lebensnähe  der Schüler; realer Anwendungsbezug; arbeitstei lig bearbeitbar; auf de n Rechnern realisierbar; Möglichkeiten zur selbstständigen kreati v-forschenden Erarbeitung der Problemlösung;  interdisziplinär; Vorkenntnisse  berücksichtigend; Notwendigkeit für neue informatische  Fachinhalte minimierend“  ausgewählt, entsprechen damit  weitgehend den Folgerungen aus der konstruktivistischen Sicht. Aus dem doppelten Ausgangspunkt der Arbeitsgruppe, der fachlichen un d der schulischen Sicht, kann sich allerdings m. E.  auch ein Schwachpunkt ergeben:  Es kann zu Kollisionen führen, wenn eine klare  Rangordnung fehlt – z. B. w enn die Fachinhalte nicht aus allgemeinen Zielen folgen,  sondern weitgehend unabhängi g gewählt werden.  Friedrich nennt als Be iträge der Informatik zur Allgemeinbildung „ Kenntnis über die  Grundlagen der computergestützten Kommunikation; Sensibilisieren für Informationssicher-heit; Wissen und exemplarisches Können über Programmierbarkeit (Modellierung, Algorithmisierung, Formalisierung); Transparenz vo n Grundfunktionen der Hardware; Beherrschen  von komplexen Zusammenhängen (durch Modell ierung komplexer Systeme); Bewertung von  Informatiksystemen“  und „Wissen über Unentscheidbarkeit (als Phänomen)“ . Damit ist er  nahe genug an konkretem Unterricht, ohne diesen im Detail festzulegen. Er liefert Orientierung 333 ohne zu gängeln. Es ist zu hoffen,  dass die Arbeitsgruppe bei der  Entwicklung der Unterrichtsbeispiele nicht in  die gleiche Falle tappt wie andere Ansätze, also Ziele definiert, die nur bei vertiefter informatischer Bildung erreichbar  sind, und gleichzeitig Unterrich t zu beschreiben, der einer Breitenbildung dienen soll.  Die im GI-Papier erfolgte  Trennung nach Schulstufen – und damit nach Pflichtund  Wahlunterricht – bietet hi er einen vernünftigen Ansatz334.                                                    333 obwohl ich das Ziel der „Bewertung  von Informatiksystemen“ schon für sehr hochgestochen halte!  334 Allerdings halte ich die Übernahme von Hubwiesers Begründung für Pflichtunterricht (s. Seite 55) für bedenklich. 2.4 Zum Programmieren und der OOP    58  2.4 Zum Programmieren und der OOP  „Informatikunterricht soll kein Programmier kurs sein. Warum eigentlich nicht?“335 Dieses  Zitat von Sigrid Schubert ist in einem Um feld, das ziemlich einhellig Programmierkurse ablehnt, einigermaßen erfrischend. Da Frau Schubert nicht gerade den leich-testen Weg zum Informatikunt erricht empfiehlt, z. B. den Theorieanteil stark betont,  kann die Äußerung nicht einf ach übergangen werden. Es is t deshalb zu untersuchen,  was unter einem „ Programmierkurs “ eigentlich verstanden werden soll.    2.4.1 Zum Programmierku rs in der Kursfolge  Die didaktische Diskussion über die Stellung der Programmiersprachen usw. setzt   m. E. fast immer eine Stufe zu spät ei n. Bevor über Art und Umfang eines Programmierkurses und über die benutzten Spra chen entschieden werden kann, muss erst  einmal die Aufgabe dieses Kurses im Unte rricht geklärt werden. Einigkeit herrscht  weitgehend darüber, dass der In formatikunterricht die Kreativität der Schülerinnen  und Schüler stärken, soziales Lernen in projektartigen Unterrichtsphasen ermöglichen und eigenständiges Modelli eren fördern soll. Ziehen wir weiter die von mir gefundenen Kriterien zur Auswah l von Unterrichtseinheit en heran, dann lassen sich  viele davon nur erfüllen, wenn die Unterri chteten phasenweise selbstständig Probleme analysieren, modellieren und die gefundenen Modelle implementieren und testen, wobei noch nichts über die Art des Werkzeugs gesagt ist – bis auf eines: Eigenständiges Arbeiten erfordert fundierte Kenntnisse der Möglichkeiten des Werkzeuggebrauchs, und die müssen irgendwo erworben werden, bestimmt nicht nebenbei. Wenn also selbstständiges Arbeiten gefor dert wird, dann impliziert das einen  sorgfältig geplanten Unterricht, in dem di e dafür erforderlichen Qualifikationen erworben werden können , und der kostet viel Zeit.  Benutzen wir unterschiedliche Werkzeuge, dann müssen wir auch mehrfach die Ze it zum Erlernen des jeweiligen Werkzeuggebrauchs aufwenden – und di eser Aufwand will sorgfältig begründet sein. Verwenden wir die Unterrichtszeit so weitgeh end zur Vermittlung von Inhalten, dass von  den Schülerinnen und Schülern die Fähigkei t, z. B. die Programmiersprache als  Werkzeug zu gebrauchen, nicht mehr er worben wird, dann können wir das Fach  auch nicht mehr mit der Möglichkeit zu Pr ojektunterricht, Teamarbeit und individualisiertem Lernen rechtfertigen.   Spezialkenntnisse über das  benutzte Werkzeug sind außer ordentlich kurzlebig und  zählen sicher nicht zu den Fachinhalten, mit denen ein Schulfach Informatik begründbar ist336. Sie gewinnen ihre Bedeutung erst aus dem Kontext, in dem sie eingesetzt werden: der eigens tändigen Schülerarbeit und den Erfahrungen, die daraus  gewonnen werden. Kenntnisse über den Gebrauch der Wer kzeuge sind kein Selbstzweck, und deshalb wird auch keine systematische  Einführung in  den Werkzeuggebrauch verlangt, sondern eine erforderliche , die sich meist aus der bearbeiteten  Problemstellung ergibt. Die dafür benötigte n Kenntnisse müssen sorgfältig vermittelt  und geübt werden. Geeignet fü r den Informatikunterricht erscheinen mir nach wie vor  Programmentwicklungssysteme, die eine un iverselle Programmier sprache enthalten  und die durch die Bereitstell ung geeigneter Bibliotheken so erweitert werden können,  dass ein Wechsel zu anderen Wer kzeugen weitgehend überflüssig wird.                                                     335 [Schu99] S. 6  336 In diesem Sinne hat Peter Hubwieser völlig Recht. 2.4 Zum Programmieren und der OOP    59  Unter der reinen „Programmierung“ versteht man die Kodierung eines Algorithmus’ in  einer Programmiersprache, also die Formu lierung des etwa in Struktogrammform  beschriebenen Verfahrens in einer Sprache, die dann von einem Co mpiler in ein ausführbares Programm übersetzt werden kann. Die Entwicklung des Algorithmus selbst  ist (fast) programmiersprachenfrei, allerd ings hat der Progra mmentwickler natürlich  die Möglichkeiten der „Zielsprache“ im Hin terkopf, so dass er meist Verfahren wählt,  die in der benutzten Programmiersprache gut zu verwirklichen sind. Die reine Kodierung ist als Unterrichtsthema völlig ungeei gnet. Unter einem Programmierkurs verstehen wir deshalb die eingestreuten Unte rrichtsphasen, in denen Probleme gelöst  werden, die sich sehr direkt auf besti mmte Strukturen der Pr ogrammiersprache abbilden lassen. Ein so verst andener Programmierkurs kann zwar, darf aber nicht den  Informatikunterricht bilden337.   Andererseits müssen die Lernenden sicher programmieren können,  wenn sie ihre  Ideen selbstständig am Computer  verwirklichen sollen. Da ihre Modelle sich nicht  durch Kurzprogramme, wie sie im Programmi erkurs üblich sind, realisieren lassen,  müssen sie ihr Werkzeug wenigstens unter  den dafür erforderlichen Aspekten beherrschen – und das sind nicht wenige. Für den problemorientierten Unterricht wäre  es also wünschenswert, Schülerinnen und Sc hüler zu haben, die in etwa wissen,  welche Möglichkeiten das Programment wicklungssystem zu Verfügung stellt, damit  sie nicht laufend durch Detailprobleme für eigene Ideen blockiert sind. Es wäre trotzdem keine gute Idee, einen Programmierku rs dem eigentlichen Informatikunterricht  vorzuschalten. Der größere Teil der Info rmatikschülerinnen und schüler nimmt nicht  an der gesamten Kursfolge teil, sondern stei gt nach einem oder zwei Kursen (z. B.  nach der 11. Klasse) aus. Würde deren Unterrichtszeit überwiegend von einem Pro-grammierkurs eingenommen, dessen Re chtfertigung erst durch die Teilnahme an  den Kursen höherer Semester erfolgt, dann wäre  der Unterricht dieser Schülerinnen  und Schüler vertan. Folglich muss ein Pr ogrammierkurs über die gesamte Kursfolge  so verteilt werden, dass einerseits die Sprachstrukturen, die zur Bearbeitung bestimmter Problemklassen erforderlich sind , sicher beherrscht werden, andererseits  die zu dieser Übung erfor derliche Zeit in einem ausge wogenen Verhältnis zur Gesamtunterrichtszeit steht. Sinnvollerweise folgen die benötigten Sprachstrukturen aus  einer umfassenderen Problemstellung, so dass Schüler und Lehrer jeweils wissen,  weshalb gerade diese Programmierübungs phase eingeschoben werden muss. Ein  Programmierkurs kann und soll deshalb ni cht an der Systematik der Programmiersprache ausgerichtet sein. Er wird di e zur Verfügung stehenden Sprachmittel nur  unvollständig ausschöpfen. Er enthält nur die benötigten , nicht die möglichen  Teile;  diese werden allerdings sorgfältig unterrichtet.     2.4.2 Zur Programmiersprache  Ulrich Hoppe und Wolfram Luther haben einen Standpunk t formuliert, der meinen  Vorstellungen entspricht: „ Ebenso wie das elementare Rec hnen die ‚Primärerfahrung’ der  Mathematik ist, gilt dies entsprechend für da s Programmieren als Pr imärerfahrung der Informatik.“  und „Wenn man also (...) die Informatik  als Bestandteil der Allgemeinbildung  sieht, so kommt dem Programmieren  eine zentrale Bedeutung zu.“338 Ähnlich sieht das Jürgen Burkert: „Will Informatik seinen konstruktiv en Charakter nicht aufgeben – und das  würde Informatik zum Sandkastenspiel reduzie ren –, müssen der Analyse des Problems und                                                    337 Leider wird unter Programmieren  oft ein solcher Kurs verstanden, auf den dann – zu Recht – „eingeprügelt“  wird.  338 [Hop96] 2.4 Zum Programmieren und der OOP    60  seiner Zergliederung Lösungsentwürfe und dere n Realisation mit dem Computer folgen.“339  Programmieren ist also wichtig, um die ko nstruktiven Komponenten des Faches zu  erhalten, den Lernenden eigene Gestaltungsmöglichkeit en einzuräumen und ihnen –  unabhängig von der Bewertung durch die Unterrichtenden – eigene Testmöglichkeiten für die Qualität ihrer Vorstellungen zu geben340, anhand derer sie die Gültigkeit  ihrer für das bearbeitete Problemfeld ent wickelten Denkkonstrukte überprüfen können. Entsprechend wichtig ist das Medium, in dem diese Arbeit abläuft – die Programmiersprache.  Diskussionen über die Wahl der  benutzten Programmiersprache „sollten nicht die Diskussion um Inhalte des Inform atikunterrichts ersetzen“341. Trotzdem beherrscht gerade  diese Diskussion seit Jahr(zehnt)en die didaktischen Veröffentlichungen. Sigrid  Schubert meint: „Es sollte davon abgegangen werden, di e Programmiersprachen gegeneinander zu stellen. Die Schüler benötigen versc hiedene Sprachwerkzeuge, um deren Vorzüge  und Nachteile in Abhängigkeit von dem zu lösende n Problem zu verstehen. Offen ist, in welchem Umfang man über alternative Sprachkonzepte  aufklären muss, um exemplarisches Verständnis zu entwickeln.“  So weit, so gut. Die Konsequenzen sind aber auch offensichtlich: „Auf Fertigkeiten wird man weitgehend verzichten müssen. Die Einsichten dominieren.  Die motivierende Wirkung, die aus der Erprobung eigener Lös ungen und dem Experimentieren am Computer resultiert , darf nicht verloren gehen.“342 An dieser Stelle wird die Problematik sehr deutlich: Einerseits wer den – aus fachimmanenten Gründen – verschiedene Sprachkonzepte gefordert, anderer seits wird der daraus folgende offene  Widerspruch zwischen „ Kennen lernen verschiedener Sprachen “ und „ Werkzeugbeherrschung “ nicht gelöst. Ohne eine konkrete Lös ung, die den Zeitbedarf berücksichtigt343, sind solche Empfehlungen für den Praktiker aber wertlos. Etwas später  schreibt Frau Schubert: „Mehrsprachigkeit gehört zum Informatikunterricht. Die verschiedenen Paradigmen sind prinzipi ell gleich leistungsstark, eigne n sich aber für Aufgabenklassen unterschiedlich gut. Diese Erkenntnis und die Fähigkeit zum begrün deten Vergleich besitzen einen höheren Bildungswert als Vertie fungen in einem einzelnen Paradigma.“344 Man  muss fragen, wie die Fähigkeit zum „ begründeten Vergleich“  erworben wird, wenn  aus Zeitgründen auf Fertigkeiten verzichtet  wird (s. o.), und wo dann der Bildungswert dieser Vergleichsfähigkeit liegt. Ich meine, dass hier die Programmiersprachen  bei all ihrer Bedeutung ei nen unangemessen hohen Stellenw ert bekommen, dass sie  als Selbstzweck und nicht als Medium des Lernens betrachtet we rden, und dass das  pädagogische Ziel des Programmierens hinter  aller Fachsystematik nicht mehr gesehen wird. Der Aufwand für einen Wechsel des Werkzeugs muss immer im Kontext  betrachtet werden. Im Leistungskurs oder in der Prüfungskursfo lge steht die erforderliche Zeit ggf. zur Verfügung, in kürz eren Einheiten meistens nicht. Und auch  wenn die Zeit vorhanden ist: Unterschiedl iche Sprachkonzepte können, müssen aber  nicht in unterschiedlichen Um gebungen erprobt werd en. Es ist durchaus möglich,     z. B. die Besonderheiten des  deklarativen Programmierens  zu „erfahren“, indem man  im Rahmen des Theorieteils einen Mini-Pro log-Interpreter selbst schreibt und dabei  die neuen Konzepte (und deren Beschränkungen) kennen lernt.                                                      339 [Bur94]  340 [Schu99] S. 6:  „Der persönlichkeitsbildende Wert der Informatik ist ihre spezifische Weise, Modelle aus  Strukturen zu entwickeln und die ex perimentelle Manipulation mit diesen  Modellen, die dem Lernenden seine  Denkfehler aufzeigen.“   341 [Neu98]  342 [Schu99] S. 11  343 Etwas später werden für das Thema „Problemlösen mit Algorithmen und Datenstrukturen und rekursive   Arbeitsweise“  vier Stunden von insgesamt dreißig angesetzt!  344 [Schu99] S. 36 2.4 Zum Programmieren und der OOP    61  Die Wahl der Sprache ist sicherlich wichtig345, ihre Bedeutung so llte aber auch nicht  überschätzt werden. Wir woll en festhalten, dass die Programmiersprache ein Werkzeug ist, ihre Beherrschung also nicht als Selbstzweck, sondern als Mittel zur Erreichung anderer Ziele angesehen werden mu ss. Wie bei anderen Werkzeugen auch  ist es ziemlich gleichgültig, welches von mehreren geeigneten  ausgewählt wird. Die  Wahl der Programmiersprache ist auch zeitabhängig, denn die auf Schulrechnern  lauffähigen (und bezahlbaren) Programmi ersprachen, besonders aber die Mächtigkeit ihrer Sprachmittel, ändern sich laufend.  Selbst wenn die jeweils neueste Version  wirklich für die Schule wicht ige Verbesserungen enthalten sollte, so wäre auch dann  ein ständiger Wechsel des Syst ems nicht zu vertreten. M an sollte sich gut überlegen,  welche der zu einem Zeitpunkt geeigneten Sprachversionen man wählt – und dann solange wie vertretbar bei dieser Version bleiben, denn die Qualität des Unterrichts  hängt auch davon ab, wie genau die Unterri chtenden das benutzte System kennen.  Für die Wahl der Sprache muss die Eignung in einer gegebenen Situation  entscheidend sein, und deshalb sind nicht nur Spracheigenschaften wichtig, sondern auch die Vorkenntnisse der Unterrichtenden, di e Ausstattung der Schule und – ggf. – der  Aufwand für einen Systemwechsel. Für entsc heidender als die Sprache selbst halte  ich sowieso die Entwickl ungsumgebung, in die die Sp rache integriert ist 346, sowie  deren Hilfen und Testmöglic hkeiten, denn in dieser Umgebung arbeiten die Lernenden, sie ist entscheidend für die Akzeptanz.   Objektorientierte Sprachen er leichtern heute die Integrati on zusätzlicher Werkzeuge,  z. B. für den Zugriff auf  Datenbanken oder zusätzliche Geräte wie Roboter o. Ä.347  Da die Syntax dieser Sprachen mit der „P unktnotation“ zum Aufruf von Objekteigenschaften weitgehend einheitlic h ist, bestehen die Untersch iede auf der in Schulen  benötigten Komplexitätsebene zum großen Teil in der Notati on der Kontrollstrukturen  – spielen also ka um eine Rolle348. OOP hat sich aus guten Gründen weitgehend  durchgesetzt. (Auf die Unterschiede zu tr aditionellen Programmi ersprachen, insbesondere die Modellierungs möglichkeiten, will ich hier  aus Platzgründen nicht näher  eingehen.) Der Hauptvorteil liegt  m. E. darin, dass im Zusa mmenspiel mit integrierten  Entwicklungsumgebungen die B edeutung der „Benutzerschnittstelle“, also der Programmoberfläche, auf das angemessene geri nge Maß heruntergestuft wurde. Oberflächen werden schnell „zusammengeklickt“, und dann bleibt Zeit für die eigentliche  Problemlösung. Sprachen wie Delphi, Java  (mit IDE) und andere ersetzen endlose  Folgen von Read-Write-Anweisungen oder entsprechende Befehl sfolgen, die Oberflächen erzeugen sollen, durch einige wenige Ressourcendefinitionen, die  z. B. bei  Delphi im Programmtext kaum  noch zu finden sind. Sie schaffen Raum für die Implementierung abstrakter Konzepte, von Da tenstrukturen und ansp ruchsvollen Algorithmen, deren Ergebnisse nur noch an Oberflächenelemente gekoppelt werden  müssen. OOP ermöglicht so wir klich inhaltsreicheren Informa tikunterricht, stellt eine  qualitative Verbesserung dar – und das nicht so sehr durch die neuen Sprachkonzepte349, sondern durch die verbesserten Entwicklungswerkzeuge.  OOP-Systeme sind ein interessanter Anwendungs fall konstruktivistischer Lernvorstellungen. Einerseits ermög lichen sie relativ einfach die Entwicklung komplexer Programme, indem sie zahlreiche Details „ver stecken“, andererseits verhindert dieses                                                    345 Ab jetzt weitgehend nach [Mod91] S. 57ff  346 Idealerweise nimmt man eine ID E mit auswechselbaren Sprachen.  347 Sie ersetzen so die früher gebräuchlichen Lernumgebungen mit entsprechenden Spracherweiterungen.  348 Für die Lernenden ist jede Syntax neu – und damit austauschbar. Dass es sehr viel mehr auf Erfahrungen im  Problemlösen mit Computern  als auf spezielle Sprachkenntnisse anko mmt, zeigen z. B. die im Anhang aufgeführten Ergebnisse.  349 Die standen in den letzten Pascal-Versionen ja auch schon zur Verfügung. 2.4 Zum Programmieren und der OOP    62  Verstecken ggf. die Entwicklung eines gü ltigen Computermodell s bei den Lernenden.350 Ben-Ari spricht von einem „objektorientierten Paradoxon“:  The abstraction inherent in OOP is essentia l as a way of forget ting detail, and software  development would be impossible without abs traction, but it seems to me that there  must be an object-oriented paradox: how is it possible to forget detail that you never  knew or even imagined? If students find it di fficult to construct a viable model of variables and parameters, why should we believe t hat they can construct a viable model of  an object such as a window object? Advocates of an objects-first approach seem to be  rejecting Piaget’s view that abstraction (or accommodation) follows assimilation.351  Er hat natürlich Recht damit, dass die Ler nenden in jedem Fall ein Computermodell  entwickeln werden: “Even if no effort is made to present a view of what is going on ‘inside’  the learners will form their own.”352, und auch mit der Notwendigkeit eines solchen  Modells stimme ich überein: “The lack of an effecti ve, even if flawed, model of a computer  can be a serious obstacle to teaching computer science if we accept the claim (…) that prior  knowledge, even in the form of misconceptions, is  essential to the construction of new knowledge.“353 Trotzdem ist das m. E. kein Ei nwand gegen OOP-Sprachen. Ben-Ari sagt  nämlich nichts über die Art des z ugrunde zu legenden Computermodells.354 Folgen  wir seiner Argumentation, dass es fal sch ist, unbekannte Eigenschaften zu verstecken (s. o.), dann könnte Lernen immer nur  auf der elementarst en Ebene beginnen.  Auch die Benutzung z. B. einf acher imperativer Sprachen ve rsteckt ja „fast alle“ Details und müsste folgerichtig z. B. zuguns ten einer vorgelagerten „Bit-und-Byte-Hardwareebene“ verboten werden. Ben-Ari übersieht m. E., da ss die Modelle der Lernenden aus konstruktivistischer Sicht nicht volls tändig, sondern nur gü ltig sein müssen,  und zwar gültig für die Abstraktionsebene, auf der gearbeitet wird. Wie auf anderen  Gebieten355 auch wird ausgehend von einem „Urm odell“, das eher intuitiv aus der  Erfahrungswelt der Lernenden entstanden ist, zu  mehr und mehr gü ltigen Modellen  gewechselt werden müssen. Die Erfahrungswelt ist aber fast nie auf einer elementaren Ebene angeordnet, sondern entspricht meist ei ner Sicht von Benutzern, die z. B.  technische Geräte (wie Computer) als Bl ack-Boxes einfach be nutzen. Von dieser  Ebene aus kann zu „tiefer liegenden“ Fr agen übergegangen werden – wie z. B. im  Physikunterricht. Es können aber auch Syst ematiken heraus gearbeitet werden – wie  z. B. in der Taxonomie der Biologie – oder Kausalketten – wie z. B. in der Ökologie  oder Ökonomie. Je nach Arbeitsricht ung werden die vorhandenen, meist überwiegend ungültigen Modellvorstellun gen in unterschiedlicher Hinsicht „verschärft“. Dementsprechend ist es auch erlaubt, die In teraktionen von Softwar eobjekten in einem  aus Erfahrungen gewonnenen M odell zu beschreiben, das  tiefer liegende Eigenschaften ignoriert, dafür aber eben gültig z. B. für das Eventhandling ist. Ben-Aris  Window-Objekte werden dann zwar nicht auf  der Implementationsebene korrekt modelliert, dafür aber auf der Interaktions ebene. Solange diese die vorrangige Rolle  spielt, ist sie auch ausreichend gültig.                                                     350 [Boy00] „Ben-Ari (…) advocates, in particular, making explicit clear models that enables students to construct more accurate mental representations of the behaviour of the computer. This, in turn, will provide them  with a cognitive basis for understanding and debugging the behaviour of programs.“   351 [Ben02] S. 11  352 [Ben02] S. 8  353 [Ben02] S. 9  354 [Hen96] “This wrong focus leads him to propose for ex ample to delay programming exercises until a good  computer model has been constructed by the students (no mention is made, which kind of model is needed).”   355 wie z. B. der Physik und der Technik 2.4 Zum Programmieren und der OOP    63  Ben-Ari übersieht m. E. auch, dass die Kenntnis tiefer  liegender Details oft nur sehr  eingeschränkt zum Verständnis der Phänom ene auf Ebenen beiträgt, die etwas entfernt von der sind, auf der diese Details behandelt werden. Biochemische Vorgänge erklären vielleicht Vorgänge in der Zelle, ab er nicht das soziale Verhalten von Populationen. Quantenmechanische Gesetze besti mmen die Vorgänge auf  der atomaren  Ebene, im Großen (z. B. im gravitativen Bereich) aber  gar nicht – und umgekehrt.  Informatiksysteme haben inzwischen eine Ko mplexität erreicht, die eine Beschreibung auf sehr unterschiedliche n Ebenen erfordert – je nach Gesichtspunkt. Da diese  Ebenen ggf. durch viele Zw ischenebenen getrennt sind, k önnen ähnlich wie in den  Naturwissenschaften Detailkenntnisse auf we it entfernten Ebenen kaum noch zum  Verständnis an anderer Stelle beitragen. Modelle z. B. der Hardwareebene sind deshalb in der OOP sicherlich noch gült ig, aber nicht sehr hilfreich.     2.5 Zur Klassifizierung von Unterrichtseinheiten  Die aus allgemeindidaktischen Frageste llungen gewonnenen Kriterien für Unterrichtsinhalte bilden also den Rahmen, in den sich fachliche Inhalte des Unterrichts  einzufügen haben. Damit ist die Fachsystematik , aus der besonders im Gymnasium  die Unterrichtsinhalte abgeleit et werden, ein sicherlich wi chtiger, aber nicht allein  entscheidender Maßstab. Für mindest ens ebenso wichtig  halte ich die Unterrichtsmethoden , denn für die Unterrichtenden ist entsc heidender als das Unterrichtsthema  z. B. die Frage, ob sie sich die Inhalte se lbst erschließen können oder ob sie diese  „präsentiert“ bekommen, und den Unterrichtskontext , denn für die Nachhaltigkeit des  Lernens ist die Einordnung fachlicher Pr obleme in übergeordnete fachliche und allgemeine Zusammenhänge entscheidend.  Erst die Einbeziehung  aller drei Gesichtspunkte macht es den Unterrichtenden möglic h, den Stellenwert möglicher Unterrichtseinheiten für ihren konkreten Unterrichtsgang zu beurteilen356. Eine solche Beurteilung z. B. externer Materialien ist aber erforderlich, denn nur so ist für voll unterrichtende Kolleginnen und Koll egen die kontinuierliche Anpassung ihres Unterrichts  an die geänderten Verhältnisse mit vertretbarem Aufwand möglich. “No mechanisms  exist to train teachers in the new technology or to keep them up to date with the field. The  biggest obstacle to teaching computer science in secondary schools is the lack of teachers  with the appropriate skills and training. A substantia l effort in this area is needed to address  the problem.”357 Auch die Effizienz der entwickelt en Unterrichtsmaterialien wird erhöht, wenn deren Bewertung erleichtert wir d und damit die Nutzungsmöglichkeiten  steigen358. Natürlich ist eine exakte  Klassifizierung eines solch komplexen Geschehens wie Unterricht nicht möglich, besond ers dann nicht, wenn die konkret Beteiligten, also die agierenden Unterrichteten und Lehrenden, mit ihr en individuellen Vorstellungen gar nicht berücksichtigt we rden. Ebenso natürlich ist aber eine  tenden                                                  356 [Sche97]: „ Deshalb reicht es nicht aus, die Begründung für eine Didaktik der Informatik in der Entwicklung  der wissenschaftlichen Disziplin zu suchen. Vielmehr muss der Blick gerichtet sein auf die gesellschaftlichen, ökonomischen, kulturellen Entwicklungen, um von dort ausgehend zu fragen, welche allgemein bedeutsamen  Antworten die jeweilige wissenschaftliche Disziplin darauf  geben kann, diese Entwicklungen zu begreifen und  mit zu gestalten.“   357 [Tuc96]  358 [Tuc96]: “Because of the rapid pace of change in the discipline, it is imperative that computer science institutions develop better mechanisms fo r sharing educational resources.”  2.5 Zur Klassifizierung von Unterrichtseinheiten    64  zielle Beurteilung sehr wohl möglic h, denn sonst wäre z. B. eine Evaluation von Unterricht und seinen Inhalten aussichtslos359.  Beginnen wir mit dem Kontext . Hier halte ich drei unterschiedliche Zielrichtungen für  wesentlich: Die Unterrichtseinheit kann  • die kulturelle  Bedeutung des Themas, also se inen Beitrag zur Entwicklung der  spezifischen Wissenschaft sowie der Wissenschaften überhaupt herausstellen. Dieser Beitrag zur Bildung wird sich in der Schule auf relativ wenige, dann aber  grundlegende Themenbereiche beschränken. Beiträge des Faches zu den materialen Anteilen einer modern verstandenen Allgemeinbildung sind hier anzusiedeln. Als Beispiel mag die Erkenntnis di enen, dass sich Frag en zur prinzipiellen  Entscheidbarkeit von Problemen so formu lieren lassen, dass sie einer abschließenden Behandlung zugeführt werden können. Informatikspezifisch ist auch die  Methode der Simulation, die auf einem g anz anderen Weg als die Mathematik zu  Prognosen über die Entwicklungsmöglic hkeiten der mode llierten Systeme  kommt 360.  • die gesellschaftliche  Bedeutung des Themas, also se inen Beitrag zur Erfassung  und/oder Lösung über die Fachwissenscha ft hinausreichender Fragestellungen  sowie deren Konsequenzen betonen. Hier biet et sich für die In formatik eine Fülle  von Themen an, die Klafkis Sc hlüsselproblemen entsprechen.  • die fachwissenschaftliche  Bedeutung des Themas, also seinen Beitrag zum fortschreitenden Verständnis der Disziplin al s solcher behandeln. Schwills fundamentale Ideen können hier als Leitlin ien dienen, wobei die Forderung nach formaler Bildung an allgemei n bildenden Schulen singuläre Themen fast ausschließt  (es sei denn, sie seien so bedeutsam, dass si e als kultureller Beitrag des Faches  einzustufen sind). Wichtiger als die Fachsys tematik ist hier also die Übertragbarkeit der Lösungen und Arbeitsmethoden.  Obwohl sich diese Zielrichtungen etwa s abgehoben anhören, sind sie doch für die  konkrete Unterrichtsplanung bedeutsam. Ei n eher kulturell ausgerichtetes Thema  wird sich nicht in Einzeloder Partnerarbei t erschließen, sondern erfordert das Unterrichtsgespräch mit einem erfahrenen Unte rrichtenden. Fachliche  Fragen werden nur  soweit bedeutsam sein, wie sie den kultur ellen Beitrag des T hemas verdeutlichen.  Für Entscheidbarkeitsfragen z. B. ist das Gödelisierungsverfahren nur in dem Umfang wichtig, wie es dazu beiträgt, auf di ese Probleme den mathematischen Apparat  anwenden zu können. Die Frage , ob das benutzte Verfahren auch effizient ist, wird  hier gar keine Rolle sp ielen. Ein gesellschaftlicher Kont ext soll u. a. Au skunft über die  Rolle der Informatik und ihren Anwendung en in der Gesellschaft geben. Auch hier  wird fachlichen Fragen eine eher sekundäre Roll e zugeteilt. Wesentlicher ist z. B. die  Erörterung von Rahmenbedingungen, die tec hnische Details einer politischen Bewertung zugänglich machen. Damit werden in formatische Sachthemen nicht bedeutungslos, denn eine solche Diskussion darf im  Fachunterricht natürlich nicht losgelöst  von allen Kenntnissen geführt werden361. Die Zielrichtung ist aber eine andere als in  eher fachlich orientierten Unterrichtsphasen.                                                    359 Das zeigt sich z. B. bei der Beurteilung von Unterrichtsstunden, wo bei den Beurteilenden meist eine erstaunliche Einigkeit im Ergebnis besteht, auch wenn dieses Ergebnis nach recht unterschiedlichen Kriterien ermittelt  wurde.  360 Andreas Schwill [Schw95] S. 25, spricht hier von enaktiven  Modellen, im Gegensatz zu ikonischen  und symbolischen .  361 Sonst könnte sie ja im Politikunterricht stattfinden. 2.5 Zur Klassifizierung von Unterrichtseinheiten    65  Bevor auf Details der fachlichen Planu ng eingegangen werden kann, muss m. E.  unbedingt geklärt sein, welche Unterrichtsmethoden  in welchem Umfang eingesetzt  werden362. Die Frage ist so wesentlic h, weil sich daraus der Zeitrahmen  des Unterrichts ergibt. Nimmt man projektartiges Arbeiten, selbstständiges  Problemlösen durch  die Schülerinnen und Schüler, gemeinscha ftliche Auswahl von Problemstellungen  und Lösungsansätzen363, ... ernst, dann sind das schon weitgehend die Unterrichtsinhalte. Die hierfür bereitgestellte Zeit st eht für systematischen Fachunterricht nicht  mehr zur Verfügung364, und die Fachsystematik kann nur in soweit relevant sein, wie  sie zur Lösung der gewählten Probleme erfo rderlich ist. Berücksichtigt man weiter,  dass von den Unterrichteten selbst ersch lossene Fachinhalte meist denn doch nicht  so strukturiert worden sind, dass si ch eine Zusammenfassung im Unterrichtsgespräch erübrigen würde, dann engt das den Zeitraum weiter ein, der für andere  Fachfragen zur Verfügung steht.  Kommen wir zuletzt – und das scheint mir angemessen – zu den Fachfragen . Deren  Behandlung ergibt sich jetzt einerseits aus dem Kontext, andererseits aus dem Zeitrahmen. Damit erübrigt es sich aufzuz ählen, was aus systematischen Überlegungen  wünschenswert  ist, sondern es bleibt festzulege n, was in diesem Rahmen (noch)  möglich  erscheint. Da der Rahmen jetzt aber zi emlich präzise bekannt ist, sollten die  vorgeschlagenen Fachthemen in diesem Kontext dann auch realistisch und realisierbar sein – und damit gewännen die Vors chläge erheblich an Relevanz gegenüber  Alternativen, die die Rahmenbedi ngungen nicht berücksichtigen. Wir hätten den  Praxisbezug gewonnen, mit dem diese Arbeit beginnt.   Fachthemen lassen sich relativ leicht den – von mir modifiziert en – Ideenbäumen von  Andreas Schwill zuordnen. Nummerieren wir di ese durch, dann lässt sich leicht feststellen, welche Ideen in welchen Unterrich tseinheiten besonders ve rdeutlicht werden  sollen. Damit haben wir ein Klassifizieru ngsschema unabhängig von den konkreten Inhalten , und damit ist es auch leicht m öglich, Unterrichtseinheiten gegen  vergleichbare auszutauschen, wenn es den Unterrichtenden denn angemessen erscheint365. Eine Zusammenstellung solcher Unte rrichtseinheiten spiegelt dann die  fachliche Sicht des Unterrichtenden auf sein Fach, so wie sie den Unterrichteten erscheint366. Die Verteilung der Themen über die Bäume macht ggf. unzulässige Einseitigkeiten (z. B. eine zu starke Konzen tration auf die Algorit hmik) sichtbar. Ermöglicht, zumindest erleichtert wird di e angesprochene ortsnahe  Curriculumentwicklung einerseits, andererseits eine effizientere Unterstützung der Unterrichtenden  durch Materialien der Universi täten zu neuen Themenbereichen367.  Zu beachten ist, dass auch in so konzipiert en, hier fachlich orientierten Unterrichtseinheiten die Inhalte nicht re iner Selbstzweck sind, son dern zur Verdeutlichung fundamentaler Ideen herangezogen werden. Diese Ideen müssen sich wie beschrieben  bei den Lernenden entwickeln, denn diese soll en die fachliche Sicht der Unterrich                                                  362 [Hey95] S 55: Die allgemein bildende Qualität von Mathematik(und Informatik-)unterricht ist nicht in erster Linie vom Stoff abhängig, der unterrichtet wird, sondern – im weitesten Sinne – von der Methode, von der  Art, wie im Unterricht mit dem Stoff und miteinander um gegangen wird, oder kurz: von der Unterrichtskultur.  363 Wozu auch das Verwerfen untauglicher Ansätze gehört, die erstmal als untauglich erkannt werden müssen.  364 Die Nichtberücksichtigung dieser einfachen Tatsache verhindert m. E. die Umsetzung vieler, sonst interessanter Vorschläge zur Unterrichtsg estaltung, z. B. in [Schu99]  365 In der „virtuellen Lehrerweiterbildung Informatik in Niedersachsen VLIN“ soll genau dieses versucht werden. Da die ca. 100 Teilnehmerinnen und Teilnehmer insgesamt ca. 400 Unterrichtseinheiten zu konzipieren  haben, sollte sich daraus ein Fundus von austauschbaren Einheiten entwickeln.  366 Denn diese „erfahren“ ja nur den stattfindenden Unterricht.  367 [Tuc96]: “If each institution simply publishes its materials independently, there will be no easy way for   others to find the right materials in the vastness of the Web or to have any assurance about their quality.”  2.5 Zur Klassifizierung von Unterrichtseinheiten    66  tenden rekonstruieren. Damit muss der Unterrich t so angelegt werden, dass sich       z. B. aus unterschiedlichen Beispielen das Verbindende, eben die zugrunde liegende  Idee herauskristallisieren kann. Ich meine, dass in vielen Fällen die Idee selbst thematisiert werden muss, also explizit zu behandeln ist. Zumindest in  der Oberstufe ist  das auch ein angemessenes Thema, weil sich  in diesen Ideen die spezielle Weltsicht  des Faches manifestiert. Der Vergleich so lcher Sichten (und Fäch er), deren spezielle  Beiträge und Einschränkungen, das Entwickeln einer pers önlichen Stellungnahme zu  diesen Fragen und damit das Entwickeln unterschiedlicher Perspektiven auch für die  eigene Berufswahl gehören eindeut ig in die Sekundarstufe II.  Versuchen wir jetzt einmal, diese Aspekte in Form eines „Fragebogens“ zusammenzufassen, der etwa einer neu konzipierten Unterrichtseinheit beigelegt werden kann.  Ich beschränke mich auf die übergeordneten Ideen der angegeben Bäume und setze  voraus, dass die eine Unterrichtseinheit Klassifizierenden wissen, was unter den angegebenen Stichworten zu verstehen ist.     Bitte klassifizieren Sie die Unterrichtsei nheit nach den folgenden Gesichtspunkten. Geben Sie Ihre Einschätzung für die drei Bereiche in Prozentwerten an, die  grob ihre Gewichtung der einzelnen Aspekte wiedergeben.  Thema: ___________________________________________________________________________  Zeitbedarf: ______ WStd.  Voraussetzungen: _____________________________________________________________________  __________________________________________________________________________________________    Die Einheit dient der Verdeutlichung  der kulturellen Bedeutung des Themas zu _________ %.  gesellschaftlicher Auswirkungen des Themas zu _________ %.  rein fachlicher Aspekte                                zu _________ %.     (insg. 100 %)    Die folgenden Unterrichtsmethoden erfordern an Unterrichtszeit ca.  Lehrervortrag:   _________ %.  Unterrichtsgespräch: _________ %.  Partnerarbeit:  _________ %.  Einzelarbeit:  _________ %.  Projektarbeit:  _________ %.                                             (insg. 100 %)    Das Thema verdeutlicht die folgenden fundamentalen Ideen:  1. Algorithmisierung   1.1 Entwurfsparadigmen (Branch and Bound, Backtracking, …): _______ %   1.2 Programmierkonzepte (Alternative, Iteration, Rekursion, ...): _______ %   1.3 Ablauf (Prozess, Nebe nläufigkeit, ...): _______ %   1.4 Evaluation (Verifikation,  Komplexität, ...):  _______ %           2. strukturierte Zerlegung   2.1 Modularisierung (Methoden, Hilfsmittel, ...): _______ %   2.2 Hierarchisierung (Darstell ung, Realisierung, ...): _______ %   2.3 Orthogonalisierung (Emulation, ...) : _______ %           3. Formalisierung   3.1 formale Sprache (Synta x, Semantik, ...): _______ %   3.2 Automat (Zustand, Übergang , Vernetzung, ...):  _______ %   3.3 Berechenbarkeit (Grenzen, Durchführbarkeit, ...): _______ %            (insg. 100 %)  3.1 Zur Stellung der Theorie in der Schule    67  3. Zur Theorie im Informatikunterricht  In einem sehr ausgewogenen Artikel schreibt Heidi Sc helhowe 1997 in LOG IN:  „Dies aber soll doch der Nutzen einer Theorie sein, dass sie uns hilft, uns in der Welt besser zurechtzufinden, die Phänomene, mit denen wir es zu tun haben, besser zu erklären und unsere Umwelt zu gestalten.“ 368 Noch kürzer drückt es Herschel aus: „Nichts ist praktischer  als eine gute Theorie.“369 Ist es aber wirklich dieser Eindruck, den Schülerinnen und  Schüler mitnehmen, nachdem sie sich mit theoretischen Fragestellungen beschäftigt  haben370?    3.1 Zur Stellung der Theorie in der Schule  Bevor die Eleganz theoretischer Einsichten  beschrieben wird, sollte man sich klarmachen, dass in vielen Au sbildungsgängen – und besonders in der allgemein bildenden Schule – die theoretischen Anteil e zu den unbeliebtesten überhaupt gehören. Ein (derzeit noch) reines Wahlfach  wie die Informatik läuft deshalb ein hohes  Risiko, wenn es den Anteil theoretischer Inhalte zu erhöhen versucht. Es muss sich  also sehr genau klarmachen, was es bewirk en will – und kann –, bevor es sich darauf einlässt. Die Unbeliebtheit der „Theorie“ in  der Schule resultiert m. E. weitgehend  daraus, dass Tätigkeiten als „theoretisch“ eingestuft werden, die nur sehr eingeschränkt mit richtig verstandener theoret ischer Durchdringung zu tun haben. Oft besteht die „Theorie“ aus Übungseinheiten, in  denen unverstandene Ka lküle auf leicht  variierte „Übungsaufgaben“ ange wandt werden, die mit der  Erfahrungswelt der Unterrichteten kaum etwas zu tun haben.371 Statt also durch die Ausbildung theoretischer Modelle Klarheit in  ein unübersichtliches Kongl omerat kaum zusammenhängender Fakten zu bringen, werden nur die aus einer Theorie folgenden Methoden  praktisch geübt, wobei die Praxisrelevanz  solcher Fertigkeiten immer mehr abnimmt372. In der Informatik, mit Maschinen als Thema, die gerade entsprechende  Algorithmen ausführen können,  wäre ein vergleichbares  Vorgehen obskur. Um solche Entgleisungen zu vermeiden, wollen wir uns  die Auswirkungen einer Theorie im  technisch-naturwissenschaftlic hen Bereich etwas genauer ansehen373:  1. Erfahrungen werden geordnet.  Es werden Begriffe eingeführ t, die für eine einheitliche  Beschreibung der in dem bearbeiteten Gebiet auftretenden Größen g eeignet sind. Meist wird dabei ein Modell  entwickelt, das die unterschiedlichen Er fahrungen unter diesen Aspekten zusammenfasst.   2. Zusammenhänge werden gezeigt.  Es werden Zusammenhänge zwischen den Begriffen erkannt und in Form von Gesetzen beschrieben. Oft können einfachere Gesetze komplexeres Verhalten erklären.                                                    368 [Sche97]  369 [Her74] S. 8  370 oft besser: beschäftigt wurden  371 Die Beliebtheit der Schulmathematik widerspricht di eser Aussage nicht: Mathematik wird allgemein als  wichtig (und damit unvermeidbar) akzep tiert. (Für die Naturwissenschaften gilt diese Akzeptanz nicht! Sie sind  „vermeidbar“.) Unter dieser Voraussetzung gefällt sie viel en Schülerinnen und Schülern gerade deshalb, weil  ihre Kalküle weitgehend ohne Verständnis angewandt werden können („Termumformungen“). Weil hier stures  Üben viel hilft, ist das Fach „gerecht “. Mathematik ist m. E. gerade deshalb so beliebt, weil im Unterricht weitgehend gar keine Mathematik betrieben wird.  372 Denn das können Computer nun wirklich besser.  373 ab jetzt weitgehend nach [Mod92a] S. 351ff 3.1 Zur Stellung der Theorie in der Schule    68  3. Zusammenhänge werden begründet.  Die gefundenen Gesetze werden – so weit möglich – „bewiesen“. Dazu wird – ausgehend von einem Satz von als richtig erkannten Grundannahmen – entweder die Mathematik bemüht, oder es  wird induktiv vorgegangen. Damit können die gefundenen Gesetze – so weit möglich – als gesichert angesehen werden.  4. Methoden werden neu begründet und/oder neu entwickelt.  Mit Hilfe der bewiesenen Gesetze wird für bestehende oder neue Arbeitsmethoden  gezeigt, ob und unter welchen Voraus setzungen sie das Gewünschte leisten.  Man kann sich darüber streiten,  ob wirklich alle vier Punkte  erfüllt sein müssen, bevor  von einer theoretischen Durchdringung ei nes Fachgebietes gesprochen werden  kann. Zumindest der dritte Punkt wird sicherli ch auf vielen Gebieten kaum erfüllt sein.  In diesem Sinne bilden die Anforder ungen eher ein Arbeitsprogramm als eine Beschreibung des Ist-Zustandes. Man kann m. E. aber nicht  darüber streiten, ob das  Arbeiten alleine auf der E bene des ersten Punktes schon das  Attribut „theoretisch“  rechtfertigt: Es tut das eindeutig nicht! We rden also in den Rahmenrichtlinien der  Schule Anforderungen im Bereich der theoretischen Informatik beschrieben als „elementare Einführung in die Anfangsgründe der ...“  noch mit dem Zusatz „Die mit den Begriffen verbundenen Inhalte nur an ei nfachen Beispielen erläutern!“ 374, dann legen es diese Formulierungen in meinen Au gen nicht gerade nahe, ernsthaftes Bemühen um die  Vermittlung von Verständnis auf diesem Gebiet von den Lehrenden zu fordern375.  Verstehen wir „Theoretisieren“ in der genannten Form, dann müss en wir auch in der  Schule erwarten, dass nach einem Theoriete il den Unterrichteten die Vorgänge im  betrachteten Bereich einfac her und geordneter erschei nen als vorher. Sie müssen  über klar definierte Begriffe verfügen, mi t deren Hilfe sie die erlernten Arbeitsmethoden begründen können. Sie müssen sich in diesem Gebiet im Sinne von Frau Schelhowe „besser zurechtfinden “.   Auf die ordnende Wirkung fundamentaler Ideen wurde schon ausführlich eingegangen. Wenn aber Erfahrungen geor dnet werden sollen, dann müsse sie auch vorhanden sein.376 Es muss also genügend „Stoff“ bereit liegen, anhand dessen theoretisches Arbeiten verdeutlicht  werden kann, und er muss genügend umfangreich sein,  um die ordnende Wirkung der Ideen zu erfahren.  Weil sich Ideen in Begriffen manifestieren, die aus konkreten Erf ahrungen abstrahiert werden, ist die  fachspezifische  Begriffsbildung  eine notwendige Vorstufe der eige ntlichen theoretischen Arbeit. Und  weil die Beweisanteile, in denen sich die B edeutung der Begriffe eigentlich erst erschließt, in der Schule nur einen beschr änkten Umfang haben können, kommt dieser  Stufe eine gestei gerte Bedeutung zu377. Zur Ordnung gehört, vorhandene Erfahrungen in einem gültigen Modell in terpretieren zu können. Eine  wesentliche Aufgabe des  Theorieteils der Informatik-Kursfolge liegt deshalb darin, die Schülerinnen und Schüler dabei zu unterstützen, tragfähige Mode lle der Computerhardw are einerseits und  der Software andererseits zu entwickeln. Tr agfähig in dem Sinne, dass zwar keine  aktuelle  Hardund Software analysiert zu wer den braucht, dass die Modelle aber  über prinzipiell korrekte Eigenschaften ve rfügen, die das Verhalten der Informatiksysteme hinreic hend genau erklären.                                                    374 ehem. Rahmenrichtlinien Informatik Niedersachsen.  375 Natürlich sind solche Sätze vor dem Hintergrund der weitgehend fehlenden universitären Lehrerausbildung  im Fach Informatik zu sehen. Sie schreiben aber einen Zustand fest, in dem die Unterrichtenden selbst kaum  etwas von dem Gebiet zu verstehen brauchen, das sie lehren.   376 Wir können nicht das Vakuum neu organisieren!  377 Weil für die Arbeit mit diesen Begriffen beim „Theore tisieren“ nur relativ wenig Zeit bleibt, muss die Bedeutung der Begriffe unabhängig davon deutlich werden. 3.1 Zur Stellung der Theorie in der Schule    69  Weiterhin sollten die Ler nenden über genügend methodische Kenntnisse und Fertigkeiten verfügen, um selbstständig Zusa mmenhänge zwischen den Begriffen zu finden und neue Verfahren anzuwenden, nachdem  sie deren Prinzipi en verstanden  haben. Sie erwerben diese Fertigke iten leider meist erst im Informatikunterricht, weil  andere Fächer nur sehr eingeschränkt selb stständiges Arbeiten zulassen. Der Theorieteil der Kursfolge kann aus beiden Gründen nur in der zweiten Hälfte liegen. Es  zeichnet nun fast jede gute Theorie aus , dass die grundlegenden Ideen und Modelle  sehr einfach gehalten und ohne große formale Kenntnisse verständlich sind. Im Bereich der theoretischen Informatik wer den darüber hinaus Beschreibungsformen gewählt, die weitgehend in der praktischen Informatik Verwendung finden, also offensichtlich effiziente Werkzeuge darstellen. Wir haben damit die beiden Seiten der Informatik eng beieinander, die das Fach für di e Schule so attraktiv machen: einerseits  eine Grundlagenwissenschaft, ander erseits eine Technikwiss enschaft zu sein. Betonen wir beide Aspekte, dann können wir auch auf dem Gebiet der Theorie konstruktiv  arbeiten378, und umgekehrt sollte „der Geist der Theorie von de r ersten Stunde an präsent   (sein)“379. Genau das sollten wir uns wünschen : dass Schülerinnen und Schüler Erfahrungen darin machen, wie di e theoretische Durchdringung von Teilen eines Fachgebietes die Effizienz ihrer Arbeit deutlich erhöht.  Die Realisierung der Modelle der Theorie bietet die Chanc e, theoretische Informatik  als ein Anwendungsgebiet der in den voran gegangenen Kursen erlernten Methoden  aufzufassen. Unterschiedliche Realisie rungen führen zur Abwägung der Vorund  Nachteile unterschiedlicher Entwurfskonz epte und damit zur kritischen Reflexion eigener Arbeit. Das kann sowohl auf dem Gebi et der Datenstrukturen wie auch der  Hardware geschehen: Automaten können al so als Software-Objekte, als digitale  Schaltwerke, als Funktionen, ... erscheinen; ihre Arbeitswei se kann auf unterschiedlichste Verfahren abgebildet werden. Die vielfältige Anwendung von Algorithmen und  Datenstrukturen festigt diejenigen fundament alen Ideen, die dort eine führende Rolle  spielen, sich in den Ideebäum en der Algorithmisierung und strukturierten Zerlegung  finden. Die Algorithmisierung wird zusätzlich konkretisiert, die strukturierte Zerlegung  findet neue Anwendungen. Die  verschiedenen Modelle der  theoretischen Informatik  (Automaten, Sprachen, Funktionen, ...) betonen deren Aspektcharakter. Die Gleichwertigkeit einiger Modelle legt den Wech sel zwischen diesen nahe, wenn er zweckmäßig erscheint. Die Anwendbar keit des gleichen Modells auf  völlig unterschiedliche  Gebiete (Schaltungsentwurf, Übersetzerbau, ...) zeigt deren Abstraktionsgrad. Eine  Verwechselung des Modells mit der Realität, wie sie z. B.  beim Begriff des physikalischen „Elektrons“ nahe gelegt wird („klein , rund und blau“), ist ausgeschlossen.  Fassen wir eine Theorie nur als ein logi sches System auf, in dem ausgehend von  bestimmten Grundannahmen Fo lgerungen gezogen und bewiesen  werden können,  dann halte ich die theoretische Informatik für ziemlich ungeeignet, in der Schule unterrichtet zu werden. Wir können aber di e Notationsformen der theoretischen Informatik, wie etwa die Transitionsgraphen der  endlichen Automaten oder die formalen  Grammatiken, als ein höchst effizientes  Beschreibungsmittel für zustandsabhängige  Systeme wie Schaltwerke und Übersetzer vorrangig benutzen . Die so beschriebenen  Automaten lassen sich direkt (und sogar automatisch) in Programme oder Schaltungen übersetzen, so dass die exakte Beschre ibung eines geeigneten Systems schon                                                    378 [Sche97]: „Informatikunterricht, der allgemein bildend sein w ill, muss gerade diesen im Computer enthaltenen Widerspruch zwischen Abstraktem und Konkrete m, zwischen streng logisch-rationalem und intuitivkreativem Zugang aufgreifen und erklären, die Doppels eitigkeit des Computers zwischen Automat und Medium,  zwischen Turingmaschine und Interaktion einsichtig machen.“   379 [Nie02] 3.1 Zur Stellung der Theorie in der Schule    70  die Problemlösung beinhaltet. Die Erweit erung der Modelle zu Kellerautomaten und  Turingmaschinen erlaubt Frages tellungen, die zu prinzipiel len Grenzen der Computer  führen. Theoretische Schulinformatik ist dami t ein Gebiet, in dem sich exemplarisch  zeigen lässt, wie Wissenschaft arbeitet:   Für einen neuen Problemkreis werden angepasste Beschreibungsmittel („Begriffe“)  entwickelt, die dann geeignet sind, auch weit über die ursprüngliche Fragestellung herausreichende Probleme überhaupt erst einm al formulieren – und damit auch bearbeiten  –  zu können  usw.   Theoretische Informatik in der Schule ist ni cht mit der Theorie in der Hochschulinformatik gleichzusetzen. Sie benutzt nur (einge schränkt) die gleiche Sprache, zeigt dagegen sehr viel über die Art, wie Wissenschaft „fortschreitet“. So  aufgefasst ist ein  Theoriekurs eine sehr praktische Sache. Mit Hilfe der genannten Notationsformen werden zustandsabhängige Systeme beschri eben und spezielle Lösungen entwickelt. Schaltwerke, Übersetzer, suchende  und erkennende Systeme können entworfen werden. Nebenbei werden  alle nur denkbaren Datens trukturen und Algorithmen  benutzt, so dass der Kurs auch den Titel „Dat enstrukturen“ haben könnte. Der Kurs  arbeitet konstruktiv, die Arbeitsmi ttel werden der Theorie entliehen 380. Dementsprechend sollten keine „nicht direkt hilfreichen “ Beweise, etwa zur Äquivalenz von Automatenklassen, geliefert werden.381 Natürlich können einzelne Fragestellungen auch  in Richtung einer „echten“ Theorie vertieft werden; doch es ist zu befürchten, dass  die Schülerinnen und Schüler dann schnell überfordert wer den. Ich meine, dass in  jedem Fall der aktiven Schülerar beit der Vorzug zu geben ist.   Der so verstandene „Theoriekurs“ ist also vi elfältig, interessant, deckt zahlreiche  Themen ab. Er ist überhaupt nicht „trocken“ – aber wen überrascht das? Ist doch  nichts praktischer als eine gute Theorie (s. o.).    3.2 Fundamentale Ideen    der theoretischen Informatik  Im Bereich der theoretischen Informatik bes teht eine erstaunliche Einigkeit zwischen  den verschiedenen Autorinnen und Autoren, di e auf anderen Gebieten oft sehr unterschiedliche Meinungen vertreten. Nach Wilfried Hergets Ansicht liegen die Unterschiede zwischen Mathematik und Informatik „... noch am ehesten (...) zwischen dem  stärker strukturorientierten, statischen Asp ekt der Mathematik und dem eher prozessorientierten, dynamischen Aspekt der Informatik (...)“382. Bussmann und Heymann meinen:  „Unseres Erachtens lässt sich dieses Defizit [dass die durch den Maschinencharakter des  Computers gesetzten Grenzen  nicht erkannt werden]  ausgleichen, wenn die Schüler den Computer als symbolverarbeitende Universalmaschine kennen lernen.“383 Sigrid Schubert  schreibt: „Worin besteht die Theori e der Informatik? Einen Zugang bildet die Verbindung  von Algorithmen, Sprachen und Maschinenmodellen.“384 Den gemeinsamen Aspekt aller                                                   380 [Tuc96]: “ Topics in the theory of computing need to be integrated with practical topics in the curriculum at  all levels, beginning with the first course.”   381 Mit einer Ausnahme: An geeigneten Stellen muss den kün ftigen Studierenden gezeigt werden, welche herausragende Rolle die Mathematik in den Wissenschaften spielt, und dass sie deshalb in vielen Fächern an einer  intensiven Beschäftigung mit dieser Disziplin nicht vorbeikommen werden.  382 [Her94] S. 38  383 [Bus87] S. 29  384 [Schu99] S. 8 3.2 Fundamentale Ideen der theoretischen Informatik    71  dieser Äußerungen bilden die informatikspezifischen Maschinenmodelle  (Automaten), die im Gegensatz zu den stat isch beschriebenen Zusammenhängen in mathematischen Formulierungen das dynamisc he Verhalten eines Systems als Prozesse  modellieren. Der momentane Zustand  des Systems wird gespeichert und  durch Zustandsübergänge  verändert, die durch Eing aben ausgelöst werden. Ggf.  kann der Automat auch Ergebnisse in Form von Ausgaben produzieren.   Die zentrale fundamentale Idee dieses Gebi ets scheint mir deshal b die des Zustands zu  sein, wobei sie sich im Modell  des Automaten manifestiert.  Seine Anschaulichkeit macht dieses Mode ll besonders für die Schule geeignet. Es  findet in der Fachwissenschaft auf sehr  unterschiedlichen Gebi eten und sehr unterschiedlichen Niveaus Anwen dung (Horizontalund Vertikal kriterium), wird seit den  Anfängen der Informatik benutzt und besitzt  gerade durch seine Anschaulichkeit eine  lebensweltliche Bedeutung (Zeit und Sinnkriterium), weil sich Aspekte sehr unterschiedlicher im Alltag benut zter Systeme und eben der Computer selbst auf diese  Idee reduzieren lassen.  Damit kommen wir zum Bereich der Eingaben,  der „Bedienung“ der Maschinen. Traditionell werden diese durch  Eingabebänder beschrieben, die mit den geplanten Eingaben vorab  beschrieben werden, also bevor di e Maschine zu arbeiten beginnt. Diese Zusammenfassung von Eingabe und Maschi ne zu einer Einheit ist notwendig für  die Arbeitsweise von Turingmaschinen, da diese das Eingabeband selbst manipulieren. Die einfacheren Maschinenmodelle  (endliche Automaten und Kellerautomaten) können m. E. durchaus getrennt vom Eingabeband als Entitäten aufgefasst  werden, so dass diesen die Einschränkun g der „Vorabeingabe“ nicht eigen ist. Sie  müssen nur zu jedem Arbeitstakt über ein zulässiges Eingabezeichen verfügen.  Nach welchen Regeln dieses produziert wird,  ob es vielleicht sogar von Ausgaben  anderer Automaten stammt, wie in Netzen  üblich, darüber ist erst mal gar nichts gesagt. Erst die gelesene Eingabefolge  muss gewissen syntaktischen Regeln genügen385! Damit entfällt für diese Automatenklassen, mit denen in der Schule überwiegend gearbeitet wird, weitgehend auch der Einwand von Peter Rechenberg386 und  Birgit Schelhowe387, die in Turingmaschinen kein  adäquates Modell für „interagierende“ und „kommunizierende“ Computer( systeme) sehen. Einfache ereignisgesteuerte Systeme lassen sich sehr wohl auf ei nfache Automaten abbilden. Dass diese für  realistische Fälle völlig unübersichtlich we rden, ist kein Einwand, denn auch die  Transitionsgraphen traditioneller Parser fü r echte Programmiersprachen sind natürlich kaum noch aufschreibbar . Obwohl die Arbeitsweise der traditionellen Automatenklassen sequentiell ist, kann die Wirkung von Interaktionen leicht über die Kopplung solcher Maschinen erfahren werden. Or dnet man einfache Automaten in einem  Netz  als zellulären Automat an, dann kön nen unter geeigneten  Bedingungen ganz  neue Verhaltensweisen erschei nen. Auch die Modellier ung von OOP-Systemen, deren Objekte meist gut als Automaten zu be schreiben sind, die mithilfe von Events  kommunizieren, liefert über die nicht se quenziell ablaufende Erei gnissteuerung Erfahrungen in „Vernetzung“. Ic h halte also die Automa tenmodelle gerade auch dann  für geeignet, wenn wie heute (hoffentlich) üblich mit objektorientierten Sprachen gearbeitet wird,   wobei als zweite fundamentale Id ee die Vernetzung zum Tragen kommt.                                                    385 Wenn sie „korrekt“ sein soll.  386 [Rec97] S. 32  387 [Sche97] S. 29 3.2 Fundamentale Ideen der theoretischen Informatik    72  Statt uns auf die Arbeitsweise der Maschi ne selbst zu konzentrieren, betrachten wir  nun deren Steuerung. Die Syntax der von einem Automaten akzeptierten Zeichenfolgen klassifiziert diesen ebenso wie seine innere Konstruktion. Die Verlagerung des  Blickpunkts bewirkt einen Wechsel des Modells, ohne das be schriebene System  selbst zu ändern. Interessieren wir uns e her für die Konstruktion des eigentlichen  „Apparats“, z. B. eines Parsers oder ei ner Schaltung, dann wähl en wir das Automatenmodell. Wollen wir eher de ssen „Drumherum“ beschrei ben, dann arbeiten wir mit  Grammatiken. Bei Bedarf wechseln wir z wischen diesen Beschreibungen, z. B. weil  im alternativen Modell bessere  Werkzeuge zur Verfügung stehen.  Damit haben wir als dritte fundamen tale Idee die Sprache gefunden.   Die Idee, Kommunikationsmittel syntaktisch zu beschreiben, gehört im Bereich der  Schule zum Standard. Die Analyse von Spra chkonstrukten mithilfe von Grammatiken  ist zwar mit der Verdrängung der alten Sprachen (leider) etwas in den Hintergrund geraten. Das ändert aber nichts am Wert der Erfahrung, formale Regelsysteme systematisch einzusetzen und deren Ergebnisse kritisch nach semantischen Gesichtspunkten zu bewerten. Die Verankerung in der Lebenswe lt der Lernenden ist also  auch hier gegeben. Die restlichen fachimmanent en Kriterien sind off ensichtlich erfüllt.  Es bleibt als Letztes di e Idee der Berechenbarkeit.  Dass Computer rechnen können, ist sic herlich für niemanden eine Überraschung.  Berechnungen gehörten schließlich zu den ersten Aufgaben de s „Rechners“. Ansatzpunkte aus der Erfahrungswelt der Lernenden gibt es dafür genug. Unter Berechenbarkeit verstehen wir allerdings mehr  die Frage danach, was alles berechnet  werden kann 388, also Betrachtungen über die Grenzen der Computer in dieser Hinsicht. Zu diesen Grenzen gehören sowohl di e Frage, ob es Grenzen für algorithmische Verfahren gibt, als auch, wo die Grenz en der Gültigkeit der Ergebnisse von Berechnungen liegen. Beide Themen durchziehen die Informatik von Anfang an, spielen  auf unterschiedlichen Ebenen und in verschiedenen Be reichen eine zentrale Rolle.  Damit sind Schwills Kriter ien erfüllt. Beide Themen liefern aber auch sowohl sehr  tiefgehende Fragen (und ei nige Antworten) als auch eine Fülle außerordentlich motivierender Beispiele, etwa aus den Bereichen des dete rministischen Chaos oder der  Simulation vernet zter Systeme.    3.3 Zur Rekonstruktion der fundamentalen Ideen  Beschränken wir uns auf die genannten fundam entalen Ideen der Informatik, so ist  immer noch nicht geklärt, wie sich diese bei den Unterrichteten denn bilden sollen. Im Sinne des Konstruktivismus können wir uns die Vorschläge von Ben-Ari zu Herzen nehmen 389:   A Guide for Educators:  • Regardless of your teaching technique (lect ures, labs, assignment s), you must articulate to yourself the cognitive change that y ou wish to bring about in the students and  structure the activity to achieve this aim.  Merely transferring knowledge is not a  meaningful aim.                                                    388 [Bus87] S. 15: „Deshalb scheint es uns notwendig, eine grundlegende gedankliche Durchdringung der Maschine ‚Computer’ als Produkt des Menschen zum Ausgangspunkt zu machen.“   389 [Ben02] S. 15 3.3 Zur Rekonstruktion fundamentaler Ideen    73  • You must dig underneath your own expert knowledge to expose the prior knowledge  needed to construct a viable model of the material that you ar e teaching. You must  ensure that the students have this prior knowledge.  • In any particular course you will be teaching a specific level of abstraction; you  must explicitly present a viable model one  level beneath the one you are teaching.  • When a student makes a mistake or otherwise displays a lack of understanding, you  must assume that the student has a more-o r-less consistent, but  non-viable, mental  model. Your task as a teache r is to elicit this model and guide the student in its modification.  • You must provide as much opportunity as possible for individual reflection (for example, analysis of errors) and social interaction (for example, group labs).  Wir können die Forderungen auch etwas kürzer fassen:  • Einerseits müssen die indivi duellen Vorstellungen der Lern enden berücksichtigt und  zielgerichtet weiterentwickelt werden,  • andererseits erfordert die Ausbildung verändert er mentaler Strukturen die aktive  Auseinandersetzung mit Fragestellungen des bearbeiteten Bereichs auf möglichst  vielfältige Weise.  Beginnen wir mit den m entalen Modellen:  Eine diffuse Vorstellung von Automaten  als Beispielen von „(1) Maschinen, die etwas  tun“, hat vermutlich jeder. Das Tun beinhaltet Ak tivität, also Dynamik. Wenn das Tun  nicht nur aus einer einzigen Aktion best eht, dann kann das Anfangsmodell weiterentwickelt werden zu „(2) Maschinen, die schrittweise etwas tun“ . Im einfachsten Fall  wird dieses Nacheinander der Aktionen durch eine Art Zeittakt ausgelöst werden.  Damit benötigen wir „(3) Maschinen, die wissen, was als nächstes zu tun ist“ . Diese Information muss in den Maschinen vorhanden sein, dort gespeichert werden. Nach  jeder Aktion muss sich damit diese Info rmation ändern. Wir können sagen, dass wir  es nun mit „(4) Maschinen, die sich in untersc hiedlichen Zuständen befinden können“  zu  tun haben. Damit legt der Zustand  fest, was als nächstes zu  tun ist. Wir haben eine  sequenziell arbeitende Maschine, die wir  durch eine Folge von Zuständen und Übergängen  wie üblich beschreiben können. Erweiter n wir das Modell um einzugebende  Steuerzeichen, dann können unsere Maschinen aus einem Zustand in unterschiedliche Folgezustände übergehen. Wir komme n zu den bekannten Transitionsgraphen.  Diese kurze Folge von Modellen will nun k onstruiert sein. Dazu benötigen wir möglichst vielfältiges und möglichst interess antes Aufgabenmaterial, das an die Erfahrungswelt der Schüle rinnen und Schüler anknüpft. Da es  sich bei den hier zugrunde  gelegten endlichen Automaten meist um zi emlich einfache Maschinen handelt, brauchen wir dafür keine besondere Unterrichtsei nheit. Im Gegenteil: Weil die Automaten  sich so leicht aufzeichnen lassen, sollten si e als Hilfsmittel und Teillösungen innerhalb von umfangreicheren Probl emstellungen auftauchen:   • Schon ganz am Anfang der Kursfol ge, wenn Zeichenketten modifiziert,  durchsucht, verändert werden, z. B.  bei Verschlüsselungsproblemen.  • In Unterrichtsprojekten etwa aus der Bioinformatik, wenn z. B. DNA-Replikation durch Polymerasen simuliert wird.  • Zur Beschreibung von Lichtschrank en, Bahnübergängen, Alarmanlagen, …  • Zur Entwicklung von Schaltwerken wie Speichern, Addierern, … 3.3 Zur Rekonstruktion fundamentaler Ideen    74  Die übergreifende Einsetzbar keit von Automatenmodellen lässt die Lernenden deren  Fundamentalität erfahren. Die aktive Nutz ung macht sie mit deren Möglichkeiten,  Tücken und Grenzen vertraut. Die unterschiedliche Realis ierung über Funktionen,  OOP-Objekte und Schaltungen verdeutlicht  deren Modellcharakter und ihre Brauchbarkeit als Werkzeug. Die solide mentale Verankerung dieser Modelle bietet dann  den Zugang zu den weiteren fundament alen Ideen des Theorieteils.  Verlagern wir nun unser Interesse auf die Bedienung von Automate n, die auf unterschiedliche Eingabezeichen reagieren kön nen, so kommen wir auf die Frage nach  deren Steuerbarkeit. Es gibt  Eingabefolgen, die zu un sinnigen Ergebnissen führen,  und solche, die einen angestrebten Zweck erfüllen. Wahrscheinlich gibt es auch unterschiedliche Zeichenfolgen, die zum gleichen Ergebnis führen. Diese bilden Sprachen , deren Worte etwas bewirken. Die Idee der Sprache ist den Lernenden natürlich vertraut. Neu für sie ist die Anwendun g dieses Begriffs auf die Kommunikation  mit Maschinen, vor allem die Anwendung auf so einfache Konstrukte, wie wir sie meist behandeln. Da wir es noch nicht mit Programmiersprachen zu tun haben, halten die Unterrichteten es anfangs eher fü r absonderlich, kurzen Befehlsfolgen das  Attribut „Sprache“ zuzuschreiben. Sie brauchen deshalb etwas Zeit zur Gewöhnung,  vor allem daran, Sprachen rein formal zu behandeln. Sie finden diese Zeit in der  konstruktiven Auseinandersetz ung mit entsprechenden Problemen.  Die Struktur  dieser Sprachen kann wie üblich dur ch Grammatiken beschrieben werden, wobei die Zugehörigkeit eines Wo rtes zu einer Sprache diesem eine Bedeutung  gibt, wenn man sie auf den Ziel automaten anwendet. Di e Schülerinnen und  Schüler können nun im selben K ontext wie oben, aber mit einer veränderten Sichtweise Automaten steuern. Si e können geeignete Be fehlsworte erzeugen, solche mithilfe von Parsern (also „Prüfautomaten“) te sten, die Ergebnisse simulieren und erst  dann dem „echten“ Zielautomaten zuführen.  Ein außerordentlich motivierender Kontext hierfür ist die Besc häftigung mit kleinen Robotern 390, aber auch Technikmodelle,  deren Motoren durch Relais geschaltet we rden, Turtlegrafik-Umgebungen, Sprachspiele („Zufallsgedichte“, „Elisa“, …) sind sehr beliebt. Bleiben die Automaten und  ihre Sprachen nur Hilfsmittel, so sind auch  diese Teile in vorgelagerte Kurse integrierbar. Beschäftigen wir uns systematisch  mit ihnen, dann sind eigene Unterrichtseinheiten etwa zum Thema „C ompilerbau“ erforderlich.  Die Idee der Vernetzung  wird besonders deutlich, we nn wir die vernetzten Komponenten durch Automatenmodelle beschreiben. Die Kommunika tion erfolgt durch die  Verknüpfung der Einund Au sgabekanäle der Maschinen – ein sehr anschauliches  Modell. Setzen wir die Automaten in ein fe stes Gitter, dann erhalt en wir zelluläre Automaten mit all ihren viel fältigen und auch optisch interessanten Einsatzmöglichkeiten391. Verknüpfen wir sie durch frei zu se ndende Botschaften, dann haben wir ein  Modell für Teilbereiche der OOP. Bilden wir  sie auf die Maschen eines Netzes ab,  dann finden wir Zugang z. B. zu den Protokollen des Inte rnets. Gerade in diesem  Bereich bieten die Möglichkeiten aktueller Programmiersprachen (z. B. von Java) für  die Schule neue und relativ einfach realis ierbare motivierende Möglichkeiten.  Die Idee der Berechenbarkeit  ist, wenn man sie so wie in der theoretischen Informatik üblich auffasst, für Lernende neu und frem d. Hier halte ich entsprechende Einsichten nur als Endergebnis des Lernprozesse s für möglich. Der Weg von Alltagserfahrungen hin zu Entscheidbar keitsproblemen ist wohl doch zu weit, um ihn weitgehend durch Eigenaktivitäten zu finden. Es ist aber durchaus möglich, in Eigenarbeit                                                    390 z. B. die LEGO-Mindstorms-Maschinen  391 Beispiele dafür z. B. in [Ger95] 3.3 Zur Rekonstruktion fundamentaler Ideen    75  so viel Erfahrungen mit den Einzelbaustei nen dieses Weges (Codierungen, Turingmaschinen, …) zu machen, dass eine gesch lossene Darstellung mit ihren verblüffend weittragenden Aussagen gut machbar wir d. Ein möglicher Durchgang wird unten beschrieben. Die numerischen und durc h Iterationen und Kombinationen auftretenden Grenzen sind allerdi ngs nahe liegend und durch Ex perimente direkt erfahrbar392. Sie bieten ebenso wie di e zellulären Automaten hoc hinteressante Probleme  schon für den Anfangsunterricht.    3.4  Technische Informatik im Theoriekurs?   Obwohl Themen der technischen Informatik393 zu den ältesten Inhalten der Schulinformatik gehören394, scheint mir auf diesem Gebiet am wenigsten geklärt, ob und  wie das Thema an allgemein bildend en Schulen unterrichtet werden soll.395 Einen  Hinweis erhalten wir z. B. von Mats Daniels et. al.:  One challenge in computer science is that the constraints to thinking within the discipline are not physical, but hum an: our artefacts are constrai ned primarily by our ability  to invent . Hence computer science teaching is about what computer scientists have  managed to think about so far, and in what  manner: algorithms, paradigms, languages,  engines, tools, solutions are all thought products. But they are thought products that interact crucially with the physical world, and the relationship between the reasoning discipline of computer science and its technology is central to its particular character.396  Bei der Hardware von Informatiksystemen handelt es sich genauso um „Denkprodukte“ wie bei der Software. Sie manifest ieren sich nur in einem anderen Medium.  Auch Hardware ist in hohem Maße abstrakt, und sie ist in der Schule ähnlich wie die  Softwareentwicklung ein exze llentes Anwendungsfeld, um über abstrakte Entwurfs und Modellierungsverfahren397 zu konkreten Ergebnissen zu kommen. In dieser Hinsicht ist sie ein fast schon ideales Anwendu ngsgebiet für Projektarbeit, die über die  Sensorik und Steuerungsvorgänge auch mi t anderen Unterrichtsfächern eng verknüpft werden kann.  Wenn es sich bei der digita len Elektronik um eine Basist echnologie handelt, auf deren Grundlagen weite Bereiche unserer Ge sellschaft beruhen, dann gehört dieses  Thema in den Unterricht allgemein bildende r Schulen, weil Kenntnisse auf diesem  Gebiet zum Verständnis unserer Umwelt notwendig sind. Wir haben einen Fall, der  direkt den Anwendungen des El ektromagnetismus vergleichbar ist: Auch hier werden  die erforderlichen Gr undlagenkenntnisse – im Physikun terricht – vermittelt, und zwar  allen Schülerinnen und Schüler n! Folglich gehört m. E. die Behandlung einfacher  Schaltnetze in die Sek. I und ist damit Thema der ITG. Auch vom Anspruchsniveau  sind Probleme wie  WENN die Alarmanlage eingeschaltet worden ist    UND es später als 22.00 h ist    UND die Fensterscheibe zerstört wird,   DANN FOLGT, dass die bösen Buben kommen                                                     392 z. B.  in [Hen98] S. 12  393 z. B. [Mod92b], [Gas92]  394 ab hier weitgehend nach [Mod92a] S. 326  395 Natürlich kann es unterrichtet werden, denn gerade hier liegen aus der Phase der „Hardwareorientierung“  reichlich Unterrichtsmaterialien und -erfahrungen vor.  396 [Dan00]  397 z. B. mithilfe von endlichen Automaten 3.4 Technische Informatik im Theoriekurs?    76  eher auf dieser Altersstufe angesiedelt und werden dort seit  Jahren erfolgreich unterrichtet. Konsequenterweise können diese Them en dann alleine nich t mehr die „technischen“ Inhalte eines Info rmatik-Grundkurses bilden. Mö glicherweise werden sie  auftauchen, weil Defizite der  Sek. I aufzuarbeiten sind, aber mehr auch nicht. Der  Informatikunterricht der Sek.  II würde bei Beschränkun g auf solche Themen nur ITGAufgaben wahrnehmen, die nicht zu se inem eigentlichen Kern gehören.  Sehen wir uns die beim Schaltungsentwurf meist benutzten Methoden der Schaltalgebra etwas genauer an, dann stellen wir fe st, dass die eigentliche Schaltungsentwicklung gar nicht Thema dieser Disziplin  ist. Schaltfunktionen werden nach unterschiedlichen Kriterien umgeformt, bis sie bestimmten Anforderun gen z. B. der Einfachheit oder der Darstellungsform genügen.  Jeder dieser Schaltfunktionen entspricht aber direkt eine Schaltung, deren Au fschreiben eine eher triviale Aufgabe  darstellt. Haben wir überhaupt eine Schaltfunktion, die ein Problem löst, dann haben  wir auch die entsprechende Schaltung. Diese ist vielleicht zu umfangreich, nicht effizient, ..., aber sie löst das Problem; und da E ffizienzkriterien m. E.  in allgemein bildenden Schulen nur sehr eingeschränkt Sinn haben, sind die mathematischen Methoden der Schaltalgebra zumindest nicht notwendig, um Schaltungsentwurf in der  Schulinformatik zu betreiben. Die Methode n der Schaltalgebra sind deshalb ggf. hilfreich, aber zur Begründung der Existenz de r Technik innerhalb des Informatikunterrichts ebenfalls nicht geeignet.   Viel wichtiger als mathematisch begr ündete Umformungen is t die Frage nach der  Existenz einer Schaltfunktion für eine gegeb ene Problemstellung. Im  Informatikunterricht sollte deutlich werden, dass einerseits die aussagenl ogische Formulierung einer  Problemstellung (WENN dasunddas  gegeben ist  DANN FOLGT diesunddas ) eine Lösung  impliziert, andererseits aber nur ein einge schränkter Satz von Problemklassen auf  diese Art behandelbar ist: Gerade bei den „interessanten“ Fragen lässt sich „dasunddas“ und „diesunddas“  nicht aussagenlogisch scharf fassen. Standardbeispiel für  solch einen „unscharfen“ Begriff ist die Größe eines Menschen: Sicherlich ist ein  1,95 m-Mensch „groß“, und ebenso sicher ist ein 1,55 m-Mensch „klein“. Wie aber sind 1,80 m einzuschätzen? Als „ziemlich groß“? 398 Die Existenz anderer als aussagenlogischer Methoden (Fuzzy-Logik, neuronal e Netze) zeigt sehr deutlich, dass  mithilfe der Aussagenlogik formulierbare Prob leme noch nicht einmal die Bereiche  vollständig abdecken, in denen schon heute technisch „hart“ gearbeitet (gesteuert,  geregelt, ... ) werden soll: Wir brauchen gar nich t die „unscharfen“ Begriffe der Geisteswissenschaften wie „Schönheit“, „Harmoni e“, ... zu bemühen; auch die Steuerung  eines Brennofens oder einer Vi deokamera geht oft über die Möglichkeiten der traditionellen Aussagenl ogik hinaus399. Im Hardwareunterricht können also die Möglichkeiten und Grenzen einer Methode er fahren werden, die zwar für einige der so gern  behandelten „klar formulierten“ Probleme wunderbar funktioniert, für andere aus dieser Klasse aber schon nicht mehr; und die Grenzen der Technik sind ein zentrales  Thema der Informatik: sei es bei den Algorit hmen, sei es an dieser  Stelle. Im Gegensatz zu den Berechenbarkeitsund Entsc heidbarkeitsproblemen hande lt es sich bei  der Schaltungsentwicklung aber  um sehr handfeste Proble me, so dass die Grenzen  der Computer nicht in (für die Schüler innen und Schüler) esoterische Bereiche verschoben werden.                                                      398 Die Fragestellung ist direkt auf Sensorenabfragen, wie sie zur Steuerung von Schaltungen benutzt werden,  übertragbar.  399 Was z. B. ist eine „scharfe“ Bremsung? 3.4 Technische Informatik im Theoriekurs?    77  Die zentrale Aufgabe des Hardwareunterrichts ist es m. E. zu zeigen, wie technische  Komponenten Eigenschaften erwerben, die sonst eher dem geistigen Bereich zugeordnet werden – und dafür  ein gültiges Modell zu entwickeln: wie also eine Schaltung  (in vorgegebener Weise) sinn voll auf unterschiedliche Si tuationen reagieren kann,  Entscheidungen trifft, sich etwas me rkt oder programmiert werden kann.400 Begreifen  wir digitale Systeme als ein System von „Schaltern“, dann reduziert sich unser Problem auf die Frage: „Wer bedi ent die Schalter?“ Nun ka nn man schnell zeigen, dass  einerseits Schalter von außen bedient wer den (durch „Sensoren“, Menschen, ...),  andererseits Schaltersysteme auch auf sich selbst zurückwirken können. Wir kommen dadurch zu einer Konkretisierung des Begriffs des Zustands  des Systems, der  z. B. als eine Art Gedächtnis (Speicher, ...)  fungieren kann. Die Abfolge solcher Zustände beschreibt dann die Reaktionen des Systems; und wenn unterschiedliche  Abfolgen möglich sind, dann kann die Sc haltung auch auf unterschiedliche Weise  reagieren. Beschreiben wir die Zustände und deren Änderungen auf eine geeignete,  systematische Art und zeigen, wie di e so gefundene Beschreib ung wiederum systematisch in eine Schaltung umgesetzt we rden kann, dann haben wir unsere Aufgabe  gelöst: Wir können beliebige (auch programmi erbare) Schaltungen entwerfen.   Es kommt dabei nicht so sehr auf die Ko mplexität der Ergebnisse als auf das systematische Vorgehen an: Für die Schule (und die Schülerinnen und Schüler) ist es  „normal“, mächtige Verfahren anhand einfacher Beispiele kennen zu lernen und einzuüben. Technische Informatik darf sich dam it nicht auf „Kochrezepte“ beschränken,  die zeigen, dass eine vor gegebene Schaltung funktioniert (z. B. ein FlipFlop aus  NANDs). Vielmehr müssen Methoden entwicke lt werden, die zeigen, wie man zu  einer Lösung kommt. Als systematisches Ve rfahren zum Schaltungsentwurf bieten  sich die Notationsformen der Automat entheorie und die dazu passenden Methoden  an. Hier liegt auch die enge Verbindung zu r theoretischen Informatik, für die der  Technikkurs eine Art „projektorientierte Vo rstufe“ bilden sollte. Entsprechend betont  die technische Informatik die gleichen  fundamentalen Ideen  wie in der Theorie: (hier:  konkrete) Automaten mit ihren Zuständen, Berechenbarkeit und Sprachen, die die  Automaten steuern, manifestieren sich zw ar anders, aber in vergleichbarer Weise401.  Strukturierte Zerlegung und Algorithmisier ung – mit ihren „Unterideen“ – zeigen sich  beim Entwurf von Schaltungen sowie im Bereich der Simulation.  Wichtig erscheint mir die Erfahrung, dass quantitative Änder ungen der Zahl der  Schalter in einer Schaltung qualitative Ä nderungen bewirkt: Mit einem kann man eine  Glühbirne „schalten“, mit zwei oder drei Schaltern eine Alarmanlage bauen, mit weniger als zehn ein Treibha us steuern, mit einigen Dutzend einfache Rechnungen  durchführen, mit Hunderten einen Tasc henrechner bauen und mit Tausenden, Millionen, ... ? Zu jeder Größenordung von Z ahlen gehört eine andere Problemklasse, die  damit gelöst werden kann. Miniaturisierung ist nicht nur ein technisches Problem.  Ich habe mit Absicht die sehr „tiefen“ E benen des Schaltungsentw urfs zuerst besprochen, obwohl mir natürlich bewusst ist, dass man auf diese Art keinen Computer  entwickeln kann. Zur Beschreibung derar t komplexer Systeme gehören die Benutzung von Blockschaltbildern, das Denken in Komponenten und die Beschreibungsformen der Rechnerarchitekturen402. Legt man eine bestimmt e Struktur zugrunde  (von-Neumann-Rechner, ...), dann kann in  diesem Bild auf der entsprechenden  Softwareebene gearbeitet werden: Man progra mmiert im Assemble r. Wohlgemerkt:                                                    400 Ich meine also nicht eine technische Variante des Leib-Seele-Problems, sondern „harte“ Computertechnik.  401 Die Berechenbarkeit tritt hier meist unter  dem Aspekt der Durchführbarkeit auf.  402 Mir ist dieser Begriff für die Schule eigentlich zu hochg estochen, aber er hat sich nun einmal auch hier eingebürgert. 3.4 Technische Informatik im Theoriekurs?    78  man kann – aber wozu? In Blockschaltbildern dieser Art erscheint die Struktur von  Computern sicherlich differenz ierter als im Anfangsunterricht, und es lassen sich natürlich auch unterschiedliche Architek turen unterscheiden. Gehen wir davon aus,  dass nicht die Einzelheiten des gerade benutzten Prozessors und seiner Komponenten behandelt werden403, sondern prinzipielle Stru kturen, dann ist das Blockschaltbild eines Von-Neumann-Rechners nicht s ehr kompliziert und in kurzer Zeit zu  erlernen. Die oben genannten Fragen werden dabei sicherlich präzisiert, aber sie  werden nicht beantwortet. Für die Schüleri nnen und Schüler bleibt noch offen, wie  weit sie von den technischen Grundlagen entfe rnt sind: Sie „schwimmen“ auf einem  Meer von Fragen, dess en Tiefe sie nicht einschätzen können. Die Frage, wie eine  Schaltung „etwas entscheidet“, bleibt bestehen. Ich halte deshalb den Umgang mit  „echter“ Hardware auf dem Niveau der Schal talgebra (im Kontext eines ComputerBlockschaltbildes) für unverzichtbar. Sollten aus Zeitgründen nur entweder Rech-nerarchitekturen (mit (Pseudo-) Assemblerp rogrammierung) oder Schaltungsentwurf  betrieben werden können, dann würde ich dem zweiten immer den Vorrang geben.  Ohne diese Basis erscheint mir die Assemb lerprogrammierung nur als (überflüssiger)  Wechsel der Programmiersprache, der kaum  neue Erkenntnisse bringt, aber viel Zeit  erfordert, die mit anderen Themen m. E. besser genutzt werden könnte. Umgekehrt  aber kann bei Kenntnis der Methoden, programmierbare Sc haltwerke zu entwerfen,  die Arbeit mit einem (Pseudo-)Assembler die Kluft zwischen den (Modell-)Rechnern  und den höheren Programmiersprachen schließ en. Die algorithmischen Grundstrukturen können auf Sequenzen maschinennaher Befehle zurückgeführt werden, die  einzeln direkt Schaltungskomponenten un d -funktionen zuzuordnen sind und deren  Komplexität mit den Mitteln der Schule zu bewältigen ist. Wird durch die Methoden  des Schaltungsentwurfs eine solide Basis ge legt, dann kann auf dieser technisches  Wissen über Computer erworben werden, das  keinen Raum mehr für „Geheimnisse“  lässt. 404  Fassen wir also die Anforderungen an die technische Informatik innerhalb der Kursfolge noch einmal zusammen:  1. Kenntnisse über den Entwurf und die Nutz ung von Schaltnetzen gehören zumindest  teilweise in den Bereich de r ITG und sollten vom Informatikunterricht vorausgesetzt  werden können. Fehlen Sie, dann müssen sie nachgeholt werden. In keinem Fall  darf sich die Informatik aber auf das Them a beschränken. Zu diesem Bereich gehören die systematische Aufstellung von logischen Schaltfunkti onen und deren Umsetzung in Gatterschaltungen. Beispiele finden sich bei Fragen des Steuerns und Re-gelns und bei einfachen Rechenschalt ungen. Die Umformung und Vereinfachung  von Schaltfunktionen mit mathematischen Methoden ist weit weniger wichtig als  Fragen nach den Möglichkeiten und Grenzen des Verfahrens.  2. Wichtig für das Verständnis sind die Eigenschaften von Schalternetzen. Welche Art  von Schaltern verwendet wird, ist eigentlich  egal. Ich glaube nicht, dass der Physikunterricht der Sek. I tragfähige Grundl agen für die Verwendung von Halbleiter                                                   403 was ich für selbstverständlich halte.  404 Wenn auch neuronale Netze nicht gerade im Zentrum des technischen Informatikunterrichts stehen, so halte  ich sie als Kontrast zu den systematischen Verfahren de s Schaltungsentwurfs für auße rordentlich hilfreich. Diese  Netze „lernen“ ja (wobei die dabei erfolgenden Vorgänge auf dem Niveau der Sek. II mathematisch gut beschrieben werden können), und sie kommen etwa in der Mustererkennung zu Antworten, die auf anderem Wege  nicht oder nur mit wesentlich höherem Aufwand zu erhalten sind. Dabei erkennen sie Muster, die von den ge-lernten ziemlich stark abweichen können, oft gut wieder. Manchmal aber auch nicht! Und ob sie zu einer Lösung  kommen, wie sie zu einer Lösung kommen, ob dieses die beste Lösung ist (oder nur eine lokale Näherung), wie  sicher die Antwort ist: All dieses können die Net ze nicht beantworten  – und wir auch nicht.  3.4 Technische Informatik im Theoriekurs?    79  schaltern (TTL, ...) liefert. Wir sollten uns  deshalb auf ein einf acheres Modell beschränken, z. B. auf elektromechanische Systeme.405   3. Wirken Schaltungen auf sich selbst zu rück, dann ergeben sich Schaltwerke mit unterschiedlichen Zuständen. Als systematisches Beschreibungsmittel bieten sich end-liche Automaten an, die Zugang zu den Verfahr en der Automatentheorie öffnen. Auf  diesem Wege können alle Komponenten ei nes Computers (meist  in vereinfachter  Form) systematisch entwickelt werden: Zähler, Register, Rechenschaltungen, ...  4. Komplexere Systeme können im Automatenm odell nicht mehr übersichtlich beschrieben werden; deshalb bietet sich ab dieser Stufe modular es Arbeiten an. In Blockschaltbildern werden einfache programmier bare Systeme entwickelt, bei denen der  Aufbau der wesentlichen Einzelkomponenten  bekannt ist. Pseudoassemblerbefehle,  die aus den Mikroprogrammschritten dieser Schaltungen abgeleitet werden, bilden den Übergang zu höheren Programmiersprachen.   5. Die Architektur dieser Schaltungen kann leic ht zu der bekannter Systeme erweitert  werden. Die Stärken und Schwächen unterschi edlicher Strukturen werden aus deren  Funktionen abgeleitet. Erst de r Vergleich sehr unterschied licher Architekturen lässt  solche Vergleiche zu.  Die Zahl der im Unterricht bearbeitbaren „S tufen“ hängt natürlich von der zur Verfügung stehenden Zeit ab. Weiterhin soll die Reihenfolge nicht zeitlich verstanden werden: Ich selbst hangele mich meist (sehr sc hnell) in einer Art Top-Down-Verfahren  von einfachen Anweisungen der benutzten Programmiersprache über Pseudoassembler-Befehlssequenzen und die Blockschaltb ilder eines Rechners bis zu einzelnen Hardwarekomponenten herab, so das s dann anschließend ( ausführlich) entsprechende Schaltungen entwo rfen und im Bottom-Up-Verfahren zu programmierbaren Systemen zusammengesetzt  werden können. Damit lässt  sich problemlos ein  ganzes Halbjahr verbringen; aber auch wenn wesentlich weniger Zeit zur Verfügung  steht, muss auf den Entwurf (einfacher) programmierbarer Schaltwerke nicht verzichtet werden.   Ein Kurs zur technischen Informatik hat dam it mehrere sehr unterschiedliche Funktionen:  • Er gestattet schon auf niedrigem Niveau praktisches Arbeiten mit „echter“  Technik 406 – eine Erfahrung, die im Gym nasium sonst kaum geboten wird.  • Er liefert ein solide fundiertes hardwa renahes mentales Computermodell, das  durch praktische Arbeiten auf unter schiedlichen Gebieten und sehr unterschiedlichem Niveau gefestigt wird. Damit stützt er das Verständnis z. B. für  die Arbeit mit Variablen, Parametern , Rekursionen, Blockstrukturen, … im  Softwarebereich hilfreich ab.  • Er bietet Erfahrungen im Entwurf und der Anwendung endlic her Automaten,  • und er macht allen viel Spaß!                                                    405 Schon um Probleme der Schülerinnen und Schüler mit dem Physikunterricht nicht auf die Informatik zu übertragen!  406 Hoffentlich „ausgelagert“ in die Sek. I, denn dort gehört diese Erfahrung hin. 3.5 Zum Unterrichtsgang    80  3.5  Zum Unterrichtsgang407  3.5.1 Zur Anwendung der Kriterien für Unterrichtsinhalte  Die Auswahl der Inhalt e eines Theoriekurses muss anhand der gefundenen Kriterien  für Unterrichtsinhalte  erfolgen. Dementsprechend kön nen sie nicht nur aus fachimmanenten Überlegungen abgeleitet werden , sondern müssen auch den allgemein  bildenden Aspekten gerecht werden. G ehen wir sie also einzeln durch:  Zur formalen Bildung:  Schon bedingt durch die starke Betonung der fundamentalen Ideen,  die sich im  Ideenbaum der Formalisierung  finden, kann dieser Aspekt leicht erfüllt werden.  Unterrichtsinhalte sollten den Prozess der Begriffsund Modellbildung  betonen, in  dem ausgehend von konkreten Beispielen zi elgerichtet abstrahier t wird, um übergreifende Eigenschaften zu fi nden und hantierbar zu machen.408 Die Anwendung  formaler Verfahren  und der Wechsel  zwischen Modellen , etwa beim Entwurf, die enge  Verknüpfung von Theorie und Praxis  und die Rückkoppelungen zwischen diesen  müssen deutlich werden.409 An wenigen, aber geeignet en Stellen muss im Theoriekurs die herausragende Stellung der  Mathematik  hilfreich in Erscheinung treten.   Zu den fundamentalen Ideen:  Aspekte der Algorithmisierung müssen in den Entwurfsverfahren  und bei den Anwendungen  (Simulationen, Realisierung v on Modellen, …) herausgearbeitet werden. Modularisierung und Hierarchisierung sind fast allen Aufgabenfeldern aus  diesem Gebiet immanent.410 Die Ideen des Formalisierungs-Baums müssen deutlich zu Tage treten – aber das ist in diesem Bereich auch kaum zu vermeiden.  Zu den Schlüsselproblemen:   Hier muss der Bezug einerseits über die Auswahl der Beispiele  erfolgen (Anwendungen der Codierung, Anwendungen und Grenzen der formalen Sprachen,  Komplexität von zellulären Automa ten, …), andererseits halte ich den Weg zu  Grenzfragen  im Bereich der Berechenund Entsc heidbarkeit für so wichtig, dass er  auch inhaltlich den Kurs rechtfertigt. Ver deutlicht er doch sowohl exemplarisch  wissenschaftliches Arbeiten wie die Mächtigkeit der  mathematischen Methoden  auf  einem (für Schülerinnen und Schüle r) ganz anderem Gebiet als üblich.411  Zum Transfer:  Hier gilt das Gleiche wie immer: Es dür fen nicht nur einzelne Beispiele „besprochen“ werden, sondern die entwickelten Methoden müssen in einem Themenfeld  selbstständig auf modifizierte Beispiele angewandt  werden und so Werkzeugcharakter  gewinnen.412 Im Bereich Technik/Theorie biet en sich für sehr ähnliche Verfahren  drastisch unterschiedliche Anwendungsbereiche , so dass die Über tragbarkeit besonders deutlich wird. Diese Möglic hkeit muss genutzt werden.                                                    407 ab hier weitgehend nach [Mod92a] S. 354ff  408 [Koe00] „Die Integration der beiden Aspekte [Algorithmik/gesellschaftskundlicher Bereich]  wird durch  Modellbildung geleistet. Mode llbildung wird dabei verstanden als Kons truktion eines zweckm äßigen formalen  Systems, das der Darstellung und der Lösung einer realen Problemsituation dient.“  409 [Schu99]: „… Dazu gehören in stärkerem Maße theoretische Grundlagen für praktisches Handeln.“   410 Wenn man sich nicht nur auf einzelne „ausgewählte“ Beispiele beschränkt.  411 [Sche97] „Computer liefern anschauliche Darstellungen höchst abstrakter mathematischer Modelle. (...)  unterstützen nicht-lineares Darstellen und Zugreifen, ver netztes Denken. (…) ermöglichen entdeckendes Lernen  auf eigenen Pfaden.“   412 [Bus87] S. 10: „Die angestrebte Orientierung lässt sich nicht erreichen, wenn die Schüler allein mit den  fertigen Resultaten neuzeitlicher Wissenschaften konfrontiert werden.“  3.5 Zum Unterrichtsgang    81  Zur Modellbildung:  Die Erzeugung gültiger Modelle für Info rmatiksysteme ist ei ne der Hauptaufgaben  des Technik-/Theorieteils der Kursfolge. Der Unterricht muss deshalb aus den vorhergehenden Kursen vorli egende Erfahrungen or dnen und daraus jeweils ein  stark reduziertes, aber valides Hardwaremodell  entwickeln, um sie „nach unten“  abzusichern, und ein Softwaremodell , das einerseits den Algorithmusbegriff präzisiert und auf seine Grenzen abklopft, anderseits die Grundfunktionen erklärt.   Zum Projektunterricht:  Die Anwendungsmöglichkeiten der Modelle des Theorie-/Technikkurses sind so  vielfältig, dass es schon fast fahrlässig wäre, auf projektartige Phasen zu verzichten.413 Einerseits können die gleichen Methoden auf unterschiedliche Aufgabenstellungen  in Gruppen angewandt, dokumentiert und vo rgestellt werden (jeweils in  den Bereichen Steuern und Regeln, „Ta schenrechner“, programmierbare Schaltungen, einfache Computersp rachen, generative Gramma tiken, Robotersteuerung, Kryptografie, spezielle Turingma schinen, …), andererseits können auch unterschiedliche (und damit unterschiedlich anspruchsvolle414) Methoden bei ähnlichen  Aufgabenstellungen  Anwendung finden (Entwicklung u nd Parsen einer Sprache,  Entwicklung einer Schaltung für bestimmt e Aufgaben, …). Im zweiten Teil der  Kursfolge haben die Lernenden sowohl die Kenntnisse wie die Erfahrungen, um  solche Aufgaben selbstständig anzugehen. Im konstrukti vistischen Sinne kann  und muss von ihnen auch erwartet  werde, aktiv an ihren Lernfortschritten zu arbeiten. Wo anders als in Pr ojektphasen können sie diesen Anspruch vorrangig erfüllen?415   Zum offenen Kanon:  Die technische und theoretische Informatik sind m. E. die Musterbeispiele für  Themenbereiche, an denen sich dieses Kr iterium demonstrieren lässt. Inhaltlich  ändert sich hier kaum etwas,  da in der Schule weder die Theorie noch die Technik an die aktuelle Entwickl ung gekoppelt sind. Damit lassen sich die fachlichen  Ziele „zeitlos“ festschreiben. Es ändern sich aber die Werkzeuge, die den Schulen  zur Verfügung stehen. Wollen wir also z. B.  die Modularisier ung und Hierarchisierung am Beispiel von (Modell-)Rechner n behandeln, dann können wir das (fast  zeitlos) mithilfe von TTL-Bausteinen erreichen416. Die Simulation der Bauteile  kann aber mit aktuellen Werkzeugen erfo lgen. Ob hier als OOP-Anwendung  selbst programmiert, ein spezielles Simulationsprogr amm benutzt oder sogar mit  Spreadsheets gearbeitet wird, bleibt der aktuellen Situ ation überlassen. Entsprechendes lässt sich über di e Realisierung der Automat enmodelle sagen. In jedem  Fall liegen Inhalte und Ziele fest, di e konkrete Umsetzung ist offen.                                                    413 [Sche97] „Informatikunterricht, der allgemein bildend sein will, muss gerade diesen im Computer enthaltenen Widerspruch zwischen Abstraktem und Konkrete m, zwischen streng logisch-rationalem und intuitivkreativem Zugang aufgreifen und erklären, die Doppelse itigkeit des Computers zwischen Automat und Medium,  zwischen Turingmaschine und Interaktion einsichtig machen.“   414 [Brun70] S. 78: „Der Gesichtspunkt, das Streben nach hohen Leistungen solle nicht nur auf den begabten  Schüler beschränkt bleiben, ist bereits vorgetragen worden. Aber die Idee, der Unterricht solle sich an den  Durchschnittsschüler wenden, um jedem etwas zu bieten , ist eine ebenso inadäquate Formel. Worauf es ankommt, so erscheint es vielen von un s, ist, Lernmaterial bereitzustellen, das dem besseren Schüler Anreiz bietet,  ohne das Vertrauen und den Lernwillen der weniger vom Glück Begünstigten zu zerstören. Wir geben uns keinen  Illusionen über die Schwierigkeit eines solchen Kurses hin, er ist jedoch der einzige, der uns übrig bleibt, wenn  wir hohe Leistungen anstreben und zur selben Zeit der Vielfalt der Talente gerecht werden sollen, die wir auszu-bilden haben.“   415 Projekte kann man nicht „abhocken“!  416 Solange es die noch gibt. Die ersten Bauteile sind schon nicht mehr lieferbar. 3.5 Zum Unterrichtsgang    82  3.5.2 Eine mögliche Unterrichtssequenz417  Hätten wir nur das Ziel, Aussagen zur Be rechenbarkeit zu machen, dann könnten wir  uns natürlich auf Turingmasch inen beschränken, weil diese Apparate alles können,  was überhaupt von Maschinen ausführbar ist. Allerdings sind sie für viele Zwecke  sehr unpraktisch, z. B. weil sie nur über ein Arbeitsband verfügen.418 Stattdessen  werden wir gleich unterschiedliche, für unterschiedliche Zwecke optimierte Maschinen (oder Sprachklassen) benutzen. Mit de m Maschinenoder Sprachtyp klassifizieren wir dann das bearbeitete Problem selbst  – und umgekehrt: Die äußere Form z. B.  der Regeln einer vereinbarten Sprache ze igt unabhängig von deren Bedeutung, ob  diese Sprache analysierbar ist und welcher Typ von Übersetzer diese Analyse liefern  kann. Mir scheint es in der Schule nur weni ge Punkte zu geben, an denen der Begriff  des formalen Systems und die Mächtigk eit dieser Idee derart deutlich wird.419  Der Transitionsgraph hat im Bereich der endlichen Automaten eine zentrale Bedeutung. Rechtfertigt seine Benutzung allein deshalb schon den Begriff „theoretische“  Informatik? Ein Transitionsgraph ist zuerst  einmal eine besondere Art, zustandsabhängige Systeme zu beschreiben: Man notiert sehr übersichtlich, was in den einzelnen Zuständen bei der Eingabe bestimmter Zeichen geschehen soll. Diese Aufgabe  ist ziemlich direkt dem Problem vergleichbar , für ein mehrstufiges Zufallsexperiment  den Wahrscheinlichkeitsbaum zu zeichnen: eine typische Anforderung des Mathe-matikunterrichts der Sek. I. Entsprechend sollte das Hilfsmittel der Transitionsgraphen schon früh im Unterricht benutzt wer den: bei der Beschreibung von Schaltwerken oder bei der Mustererkennun g in der Textverarbeitung. Theorie betreiben wir auf  diese Weise aber nicht. Vergleichbares lä sst sich über Elemente der formalen Sprachen sagen. Deren Grammatiken machen aus führlich von der Möglichkeit Gebrauch,  in Zeichenketten Teile durch andere zu ersetzen. Die Real isierung dieser Fähigkeit  und auch deren Anwendung bed eutet aber noch lange nich t, der Theorie der formalen Sprachen näher zu kommen. Wir haben dam it ein Problem, das schon mehrfach  genannt wurde: Wenn in einem  bedeutenden Teilbereich der Hochschulinformatik ein  bestimmtes Hilfsmittel (z. B. PROLOG) benutzt wird, dann br ingt uns in der Schulinformatik die Benutzung dieses Werkzeuges  allein diesem wichtigen Thema noch  keinen Schritt näher. Wir wo llen also festhalten: Die Benutzung von Konstrukten der  theoretischen Informatik (Transitionsgraphen, T extersetzungsmöglichkeiten, Stapelbegriff, ...)  in vorausgehenden Kursen bereitet  einen Theoriekurs effizient vo r. Sie ersetzt ihn aber nicht.   Die eigentlichen Aufgaben des Theoriekurses liegen an anderer Stelle: Mithilfe des  (möglichst schon bekannten) endlichen Auto matenmodells werden Hardoder Softwaresysteme auf systematische Weise erzeugt. Die „geistige“ Arbe it liegt damit alleine in der exakten Beschre ibung des Systems. Seine Realisierung kann weitgehend standardisiert erfolgen 420. Auf diesem Gebiet finden wir eine Fülle von Anwendungsmöglichkeiten für Datenstrukturen (Objek te, Listen, Bäume, Netze, ...), algorithmische Verfahren und Schaltungs entwurf in bunter Mischung.                                                    417  [Dan00] “The syllabus coverage issue is one of the main discussion topics with regard to project-oriented  courses.”  418 Man kann einwenden, dass auch zwei, drei oder mehr Arbeitsbänder zugelassen sind – doch dann haben wir  das Problem zu zeigen, dass alle diese Maschinen äquivalent sind.  419  [Hop96] „Das zentrale Argument für Informatik als Bestan dteil der Allgemeinbildung: Informatik repräsentiert und ‚transportiert’ mehr als jedes andere Fach ( ...) das historisch und kultu rell bedeutsame Bemühen um  die Automatisierung geistiger Tätigkeiten (…)“   420 Wir haben dann Aufgabenstellungen, die der „Kurvendiskussion“ in der Mathematik vergleichbar sind: an  manchen Stellen ein unverzichtb ares Hilfsmittel des Unterrichts und der Leistungsmessung. 3.5 Zum Unterrichtsgang    83  Mithilfe eines konstruktiven Beweises lässt sich sehr einfach die Äquivalenz endlicher Automaten und (z. B.) linksregulärer Grammatiken zeigen. Damit finden wir einen einfachen Zugang zum Übersetzerbau. Sp rachkonstrukte, die sich regulär beschreiben lassen, sind deshalb analysierbar , und wir können sogar direkt die Maschine angeben, die „Sätze“ dieser Art analysi ert. Auch hier gibt es eine Fülle von  einfachen Anwendungen (Analyse einfacher Programmiersprachen-Konstrukte, Definition von Grafiksprachen („LOGO für Arme" – s.  Beispiel 4.4), ...) die praktische Arbeit zulassen. Das Zusammenspiel von Sca nner, Parser und Compiler/Interpreter ist  direkt aufzeigbar.  Kellerautomaten und kontextfrei e Grammatiken öffnen den Zugang zur Analyse „echter“ Computersprachen. Der Äquivalenzbeweis  ist m. E. zu aufwendig, deshalb lasse  ich ihn weg. Auf diesem Gebiet bietet si ch die Arbeit mit den formalen Grammatiken  an, weil sie einfach „praktischer“ sind.  Formelinterpreter, Rekursionen, Parsingtabellen, ... sind geeignete Arbeitsthemen, die arbeitste iligen Unterricht zulassen.  Über unterschiedliche Grammatiken, die die gleiche Sprache beschreiben, lassen  sich auf Schulniveau Aussagen über die Effizienz der entsprechenden Algorithmen  machen. Unterschiede zwischen der prin zipiellen und der praktischen Berechenbarkeit lassen sich zeigen und erfahren.  Die Bedeutung von LR (k)-Grammatiken ebnet  einen Weg zu Fragestellungen des Aufwands  bei Berechnungen, etwa beim P/NPProblem. Insgesamt sollte ein gültiges Mo dell entstehen, das die Funktionsweise von  Programmiersprachen und die Arbeit der erzeugten Programme innerhalb des Betriebssystems zureichend erklärt.  Bis hierhin kam die Theorie eigentlich kaum vor. Die Be schäftigung mit den Arbeitsmitteln der theoretischen Informa tik ermöglicht es aber, in relativ kurzer Zeit zu zentralen Fragen der Theorie vorzustoßen. Mit Hilfe der Transitionsgraphen, Grammatiken, Funktionen, ... sind Fragestellungen z. B. nach den Grenzen der Algorithmisierbarkeit überhaupt erst formulierbar. Sie kön nen so gefasst werden, dass sie sich in  dieser Begriffswelt beantwo rten lassen. Alleine dieses  genügt in meinen Augen  schon als „Theorieanteil“ in der Schule. Tr otzdem können einige geeignete Beispiele  (Halteproblem, Radosche Funktion, ...) aus  diesem Gebiet besprochen werden. Gerade die amerikanische Literatur liefert  auch für Schulen geeignete hübsche Beispiele auf diesem Gebiet.  Auch in der Schule ist ein schneller W eg zu Fragen der Berechenbarkeit und Entscheidbarkeit zu finden, wenn wir die den Schülerinnen und Schü lern mittlerweile  vertrauten Begriffe der Au tomatentheorie benutzen. Wir müssen dabei allerdings  gelegentlich das Modell wechseln, und wir müssen einige Kompromisse bzgl. der  Exaktheit machen: Wir „beweisen“ also ei ne Aussage nur für einen Teilbereich (hier:  der primitiv berechenbaren F unktionen), und zwar durch Kons truktion, indem wir entsprechende Maschinen „bauen“. Ich meine, dass durch die Einbeziehung eigener  Aktivitäten der Schülerinnen und Schüler und vor allem durch  die Benutzung der sehr  konkreten Maschinenmodelle diesen die Bedeutung der Aussagen viel deutlicher  wird als durch passives „Zuhören beim Beweis“.  1. Schritt:  Wir zeigen, dass der intuitiv beschriebene  Algorithmusbegriff einer Abbildung  innerhalb der natürlichen Za hlen äquivalent ist. (Wechs el von den Algorithmen  zu den mathematischen Funktionen)  • Ein Algorithmus ordnet einer end lichen Menge von Eingabezeichen eine  endliche Menge von Ausgabezeichen zu. 3.5 Zum Unterrichtsgang    84  • Durch Gödelisierung lassen sich sowo hl die Eingabedaten als auch die Ausgabedaten als jeweils eine nat ürliche Zahl auffassen. (Im Primitivfall werden  die Zeichenfolgen im ASCII-Code auf geschrieben. Die so entstehende Folge  kann als (sehr große) natürliche Zahl interpretiert werden.)    ABC Æ 65  66  67  Æ 656667  • Folglich kann jedes algor ithmische Verfahren als Ab bildung einer natürlichen  Zahl auf eine andere aufgefasst werden.    2. Schritt:  Es wird gezeigt, dass es nur abzählbar  viele Algorithmen,  aber überabzählbar  viele Abbildungen in nerhalb der natürlichen Zahlen gibt.  • Ein Algorithmus muss sich mit endlich vielen Zeichen beschreiben lassen.  • Die Folge dieser Zeichen ka nn wieder als natürliche Z ahl aufgefasst werden  (s. o.).  • Damit entspricht jedem Algorithmus eine natürliche Zahl.  • Damit gibt es nur abzählbar viele Algorithmen.  • Mit einer Variante des Cantorschen Dia gonalverfahrens zeigt man, dass es  überabzählbar viele Abbildungen inner halb der natürlichen Zahlen gibt.  • Damit ist plausibel gemacht worden, da ss es für wenigstens einige dieser  Abbildungen keine ents prechenden Algorithmen gib t, die diese Abbildung  berechnen.    3. Schritt:  Nach der Churchschen These ist alle s, was berechenbar ist, rekursiv berechenbar. Für die Teilmenge der primitiv -berechenbaren Funktionen wird gezeigt, dass Turingmaschinen genau die da zu erforderlichen Operationen ausführen können. „Glaubt“ m an dann, dass sie auch die Werte aller rekursiv berechenbaren Funktionen bestimmen können, dann sind die Turingmaschinen die  leistungsfähigsten Maschi nen überhaupt. (Wechsel von den Funktionen zu den  Maschinen)  • Die primitive Berechenbarke it wird auf Nachfolger-, Projektionsund konstante Funktion sowie ein einfaches Re kursionsverfahren zurückgeführt. Mit  Hilfe von Teilprogrammen werden ent sprechende rekursive Funktionen realisiert.  • Es werden Turingmaschinen konstruier t, die diese Operationen ausführen  können.  • Damit ist ein Algorithmus ein Verfahr en, das eine Turingmaschine ausführen  kann. Mehr als eine Turingmaschi ne kann keine Maschine leisten.    4. Schritt:  Anhand wenigstens eines Be ispiels wird gezeigt, dass es tatsächlich nicht berechenbare bzw. nicht entscheidbare Prob leme gibt. Das Halteproblem, der  „fleißige Biber“, ... sind so behandelbar.    3.5 Zum Unterrichtsgang    85  Es könnte der Eindruck entstehen, dass hier überwiegend „theoretisch“ gearbeitet  wird. Dem ist aber nicht so. Die meiste Zeit gehört der Realisierung der rekursiven Funktionen und dem Bau von Turingmaschinen für unterschiedlichste Zwecke, also  deren Anwendung auf Probleme, die nicht direkt zur Argumentationskette gehören.  Die verbindenden Glieder si nd auf wenige Stunden  zu beschränken. Sie dienen aber  dazu, den Schülerinnen und Schüle rn zu zeigen, in welchem Kontext sie arbeiten, so  dass das reine (und sehr beliebte) „Herum spielen“ mit Turingmaschinen den Sinn  dieser Arbeit nicht verdeckt.  Im Anschluss an diese Phase können (ich me ine: müssen) populärwissenschaftliche  Texte zu Themen gelesen und besprochen we rden, die mit dem Gödelschen Unvollständigkeitssatz zu tun haben – und von denen gibt es reichlich auch gute 421. Die  Lernenden wissen jetzt, wovon dort geredet wird,  weil sie auf diesem Gebiet selbst  gearbeitet haben; und ich denke, dass dieses sehr  viel wichtiger ist als z. B. die Fähigkeit, den Beweis zum Halteproblem wi edergeben zu können. Die fehlende Fähigkeit formaler Systeme, die Aussagen „über sich selbst“ machen können (wozu z. B.  die Arithmetik durch Gödels „Trick“ mit der Abbildung von Algorithmen auf Zahlen  gehört), die Wahrheit jeder dieser Aussagen zu beweisen, führt auf zentrale Fragen  der Erkenntnistheorie und der künstlichen Intelligenz. Es sollte gezeigt werden, dass kein System rein formal arbeiten kann, so ndern immer auf einem Satz als wahr erkannter Elementaraussagen fußt. Die enorme Mächtigkeit der dann daraus ableitbaren Aussagen muss gewürdigt werden, aber ebenso muss deut lich werden, dass  nicht alle Aussagen ableitbar sind. Formale Systeme beruhen deshalb auf menschli-cher Einsicht, und die Einsicht geht über si e hinaus, weil es Aussagen gibt, die als  wahr erkannt, aber nicht formal als wahr bewiesen werden können 422. Der Gödelsche  Satz spielt m. E. im Bere ich der Allgemeinbild ung eine ebenso zentra le Rolle wie die  Heisenbergsche Unschärferelation, denn er macht prinzipielle Aussagen über die  Fähigkeit, die Welt zu erkennen.  Theoretische Informatik beschäftigt sich in diesem Sinne auch mit Computern, sie  beschäftigt sich aber vor allem mit Men schen, ihrer Suche nach Wahrheit und dem  gescheiterten Versuch, wenigstens im Bere ich der Mathematik vollständige Wahrheit  zu finden.                                                    421 Interessant sind immer noch [Hof79] und [Hof91]  422 s. dazu [Pen91] 4.1 Beispiel 1: Zur Präfiguration der Zustands-Idee    86  4. Beispiele  4.1  Beispiel 1: Zur Präfiguration der Zustands-Idee  Sollen fundamentale Ideen präf iguriert werden, dann muss das früh geschehen. Entsprechende Einschübe sollten immer dann er folgen, wenn sie sich ohne Zwang in  die üblichen Unterrichtsgänge int egrieren lassen. Als Beispi el dafür sollen die Ideen  des Zustands und des Zustandsübergangs schon im Anfangsunterricht vorbereitend  eingeführt werden. Geeignet dafür ist z. B. eine Unterri chtseinheit über kryptografische Verfahren, die innerhalb des Themas „Bezahlen im Internet“  oder „Geschichte der  Datenverarbeitung“423 auftauchen kann. Je jünger die Teilnehmerinnen und Teilnehmer sind, desto mehr interessieren sie sich für dieses Thema. Deshalb, und weil die  Verfahren einfach sind, gehört es in den Info rmatikunterricht der Klassen 9/10, notfalls in den Anfangsunterricht der Sek. II.  Wenn Texte verschlüsselt werden, dann gesch ieht das oft zeichenweise, indem die  Zeichenkette mithilfe von Zählschleifen dur chlaufen wird. Das Thema macht also mit  typischen Elementen des Anfangsunterrichts vertraut und enthält eine Fülle von Veränderungsmöglichkeiten, die auf sehr unt erschiedlichem Niveau behandelt werden  können. Es eignet sich damit sehr gut für Einzelarbeit bzw. projektartige Phasen. In  diesem Beispiel soll exper imentierend auf verschiedene elementare Datentypen eingegangen werden, auch die binäre Darste llung von Zahlen und Zeichen wird thematisiert. Als Sprache wählen wir Java  und als Ziel ein Applet , weil Schülerinnen und  Schüler der anvisierten Altersstufe gerne ihre  Ergebnisse ins Netz stellen. Java-Programmiereinheiten lassen sich so gut in Kurs e über Informationsgewi nnung und         -darstellung integrieren.                                                         423 Zahlreiche Beispiele finden sich z. B. in [Kip98], Unterrichtsgänge in [Mod96a] 4.1 Beispiel 1: Zur Präfiguration der Zustands-Idee    87  Ein mögliches Codierungsverfahren läuft so:    Das Verschlüsselungsverfahren verschlüsselt also nicht alle Zeichen auf die gleiche  Art, sondern es hängt von seinem Zustand  ab, welches Ergebnis produziert wird.  Ausgehend von einem Anfangszustand  wird das System in Folgezustände überführt , die sich aus der zu verschlüssel nden Zeichenfolge ergeben. (Ob das Verfahren besonders intelligent ist, wird si ch in weiteren Tests ergeben.)   Solch ein kompliziertes Verf ahren will erst einmal gut ve rstanden sein. Hilfreich ist  deshalb ein Zustandsgraph , der die Wechsel zwi schen den Zuständen überschaubar darstellt. Vor allem aber kann dies er Graph im Gespräch an der Tafel konstruiert  werden, wobei Unklarheiten und F ehlinterpretationen deutlich werden können und zu beseitigen sind. Da das Ve rfahren wiederholt angewandt werden muss,  kann die Konstruktion des Graphen so weit getrieben werden, bis die Arbeitsweise  von allen verstanden wurde. Ausgabe und Überführungsfunktion  sollten klar getrennt werden.  Beschreiben wir den Zustand einfach durch das „aktuelle“ Zeichen, dann können wir  z. B. das nächste Zeichen des  Klartextes mit diesem xor-verschlüsseln. (Auch das  will geübt sein! Im Programm werden di e Zeichencodes deshalb so verschoben,  dass das ‚A’ der Zahl ‚0’ zugeordnet wird usw. Dadurch wird das Nachvollziehen der  XOR-Verschlüsselung „per H and“ erleichtert.) Der Folgez ustand ergibt sich im einfachsten Fall aus dem gerade verschlü sselten Zeichen. Ein Ausschnitt424 des entstehenden Graphen könnte dann wie folgt aussehen (der beliebig gewählte Anfangszu-stand ist farblich hervorgehoben):                                                                424 Beschränkt man sich zuerst auf nur wenige Eingabezeichen, dann kann der Graph auch vollständig aufgezeichnet werden. Vor allem aber werden die Zeichencodes kurz, so dass die XOR-Verschlüsselung einfach ist. z Å ein frei gewähltes Startzeichen  mit allen Zeichen der zu vers chlüsselnden Zeichenfolge tue ergebnis Å ““  v Å das nächste Zeichen, verschlüsselt mithilfe von z  z Å das zuletzt verschlüsselte Zeichen ergebnis Å ergebnis + v  B, B xor B  A, A xor A D, D xor D  B  C D E A, A xor C B, B xor A  D, D xor A  E, E xor A A  C, C xor A  B, B xor C usw. E, E xor C D, D xor C 4.1 Beispiel 1: Zur Präfiguration der Zustands-Idee    88  Das Verfahren sollte, je nach Kenntnisstand  der Lernenden, entweder teilweise oder  vollständig, gemeinsam oder in  Partnerarbeit in der gewä hlten Sprache programmiert  werden. Danach gibt es sehr viel für die Lernenden selbstständig zu tun:  • Arbeitet die Codierung in allen Fällen ko rrekt? Gibt es Sonderfälle, z. B. dass  bestimmte Zeichenfolgen gar nicht (kaum, zu  einfach, ...) verschlüsselt werden?  • Ist die Codierung umkehrbar? Das En tschlüsselungsverfahren sollte dann  auch realisiert werden. Wettbewerbe im  Ver-/Entschlüsseln zwischen verschiedenen Gruppen sind möglich. (Das  Verfahren ist einfach genug, um  schnell zu Entschlüsseln.)  • Die Überführungsfunktion kann verändert werde. De r Folgezustand könnte  vom alten Zustand und dem nächsten Zeichen abhängen, oder nur vom alten  Zustand, indem eine Zeichenfolge  zirkulär durchlaufen wird425, oder sonstwie.  • Die Ausgabefunktion kann veränder t werden, indem andere Verschlüsselungsmethoden angewandt werden, die auf zwei Zeichen beruhen, auf Verschiebungen, ...  • Es können mehrstufige Verf ahren realisiert werden.  • ...  Die Einführung des Zustandsb egriffs und einiger Formalien akzentuiert die Arbeit  etwas – aber nur leicht – anders als üblich. Sie schafft dabei durch die klare Unterscheidung der einzelnen Aktionen Eingriffs möglichkeiten und so Ansatzpunkte für  eigene Veränderungen, deren Sc hwierigkeitsgrad dem Anfangsunterricht angemessen ist. Sie schafft Freiräume in einem einheit lichen Begriffsfeld un d erleichtert so die  Kommunikation zwischen den Gruppen, die klar benennen können, an welchen  „Schrauben sie gedreht“ haben.  Haben wir als Lerngruppe z. B. eine 11. Klasse, üblicherw eise mit sehr unterschiedlichen Vorkenntnissen und Interessen bei den Un terrichteten, die sich zur Einführung  einige Wochen mit Problemen der Co mputergrafik beschäftigt haben426, wobei elementare Datentypen ( ganze Zahlen , boolesche Größen , ggf. Zeichen ) und die algorithmischen Grundstrukturen Sequenz , Verzweigung  und ggf. Iteration427 benötigt  wurden, dann kann man sich danach z. B. mi t Sicherheitsfragen im Internet beschäftigen („elektronisches Geld“, „Softwarepirate rie“, …), wobei das „Verschlüsseln“ als  Teilthema auftaucht. Da Komponenten ( Buttons , Editierfelder , …) mit ihren Eventhandlern von Anfang an benutzt werden sollten,  kann man sich jetzt völlig auf die  Zeichenkettenverarbeitung konzentrieren, wobei anfangs die Strings den benutzten  Komponenten entnommen und ihnen zum Schl uss wieder übergeben werden. Weil  die Ereignisbehandlungsme thoden als Prozeduren realisiert  sind, kann auch die Zeichenkettenverarbeitung in Un terprogramme verlagert werden428.   Ziel des Unterrichts ist es neben der Einf ührung einiger fachlicher Grundlagen, die  Schülerinnen und Schüler, ausgehend von einem  gelösten Problem, langsam an  selbstständiges Arbeiten zu gewöhnen.                                                    425 Das wäre dann das übliche Verfahren mit „Schlüsselwort“.  426 Das Thema lässt sehr gut Binnendifferenzierung zu.  427 Statt Schleifen hat man aber wahrscheinlich Timer-Komponenten eingesetzt.  428 Damit unterscheiden sich die Lösungen der jetzt hinzukommenden Teilaufgaben der Zeichenkettenmanipulation kaum noch von denen, die z. B. vor 20 Jahren benutzt wurden. 4.1 Beispiel 1: Zur Präfiguration der Zustands-Idee    89  Unter diesen Voraussetzungen benötigen wir eine Unterrichtsstunde, um anhand  eines sehr einfachen Verf ahrens gemeinsam das Grund gerüst eines Verschlüsselungsprogramms zu entwerfen. Die näch sten vier Stunden st ehen für Gruppenarbeiten bereit, in denen die Schü lerinnen und Schüler das Ge rüst verändern und erweitern bzw. durch bessere Verfahren ersetz en. Das ist auf sehr unterschiedlichem Niveau möglich (s. o.), so dass auf die unterschiedlichen Vorkenntnisse eingegangen  werden kann. Die Unterrichtenden sollt en in diesen Stunden anhand von Transitionsgraphen unterschiedliche Ve rschlüsselungsverfahren mit den Kleingruppen entwerfen und diese diskutieren lassen.  Mit diesen – relativ knappen – Informationen lässt sich die Unterrichtseinheit entsprechend den Vorschlägen in Ka pitel 2.5 klassifizieren:    Thema: Kodierungsverfahren  Zeitbedarf: ab 5  WStd.  Voraussetzungen: elementare Datentypen, Zeichenketten, Einund Ausgabe  über Komponenten in Applets, Methoden, ggf. XOR-Verschlüsselung     Die Einheit dient der Verdeutlichung    der kulturellen Bedeutung des Themas zu   5 %.  gesellschaftlicher Auswirkungen des Themas zu 15 %.  rein fachlicher Aspekte                                zu 80 %.       Die folgenden Unterrichtsmethoden erfordern an Unterrichtszeit ca.    Lehrervortrag:      Unterrichtsgespräch: 20 %.  Partnerarbeit:  40 %.  Einzelarbeit:  40 %.  Projektarbeit:    Das Thema verdeutlicht die folgenden fundamentalen Ideen:  1. Algorithmisierung   1.1 Entwurfsparadigmen (Branch and Bound, Backtracking, …)    1.2 Programmierkonzepte (Alternative, Iteration, Rekursion, ...) zu 60 %   1.3 Ablauf (Prozess, Nebenläufigkeit, ...):   1.4 Evaluation (Verifikation, Komplexität, ...):            2. strukturierte Zerlegung   2.1 Modularisierung (Methoden, Hilfsmittel, ...) zu 20 %   2.2 Hierarchisierung (Darstellung, Realisierung, ...)   2.3 Orthogonalisierung (Emulation, ...)           3. Formalisierung   3.1 formale Sprache (Syntax, Semantik, ...)   3.2 Automat (Zustand, Überga ng, Vernetzung, ...)  zu 20%   3.3 Berechenbarkeit (Grenzen, Durchführbarkeit, ...)               Der Java-Quelltext findet sich bei  den Materialien am Ende der Arbeit.   4.2 Beispiel 2: Rechnermodelle    90  4.2  Beispiel 2: Rechnermodelle  Fasst man „Programmiertwerden“ als ei ne Form von „Maschinenlernen“ auf, dann  müssen Maschinen über die Fähigkeit ve rfügen, auf unterschiedliche Situationen  unterschiedlich zu reagieren, also Entscheidungen zwischen Alternativen zu fällen.  Da es Aufgabe von Unterrichtseinheiten über  technische Informatik in ihrer Gesamtheit ist, ein gültiges Maschinenmodell bei den Lernenden ent stehen zu lassen, gehört  m. E. der Übergang von den elementaren Grundschaltungen zu eben dieser Fähigkeit zu den wichtigen Elem enten eines Technikkurses. Da rauf aufbauend kann eines  der üblichen Rechenwerke, das über mindestens zwei unterschiedliche Zustände   verfügt (z. B: Addieren und Subtrahieren)  gesteuert werden. Die Belegung der Steuerleitungen bildet dann ei nen Elementarbefehl. F ügt man mehrere Elementarbefehle  zu einer Sequenz  zusammen und speichert sie geeignet, dann hat man schon die  rudimentäre Form eines Progr amms gefunden. Kann der Wert des erforderlichen  Programmschrittzählers mithilfe der „Entsc heidungsschaltung“ b eeinflusst werden,  dann können wir Alternativen  und Sprünge  und somit Iterationen  programmieren.  Das genügt als Maschinenmodell für ein Grundverständnis programmierbarer Automaten. Wenn man die Baugruppen der Schal tung zu funktionalen Einheiten wie Rechenwerk, Steuerwerk, Speicher, … zusammenfasst, dann hat man ein schönes Beispiel für Modularisierung  und Hierarchisierung  gefunden. Aber auch Erfahrungen  mit der zunehmenden Integration der TTL-I Cs dienen demselben Zweck. Die angegebenen fundamentalen Ideen  treten hier in einem ganz anderen Gewand auf als in  den anderen Kursen. Sie verdeutlichen dam it deren übergreifenden Charakter.  Schülerinnen und Schüler der Sekundarst ufe I mögen den Umgang mit echter Hardware (TTL-ICs, …) – me ist nach anfänglichem Sträuben429 – sehr. Sie stellen der  Schulgemeinschaft mit großem Stolz die ent wickelten „Rechenwerke“  z. B. in Schaukästen vor. Da die Entwicklung von Schal tungen und die Komposition von einfachen  Schaltwerken aus vorhandenen ICs auch vom Anspruch her in diese Altergruppe gehört, sollten zumindest die Anfänge der techni schen Informatik in diesen Bereich  verlegt werden. Nicht zu unterschätzen sind  die Erfahrungen mit echter Technik, die  sonst in der Schule kaum vorkommen.  Beginnen wir mit den Alternat iven. Da sich TTL-ICs in einem Buch schlecht unterbringen lassen, benutze ich stattdessen ein frei verfügbares Simulationsprogramm 430. Reduzieren wir die Fragestellung so we it wie nur möglich, dann lautet die  Aufgabe:   „Gesucht ist eine Schaltung,  die entscheiden kann, ob eine 1-Bit-Zahl kleiner als eine andere ist.“  Das Problem kann leicht  über eine Scha ltwerttabelle  gelöst werden. Wir erhalten z. B. die folgende Schaltung und ihre Gatterdarstellung:    baba ^=<                                                     429 Das Thema könnte ja etwas mit Physik zu tun haben, und die ist leider sehr unbeliebt.  430 Den Digitalsimulator 4.0 von A. Herz  4.2 Beispiel 2: Rechnermodelle    91  Betrachten wir jetzt eine Sequenz von Be fehlen, die durchnumme riert sind, dann  kann nach einem Vergleich dessen Ergebnis  zum nächsten Programmschritt addiert  werden. Schlägt der Vergleich fehl, dann wi rd der nächste Befehl ausgeführt, sonst  der übernächste.431 Folgen auf einen Vergleichsbef ehl zwei Sprungbefehle, dann  stellen die angesprungenen Be fehlssequenzen die gesuc hten Alternativen dar.432   Wir benötigen als Ausgangspunkt ein Rechenwer k, das wenigstens zwei Funktionen  ausführen kann. Ich wähle einen umschal tbaren 3-Bit-Addierer/Subtrahierer.    In diesem ersetzen wir eine Sc halterreihe durch ein Register433, das Zahlen speichern und Zwischenergebnisse aufnehmen kann dann haben wir schon mal einen Akkumulator. Da das hier benutzte Simula tionsprogramm leider in der derzeitigen  Version kein Register enthält, missbrauche  ich einfach das 16k x 8Bit-RAM dafür.  Das ist zwar nicht schön, vereinfacht aber die Schaltung drastisch. Weiterhin führen  wir einen Takt(-Schalter) ein, da der Spei cher einen solchen benötigt, und einen Reset-Schalter, um den Akkumulator bei Be darf zu löschen. Damit haben wir zwei  Steuerleitungen (und den Takt), um die Funktionalität der Schaltung zu beeinflussen.                                                      431 So arbeiteten z. B. die ersten pr ogrammierbaren Taschenrechner von HP.  432 Mit diesem einfachen Verfahren können wir schon alle algorithmischen Verfahren realisieren – wenn auch  nicht besonders elegant.  433 z. B. IC 74194 4.2 Beispiel 2: Rechnermodelle    92    Wollen wir mit der Schaltung eine Rec henaufgabe lösen (deren Ergebnisse allerdings im 3-Bit-Rechenbereich bleiben müssen), dann können wir diese durch eine  Folge von Steuerleitungsbel egungen und die erforderlichen  „Daten“ (Zahlen) „programmieren“. Wählen wir z. B.   3 + 4 – 5 + 1 =  dann brauchen wir das folgende Programm:  Reset S Eingabe Kommentar  0 bel. bel. Akku löschen  1 0 011 3 laden  1 0 100 4 addieren  1 1 101 5 subtrahieren  1 0 001 1 addieren    Wir können die Bitfolge 00000  als „Maschinenprogramm“ 10011 auffassen . Zwischen den 10100 Befehlen folgen „Takte“. 11101     10001 4.2 Beispiel 2: Rechnermodelle    93  Bis zu dieser Ebene ist auch in der Sek. I mühelos vorzudringen. Die Schülerinnen  und Schüler können mit der Schaltung experiment ieren, lernen vergleichend mit Simulationsprogrammen und echter Hardware  umzugehen, können die Schaltung abwandeln  • durch andere Bauteile (hier: „richt ige“ Register benutzen, Anzeigen, …),  • durch andere Steuerleitungen (z. B. um den Akkumulators zu laden),  • durch weitere Register (z. B. al s Speicher für Zwischenergebnisse)  • oder durch Erweiterun g des Zahlenbereichs.  Kurz: Sie machen sowohl auf einer relativ abstrakten wie auf einer konkreten Ebene  Erfahrungen im Umgang mit echt er Technik, lernen abzuschätzen, ob ihnen diese Art  des Vorgehens liegt.                                         4.2 Beispiel 2: Rechnermodelle    94  Betrachten wir das oben abgebi ldete Rechenwerk als ein M odul, in das drei Datenleitungen, zwei Steuerle itungen und eine Taktleitung her einführen, dann können wir  dieses von außen steuern, indem wir die er forderlichen Befehle in einem Speicher  ablegen. Dieser selbst muss natürlich auch  geordnet arbeiten, also „gesteuert“ werden. Dazu benötigen wir einen Binärzähler als Program-Counter , der den aktuellen  Befehl angibt, und eine Möglichkeit, die Pr ogramminhalte einzugeben. Ich realisiere  das hier über geeignete Schalter im unteren Teil des Bildes.     Leider kann unser Binärzähler (im Gegensatz zu vielen „echten“434) keine Werte laden. Deshalb ist in dieser Schaltung nur ein „Sprung zur Adresse 0“ möglich – über  Reset. (Ich habe hier stattdessen einfach die Taktleitung zum Rechenwerk unterbrochen, um einen Stopp zu realisieren.) Tr otzdem tauchen schon di e ersten Elemente  eines echten Prozessors auf. Das System ist – bei einem geeigneten Zähler – leicht zu erweitern. Es können von den Schül erinnen und Schülern Ma schinen erfunden  werden, die natürlich nur immer einige Au sschnitte eines richtigen Befehlssatzes  „verstehen“, trotzdem aber z. B. in der Lage sind, rekursive Programme auszuführen.   Die programmierbaren Sc haltwerke erfordern einiges an analytischem Denken und  sorgfältige Abstimmung der Schaltungsmodule . Sie sind von der Komplexität her in  der Sek. II anzusiedeln, können da aber durchaus auch im Grundkurs entwickelt  werden. Sie liefern ein star k reduziertes, aber im Prinzip richtiges Hardwaremodell  des Von-Neumann-Computers, das für das Verständnis der Abläufe bei Unterprogrammaufrufen und deren Parameterübergabe,  Rekursionen und Referenzen m. E.  unerlässlich ist. Und sie liefern auch in dies er Altersstufe Erfahrungen in technik-orientierter Arbeit.  Haben wir als Lerngruppe z. B. einen Grundkurs der Stufe 13, dann sollte dieser einerseits solide Kenntnisse über Entwurfs techniken und Programmierung besitzen,  andererseits an Gruppenund selb stständige Einzelarbeit gewohnt sein. Weil die  Simulation von TTL-Bauteilen in der Schule eines der be sten Beispiele für den Einsatz von OOP-Techniken ist, kann kursbegleit end ein eigener Hardwaresimulator als  Hausarbeit entwickelt wer den, wobei der im Unterricht neben der echten Hardware  eingesetzte Simulator als Vorlage dien t. Die dabei auftauchende n Probleme lassen  sich sowohl auf einem elementaren Nivea u als auch außerordent lich anspruchsvoll  lösen: Es bietet sich ein weit es Feld für Binnendifferenzierung.  Ziel des Unterrichts ist es neben der  Anwendung fachlicher Grundlagen, bei den  Schülerinnen und Schülern ein valides  Rechnermodell entstehen zu lassen.  Unter diesen Voraussetzungen wird der Entw urf eines Rechnermodells im zweiten  Kursteil liegen, weil anfangs die logischen Grundschaltungen , Rechenschaltungen ,  Speicher  und Rechenwerke  kennen gelernt werden müssen 435. Zusammen mit Teilproblemen der Hardwaresimulation (Anw endung von Listen, OOP-Techniken, …)  braucht das seine Zeit. Wählen wir jetz t den oben skizzierten Weg, über stufenweise  Erweiterungen von einem um schaltbaren Rechenwerk zu  einem programmierbaren  System zu kommen, dann erfor dern die einzelnen Schritte  von Stufe zu Stufe nur  relativ wenig Zeit für gemeinsame Unterri chtsgespräche, die bei Bedarf eingestreut  werden können. Der überwiegende Te il der Unterrichtszeit wird für Einzelund Gruppenarbeit sowie intensive Einzelgespräc he benötigt, in denen auftauchende Probleme geklärt werden insbesondere, wenn mit echter Hardware gearbeitet wird.                                                    434 z. B. IC 74191  435 Auf entsprechende Vorkenntnisse aus der Sek. I wird man (noch) kaum zurückgreifen können. 4.2 Beispiel 2: Rechnermodelle    95  Mit diesen Informationen lä sst sich die Unterrichts einheit entsprechend den Vorschlägen in Kapitel 2.5 klassifizieren:   Thema: Rechnermodelle  Zeitbedarf: ab 10  WStd. (je nach Ziel)  Voraussetzungen: logische Grundschaltungen, einfache Rechenschaltungen,  einfache Schaltwerke (Zähler, Speicher, …)     Die Einheit dient der Verdeutlichung    der kulturellen Bedeutung des Themas zu 10 %  gesellschaftlicher Auswirkungen des Themas zu 20 %  rein fachlicher Aspekte                                zu 70 %       Die folgenden Unterrichtsmethoden erfordern an Unterrichtszeit ca.    Lehrervortrag:      Unterrichtsgespräch: 20 %  Partnerarbeit:  40 %  Einzelarbeit:    Projektarbeit:  40 %    Das Thema verdeutlicht die folgenden fundamentalen Ideen:  1. Algorithmisierung   1.1 Entwurfsparadigmen (Branch and Bound, Backtracking, …)    1.2 Programmierkonzepte (Alternative, Iteration, Rekursion, ...) zu 20 %   1.3 Ablauf (Prozess, Nebenläufigkeit, ...):   1.4 Evaluation (Verifikation, Komplexität, ...):            2. strukturierte Zerlegung   2.1 Modularisierung (Methoden, Hilfsmittel, ...) zu 20 %   2.2 Hierarchisierung (Darstellung, Realisierung, ...)  zu 20 %   2.3 Orthogonalisierung (Emulation, ...)           3. Formalisierung   3.1 formale Sprache (Syntax, Semantik, ...)   3.2 Automat (Zustand, Überga ng, Vernetzung, ...)  zu 20%   3.3 Berechenbarkeit (Grenzen, Du rchführbarkeit, ...)  zu 20 %                4.3 Beispiel 3: Gekoppelte Automaten    96  4.3  Beispiel 3: Gekoppelte Automaten  Das überraschende Verhalten ge koppelter Systeme kann mit zellulären Automaten   sehr gut demonstriert werden436. Einerseits nutzt man hier ziemlich einfache endliche  Automaten, so dass die Benutzung der entsprechenden Beschreibungsmittel geübt werden kann, andererseits sind di e Resultate so vielfältig, dass die Arbeit trotz dieser  Einfachheit alles andere als langweilig ist. Man kann leicht Systeme modellieren,  deren Verhalten sich kaum aus dem Simulationsprogramm selbst erschließen lässt.  Die Anordnung der Element arautomaten in Gittern liefert ein exzellentes Beispiel für  den Umgang mit zweidimensionale n Feldern. Verteilt man die Funktionalität auf geeignete Objektklassen, dann kann die Dars tellung der Ergebnisse standardisiert werden, so dass Experimente an den Auto maten ohne großen Programmieraufwand zu  realisieren sind. Die Unterrichtseinheit is t je nach der Fortschrittlichkeit der eingesetzten Programmiertechniken im Unterricht der Sek. II anz usetzen. Der erforderliche  Zeitbedarf wird wesentlich dadurch bestimm t, ob – und wenn, welche – Teile des  Simulationsprogramms vo rgegeben werden. In diesem Beispiel benutze ich Delphi ,  weil ich diese Sprache im Unte rricht für bestens geeignet halte.  Wir wollen einen zellulären Au tomaten bauen, der auf dem Gefangenendilemma  aufbaut, aber etwas abgewandelt auf den Handel im Internet . Das Verhalten der Handelspartner wird durch endliche Automaten simuliert, die auf einem in beiden Dimensionen abgeschlossenen Gitter sitzen und innerhalb einer Moore-Nachbarschaft  Handel mit den Partnern treiben. Sie tauschen – wie im Internet üblich – Waren gegen Geld 437. Dabei gibt es unterschiedlic he Arten von Geschäftpartnern:  • Naive  kooperieren immer, liefern  also den korrekten Gegenwert.  • Betrüger  kooperieren nie.  • Gewitzte  kooperieren anfangs und reagieren danach so, wie  der Partner beim  letzten Mal.  Auch hier ist die Idee des Zustands  und seiner Wechsel zentra l. Des Weiteren spielt  aber auch die Idee der Berechenbarkeit  in ihrem prognostischen Aspekt eine Rolle,  da sich die Frage stellt, ob Voraussagen ü ber das Verhalten des Systems möglich  sind, ohne es vollständig zu realisieren, also wirklich „laufen zu lassen“. Die Implementierung über Objekte liefert Beispiele für strukturierte Zerlegungen  und einfache Programmierkonzepte .  Wir können dieses Verhalten der Handels partner leicht durch  Zustandsdiagramme  beschreiben:   K: „kooperieren“ B: „betrügen“   Ordnen wir solche Automaten in einem Gitter an, verteilen sie zufällig und färben sie  entsprechend ihrem Zustand (grün als „Naive r“, rot als „Betrüger“ oder gelb als „Gewitzter“) ein, dann erhalten wir ei n Bild ähnlich dem folgenden:                                                    436 Zahlreiche gut umsetzbare Beispiele finden sich z. B. in [Ger95]  437 Man kann sich das wie in einer Auktionsbörse organisiert vorstellen, z. B. in ebay. K,K v B,K  K  Der „Naive“ K,B v B,B  B  Der „Betrüger“ B,KK,K  K  Der „Gewitzte“ K,B B,B  B 4.3 Beispiel 3: Gekoppelte Automaten    97    Der weitere Ablauf ist einfach:  • Zuerst handeln alle Partner einmal  mit ihren Nachbarn aus der MooreNachbarschaft. Dabei ist einiges an Orient ierung im Gitter (als Array) vonnöten: es wechselt die „B lickrichtung“ (Stellung in der Nachbarschaft), und an  den Rändern muss man auch überlegen.  • Danach bewerten alle Partner den Erfolg ihrer Nachbarn.   • Als Opportunisten übernehm en sie daraufhin den Zust and des erfolgreichsten  Nachbarn oder behalten ihr en Zustand bei, wenn sie selbst besser waren.  Im Beispiel (s. Materialien) wird eine Auto matenklasse in einer eigenen Unit vereinbart und darauf aufbauend eine „Welt“ (auch in einer Unit), die mit einem Gitter aus  Automaten hantiert. Beides wird von der Programmoberfläche des zellulären Automaten gesteuert. Die Abläufe zwischen dies en Klassen sind zwar nicht ganz trivial  (besonders bei der grafischen Darstellung in  der Windows-Welt), dafür aber nur einmal zu lösen. Danach können die Automaten in  ihrer Unit bzw. die „Welt“ in der an4.3 Beispiel 3: Gekoppelte Automaten    98  deren getrennt und ohne direkte Beeinfluss ung manipuliert werden. Man kann also  „schön einfach“ experimentieren.  In den ersten Generationen setzen sich meist „die Bösen“ durch. Doch danach bilden  sich Cluster aus „Guten“ bzw. „Gewit zten“, und dann beginnt ei ne wilde „Schlacht“.     Zwar werden die „Guten“ hart von den „B etrügern“ bedrängt. Si e halten sich aber  ganz gut in Gruppen. Die „Gewitzten“ setz en sich gegenüber den „Betrügern“ – je  nach Konfiguration – meist durch  und kooperieren mit den „Guten“.    Am Ende siegen meist die „Gewit zten“ – aber eben nicht immer.  Das Beispiel ist als Vorber eitung auf die Automatentheor ie eher schlicht. Es bietet  aber eine extreme Bandbreite von sowohl programmiertechnischen wie inhaltlichen  Variationen und legt sozialwissenschaftliche  bzw. naturwissenschaftliche Interpretationen nahe. In dieser Beziehung wir d der Modellcharakter besonders deutlich.  Bleiben wir zuerst bei den Variationen:  4.3 Beispiel 3: Gekoppelte Automaten    99  • Das Verhalten der „Partne r“ kann leicht durch veränd erte Strategien ergänzt  werden. „Wettbewerbe“ zwischen versch iedenen Strategien werden möglich,  wobei Statistiken geführt werden müssen, da der Einzelfall nicht viel über das  Gesamtverhalten aussagt. Schon hier ist systematisches Arbeiten gefragt.  • Die „Welt“ kann verändert werden dur ch veränderte Nachbarschaften (vonNeumann-Nachbarschaft, andere Reichweiten,  …), andere Abläufe, ... Statt  des zweidimensionalen Gitters kann di e zeitliche Entwi cklung linearer Automaten in der üblichen Weise dargestellt  werden, wobei chaotische Vorgänge  auftreten438. Bei beidem können sowohl die Art der Automaten wie das Steuerprogramm völlig ignoriert werden.  • Die Gewichtungsfaktoren, die den Gewinn bei unterschiedlichen Vorgängen  bestimmen, sind veränderbar.439 Auch hier sind die anderen Größen irrelevant.  • Das Steuerprogramm kann verbessert werden, z. B. um  während des Programmlaufs die unterschiedlic hen Faktoren zu verändern.440 Dafür sind „Oberflächenprogrammierer“ gefragt.  • Die Eigenschaften der Gitterautomat en sollten auch per Mausklick gesetzt  werden können (einige „Gewitzt e“ in einer Welt aus „Bösen“, …), um das Verhalten bestimmter Konfiguratione n gezielt untersuchen zu können.  Es kann aber auch versucht werden, di e beobachteten Vorgänge systematisch zu  bewerten :  • Zur Bewertung der Systeme sind global e Größen geeignet („Bruttosozialprodukt“ als Summe aller „Handelspunkte“,  …). Der Einfluss der Parameter auf  das Erreichen und die Art des ggf. erre ichten Endzustands kann abgeschätzt  werden. Lineare Automaten lassen sich entsprechend klassifizieren.441  • Es können Beschränkungen eingeführt werden („Anzahl der handelbaren Güter“, „Geldmenge“, …), und die Verteilu ng der Größen auf die Gruppen sowie  deren zeitliche Entwicklung ist darstellbar.  Die Beobachtung der manchmal überraschenden Abläufe liefert Ansatzpunkte zur  Diskussion ethischer Fragen. Auch wenn das Be ispiel natürlich nicht direkt auf gesellschaftliche Systeme übertragbar ist, so haben wir doch ein für die meisten neuartiges Argument für kooperatives, soziales  Verhalten gefunden, das nicht aus transzendenten oder philosophischen  Überlegungen gewonnen wir d, sondern aus Effizienzbetrachtungen. Es steht darin in klar em Gegensatz zur Egozentrik des Primitivdarwinismus, der oft die öffentliche Diskuss ion in dieser Hinsicht beherrscht. Unterrichtseinheiten dieser Art steuern damit einem die „Elle nbogengesellschaft“ fördernden und fordernden Biologismus entgegen.  Unsere zellulären Automaten sollten den H andel im Internet simulieren. Was erhaltene Modell ist aber auch ganz  anders interpretierbar: Be trachten wir den „Handel“  als Energieaustausch benac hbarter Teilchen, dann kommen wir recht schnell zum  Ising-Modell  für Spingitter442. Die globalen Größen „T emperatur“ und „Magnetisierung“ liefern Bewertungsmaßstäbe zur Beurte ilung des Systems. Relativ kleine Än                                                  438 [Schr91] ab S. 388, [Man91] S. 436  439 Im vorgestellten Programm wurde dafür etwas „Zufall“ eingebaut.  440 Das ist auch bitter nötig, da die Instantiierung so vieler Objekte einige Zeit dauert.  441 z. B. [Ger95] S. 59 nach Stephen Wolfram  442 [Arg94] S. 405 ff. 4.3 Beispiel 3: Gekoppelte Automaten    100  derungen führen auf Strukturbil dungsprozesse und/oder Mode lle für biologische und  chemische Systeme443.   Die Interpretation desselben Modells in un terschiedlichem Kontext, die (teilweise)  Unvorhersagbarkeit der Ergebnisse, das dynam ische Verhalten und sein Bezug zu  nichtlinearen Systemen liefe rt Erfahrungen mit Modellen, Simulationen, deren Mächtigkeit und deren Grenzen – und das fast oh ne Mathematik. Die Visualisierungsmöglichkeiten der Computer machen so einer seits der Schule völlig neue Gebiete zugänglich und verdeutlichen and ererseits den von der Ma thematik unterschiedenen  Charakter der Informatik als „Prognosesyst em“. Nebenbei ist das Thema eine unerschöpfliche Quelle von „Facharbeit en“ der Schülerin nen und Schüler.  Haben wir als Lerngruppe z.  B. den ersten Leistungskurs der Stufe 12 etwa zur Mitte  des Semesters, dann sollte di eser eigentlich einen soliden Anfangsunterricht in der  Klasse 11 durchlaufen haben. Leider ist der zeit aber zumindest bei schulübergreifenden Kursen davon auszugehen, dass die Vork enntnisse kaum vergleichbar sind.  Die Lernenden werden deshalb in diesem er sten Kurs die komprimierte „Nachlieferung“ fehlender Inhalte444 noch kaum „verdaut“ haben. Sie sollten aber mit der  elementaren Algorithmik , primitiven Datentypen  und einfacher Computergrafik  inzwischen halbwegs vertraut sein. Beginnen wir danach eine Unterrichtseinheit über „Visualisierung großer Datenmengen“ , dann steht uns einerseits das weite Feld der  Falschfarbendarstellungen von astronomischen445, geografischen446 oder medizinischen447 Daten mit ihren Interpretationsmöglic hkeiten offen, andererseits bilden Gitterautomaten ein interessantes Arbeits gebiet, das hier betrachtet wird.   Repräsentieren wir die Teilautomaten dur ch Objekte, dann können die entsprechenden Klassen aus grafischen Komponenten der GUI abgeleitet werden448. Wir haben  damit neben einem element aren Zugang zu endlichen Au tomaten auch einen einfachen Einstieg in OOP-Methoden gefunden. In  der angegebenen Form erfordert die  Nutzung der Transitionsgraphen kaum Zeit: Bei einer Diskussion unterschiedlicher  Strategien, z. B. der des „Langmütigen“ , wird diese Notationsform nebenbei eingeführt und gefestigt. Erheblich mehr Zeit benötigt eine eingehende Analyse der Abläufe, die daraus folgende Verteilung der Informationen und ihre Repräsentation.  Wird hier nicht sorgfältig gearbeitet, dann kann es später erhebliche Probleme geben. Sind die Alternativen und deren K onsequenzen betrachtet und die wesentlichen  Entscheidungen getroffen, dann werden di e Teilprobleme einzeln angegangen:  • Eine Automatenklasse mit den erfor derlichen Methoden wird vereinbart, implementiert und an einzelnen Objekten getestet.  • Ein Gitter solcher Automaten wird als Array definiert.  • Die Aktionen im Gi tter werden realisiert.  Ziel des Unterrichts ist es, bei der Implem entierung eines relativ einfachen Modells  elementare informatische Techniken kennen zu  lernen, sowie sich mit Simulationen  zu beschäftigen, deren Ergebnisse kaum pr ognostizierbar sind und die zu Diskussionen anregen.                                                    443 [Cra88]  444 die man ganz gut mit einer Einheit über Programmveri fikation „anreichern“ kann, damit nicht in Vergessenheit gerät, dass es sich um einen Leistungskurs handelt.  445 z. B. aus dem Projekt „Hands-On Universe“  446 z. B. Satellitenbilder  447 z. B. mit NMR-Daten aus der Tomografie  448 Das ist zwar nicht effizien t, aber sehr lehrreich. 4.3 Beispiel 3: Gekoppelte Automaten    101  Unter diesen Voraussetzungen wird eine  anfängliche eingehende Diskussion der  Problematik im Unterrichts gespräch unbedingt erforderlich sein. Aus dieser sollten  sich dann die zu lö senden Teilprobleme erg eben, und aus diesen  folgen die erforderlichen Programmiertechniken. Die Vereinbar ung einer Tochterklasse z. B. von GUIPanels, die mit Automateneigenschaften au sgestattet wird, soll te ebenfalls gemeinsam durchgeführt werden, wobei der Neuigkei tswert nicht bei den in Methoden auftretenden Algorithmen, sondern in den Zugriffs techniken liegt. So etwas lässt sich  schnell abhandeln, die not wendigen Erfahrungen werden bei der Anwendung gewonnen. Sind zweidimensionale Felder schon bekannt, dann können die Lernenden  das Zusammenspiel der Automaten selbst r ealisieren. Die dabei möglichen Fehler  sollten erkannt und korrigiert werden. Als H ilfe wird ggf. das zufällige Erzeugen einer  Anfangsbelegung des Feldes vorgegeben. Danach wird das Modell wie beschrieben  variiert und erprobt.  Mit diesen Informationen lässt sich die Unterrichtseinheit klassifizieren:    Thema: zelluläre Automaten  Zeitbedarf: ab 10  WStd. (je nach Ziel)  Voraussetzungen: Arrays, elementare OOP, einfache grafische Darstellungen    Die Einheit dient der Verdeutlichung    der kulturellen Bedeutung des Themas zu 10 %  gesellschaftlicher Auswirkungen des Themas zu 50 %  rein fachlicher Aspekte                                zu 40 %      Die folgenden Unterrichtsmethoden erfordern an Unterrichtszeit ca.    Lehrervortrag:   10 %   Unterrichtsgespräch: 30 %  Partnerarbeit:    Einzelarbeit:    Projektarbeit:  60 %    Das Thema verdeutlicht die folgenden fundamentalen Ideen:  1. Algorithmisierung   1.1 Entwurfsparadigmen (Branch and Bound, Backtracking, …)    1.2 Programmierkonzepte (Alternative, Iteration, Rekursion, ...) zu 10 %   1.3 Ablauf (Prozess, Nebenläufigkeit, ...):   1.4 Evaluation (Verifikation, Komplexität, ...):            2. strukturierte Zerlegung   2.1 Modularisierung (Methoden, Hilfsmittel, ...) zu 20 %   2.2 Hierarchisierung (Darstellung, Realisierung, ...)  zu 20 %   2.3 Orthogonalisierung (Emulation, ...)           3. Formalisierung   3.1 formale Sprache (Syntax, Semantik, ...)   3.2 Automat (Zustand, Überga ng, Vernetzung, ...)  zu 40%   3.3 Berechenbarkeit (Grenzen, Du rchführbarkeit, ...)  zu 10 %               Der Delphi-Quelltext findet sich bei den Materialien am Ende der Arbeit. 4.4 Beispiel 3: Eine Sprache für LEGO-Roboter    102  4.4  Beispiel 4: Eine Sprache für LEGO-Roboter  LEGO-Mindstorms-Roboter sind für Unterricht szwecke in jeder Altersstufe hervorragend geeignet. Sie betonen als „Spielzeuge“  die spielerischen Elemente des Unterrichts, können entweder über eine Active X-Komponente in Wi ndows-basierte Programmiersprachen oder mithilfe besonderer Sprachen449, die im Internet frei verfügbar sind, eingebunden und direkt  gesteuert werden oder al s Geräte mit eingebauter  eigener Programmiersprache als Ziel von Kompilierungsprozessen dienen.   Steuert man die Roboter direkt450, dann kann man ihnen über eine geeignete Programmoberfläche einzelne Befehle oder Befehlsfol gen schicken und die Ergebnisse direkt beobachten. Die Sensoren des Geräts können abgefragt, ausgewertet und wiederum zur Steuerung  benutzt werden. Wohlgemerk t: nicht nur in den grafischen LEGO-Programmsystemen, sondern genauso unter Java, C++, C# oder Delphi. In diesem Kontext veranschaulichen die Geräte die Idee des Automaten   besonders gut. Verfügt der Ro boter z. B. über einen  Stift, der angehoben und gesenkt werden kann, dann ist  auch sein Zustand  direkt beobachtbar. Valentin Braitenberg hat in seinem inte ressanten und sehr witzigen  Buch 451 eine Fülle von „kybernetischen Wesen“ beschrieben, deren erste Versionen sich di rekt als Roboter nachbauen lassen.  In diesem Beispiel452 sollen die Roboter als Ziel von Übersetzungsprozessen einer  formalen Sprache dienen, die definiert, geparst und in die „Robotersprache“ übersetzt wird. Das Beispiel ist deshalb als Pr ojektphase in einem Kurs über theoretische  Informatik anzusiedeln und er fordert einige Vorkenntnisse und – je nach Komplexität  der definierten Sprache – auch einiges an Ze it. Ziel ist es also, eine erweiterbare  Turtlegrafik für LEGO-Mindstorms-Roboter453 zu schreiben, die  • die spielerischen Elemente der R oboter für den Unterricht nutzt,  • die Grundelemente einer Co mputersprache am konkreten Beispiel einführt:  Editor, Parser und (rekursive r) Interpreter werden „gebaut“,  • die Möglichkeiten der OOP ausnutzt und  • Testmöglichkeiten am Bildschirm vorsieht.  Unter einer Turtle  versteht man ein computergesteuertes Modell, das ähnlich wie eine Schildkröte aussieht, einen Stift trägt und sich bewegen kann. Je nach Aus-bau „versteht“ das Modell unterschiedliche Befehls-sätze, die seine Bewegunge n steuern. Bei seinen Bewegungen hinterlässt die Turt le bedingt durch den Stift  eine „Spur“, die eine Zeichnung erzeugt.                                                     449 z. B. mit NQC  450 Was etwas langsam und fehlerträchtig ist, aber den Schülerinnen und Schüler besonders dann viel Vergnügen  macht, wenn sich mehrere Geräte im Raum befinden.  451 [Bra93]  452 Das Beispiel stammt aus einem N21-Projekt über Roboter und robotische Teleskope, das ich für diese niedersächsische Initiative entwickelt habe.  453 Grundlage dieses Beispiels sind [Mod92b], [Mod98] und [Mod00]  4.4 Beispiel 3: Eine Sprache für LEGO-Roboter    103  Eine funktionsfähige Turtle zu bauen ist mechanisch nicht gerade einfach.   • Entscheidend ist die Posi tion des Stifts möglichs t im Drehpunkt des Modells  (was beim abgebildeten Primitivm odell nicht der Fall ist),   • eine funktionsfähige Einrichtung zum H eben und Senken des Stifts (fehlt beim  Modell, wird aber durch „Kippen“ bei Vo rwärtsbewegungen teilweise realisiert),  • eine genaue Winkelteilung, die stark von der Mechanik und dem Untergrund  abhängt. Entsprechend muss das M odell oft „geeicht“ werden.  Um einen Eindruck von den Möglichkeiten des Systems zu erhalten folgt hier ein  Screenshot454 von der ScreenTurtle , die zum Testen der Programme dient:      Das entsprechende Programm lautet:  W 20 (        W 36 (              W 4 (                   V 100 R 90                  )              R 10             )        V 120 R17       )  $                                                        454 Grundlage dieses Beispiels sind [Mod92b], [Mod98] und [Mod00] Geschachtelte Schleifen. Innen wird ein Rechteck  gezeichnet. 4.4 Beispiel 3: Eine Sprache für LEGO-Roboter    104  Zur Realisierung ist es erforderlich  • ein Menüsystem mit Delphi zusammenzustellen, das eine einfache Dateiverwaltung für  Texte realisiert (editieren, laden, speichern),  • die geschriebenen Programmtexte auf syntaktische Korrektheit zu überprüfen und ggf. Feh-ler anzuzeigen und  • die „übersetzten“ Programme richtig zu interpretieren.  Der erste Punkt lässt sich  leicht mithilfe vorhandener  Delphi-Komponenten inner halb eines Menü-Systems  realisieren. Interessanter ist schon die Programmier-sprache. Wir müssen Programmtexte schreiben, übersetzen und ausführen können. Dazu benutzen  wir das zweite Untermenü. Das dritte dient zur Um-schaltung zwischen der „e chten“ LEGO-Turtle und  dem Bildschirmmodell u. Ä.   Um die Programmtexte übersetzen zu könn en, benötigen wir eine Sprachdefinition,  die wir über Syntaxdiagramme geben:                             Programm :  „LEGO-Logo  für Arme“  Befehl : Zeichenbefehl  Kontrollbefehl  Zeichenbefehl : Zahl V  Zahl R  Zahl L  Kontrollbefehl :  Zahl :  0 1 2 8 9 ... Vorwärts-,  Rechtsund  Links-Befehle  Zahl W Befehl ( ) Befehl $  4.4 Beispiel 3: Eine Sprache für LEGO-Roboter    105  Da die Programme innerhalb der Schleifen geschachtelt werden können, ist ein Kellerautomat zur Analyse der Klammerstruktur erforderlich. Die restlichen syntaktischen  Konstrukte können von einem einfachen end lichen Automaten analysiert werden, der  ggf. Fehlermeldungen produziert. Der endlic he Automat wird durch seinen Transitionsgraphen beschreiben. (Die etwas eigenwillig notierten Ke llerbefehle sind fett hervorgehoben.)   Eingabealphabet:  IE = {V,R,L,W ,0,1,2,3,4,5,6 ,7,8,9,(,),$}  Zustandsmenge: IS = {s0, s1, s2 , s3, s4, s5, s6, s7, se, sf}  Überführungsfunktion des  Kellerautomaten:     [(,s0,#] Æ[s0,(#]     [(,s0,(] Æ[s0,((]     [),s0,(] Æ[s0, ]     [ ,s0,#] Æ[se, ]                          Parser für „LEGO-Logo für Arme“:   V v R v L  0 v 1 v...v 9   V v R v L ( ^ Keller.push(“ (“  )  s0 S1 s7 0 v 1 v...v 9   se  s2 $  W W s3 0 v 1 v...v 9   0 v 1 v...v 9   s4  ( ^ Keller.pull=“)“Keller.erstes=“)"   ( ^ Keller.pull=“)“Keller.erstes=“#"W  S5 s6 V v R v L  0 v 1 v...v 9  0 v 1 v...v 9   V v R v LW$  sf  alle nicht angegebenen Übergänge führen in den  Fehlerzustand 4.4 Beispiel 3: Eine Sprache für LEGO-Roboter    106  Fehlermeldungen des entsprechenden Pa rsers sehen dann z. B. so aus:              Für die Interpretation des Programms wähl en wir eine „reduzierte“ Version des Quelltextes, in der überflüssige Zeichen (Leerzeichen, Zeilenwe chsel, ...) weggelassen  worden sind. Als Ziele der Befehle st ehen eine Bildschirmturtle und eine LEGOTurtle zur Verfügung, die über die gleich en Befehlssätze („Methoden“) verfügen. Mit  diesen Methoden kann der Interpreter impl ementiert werden. Damit geschachtelte  Schleifen abgearbeitet werden können, interpretiert der Interpreter (Befehls-)Zeichenketten. Trifft er auf eine Schleife, dann sucht er sich den Schleifenkörper zusammen (der weitere Schleife n enthalten kann) und ruft sich selbst mit diesen Befehlen wieder auf. Der Interpre ter arbeitet also rekursiv.  Für den korrekten Ablauf des Programms benöt igt man weitere Me thoden, z. B. um  den Inhalt von Memofeldern zu kopieren, Anf angswerte zu setzen und vor allem, um  die LEGO-Turtle zu „eichen“. Die von der Tu rtle zurückgelegt Strecke wird über eine  Wartezeit definiert. Sie hängt aber natürlich auch von der Bauart der Turtle und dem  Untergrund ab. Bei Vorw ärtsbewegungen ändert sich nur  die Größe der Figuren  durch diese Werte. Bei Drehungen hängt der Drehwinkel und damit die Form der  Zeichnungen stark von ihnen ab.  Ich lasse meistens ein Rechteck zeichnen und prüfe, ob die Turtle danach in die gleiche Ric htung zeigt. Damit kann man ganz gut die  Zeit für eine volle Umdrehung korrigieren.  Den entsprechenden Faktor für Vorwärtsbewegungen sollte man so einstellen, dass die LEGO-Turtle-Figuren zur  Schrittweite der Bildschirmturtle passen.  Der Umgang mit verschiede nen Programmiersprachen gehört zumindest zur Informatik-Prüfungsfachkursfolge.  Zu fragen ist dann natürlich, wie diese verschiedenen  Sprachen „erfahren“ werden so llen. Eine der Möglichkeite n besteht m. E. darin,  selbst eine solche – natürlich stark vereinfachte – Sprache zu schreiben 455. Der  Charme dieses Vorgehens liegt darin, dass in der bekannten Umgebung weiter gearbeitet werden kann und sich all die bekan nten Teilprobleme des Theoriekurses der  Schulinformatik zwanglos ergeben – aus der Anwendung. Es werden also zwei Fliegen mit einer Klappe geschlagen. Damit gewin nt man Zeit – und die brauchen wir  dringend für die Projektphasen.   Sprachdefinitionen lassen si ch auf sehr unterschiedlic hem Niveau umsetzen. Sie  dienen deshalb auch zur Binnendifferenzier ung in den Kursen, ermöglichen gemeinsames Arbeiten am gleichen Thema bei s ehr unterschiedlichem Zeiteinsatz. Das                                                    455 Das funktioniert auch ganz gut mit reduzierten deklar ativen Sprachen wie „Minip rolog“ oder „MiniSQL“.  4.4 Beispiel 3: Eine Sprache für LEGO-Roboter    107  Editieren und Ändern von Pr ogrammen, das Speichern und Lad en u. Ä. lässt sich mit  den integrierten grafischen Programmentwi cklungssystemen durch wenige Mausklicks und einige Programmzeilen umsetz en. Diese intellektuell nicht gerade herausfordernde Funktionalität hat also inzwischen den g ebührenden – geringen – Stellenwert erhalten. In ähnlichen Zeit räumen können deshalb wesentlich anspruchsvollere Projekte in Angriff geno mmen werden als früher, ohne auf eine Implementierung der Ideen zu verz ichten. Der Informatikunterri cht hat deshalb m. E. mit  den neuen Möglichkeiten an Wert gewonnen.  Haben wir als Lerngruppe z. B.  den Grundkurs der Stufe 13 im zweiten Halbjahr,  dann stehen wir kurz vor dem Abitur, sollten also bei Gelegenheit bekannte Inhalte  wiederholen, aber auf neue nicht verzichten. Folglich bietet si ch eine längere Projektphase an, weil bei etwas umfangreic heren Vorhaben unterschi edliche Techniken  benutzt werden, wobei sich eine Wiederholung älterer Themen automatisch ergibt.  Haben wir bei der technischen Informati k im vorhergehenden Kurs endliche Automaten benutzt, dann müssen in diesem Kurs noch die Themen erkennende Automaten, zusammen mit Sprachdefinitionen, Parsern, …sowie ggf. Kellerautomaten  behandelt werden, wobei z. B. die schon bekannten Stapel und Listen wieder auftauchen. Danach kann unser LEGO-Projekt starten.  Arbeiten wir zuerst mit einer Screen-Turt le (also auf dem Bildschirm), dann können  wir uns ganz auf die Definition und das Parsen der entsprechenden Sprachkonstrukte konzentrieren. Die Im plementierung der Turtle-B efehle sollte den Schülerinnen und Schülern dieser Stufe ke ine Schwierigkeiten mehr bereiten. Nach Abschluss  dieser Phase liegen die Sprache und die er forderlichen Turtle-Methoden fest. In einem zweiten Schritt kann jetzt die LE GO-Turtle gebaut und über einfach zusammengeklickte Oberflächen gesteuert und getestet we rden (s. o.). Es bleibt allein das  „handwerkliche“ Problem o ffen, die Screen-Turtle -Methoden auch für die LEGOTurtle zu implementieren.  Verzichten wir auf geschachtelte Schleif en, dann kann der Parser drastisch vereinfacht werden. Berücksichtigen wir die Zu stände der LEGO-Sensoren (Druckschalter,  Lichtsensoren, …), dann können wir zusätz lich sinnvoll Alternativen oder weitere  Schleifenarten in die Sprache einführen, z. B.:   IF (Sensor1=0) (R180 V30 R210) Es bestehen also genügend Mög lichkeiten, das Projekt so wohl einfacher (und damit  kürzer) als auch umfangreicher zu halten oder es über untersch iedliche Teilgruppenaufgaben anders zu strukturieren. Vor alle m aber gibt es mehrere Zeitpunkte, an denen das Projekt ggf. auch sinnvoll, also ohn e Frustrationen zu hinterlassen, abgebrochen werden kann.  Ziel des Unterrichts ist es, die beim Entwurf und der Implementierung von Programmiersprachen auftauchenden Probleme zu diskutieren und durch Anwendung von  Methoden der theoretischen Informatik in einem  einfachen Fall zu lösen. Die dabei  benötigten Datenstrukturen er fordern nebenbei eine effizi ente Wiederhol ung vorheriger Kursinhalte.  Unter diesen Voraussetzungen wird zuerst eine eingehende Disku ssion der Problematik im Unterrichtsgespräch erforderlic h sein, wobei die Konsequenzen unterschiedlicher Syntaxen gegene inander abgewogen werden. Die Implementierung des  Parsers sollte zu diesem Zeitpunkt kein ernstes Problem mehr sein. Schwieriger ist  die Interpretation der Sprachkonstrukte, also  die Übersetzung der selbst definierten  Sprache in Sprachkonstrukte des Roboters.  Wählen wir hierfür einen rekursiven In-4.4 Beispiel 3: Eine Sprache für LEGO-Roboter    108  terpreter, dann reduziert sich das Problem  weitgehend auf das Erkennen der richtigen Klammerstruktur, und so etwa s ist ggf. mit Hilfen gut machbar.  Das Schreiben einer Turtlegrafik für den Bi ldschirm stellt keine besonderen Anforderungen und kann parallel z. B.  von einer Teilgruppe erledi gt werden – wenn so ein  System nicht schon vorhanden ist. Der Bau des  Roboters ist ein gesondertes Problem. Man kann auf vorhanden e Baupläne zurückgreifen, die Aufgabe ebenfalls einer  Teilgruppe überlassen oder ein Mi nimalmodell wählen, wie es sich auf der Abbildung  in diesem Kapitel findet. Die Übersetzung v on Turtlebefehlen in die Sprache des Roboters erfordert dann wiederum Hilfen der oder des Unterrichtenden.  Die Unterrichtseinheit wird wie folgt klassifiziert:  Thema: Die LEGO-Turtle  Zeitbedarf: ab 15 WStd.  Voraussetzungen: zwei Informatikkurse in cl. Datenstrukturen, erkennende endliche Automaten, ggf. Kellerautomaten    Die Einheit dient der Verdeutlichung    der kulturellen Bedeutung des Themas   gesellschaftlicher Auswirkungen des Themas zu 10 %  rein fachlicher Aspekte                                zu 90 %     Die folgenden Unterrichtsmethoden erfordern an Unterrichtszeit ca.    Lehrervortrag:   10 %   Unterrichtsgespräch: 20 %  Partnerarbeit:    Einzelarbeit:    Projektarbeit:  70 %    Das Thema verdeutlicht die folgenden fundamentalen Ideen:  1. Algorithmisierung   1.1 Entwurfsparadigmen (Branch and Bound, Backtracking, …)    1.2 Programmierkonzepte (Alternative, Iteration, Rekursion, ...) zu 20 %   1.3 Ablauf (Prozess, Nebenläufigkeit, ...):   1.4 Evaluation (Verifikation, Komplexität, ...):            2. strukturierte Zerlegung   2.1 Modularisierung (Methoden, Hilfsmittel, ...) zu 10 %   2.2 Hierarchisierung (Darstellung, Realisierung, ...)  zu 10 %   2.3 Orthogonalisierung (Emulation, ...)           3. Formalisierung   3.1 formale Sprache (Syntax, Semantik, ...)   3.2 Automat (Zustand, Überga ng, Vernetzung, ...)  zu 40%   3.3 Berechenbarkeit (Grenzen, Du rchführbarkeit, ...)  zu 20 %               Die Delphi-Quelltexte finden sich bei  den Materialien am Ende der Arbeit.    Anhang    109  Anhang: Einige Ergebnisse zweier Umfragen  Zu Beginn des Schuljahres 2001/02 wurden  an meiner Schule insgesamt 95 Fragebögen von Schülerinnen und Schülern der St ufe 12 ausgefüllt, die gerade einen Leistungskurs begonnen hatten. Unter diesen wa ren 17 aus dem derze it einzigen Leistungskurs Informatik in Niedersachsen. Die  Umfrage ist nicht repräsentativ, und die  Daten sind auch nicht direkt vergleichbar, weil es sich beim Informatikkurs um einen  schulübergreifenden Kurs aus fünf Oberstufen handelt, bei  den anderen Kursen aber  nicht. Befragt wurden Lernend e der Fächer Informatik, Mathematik und Physik, weil  diese Kurse eine ähnliche Stru ktur bzgl. der Geschlechterverteilung haben, sowie  Deutsch und Englisch zum Vergleich. Die  Geschlechterverteilung ist wie üblich –  leider.   INMAPHDEENweiblichmännlich051015Verteilung von Mädchen und Jungen weiblich männlich   Ziel der Befragung war es  u. a. festzustellen, ob der g eplante hohe Anteil selbstständiger Arbeitsphasen im Informatikkurs den  Interessen der Lernenden entgegenkommt – oder nicht. Da die Kursteilnehm erinnen und -teilnehmer den Unterrichtenden zum Zeitpunkt der Befragung noch nicht kannten, sind deren Aussagen in diesem Punkt unbeeinflusst.     A1: Zur Selbsteinschätzung der Lernenden  Die erfragten Zensurenmittel entsprechen in sgesamt der üblichen Verteilung, wobei  die beiden „Sprachkurse“ wohl deshalb bes ser liegen, weil Mädchen insgesamt bessere Zensuren haben. Die Vorzensuren (aus der Klasse 11) aller Schülerinnen und  Schüler sind in ihren Leistungsfächern besse r als im Mittel – deshalb haben sie sie ja  u. a. gewählt. Auffällig ist allerdings die starke Abweichung in Informatik.    IN MA PH DE EN   Zensurenmittel gesamt 2,56 2,60 2,56 2,37 2,39   Zensurenmittel Fach 1,42 2,10 2,13 2,11 2,00   Differenz: Gesamt – Fach 1,14 0,50 0,44 0,26 0,39    Zu Beginn wurden einige Fragen  zur Selbsteinschätzung persönlicher Eigenschaften  gestellt, jeweils allgemein und bezogen auf  das Leistungsfach. Als Erstes zu Sorgfalt ,  Fleiß  und Ehrgeiz . Informatikschülerinnen und -schüler  schätzen sich selbst allge-Anhang    110  mein nur zu 41 % als sorgfältig ein. Nur die „Physiker“ liegen ähnlich tief. Ganz anders sieht es dann bei der Sorgfalt im Fach aus:    IN MA PH DE EN   Sorgfalt allgemein 41 % 62 % 48 % 95 % 76 %   Sorgfalt im Fach 76 % 85 % 57 % 95 % 71 %   Differenz: Fach – allgemein 35 % 23 % 10 %   0 % –5 %  Informatikschülerinnen und -schüler zeigen  also – nach eigener Einschätzung – in  diesem Unterricht den größten Unterschied zu ihrem sonstigen Verhalten von allen  Fächern überhaupt. Nur „Mathematiker“ mac hen das ähnlich, allerdings von einem  höheren Niveau aus.  Ganz ähnlich sind die Ergebnisse beim Fleiß . Sie fallen noch drastischer aus.    IN MA PH DE EN   Fleiß allgemein   6 % 38 % 33 % 58 % 57 %   Fleiß im Fach 59 % 46 % 43 % 79 % 71 %   Differenz: Fach – allgemein 53 %   8 % 10 % 21 % 14 %    Beim Ehrgeiz  herrscht ziemlich Flaute bei den Inform atikern, sehr im Unterschied zu  den Kursen, in denen die M ädchen überwiegen (das gilt auch für den Fleiß). Fachlich  gesehen machen hier die Mathem atiker den größten Sprung.    IN MA PH DE EN   Ehrgeiz allgemein 47 % 69 % 62 % 100 %   90 %   Ehrgeiz im Fach 65 % 92 % 67 %   89 %   81 %   Differenz: Fach – allgemein 18 % 23 %   5 % –11 % –10 %    Besonders deutlich werden die fachbez ogenen Unterschiede im Diagramm.  INMAPHDEENDifferenz EhrgeizDifferenz FleissDifferenz Sorgfalt -20%-10%0%10%20%30%40%50%60%   Gefragt wurde entsprechend nach Kreativität , der Vielseitigkeit der Interessen  und  der Vorausplanung der Arbeit . Im Unterschied zu den Sprachkursen schätzen sich  die „Naturwissenschaftler“ allgemei n als deutlich weni ger kreativ ein456. Im Fach ändert sich da wenig – außer bei den Informati kern. Die erreichen hier Werte höher als                                                    456 Vermutlich finden sich hier auch geschlechtsspezifische Unterschiede. Anhang    111  der Deutschkurs. Bemerkenswert ist die Se lbsteinschätzung der Mathematiker in  diesem Bereich.    IN MA PH DE EN   Kreativität allgemein 65 %   69 % 57 % 74 %   71 %   Kreativität im Fach 82 %   46 % 62 % 79 %   57 %   Differenz: Fach – allgemein 18 % –23 %   5 %   5 % –14 %    Bei der Vielseitigkeit der Interessen ähneln  sich die Kurse im  Allgemeinen erstaunlich. Fachlich gesehen legen dann die Ma thematiker und Informatiker ähnlich stark  zu. In diesen Fächern scheinen erhebliche fachliche  Interessen vorzuliegen.    IN MA PH DE EN   vielseitig interessiert allg. 76 % 69 % 81 % 84 % 81 %   vielseitig interessiert im Fach 94 % 92 % 81 % 79 % 95 %   Differenz: Fach – allgemein 18 % 23 %   0 % –5 % 14 %    Auch bei der Vorausplanung von anfallenden  Arbeiten ähneln sich Mathematiker und  Informatiker auffallend. Beide legen hier im fachlichen Be reich zu, während sich in  den anderen Fächern wenig tut.    IN MA PH DE EN   Planung der Arbeit allgemein 29 % 31 % 43 % 32 %   48 %   Planung der Arbeit im Fach 41 % 46 % 43 % 37 %   38 %   Differenz: Fach – allgemein 12 % 15 %   0 %   5 % –10 %    Auch hier die Differenzen noch einmal als Diagramm:  INMAPHDEENDifferenz KreativitätDifferenz VielseitigkeitDifferenz Planung-25%-20%-15%-10%-5%0%5%10%15%20%25%   Etwas verblüffend ist die hohe Neigung der Informatiker, bei auftretenden Problemen  schnell aufzugeben . In allen Fächern zeigen sich hier wenige Unterschiede vom Allgemeinen zum Fach. Nur die „Anglisten“ hal ten sich fachlich für hartnäckiger, und  Mathematiker und Physiker geben „überhaupt nicht“ auf.    IN MA PH DE EN   bei Problemen aufgeben allg. 24 % 8 %   5 % 11 %   24 %   bei Problemen im Fach aufg. 24 % 8 % 10 % 16 %   10 %   Differenz: Fach – allgemein   0 % 0 %   5 %   5 % –14 %   Anhang    112  Von der Gruppenarbeit halten die Informatike r ähnlich wie die „kreativen“ Deutschkurse viel, die Mathematiker deutlich we niger. Ähnlich ungern arbeiten nur die Anglisten in ihrem Fach zusammen.    IN MA PH DE EN   Gruppenarbeit allgemein 59 % 38 % 52 % 53 %   48 %   Gruppenarbeit im Fach 59 % 38 % 57 % 63 %   38 %   Differenz: Fach – allgemein   0 %   0 %   5 % 11 % –10 %    Fast schon dramatische Unterschiede zeigen sich in der Neigung zur selbstständigen  Arbeit . Obwohl sich die Informa tiker hier im Allgemeinen  als eher unselbstständig  einschätzen, erreichen sie im Fach Spitze nwerte. Erstaunlich sind  die Ergebnisse in  den Sprachkursen, die sich allgemein ja  als sehr selbstst ändig einschätzen.    IN MA PH DE EN   selbstständig arbeiten allgem. 29 % 38 % 57 %   68 %   71 %   selbstständig arbeiten i. Fach 65 % 46 % 67 %   58 %   62 %   Differenz: Fach – allgemein 35 %   8 % 10 % –11 % –10 %    Folgerichtig halten die Informatiker auch nichts vom „Lernen im gleichen Tempo“.    IN MA PH DE EN   im gleichen Tempo allgemein   41 % 46 % 33 %   58 % 48 %   im gleichen Tempo im Fach   29 % 54 % 43 %   47 % 48 %   Differenz: Fach – allgemein –12 %   8 % 10 % –11 %   0 %    Auch hier die Unterschiede im Diagramm:  INMAPHDEEN-20%-10%0%10%20%30%40% Differenz Aufgeben Differenz Gruppenarbeit Differenz Selbständigkeit Differenz gleiches Tempo           Anhang    113  A2: Vergleich mit einem Lehrerweiterbildungskurs  Von Interesse ist vielleicht der Vergleich von Schülern und Lehrern, die sich intensiv  mit einem neuen Fach beschäftigen wollen: die Schüler im Leistungskurs, die Lehrer in der Lehrerweiterbildungskursfolge.  Einige Monate nach der Schülerbefragung  wurden zwanzig Kollegi nnen und Kollegen u. a. nach ihren Vorkenntnissen befragt.  (Allerdings wurden dabei eher „private“ Ak tivitäten wie „Chatten“ ausgespart.) Das  Medium Computer wird von den Schülerin nen und Schülern in allen Sparten praktisch flächendeckend benutzt. Auch die Kolle ginnen und Kollegen nutzen praktisch  alle den Computer zum Sc hreiben (die meisten auch als Spreadsheet). Andere  „dienstliche“ Anwendungen wie  Präsentationsprogramme, Datenbanken usw. sind  nur noch spärlich vertreten.   Vorkenntnisse: Schüler Lehrer   Textverarbeitung   94 % 94 %   Surfen 100 % k. A.   Chatten   71 % k. A.   Musik 100 % k. A.   Email 100 % k. A.   Grafik   76 % 29 %   Homepage   82 % k. A.    0% 20% 40% 60% 80% 100%TextverarbeitungSurfenChattenMusikEmailGrafikHomepageVorkenntnisse Schüler Lehrer   Noch drastischer sind die Unterschi ede bei bekannten Progra mmiersprachen. Während ca. die Hälfte der Schülerinnen und Schül er sich mit C/C++ beschäftigt, kannte  keiner der Kolleginnen und Ko llegen diese Sprache. Fast umgekehrt liegt es bei  PASCAL. Auch heute neu anfangende Lehrer /innen kennen überwiegend diese  Sprache – vermutlich noch aus der Schule.   Vorkenntnisse: Schüler Lehrer   C/C++ 47 %   0 %   Basic 24 % 18 %   Pascal 29 % 71 %   Delphi 29 % 18 %   Java 12 %   6 %   Skriptsprachen 41 %   6 %   HTML 29 % k. A. Anhang    114  0% 20% 40% 60% 80%C/C++BasicPascalDelphiJavaSkriptsprachenHTMLVorkenntnisse Schüler Lehrer   Für den Fachunterricht sind die unterschie dlichen Programmier-Vorkenntnisse der  Schülerinnen und Schüler gr avierend. Die breite Streuung, besonders die Nutzung  von Scriptsprachen wie PHP, resultiert aus der weitgehend privaten  Beschäftigung  mit Computern. Da sowohl aus beginnendem  Informatiklehrermangel (der weitgehend eine Folge des Mat hematiklehrermangels ist457) als auch aus schwindendem  Interesse bei den Schülern Informatikunter richt entweder ausfällt oder in „Nischen“  wie „Homepagegestaltung“, „Administration des  Schulservers“, … stattfindet, kann  nicht mehr auf vergleichbare Voraussetz ungen aufgebaut werden. Hier machen sich  die fehlenden Standards des Faches drasti sch bemerkbar. Der Kurs musste entsprechend fast ohne Voraussetzungen mit element arer Algorithmik beginnen. Umso erfreulicher ist der schnelle Lernfortschritt der Lernenden. Offensicht lich kommt es wirklich nicht so sehr auf geler nte Inhalte an, sondern auf Me thodenkenntnisse (die hier  weitgehend in Eigeninitiativ e erarbeitet wurden) und die Be reitschaft, sich auf neue  Themen einzulassen. In diesem Bereich schätzen sich die Informatik-Lernenden offensichtlich richtig ein.  Das Programmierenlernen in Eigeninitiative is t möglicherweise eine Ursache für den  relativ hohen Prozentsatz von Informatiks chülerinnen und -schül er, die von sich  glauben, bei auftretenden Prob lemen „schnell aufzugeben“. Im Unterricht hat sich  diese Einschätzung nicht bestätigt. Es k önnte aber sein, dass auf einem so schwierigen Gebiet, das anfangs auch kaum Zwischenschritte zwischen „richtig“ und „falsch“ zulässt, sich die fehlende Unterstützung in diesem Sinne bemerkbar macht.                                                          457 Schulleiter stehen bei Lehrermangel in diesem Bereich vor der Frage, ob sie das Pflichtfach  Mathematik  zugunsten des Wahlfaches  Informatik kürzen. Da die Informatikkurse in der Regel auch noch klein sind, ist die  Antwort klar. Anhang    115  A3: Zu den Erwartungen an den Unterricht  Da projektartige Unterrichtsphasen die Be reitschaft der Lernenden voraussetzen,  sich auf diese Arbeitsform einzulassen und so phasenweise die Verantwortung für  ihre Lernund Arbeitsergebnisse selbst zu übernehmen, folgte noch eine Fragengruppe zu diesem Bereich. Anzumerken is t wiederum, dass die Befragten die Zielrichtung der Befragung nicht kannten.  Die erste Fragengruppe beschäftigte sich mit der Unterrichtsführung und der Art der  Problemfindung:  „Der Unterricht soll vom Lehrer klar in Einzelschritten geführt werden.“   IN MA PH DE EN  allgemein 31 % 62 % 57 %   58 % 67 %  bezogen auf das Fach 31 % 85 % 81 %   47 % 62 %  Differenz: Fach – allgemein   0 % 23 % 24 % –11 % –5 %    Die Informatikschülerinnen und -schüler halt en also generell und sehr deutlich am  wenigsten von kleinschrittigem Unterricht en. In Mathematik und Physik wird das anders gesehen. In den Sprachkursen ist so lch ein Unterricht kaum möglich.  „Der Unterricht soll größere Abschnitte enthalten, in denen ich selbstständig Aufgaben bearbeite.“  IN MA PH DE EN  allgemein 69 %   46 % 33 % 37 % 48 %  bezogen auf das Fach 94 %   31 % 43 % 53 % 48 %  Differenz: Fach – allgemein 25 % –15 % 10 % 16 %   0 %    Entsprechend hoch wird das selbst ständige Arbeiten eingeschätzt.  „Ich möchte mir selbst Aufgaben wä hlen, die in den Unterricht eingehen.“    IN MA PH DE EN  allgemein 63 % 46 % 55 % 68 % 62 %  bezogen auf das Fach 88 % 38 % 57 % 74 % 62 %  Differenz: Fach – allgemein 25 % –8 %   2 %   5 %   0 %    Auch Einfluss auf die Aufgabenstellung wird  gewünscht, und zwar signifikant stärker  im Fach Informatik. Nur der Deutschkurs erreicht einen ähnlich hohen Wert, wahrscheinlich, weil er sich ebenf alls als sehr kreativ einstuft (s. dort). In den anderen  Kursen wird kaum zwischen den Fächern differenziert.  „Die Unterrichtsinhalte sollen nur  vom Lehrer vorgegeben werden.“    IN MA PH DE EN  allgemein 0 % 23 % 14 % 0 % 10 %  bezogen auf das Fach 0 % 31 % 43 % 0 %   5 %  Differenz: Fach – allgemein 0 % 8 % 29 % 0 % –5 %    Die Ergebnisse sind folgerichtig und bedürfen kaum eines Kommentars. Auch hier ist  die Parallelität zum Deutsch kurs frappierend. Mathemat iker und Physiker haben es  ganz gerne, wenn Unterricht ende die Linie vorgeben.  „Unterrichtsinhalte sollen sich auch au s den bearbeiteten Problemen ergeben.“    IN MA PH DE EN  allgemein 69 %   77 % 90 % 79 % 90 %  bezogen auf das Fach 81 % 100 % 90 % 79 % 90 %  Differenz: Fach – allgemein 13 %   23 %   0 %   0 %   0 %    In allen Kursen wird problemor ientiertes Arbeiten gewünscht. Anhang    116  Die nächste Fragengruppe bezog sich auf di e Bereitschaft, Probleme „offen“ anzugehen, sie ggf. auch nicht abschließend im Unterricht zu behandeln.  „Alle Inhalte sollen im Unte rricht eingeführt und dort vollständig behandelt werden.“    IN MA PH DE EN  allgemein 38 % 46 % 57 % 42 %   57 %  bezogen auf das Fach 31 % 54 % 57 % 42 %   48 %  Differenz: Fach – allgemein –6 %   8 %   0 %   0 % –10 %    Das erwarten Informatiklernende generell kaum.  „Ich möchte mir Inhalte auch selbst erschlie ßen, z.B. aus Büchern oder aus dem Internet.“    IN MA PH DE EN  allgemein 31 % 31 % 29 % 47 %   71 %  bezogen auf das Fach 75 % 23 % 48 % 53 %   62 %  Differenz: Fach – allgemein 44 % –8 % 19 %   5 % –10 %    Hier zeigt sich extremer Unterschied von 44  % beim Informatikkurs. Im Gegensatz zu  den Sprachkursen mögen die „Naturwissenscha ftler“ diese Arbeitsweise allgemein  nicht. Bezogen auf die Informatik ändert sich  die Einstellung schlagartig und springt  auf den höchsten Wert überhaupt. Wahrscheinlic h macht sich hier die Erfahrung der  Kursteilnehmerinnen und -teilnehmer bemerkbar , sich selbst in ein Thema einarbeiten zu können (s. unter „Vorkenntnisse“).  „Aufgaben und Lösungsanforderungen sollen im Deta il eindeutig definiert sein, so dass ich genau  weiß, was von mir erwartet wird.“   IN MA PH DE EN  allgemein 50 % 85 % 71 % 79 % 76 %  bezogen auf das Fach 50 % 85 % 86 % 74 % 76 %  Differenz: Fach – allgemein   0 %   0 % 14 % –5 %   0 %    Hier ist die Meinung bei den Informatikern  gespalten, während in den anderen Kursen überwiegend Klarhei t gewünscht wird. F ehlende Eindeutigkeit kann nicht nur als  Offenheit, sondern auch als Möglichkeit zur Willkür interpretiert werden, und diese  Erfahrung möchten sich die meisten wohl ersparen. Diese Interpretation wird durch  das folgende Ergebnis nahe ge legt, das eine analoge Aussage enthält, diesmal aber  positiv formuliert. Auch hier ähneln die Er gebnisse eher den sprachlichen Kursen als  den verwandten naturwissenschaftlichen.  „Aufgabenstellungen sollen so offe n sein, dass ich eigene Ideen entwickeln und umsetzen kann.“   IN MA PH DE EN  allgemein 63 % 38 % 57 % 68 % 76 %  bezogen auf das Fach 81 % 54 % 76 % 74 % 86 %  Differenz: Fach – allgemein 19 % 15 % 19 %   5 % 10 %    Zuletzt folgen einige Fragen zu m exemplarischen Lernen.   „Ich möchte einen möglichst breiten Überblick über fachliche Inhalte und Methoden.“   IN MA PH DE EN  allgemein   38 % 54 % 48 %   32 % 38 %  bezogen auf das Fach   25 % 62 % 52 %   16 % 52 %  Differenz: Fach – allgemein –13 %   8 %   5 % –16 % 14 %    „Ich möchte weniger Stoff beha ndeln, mich dafür aber exemplarisch mit einzelnen Problemen sehr  gründlich auseinandersetzen.“   IN MA PH DE EN  allgemein 13 % 31 % 43 % 32 %   57 %  bezogen auf das Fach 31 % 31 % 57 % 42 %   43 %  Differenz: Fach – allgemein 19 %   0 % 14 % 11 % –14 % Anhang    117  Auch diese Ergebnisse sind eindeutig. Informatiker möchten Methodenkenntnisse  erwerben.  „Ich möchte im Unterricht Anre gungen gewinnen, die ich über den Unterricht hinaus verfolgen  will.“   IN MA PH DE EN  allgemein 38 % 54 % 67 % 79 % 71 %  bezogen auf das Fach 81 % 69 % 76 % 74 % 71 %  Differenz: Fach – allgemein 44 % 15 % 10 % –5 %   0 %    Der Informatikkurs ist bemerkenswert des interessiert an Anregungen in anderen Fächern, erwartet diese aber im  Fach selbst in hohem Maße.    Fazit:  Auch wenn die Befragung nicht repräsent ativ war (und schon wegen der fehlenden  Vergleichsgruppen nicht sein konnte), zeig t sie doch Tendenzen, die ziemlich eindeutig sind:  • Informatikschülerinnen und -schüler stufen sich selbst als wenig sorgfältig, fleißig, ehrgeizig und voraus planend ein. Sie ähneln dar in den Mathematikund  Physikschülerinnen und schülern, liegen aber auch,  verglichen mit denen,  noch unter dem Schnitt. Im Fach selbst aber billigen sie sich ein erheblich besseres Arbeitsverhalten zu.  • Im Bereich der Kreativität und dem so zialen Lernen ähneln die Selbsteinschätzungen eher den Sprachkursen.   • Extrem ausgeprägt sind di e selbst eingeschätzte F ähigkeit und die Erwartung  an den Unterricht bzgl. des selbstständi gen, problemorientie rten Lernens. Die  Antworten sind auch in sich stimmig.  Es scheint zumindest in diesem Kurs so zu sein, dass die Möglichkeiten des Informatikunterrichts in Hinsicht auf konstruk tivistisches, selbstbestimmtes und selbstverantwortliches Lernen und Arbeit en den Interessen der Kursteilnehmerinnen und –teilnehmern entsprechen. Auch die Kursergebnisse  selbst zielen in diese Richtung.  Während „Pflichtaufgaben“ eher unwil lig erledigt werden, liefe rt der Kurs in freien  Arbeitsphasen überwiegend sehr sehenswerte Ergebnisse völlig unterschiedlicher  Art, die mit Freude und Stol z vorgestellt werden.     Nachtrag:  Im neuen Schuljahr 2002/03 hab en 27 Schüler aus fünf Ku rsstufen der nächsten Informatik-Leistungskursfolge erneut den Fr agebogen ausgefüllt. Da im Vergleich zur  ersten Befragung jetzt offensichtlich andere Voraussetzungen gegeben waren – z. B.  in Bezug auf die Vorbereitung der Schüler auf den Kurs – wurden die neuen Zahlen  nicht in die alte Auswertung aufgenommen. Die zweite Befragung bestätigte aber im  Mittel die Ergebnisse der ersten – mit den bei  so geringen Zahlen üblichen Schwankungen. Es ergab sich, dass  • der Unterschied zwischen Informatik-Vo rzensur und mittlerer Schulnote noch  etwas größer war (1,28 statt 1,14),  • die Selbsteinschätzung bzgl. Sorgfalt, Fleiß, … in der Tendenz wie im Vorjahr,  jedoch ähnlicher wie in Mathematik/Physik war, Anhang    118  • eine noch verstärkte Tendenz zum „sc hnellen Aufgeben“ bei Problemen im  Fach auftritt, wobei die Unterschiede z wischen der fachlichen und allgemeinen  Einschätzung groß war (19 % statt 0 %),  • die Schüler sich diesmal generell al s ziemlich selbstständig einschätzten.  Interessant ist, dass sich der Ruf eines neue n Leistungsfaches sehr schnell bildet. Im  neuen Schuljahr hatten 52 % (statt 29 %) de r Schüler Vorkenntni sse in Delphi, und  85 % (statt 75 %) wollen sich neue Inhalte auch selbst erschließen. Es hatte sich  also ein großer Teil der Schüler selbstst ändig auf die im Kurs  benutzte Programmiersprache vorbereitet. Die Unterrichteten wollen sich nicht nur neue Inhalte selbst er-schließen – sie haben es längst getan. Anhang    119  Fragebogen zu Ihren Erwartungen an den Informatikunterricht   Schuljahr 2001/2 (Alle Angabe sind freiwillig. Die Umfrage erfolgt anonym.)     zur meiner Person:  Alter: ____  Klassenstufe: _____                Geschlecht: m        w    Prüfungsfächer:   1. LF:________    2. LF:________    3. PF:________      4. PF:________    Mein Zensurendurchschnitt        insgesamt: etwa _____          in Informatik: etwa _______    Meine Hobbies: ________________________________________________________    Mein Berufswunsch: ____________________________________________________      Treffen die Aussagen auf Sie zu? (bitte ankreuzen)                                        zu meinen Vorkenntnissen in Informatik (vor Beginn des Oberstufenunterrichts):    Ich habe Computer benutzt zum ....  (bitte ankreuzen)                                 trifft zu  Schreiben von Texten.   Surfen im Internet.   Chatten im Internet.   Musik hören / Musik aus dem Netz laden. (Unzutreffendes ggf. streichen)   EMail   Gestaltung von Grafiken.    Gestalten eigener HTML-Seiten.    Programmieren in ________________________________________   und _________________________________________________  Ich arbeite sorgfältig.     trifft eher zu trifft eher nicht zu allgemeinfür Informa-allgemein für Informati k Ich bin fleißig      Ich bin ehrgeizig.       Ich bin kreativ.      Ich bin vielseitig interessiert.       Ich plane meine Arbeit im Voraus.      Bei Problemen gebe ich schnell auf.      Ich arbeite lieber in einer Gruppe als alleine.      Ich arbeite lieber selbstständig als angeleitet.      Ich arbeite gerne im gleichen Tempo wie alle anderen.     Anhang    120  Weshalb haben Sie Informatik gewählt?    Treffen die Aussagen auf Sie zu? (bitte ankreuzen)                                        zu meinen Erwartungen an den Unterricht:    Treffen die Aussagen auf Sie zu? (bitte ankreuzen)                                                     trifft zu  Ich erhoffe mir gute Zensuren.   Mich interessiert das Fach.  Ich erhoffe mir bessere Berufschancen.   Mich interessiert  .. Programmieren.                               .. Hardware.                                .. theoretische Informatik.                               .. selb stständiges Arbeiten mit komplexen Fragestellungen und Daten.    sonstige Gründe:    Der Unterricht soll vom Lehrer klar  in Einzelschritten geführt werden.   trifft zu  allgemein für InformaDer Unterr. soll größere Abschnitte enthalten,  in denen ich selbstständig Aufg. bearbeite.    Ich möchte mir selbst Aufgaben wähl en, die in den Unterricht eingehen.   Die Unterrichtsinhalte sollen sich auch aus den bearbeiteten Problemen ergeben.   Alle Inhalte sollen im Unterricht eingeführt und dort vollständig behandelt werden.   Ich möchte mir Inhalte auch selbst erschließen, z. B. aus Büchern oder aus dem Internet.   Aufgaben und Lösungsanforderungen sollen im Detail eindeutig definiert sein, so dass  ich genau weiß, was von mir erwartet wird.    Aufgabenstellungen sollen so offen sein, dass ich eigene Ideen entwickeln und umsetzen  kann.    Mein Interesse am Fach endet nach dem Unterricht und der Bearbeitung der Aufgaben.   Ich möchte im Unterricht Anregungen gewinnen, die ich über den Unterricht hinaus verfolgen will.    Ich möchte einen möglichst breiten Überblick über fachliche Inhalte und Methoden  erhalten, der dafür nicht besonders tief gehen muss.    Ich möchte weniger Stoff behandeln, mich dafür aber exemplarisch mit einzelnen Problemen sehr gründlich auseinandersetzen.   Die Unterrichtsinhalte sollen nur vom Lehrer vorgegeben werden.  Anhang    121  Falls Sie schon Informatikunterricht hatten:    Wie schätzen Sie die folgenden Aussagen ein.  (bitte ankreuzen)                              In den anderen Fächern entfielen die Fr agen zu den informatikspezifischen Vorkenntnissen.  trifft nicht zu trifft zu  Informatik ist leichter als andere Fächer.    Informatik ist schwerer als andere Fächer.    Ich arbeite im Informatikunterricht selbständiger als in anderen Fächern.    Ich lerne im Informatikunterricht wenig, verglichen mit anderen Fächern.    Meine Informatikzensuren sind besser als mein Zensurendurchschnitt.  Ich lerne im Informatikunterricht viel, verglichen mit anderen Fächern.    Ich würde das Fach wieder wählen.   Nachwort    122  Nachwort  In dieser Arbeit habe ich versucht, di e Rahmenbedingungen zu beschreiben, unter  denen ein fachlich fundierter, aber vorrangig an der Allgemeinbildung orientierter  Informatikunterricht mög lich ist. Das Ergebnis lässt sich knapp beschreiben:  Die fachlichen Inhalte müssen geeignet aus gewählt und so tief gehend unterrichtet werden, dass die Lernenden in der Lage sind, problemorientiert und ak tiv auf dem jeweiligen Teilgebiet zu arbeiten. In dieser selb stständigen Schülerarb eit verwirklicht das  Fach dann seine allgemein bildenden Ziele.   Verfehlt der Unterricht das Ziel, seinen Sc hülerinnen und Schüler n den Computer als  ein Werkzeug zugänglich zu machen, mit dem  sie ihre eigenen Ideen realisieren  können, so folgen daraus nicht nur fachliche  Probleme, sondern auch und gerade die  allgemein bildenden Ziele sind dann kaum noch zu erreichen. Erforderlich sind also  Unterrichtende, die einerseits fachlich hinr eichend ausgebildet wurden – wie in anderen Fächern auch –, und die andererseits genügend ei gene Erfahrungen haben, um  den Lernenden bei deren Arbeit  eine Hilfe zu sein.   Der Konstruktivismus, der mir nicht nur wegen seiner quantentheoretischen Wurzeln  und der Ähnlichkeit zur evolut ionären Passung sympathisch ist458, wurde in dieser  Arbeit „pragmatisch“ als Lernt heorie betrachtet. In dieser Form hat er die angenehme  Wirkung, das Interesse auf die Adressaten des Unterrichts, die Schülerinnen und  Schüler, zu fokussieren. Deren  Lernfortschritte  sind mir wichtig – und nicht irgendwelche Systematiken, die ohne eine solche Priorität formuliert worden sind. Die Resultate konstruktivisti scher Überlegungen nehmen beide  am Unterricht beteiligten  Parteien in die Pflicht, und sie de finieren sehr klar auch die Unterkante  des Akzeptablen für beide Seiten: Die Lernenden müss en aktiv an ihrem Lernfortschritt arbeiten. Ohne eine solche Bereitschaft ist der Unterricht sinnlos. Von den Lehrenden  muss verlangt werden, dass sie die Schüle rinnen und Schüler als Individuen sehen  und diese auch so behandeln. Eine Präsenta tion des „Stoffs“ ohne Bezug zu dem  subjektiven Kenntnisund Erfahrungsstand der Lernenden ist auf die Dauer gesehen  wirkungslos und nicht zu akzeptieren. In de r Schulrealität sind diese beiden Mindestanforderungen deutlich spürbar, denn die etwas älteren Schülerinnen und Schüler  der Sekundarstufen scheitern in der Regel nicht an intelle ktuellen Defiziten, sondern  an fehlender Lernbereitschaft, und Unterri cht erreicht die Lernenden nicht mehr,  wenn es misslingt, die Brücke zur Lebenswelt  zu schlagen. In Wahlfächern wie der  Informatik wird dieses durch „Abwählen“ dann sehr deutlich.  Die Schulinformatik ist in der bemerkenswerten Lage, seit ca. 25 Jahren als abiturrelevantes Fach Grundund vereinzelt  Leistungskurse anzubieten, mündliche und  schriftliche Reifeprüfungen abz unehmen – und trotzdem i mmer noch über keine einheitlichen Standards und (von Ausnahmen abgesehen) über keine fachlich ausgebildeten Lehrkräfte zu verfügen. Das Fehl en von Informatiklehrerinnen und –lehrern  hat natürlich damit zu tun, dass nach der  Einstellungswelle der 70er-Jahre kaum  noch Kolleginnen und Kollege n in die Schulen kamen459. Es hat aber auch damit zu  tun, dass die Ergebnisse der universitären Fachdidaktiken die Berufspraktiker kaum  erreichen. Offensichtlich wird die Ausbil dung noch immer nach dem Verlassen der  Studienseminare als abgeschlossen angesehen, lebenslanges Lerne n findet kaum  statt. Das kann nicht allein als Vorwur f an die Kollegien genommen werden, denn  Fortbildung ist ja nicht (nur) deren Privat sache. Es fehlen offensichtlich die Rahmen                                                  458 sondern besonders wegen seines Verzichts auf absolute Wahrheiten.  459 und da gab es ja noch kaum eine „Informatik“ Nachwort    123  bedingungen, unter denen systemat isch Innovationen aus den Universitäten in die  Schulen gelenkt werden.  Der derzeitige rapide Generationswech sel bei den Unterrichtenden kann zusammen  mit sinkenden Schülerzahlen dazu führen, dass nach einer Übergangszeit die vorhandenen Stellen besetzt sind und die dann  jüngeren Kolleginne n und Kollegen wiederum kaum Einstellungschancen haben. Die „Pädagogen-Welle“ der 70er wird wohl  etwas flacher, aber im Prinzip ähnlich re produziert werden. Da  die derzeit eingestellten Kolleginnen und Kollegen in der Regel  zwar Anwenderkenntnisse besitzen,  aber nur selten ausgebildete Informatiker sind,  wird so der Bedarf an einer berufsbegleitenden Lehrerweit erbildung im Bereich der Info rmatik weiter bestehen. Auch  wenn diese ein Hochschulstudium nicht er setzen kann, muss m. E. die Hochschule  trotzdem darin eingebunden werden, um w enigstens die fachlichen Mindeststandards zu halten. Dafür sind klare Spielreg eln vonnöten, um die Reibungsverluste zu  minimieren: Einerseits muss klar sein, was im Informatikunterricht dauerhaft zu unterrichten ist, andererseits müssen in diesem  Rahmen Aktualisierungen möglich sein,  und auch die können m. E. überwiegend nur v on Universitäten geliefert werden. Gerade hierfür habe ich in dieser Arbeit versucht, geeignete Kriterien zu finden.  Was bleibt also zu tun? Aus konstruktivistischer Sicht ist zu prüf en, ob die hier entwicke lten Ideen und deren  Konsequenzen „passen“, also einer kriti schen Überprüfung in der  Unterrichtswirklichkeit standhalten. Das tun si e im Einzelfall sicherlich. Sind sie aber auch als Standardmodell tauglich – besonders in ihrem Anspru ch auf selbstständiges Arbeiten? In  der „virtuellen Lehrerwe iterbildung Informatik in Niedersachsen VLIN“ 460 wird versucht, entsprechenden Unterricht zu verbreit en – so gut es unter den ziemlich beschränkten Bedingungen halt geht. Ergebni sse über die Auswirkungen werden aber  erst in einigen Jahren vorliegen. Weiter hin wäre das Auswahlverfahren für Unterrichtsinhalte soweit anzuwenden, dass sich  ein Kanon von Unte rrichtsbeispielen für  eine ganze Kursfolge ergibt – und diese wäre dann zu evaluieren.  Der von mir als Beispiel herangezogene Bereich der tec hnischen und theoretischen  Informatik deckt in dieser Fo rm zwei Halbjahre Unterricht  ab. An den zentralen Inhalten dieser Gebiete wird si ch mittelfristig kaum etwas ändern. Gesucht sind aber  immer wieder neue, interessante und vor dem Hintergrund der fachlichen Entwicklung aktuelle Beispiele. N ehmen wir als drittes Halbj ahr einen Kurs über „Datenstrukturen“, dann haben wir ein weiteres dauerhaftes Thema gefunden. Listen, Stapel, Bäume, Netze und ihre  Anwendungen sind  unabhängig von der  Realisierung  eine unerschöpfliche Quelle für eigenständige Schülerarbeiten. Ein vierter Kurs über  Dateien, Datenbanken und Simulationen r undet den fachlichen Ka non der Kursstufe  ab. Wählen wir für den Einf ührungsunterricht in die Algo rithmik die erprobten und gut  dokumentierten Themen der statischen und bewegten Grafik, Zeichenkettenverarbeitung und zweidimensionale Felder, z. B. als Pixelbilder , dann hat sich in den vergangenen Jahren inhaltlich kaum etwas geänder t – außer bei den Werkzeugen. Für  so einen Unterricht ist m. E. eine nachhal tige Lehrerausund -weiterbildung effizient  möglich. Wird diese durch eine kontin uierliche Materialienentwicklung unterstützt,  dann sollte auch die Informatik für „norma l“ engagierte Lehrerinnen und Lehrer unterrichtbar sein – also ohne ungebühr liche Anforderungen zu stellen.  In diesem Sinne: Packen wir es an!                                                    460 Materialien findet man unter www.vlin.de . Literaturverzeichnis    124  Literaturverzeichnis    [Abe93] Abelson, H. / Sussman, G.: Strukt ur und Interpretation von Computerprogrammen   Springer 1993    [Alb83] Albert, J. / Ottma nn, Th.: Automaten, Sprachen und Maschinen für Anwender   BI 1983    [Amb91] Ambros, Wolgang: Didaktik und Anti-Didaktik   LOG IN 4, 1991    [Arg94] Argyris, J. / Faust, G. / Haase, M.: Die Erforschung des Chaos   Vieweg 1994    [Bau90] Baumann, Rüdeger: Didaktik der Informatik  Klett 1990    [Bau91] Baumann/Koerber: Informa tik in der Schule der 90er Jahre   LOG IN 6, 1991    [Bau92] Baumann, Rüdeger: Informatik für die Sekundarstufe II, Bd. 1  Klett, 1992    [Bau93] Baumann, Rüdeger: Informatik für die Sekundarstufe II, Bd. 2  Klett, 1993    [Bau94] Baumann, Rüdeger: Algorithmen – wozu?  LOG IN 4, 1994    [Bau95] Baumann, Rüdeger: Pr obleme des Anfangsunterrichts   LOG IN 1,1995    [Bau96a] Baumann, Rüdeger: Didaktik der Informatik  Klett 1996    [Bau96b] Baumann, Rüdeger: Informa tik für die Sekundarstufe II, Bd. 1/2   Klett 1996/97    [Bau98] Baumann/Wegner: Brauchen  wir eine Bildungsinformatik?   LOG IN 2, 1998    [BeB02] Beats Biblionetz  http://beat.doebe. li/bibliothek/, 2002    [Ben95] Bender, Peter: Wo im Fächerkanon der allgemeinbildenden Schule soll die Informatik angesiedelt werden?   in [His95]    [Ben02] Ben-Ari, Mordechai: Constructiv ism in Computer Science Education   Journal of Computers in Mathematics and Science Teaching, in press, 2002    [Ber96] Bernstein, H., PC-E lektronik-Labor Bd. 1 bis 4   Franzis 1996/97    [Ber98] Berger, Peter: Informatische Weltbilder   LOG IN 3/4, 1998      Literaturverzeichnis    125  [Boy00] Boyle, Tom: Constructivism: A Suita ble Pedagogy for Information and Computing  Sciences?  http://www.ics.ltsn.ac.uk/ pub/conf2000/Papers/www.unl .ac.uk/simt/aim/boyle/boy lecv.htm, 2000     [Bra93] Braitenberg, Valentin: E xperimente mit kybernetischen Wesen   Rowohlt 1993    [Bra95] Brauer/Brauer: Informatik – das neue Paradigma  LOG IN 4, 1995    [Bra97] Brandl, Werner: Lernen  als „konstruktiver“ Prozess:  Trugbild oder Wirklichkeit?    schulmagazin 5 bis 10, Heft 5/1997    [Bro69] Brockhaus Enz yklopädie, 17. Auflage   Brockhaus 1969    [Bru67] Bruner, Jerome: Toward  a Theory of Instruction   Harvard Press 1967    [Bru70] Bruner, Jerome: Der Prozeß der Erziehung  Schwann 1970    [Bur94] Burkert, Jürgen: Umorien tierung des Informatikunterrichts   LOG IN 4, 1994    [Bus87] Bussmann, H. / Heymann, H.-W.: Computer und Allgemeinbildung  Neue Sammlung 1 1987    [Con94] Convey, P. / Highfield, R.: Der Pfeil de r Zeit in der Selbstor ganisation des Lebens   Rowohlt 1994    [Cra88] Cramer, Friedrich:  Chaos und Ordnung, die komplexe Struktur des Lebendigen   Deutsche Verlagsanstalt 1988    [Dah00] Dahlke, M. / Ro senthal, K.-H.: Konstr uktivistische Didaktik  http://www.konstruktivistischedidaktik.de/start.htm, 2000    [Dan00] Daniels / Berglund / Petre: Some thoughts on international projects in the undergraduate education   http://www.docs.uu.se/~matsd/EPCoS.html, 2000    [Dav94] Davis, Philip J. und Hers h, Reuben : Erfahrung Mathematik   Birkhäuser 1994    [DLP02] Disney Learning Partership: Constr uctivism as a Paradigm for Teaching and  Learning http://www.thirteen.org/edonline/con cept2class/month2/e xplor_sub1.html, 2002    [Dob97a] Doberenz/Kowalski: Borland Delphi 3 für Einsteiger und Fortgeschrittene   Hanser 1997    [Dob97b] Doberenz/Kowalski: Borl and Delphi 3 für Profis   Hanser 1997    [Dob98] Doberenz/Druckenmüller: Java  Hanser 1998    [Dor99] Dorninger, Christian: Ne ue Medien und der Konstruktivismus   http://paedpsych.jk.uni-linz.ac.a t:4711/LEHRTEXTE/Lehrtexte.html, 1999   Literaturverzeichnis    126  [Dud97] Schüler Duden Informatik   Meyer 1997    [Eb398] Eberle, Franz: Das Po tential des Internet für Au sund Weiterbildung: Mythos und  Realität   Informatik/Informatique 6/98    [Eig75] Eigen, Manfred / Winkler, Ruthild: Das Spiel  Piper 1975    [Ele97] Electronics Workbench: Handbuch u. Technische Referenz   Interactiv Image Technologies 1997    [Ent96] Entsminger, G.: The Way of Delphi  Prentice Hall 1996    [Ess92] Essl, Karlheinz: Kompositorische K onsequenzen des Radikalen Konstruktivismus   http://www.essl.at/bibliogr /rad-konstr.html#fn1, 1992    [Fel97] Feldmann/Prüssel: L ogik-Simulation mit dem PC   Franzis 1997    [Fla96] Flanagan, David: Java in a Nutshell  O’Reilly 1996    [For97] Forneck, Hermann: Eine neue Konz eption informationstechnischer Allgemeinbildung   LOG IN 6, 1997    [Fri95] Friedrich, Steffen: Grundpositionen eines Schulfaches   LOG IN 5/6, 1995    [Fri96] Friedrich/Schubert/Schw ill: Informatik in der Schu le – ein Fach im Wandel   LOG IN 2, 1996    [Gas92] Gasper / Leiß / Spengler / Stimm: Technische und theoretische Informatik  BSV 1992    [Ger95] Gerhard, M. / Schuster, H.: Das digitale Universum Zelluläre Automaten als Modelle der Natur   Vieweg 1995    [GI01] Gesellschaft für Informatik: Empfeh lungen für ein Gesamtkonzept zur informatischen Bildung an allgem ein bildenden Schulen   Beilage LOG IN 2, 2001    [Gle90] Gleick, James: Chaos  Knaur 1990    [Hei 68] Heimann, P. / Otto, G. / Sc hulz, W.: Unterricht – Analyse und Planung   Schroedel 1968    [Hen96] Henze, N. / Nejdl, W.: Constructivis m in Computer Science Education: Evaluating  a Teleteaching Environment for Project Oriented Learning   http://www.kbs.uni-hannover.de /Arbeiten/Publikationen/1998    [Hen98] Henn, Hans-Wolfgang: Warum ma nchmal Katzen vom Himmel fallen …    in [His00]   Literaturverzeichnis    127  [Her74] Herschel, Rudolph: Einführung in die Theorie der Automaten, Sprachen und Algorithmen   Oldenbourg 1974    [Her94] Herget, Wilfried: Ziele und Inhalte des Informatikunterrichts – zum Vergleich   in [His94]    [Her98] Herget, Wilfried: Mode llbildung einmal anders – Beispiele zwischen Informatik  und Mathematik   in [His00]    [Her99] Hermes/Schumacher: Arbeitshefte Informatik Java  Klett 1999    [Hey95] Heymann, Hans-Werner: Zielsetzung en eines künftigen Mathematikund Informatikunterrichts   in [His95]    [His91] Hischer, Horst: Neue Technologien als Anlass einer erneut en Standortbestimmung  für den Mathematikunterricht, 1991    http://hischer.de/uds/forsch/publika t/hischer/artikel/madid91/index.htm    [His94] Hischer, Horst / Weiss, Michael (Hrsg.): Mathematikunterricht und Computer   Franzbecker 1995    [His95] Hischer, Horst / Weiss, Mi chael (Hrsg.): Fundamentale Ideen   Franzbecker 1995    [His00] Hischer, Horst (Hrsg.): Modellb ildung, Computer und Mathematikunterricht   Franzbecker 2000    [Hof79] Hofstadter, Douglas R.: Gödel, Escher, Bach   Klett-Cotta 1979    [Hof91] Hofstadter, D ouglas R.: Metamagicum   Greif 1991    [Hop96] Hoppe/Luther: Informatik und Schule  LOG IN 1, 1996    [Hub97] Hubwieser/Broy: Ein neuer Ansatz fü r den Informatikunterricht am Gymnasium   LOG IN 3/4, 1997    [Hub00] Hubwieser, Peter: Didaktik der Informatik   Springer 2000    [Hum95] Humberger, J. / Reichel, H.-Ch.: Fundamentale Ideen der angewandten Mathematik   BI 1995    [Hum00] Humbert, Ludger: Umsetzung von Gr undkonzepten der Informatik zur fachlichen  Orientierung im Informatikunterricht   www.informatica-didactica.de/Infor maticaDidactica/Issue1/Humbert, 2000    [Jac87] Jacobs, Konrad: Resultate – Ideen un d Entwicklungen in der Mathematik, Bd.1   Vieweg 1987    [Kip98] Kippenhahn, Rudolp: Verschlüsselte Botschaften   Rowohlt 1998   Literaturverzeichnis    128  [Kla76] Klafki, Wolfgang: Aspekte kriti sch-konstruktiver Er ziehungswissenschaft   Beltz 1976    [Kla85] Klafki, Wolfgang: Neue Studi en zur Bildungstheorie und Didaktik   Beltz 1985    [Kla96] Klafki, Wolfgang: Neue Studi en zur Bildungstheorie und Didaktik   Beltz 1996    [Kla98a] Klafki, Wolfgang: Gr undzüge kritisch-konstrukti ver Erziehungswissenschaft   Script 1998    [Kla98b] Klafki, Wolfgang: Se lbsttätigkeit als Grundprinzip des Lernens in der Schule   Script 1998    [Kla98c] Klafki, Wolfgang: Kr iterien einer guten Schule   Script 1998    [Koe95] Köhler, Hartmut: Comp utereinsatz: Krämergeist, Unreife und Vermessenheit  zugleich – Gedanken zur A llgemeinbildung, in [His95]    [Koe00] Koerber/Peters: Informatische Bildu ng in Deutschland – Di e Wurzeln der Zukunft   LOG IN 2, 2000    [Kop65] Kopp, Ferdinand: Didaktik in Leitgedanken  Auer 1965    [Krü00] Krüger, Guido: GoTo Java 2  Addison-Weslaey 2000    [Küc00] Küchlin, W. / Weber, A.: Einführung in  die Informatik, Objektorientiert mit Java   Springer 2000    [Lav98] v. Lavergne, Harro: Thesen zur aktuellen Orie ntierungslosigkeit    LOG IN 5, 1998    [LeB01] LeBlanc, Mark: Ethi cal Issues in Computing   http://www2.wheatonma.edu/academic/acad emicdept/MathCS/f aculty/mleblanc,  2001    [Leh92] Lehmann, Gabriele: Zi ele im Informatikunterricht   LOG IN 1, 1992    [Lei92] Leiß/Spengler/Stimm: Technische und theoretische Informatik  BSV 1992    [Lem00] Lemay, Laura: Java 2 Platform  SAMS 2000    [Mag00] Magenheim, Johann S.: Informatiksy stem und Dekonstruktion als didaktische Kategorien, Skript 2000    [Man91] Mandelbrot, Benoît: Die fraktale Geometrie der Natur  Birkhäuser 1991    [Mat95] Matcho/Faulkner: Using Delphi  Que 1995    [Mic98] Microsoft Visual J++ 6.0 Programmierhandbuch   Microsoft Press 1998   Literaturverzeichnis    129  [Mod87] Modrow, Eckart: BCD-Ziffernerkenner   LOG IN 7, 1987    [Mod91] Modrow, Eckart: Zur Didaktik des Informatik-Unterrichts, Band 1   Dümmler 1991    [Mod92a] Modow, Eckart: Zur Didaktik de s Informatik-Unterrichts, Band 2,   Dümmler 1992    [Mod92b] Modrow, Eckart: Automaten-Schaltwerke-Sprachen   Dümmler 1992    [Mod93] Modrow, Eckart: Datenbanka spekte im Informatikunterricht   Computer und Unterricht 10, 1993    [Mod94] Modrow, Eckart: Anfangs unterricht mit Mäusen, Knöpf en, Schaltern und anderen  „Spielzeugen“, INFORMATIK  betrifft uns 2, 1994    [Mod95a] Modrow, Eckart: Physikobj ekte im Informatikunterricht   INFORMATIK betrifft uns 1, 1995    [Mod95b] Modrow, Eckart: Ansatzpunkte zu Ände rungen im Mathematikunterricht aus Sicht  der Informatik   in [His95]    [Mod96a] Modrow, Eckart: Dateien-Datenbanken-Datenschutz  Dümmler 1996    [Mod96b] Modrow, Eckart: Von Bällen, Billard tischen und den Grenzen der Simulation   INFORMATIK betrifft uns 3, 1996    [Mod98] Modrow, Eckart: Informatik mit Delphi, Band 1  Dümmler 1998    [Mod00] Modrow, Eckart: Informatik mit Delphi, Band 2  Dümmler 2000    [Mon98] Monnerjahn, Rolf: Modellbildung und Simulation – durch Nachahmung zum Verständnis?    in [His00]    [Mül98] Müller, Klaus: Waru m bleibt Wissen träge? Ein Standpunkt zum Konstruktivismus  im Unterricht    http://idw-online.de /public/zeige_einrich tung.html?eid=105, 1998    [Neu98] Neupert, Pohlmann, Sch ubert: Positionen zur informa tischen Bildung an deutschen  Schulen, MNU/GI 1998    [Nie02] Nievergelt, Jürg: Folien zur Vorlesung   http://www.tedu.ethz.ch/dida ktik/id1_material.html, 2002    [Nöb79] Nöbauer, W. / Timischl, W.: Ma thematische Modelle in der Biologie   Vieweg 1979    [Pei98a] Peitgen, Heinz-Otto: Bausteine des Chaos  Rowohlt 1998    [Pei98b] Peitgen, Heinz-O tto: Bausteine der Ordnung   Rowohlt 1998     Literaturverzeichnis    130  [Pen91] Penrose, Roger: Computerdenken   Spektrum Verlag 1991    [Pet88] Peterson, Ivars: Mathematische Expeditionen  Spektrum Verlag 1988    [Ple98] Pleil, Thomas: Konstruktivismus im Unterricht: Warum bleibt Wissen träge?  http://idw-online.de /public/zeige_einrich tung.html?eid=105, 1998    [Pos91] Postman, Neil: Das Technopol   Fischer 1991    [Pot98] Potts, Steve: Java 1.2 How-To   SAMS 1998    [Pri81] Prigogine, I. / Stenge rs, I.: Dialog mit der Natur   Piper 1981    [Rec97] Rechenberg, Peter: Quo vadis Informatik?  LOG IN 1, 1997 [Rei95] Reiser/Wirth: Programmieren in Oberon  Addison-Wesley 1995    [Rei00] Reich, Kersten: Konstruktivismus  http://www.uni-koeln.de/ew-fak /Paeda/hp/reich/index.html, 2000    [Sche93] Schefe, P. / Hastedt, H. / Dittrich, Y. / Keil, G. (Hrsg.): Informatik und Philosophie   BI 1993    [Sche97] Schelhowe, Heide: Auf dem We g zu einer Theorie der Interaktion?   LOG IN 5, 1997    [Schm71] Schmitt, Alfred: Automaten – Algorithmen Gehirne  Suhrkamp 1971    [Schö95] Schöning, Uwe: Theoretische Informatik – kurzgefasst  Spektrum Verlag 1995    [Schr91] Schroeder, Manfred: Fr aktale, Chaos und Selbstähnlichkeit   Spektrum 1991    [Schu99] Schubert, Sigrid: Begleitmaterial zu r Vorlesung Einführung in die Didaktik der  Informatik WS 199/2000, Script 1999    [Schu01] Schulte, Carsten: Vom Modellieren zu m Gestalten – Objektor ientierung als Impuls  für einen neuen Informatikunterricht?   http://www.informatica-didactica.de /InformaticaDidactica/Schulte2001.htm, 2001    [Schw93a] Schwill, Andreas: Fundamentale  Ideen in Mathematik und Informatik   Script 1993    [Schw93b] Schwill, Andreas: Ob jektorientierte Programmierung   LOG IN 4, 1993    [Schw93c] Schwill, Andreas: Programmierstile  LOG IN 4, 1993    [Schw95] Schwill, Andreas: Fundamentale  Ideen in Mathematik und Informatik   in [His95]   Literaturverzeichnis    131  [Schw96] Schwill, Andreas: Vorlesunge n zur Didaktik der Informatik   Script 1996/97    [Schw00] Schwill, Andreas: Didaktisch-met hodische Ansätze der Informatikausbildung   Script 2000    [Sha76] Shannon, C./ Weaver, W.: Mathema tische Grundlagen der Informationstheorie   Oldenbourg 1976    [Sta98] Standish, Thomas: Data Structures in Java   Addison-Wesley 1998    [Ste01] Steelman report: Computing Cu rricula 2001 – Computer Science    The Joint Task Force on Computing Cu rricula IEEE Computer Society Association for Computing Machinery   http://www.acm.org/sigsec/cc2001/steelman, 2001    [Tho98] Thomas, Marco: Nebenläufi gkeit im Schulfach Informatik   Script Potsdam 1998    [Thi97] Thissen, Frank: Das Lernen neu er finden – konstruktivistische Grundlagen einer  Multimedia-Didaktik   LEARNTEC 97, Tagungsband, 1997    [Tho00] Thomas, Marco: Einführung in die Didaktik der Informatik  Begleitmaterial zur Vorlesung, Potsdam 2000/01    [Tuc96] Tucker, Alan B.: Strategic Direc tions in Computer Science Education    ACM  Computing Surveys 28(4), December 1996    [Vol85] Volpert, Walter: Zauberlehrlinge   Beltz 1985    [Vos00] Vossen/Witt: Grundlagen der theoretischen Informatik mit Anwendungen  Vieweg 2000    [Wag80] Wagenschein, Martin: Naturphänomene sehen und verstehen  Klett 1980    [Wäl99] Wällnitz, Elke: Vorlesung Didaktik der Informatik  Script Chemnitz 1999    [Wei85] Weizsäcker, Carl Friedrich v.: Aufbau der Physik  Hanser 1985    [Wei86] Weizsäcker, Carl Friedrich v.: Die Einheit der Natur  DTV 1986    [Wer98] Werning, Rolf : Konstruktivis mus. Eine Anregung für die Pädagogik?   Pädagogik 7-8/98    [Wir84] Wirth, Niklaus: Compilerbau  Teubner 1984    [Wol97] Wolff, Dieter: Lernstrategien: Ein Weg zu mehr Lernerautonomie  http://www.ualberta.ca/~german/idv/wolff1.htm, 1997      Materialien zu Beispiel 1    132  Materialien 1: Java-Quelltext zu Beispiel 1  import java.awt.*;  import java.applet.*;   import java.awt.event.*;  public class Applet1 extends Applet implements ActionListener {   // Oberflächenelemente    Label lanf        = new Label("Anfangszeichen:");   Label lein        = new Label("Eingabe:");  Label lversch     = new Label("Verschlüsselt:");  Label lentsch     = new Label("Entschlüsselt:");   Button bversch    = new Button("verschlüsseln!");   Button bentsch    = new Button("entschlüsseln!");  TextField tanf    = new TextField(1);  TextField tein    = new TextField(40);  TextField tversch = new TextField(40);   TextField tentsch = new TextField(40);      char zustand = 'B'; //Elemente des Automaten: aktueller Zustand       private char u(char e) //Überführungsfunktion    {   return e;  }      private char g(char e) //Ausgabefunktion    {   int neu = (charToInt(zustand) ^ charToInt(e));   return intToChar(neu);   }      private int charToInt(char c)  //wandelt Zeichen in Zahlen, 'A'--> 0    {    return (int)c (int)'A';   }     private char intToChar(int i)  //wandelt Zahlen in Zeichen    {    char c = (char)(i + (int)'A');   return c;  }    public void init() //konfiguriert die Oberfläche    {   setLayout(null);   lanf.setBounds(10,10,80,20); add(lanf);   tanf.setBounds(90,10,15,20); add(tanf);    lein.setBounds(10,50,80,20); add(lein);    tein.setBounds(90,50,400,20); add(tein);   lversch.setBounds(10,90,80,20); add(lversch);   tversch.setBounds(90,90,400,20); add(tversch);   lentsch.setBounds(10,130,80,20); add(lentsch);    tentsch.setBounds(90,130,400,20); add(tentsch);    bversch.addActionListener(this);   bversch.setBounds(200,170,80,20); add(bversch);   bentsch.addActionListener(this);   bentsch.setBounds(300,170,80,20); add(bentsch);    tanf.setText("B");   } Materialien zu Beispiel 1    133   public void actionPerformed(ActionEvent e) //Verteiler auf die Unterprogramme .   {    if(e.getActionCommand().equals("verschlüsseln!"))      verschluessele();   else entschluessele();  }      private void verschluessele() //verschlüsselt die Eingabe    {   String eingabe,ausgabe,anfang;        eingabe =  tein.getText();   ausgabe = "";   anfang = tanf.getText();   if (anfang.length()<1)    {      zustand = 'B';    tanf.setText("B");   }    else zustand = anfang.charAt(0);    for(int i=0;i<eingabe.length();i++)    {     char c  = eingabe.charAt(i);    ausgabe = ausgabe + g(c);    zustand = u(c);    }     tversch.setText(ausgabe);  }     private void entschluessele() //entschlüsselt    {    String eingabe,ausgabe,anfang;      eingabe =  tversch.getText();    ausgabe = "";    anfang = tanf.getText();   if (anfang.length()<1)   {     zustand = 'B';     tanf.setText("B");    }    else zustand = anfang.charAt(0);   for(int i=0;i<eingabe.length();i++)   {      char c  = eingabe.charAt(i);     char a  = g(c);    ausgabe = ausgabe + a;    zustand = u(a);   }    tentsch.setText(ausgabe);   }  } Materialien zu Beispiel 3    134  Materialien 2: Delphi-Quelltexte zu Beispiel 3  unit uZellulaererAutomat;  //Steuerprogramm     interface uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs, ExtCtrls, StdCtrls;   type  TForm1 = class(TForm)        Panel1: TPanel;       Ende: TButton;       Start: TButton;       Label1: TLabel;        gAnzeige: TEdit;        Stop: TButton;       Neustart: TButton;       Timer1: TTimer;       procedure EndeClick(Sender: TObject);        procedure StartClick(Sender: TObject);        procedure StopClick(Sender: TObject);       procedure NeustartClick(Sender: TObject);       procedure Timer1Timer(Sender: TObject);       procedure FormCreate(Sender: TObject);        end;   var Form1: TForm1;  implementation  uses uWelt;  {$R *.dfm}   const dt = 10; //Zeitintervall für die Timer-gesteuerte Simulation     var generation: integer = 0;   procedure init; //initialisiert das System   begin  generation := 0; Form1.gAnzeige.text := IntToStr(generation); welt.init; end;   procedure TForm1.EndeClick(Sender: TObject);  //Programmende   begin halt end;    procedure TForm1.StartClick(Sender: TObject);  //Simulation starten   begin Timer1.Interval := dt;  end;    procedure TForm1.StopClick(Sender: TObject);  //Simulation stoppen   begin  Timer1.Interval := 0;  end;   procedure TForm1.NeustartClick(Sender: TObject);  //neue Simulation   begin  init  end; Materialien zu Beispiel 3    135  procedure TForm1.Timer1Timer(Sender: TObject);  //Aufruf einer Aktionskette in der „Welt“   begin                                              welt.handle; generation := generation + 1; Form1.gAnzeige.text := IntToStr(generation); end;    procedure TForm1.FormCreate(Sender: TObject);  //einmal die „Welt“ erzeugen   begin welt := twelt.create(Form1);  init  end;  initialization randomize;    end.  (*-----------------------------------------------------------------------*)   unit uAutomat; //Vorlage für die Gitterautomaten    interface uses Graphics, ExtCtrls, Controls, SysUtils;    type    tPartner = class(tPanel)  //die Gitterautomaten       public     zustand, neuerZustand, punkte, xpos,ypos: integer;      wasDerNachbarTat                        : array[1..8] of boolean;      constructor create(aOwner: tWincontrol; x,y: integer);     procedure init;     procedure zeigeDich;     procedure handelMitDenNachbarn;      procedure wechseleZustand;      function handelsergebnisMit(p: tPartner; lage: integer): integer;     function kooperiertMit( lage: integer): boolean;      end;   implementation  uses uWelt;  constructor tPartner.create(aOwner: tWincontrol; x,y: integer); begin  inherited create(aOwner);  SetBounds(11*x,11*y+40,10,10); parent   := aOwner; name := 'Px'+IntToStr(x)+'y'+IntToStr(y); caption := '';  xpos := x;  ypos := y; end;  procedure tPartner.init;  var i: integer;  begin  zustand := random(3)+1;  //Strategie festlegen   neuerZustand := zustand;  for i := 1 to 8 do wasDerNachbarTat[i] := true;  punkte := 0; zeigeDich end; Materialien zu Beispiel 3    136  procedure tPartner.zeigeDich;  begin  case zustand of    1: color := clGreen;  //der Naive: kooperiert immer     2: color := clRed;    //der Betrüger: kooperiert nie     3: color := clYellow; //TitForTat    end; show end;    procedure tPartner.handelMitDenNachbarn; var xlinks,xrechts,yoben,yunten: integer; begin  if xpos = 0  //eine "Zylinderwelt" in beiden Richtungen     then xlinks  := uwelt.xmax     else xlinks := xpos-1;    if xpos = uwelt.xmax then xrechts  := 0 else xrechts := xpos+1; if ypos = 0 then yoben  := uwelt.ymax else yoben := ypos-1;  if ypos = uwelt.ymax then yunten  := 0 else yunten := ypos+1;   punkte := handelsergebnisMit(welt.elemente[xlinks,ypos],1); punkte := punkte + handelsergebnisMit(welt.elemente[xlinks,yoben],2); punkte := punkte + handelsergebnisMit(welt.elemente[xpos,yoben],3);  punkte := punkte + handelsergebnisMit(welt.elemente[xrechts,yoben],4);  punkte := punkte + handelsergebnisMit(welt.elemente[xrechts,ypos],5); punkte := punkte + handelsergebnisMit(welt.elemente[xrechts,yunten],6); punkte := punkte + handelsergebnisMit(welt.elemente[xpos,yunten],7); punkte := punkte + handelsergebnisMit(welt.elemente[xlinks,yunten],8); end;    procedure tPartner.wechseleZustand; var xlinks,xrechts,yoben,yunten,bestPunkte,bestZustand: integer; begin  if xpos = 0  //eine "Zylinderwelt" in beiden Richtungen     then xlinks  := uwelt.xmax     else xlinks := xpos-1;    if xpos = uwelt.xmax then xrechts  := 0 else xrechts := xpos+1; if ypos = 0 then yoben  := uwelt.ymax else yoben := ypos-1;  if ypos = uwelt.ymax then yunten  := 0 else yunten := ypos+1;    bestPunkte := punkte;  //feststellen, wer von den Nachbarn die meisten Punkte hat   bestZustand := zustand;  if bestPunkte < welt.elemente[xlinks,ypos].punkte then begin    bestpunkte := welt.elemente[xlinks,ypos].punkte;   bestZustand := welt.elemente[xlinks,ypos].zustand;   end; if bestPunkte < welt.elemente[xlinks,yoben].punkte then begin    bestpunkte := welt.elemente[xlinks,yoben].punkte;    bestZustand := welt.elemente[xlinks,yoben].zustand;   end; if bestPunkte < welt.elemente[xpos,yoben].punkte then begin   bestpunkte := welt.elemente[xpos,yoben].punkte;    bestZustand := welt.elemente[xpos,yoben].zustand;    end; if bestPunkte < welt.elemente[xrechts,yoben].punkte then begin   bestpunkte := welt.elemente[xrechts,yoben].punkte;   bestZustand := welt.elemente[xrechts,yoben].zustand;    end;  if bestPunkte < welt.elemente[xrechts,ypos].punkte then begin   bestpunkte := welt.elemente[xrechts,ypos].punkte;   bestZustand := welt.elemente[xrechts,ypos].zustand;   end; Materialien zu Beispiel 3    137  if bestPunkte < welt.elemente[xrechts,yunten].punkte then begin    bestpunkte := welt.elemente[xrechts,yunten].punkte;    bestZustand := welt.elemente[xrechts,yunten].zustand;   end; if bestPunkte < welt.elemente[xpos,yunten].punkte then begin   bestpunkte := welt.elemente[xpos,yunten].punkte;    bestZustand := welt.elemente[xpos,yunten].zustand;    end; if bestPunkte < welt.elemente[xlinks,yunten].punkte then begin   bestpunkte := welt.elemente[xlinks,yunten].punkte;   bestZustand := welt.elemente[xlinks,yunten].zustand;    end;  neuerZustand := bestZustand;  //da zeigt sich der Opportunismus   end;  function tPartner.handelsergebnisMit(p: tPartner; lage: integer): integer;  var inverseLage        : integer;      derAndereKooperiert: boolean;     ichKooperiere      : boolean; begin case lage of    1..4: inverseLage := 4+lage;    5..8: inverseLage := lage-4;   end;  derAndereKooperiert := p.kooperiertMit(inverseLage); //nachsehen, was der Partner tut  wasDerNachbarTat[lage] := derAndereKooperiert;  ichKooperiere := kooperiertMit(lage);  if ichKooperiere                      //jetzt reagieren     then if derAndereKooperiert      then result := random(9)+2      else result := 0 else   if derAndereKooperiert     then result := random(20)      else result := random(2);  end;  function tPartner.kooperiertMit( lage: integer): boolean; begin  case zustand of    1: result := true;                   //der Naive: kooperiert immer     2: result := false;                  //der Betrüger: kooperiert nie     3: result := wasDerNachbarTat[lage]; //TitForTat    end  end;  end.    (*-----------------------------------------------------------------------*)                  Materialien zu Beispiel 3    138  unit uWelt;  //die Welt der Gitterautomaten: der zelluläre Automat     interface uses Graphics,ExtCtrls,Controls,uAutomat;   const xmax = 49; ymax = 49;  //Gittermaße     type   tWelt = class     public      elemente: array[0..xmax,0..ymax] of tPartner;      constructor create(aOwner: tWincontrol);     procedure init;     procedure handle;     end;        var welt: tWelt;  implementation   constructor tWelt.create(aOwner: tWincontrol);  var i,j: integer; begin for i := 0 to xmax do   for j := 0 to ymax do      elemente[i,j] := tPartner.create(aOwner,i,j);  //das dauert!   end;  procedure twelt.init;  var i,j: integer;  begin for i := 0 to xmax do   for j := 0 to ymax do     elemente[i,j].init;   end;   procedure tWelt.handle; var i,j: integer; begin  for i := 0 to xmax do  //alle Automaten treiben Handel mit den Nachbarn     for j := 0 to ymax do     elemente[i,j].handelMitDenNachbarn;  for i := 0 to xmax do  //alle Automaten überprüfen die Umgebung     for j := 0 to ymax do      elemente[i,j].wechseleZustand;  for i := 0 to xmax do  // und wechseln ggf. ihren Zustand     for j := 0 to ymax do      elemente[i,j].zustand := elemente[i,j].neuerZustand;  for i := 0 to xmax do  //und zeigen sich wieder     for j := 0 to ymax do     elemente[i,j].zeigeDich;  end;   end.  Materialien zu Beispiel 4    139  Materialien 3: Delphi-Quelltexte zu Beispiel 4  unit uTurtle;  interface  uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs, Menus, StdCtrls, ExtCtrls, OleCtrls, SPIRITLib_TLB;  type TLEGO = class(TForm)    MainMenu1: TMainMenu;     Datei1: TMenuItem;     Oeffnen: TMenuItem;    Speichern1: TMenuItem;    N1: TMenuItem;    Ende1: TMenuItem;     Programm: TMenuItem;     LEGO: TMenuItem;    Anzeige: TMenuItem;    Neu1: TMenuItem;    Editor: TMemo;     OpenDialog1: TOpenDialog;     SaveDialog1: TSaveDialog;    Editieren: TMenuItem;    bersetzen1: TMenuItem;    Ausfhren2: TMenuItem;     Verbindungstest1: TMenuItem;     ZielBildschirm1: TMenuItem;    ZielRCX1: TMenuItem;    Backup: TMemo;    helpmemo: TMemo;     Image1: TImage;     Befehle: TMemo;    Quelltext1: TMenuItem;    Quelltext2: TMenuItem;    Bild1: TMenuItem;     Bildlschen1: TMenuItem;     Spirit1: TSpirit;    Konstantenangeben1: TMenuItem;    Bewegungskonstanteeingeben1: TMenuItem;    Timer1: TTimer;     procedure Ende1Click(Sender: TObject);     procedure Neu1Click(Sender: TObject);    procedure OeffnenClick(Sender: TObject);    procedure Speichern1Click(Sender: TObject);    procedure EditierenClick(Sender: TObject);     procedure bersetzen1Click(Sender: TObject);     procedure FormCreate(Sender: TObject);    procedure Ausfhren2Click(Sender: TObject);    procedure Quelltext1Click(Sender: TObject);    procedure Quelltext2Click(Sender: TObject);     procedure Bild1Click(Sender: TObject);     procedure Bildlschen1Click(Sender: TObject);    procedure EditorKeyUp(Sender: TObject; var Key: Word;   Shift:TShiftState);     procedure Verbindungstest1Click(Sender: TObject);     procedure ZielBildschirm1Click(Sender: TObject);     procedure ZielRCX1Click(Sender: TObject);    procedure Bewegungskonstanteeingeben1Click(Sender: TObject);    procedure Konstantenangeben1Click(Sender: TObject);    procedure Timer1Timer(Sender: TObject);     procedure EditorMouseUp(Sender: TObject; Button: TMouseButton;      Shift: TShiftState; X, Y: Integer);    end; Materialien zu Beispiel 4    140  var LEGO: TLEGO;    implementation {$R *.dfm}  type  tScreenTurtle = class     x,y : single;    w,d: integer;    constructor init(xn,yn: single; dn: integer);    procedure turn(i: integer);     procedure move(i: integer);     procedure show;    procedure hide;    end;   tLEGOTurtle = class     UZeit, dt: integer;    M1an,M2an: boolean;    constructor init;    procedure turn(i: integer);    procedure move(i: integer);     function PruefeVerbindung: boolean;     end;  tKeller = class    speicherband: string;     startzeichen: char;     constructor init(c: char);    function erstes: char;    function pull: char;    procedure push(c: char);     end;   var    DateiGespeichert: boolean=false; //Zustand der Quelldatei     DateiGeaendert: boolean = false;    DateiUebersetzt: boolean = false;   Dateiname: string='NeueDatei.logo';    Ausgabeziel: (RCX,Screen)=Screen; //Umschalten zwischen Bildschirm und LEGO-RCX    breite,hoehe: integer; //Bildschirmdaten     turtle: tScreenTurtle; // die beiden Ausgabegeräte     LTurtle: tLEGOTurtle;   //---------------------------------------------------Methoden der Screenturtle ----------------------------------------------- constructor tScreenTurtle.init(xn,yn: single; dn: integer);  begin inherited create;  x := xn; y := yn; w := 0; d := dn;  show; end;  procedure tScreenTurtle.Show;  begin  with LEGO.Image1.Canvas do   begin   pen.mode := pmNotXOR;   pen.Color := clBlack;    brush.color := clRed;    brush.Style := bsSolid;   ellipse(round(x-d),round(y-d),round(x+d),round(y+d));   moveto(round(x),round(y)); Materialien zu Beispiel 4    141    lineto(round(x+2*d*cos(pi/180*w)),round(y+2*d*sin(pi/180*w)));    pen.mode := pmCopy;    end; end;  procedure tScreenTurtle.hide;  begin show end;   procedure tScreenTurtle.move(i: integer); begin hide;  with LEGO.Image1.Canvas do    begin   moveto(round(x),round(y));   x := x + i*cos(Pi/180*w);   y := y + i * sin(Pi/180*w);    Lineto(Round(x),round(y));    end; show; end;  procedure tScreenTurtle.turn(i: integer);  begin  hide; w := (w+i) mod 360; show; end;    //---------------------------------------------------Methoden der LEGOturtle ----------------------------------------------- constructor tLEGOTurtle.init;  begin  inherited create;  UZeit := 60; dt := 10; if PruefeVerbindung then LEGO.Spirit1.deletetask(1); M1an := false; M2an := false; end;    function tLEGOTurtle.PruefeVerbindung: boolean; begin LEGO.Spirit1.InitComm; if not LEGO.Spirit1.PBAliveOrNot    then begin       showmessage('Die Verbindung zum RCX ist unterbrochen!');      result := false      end   else result := true  end;   procedure tLEGOTurtle.move(i: integer); begin if not(M1an and M2an) then begin     LEGO.spirit1.on_('02');     LEGO.Helpmemo.Lines.add('RCX: On_(''02'')');    M1an := true;    M2an := true;    end  else if not M1an then begin          LEGO.spirit1.on_('0');         LEGO.Helpmemo.Lines.add('RCX: On_(''0'')');         M1an := true;         end       else begin         LEGO.spirit1.on_('2'); Materialien zu Beispiel 4    142         LEGO.Helpmemo.Lines.add('RCX: On_(''2'')');         M2an := true;         end; LEGO.spirit1.wait(2,round(i*dt*0.01)); LEGO.Helpmemo.Lines.add('RCX: Wait(2,'+IntToStr(i*dt)+')'); end;    procedure tLEGOTurtle.turn(i: integer); begin if i < 0 then begin   if M2an then begin     LEGO.spirit1.off('2');     LEGO.Helpmemo.Lines.add('RCX: Off(''2'')');    M2an := false;    end;   if not M1an then begin     LEGO.spirit1.on_('0');     LEGO.Helpmemo.Lines.add('RCX: On_(''0'')');    M1an := true;    end   end else begin    if M1an then begin     LEGO.spirit1.off('0');    LEGO.Helpmemo.Lines.add('RCX: Off(''0'')');    M1an := false;    end;    if not M2an then begin     LEGO.spirit1.on_('2');    LEGO.Helpmemo.Lines.add('RCX: On_(''2'')');    M2an := true;    end    end;  LEGO.Spirit1.Wait(2,round(UZeit/360*i)); LEGO.Helpmemo.Lines.add('RCX: Wait(2,'+IntToStr(round(UZeit/360*i))+')'); end;   //---------------------------------------------------Kellermethoden ----------------------------------------------------------- constructor tKeller.init(c: char);  begin inherited create;  speicherband := c;  startzeichen := c; end;  function tKeller.erstes: char;  begin  if speicherband<>'' then result := speicherband[1] else result := ' ' end;  function tKeller.pull: char;  begin  if speicherband<>'' then begin   result := speicherband[1];   delete(speicherband,1,1)   end  else result := ' '  end;  procedure tKeller.push(c: char); begin  speicherband := c + speicherband  end; Materialien zu Beispiel 4    143  //---------------------------------------------------Hilfsmethoden -------------------------------------------------------------   //---------------------------------Kopiert die Zeilen einer Memokomponenten in eine andere -------------------------- procedure Kopiere(quelle,ziel:tMemo);  var i: integer;  begin  ziel.lines.clear; for i := 0 to Quelle.lines.count do    ziel.lines.add(quelle.lines.strings[i]); end;    //---------------------------------------------------Anfangswerte festlegen -------------------------------------------------- procedure TLEGO.FormCreate(Sender: TObject);  begin  Editor.Lines.Clear;  Backup.lines.clear; breite := image1.Width; hoehe := image1.Height; Turtle := tScreenTurtle.init(breite div 2, hoehe div 2,5);  LTurtle:= tLEGOTurtle.init;  end;   //---------------------------------------------------Eventhandler  des Menüs ------------------------------------------------   //---------------------------------------------------Neue Datei anlegen ------------------------------------------------------- procedure TLEGO.Neu1Click(Sender: TObject);  begin if not DateiGespeichert and (Editor.lines.count>0) then begin    if MessageDlg('Wollen Sie Ihr Programm speichern?',                        mtInformation,[mbYes,mbNo,mbAbort],0)=mrYes     then begin       Savedialog1.FileName := Dateiname;       if Savedialog1.Execute then begin          Dateiname := Opendialog1.FileName;          if Dateiname <> '' then begin           if pos('.logo',Dateiname)=0 then Dateiname := Dateiname+'.logo';           Editor.lines.SaveToFile(Dateiname);           DateiGespeichert := true;            end;        end     end   end; Editor.Lines.Clear;  Dateiname := 'NeueDatei.logo';  DateiGespeichert := false; DateiUebersetzt := false; end;   //---------------------------------------------------Datei öffnen --------------------------------------------------------------- procedure TLEGO.OeffnenClick(Sender: TObject);  begin if not DateiGespeichert and (Editor.lines.count>0) then begin    if MessageDlg('Wollen Sie Ihr Programm speichern?',  mtInformation,[mbYes,mbNo,mbAbort],0)=mrYes     then begin       Savedialog1.FileName := Dateiname;       if Savedialog1.Execute then begin          Dateiname := Opendialog1.FileName;          if Dateiname <> '' then begin           if pos('.logo',Dateiname)=0 then Dateiname := Dateiname+'.logo';           Editor.lines.SaveToFile(Dateiname);           DateiGespeichert := true; Materialien zu Beispiel 4    144            end;        end      end   end; if Opendialog1.Execute then begin   Dateiname := Opendialog1.FileName;    if Dateiname <> '' then begin      Editor.lines.LoadFromFile(Dateiname);     DateiGeaendert := false;     DateiUebersetzt := false;     end;    end  end;   //---------------------------------------------------Datei speichern ------------------------------------------------------------ procedure TLEGO.Speichern1Click(Sender: TObject);  begin  Savedialog1.FileName := Dateiname; if Savedialog1.Execute then begin   Dateiname := Savedialog1.FileName;   if Dateiname <> '' then begin    if pos('.logo',Dateiname)=0 then Dateiname := Dateiname+'.logo';      Editor.lines.SaveToFile(Dateiname);     DateiGespeichert := true;     end;   end  end;    //---------------------------------------------------Programm beenden ------------------------------------------------------- procedure TLEGO.Ende1Click(Sender: TObject);  begin  if not DateiGespeichert then begin   if MessageDlg('Wollen Sie Ihr Programm speichern?',mtInformation,[mbYes,mbNo,mbAbort],0)=mrYes     then begin        Savedialog1.FileName := Dateiname;        if Savedialog1.Execute then begin         Dateiname := Opendialog1.FileName;         if Dateiname <> '' then begin           if pos('.logo',Dateiname)=0 then Dateiname := Dateiname+'.logo';            Editor.lines.SaveToFile(Dateiname);            DateiGespeichert := true;           end;       end     end    end;  halt end;   //---------------------------------------------------Programm editieren ------------------------------------------------------ procedure TLEGO.EditierenClick(Sender: TObject);  begin Editor.show; Helpmemo.Hide; Image1.Hide;  Befehle.Hide;  if Dateiname ='' then begin    Editor.Lines.Clear;    Dateiname := 'NeueDatei.logo';    DateiGespeichert := false;     DateiUebersetzt := false;     end    else if Backup.Lines.count > 0 then begin Materialien zu Beispiel 4    145       Kopiere(Backup,Editor);       Backup.lines.Clear;       end; Editor.show; end;   //---------------------------------------------------Programm übersetzen ---------------------------------------------------- procedure TLEGO.bersetzen1Click(Sender: TObject);  type tZustand =(s0,s1,s2,s3,s4,s5,s6,s7,se,sf); var s                  : tZustand;     c                  : char;      Zeile,fZeile,Befehl: string;      keller             : tKeller; //Keller     i,j,fnr            : integer;     anfang             : boolean;   function u(s: tZustand; c: char): tZustand;  //Überführungsfunktion des Parsers  begin case s of   s0: case c of          'W'        : result := s2;          'V','R','L': result := s1;         '$'        : result := se;         else begin           result := sf;            fnr := 1;            end         end;   s1: case c of         '0'..'9'   : result := s7;          else begin            result := sf;           fnr := 2;           end         end;    s2:case c of          '0'..'9'   : result := s3;          else begin           result := sf;           fnr := 2;            end          end;   s3: case c of         '0'..'9'   : result := s3;         '('        : begin                       keller.push('(');                       result := s4;                      end;         else begin           result := sf;            fnr := 3;            end         end;   s4: case c of         ')'        : begin                       if keller.erstes ='(' then begin                         keller.pull;                        if keller.erstes=keller.startzeichen                            then result := s0                        else result := s4;                         end                       else begin Materialien zu Beispiel 4    146                         result := sf;                         fnr := 6                         end                      end;         'V','R','L': result := s5;         'W'        : result := s2;          else begin            result := sf;           fnr := 4;           end         end;    s5: case c of          '0'..'9'   : result := s6;         else begin           result := sf;           fnr := 2;            end          end;   s6: case c of         '0'..'9'   : result := s6;         ')'        : begin                    if keller.erstes ='(' then begin                         keller.pull;                         if keller.erstes=keller.startzeichen                            then result := s0                        else result := s4;                        end                       else begin                         result := sf;                        fnr := 6                        end                      end;          'V','R','L': result := s5;          'W'        : result := s2;         else begin           result := sf;           fnr := 5;            end          end;   s7: case c of         '0'..'9'   : result := s7;         'V','R','L': result := s1;          'W'        : result := s2;          '$'        : result := se;         else begin           result := sf;           fnr := 5;            end          end;   end; end;   begin  s := s0; keller := tKeller.init('#'); anfang := true; Kopiere(Editor,Backup);  Kopiere(Editor,helpmemo);  helpmemo.lines.add('$'); Editor.lines.Clear; Befehle.lines.clear; i := 0;  Zeile := helpmemo.lines.Strings[i]; Materialien zu Beispiel 4    147  Befehl := '';  while not (s in [se,sf]) do    begin   if zeile <>'$' then Editor.lines.Add(zeile);   fZeile := '';   for j := 1 to length(Zeile) do       begin       c := UpCase(Zeile[j]);      fZeile := fZeile + ' ';      if c in ['V','R','W','L','0'..'9','(',')','$'] then begin        s := u(s,c);         if s in [s1,s2,se] then           if anfang then anfang := false          else if (befehl <>'') and (keller.erstes=keller.startzeichen) then                  begin Befehle.lines.add(Befehl); Befehl := '' end;        Befehl := Befehl+c;         end;       if s in [se,sf] then break;      end;   i := i + 1;   Zeile := helpmemo.lines.strings[i];   end;  if keller.erstes<>keller.startzeichen then begin    s := sf;   fnr := 7   end; if s=se then begin    Editor.lines.clear;    if Befehl <>'' then Befehle.lines.add(Befehl);   for i := 0 to Befehle.Lines.Count do        Editor.lines.add(Befehle.lines.strings[i]);   Editor.Lines.add('ok! fehlerfrei übersetzt!');    DateiUebersetzt := true    end else begin    DateiUebersetzt := false;    delete(fzeile,length(fzeile),1);     fzeile := fzeile + '^: ';     case fnr of      1: fzeile := fzeile + 'Befehl erwartet!';      2: fzeile := fzeile + 'Zahl erwartet!';      3: fzeile := fzeile + 'Zahl oder "(" erwartet!';       4: fzeile := fzeile + 'Befehl oder ")" erwartet!';       5: fzeile := fzeile + 'Befehl oder Zahl erwartet!';      6: fzeile := fzeile + 'falsche Klammerstruktur!';      7: fzeile := fzeile + 'es fehlen schliessende Klammern!';      end;     Editor.lines.Add(fzeile);     end end;   //---------------------------------------------------Programm interpretieren ------------------------------------------------- procedure TLEGO.Ausfhren2Click(Sender: TObject);  var i: integer;   procedure interpretiere(s: string); //rekursiver Interpreter   var Klammerzahl, i, zahl: integer;      befehl,c: char;     Klammerinhalt: string;      Materialien zu Beispiel 4    148  function HoleZeichen: char;  var c: char;  begin c := s[1]; Delete(s,1,1); result := c; end;    function HoleZahl: integer; var c: char; i: integer; begin i := 0;  c := HoleZeichen;  while c in ['0'..'9'] do begin   i := 10*i+ord(C)-ord('0');   c := HoleZeichen;   end;  s := c + s;  result := i end;  begin s := s + '$';  befehl := HoleZeichen;  while befehl <> '$' do   begin   zahl := HoleZahl;   case befehl of      'V': if Ausgabeziel = Screen then Turtle.move(zahl)            else LTurtle.move(zahl);     'R': if Ausgabeziel = Screen then Turtle.turn(zahl)           else LTurtle.turn(zahl);     'L': if Ausgabeziel = Screen then Turtle.turn(-zahl)            else LTurtle.turn(-zahl);      'W': begin          Delete(s,1,1);          Klammerzahl := 1;          Klammerinhalt := '';           while Klammerzahl > 0 do begin             c := HoleZeichen;            case c of              ')': Klammerzahl := Klammerzahl 1;              '(': Klammerzahl := Klammerzahl + 1;               end;             Klammerinhalt := Klammerinhalt + c;             end;          Delete(Klammerinhalt,length(Klammerinhalt),1);          if Ausgabeziel = Screen then              for i := 1 to zahl do interpretiere(Klammerinhalt)           else begin             spirit1.loop(2,zahl);             Helpmemo.lines.Add('RCX: Loop(2,'+IntToStr(zahl)+')');             interpretiere(Klammerinhalt);              spirit1.endloop;              Helpmemo.lines.Add('RCX: EndLoop');             end          end;       end;    befehl := HoleZeichen;    end;  end;     Materialien zu Beispiel 4    149  begin  if not DateiUebersetzt then    begin   showmessage('Übersetzen Sie erst Ihr Programm!');   exit   end;  if Ausgabeziel=Screen then begin    Editor.Hide;   Befehle.Hide;   Image1.show;   end    else begin      spirit1.PlayTone(1000,100); //Anfang der RCX-Task       spirit1.DeleteTask(1);     spirit1.BeginOfTask(1);     Editor.Hide;      Image1.Hide;      Helpmemo.lines.clear;     helpmemo.Show;     Helpmemo.Lines.add('Datenübertragung zum RCX beginnt ...');     Helpmemo.Lines.add('----------------');      Helpmemo.Lines.add('RCX: PlayTone(1000,100)');      Helpmemo.Lines.add('RCX: DeleteTask(1)');     Helpmemo.Lines.add('RCX: BeginOfTask(1)');     end; for i := 0 to Befehle.lines.count do       interpretiere(Befehle.lines.strings[i]);  if Ausgabeziel=RCX then begin   spirit1.off('02');   Helpmemo.Lines.add('RCX: Off(''02'')');   LTurtle.M1an := false;    LTurtle.M2an := false;    spirit1.EndOfTask;   spirit1.PlaySystemSound(2);   spirit1.StartTask(1);    Helpmemo.Lines.add('RCX: EndOfTask(1)');  //Ende der RCX-Task     Helpmemo.Lines.add('RCX: PlaySystemSound(2)');    Timer1.Interval := 2000;  //kurz warten vor der Ausführung     end;  end;    //---------------------------------------------------Verbindung zum RCX prüfen -------------------------------------------- procedure TLEGO.Verbindungstest1Click(Sender: TObject);  begin  if LTurtle.PruefeVerbindung    then begin spirit1.PlayTone(600,100); Showmessage('Verbindung ok!') end   else showmessage('...keine Verbindung zum RCX!'); end;   //---------------------------------------------------Zeitkonstante für Translation -------------------------------------------- procedure TLEGO.Bewegungskonstanteeingeben1Click(Sender: TObject);  var h: integer; s: string; begin  h := LTurtle.dt;  if MessageDlg('Soll sich der RCX einen Schritt vorwärts bewegen?',                mtInformation,[mbYes,mbNo,mbAbort],0)=mrYes   then if LTurtle.PruefeVerbindung then begin           spirit1.On_('02');            spirit1.Wait(2,h);            spirit1.Off('02')           end         else showmessage('Die Verbindung zum RCX ist unterbrochen!'); Materialien zu Beispiel 4    150  try s := inputbox('Zeitintervall:',         'Geben Sie ein neues Zeitintervall für Bewegungen an!',IntToStr(h));      LTurtle.dt := StrToInt(s);   except LTurtle.dt := h;     Showmessage('Eingabefehler: alter Wert bleibt erhalten.')   end;  end;    //---------------------------------------------------Zeitkonstante für Rotation ----------------------------------------------- procedure TLEGO.Konstantenangeben1Click(Sender: TObject);  var h: integer; s: string;  begin  h := LTurtle.UZeit; if MessageDlg('Soll sich der RCX drehen?',                mtInformation,[mbYes,mbNo,mbAbort],0)=mrYes   then if LTurtle.PruefeVerbindung then begin            spirit1.On_('0');            end         else showmessage('Die Verbindung zum RCX ist unterbrochen!'); try s := inputbox('Drehzeit:','Geben Sie die Zeit für eine volle                                   Umdrehung Ihres Modells an!',IntToStr(h));      LTurtle.UZeit := StrToInt(s);    except LTurtle.UZeit := h;     Showmessage('Eingabefehler: alter Wert bleibt erhalten.')   end; end;    //---------------------------------------------------übersetzen Text anzeigen ------------------------------------------------ procedure TLEGO.Quelltext1Click(Sender: TObject);  begin  Befehle.show;  Editor.hide; Image1.Hide; end;   //------------------------------------------------Qu elltext anzeigen ---------------------------------------------------- procedure TLEGO.Quelltext2Click(Sender: TObject);  begin Editor.show;  Befehle.Hide;  Image1.Hide; end;   //---------------------------------------------------Bild anzeigen -------------------------------------------------------------- procedure TLEGO.Bild1Click(Sender: TObject);  begin Editor.hide; Befehle.Hide; Image1.show;  end;    //---------------------------------------------------Bild löschen --------------------------------------------------------------- procedure TLEGO.Bildlschen1Click(Sender: TObject);  begin  Turtle.hide; with Image1.Canvas do begin   brush.style := bsSolid;   brush.color := clWhite;    rectangle(0,0,Image1.width,Image1.height);    end;   Turtle.show; end; Materialien zu Beispiel 4    151  //---------------------------------------------------Umschalten auf Screen --------------------------------------------------- procedure TLEGO.ZielBildschirm1Click(Sender: TObject);  begin Ausgabeziel := Screen; end;   //---------------------------------------------------Umschalten auf RCX ----------------------------------------------------- procedure TLEGO.ZielRCX1Click(Sender: TObject);  begin Ausgabeziel := RCX;  end;    //---------------------------------------------------Änderungen merken ------------------------------------------------------ procedure TLEGO.EditorKeyUp(Sender: TObject; var Key: Word;    Shift: TShiftState);  begin DateiUebersetzt := false; DateiGespeichert := false; if Backup.Lines.count > 0 then begin    Kopiere(Backup,Editor);    Backup.lines.Clear;   end; end;   procedure TLEGO.EditorMouseUp(Sender: TObject; Button: TMouseButton;    Shift: TShiftState; X, Y: Integer); begin if Backup.Lines.count > 0 then begin   Kopiere(Backup,Editor);    Backup.lines.Clear;    end; end;   //---------------------------------------------------nach ei ner Pause RCX-Programm starten ------------------------------ procedure TLEGO.Timer1Timer(Sender: TObject);  begin spirit1.StartTask(1); Helpmemo.Lines.add('RCX: StartTask(1)'); Timer1.interval := 0;  end;   end. Lebenslauf    152  Lebenslauf  Name: Modrow    Vorname: Eckart    Amtsbezeichnung: Studiendirektor    Geburtsdatum: 18.2.1948    Geburtsort: Reinbek, Kreis Stormarn    Familienstand: verheiratet se it 13.12.1974, zwei Kinder    Ehefrau: Monika M odrow, geb. Dobbratz    Religionszugehörigkeit: ohne    Bildungsgang: Grundschule:  1954 – 1956, Brunsmark, Krs. Hzgt. Lauenburg      1956 – 1958, Wahlstedt, Kreis Segeberg     Gymnasium: 1558 – 1966, Dahlmannschule Bad Segeberg     Studium:  1969 – 1974, Physik, TU Braunschweig    Prüfungen: Reifeprüfu ng: 19.10.1966, Dahlmannschule Bad Segeberg     Diplomphysiker-Vorprüfung: 22.10.1971, TU Braunschweig     Diplomphysiker-Hauptprüfung: 8.11.1974, TU Braunschweig     2. Staatsexamen: 11.6. 1976, Studienseminar Emden    Lehrbefähigung: Mathematik, Physik   ab 4.7.1979 besondere Lehrbefähigung Informatik    Wehrdienst: 1.1.1967 – 31.12.1968, Lt. d. R.    Dienstlicher Werdegang:       1.2.1975 – 31.7.1976 Refer endar am Studienseminar Emden       1.8.1976 – 18.2.1984 Studienrat am Otto-Hahn-Gymn. Göttingen       19.2.1984 – 30.6.1992 Oberstud ienrat am Otto-Hahn-Gymn. Gö.       1.7.1992 –   Studiendirekt or am Max-Planck-Gymn. Gö.       ab 1.8.2000 Teilabordnung an die Universität Göttingen zur  Konzeption und Durchführung der „Virtuellen Leh-rerweiterbildung Informatik in Niedersachsen“ VLIN      ab 15.10.2002 Lehrauftrag zur Informatikdidaktik an der Universität Göttingen                                                                                                       27.10.2002, Scheden      