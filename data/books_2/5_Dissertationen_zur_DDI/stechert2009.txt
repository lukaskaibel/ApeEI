    Fachdidaktische Diskussion von Informatiksystemen und  der Kompetenzentwicklung im Informatikunterricht          Vom Fachbereich 12 – Elektrotechnik und Informatik    der Universität Siegen    zur Erlangung des akademischen Grades        Doktor der Naturwissenschaften  (Dr. rer. nat)    genehmigte Dissertation      von    Diplom-Informatiker  Peer Stechert         1. Gutachterin: Prof . Dr. Sigrid Schubert  2. Gutachter: Prof. Dr. Peter Hubwieser        Tag der mündlichen Prüfung:  04. Juni 2009                                                                                    gedruckt auf alterungsbeständigem holzund säurefreiem Papier  Kurzfassung In der vorliegenden Arbeit wird ein Unterrichtsmodell zur Kompetenzentwicklung mit Informatiksystemen f ur die Sekundarstufe II vorgestellt. Der Bedarf wird u. a. damit begr undet, dass Informatiksysteme zu Beginn des 21. Jahrhunderts allgegenw artig sind (Kapitel 1). F ur Kompetenzentwicklung mit Informatiksystemen sind diese in ihrer Einheit aus Hardware, Software und Vernetzung anhand ihres nach auen sichtbaren Verhaltens, der inneren Struktur und Implementierungsaspekten zu analysieren. Ausgehend vom Kompetenzbegri (Kapitel 2) und dem Informatiksystembegri (Kapitel 3) erfolgt eine Analyse des fachdidaktischen Forschungsstandes zur Kompetenzentwicklung mit Informatiksystemen. Die Ergebnisse lassen sich in die Bereiche (1) Bildungsziele, (2) Unterrichtsinhalte, (3) Lehr-Lernmethodik und (4) Lehr-Lernmedien aufteilen (Kapitel 4). In Kapitel 5 wird die Unterrichtsmodellentwicklung beschrieben. Den Zugang zu Informatiksystemen bildet in der vorliegenden Dissertationsschrift das nach auen sichtbare Verhalten. Es erfolgt eine Fokussierung auf vernetzte fundamentale Ideen der Informatik und Strukturmodelle von Informatiksystemen als Unterrichtsinhalte. Es wird begr undet, dass ausgew ahlte objektorientierte Entwurfsmuster vernetzte fundamentale Ideen repr asentieren. In Abschnitt 5.4 werden dementsprechend Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen klassiziert. Das systematische Erkunden des Verhaltens von Informatiksystemen wird im Informatikunterricht bisher kaum thematisiert. Es werden Sch ulertatigkeiten in Anlehnung an Unterrichtsexperimente angegeben, die Sch uler unterst utzen, Informatiksysteme bewusst und gezielt anzuwenden (Abschnitt 5.5). Bei dieser Lehr-Lernmethodik werden das nach auen sichtbare Verhalten von Informatiksystemen, im Sinne einer Black-Box, und das Wechselspiel von Verhalten und Struktur bei vorliegender Implementierung des Systems als White-Box analysiert. Die Adressierung schrittweise h oherer kognitiver Niveaustufen wird in die Entwicklung einbezogen. Unterst utzend wird f ur das Unterrichtsmodell lernf orderliche Software gestaltet, die vernetzte fundamentale Ideen in Entwurfsmustern und das Experimentieren aufgreift (Abschnitt 5.6). Schwerpunkte bilden im Unterrichtsmodell zwei Arten von lernf orderlicher Software: (1) Die Lernsoftware Pattern Park wurde von einer studentischen Projektgruppe entwickelt. In ihr k onnen in Entwurfsmustern enthaltene fundamentale Ideen der Informatik uber ihren Lebensweltbezug im Szenario eines Freizeitparks analysiert werden. (2) Als weitere Art Lernsoftware werden kleine Programme eingesetzt, deren innere Struktur durch ausgew ahlte Entwurfsmuster gebildet und deren Verhalten direkt durch die darin enthaltenen fundamentalen Ideen bestimmt wird. Diese Programme k onnen durch die Experimente im Unterricht systematisch untersucht werden. Mit dem Ziel, die normative Perspektive um R uckkopplung mit der Praxis zu erg anzen, werden zwei Erprobungen im Informatikunterricht vorgenommen. Diese liefern Erkenntnisse zur Machbarkeit des Unterrichtsmodells und dessen Akzeptanz durch die Sch uler (Kapitel 6 und 8). Exemplarisch umgesetzt werden die Themen Zugriskontrolle mit dem Proxymuster, Iteration mit dem Iteratormuster und Systemzust ande mit dem Zustandsmuster. Der intensive Austausch mit Informatiklehrpersonen in der Kooperationsschule uber Informatiksysteme und Kompetenzentwicklung sowie die Durchf uhrung von zwei Lehrerfortbildungen erg anzen die Beobachtungen im unterrichtlichen Geschehen. Die erste Unterrichtserprobung resultiert in einer Weiterentwicklung des Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung (Kapitel 7). Darin erfolgt eine Fokussierung auf das nach auen sichtbare Verhalten von Informatiksystemen und eine Verfeinerung der Perspektiven auf innere Struktur und ausgew ahlte Implementierungsaspekte. Anschlieend wird die zweite Unterrichtserprobung durchgef uhrt und evaluiert (Kapitel 8). Am Schluss der Forschungsarbeit steht ein in empirischen Phasen erprobtes Unterrichtsmodell.Abstract In the 21st century, informatics systems are ubiquitous. Therefore, the author presents an educational model for competencies with respect to informatics systems (Chapter 1). To achieve such competencies at upper secondary level, observable behaviour, internal structure and implementation aspects of informatics systems have to be analysed by students. Based on a denition of the terms competency (Chapter 2) and informatics system (Chapter 3), the state of the art in Didactics of Informatics is investigated. In the national and international scientic work, (1) educational objectives, (2) themes and subject matters, (3) teaching and learning methods, as well as (4) educational means and media are identied (Chapter 4). In Chapter 5 the development of the educational model is described. The approach to competencies with respect to informatics systems concentrates on the observable behaviour of the systems. We focus on networked fundamental ideas of informatics as a quality factor and structural models of informatics systems. Selected object-oriented design patterns represent networked fundamental ideas. In Section 5.4 design patterns as knowledge representations of fundamental ideas are classied. Systematic exploration of informatics systems is uncommon in informatics education at upper secondary level. Therefore, students' activities are developed according to educational experiments to enable students to use systems consciously (Section 5.5). Systematic exploration puts students in a position to analyse the observable behaviour as a black box. Given the source code and documentation of a system, experimenting with such a system relates behaviour to its internal structure. Succeeding cognitive processes are also considered in this approach. To support learning, software was developed, which emphasises fundamental ideas in design patterns and enables experimenting (Section 5.6). There are two kinds of learning software: (1) The learning software Pattern Park was developed by a student project group. In the software fundamental ideas within design patterns can be understood through a real-life analogy in the context of a theme park. (2) As a second kind of learning software we use small programs, whose internal structure is built by selected design patterns. Their observable behaviour depends on networked fundamental ideas of informatics. These programs can be analysed systematically by students. Aiming at complementing the normative perspective with concrete learning processes, two classroom practice projects were conducted. These oered results with respect to feasibility of the educational model and acceptance by the students (Chapter 6 and 8). Exemplarily, access control by Proxy design pattern, iteration by Iterator design pattern, and states of systems by State design pattern were chosen. Cooperation with teachers and conduction of teacher training workshops complement observations within the classroom projects. The rst classroom project resulted in a renement of theory to foster competencies with respect to informatics systems (Chapter 7). In particular, perspectives on informatics systems were elaborated. Afterwards, a second classroom project was conducted and evaluated (Chapter 8). In conclusion of the research project, there is an empirically tested educational model to foster competencies with respect to informatics systems.Vorwort Die vorliegende Dissertationsschrift entstand w ahrend meiner T atigkeit als wissenschaftlicher Mitarbeiter am Lehrstuhl"Didaktik der Informatik und E-Learning" an der Universit at Siegen. Ich m ochte mich bei Frau Prof. Dr. Sigrid Schubert bedanken f ur die intensive Betreuung meines Promotionsvorhabens und kontinuierliche F orderung meiner wissenschaftlichen Arbeit. Herrn Prof. Dr. Peter Hubwieser danke ich f ur die Ubernahme des Koreferats sowie f ur die zahlreichen guten Kommentare und Anregungen, die zur Pr azisierung meiner Vorstellungen beigetragen haben. Des Weiteren bedanke ich mich bei meinen Kollegen Christian Eibl, Stefan Freischlad und Christian Kollee f ur die hilfreichen Diskussionen und kritischen Nachfragen rund um das Unterrichtsmodell zur Kompetenzentwicklung mit Informatiksystemen. Den Projektpartnern im DFG-Projekt"Entwicklung von qualitativen und quantitativen Messverfahren zu Lehr-Lern-Prozessen f ur Modellierung und Systemverst andnis in der Informatik" von der Universit at Paderborn m ochte ich danken f ur die gewinnbringenden Diskussionen zur Entwicklung eines Kompetenzmodells. Namentlich genannt seien Prof. Dr. Johannes Magenheim, Wolfgang Nelles, Thomas Rhode und Prof. Dr. Niclas Schaper. Den Informatiklehrern Herrn Werner Eling, Frau Milena Ganea und Herrn Hartmud Koch danke ich fur die intensiven Diskussionen zur Kompetenzentwicklung mit Informatiksystemen sowie f ur die M oglichkeit, das Unterrichtsmodell in ihren Informatikkursen zu erproben. Den Sch ulerinnen und Sch ulern danke ich f ur die konstruktive Mitarbeit. Auerdem danke ich den aktiven Teilnehmern des"Internationalen Doktorandenkolloquiums zur Didaktik der Informatik { IDDI", die mir auf unseren Treen in Berlin, Z urich, Siegen und M unster viele Anregungen gaben. Auch an viele Studierende, die in ihren Hauptseminararbeiten, fachdidaktischen Praktika, Diplomarbeiten und der Projektgruppe Pattern Park zur Konkretisierung meiner Ideen beitrugen, geht ein groes Dankesch on. Genannt seien an dieser Stelle Carsten Dittich, Demian Franke, Lars Friedrich, Thomas Gerding, Daniel Graf, Florian Haug, Benjamin Klein, Rudolf Koslowski, Pamina Stupperich, Daniel S ulz, Jan Tenhumberg, Jonathan Ufer, Swetlana Warkentin und Michelle Weyer. Ganz besonderer Dank gilt meiner Freundin Kirstin Schwidrowski, meinen Groeltern, Eltern, und Geschwistern f ur die liebevolle Unterst utzung w ahrend der Promotion. Peer Stechert Siegen, im Februar 2009Inhaltsverzeichnis Abbildungsverzeichnis vii Tabellenverzeichnis ix Abkurzungsverzeichnis xi 1 Einleitung 1 1.1 Problemlage und Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.2 Forschungsmethodik und Forschungsverlauf . . . . . . . . . . . . . . . . . . . . . 3 1.2.1 Intervenierende Fachdidaktik . . . . . . . . . . . . . . . . . . . . . . . . . 3 1.2.2 Methodenkritik zur intervenierenden Fachdidaktik . . . . . . . . . . . . . 7 1.3 Gliederung der Arbeit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2 Einordnung in die Kompetenzdiskussion 13 2.1 Der Kompetenzbegri . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 2.1.1 Kompetenzdenition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 2.1.2 Schl usselkompetenzen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.1.3 ICT Literacy und Information Literacy . . . . . . . . . . . . . . . . . . . 16 2.1.4 Europ aischer Qualikationsrahmen f ur lebenslanges Lernen . . . . . . . . 17 2.1.5 Kompetenzstufung . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 2.2 Basiskompetenzen und Bildungsstandards . . . . . . . . . . . . . . . . . . . . . . 19 2.3 Kompetenz statt"Informatiksystemverst andnis" . . . . . . . . . . . . . . . . . . . 20 2.4 Zusammenfassung und Fazit f ur Kompetenzentwicklung mit Informatiksystemen 22 3 Der Informatiksystembegri 25 3.1 Uberblick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 3.2 Der Systembegri und fachdidaktische Schlussfolgerungen . . . . . . . . . . . . . 26 3.2.1 Begrisdenition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 3.2.2 Perspektiven auf Informatiksysteme . . . . . . . . . . . . . . . . . . . . . 29 3.2.3 Innere Struktur von Informatiksystemen . . . . . . . . . . . . . . . . . . . 31 3.3 Fazit und Kriterien f ur die Analyse des Forschungsstandes . . . . . . . . . . . . . 34ii Inhaltsverzeichnis 4 Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung 37 4.1 Uberblick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 4.2 Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik . . . . . . . . . . . . . . . . . . . . . . . . . 38 4.2.1 Informatiksysteme im algorithmen-, anwendungs-, und benutzerorientierten Informatikunterricht . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 4.2.2 Legitimation des Bildungswertes von Informatiksystemen durch fundamentale Ideen der Informatik . . . . . . . . . . . . . . . . . . . . . . . . . 45 4.2.3 Kompetenzentwicklung mit Informatiksystemen in systemorientierten Ansatzen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 4.2.4 Weitere Entwicklungen zu Informatiksystemen seit den 1990er Jahren . . 59 4.2.5 Informatiksysteme und Kompetenzentwicklung in den Bildungsstandards fur die Sekundarstufe I . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 4.3 Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik . . . . . . . . . . . . . . . . . . . . . . 79 4.3.1 Internationale Ausgangslage . . . . . . . . . . . . . . . . . . . . . . . . . . 79 4.3.2 Internationale Informatikcurricula . . . . . . . . . . . . . . . . . . . . . . 80 4.3.3 Informatiksysteme und Kompetenzentwicklung in Eberles Didaktik einer informationsund kommunikationstechnologischen Bildung auf der Sekundarstufe II . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 4.3.4 Internationale Forschungsund Erfahrungsberichte . . . . . . . . . . . . . 89 4.4 Fazit f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II 97 4.4.1 Uberblick und Strukturierung der Ergebnisse . . . . . . . . . . . . . . . . 97 4.4.2 Bildungsziele f ur Kompetenzentwicklung mit Informatiksystemen . . . . . 98 4.4.3 Empfehlungen zu Unterrichtsinhalten und -gegenst anden f ur Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . 99 4.4.4 Lehr-Lernmethodische Empfehlungen zur Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 4.4.5 Empfehlungen zu Lehr-Lernmedien f ur Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 4.4.6 Schlussfolgerungen und wissenschaftliche Fragestellungen . . . . . . . . . 103 5 Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 105 5.1 Uberblick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105 5.2 Zielsetzung und Denition des Unterrichtsmodells . . . . . . . . . . . . . . . . . . 106 5.2.1 Motivation f ur Komponenten eines Unterrichtsmodells . . . . . . . . . . . 106 5.2.2 Denition Unterrichtsmodell . . . . . . . . . . . . . . . . . . . . . . . . . 107 5.3 Strukturierung und Fokussierung der Bildungsziele, -inhalte, -methoden und medien . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109Inhaltsverzeichnis iii 5.3.1 Perspektiven auf Informatiksysteme . . . . . . . . . . . . . . . . . . . . . 109 5.3.2 Strategie zur Strukturierung der Unterrichtsinhalte . . . . . . . . . . . . . 110 5.4 Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 5.4.1 Entwurfsmuster zur F orderung der Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 5.4.2 Klassikation der Entwurfsmuster . . . . . . . . . . . . . . . . . . . . . . 124 5.4.3 Zwischenfazit zur Klassikation f ur Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131 5.4.4 Beitrag der durch die Klassikation ausgew ahlten Entwurfsmuster zur Kompetenzentwicklung mit Informatiksystemen am Beispiel der Zugriskontrolle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132 5.4.5 Darstellung der Vernetzung fundamentaler Ideen . . . . . . . . . . . . . . 139 5.4.6 Zusammenfassung zu Entwurfsmustern als Wissensrepr asentationen . . . 145 5.5 Entwicklung von Vorgehensweisen zur Erkundung von Informatiksystemen . . . . 145 5.5.1 Experimente und Tests zur Erkundung von Informatiksystemen . . . . . . 145 5.5.2 Unterrichtsexperimente zur F orderung der Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147 5.5.3 Vorgehensweise zur systematischen Erkundung des nach auen sichtbaren Verhaltens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151 5.5.4 Vorgehensweise zur systematischen Erkundung der inneren Struktur eines Informatiksystems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 5.5.5 Zusammenfassung und Einordnung der systematischen Erkundung in das Unterrichtsmodell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154 5.6 Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen . . . 155 5.6.1 Anforderungen an lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155 5.6.2 Entwurfsmuster als strukturelle Grundlage lernf orderlicher Software . . . 156 5.6.3 Fallstudienbasierte Entwicklung der Lernsoftware Pattern Park . . . . . . 162 5.7 Zusammenfassung und Schlussfolgerungen f ur die Kompetenzentwicklung . . . . 169 5.7.1 Zusammenfassung . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169 5.7.2 Schlussfolgerungen f ur die Kompetenzentwicklung mit Informatiksystemen 170 6 Erste exemplarische Erprobung des Unterrichtsmodells 173 6.1 Uberblick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173 6.2 Motivation der Unterrichtserkundung und Einordnung in den Forschungsverlauf . 174 6.3 Rahmenbedingungen und Untersuchungsmethodik . . . . . . . . . . . . . . . . . 175 6.3.1 Inhaltliche Konzeption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 6.3.2 Lerngruppe und zeitlicher Rahmen . . . . . . . . . . . . . . . . . . . . . . 176iv Inhaltsverzeichnis 6.3.3 Unterrichtsmethodik und technischer Rahmen . . . . . . . . . . . . . . . . 177 6.4 Beschreibung und Durchf uhrung der Erprobung . . . . . . . . . . . . . . . . . . . 178 6.4.1 Lernphasen und Problemstellen im Unterrichtsprojekt . . . . . . . . . . . 178 6.4.2 Datenstruktur Schlange und Iteratormuster . . . . . . . . . . . . . . . . . 178 6.4.3 Zugriskontrolle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179 6.4.4 Rolle der Lernsoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 6.4.5 Exkurs: Beitrag der eingesetzten informatischen Darstellungsformen . . . 181 6.5 Evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183 6.5.1 Lernerfolgskontrolle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183 6.5.2 Schriftliche Akzeptanzbefragung der Sch uler . . . . . . . . . . . . . . . . . 184 6.5.3 Leitfaden Interview mit der Informatiklehrperson . . . . . . . . . . . . . . 185 6.6 Zusammenfassung und Diskussion der Ergebnisse der ersten Unterrichtserprobung 186 6.6.1 Zusammenfassung der ersten Unterrichtserprobung . . . . . . . . . . . . . 186 6.6.2 Informatiksysteme und Kompetenzentwicklung in der ersten Unterrichtserprobung . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187 7 Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells 189 7.1 Uberblick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 7.2 Verfeinerung der Strukturierung von Kompetenzen zu Informatiksystemen . . . . 190 7.2.1 Verfeinerung der Perspektiven auf Informatiksysteme . . . . . . . . . . . . 190 7.2.2 Strukturierung der Unterrichtsinhalte . . . . . . . . . . . . . . . . . . . . 192 7.3 Weiterentwicklung und Erg anzung zu Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194 7.3.1 Architekturmuster als Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194 7.3.2 Entwurfsmuster als Wissensrepr asentationen: Einuss von Musterparametern auf das Systemverhalten und Entwurf einer Lernsoftware . . . . . . . 197 7.4 Analyse der systematischen Erkundung von Informatiksystemen . . . . . . . . . . 198 7.4.1 Auswirkungen der verfeinerten Strukturierung auf die systematische Erkundung des Systemverhaltens . . . . . . . . . . . . . . . . . . . . . . . . 198 7.4.2 Analyse des Erkundens von Informatiksystemen mittels Laut-Denken . . 200 7.4.3 Zusammenfassung der Analyse des Erkundens von Informatiksystemen . . 202 7.5 Zusammenfassung . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203Inhaltsverzeichnis v 8 Zweite exemplarische Erprobung des Unterrichtsmodells 205 8.1 Uberblick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205 8.2 Rahmenbedingungen und Untersuchungsmethodik . . . . . . . . . . . . . . . . . 206 8.2.1 Inhaltliche Konzeption und Einordnung in den Forschungsverlauf . . . . . 206 8.2.2 Lerngruppe und zeitlicher Rahmen . . . . . . . . . . . . . . . . . . . . . . 206 8.2.3 Unterrichtsmethodik und technischer Rahmen . . . . . . . . . . . . . . . . 208 8.3 Beschreibung und Durchf uhrung der Erprobung . . . . . . . . . . . . . . . . . . . 208 8.3.1 Lernphasen und Problemstellen im Unterrichtsprojekt . . . . . . . . . . . 208 8.3.2 Br ucke zwischen Verhalten und innerer Struktur durch Erkundung von Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209 8.3.3 Vernetzung mit dem Zustandskonzept . . . . . . . . . . . . . . . . . . . . 210 8.3.4 Rolle der Lernsoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212 8.4 Evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213 8.4.1 Auswertung der Lernerfolgskontrolle . . . . . . . . . . . . . . . . . . . . . 213 8.4.2 Schriftliche Akzeptanzbefragung der Sch uler . . . . . . . . . . . . . . . . . 214 8.4.3 Auswertung des Interviews mit der Informatiklehrperson . . . . . . . . . . 215 8.5 Zusammenfassung und Diskussion der Ergebnisse der zweiten Unterrichtserprobung216 8.5.1 Zusammenfassung der zweiten Unterrichtserprobung . . . . . . . . . . . . 216 8.5.2 Informatiksysteme und Kompetenzentwicklung in der zweiten Unterrichtserprobung . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217 9 Zusammenfassung, Fazit und Ausblick 219 9.1 Zusammenfassung . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 9.2 Fazit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220 9.3 Ausblick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222 A Anhang 225 A.1 Akzeptanzfragebogen der ersten Unterrichtserprobung . . . . . . . . . . . . . . . 226 A.2 Akzeptanzfragebogen der zweiten Unterrichtserprobung . . . . . . . . . . . . . . 229 A.3 Inhalt der CD-ROM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232 Literatur 233Abbildungsverzeichnis 1.1 Entwurfs-, Interventionsund Evaluationszyklus der Unterrichtsmodellentwicklung 7 1.2 Schematische Struktur der Arbeit . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2.1 Anforderungssituationen zur Kompetenzentwicklung mit Informatiksystemen . . 14 2.2 Lernzielebenen der informatikspezischen Lernzieltaxonomie nach (Fuller et al. 2007, S. 164) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.3 Ubersicht uber Variationen des Kompetenzbegris zu Informatiksystemen . . . . 23 3.1 Struktur der Kapitel 1 bis 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 3.2 Schematische Darstellung der Strukturierung der Basiskompetenzen zu Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 4.1 Die Strukturierung der Ergebnisse der Analyse des Forschungsstandes . . . . . . 98 5.1 Struktur des Kapitels zur Unterrichtsmodellentwicklung . . . . . . . . . . . . . . 105 5.2 Klassendiagramm der kombinierten Entwurfsmuster . . . . . . . . . . . . . . . . 136 5.3 Wirkungsdiagramme als qualitative Darstellungsmittel zur Beschreibung von Systemen nach (Ossimitz 2002, S. 4) . . . . . . . . . . . . . . . . . . . . . . . . . . . 141 5.4 Wirkungsdiagramm zu den vernetzten fundamentalen Ideen im Proxymuster . . 141 5.5 Wirkungsdiagramm zur Kombination der Entwurfsmuster . . . . . . . . . . . . . 142 5.6 Concept Map zu den vernetzten fundamentalen Ideen im Proxymuster . . . . . 143 5.7 Umsetzung des Programms zur Zugriskontrolle in Delphi und Java; Information bzw. Objekt korrespondieren zur Klasse"RealesSubjekt" aus Abbildung 5.8, die Rollen Administrator, Benutzer und Gast sind Klienten . . . . . . . . . . . . . . 157 5.8 Das Klassendiagramm des Programms zur Zugriskontrolle { ohne Benutzungsoberache { entspricht dem Proxymuster . . . . . . . . . . . . . . . . . . . . . . . 158 5.9 Ubersicht einer Aufgabe zur Zugriskontrolle mit Angabe der Dauer, Lernziele und Vorkenntnisse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 5.10 Korrektur von Fehlvorstellungen und kognitiven Modellen im Lehr-Lernprozess (vgl. Schubert et al. 2009, S. 3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 5.11 Schematische Darstellung des Unterrichtsmodells zur Kompetenzentwicklung mit Informatiksystemen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170viii Abbildungsverzeichnis 6.1 Einordnung des sechsten Kapitels in den Forschungsverlauf . . . . . . . . . . . . 173 6.2 Benutzungsober ache und Aufgabe zur Erkundung der lernf orderlichen Software zur Zugriskontrolle mit kognitivem Prozess und Wissensart gem a Lernzieltaxonomie (Anderson und Krathwohl 2001) . . . . . . . . . . . . . . . . . . . . . . . . 179 6.3 Klassenund Sequenzdiagramm zum Zugrisschutz aus der Lernsoftware Pattern Park . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 7.1 Struktur des Kapitels zu Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 8.1 Einordnung des achten Kapitels in den Forschungsverlauf . . . . . . . . . . . . . 205 8.2 Klassendiagramm der Arztpraxis mit den Entwurfsmustern Proxy und Zustand . 211 8.3 Benutzungsober ache und Aufgabe zur Erkundung des Programms Arztpraxis V2.0 zu Zugriskontrolle und Systemzust anden mit kognitivem Prozess und Wissensart gem a Lernzieltaxonomie (Anderson und Krathwohl 2001) . . . . . . . . 212 9.1 Schematische Darstellung der normativen und empirischen Ein usse auf das Unterrichtsmodell zur Kompetenzentwicklung mit Informatiksystemen . . . . . . . . 221Tabellenverzeichnis 1.1 Forschungsverlauf . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 3.1 Kategorien der Informatik nach (Denning 2003, S. 17) und (Denning 2007, S. 15) 29 3.2 Informatikturm nach (Nievergelt 1995, S. 342; Hervorh. im Original) . . . . . . . 31 3.3 Strukturierung nach Hauptfunktionen und Charakteristika von Informatiksystemen 35 4.1 Informatiksysteme im Unterricht nach (Magenheim und Schulte 2006, S. 332) . . 56 4.2 Hauptmodelltypen und Beispiele zitiert nach (Thomas 2003, S. 147) . . . . . . . 67 4.3 Vernetzung und das Arbeiten mit komplexen Systemen als Teil des Betriebssystemmoduls im ACM Model High School Computer Science Curriculum von 1993 (ACM 1993, S. 4) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 5.1 Musterkatalog nach (Gamma et al. 1995, S. 14) . . . . . . . . . . . . . . . . . . . 119 5.2 Klassikation ausgew ahlter Entwurfsmuster nach Weyer (2007b) . . . . . . . . . 130 5.3 Ubersicht uber die in der Lernsoftware Pattern Park umgesetzten Entwurfsmuster (Franke et al. 2007, S. 3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163 5.4 Exemplarische Einordnung der Modulaufgaben zur Zugriskontrolle in die Interaktivit atstaxonomie nach Schulmeister (2002) . . . . . . . . . . . . . . . . . . . . 167 5.5 Zugrisstatistik des Webservers f ur die Lernsoftware Pattern Park binnen eines Jahres . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169 5.6 Einordnung des Unterrichtsmodells in den EQR bis Niveaustufe 4 . . . . . . . . . 172 6.1 Struktur der ersten Unterrichtserprobung inklusive Sch ulertatigkeiten . . . . . . 175 6.2 Exemplarische Ubersicht der inhaltlichen Konzeption anhand der Strukturierung der Basiskompetenzen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176 6.3 Themenliste der ersten Unterrichtserprobung mit Einzel(ES) und Doppelstunden (DS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177 7.1 Zusammenfassung der Untersuchungsergebnisse zu den Architekturmustern nach (Ufer 2007, S. 95) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196 7.2 Exemplarische Analyse von Entwurfsmustern anhand des neuen Kriteriums ( !Kriterium 7: Auswirkung von Parametern auf das Systemverhalten; (Weyer 2007b, S. 74)) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198x Tabellenverzeichnis 8.1 Exemplarische Ubersicht der inhaltlichen Konzeption anhand der Strukturierung der Basiskompetenzen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 8.2 Themenliste der zweiten Unterrichtserprobung mit Einzel(ES) und Doppelstunden (DS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 A.1 Befragung zum Informatikunterricht allgemein . . . . . . . . . . . . . . . . . . . 226 A.2 Befragung zu Schwierigkeit, Stoumfang und eigenem Lernen . . . . . . . . . . . 226 A.3 Befragung zum konkreten Informatikunterricht . . . . . . . . . . . . . . . . . . . 227 A.4 Befragung zum Einuss der Unterrichtsthemen auf motivationale und volitionale Bereitschaften sowie Einstellungen (eine fehlende Angabe in Zeile 22) . . . . . . . 227 A.5 Befragung zur Einsch atzung des eigenen Lernfortschritts . . . . . . . . . . . . . . 228 A.6 Befragung zur Einsch atzung des eigenen Lernens . . . . . . . . . . . . . . . . . . 228 A.7 Befragung zum Informatikunterricht allgemein . . . . . . . . . . . . . . . . . . . 229 A.8 Befragung zu Schwierigkeit, Stoumfang und eigenem Lernen . . . . . . . . . . . 229 A.9 Befragung zum konkreten Informatikunterricht . . . . . . . . . . . . . . . . . . . 229 A.10 Befragung zum Einuss der Unterrichtsthemen auf motivationale und volitionale Bereitschaften sowie Einstellungen . . . . . . . . . . . . . . . . . . . . . . . . . . 230 A.11 Befragung zur Einsch atzung des eigenen Lernfortschritts . . . . . . . . . . . . . . 230 A.12 Befragung zur Einsch atzung des eigenen Lernens . . . . . . . . . . . . . . . . . . 231Abkurzungsverzeichnis ACM . . . . . . . . . . . . Association for Computing Machinery ADT . . . . . . . . . . . . Abstrakter Datentyp API . . . . . . . . . . . . . Application Programming Interface ATEE . . . . . . . . . . . Association for Teacher Education in Europe CLT . . . . . . . . . . . . . Cognitive Load Theory CPU . . . . . . . . . . . . . Central Processing Unit CRC . . . . . . . . . . . . . Class-Responsibility-Collaborator CSCL . . . . . . . . . . . Computer Supported Collaborative Learning CSER . . . . . . . . . . . Computer Science Education Research DeSeCo . . . . . . . . . . Denition and Selection of Key Competencies DFG . . . . . . . . . . . . Deutsche Forschungsgemeinschaft DOS . . . . . . . . . . . . . Disk Operating System ECDL . . . . . . . . . . . European Computer Driving Licence ECIS . . . . . . . . . . . . Entwicklung von Curriculumelementen f ur den Informatikunterricht in der Sekundarstufe I EPA . . . . . . . . . . . . . Einheitliche Pr ufungsanforderungen in der Abiturpr ufung EQR . . . . . . . . . . . . Europ aischen Qualikationsrahmen f ur lebenslanges Lernen EVA . . . . . . . . . . . . . Eingabe-Verarbeitung-Ausgabe GI . . . . . . . . . . . . . . . Gesellschaft f ur Informatik e. V. HTML . . . . . . . . . . . Hypertext Markup Language ICER . . . . . . . . . . . . International Computing Education Research Workshop ICT . . . . . . . . . . . . . Information and Communication Technology IFIP . . . . . . . . . . . . . International Federation for Information Processing INFOS . . . . . . . . . . GI-Fachtagung"Informatik und Schule" ISO . . . . . . . . . . . . . . International Organization for Standardization ISSEP . . . . . . . . . . . Informatics in Secondary Schools { Evolution and Perspectives IT . . . . . . . . . . . . . . . meist: Information Technology; nur UNESCO-Curricula: Informatics Technology ITiCSE . . . . . . . . . . Innovation and Technology in Computer Science Education MVC . . . . . . . . . . . . Model-View-Controller NCTM . . . . . . . . . . National Council of Teachers of Mathematics OECD . . . . . . . . . . . Organisation for Economic Co-operation and Development OOM . . . . . . . . . . . . Objektorientiertes Modellieren OSI . . . . . . . . . . . . . . Open Systems Interconnection PISA . . . . . . . . . . . . Programme for International Student Assessment RAM . . . . . . . . . . . . Random Access Machine, Registermaschine SIGCSE . . . . . . . . . Special Interest Group on Computer Science Education: Technical Symposium on Computer Science Education UML . . . . . . . . . . . . Unied Modeling Language UNESCO . . . . . . . . United Nations Educational, Scientic and Cultural Organization WCCE . . . . . . . . . . World Conference on Computers in Education WWW . . . . . . . . . . World Wide Webxii Abk urzungsverzeichnis1. Einleitung 1.1 Problemlage und Motivation Informatiksysteme sind in der Wissensgesellschaft zu Beginn des 21. Jahrhunderts allgegenw artig (UNESCO 2005). Dies auert sich in dem Symptom der Informationsut sowie in ihrer Bedeutung f ur Wirtschaft und Arbeitsmarkt (vgl. Hubwieser 2007a, S. 58f). Bereits seit Anfang der neunziger Jahre wird die Vernetzung dieser Systeme in der Informatik besonders hervorgehoben: "Als neues Paradigma der Informatik ergibt sich also: Eine Gruppe von gleichrangigen, selbstst andigen, einigermaen intelligenten Akteuren, die bestimmte Aufgaben erledigen und dazu miteinander und mit der Umgebung interagieren" (Brauer und Brauer 1992, S. 15). Die Vernetzung von Rechnern in lokalen Netzen und mit dem Internet wird sowohl in der nationalen als auch der internationalen fachdidaktischen Diskussion herangezogen, um Unterricht zu Wirkprinzipien von Informatiksystemen zu fordern. Aus der Ver anderung der Lebenswelt folgen neue Anforderungen f ur den Informatikunterricht und fachdidaktische Gestaltungsvorschl age (vgl. (Baumann 1993), (Baumann 1996), (Hubwieser und Broy 1997b), (Hubwieser 2007a), (Hampel et al. 1999), (Magenheim und Schulte 2006), (Brinda und Schubert 2001), (Schubert und Schwill 2004)). Dies auert sich auch durch Bildungsund Lernzielbeschreibungen in nationalen und internationalen Bildungsempfehlungen (vgl. (GI 2000), (ACM 2006), (UNESCO 2002), (GI 2008)). So ver oentlichte die Gesellschaft f ur Informatik e. V. (GI) schon im Jahr 2000 Empfehlungen f ur ein Gesamtkonzept zur informatischen Bildung an allgemein bildenden Schulen, um Sch ulern1durch informatische Denkund Arbeitsweisen die bewusste Anwendung von Informationsund Kommunikationstechnologien zu erm oglichen (GI 2000, S. 1). F ur die informatische Bildung werden darin vier Leitlinien festgelegt, die sich mittlerweile auch in Rahmenlehrpl anen mehrerer Bundesl ander wieder nden, und in denen Informatiksysteme zentral sind: Interaktion mit Informatiksystemen, Wirkprinzipien von Informatiksystemen, Informatische Modellierung, Wechselwirkungen zwischen Informatiksystemen, Individuum und Gesellschaft. In den aktuellen Bildungsstandards der GI f ur die Sekundarstufe I heit es: 1Alle Personenbezeichnungen gelten gleichermaen f ur die m annliche und weibliche Form.2 1. Einleitung "Zur Nutzung von Informatiksystemen ist ein grundlegendes Verst andnis ihres Aufbaus und ihrer Funktionsweise notwendig. [. . . ] Kompetenzen, die das Verst andnis von Informatiksystemen f ordern, sind vor allem deshalb von Bedeutung, weil die Sch ulerinnen und Sch uler auch in der Lage sein sollten, sich weitere, ihnen bislang m oglicherweise unbekannte Systeme zu erschlieen" (GI 2008, S. 37). Da zurzeit nur in wenigen Bundesl andern ein verpichtender Informatikunterricht in der Sekundarstufe I existiert, k onnen diese Kompetenzen der Sch uler f ur die Sekundarstufe II nicht vorausgesetzt werden; dar uber hinaus sind deren Erweiterung und Vertiefung zu diskutieren. Die United Nations Educational, Scientic and Cultural Organization (UNESCO) und der Informatikweltverband International Federation for Information Processing (IFIP) erstellten gemeinsam ein Curriculum zum Einsatz von Informationsund Kommunikationstechnologie (Information and Communication Technology { ICT) in Schulen. Darin werden exemplarisch drei sehr weit gefasste Bildungsziele f ur Sch uler zu Informatiksystemen angegeben: "Students should be able to dierentiate between the basic components of a computer system [. . . ]. Students should know what system software is and how the use of this software relates to the operating systems software. They should be aware of the connectivity of computers in a local and an external network and be familiar with the appropriate functions of the networks" (UNESCO 2002, S. 68). Die Wichtigkeit von Informatiksystemen f ur die informatische Bildung ist in den Bildungsempfehlungen somit unbestritten. Es fehlt jedoch an einer Verfeinerung dieser Zielebene mit Beschreibung konkreten, empirisch erprobten Unterrichts zu Informatiksystemen und Kompetenzentwicklung, der die Feinziele erreichbar macht. Humbert f uhrt empirische Studien durch, die zeigen, dass Sch uler sich von Rechnern bedroht f uhlen (Humbert 2003). Damit hat das Ziel der Entmystizierung von Informatiksystemen nicht an Aktualit at eingeb ut (vgl. Schubert und Schwill 2004, S. 253). Der in Forschungsarbeiten und Bildungsempfehlungen geforderte Unterricht zu Wirkprinzipien von Informatiksystemen hat die Schulpraxis erst punktuell erreicht. In der unterrichtlichen Praxis investieren Sch uler viel Zeit in die Entwicklung kleiner Programme. Der F orderung von Basiskompetenzen, z. B. die Erkundung und Analyse von Informatiksystemen aus dem Alltag, wird kaum Lernzeit einger aumt (vgl. Schubert und Schwill 2004, S. 216). Als Ursachen f ur die bislang kaum vorhandene Umsetzung in ein Unterrichtsmodell lassen sich u. a. folgende Forschungsl ucken und Problembereiche benennen: Konkretisierung der Bildungsergebnisse und -inhalte Welche Kompetenzen ben otigt ein Schuler, um Informatiksysteme den eigenen Zielen und Bed urfnissen entsprechend eektiv zu nutzen? Sch uler sind angewiesen auf ein kognitives Modell von Informatiksystemen und von deren M oglichkeiten und Grenzen zur Teilnahme in der Gesellschaft als m undige Burger. Die allgemeinen Bildungsanforderungen zu Wirkprinzipien von Informatiksystemen sind nur realisierbar, wenn eine Konkretisierung der Bildungsergebnisse in Form von Kompetenzbeschreibungen und des Bildungszugangs in Form von Lernzielen und -inhalten erfolgt. Mit der Ver oentlichung von Bildungsstandards wurde 2008 f ur die Sekundarstufe I ein Anfang gemacht (GI 2008). Der Autor begann ab 2005 mit Publikationen zu Informatiksystemen und Kompetenzentwicklung f ur die Sekundarstufe II. Lehr-Lernmethodik Wie k onnen Sch uler Informatiksysteme erkunden und Kompetenz handlungsorientiert entwickeln? Welche Aufgabenklassen lassen sich identizieren? Notwendig ist eine nachvollziehbare Strukturierung von Unterrichtsinhalten f ur ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung. Es fehlt an empirisch uberpr uften Strategien, mit denen Sch uler das Verhalten von Informatiksystemen entdecken und auf vernetzte informatische Konzepte zur uckfuhren. Im Informatikunterricht fehlt das systematische Beobachten von Informatiksystemen bisher fast vollst andig (vgl. Kapitel 4). Es existieren keine Unterrichtsmodelle, die das systematische Vorgehen, das zum Bewerten1.2. Forschungsmethodik und Forschungsverlauf 3 und Beobachten von Informatiksystemen notwendig ist, thematisieren und mit ausgew ahlten Informatikkompetenzen verkn upfen. Lehr-Lernpsychologie Wie m ussen Inhalte zu Wirkprinzipien von Informatiksystemen repr asentiert werden, damit sie ein korrektes Bild von Informatiksystemen vermitteln und von Schulern kognitiv erfasst werden k onnen? Es fehlt an lernpsychologisch fundierten Wissensrepr asentationen, um die in Informatiksystemen vernetzten informatischen Inhalte zu vermitteln. Bei der Publikation von Unterrichtskonzepten spielen vernetzte fundamentale Ideen (Schwill 1993a) bisher oft keine Rolle. Dies ist auch darauf zur uckzuf uhren, dass das Problem der Vernetzung der Inhalte von Lehrpersonen selbst gel ost werden muss. So ist die Vernetzung im Unterricht oft durch langj ahrige Lehr-Lernerfahrungen zu Algorithmenklassen, Datentypen und Datenstrukturen, also durch die Vorgehensweise beim Programmieren im Kleinen und die eingesetzten Programmierstile (z. B. pr adikativ, funktional) begr undet. Lehr-Lernmedien Welche medialen Repr asentationen von Informatiksystemen und Wirkprinzipien in Informatiksystemen unterst utzen den Erkenntnisprozess? Es fehlt an geeigneten Unterrichtsmitteln inklusive Lernsoftware und fachdidaktisch vorbereiteter Software f ur den Lehr-Lernprozess (Magenheim 2001). Formulierungen von Gestaltungsanforderungen an Lernsoftware, die von Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik ausgehen, gibt es nicht. So werden in den vorherrschenden Ans atzen zur Konstruktion von Informatiksystemen oft professionelle Entwicklungswerkzeuge eingesetzt, die Schuler in der Sekundarstufe II uberfordern. Die hier nur knapp dargestellte Wichtigkeit von Informatiksystemen sowie die Problembereiche und Forschungsl ucken sind f ur den Autor Motivation, diese Arbeit zu schreiben. Ziel der vorliegenden Arbeit ist es, ein Unterrichtsmodell zu Basiskompetenzen zu Informatiksystemen zu entwickeln und in der Unterrichtspraxis zu erproben. Damit soll auch ein Beitrag zu Bildungsstandards f ur die Sekundarstufe II geleistet werden. Vom Autor wird erforscht, welche Bildungsziele f ur Sch uler notwendig sind und wie der Lehr-Lernprozess diese fachlich korrekt erreichbar macht, ohne Abbild der Hochschulinformatik zu sein. Eine Kompetenzstrukturierung zu Informatiksystemen bietet eine neue Perspektive auf Lehr-Lernprozesse im Informatikunterricht der Sekundarstufe II. Dabei wird vorausgesetzt, dass Kompetenzentwicklung mit Informatiksystemen zum Bildungsauftrag des allgemein bildenden Informatikunterrichts geh ort und in Alltag sowie Berufsleben von Nutzen ist (Abschnitt 4.2; (Hubwieser 2007a)). 1.2 Forschungsmethodik und Forschungsverlauf 1.2.1 Intervenierende Fachdidaktik Die Forschungsmethodik der vorliegenden Arbeit basiert auf fachdidaktischer Theoriebildung und wird fundiert durch empirisch explorative Fallstudien. Sie ist inspiriert von intervenierender Fachdidaktikforschung wie sie Hubwieser und Broy (1999) sowie Dagiene (1999) auf der IFIP Working Group 3.1 and 3.5 Open Conference"Communications and Networking in Education: Learning in a Networked Society" vorstellten. F ur intervenierende Fachdidaktik ist kennzeichnend, dass Forschende neue Konzepte der Fachdidaktik entwickeln und in Feldstudien, d. h. Interventionen, umsetzen. Die Interventionsforschung befasst sich mit der Entwicklung von Manahmen, w ahrend die Evaluationsforschung deren Bewertung zum Gegenstand hat (Bortz und Doring 2002, S. 107). Die Trennung von Interventionsund Evaluationsforschung ist in der Praxis jedoch selten strikt. Im Gegenteil wird in der Verbindung von Theorie und Praxis bei der Entwicklung und Evaluation von Unterrichtskonzepten Potential gesehen (Tulodziecki und Herzig 1998), um neben der Erforschung der p adagogischen Praxis theoretische Ans atze weiter zu entwickeln:4 1. Einleitung Tabelle 1.1: Forschungsverlauf Phase Beschreibung Aktivitäten 2005 2006 2007 2008 Veröffentlichungen 1 Analyse des BildungsbedarfsInformatikbildungsstandards im digitalen Medienumbruch: Anforderungen im Internet Schubert et al. 2005a & b;  Stechert 2005 Vernetzung fundamentaler Ideen im Informatikunterricht (Doktorandenforum der INFOS 2005) 2 TheoriebildungBegründung von Entwurfsmustern als Wissensrepräsentation vernetzter fundamentaler Ideen Stechert 2006b & c Entwicklung eines Unterrichtmodells zu Informatiksystemen und Kompetenzentwicklung Stechert 2006a Verfeinerung des Unterrichtsmodells durch Operationalisierung der Lernziele und Verallgemeinerung des  UnterrichtsmodellsStechert 2007b 3,4,5Entwicklung eines  Unterrichtsprojektes  einschließlich Lehr-Lern-Material  & Unterrichtsinterventionen &  EvaluationEntwicklung der Lernsoftware Pattern Park für Kompetenzentwicklung mit Informatiksystemen (Betreuung einer  Projektgruppe)Franke et al. 2007; Schubert et  al. 2007b Beschreiben von Schülertätigkeiten und Unterrichtsmitteln (Betreuung einer Seminararbeit) Weyer 2006 1. Erprobung des Unterrichtsmodells in der Sekundarstufe II Auswertung der 1. Unterrichtserprobung und Evaluation des Unterrichtsmodells Stechert 2007c Verfeinerung des Unterrichtsmodells bezüglich Strukturierung des Lerngegenstands und von Basiskompetenzen zu  InformatiksystemenStechert und Schubert 2007 Ausgestaltung von Unterrichtsbeispielen zu Zuverlässigkeit und Kompatibilität von Informatiksystemen mit Entwurfsmustern (Betreuung einer Seminararbeit) Sülz 2007 Verfeinerung ausgewählter im Feld empirisch erprobter Aufgaben durch eine Laborstudie unter Anwendung der Methode des Laut-Denken (Betreuung einer Seminararbeit) Stupperich und Warkentin 2007 Architekturmuster als Beitrag zur Kompetenzentwicklung mit Informatiksystemen (Betreuung einer Diplomarbeit) Ufer 2007 Workshopleitung mit S. Schubert, S. Freischlad, W. Kempf und H. Koch zu Unterrichtsinterventionen mit Vertretern der Kooperationsschulen und Informatiklehrern auf der INFOS 2007, Siegen Schubert et al. 2007a Gestaltung eines Unterrichtsbeispiels zu Datenbanksystemen als typischen Vertretern von Informatiksystemen (Betreuung einer Seminararbeit) Dittich 2008 Gestaltung von Gruppenarbeitsbeispielen für Kompetenzentwicklung mit Informatiksystemen (Betreuung einer Seminararbeit) Gerding 2008 2. Erprobung des Unterrichtsmodells in der Sekundarstufe II Klassifikation von Entwurfsmustern und Entwurf einer Lernsoftware (Betreuung einer Diplomarbeit) Weyer 2007b Auswertung der 2. Unterrichtserprobung und Vorstellung auf Konferenzen Stechert 2008a; Stechert 2008b;  Stechert 2008c 6Abschlussdiskussion des  empirisch erprobten   UnterrichtsmodellsWorkshopleitung mit S. Freischlad  zu lernförderlicher Software auf der LYICT 2008, Kuala Lumpur, Malaysia Freischlad und Stechert 2008 Vorbereitung weiterführender Forschung zu eingebetteten Mikrosystemen und Kompetenzmodellentwicklung Schubert und Stechert 2008; Schwidrowski et al. 2008 Zusammenfassung der Ergebnisse Dissertationsschrift1.2. Forschungsmethodik und Forschungsverlauf 5 "Ein solches Verfahren stellt nicht die Formulierung allgemeiner Hypothesen und ihre experimentelle Pr ufung in den Mittelpunkt, sondern die Entwicklung und Erprobung praxisrelevanter Unterrichtskonzepte auf der Basis von Voraussetzungs-Ziel-Mittel-Aussagen, die ihrerseits auf explizit formulierten lernund lehrtheoretischen Annahmen beruhen" (Tulodziecki und Herzig 1998, S. 29). Normative Implikationen gehen dabei in die Zielvorstellungen ein. Die R uckkopplung mit der Praxis erlaubt eine kritische Reexion und die damit verbundene Weiterentwicklung der theoretischen Ergebnisse. Dazu geh ort eine Forschungsmethodik mit folgenden Phasen: 1. Analyse des Bildungsbedarfs, 2. Theoriebildung zum Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung, 3. Entwicklung eines Unterrichtsmodells und Beschreibung von Sch ulertatigkeiten einschlielich Lehr-Lernmaterial zur Vorbereitung von Unterrichtsprojekten, 4. Unterrichtserprobungen, 5. Evaluation und Zwischendiskussionen des Lehr-Lernprozesses und der Lehr-Lernmaterialien mit Auswirkung auf Theoriebildung und Unterrichtsmaterialentwicklung, 6. Abschlussdiskussion der empirisch erprobten Ergebnisse. Zu den Phasen der Forschungsmethodik und einzelnen Aktivit aten siehe auch Tabelle 1.1. Durch mehrere Unterrichtserprobungen entsteht ein Entwurfs-, Interventionsund Evaluationszyklus der Unterrichtsmodellentwicklung. Phase 1: Analyse des Bildungsbedarfs Der erste Schritt der Forschungsmethodik ist die Analyse des Bildungsbedarfs. Zentral ist dabei die Fragestellung, welche Kompetenzen zu Informatiksystemen Sch uler in der Lebenswelt benotigen und wie der Lehr-Lernprozess diese fachlich korrekt erreichbar macht, ohne Abbild der Hochschulinformatik zu sein. Es ist notwendig, den aktuellen Informatiksystembegri in den unterschiedlichen Bereichen der Kerninformatik zu untersuchen, um Kompetenzen zu strukturieren und Lernziele beschreiben zu k onnen. Unter Kerninformatik werden in dieser Arbeit Theoretische Informatik, Praktische Informatik und Technische Informatik zusammengefasst. Kerninformatik ist in Abgrenzung zu gesellschaftlichen Bez ugen der Informatik, zur Angewandten Informatik und zur Didaktik der Informatik zu sehen (vgl. Schubert und Schwill 2004, S. 6). Auerdem kann anhand des Informatiksystembegris eine Analyse des fachdidaktischen Stands der Forschung zur Kompetenzentwicklung mit Informatiksystemen vorgenommen werden. Dazu werden nationale und internationale Informatikcurricula und Bildungsempfehlungen ebenso wie Konferenzpublikationen aus der Didaktik der Informatik hinsichtlich begr undeter Bildungsziele, inhalte, Lehr-Lernmethoden und Lernmedien f ur Informatiksysteme und Kompetenzentwicklung analysiert. Aus der Analyse gewonnene Ergebnisse k onnen anhand der fachlichen Merkmale von Informatiksystemen geclustert werden. Daraus l asst sich eine Strukturierung von Basiskompetenzen ableiten (Kapitel 3 und Kapitel 4). Phase 2: Theoriebildung f ur das Unterrichtsmodell zu Informatiksysteme und Kompetenzentwicklung Auf der Strukturierung von Basiskompetenzen aufbauend, wird in Phase 2 eine Unterrichtsmodellentwicklung theoretisch begr undet und am Beispiel Informatiksysteme und Kompetenzentwicklung vollzogen. Die Entwicklung eines fundierten Unterrichtsmodells besteht in der Integration von Erkenntnissen aus der Fachwissenschaft, der Erziehungswissenschaft und anderen Fachdidaktiken in die Didaktik der Informatik. Als theoretische S aule der Forschungsmethodik und Voraussetzung der Intervention werden Erkenntnisse aus der Forschung zum didaktischen6 1. Einleitung System nach Brinda und Schubert genutzt (vgl. Brinda und Schubert 2001). Es ist eine Formalisierung des Lehr-Lernprozesses und besteht aus Wissensstrukturen, Aufgabenklassen und Lernsoftware. Traditionelle Komponenten des Lehr-Lernprozesses werden abh angig von Szenario und Zielgruppe mit fachdidaktischen Empfehlungen verkn upft, wodurch ein Beitrag zu Bildungsstandards geleistet wird (vgl. Schubert und Schwill 2004, S. 134). St arke dieses Ansatzes ist, dass seit 2001 das didaktische System in der Dortmunder (bis 2002) und Siegener Forschergruppe auf die Bereiche objektorientiertes Modellieren, Internetworking und Kompetenzentwicklung mit Informatiksystemen angewendet und kontinuierlich weiterentwickelt wird (vgl. (Freischlad und Schubert 2006), (Schwidrowski 2007)). Eine Begr undung f ur die Entwicklung von Lernsoftware innerhalb des Forschungsprozesses liefert Reinmann (2006). Ihrer Ansicht nach liefert gerade die Entwicklung von Lernsoftware als Teil des Forschungsprozesses relevante Forschungsergebnisse und nicht nur die quantitativ empirische Uberpr ufung der Lernwirksamkeit ausgereifter Lernsoftware und Lernkonzepte (Kapitel 5). Phase 3: Entwicklung eines Unterrichtsmodells und Beschreibung von Sch ulert atigkeiten einschlielich Lehr-Lernmaterial zur Vorbereitung von Unterrichtsprojekten Die n achste Phase in der Forschungsvorgehensweise bildet die Entwicklung von Unterrichtsprojekten. Aus der Handlungsund Anwendungsorientierung ergeben sich unverzichtbare Sch ulertatigkeiten, f ur deren Ausgestaltung Lehr-Lern-Materialien erstellt werden. Auch die Formulierung von Lernzielen nach der uberarbeiteten Bloom'schen Lernzieltaxonomie wird vorgenommen. Auf Basis der normativen Analyse und theoretischen Erkenntnissen aus Fachwissenschaft, Erziehungswissenschaft, Lehr-Lerntheorie und Fachdidaktik entwickelt eine studentische Projektgruppe mit sechs Studierenden in insgesamt 3600 Arbeitsstunden die Lernsoftware. Entwicklungsbegleitend werden prototypische Module im Rahmen eines ersten Unterrichtsprojekts in der Sekundarstufe II eingesetzt. Durch die R uckmeldungen der Sch uler kann die Lernsoftware weiter verbessert werden (Arnold und Hartmann 2007). Projektgruppen nehmen durch ihre Nahe zur Praxis und zum Berufsalltag in der universit aren Informatikausbildung eine Sonderstellung ein, denn hier arbeitet ein Team von Informatikstudierenden uber mehrere Semester hinweg an einer komplexen Aufgabenstellung, die einschl agig f ur ihren Studiengang ist. Die Kombination von Theorie und Praxis erm oglicht eine forschende Lehre im Rahmen der Lehramtsausbildung (Tulodziecki und Herzig 1998). So k onnen studentische Arbeiten zur Erstellung von Unterrichtsmaterialien, Beschreibung von Unterrichtsmethoden und Untersuchungen von auftretenden Fehlvorstellungen und kognitiven Barrieren, beispielsweise mittels Laut-Denken, einbezogen werden (Kapitel 5 und Kapitel 7). Phase 4: Unterrichtserprobungen Merkmal quasi-experimenteller Felduntersuchung ist, dass sie in nat urlichen, d. h. nicht randomisierten und im Zuge des Forschungsprozesses kaum ver anderten Umgebungen stattnden. Die intervenierende Unterrichtsforschung erfordert eine kritische Reexion. Atteslander beschreibt dazu vier Problemkreise, die zur qualitativen teilnehmenden Forschung zu kl aren sind: "[. . . ] zum einen m ussen die Teilnehmerrollen so oen und exibel zu handhaben sein, dass der Forscher im Feld agieren und reagieren kann, zum Zweiten m ussen die Rollen dem Feld entsprechen bzw. in diesem bereits angelegt sein, damit das Feld durch die Forschung nicht ver andert wird, drittens muss uberlegt werden, ob die Forscherrolle oen gelegt wird oder teilweise bzw. ganz verdeckt bleibt und viertens muss das Verh altnis zwischen Forscherund Teilnehmerrolle (Distanz und Teilnahme) geklart werden" (Atteslander et al. 2006, S. 92). Durchgef uhrt werden zwei Unterrichtserprobungen, so dass die erste als Pilotstudie dienen kann (Bortz und D oring 2002, S. 359f). Eine Gr oenordnung von etwa 12 Unterrichtsstunden  a 45 Minuten je Unterrichtserprobung entspricht einerseits einem gewissen Konsens uber die L ange der Unterrichtsinterventionen in der Informatikdidaktik (vgl. Wiesner und Brinda (2007), Antonitsch (2007), Vo (2006), Hubwieser (2005)) und ist andererseits der Bindung der Schulen an1.2. Forschungsmethodik und Forschungsverlauf 7 den Lehrplan und die Anforderungen eines Zentralabiturs geschuldet. Wegen der anstehenden oder bereits umgesetzten Verk urzung der Schulzeit auf 12 Schuljahre werden die Jahrgangsstufen 11 und 12 f ur die Unterrichtsinterventionen anvisiert. Sowohl zur Unterrichtsvorbereitung wie auch zur Nachbereitung werden Gespr ache mit Praktikern und Fachdidaktikern durchgef uhrt. Abschlieend werden eine Lernerfolgskontrolle, eine Akzeptanzbefragung der Sch uler und ein Interview mit dem stets anwesenden Kurslehrer durchgef uhrt (Kapitel 6 und Kapitel 8). Phase 5: Evaluation und Zwischendiskussionen des Lehr-Lernprozesses und der Lehr-Lernmaterialien mit Auswirkung auf Theoriebildung und Unterrichtsmaterialentwicklung Die f unfte Phase bildet die Evaluation. Dazu werden die theoretischen Uberlegungen zum Unterrichtsmodell mit den Ergebnissen der Feldstudie verglichen: "[. . . ] previously developed theory is used as a template with which to compare the empirical results of the case study" (Bassey 1999, S. 31). Die qualitativ-formativen Evaluationsaktivit aten und -Ergebnisse, d. h. die begleitend gewonnenen und durch den Einsatz von Interview und Akzeptanzbefragung zur Uberpr ufung des LehrLern-Szenarios angereicherten Ergebnisse, f uhren zu einem in empirischen, explorativen Phasen erprobten Unterrichtsmodell (vgl. Atteslander et al. 2006, S. 31). In Kapitel 7 werden die Weiterentwicklung und Verfeinerung des Unterrichtsmodells beschrieben. Phase 6: Abschlussdiskussion der empirisch erprobten Ergebnisse In der sechsten Phase werden die in den Unterrichtsinterventionen gewonnenen Erkenntnisse zur Weiterentwicklung und Verfeinerung des in der dritten Phase erarbeiteten Unterrichtsmodells vorgenommen. Es ndet eine Abschlussdiskussion des im Informatikunterricht erprobten Unterrichtsmodells statt (Kapitel 9). AnalyseEntwicklung eines UnterrichtsmodellsUnterrichtserprobungEmpirisch erprobtes UnterrichtsmodellForschungszieleSchülertätigkeiten und UnterrichtsmittelQualitativer BefundAnforderungen der LernendenErkenntnisse aus Didaktik der Informatik und InformatikFundamentale IdeenLernsoftware Aufgaben Akzeptanz Machbarkeit Verfeinerung von Theorie und Unterrichtsmitteln Abbildung 1.1: Entwurfs-, Interventionsund Evaluationszyklus der Unterrichtsmodellentwicklung Zusammenfassend sind die Phasen der intervenierenden Fachdidaktik in Abbildung 1.1 dargestellt. 1.2.2 Methodenkritik zur intervenierenden Fachdidaktik Analyse des Bildungsbedarfs und Theoriebildung zum Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung Bei der intervenierenden Fachdidaktik sind im Gegensatz zur hypothesenpr ufenden experimentellen Forschung normative Ein usse in Form der Zielvorstellungen transparent (Tulodziecki8 1. Einleitung und Herzig 1998). Sie wirken in das Unterrichtsmodell bez uglich der Voraussetzungen, Ziele und Unterrichtsmittel ein. Tulodziecki und Herzig (1998) beschreiben dar uber hinaus, dass eine Forschungsmethodik, die zur Entwicklung und Evaluation von Unterricht Praxis und Theorie integriert, besonders geeignet f ur forschendes Lehren und Lernen im Rahmen der Lehrerausbildung ist, da die Arbeitsschritte transparent und in ihrem Praxisund Theoriebezug nachvollziehbar sind (Tulodziecki und Herzig 1998, S. 29). Somit kann die Forschungsperson sowohl bei der Theoriebildung als auch in sp ateren Unterrichtserprobungen von Lehramtsstudierenden unterst utzt werden. Unterrichtserprobungen Die Unterrichtserprobungen sind Stichproben bei kleiner Teilnehmerzahl. F ur die Lehrperson ist es wahrend der Intervention notwendig, das zugrunde liegende Forschungskonzept zu kennen. Nur dadurch ist es m oglich, im Rahmen des Forschungskonzeptes auf die Lernsituation zu reagieren, ohne an Korrektheit einzub uen. F ur eine erste Erprobung w ahrend der Entwicklung der Konzepte ist es daher nahe liegend, dass sie von der Forschungsperson durchgef uhrt wird. Da diese jedoch keine Unterrichtserfahrung mit Sch ulern hatte, sind die Ergebnisse eingeschr ankt ubertragbar. Dem entgegen wirken jedoch kontinuierliche R uckmeldungen einer stets anwesenden Informatiklehrperson und die Durchf uhrung der zweiten Unterrichtserprobung durch Informatiklehramtsstudierende, die vom Autor und der Informatiklehrperson bei den Unterrichtsstunden begleitet wurden. Die besondere Situation, Forschungsund Lehrperson gleichzeitig zu sein, wird in der quantitativen Forschung jedoch kritisch gesehen. Durch die geringe Stichprobengr oe und den Verzicht auf Kontrollgruppenbildung sind Generalisierungen der Aussagen nicht m oglich. Damit kann die Machbarkeit zwar widerlegt, aber nur bedingt best atigt werden. Allein Plausibilit atserkl arungen und unterst utzende Aussagen zu ahnlichen Untersuchungen k onnen getroen werden. Deshalb ist die vorliegende Untersuchung qualitativ als Hinweis auf Machbarkeit, Durchf uhrbarkeit und hinsichtlich der Akzeptanz bei den Lernenden zu interpretieren. Daf ur wird davon ausgegangen, "[. . . ] dass die Teilnahme im Feld Empathie und Identikation mit den Untersuchungspersonen voraussetzt, da erst so die Interpretationsprozesse der Untersuchungspersonen erfasst und verstanden werden k onnen" (Atteslander et al. 2006, S. 94). Die Teilnahme des Forschers an der qualitativen Studie ist mit Vorteilen verbunden, obwohl im Gegensatz zu einer quantitativen Untersuchung Kritik an der Repr asentativit at ge ubt wird. Die Vorteile uberwiegen jedoch: "Eine solche Kritik verkennt aber die genuinen Vorz uge dieser Methode, denn qualitativ-teilnehmende Beobachtungen zeichnen sich gegen uber anderen Methoden ja gerade durch die Authentizit at der gewonnen Daten aus" (Atteslander et al. 2006, S. 95). Insgesamt muss die Auswertung der Unterrichtsinterventionen in dem Bewusstsein geschehen, dass quasi-experimentelle Untersuchungen "[. . . ] mehr Erkl arungsvarianten zu[lassen] als die Ergebnisse reiner experimenteller Untersuchungen, d. h. sie haben eine geringere interne Validit at" (Bortz und D oring 2002, S. 527). Auf Kontrollgruppenbildung wird einerseits aus Kapazit atsgr unden verzichtet, andererseits w urden die kleinen Fallzahlen auch bei hohen Abweichungen keinen Nachweis von Signikanzen im Paarvergleich zulassen (Holl 2003), der wiederum bei Gruppengr oen von mehr als zehn Sch ulern kaum noch zu bew altigen ist (Bortz und D oring 2002, S. 162). Dar uber hinaus m ussten Vergleichsgruppen m oglichst von der gleichen Lehrperson zu ahnlichen Tageszeiten unterrichtet werden, eine ahnliche Verteilung der Jungen und M adchen aufweisen sowie ein ahnliches Leistungspotenzial besitzen (Randomisierung). Letzteres liee sich nur durch k unstliche Zusammenstellung der Lerngruppen, z. B. durch Abfrage der Durchschnittsnoten in relevanten F achern,1.2. Forschungsmethodik und Forschungsverlauf 9 gewahrleisten. Auf eine Abfrage der Computernutzungsstrategien und Einstellungen zur Rechnernutzung wird verzichtet. Damit geht eine Minderung der internen Validit at einher. Deshalb wird exemplarisch die Methode des Laut-Denkens auerhalb der Unterrichtserprobungen eingesetzt, um Probleml osestrategien der Sch uler bei umfangreichen Anforderungssituationen anhand von Gedankenstichproben transparent zu machen (Bortz und D oring 2002, S. 324). Wie alle Laborstudien weist Laut-Denken im Gegensatz zur Feldstudie eine h ohere interne, aber niedrigere externe Validit at auf (Bortz und D oring 2002, S. 117). Die Daten der Lernerfolgskontrolle werden dokumentiert. Aufgrund ihrer hohen (Auswertungs-) Objektivit at (Holl 2003) werden die in der modernen Testkonstruktion vorherrschenden MultipleChoice-Aufgaben (Bortz und D oring 2002, S. 214) f ur Lernerfolgskontrollen genutzt. Die Kompetenzmessung mit solchen Lernerfolgskontrolle ist jedoch umstritten, da Wiedererkennung von Anforderungen eine groe Rolle spielt (Bortz und D oring 2002, S. 214). Somit sind entweder auch oene Anforderungssituationen in der Lernerfolgskontrolle oder unter Beobachtung durch die Forschungsperson im Unterricht zu stellen, um Einblick in die Sch ulervorgehensweisen zu erhalten. Auf einen Eingangstest zu Beginn der Unterrichtserprobung wird verzichtet, da bereits dieser Test Lernen und Sensibilisierung ausl osen w urde. Dieser so genannte Pretest-Eekt schrankt insbesondere die externe Validit at ein, also die Generalisierbarkeit auf vergleichbare Situationen (Bortz und D oring 2002, S. 505). Auerdem ist darauf hinzuweisen, dass standardisierte Leistungstests und Messinstrumente fehlen, so dass Leistungszuw achse hinsichtlich Informatiksysteme und Kompetenzentwicklung zurzeit empirisch nicht valide zu evaluieren sind. Da aus L osungen der schriftlichen Tests und von Aufgaben meist nicht mehr erkennbar ist, welche Losungsstrategien eingesetzt wurden, ist in den Unterrichtsinterventionen besonderer Wert auf Beobachtungen der hospitierenden Forscher hinsichtlich der Sch ulerarbeitsweisen gelegt worden. Im Anschluss an Unterrichtserprobungen wird ein Leitfaden-Interview mit dem Fachlehrer durchgefuhrt und eine Tonaufzeichnung vorgenommen. Damit ist nachtr aglich der Einuss des Interviewers, ggf. als Fehlerquelle, feststellbar. Interviewer ist die Forschungsperson, da die befragende Person ausreichend uber das Thema informiert sein muss, um exibel auf den Befragten eingehen zu konnen (Bortz und D oring 2002, S. 308). Zu beachten ist, dass der Interviewer gleichzeitig"Erhebungsinstrument"ist, so dass seine Gedanken, Reaktionen und Analysen ber ucksichtigt werden konnen, aber auch Beeinussung der Fragestellungen und der an ihn gerichteten Antworten zu erwarten sind, d. h. die Interaktion von Interviewer und Befragtem basiert auf wechselseitigen Erwartungshaltungen. Beeinussung der Ergebnisse sowie Verf alschungen der Erhebungssituationen durch Tonaufzeichnungen sind in der Regel nicht zu erwarten. Im Gegenteil kann davon ausgegangen werden, dass sich die Mitarbeit des Interviewten erh oht. Transkriptionen werden wegen des geringeren Aufwands in einer"geglatteten" Variante angefertigt, sofern es das theoretische Interesse erlaubt (Bortz und D oring 2002, S. 312). Die schriftliche Befragung zu Akzeptanz und Selbsteinsch atzung der Sch uler ndet einmalig nach der Lernerfolgskontrolle statt. Schriftliche Befragungen erfordern hohe Strukturierbarkeit der Inhalte und eignen sich besonders zur Befragung homogener Gruppen (Bortz und D oring 2002, S. 253). Die Ergebnisse der Lernerfolgskontrolle sind den Sch ulern vorher nicht bekannt, umuberm aig positive und negative R uckmeldungen zu vermeiden. Dennoch ist die subjektive Einsch atzung des Schwierigkeitsgrads der Lernerfolgskontrolle ein Einussfaktor auf die Akzeptanzbefragung und Selbsteinsch atzung. Aus Gr unden des Pers onlichkeitsschutzes werden die Daten anonymisiert erhoben und wegen der geringen Stichprobengr oe nicht vollst andig ver offentlicht. Denn bei der geringen Gruppengr oe k onnen personenbezogene Daten, wie Geschlecht und Alter R uckschl usse auf einzelne Sch uler erm oglichen. Die intervenierende Fachdidaktik ist auf subjektive Aussagen der Lerngruppenmitglieder angewiesen, um Motivation, Einstellungen und Bereitschaften als wichtige Kompetenzfacetten einschatzen zu k onnen. Es wird erfasst, wie die Sch uler den Lebensweltbezug des Unterrichts und des Lerngegenstands einsch atzen, da diese Kenngr oen nicht in der Lernerfolgskontrolle erfassbar10 1. Einleitung sind (Holl 2003). Durch die Anwesenheit des Kurslehrers bei der Beantwortung des Akzeptanzfragebogens werden eine hohe R ucklaufquote gesichert und Stichprobenfehler fast ausgeschlossen (Bortz und D oring 2002, S. 253). Die Abwesenheit der Forschungsperson bei der Beantwortung minimiert die Beeinussung w ahrend der Befragungssituation. Die Selbsteinsch atzung der Sch uler erreicht jedoch nicht die Objektivit at, wie sie durch Fremdevaluation in einer Lernerfolgskontrolle m oglich ist. So wird bei der schriftlichen Befragung vorausgesetzt, dass die Sch uler ihre Leistung erfassen und auf eigene Lernprobleme aufmerksam werden. Aussagen lassen sich auch aus relativen Ver anderungen der Einsch atzungen zwischen den unterschiedlichen Unterrichtserprobungen treen. Die Evaluation des Konzeptes durch intervenierende Fachdidaktik impliziert, m oglichst viele Personen in die theoretische und praktische Entwicklung des Unterrichtsmodells und die Diskussion von Wertentscheidungen zu den normativen Voraussetzungs-Ziel-Mittel-Aussagen einzubeziehen (Tulodziecki und Herzig 1998, S. 29). Dies kann geschehen durch Pr asentation der Ergebnisse auf nationalen und internationalen Fachtagungen, durch Einbeziehen von Hinweisen hospitierender Fachlehrer und Lehramtsstudierender w ahrend der Unterrichtserprobungen oder durch Lehrerfortbildungen und Diskussion der Ergebnisse mit Studierenden in einer forschenden Lehre. Die St arke der intervenierenden Fachdidaktik wird in der Ausarbeitung und Erkundung von komplexen Unterrichtssituationen gesehen, die den Weg f ur hypothesenpr ufende experimentelle Lehr-Lernforschung weist (Abschnitt 9.3). 1.3 Gliederung der Arbeit Kapitel 2: Einordnung in die Kompetenzdiskussion Die Forschungsmethodik wird auf die Gliederung der Dissertationsschrift abgebildet (vgl. Abbildung 1.1). Abbildung 1.2 zeigt die schematische Struktur der Arbeit. In Kapitel 2 wird die vorliegende Arbeit in die aktuelle Diskussion um Kompetenz eingeordnet. Theoretische Grundlagen Fachdidaktische  TheoriebildungAnwendung Kapitel 2 KompetenzdiskussionKapitel 3 InformatiksystembegriffAnforderungen Kapitel 7 Weiterentwicklung des Unterrichtsmodells Kapitel 5 Entwicklung des  UnterrichtsmodellsKapitel 4 Analyse des Forschungstandeswissenschatliche FragestellungenProblem Kapitel 9 Zusammenfassung, Fazit und Ausblick Kapitel 8 Zweite Unterrichtserprobung Kapitel 6 Erste UnterrichtserprobungErgebnis Abbildung 1.2: Schematische Struktur der Arbeit1.3. Gliederung der Arbeit 11 Kapitel 3: Der Informatiksystembegri In Kapitel 3 wird der fachwissenschaftliche Begri des Informatiksystems beschrieben (Abschnitt 3.2). Daf ur ist es notwendig, den aktuellen Informatiksystembegri in den unterschiedlichen Bereichen der Kerninformatik zu untersuchen. Zusammen mit dem Kompetenzbegri k onnen Analysekriterien formuliert werden (Abschnitt 2.1), anhand derer der nationale und internationale Stand der Forschung untersucht werden kann. Ziel des Kapitels ist es, durch eine Konkretisierung des Informatiksystembegris und einer Strukturierung von Kompetenzen aus der Fachwissenschaft heraus die Analyse des fachdidaktischen Forschungsstandes vorzubereiten. Es werden erste Schlussfolgerungen und wissenschaftliche Fragestellungen zur Erstellung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung abgeleitet. Kapitel 4: Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung In Kapitel 4 werden anhand der in Kapitel 3 ausgearbeiteten Kriterien der nationale und internationale Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik analysiert (Abschnitte 4.2 und 4.3). Ziel des Kapitels ist es, eine Clusterung der Bildungsziele, -inhalte, Lehr-Lernmethoden und Lernmedien aus der fachdidaktischen Diskussion f ur Kompetenzentwicklung mit Informatiksystemen vorzunehmen. Dabei wird einerseits die Forschungsl ucke oen gelegt und andererseits werden weitere Schlussfolgerungen und wissenschaftliche Fragestellungen zur Erstellung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung abgeleitet. Kapitel 5: Vorgehensweise zur Entwicklung eines Unterrichtsmodells am Beispiel Informatiksysteme und Kompetenzentwicklung In Kapitel 5 wird die Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung vorgestellt, um die in Kapitel 4 herausgearbeiteten Problemstellen zu bew altigen. Zuerst werden die Ziele des Unterrichtsmodells beschrieben (Abschnitt 5.2). Anschlieend werden die Ergebnisse aus der Analyse des Forschungsstandes fokussiert, indem eine Strategie zur Strukturierung im Rahmen des Unterrichtsmodells vorgestellt wird (Abschnitt 5.3). Der Autor begrundet mit Erkenntnissen der Lernpsychologie, Informatik und Informatikdidaktik, dass Entwurfsmuster informatikspezische, extern darstellbare Wissensrepr asentationen von vernetzten fundamentalen Ideen der Informatik sind (Abschnitt 5.4). Einige nach fachdidaktischen Kriterien ausgew ahlte Entwurfsmuster sind gleichzeitig Lernmittel und Lerngegenstand. Damit k onnen sowohl spezische Sch ulervorgehensweisen zur Erkundung von Informatiksystemen vorgestellt (Abschnitt 5.5) als auch die Erstellung eines Konzepts f ur die Nutzung von Lernmedien, speziell Lernsoftware, anhand von Wissensrepr asentationen skizziert werden (Abschnitt 5.6). Die Lernsoftware dient zur Uberwindung von Fehlvorstellungen und kognitiven Barrieren. Neben der theoretischen Grundlage durch Entwurfsmuster als Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik sind die Erkenntnisse aus dem Einsatz von Modulprototypen in der ersten Unterrichtserprobung mageblich. Ziel des Kapitels ist es, Intentionen des Unterrichtsmodells sowie die Strukturierung der Unterrichtsinhalte und Unterrichtsmethoden in der Form auszuarbeiten, dass sie exemplarisch f ur das Unterrichtsmodell in konkreten Unterricht uberf uhrt werden k onnen. Kapitel 6: Erste exemplarische Erprobung des Unterrichtsmodells In Kapitel 6 wird eine erste Unterrichtserprobung beschrieben. Neben der exemplarischen Auswahl der Unterrichtsinhalte ist eine Anpassung an Rahmenbedingungen einschlielich Vorwissen der Sch uler in der Sekundarstufe II erforderlich (Abschnitt 6.3). Problemstellen des Unterrichts werden erl autert (Abschnitt 6.4). Am Ende des Kapitels stehen die formativ gewonnenen Daten aus Unterrichtsbeobachtung, Lernerfolgskontrolle, Akzeptanzbefragung der Sch uler und Leitfadeninterview mit dem Klassenlehrer (Abschnitt 6.5).12 1. Einleitung Kapitel 7: Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells Die durch die erste Erprobung gewonnenen Daten und Erfahrungen werden ausgewertet. Sie munden in eine feinere Strukturierung der Basiskompetenzen (Abschnitt 7.2). Auerdem wird wegen der Uberlagerung von Fehlvorstellungen und kognitiven Barrieren der Kompetenzentwicklung mit Informatiksystemen durch typische Fehlvorstellungen der Objektorientierung eine exemplarische Analyse der systematischen Erkundung mittels Laut-Denken vorgenommen. Dadurch ergibt sich eine Uberarbeitung der Unterrichtmethodik der systematischen Erkundung (Abschnitt 7.4). Die didaktischen Klassizierungen von Entwurfsund Architekturmustern als Wissensrepr asentationen werden weiterentwickelt ((Ufer 2007), (Weyer 2007b)). Kapitel 8: Zweite exemplarische Erprobung des Unterrichtsmodells In Kapitel 8 wird abschlieend eine zweite Unterrichtserprobung vorgestellt. Die erg anzenden Erfahrungen mit dem bereits erprobten und uberarbeiteten Unterrichtsmodell unterst utzen die Evaluation des Lehr-Lernprozesses, f ur die auch eine Analyse der in dem Informatikkurs gestellten Aufgaben erfolgt. Aus den Untersuchungen kann auf die erworbene Kompetenz zu Informatiksystemen der beteiligten Sch uler geschlossen und damit die Qualit at des uberarbeiteten Unterrichtsmodells bewertet werden. Kapitel 9: Zusammenfassung, Fazit und Ausblick Den Abschluss bildet Kapitel 9 mit Zusammenfassung, Fazit und Ausblick auf weitere Forschung.2. Einordnung in die Kompetenzdiskussion 2.1 Der Kompetenzbegri 2.1.1 Kompetenzdenition Ziel des Forschungsprojektes des Autors ist es, Vorarbeit zur Entwicklung eines Kompetenzmodells zu leisten. Daf ur wird eine Strukturierung von Basiskompetenzen vorgenommen, die ein Schuler f ur Handlungen mit Informatiksystemen im Alltag ben otigt. Ausgel ost wurde die aktuelle Kompetenzdiskussion vor allem durch die PISA-Studie (Programme for International Student Assessment) der OECD (Organisation for Economic Co-operation and Development). Die in der empirischen Bildungsforschung zentrale Denition von Kompetenz nach Weinert (2001) wird in der vorliegenden Arbeit verwendet, da sie vielf altige Einussfaktoren auf erfolgreiches Bew altigen von Anforderungssituationen erfasst. Nicht zuletzt durch die Klieme-Expertise (Klieme et al. 2007) hat sie groen Einuss auf die aktuelle Diskussion um nationale Bildungsstandards und verbindliche Anforderungen an das Lehren und Lernen in der Schule. Durch die Verbindung von Kompetenzeigenschaften (Kapitel 2) mit Merkmalen von Informatiksystemen (Kapitel 3) kann die nationale und internationale fachdidaktische Diskussion auf Basiskompetenzbeschreibungen analysiert werden (Kapitel 4). Der Kompetenzbegri nach Weinert (2001) bzw. Klieme et al. (2007) ist: "InUbereinstimmung mit (Weinert 2001, S. 27f) verstehen wir unter Kompetenzen die bei Individuen verfugbaren oder von ihnen erlernbaren kognitiven F ahigkeiten und Fertigkeiten, bestimmte Probleme zu l osen, sowie die damit verbundenen motivationalen, volitionalen und sozialen Bereitschaften und F ahigkeiten, die Probleml osungen in variablen Situationen erfolgreich und verantwortungsvoll nutzen zu k onnen" (Klieme et al. 2007, S. 70). Kompetenzen st utzen sich auf Handlungen im Alltag, die in der vorliegenden Arbeit auf T atigkeiten mit Informatiksystemen bezogen werden. Deshalb sind Problemsituationen zu betrachten, die entweder durch den Einsatz von Informatiksystemen bew altigt werden k onnen oder die durch Informatiksysteme urs achlich ausgel ost wurden (Abbildung 2.1). Kompetenzen beziehen sich demnach auf komplexe Anforderungssituationen und bestehen nicht allein aus einzelnen F ahigkeiten und Fertigkeiten. Sie beinhalten neben kognitiven auch nichtkognitive, motivationale, willensm aige, personale und sozial-kommunikative Aspekte, die zum selbst andigen L osen dom anenrelevanter Probleme notwendig sind. Vor allem die Bereitschaft, ein Problem zu l osen, geh ort zur Kompetenz:14 2. Einordnung in die Kompetenzdiskussion Allgegenwart von Informatiksystemen Anforderungssituationen mit Informatiksystemen Informatiksysteme als Ursache eines ProblemsInformatiksysteme zur Lösung eines Problems Abbildung 2.1: Anforderungssituationen zur Kompetenzentwicklung mit Informatiksystemen "Die Kompetenzorientierung steht f ur den Anspruch, dass die Ergebnisse schulischen Lernens handlungsrelevant, praktisch anwendbar sowie pers onlich und gesellschaftlich bedeutsam sein sollen"(Heymann 2004, S. 8). Somit gehen die Zielvorstellungen von den Anforderungen der Lebenswelt aus. Weinert unterscheidet folgende, zusammenwirkende Kompetenzfacetten: F ahigkeit, Wissen, Verstehen, K onnen, Handeln, Erfahrung, Motivation (vgl. Klieme et al. 2007, S. 73). Ausgeschlossen wird durch den Kompetenzbegri die Fokussierung auf Zertikatskurse bzw. Qualikation, die nicht das Verhalten von Personen in Anforderungssituationen, sondern die erfolgreiche Bew altigung einer Pr ufungssituation beurteilt. Nicht die traditionellen Kenntnisse und F ahigkeiten stehen bei PISA der OECD im Vordergrund, sondern deren Anwendung in unterschiedlichen Kontexten: "Der Begri Grundbildung (literacy) wurde gew ahlt, um zu betonen, dass mathematische Kenntnisse und F ahigkeiten, wie sie im traditionellen Curriculum der Schulmathematik deniert werden, im Rahmen von OECD/PISA nicht im Vordergrund stehen. Statt dessen liegt der Schwerpunkt auf der funktionalen Anwendung von mathematischen Kenntnissen in ganz unterschiedlichen Kontexten und auf ganz unterschiedliche, Reexion und Einsicht erfordernde Weise" (OECD 2000, S. 47; Hervorh. im Original) Bei PISA wurden jedoch nur Lesekompetenz sowie mathematische und naturwissenschaftliche Grundbildung deniert. F ur die Informatik fehlt etwas Vergleichbares, obwohl der Bedarf formuliert wird: "Aber als generelle Pr amisse f ur die Teilhabe an gesellschaftlicher Kommunikation reicht die Dimension der einfachen Kulturtechniken nicht mehr aus. Die Heranwachsenden m ussen vielmehr f ahig werden f ur den Gebrauch der Computer, f ur den Umgang mit Medien, f ur die Herausforderungen einer multikulturellen Welt, und sie m ussen zugleich in der Form der Welterfahrung von den einfachen Formen des Ich-zentrierten Umgangs mit Welt auf die grundlegenden wissenschaftlichen Modi der Welterfahrung ubergehen k onnen" (Klieme et al. 2007, S. 67). In Anlehnung an die OECD-Denition der mathematischen Grundbildung kann formuliert werden: Kompetenzentwicklung mit Informatiksystemen beinhaltet also, dass Sch uler in die Lage versetzt werden, die Rolle, die Informatiksysteme in der Welt spielen, zu erkennen und zu verstehen, begr undete informatische Urteile zu Informatiksystemen abzugeben und sich auf eine Weise mit Informatiksystemen zu befassen, die den Anforderungen ihres gegenw artigen und k unftigen Lebens als eines konstruktiven, engagierten und reektierenden B urgers entspricht (vgl. OECD 2000, S. 14). Somit m ussen Sch uler in der Lage sein, Zusammenh ange und Strukturen von Informatiksystemen in realit atsnahen Situationen zu erkennen und diese beurteilen zu k onnen. Kompetenzentwicklung mit Informatiksystemen f uhrt demzufolge zu einer kritisch-reektierten Auseinandersetzung mit Informatiksystemen, die gesellschaftliches Engagement f ordert.2.1. Der Kompetenzbegri 15 Durch den oben genannten Kompetenzbegri ergeben sich wichtige Implikationen. So ist es erforderlich, Kompetenzen nicht ausschlielich normativ aus der Fachsystematik der Informatik abzuleiten; vielmehr ist auch die psychologische Komponente von Kompetenz durch empirische Untersuchungen zu ber ucksichtigen. Durch die in Kapitel 1 beschriebenen Restriktionen geschieht das in der vorliegenden Arbeit hinsichtlich Machbarkeit und Plausibilit atserkl arungen. In weitergehende Arbeiten kann Kompetenzentwicklung als gradueller, gestufter Prozess zum Erwerb von Expertise zur Bew altigung komplexer Anforderungssituationen empirisch fundiert werden (Abschnitt 9.3). Im Folgenden werden weitere Konzepte von Kompetenz aufgef uhrt und bez uglich Informatiksysteme diskutiert. Diese sind Schl usselkompetenzen gem a OECD, Literacys zu Informatiksystemen gem a UNESCO und der Europ aische Qualikationsrahmen f ur lebenslanges Lernen. Wegen starker Uberschneidungen mit den genannten werden die technologiebezogenen Bildungsstandards f ur Sch uler"National Educational Technology Standards and Performance Indicators for Students" der ISTE (International Society for Technology in Education) nicht betrachtet. Diese sind: (1) Creativity and Innovation, (2) Communication and Collaboration, (3) Research and Information Fluency, (4) Critical Thinking, Problem Solving, and Decision Making (5) Digital Citizenship, and (7) Technology Operations and Concepts (ISTE 2007). Der Beitrag des Unterrichtsmodells f ur Kompetenzentwicklung mit Informatiksystemen bzw. der Unterrichtserprobungen wird in den Abschnitten 5.7, 6.6.2 und 8.5.2 analysiert. 2.1.2 Schl usselkompetenzen Es ist die Frage zu stellen, wie Kompetenzentwicklung mit Informatiksystemen zur Auspr agung von Schl usselkompetenzen beitr agt. Die OECD hat in dem Bericht"Denition and Selection of Key Competencies (DeSeCo)" drei Bereiche f ur Schl usselkompetenzen deniert: 1. Interaktive Anwendung von Medien und Mitteln (Tools), 2. Interagieren in heterogenen Gruppen, 3. Eigenst andiges Handeln (OECD 2005). Durch die steigenden Anforderungen im Alltag der Wissensgesellschaft sind Schl usselkompetenzen von vorrangiger Bedeutung. Sie umfassen mehr als Wissen und Fertigkeiten, denn sie betonen nicht-kognitive F ahigkeiten wie Bereitschaften und Einstellungen. Schl usselkompetenzen sind nicht nur f ur Spezialisten, sondern f ur alle Individuen notwendig, denn sie stellen eine Voraussetzung f ur lebensbegleitendes Lernen dar. Die erste Kompetenzkategorie"Interaktive Anwendung von Medien und Mitteln (Tools)" beinhaltet (1a) interaktive Anwendung von Sprache, Symbolen und Texten, (1b) interaktive Nutzung von Wissen und Informationen sowie (1c) interaktive Anwendung von Technologien. Die Rollen von Informatiksystemen f ur die Auspr agung dieser Schl usselkompetenzen liegen auf der Hand: ZurUbertragung von Sprache werden Informatiksysteme genutzt ebenso wie zur Verarbeitung von Symbolen und Texten (DeSeCo: 1a). Die Anwendung von Informatiksystemen als Werkzeug (DeSeCo: 1c) ben otigt Wissen und Auseinandersetzung mit zeitgem aen M oglichkeiten der Anwendung im Alltag durch Individuen, z. B. neue Eingabeund Ausgabem oglichkeiten von mobilen Systemen. Dementsprechend k onnen moderne Kommunikationstechnologien wie Informatiksysteme den Arbeitsalltag und die Kooperation zwischen Individuen ver andern, z. B. durch zunehmende Unabh angigkeit von einem Ort und weltweite soziale Vernetzung. Die interaktive Nutzung von Wissen und Informationen (DeSeCo: 1b) setzt Kenntnisse zu deren Speicherung und Ubertragung in Informatiksystemen voraus. Die zweite Kompetenzkategorie"Interagieren in heterogenen Gruppen"bezieht sich auf zwischenmenschliche Beziehungen. Entsprechende Schl usselkompetenzen sind unverzichtbar f ur pluralistische Gesellschaften. Dazu geh oren (2a) gute und tragf ahige Beziehungen unterhalten, (2b)16 2. Einordnung in die Kompetenzdiskussion Fahigkeit zur Zusammenarbeit und (2c) Bew altigen und L osen von Konikten. Bez uglich Informatiksysteme ist zu beobachten, dass sie es unterst utzen, Beziehungen uber groe Entfernungen zu unterhalten (DeSeCo: 2a). Sch uler ben otigen die F ahigkeit, Beziehungen mit anderen uber Informatiksysteme zu initiieren und zu erhalten bei unterschiedlichen Karrieren, Berufen und Hintergr unden der Individuen (DeSeCo: 2b). Schl usselkompetenzen erm oglichen es Individuen, mit anderen angemessen zu kommunizieren und sich in andere Personen hineinzuversetzen. Gerade das Bew altigen und L osen von Konikten in Beziehungen, die ohne pers onlichen Kontakt auskommen m ussen, stellt Menschen vor Schwierigkeiten, z. B. Etikette im Netz, Bewusstsein uber die Oentlichkeit von Kommunikation in Internetforen und Aspekte von Interkulturalit at (DeSeCo: 2c). Die dritte Kompetenzkategorie"Eigenst andiges Handeln" besteht aus (3a) Handeln im gr oeren Kontext, (3b) Realisieren von Lebenspl anen und pers onlichen Projekten sowie (3c) Verteidigung und Wahrnehmung von Rechten, Interessen, Grenzen und Erfordernissen. Das Handeln im gr oeren Kontext bedarf des Erkennens von gesellschaftlichen Mustern zur Nutzung von Informatiksystemen und der Einbettung in den jeweiligen Kontext, z. B. Vorratsdatenspeicherung (DeSeCo: 3a). Sch uler m ussen eigenst andig Informatiksysteme einsetzen k onnen, um an unterschiedlichen Projekten innerhalb und auerhalb der Schule aktiv teilnehmen zu k onnen (DeSeCo: 3b). Individuen m ussen die Konsequenzen ihres Handeln einsch atzen k onnen, um Entscheidungen zu fallen, Verantwortung zu ubernehmen und Rechte wahrzunehmen, z. B. E-Government, Fragen des Urheberrechts und E-Learning (DeSeCo: 3c). Damit unterst utzen Schl usselkompetenzen zu Informatiksystemen die Auspr agung von Selbstvertrauen. Fazit ist, dass Schl usselkompetenzen insbesondere die nicht-kognitiven Elemente von Kompetenz betonen. Informatiksysteme determinieren neue Handlungsoptionen, die zur Auspr agung von Schlusselkompetenzen kreativ genutzt werden m ussen. 2.1.3 ICT Literacy und Information Literacy In der UNESCO-Publikation"Understanding Information Literacy: A Primer" (UNESCO 2008) werden die wichtigsten"Literacys"aufgef uhrt, die m undige B urger im 21. Jahrhundert ben otigen: "The family of 21st Century 'survival literacies' includes six categories: (1) the Basic or Core functional literacy uencies (competencies) of reading, writing, oralcy and numeracy; (2) Computer Literacy; (3) Media Literacy; (4) Distance Education and E-Learning; (5) Cultural Literacy; and (6) Information Literacy. The boundaries between the various members of this family overlap, but they should be seen as a closely-knit family" (UNESCO 2008, S. 3). Hinsichtlich des Einsatzes von Informatiksystemen werden im Folgenden"Computer Literacy", "Media Literacy" und"Information Literacy" kurz vorgestellt. Die Computer Literacy bildet zusammen mit der Media Literacy die"ICT Literacy" (Information and Communication Technology; (UNESCO 2008, S. 5)). Letztere wird in Kapitel 4 bei der Analyse internationaler Curricula auf ihren Beitrag zur Kompetenzentwicklung mit Informatiksystemen betrachtet. Computer Literacy wiederum wird weiter unterteilt in"Hardware Literacy", "Software Literacy" und"Applications Literacy". Diese Einteilung korrespondiert stark mit der Denition von Informatiksystemen gem a Duden Informatik ((Claus und Schwill 2006, S. 314); Abschnitt 3.2.1). Hardware Literacy beinhaltet Basisf ahigkeiten, um einen Rechner oder ein mobiles Endger at ezient anwenden zu k onnen. Dabei bezieht sie sich auf die sichtbaren und greifbaren Komponenten und deren Nutzung, z. B. traditionelle Eingabeund Ausgabeger ate wie Maus, Tastatur und Drucker. Hardware Literacy ist somit in vielen F allen eine Grundlage f ur Mensch-MaschineInteraktion. Neue Interaktionsformen, z. B. Gestenerkennung, die uber Sensoren geschieht, zeigen jedoch die Grenzen des Begris der Hardware Literacy, da das Anfassen und die Sichtbarkeit der Komponenten zur Interaktion nicht mehr erforderlich sind.2.1. Der Kompetenzbegri 17 Im Gegensatz dazu betrit Software Literacy die Basisf ahigkeiten zur gezielten Nutzung von Software, die ein Informatiksystem zur L osung eines allgemeinen Anwendungsproblems ben otigt. Darunter f allt in erster Linie das Betriebssystem, das auf allen Rechnern existiert, aber auch typische Anwendungssoftware wie Textverarbeitungssysteme, Tabellenkalkulationen und E-Mail-Programme. Trotz des Hinweises auf E-Mail und das Internet steht ein isolierter Einzelplatzrechner im Vordergrund, und Computer bzw. Software Literacy m ussen bez uglich Informatiksysteme im Zusammenspiel mit den weiteren Kompetenzen (Literacies) gesehen werden. In Abgrenzung zur Software Literacy wird Applications Literacy deniert als Wissen und K onnen, um spezielle Anwendungssoftware einzusetzen. Darunter sind beispielsweise rmenspezische Finanzoder Personalverwaltungssoftware zu verstehen, aber auch Software zur Unterst utzung von Arbeitsabl aufen und weitere dom anenspezische Software. F ur Basiskompetenzen zu Informatiksystemen an allgemein bildenden Schulen wird Applications Literacy deshalb in dieser Arbeit nicht weiter betrachtet. Media Literacy hingegen betont die kritische Auseinandersetzung mit Medien aller Art einschlielich Informatiksystemen und deren kreative Anwendung. Sie wird in drei Bereiche unterteilt: "[. . . ] media literacy implies having access to the media, understanding the media and creating/expressing oneself using the media" (UNESCO 2008, S. 6). Information Literacy meint Wissen, F ahigkeiten und Einstellungen, um zu entscheiden, wann zusatzliche Information notwendig ist, wie Information ezient gefunden wird und wie sie zu interpretieren ist. Dazu z ahlt die Einsch atzung von Glaubw urdigkeit und Authentizit at. Information Literacy ist eng verkn upft mit kritischem Denken und dem"Lernen-zu-Lernen", z. B. der Nutzung von E-Learning-Angeboten. F ur den Informatikunterricht sind insbesondere der kritische Umgang mit Information und die Informationssuche in Netzen wichtige Ankn upfungspunkte. Fur die vorliegende Arbeit gilt, dass diese Kompetenzen auf Informatiksysteme bezogen und im Rahmen einer informatischen Bildung diskutiert werden. 2.1.4 Europ aischer Qualikationsrahmen f ur lebenslanges Lernen Der"Europ aische Qualikationsrahmen f ur lebenslanges Lernen" (EQR) verkn upft die Qualikationssysteme verschiedener L ander miteinander, indem er als Referenzrahmen"Ubersetzungsinstrument" f ur Qualikationen ist (EU 2008). Er soll Mobilit at zwischen unterschiedlichen L andern und Bildungssystemen unterst utzen, indem er Ausbildungen vergleichbar macht. Im EQR werden daf ur acht Referenzniveaus unterschieden. Als Beispiel wird f ur Niveau 1 ein Schulabschluss, f ur Niveau 8 die Promotion genannt. Durch diese weite Spanne ist der EQR geeignet, lebensbegleitendes Lernen zu erfassen. F ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II bedeutet dies im Umkehrschluss, dass nicht alle Niveaustufen zu betrachten sind. Eine Einordnung der Kompetenzentwicklung mit Informatiksystemen im Verlauf der Sekundarstufe II erm oglicht jedoch eine Vergleichbarkeit zwischen Ausbildungsg angen. Die Niveaus beziehen sich explizit auf Lernergebnisse, nicht auf Inhalte. Die Lernergebnisse wiederum werden unterteilt in Kenntnisse, F ahigkeiten und Kompetenz. W ahrend Kenntnisse Theorieund Faktenwissen umfassen und Fertigkeiten sowohl kognitiv als auch praktisch sein k onnen, ist Kompetenz als Ubernahme von Verantwortung und Selbst andigkeit deniert (EU 2008, S. 11). Bei den Kenntnissen lassen sich viele Bez uge zu technischen Aspekten von Informatiksystemen und deren Anwendungsgebiet herstellen (EU 2008, S. 12): Niveau 1 entspricht einem grundlegenden Allgemeinwissen und Niveau 2 einem grundlegendes Faktenwissen in einem Arbeitsoder Lernbereich. Niveau 3 beinhaltet Kenntnisse von Fakten, Grunds atzen, Verfahren und allgemeinen Begrien in einem Bereich und Niveau 4 ein breites Spektrum an Theorieund Faktenwissen. Ab Niveau 5 wird eine metakognitive Ebene adressiert, d. h. die Grenzen ihrer Kenntnisse sind den Lernenden bewusst.18 2. Einordnung in die Kompetenzdiskussion Bei den Fertigkeiten kann vornehmlich auf Informatiksysteme als Werkzeug eingegangen werden (EU 2008, S. 13): Auf Niveau 1 sind grundlegende Fertigkeiten gemeint, die zur Ausf uhrung einfacher Aufgaben erforderlich sind. Niveau 2 umfasst grundlegende kognitive und praktische Fertigkeiten, die zur Nutzung relevanter Informationen erforderlich sind, um Aufgaben auszuf uhren und Routineprobleme unter Verwendung einfacher Regeln und Werkzeuge zu l osen. Niveau 3 beinhaltet eine Reihe kognitiver und praktischer Fertigkeiten zur Erledigung von Aufgaben und zur L osung von Problemen, wobei grundlegende Methoden, Werkzeuge, Materialien und Informationen ausgew ahlt und angewandt werden. Ab Niveau 4 werden speziellere, abstraktere und komplexere Probleme im Arbeitsoder Lernbereich adressiert, die kreative L osungen erfordern. Bei den Kompetenzniveaus wird die Einbettung der Kenntnisse und Fertigkeiten in einen sozialen Kontext beschrieben (EU 2008, S. 13). Handlungen mit Informatiksystemen sind somit im sozio-technischen Kontext zu diskutieren: Kompetenzen auf Niveau 1 umfassen das Arbeiten oder Lernen unter direkter Anleitung in einem vorstrukturierten Kontext, auf Niveau 2 das Arbeiten oder Lernen unter Anleitung mit einem gewissen Ma an Selbstst andigkeit, z. B. Anwendung von Informatiksystemen zur Informationsbeschaung. Niveau 3 beinhaltet die Ubernahme von Verantwortung f ur die Erledigung von Arbeitsoder Lernaufgaben und das Anpassen des eigenen Verhaltens an die jeweiligen Umst ande bei der L osung von Problemen, z. B. Auswahl eines geeigneten Informatiksystems. Auf Niveau 4 ist selbstst andiges T atigwerden innerhalb der Handlungsparameter von Arbeitsoder Lernkontexten, die in der Regel bekannt sind, sich jedoch andern k onnen, ein Lernergebnis. Auerdem ist ein Lernender in der Lage, die Beaufsichtigung der Routinearbeit anderer Personen zu ubernehmen, wobei eine gewisse Verantwortung fur die Bewertung und Verbesserung der Arbeitsoder Lernaktivit aten ubernommen wird. Das heit, Sch uler m ussen in der Lage sein, Informatiksysteme und Handlungen anderer mit Informatiksystemen bei Routineaufgaben bewerten zu k onnen. Niveau 5 beinhaltet das Leiten und Beaufsichtigen in Arbeitsoder Lernkontexten, in denen nicht vorhersehbare Anderungen auftreten, sowie die Uberpr ufung und Entwicklung der eigenen Leistung und der Leistung anderer Personen. Somit ist ein (selbst-) kritischer Umgang mit Informatiksystemen notwendig, und Lernende m ussen Informatiksysteme zu komplexen Lernumgebungen zusammenstellen. Ab Niveau 6 steht die Ubernahme von Personalverantwortung und Gestaltung komplexer Arbeitsund Lernkontexte im Vordergrund. 2.1.5 Kompetenzstufung Im EQR erfolgt eine sehr dierenzierte Unterscheidung von Niveaustufen, um Kenntnisse, Fertigkeiten und Kompetenzen des lebensbegleitenden Lernens einordnen zu k onnen. F ur die Sekundarstufe II sind insbesondere Lernzieltaxonomien geeignet, um Stufungen vorzunehmen, da mit ihnen reichhaltige Erfahrungen vorliegen. Weit verbreitet ist eine Unterteilung in die Anforderungsbereiche Wissen, Anwenden und Gestalten, wie sie beispielsweise in den Anforderungsbereichen I, II und III der Einheitlichen Pr ufungsanforderungen in der Abiturpr ufung (EPA) im Fach Informatik vorgenommen wird (KMK 2004). Etwas genauer ist die von Anderson und Krathwohl uberarbeitete Bloom'sche Taxonomie (Anderson und Krathwohl 2001), die sechs gestufte kognitive Prozesse bzw. Erkenntnisdimensionen anspricht: Erinnern, Verstehen, Anwenden, Analysieren, Bewerten und (Er)schaen (vgl. Schobel und Holdt 2004). Die informatikspezische Lernzieltaxonomie nach Fuller et al. (2007) bezieht sich auf Andersons und Krathwohls Taxonomie, ordnet die kognitiven Prozesse jedoch zweidimensional an. Anwenden und Gestalten bilden darin eine eigene Dimension, da ihnen f ur die Informatik ein besonderes Gewicht beigemessen wird: "We can also distinguish between disciplines in which there is an emphasis on learning through interpreting and those in which learning is predominantly achieved through doing. [. . . ] Computing students are expected to do a lot of learning through doing, whether it is learning about software engeneering by developing systems of increasing complexity, learning about networking by implementing protocols or learning about group dynamics by working in teams"(Fuller et al. 2007, S. 163).2.2. Basiskompetenzen und Bildungsstandards 19 Produ zieren6.  (Er)schaffen 3.  Anwenden∅ 1.   Erinnern2.  Verstehen4.  Analysieren5.  Bewerten Interpretieren Abbildung 2.2: Lernzielebenen der informatikspezischen Lernzieltaxonomie nach (Fuller et al. 2007, S. 164) Tabelle 2.2 zeigt die informatikspezische Lernzieltaxonomie nach Fuller et al. (2007). In der vorliegenden Arbeit werden die sechs kognitiven Prozesse nach Anderson und Krathwohl (2001) bzw. Fuller et al. (2007) verwendet. 2.2 Basiskompetenzen und Bildungsstandards Der Begri der Basiskompetenzen wird in der internationalen Diskussion einerseits f ur Minimalanforderungen in Bildungsstandards und andererseits f ur untere Stufen eines Kompetenzmodells verwendet (vgl. Klieme et al. 2007, S. 100). Die jeweilige Grenze zwischen Basiskompetenzen und weiteren Kompetenzen wird im Allgemeinen von Expertengremien getroen. Sie ist meist dadurch begr undet, dass Sch uler einer Risikogruppe zugeordnet werden, die beispielsweise den angestrebten Schulabschluss oder eine Berufsausbildung vermutlich nicht erreichen wird, wenn sie die Minimalanforderungen nicht erf ullen. Kompetenzmodelle konkretisieren die Kompetenzbeschreibungen (Klieme et al. 2007, S. 9) und vermitteln wissenschaftlich fundiert zwischen Bildungszielen und konkreten Lehr-Lernprozessen. Ein Kompetenzmodell umfasst normative Vorgaben und empirische Validierung. Operationalisierte Kompetenzen unterscheiden sich von operationalisierten Lernzielen im Wesentlichen nicht in der Formulierung, sondern durch ihren theoretischen Hintergrund, d. h. ein Kompetenzmodell. Bildungsstandards beschreiben Ergebnisse von Bildung (Output-Orientierung) durch Kompetenzen, die am Ende des Lehr-Lernprozesses gemessen werden k onnen. Klieme et al. (2007) merken an, dass die Orientierung an Grunddimensionen der Kompetenzentwicklung sogar einfacher zu erstellen ist, als ein detaillierter Katalog von Lernzielen und -inhalten (vgl. Klieme et al. 2007, S. 48). Klieme erg anzt jedoch: "Wie jede Lehrplanung stellen daher auch Standards einen Kompromiss dar zwischen Orientierung an fachlicher Systematik, an funktionalen Anforderungen der Lebensund Arbeitswelt und an Lernvoraussetzungen und Entwicklungsbed urfnissen der Lernenden. Allerdings haben sich die Schwerpunkte heute eindeutig zugunsten der funktionalen Anforderungen verschoben" (Klieme 2004, S. 10). In der bildungstheoretischen Diskussion existiert zurzeit kein Konsens uber die angemessene Operationalisierung von Kompetenzen, mehr noch ist es nicht m oglich, aus allgemeinen Bildungszielen eindeutig konkrete Lernziele ohne Widerspruch abzuleiten (vgl. Klieme et al. 2007, S. 64). F ur die unterrichtspraktische Erprobung des angestrebten Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung werden dementsprechend Lernziele als kleinschrittige Zielfunktionen angegeben und mit den angestrebten Kompetenzen in Verbindung gesetzt bzw. in eine fachdidaktisch begr undete Strukturierung der Kompetenzen eingeordnet.20 2. Einordnung in die Kompetenzdiskussion Merkmale von Bildungsstandards sind Fachlichkeit, Fokussierung, Kumulativit at, Verbindlichkeit f ur alle, Dierenzierung, Verst andlichkeit und Realisierbarkeit (Klieme et al. 2007, S. 24f). Um einen Beitrag zu den Bildungsstandards f ur die Informatik zu leisten, werden deshalb 1. die Ergebnisse auf den Lernbereich"Kompetenzentwicklung mit Informatiksystemen" bezogen und daf ur die Grundprinzipien f ur das Unterrichtsfach klar herausgearbeitet (Fachlichkeit), 2. Lernziele und Kompetenzbeschreibungen aufeinander aufbauend und miteinander vernetzt beschrieben (Kumulativit at), 3. Kompetenzstufungen vorbereitet, die als Grundlage f ur eine empirische Uberpr ufung der Stufung dienen k onnen (Dierenzierung), 4. die Lernziele und Kompetenzbeschreibungen klar, knapp und nachvollziehbar formuliert (Verst andlichkeit), 5. Unterrichtserprobungen des Unterrichtsmodells vorgenommen (Realisierbarkeit). Fokussierung als weiteres Merkmal von Bildungsstandards wird im Rahmen dieser Arbeit bereits durch die thematische Eingrenzung auf Informatiksysteme und Kompetenzentwicklung unterstutzt. Die Verbindlichkeit als Merkmal fordert schulform ubergreifende Mindeststandards und geht damit uber das Ziel dieser Arbeit, Informatiksysteme und Kompetenzentwicklung f ur die Sekundarstufe II, hinaus. Die bislang in Lehrpl anen und Empfehlungen vorherrschende Beschreibung von Unterrichtsinhalten und Lernzielen wird also um die neue Perspektive der Kompetenzbeschreibung erg anzt. Klieme merkt jedoch an, dass die Forschung zu Kompetenzmodellen noch am Anfang steht: "Vor allem fehlen Kompetenzmodelle, welche die Entwicklung uber die Jahrgangsstufen hinweg beschreiben k onnen. Was in der Grundschule eine Probleml oseaufgabe ist, k onnte ja in der 9. Jahrgangsstufe als Routineaufgabe und in der Sekundarstufe II als alltagsbezogenes Denken gelten. Diese Zuordnung ist jedoch rein hypothetisch; es fehlt an entsprechenden Modellen, die mit L angsschnittdaten belegt sind. Man wird sich daher bei der Arbeit an den Bildungsstandards in vielen F allen zunachst auf das Erfahrungswissen der Fachdidaktiken st utzen" (Klieme 2004, S. 12). Damit ist die Frage der Aneignung von Informatikwissen genauso bedeutsam wie die Frage, wie zu typischen Prozessen aus der Lebenswelt der Sch uler motivierende Lehr-Lernprozesse konstruiert werden k onnen, die Kompetenzentwicklung mit Informatiksystemen f ordern. Die von Klieme et al. (2007) geforderte Analyse des Erfahrungswissens der Fachdidaktiken und in der Schulinformatik wird in Kapitel 4 vorgenommen. 2.3 Kompetenz statt"Informatiksystemverst andnis" Ziel der Arbeit ist die Entwicklung und Erprobung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung. Als Arbeitstitel der vorliegenden Dissertationsschrift wurde lange Zeit der Begri"Informatiksystemverst andnis" bzw."Verstehen von Informatiksystemen" genutzt, der auch in vielen Publikationen des Autors Verwendung ndet. Durch die aktuelle Diskussion zu Kompetenzen und Standards in der informatischen Bildung wurde dieser Begri jedoch verworfen, da er als undierenziertes, nicht messbares Lernziel im Widerspruch zur Intention des Kompetenzbegris steht. Vielmehr ist er durch den h augen Gebrauch eine Ursache fur die Kompetenzdiskussion. Um dies zu verdeutlichen und Missinterpretationen zu vermeiden, wird im Folgenden der Verstehensbegri gekl art. Der Verstehensbegri wurde auf zwei Ebenen genutzt: Einerseits im Sinne einer Bildungszielbeschreibung und andererseits als kognitiver Prozess bei der Operationalisierung von Lernzielen. F ur ersteres, also als grobe Bildungszielbeschreibung im Sinne des Informatiksystemverst andnisses, ist der Verstehensbegri in Anlehnung an Forneck hilfreich, der Ergebnisse der Kognitionspsychologie in die Informatikdidaktik transferiert hat:2.3. Kompetenz statt"Informatiksystemverst andnis" 21 "Ausgangspunkt der Informatik-Grundbildung sind komplexe Situationen, die aufgrund ihrer Komplexit at oder aufgrund methodischer Interventionen der Lehrperson kognitive Dissonanzen ausl osen [. . . ]. Am Ende eines gelungenen Lernprozesses, wenn Komplexit at abgearbeitet ist, steht Verstehen" (Forneck 1997, S. 24f). Forneck beruft sich auf die kognitionspsychologische Forschung und einen daraus resultierenden veranderten Lernbegri (Forneck 1997, S. 24f). Verstehen k onne dabei als kognitive Konstruktion, d. h. als sinnerzeugender Vorgang gesehen werden, bei dem neues Wissen in existierende Strukturen integriert wird und diese dadurch erweitert und ver andert werden. F ur den Lernprozess werde das Wissen hierarchisch geordnet und somit schrittweise uberpr ufbar in Form von konkreten Aufgaben inklusive Bewertung. In der Kognitionspsychologie werde Verstehen dann unterstellt, wenn ein Sachverhalt "in das subjektive Handlungsund Prozewissen integriert werden kann" (Aebli 1980, S. 189). Forneck fordert deshalb, dass der Informatikunterricht phasenweise in die Verantwortung der Schulerubergeht und die Lehrperson dabei auf Koh arenz, Dierenziertheit und Vollst andigkeit achtet (Forneck 1997, S. 25). Verstehen ist dabei ein nicht abschliebarer, mehrperspektivischer Vorgang, der als"Sehen von Zusammenh angen" bezeichnet wird. Da pl otzliche Eingebungen nicht planbar sind, sollten Zusammenh ange grasch sichtbar gemacht werden (Forneck 1997, S. 25). Abschlieend betont Forneck, dass Verstehen ein kontextuell eingebetteter Vorgang ist, der kontextabh angig immer neue Wahrnehmungs-, Analyse-, Deutungsund Handlungsm oglichkeiten er onet (Forneck 1997, S. 25). Verstehen ist damit aber auch stark von dem Erkenntnisgewinnenden Subjekt abh angig, das wahrnimmt, deutet und handelt. Damit besteht ein Widerspruch zwischen dem Verstehensbegri und dem Kompetenzbegri, denn durch Kompetenz wird auf die messbaren Lernergebnisse fokussiert, anstatt auf das im Subjekt stattndende Lernen. Zusatzlich zielt Kompetenz auf die Alltagsrelevanz des Erlernten ab. Rehm schl usselt f ur die Didaktik der Naturwissenschaften die Dimensionen der Kompetenz"Verstehen von Ph anomenen und Begrien" auf (Rehm 2006). Er bezieht sich dabei auf Wagenschein (1991), der Verstehen als "echtes, urspr ungliches und vor allem selbst vollzogenes Verstehen" (Rehm 2006, S. 30) beschreibt. Die Sch uler verstehen Ph anomene in ihrer Welt: "Sie stellen eine Beziehung zwischen sich, dem Ph anomen in der Welt her und bauen hierdurch neue Strukturen auf" (Rehm 2006, S. 30). Rehm beschreibt vier Kompetenzstufen des Verstehens: 1. Ein Ph anomen als fragw urdig erkennen k onnen; 2. Eine Beziehung zum Ph anomen aufbauen k onnen; 3. Sinn konstruieren k onnen; 4. Der Sch uler versteht das Ph anomen (vgl. Rehm 2006, S. 34). Auallend ist die Ahnlichkeit der Kompetenzstufen mit dem Unterrichtsexperiment nach Meyer (2006). Somit k onnen die Kompetenzstufen mit Schritten in einem Informatikexperimentiervorgang mit Informatiksystemen in Verbindung gesetzt werden (Abschnitt 5.5). Zur empirischen Uberpr ufung der Stufung nutzt Rehm den Ansatz der Ph anomenographie (vgl. Fincher und Petre (2004) f ur den Bereich"Computer Science Education Research" (CSER)). Nach der Auswertung so genannter Ph anomenprotokolle stellt er jedoch kritisch fest, dass Sch uler der Sekundarstufe dann die Stufe drei und vier nicht mehr messbar erreichen, wenn sie gr oere fachliche Vorkenntnisse besitzen. Er vermutet, dass durch Vorkenntnisse allgemein g angigen Deutungen und Halbwahrheiten Vorschub geleistet wird (Rehm, S. 271). Fazit ist, dass eine Verkn upfung des Kompetenzund Verstehensbegris m oglich ist, die dreifach Bedeutung des Verstehens als Bildungsziel, Kompetenzfacette nach Weinert und Lernziel jedoch nicht aufgehoben wird. Zur Operationalisierung von Lernzielen wird eine sehr viel feinere Bedeutung des Verstehens benotigt. Wittmann argumentiert in der Didaktik der Mathematik:22 2. Einordnung in die Kompetenzdiskussion "Was soll heien ,verstanden haben'? Soll es heien ,dem Beweis folgen k onnen', ,den Beweis unter Benutzung eines Lehrbuches wiedergeben k onnen', ,den Zusammenhang mit anderen S atzen am rechtwinkligen Dreieck aufzeigen k onnen', . . . ? Ebensowenig ist klar, was ,anwenden k onnen' heien soll" (Wittmann 1981, S. 120). Zur Operationalisierung der Lernziele eignet sich Blooms uberarbeitete Taxonomie nach Anderson und Krathwohl (2001). Sie unterscheidet sechs gestufte kognitive Prozesse (Abschnitt 2.1.5) und vier Wissensdimensionen: Faktenwissen (Factual Knowledge), Begriiches Wissen (Conceptual Knowledge), Verfahrensorientiertes Wissen (Procedural Knowledge) und Metakognitives Wissen (Meta-cognitive Knowledge). Eine deutsche Ubersetzung der in der uberarbeiteten Taxonomie verwendeten Begrie inklusive operationalisierter Verben liefern Schobel und Holdt (2004). Bez uglich Lernzielformulierung wird der Verstehensbegri in der Literatur durchaus kritisch gesehen, da er implizit ist, und trotz Klassikation durch vorgegebenen Verben und Nomen, die eine festgelegte Bedeutung im Lehr-Lernkontext besitzen, ist das Erstellen von Lernzielen schwierig: "There are two reasons for this diculty. The rst is that statements of objectives may contain more than verbs and nouns [. . . ]. So, modifying phrases or clauses should be ignored in classifying the objectives; they may cause confusion when one is attempting to identify relevant parts for categorizing. The second reason for the diculty in classifying objectives is that the verb may be ambiguous in terms of the intended cognitive process or the noun may be ambiguous in its intended knowledge" (Anderson und Krathwohl 2001, S. 33). Deshalb ist anzumerken, dass die Zuordnung eines kognitiven Prozesses durchaus vom Vorwissen der Sch uler abh angt und neben den kognitiven Prozessen implizit Stufungen in den Wissensdimensionen vorgenommen werden: When the task is an unfamiliar problem, however, students must determine what knowledge they will use. [. . . ] then, to understand conceptual knowledge is a prerequisite to being able to apply procedural knowledge " (Anderson und Krathwohl 2001, S. 77; Hervorh. im Original). Auch dadurch, dass Lernziele nach Blooms uberarbeiteter Taxonomie formuliert werden, wird sichergestellt, dass das Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung nicht einseitig anhand von Fachthemen konzipiert wird, sondern das Handeln der Sch uler in den Mittelpunkt r uckt (Schobel und Holdt 2004, S. 49). Fazit ist, dass neben dem Widerspruch zwischen dem Verstehensund dem Kompetenzbegri die dreifache Verwendung des Verstehensbegris, als Bildungsziel, Kompetenzfacette und Lernziel, ausschlaggebend daf ur ist"Informatiksystemverst andnis" als Begri nicht zu verwenden. 2.4 Zusammenfassung und Fazit f ur Kompetenzentwicklung mit Informatiksystemen Fur Kompetenzen mit Informatiksystemen sind im schulischen Kontext mehrere Aspekte zu berucksichtigen. Erstens ist zu bestimmen, welche Teilkompetenzen bzw. Kompetenzfacetten f ur eine angestrebte Kompetenz zu ber ucksichtigen sind. Zweitens ist f ur Kompetenzentwicklung die Abbildung von Entwicklungsbzw. Niveaustufen anzustreben. Der Kompetenzbegri impliziert, technische Grundlagen handlungsorientiert anhand der Anwendung in Anforderungssituationen zu erlernen. Es besteht somit der Zielkonikt, einerseits allt agliche Anforderungssituationen und andererseits technische Grundlagen von Informatiksystemen wissenschaftsprop adeutisch im Informatikunterricht der Sekundarstufe II zu thematisieren. Abbildung 2.3 zeigt Variationen des Kompetenzbegris zu Informatiksystemen. Darin werden unterschiedliche Konzepte von Kompetenz einschlielich Schl usselkompetenz auf Informatiksysteme bezogen. Insbesondere werden in der vorliegenden Arbeit Aspekte von Kompetenz und Grundbildung der OECD, der EU und der UNESCO aufgegrien. Vor der Analyse des Erfahrungswissens der Fachdidaktiken und in der Schulinformatik zur Identikation normativer Vorgaben (Kapitel 4), werden im Folgenden die fachlichen Aspekte als Grundlage der Analyse er ortert (Kapitel 3).2.4. Zusammenfassung und Fazit f ur Kompetenzentwicklung mit Informatiksystemen 23 Kompetenz als Persönlichkeitsdisposition zum situativ  angemessenen Verhalten: Kognitive Elemente: Kenntnisse, Fertigkeiten, Strategien  Kompetenzfacetten: Fähigkeit, Wissen, Verstehen, Können,  Handeln, Erfahrung, MotivationNicht-kognitive Elemente: motivationale, volitionale  und  sozial-kommunikative Komponenten 1. Interaktive Anwendung von Medien und Mitteln (Tools) 1a. interaktive Anwendung von Sprache, Symbolen und Texten  1b. interaktive Nutzung von Wissen und Informationen  1c. interaktive Anwendung von TechnologienÜbertragbarkeit auf zuk ünftige Anwendungen (nicht spezifischer Transfer)Begründete Urteile zu Informatiksystemen abgebenDie Rolle von Informatiksystemen in der Welt erkennen Kompetenzentwicklung  mit InformatiksystemenSchlüsselkompetenzen (DeSeCo):  2. Interagieren in heterogenen Gruppen2a. Gute und tragfähige Beziehungen unterhalten  2b. Fähigkeit zur Zusammenarbeit  2c. Bewältigen und Lösen von Konflikten 3. Eigenständiges Handeln 3a. Handeln im größeren Kontext  3b. Realisieren von Lebensplänen und persönlichen Projekten  3c. Verteidigung und Wahrnehmung von Rechten, Interessen,  Grenzen und ErfordernissenAnwendung in unterschiedlichen Kontexten und auf  unterschiedliche, Reflexion und Einsicht erfordernde Weise: Konstruktives, engagiertes und kritisch-reflektierendes  Handeln Zusammenhänge und Strukturen von Informatiksystemen in realitätsnahen Situationen erkennen ICT Literacy: Computer Literacy a. Hardware Literacy  b. Software Literacy  c. Applications  Literacy Media Literacy: kritische Auseinandersetzung mit Medien Europäischer Qualifikationsrahmen: I.   Kenntnisse  II.  Fertigkeiten (kognitiv und praktisch)  III. Kompetenzen NiveaustufungenBefähigung zur handelnden Bewältigung komplexer  Anforderungssituationen Information Literacy: Informationssuche, E-Learning Abbildung 2.3: Ubersicht uber Variationen des Kompetenzbegris zu Informatiksystemen24 2. Einordnung in die Kompetenzdiskussion3. Der Informatiksystembegri 3.1 Uberblick Seit Anfang der neunziger Jahre wird die Vernetzung von Informatiksystemen f ur den Informatikunterricht betont und Wirkprinzipien von Informatiksystemen werden als eine Leitlinie des Unterrichts gefordert. In diesem Kapitel wird der fachwissenschaftliche Begri des Informatiksystems beschrieben (Abschnitt 3.2). Daf ur ist es notwendig, den aktuellen Informatiksystembegri in den unterschiedlichen Bereichen der Kerninformatik zu untersuchen. Zusammen mit dem Kompetenzbegri k onnen Analysekriterien formuliert werden (Abschnitt 3.3). Abbildung 3.1: Struktur der Kapitel 1 bis 3 Anhand dieser Kriterien werden der nationale und internationale Stand der Forschung zur Kompetenzentwicklung mit Informatiksystemen in der Schulinformatik analysiert (Kapitel 4). Ziel des Kapitels ist es damit, durch eine Konkretisierung des Informatiksystembegris und eine Strukturierung von Kompetenzen aus der Fachwissenschaft heraus die Analyse des fachdidaktischen Forschungsstandes vorzubereiten. Daraus werden erste Schlussfolgerungen und wissenschaftliche Fragestellungen zur Erstellung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung abgeleitet. Abbildung 3.1 zeigt die Struktur der Kapitel 1 bis 3.26 3. Der Informatiksystembegri 3.2 Der Systembegri und fachdidaktische Schlussfolgerungen 3.2.1 Begrisdenition Ziel dieses Abschnitts ist es, eine f ur die Informatik tragf ahige Denition eines Informatiksystems aus der Kerninformatik herauszuarbeiten. Daf ur wird kurz auf den Systembegri der Wissenschaftstheorie Bezug genommen. Der Systembegri leitet sich aus dem griechischen s yst ema, das Zusammengestellte, ab. In der Wissenschaftstheorie unterscheidet man zwischen gegenst andlichen Systemen, welche in der Wirklichkeit vorkommende, zusammengestellte Gegenst ande bezeichnen, und gedanklichen Systemen. Letztere sind Zusammenordnungen von Aussagen, Erkenntnis oder Wissen uber die Wirklichkeit. Gegenst andliche Systeme wiederum werden weiter unterteilt in nat urliche und vom Menschen geschaene, also zweckbehaftete Systeme (vgl. Seiffert 1989, S. 330). Gegenst andliche und besonders technische Systeme werden oft als Vielfalt von Komponenten beschrieben, die untereinander in Wechselwirkung treten (Strukturdenken). Wissenschaftstheoretisch moderner ist die Betonung des Beziehungsgef uges unter Prozessen. Es besteht also ein Wandel vom Strukturdenken zum Prozessdenken (Seiert 1989, S. 331). Die heutige Systemtheorie hat sich vor allem aus der allgemeinen Systemtheorie und der Kybernetik entwickelt. Die allgemeine Systemtheorie (engl.: General System Theory) besch aftigte sich mit den Gemeinsamkeiten physikalischer, biologischer und gesellschaftlicher Systeme und wurde von Ludwig von Bertalany in den 1930er Jahren begr undet und vor allem von Wirtschaftswissenschaftlern und Soziologen betrieben. Die Kybernetik entwickelte sich parallel dazu mit Bezug zu technischen, biologischen und gesellschaftlichen Systemen. Kennzeichnend f ur sie ist die Darstellung von Regelkreisen mit positiven und negativen R uckkopplungen. Sie wurde und wird vornehmlich zur Beschreibung technischer Systeme genutzt (vgl. Seiert 1989, S. 332). Die heutige, so genannte"vervollst andigte Systemtheorie" (engl.: System Dynamics) greift die vorgestellten Str omungen auf und r uckt dynamische, evolvierende Systeme in ihr Zentrum, w ahrend technische, d. h. strukturbewahrende Systeme weniger Aufmerksamkeit erfahren. Wie ist nun der Systembegri der Informatik? Broy und Steinbr uggen (2004) stellen die Informatik als Wissenschaft und Technik der Modellierung dar. Zentral sind f ur sie die informationsverarbeitende Maschine und informationsverarbeitende Vorg ange in verteilten reaktiven Systemen: "Information { oder genauer ihre Darstellung { wird in der Informatik durch digitale Maschinen verarbeitet, gespeichert, ubertragen und dargestellt. [. . . ] Maschinenbeschreibungen k onnen selbst wiederum als Informationen aufgefasst werden. Daraus ergibt sich ein wesentliches Prinzip der Informatik: Neben die elementaren Informationen treten Informationen, die das Verhalten komplexer Maschinen darstellen. [. . . ] Verteilte reaktive Systeme sind in unserem digitalisierten Alltag allgegenwartig. Wir sprechen von informatischen Systemen " (Broy und Steinbr uggen 2004, S. vi; Hervorh. im Original). Reaktive Systeme sind die im Prinzip endlos laufenden Systeme zur Prozess uberwachung sowie eingebettete und adaptive Systeme, die nicht nur ein abschlieendes Ergebnis berechnen, sondern standig auf Ereignisse und Daten von auen reagieren (Goos und Zimmermann 2006). Somit ist in der Informatik nicht nur der Informationsbegri, sondern auch der Systembegri zentral. Was aber bezeichnet nun ein informatisches System? Wedekind et al. (1998) nennen drei Bedingungen fur informatische Systeme: "Als System im ,weiteren Sinne' [. . . ] gilt dabei (a) eine Menge von Elementen (Systembestandteilen), die (b) durch bestimmte Ordnungsbeziehungen miteinander verbunden und (c) durch klar denierte Grenzen von ihrer Umwelt geschieden sind"(Wedekind et al. 1998, S. 268). Goos und Zimmermann (2006) stellen fest, dass dieser Systembegri rekursiv (vgl. Br ugge 2000, S. 9) und damit skalierbar (vgl. Br ugge 2000, S. 11) ist, denn Komponenten sind wieder (Teil-) Systeme. Das Wissen von Systemeigenschaften im Kleinen kann auf gr oere ubertragen werden. Wenngleich auch hier eine positive und negative R uckkopplung (vgl. Kybernetik) anzunehmen ist (Brauer 2001), wodurch die Skalierbarkeit gef ahrdet ist. Pr azisiert wird der Systembegri im Duden Informatik. In diese Denition ist auch der Zweck des Systems eingeschlossen:3.2. Der Systembegri und fachdidaktische Schlussfolgerungen 27 "System: In der Informatik versteht man hierunter die Zusammenfassung mehrerer Komponenten zu einer als Ganzes aufzufassenden Einheit. Die Komponenten k onnen von gleicher Art (homogenes System, z. B. Programmsysteme) oder sehr unterschiedlich sein (heterogene Systeme, z. B. die Zusammenfassung von Hardund Softwaresystemen zu einem Computersystem [Informatiksystem; Anm. d. V.], oder hybride Systeme, wenn gewissen Komponenten sehr unterschiedliche technologische Konzeptionen zugrunde liegen wie in der Zusammenfassung von analogen und digitalen Systemen). Ein System l ost oder bearbeitet in der Regel ein wohldeniertes B undel von Aufgaben. Systeme konnen auerordentlich komplex oder vernetzt sein (wie z. B. okologische Systeme, Telefonsysteme, Verkehrssysteme oder das Internet)" (Claus und Schwill 2006, S. 677; Hervorh. im Original). Der Begri bedarf jedoch der Konkretisierung: "Der Systembegri ist sehr allgemein und daher wenig aussagekr aftig. Als konkrete Ausgestaltung sind in diesem Duden u. a. Betriebssysteme, CAD-Systeme, Datenbanksysteme, Informationssysteme, Textverarbeitungssysteme oder allgemein Informatiksysteme beschrieben" (Claus und Schwill 2006, S. 678). Was also zeichnet ein allgemeines Informatiksystem aus? Der Begri ist nach Claus und Schwill (2006) folgendermaen deniert: "Als Informatiksystem bezeichnet man die spezische Zusammenstellung von Hardware, Software und Netzverbindungen zur L osung eines Anwendungsproblems. Eingeschlossen sind alle durch die Einbettung des Systems in den Anwendungsbereich beabsichtigten oder verursachten nichttechnischen Fragestellungen und ihre L osungen, also Fragen der Gestaltung des Systems, der Qualizierung der Nutzer, der Sicherheit sowie der Auswirkungen und Folgen des Einsatzes. Informatik ist dann die Wissenschaft von Entwurf und Gestaltung von Informatiksystemen" (Claus und Schwill 2006, S. 314; Hervorh. im Original). Konsistent dazu ist die Denition aus dem Positionspapier der Gesellschaft f ur Informatik e. V. (GI)"Was ist Informatik?", in der neben dem System aus Hardund Software die Erf ullung von Informationsverarbeitungsund ubertragungsaufgaben betont werden (vgl. Biundo et al. 2006, S. 10). Damit ist der Begri Informatiksystem eine Konkretisierung sowohl eines Rechnersystems bzw. Computersystems (Claus und Schwill 2006, S. 314) als auch eines Rechnernetzes, die meist ohne Bezug zu einem Anwendungsproblem beschrieben werden und technische Fragestellungenuberbetonen. Nach Appelrath und Ludewig (2000) besteht ein Rechnersystem aus Software und Hardware einschlielich peripherer Ger ate zur Datenerfassung, -speicherung, -ausgabe und -ubertragung. Dabei betonen sie, dass zwischen interner Daten ubertragung im Rechnersystem und externer, das Rechnersystem in ein Rechnernetz verlassender Daten ubertragung unterschieden wird (Appelrath und Ludewig 2000, S. 38). Die fehlende Angabe eines Zwecks ist vermutlich auf die implizit vorausgesetzte Universalit at bzw. freie Programmierbarkeit der Von-NeumannRechner zur uckzuf uhren. Ein Informatiksystem kann auch als Teil eines sozio-technischen Systems aufgefasst werden, in dem ein soziales System und ein technisches System, z. B. ein Informatiksystem, ein Ganzes bilden (Ropohl 1991). Die Softwaretechnik betont besonders den sozio-technischen Kontext von Informatiksystemen. Balzert expliziert ausgehend vom Computersystem einen sehr dierenzierten Systembegri: "Anwendungssoftware, Systemsoftware und Hardware bilden zusammen ein Computersystem bzw. DV-System" (Balzert 2000, S. 24; Hervorh. im Original). Diesen Terminus grenzt Balzert ab von technischen Systemen, die eine Zusammensetzung aus einem Computersystem und sonstigen technischen Komponenten sind. Des Weiteren werden organisatorische Systeme (soziale Systeme), Informationssysteme (soziale Systeme und technische Systeme), Anwendungssysteme (Informationssysteme inklusive Computersysteme) unterschieden (vgl. Balzert 2000, S. 25). Der international beachtete Glossar des Institute of Electrical and Electronics Engineers (IEEE) deniert den Begri"Computer System" wie folgt:28 3. Der Informatiksystembegri "computer system. A system containing one or more computers and associated software." (IEEE Standards Department 1990, S. 15; Hervorh. im Original) Als Zweck eines Systems wird die Erf ullung einer Menge an Funktionen genannt (IEEE Standards Department 1990). Hinzu kommt die Sichtweise auf die Komponenten eines Informatiksystems als selbst andige und einigermaen intelligenter Akteure, die miteinander und der Umgebung interagieren (vgl. Brauer und Brauer 1995). Dabei sind unter Akteuren bzw. Agenten Softwaremodule oder Maschinen wie z. B. Haushaltsger ate oder roboterartige Ger ate zu verstehen (Brauer und M unch 1996). Um die teilweise widerspr uchliche Nutzung des Systembegris aufzul osen, wurde in der vorliegenden Arbeit die Entscheidung getroen, das Informatiksystem von dem kontinuierlich ablaufenden physikalischen, sozio-technischen oder chemischen System, in das es einwirkt, abzugrenzen. Dennoch f allt die Trennung dieser gekoppelten Systeme schwer, und die Theorie zu solchen hybriden Systemen ist noch in den Anf angen (Brauer 2001, S. 27). Es ist zu fragen, wie ein Informatiksystem nun betrachtet werden kann: "Wir unterscheiden zwei F alle: 1. Fur das Verst andnis des Gesamtsystems sind nur die Zust ande der Teilsysteme als Ganzes interessant; die Teilsysteme werden als Objekte aufgefasst; 2. Fur das Verst andnis des Gesamtsystems mu man die Beziehungen und m oglichen zeitlichen Anderungen innerhalb der Teilsysteme im einzelnen studieren" (Goos und Zimmermann 2006, S. 19; Hervorh. im Original). Ersteres entspricht einer Black-Box-Sicht, letzteres einer Glass-Box-Sicht. Claus und Schwill (2006) dierenzieren weiter: "Systeme lassen sich meist durch mindestens einen der folgenden Punkte charakterisieren: durch ein nach auen sichtbares Verhalten (a). Dieses kann man versuchen, durch Tests und Experimente zu ermitteln. durch eine innere Struktur (b). Diese ist in der Regel nur den Entwicklern, nicht aber den Benutzern von Systemen bekannt. Sie l asst sich im Allgemeinen nicht durch Experimente, sondern nur durch eine genaue Analyse der Komponenten ermitteln. durch Eigenschaften (c). Diese erfasst man mit Hilfe einer Spezikation, die zur Entwicklung einer konkreten Realisierung dienen kann" (Claus und Schwill 2006, S. 677). Dabei zeigt sich, dass zur Beschreibung der zuletzt genannten Eigenschaften, die in einer Spezikation festgehalten werden, nicht auf Implementierungsdetails eingegangen wird: "Spezikation: prazise Darstellung und Beschreibung der Eigenschaften, der Verhaltensweisen, des Zusammenwirkens und des Aufbaus von (bestehenden oder zu entwickelnden) Modellen, Programmen oder Systemen, wobei meist von Details abstrahiert wird und konkrete Implementierungsfragen keine Rolle spielen" (Claus und Schwill 2006, S. 643; Hervorh. im Original). Dies ist ein Indiz daf ur, dass Implementierungsdetails nicht relevant sind f ur Kompetenzentwicklung mit Informatiksystemen. Oft werden funktionale Spezikationen genutzt, in denen Denitionsund Wertebereich sowie der funktionale Zusammenhang zwischen Einund Ausgabe beschrieben werden. Mit Blick auf die Zielebene der F orderung der Kompetenzentwicklung mit Informatiksystemen an allgemein bildenden Schulen wird davon ausgegangen, dass Details nicht relevant f ur den Lehr-Lernprozess sind. Deshalb wird im Folgenden der Informatiksystembegri ausschlielich auf Fragestellungen zu Funktionen und Verhalten von Informatiksystemen sowie zu deren innerer Struktur betrachtet. Durch die Begriskl arung ist somit klar, dass Kompetenzentwicklung mit Informatiksystemen aus fachdidaktischer Perspektive nicht gleichzusetzen ist mit dem in der Fachwissenschaft Informatik verwendeten"Verstehen von (Software-) Systemen" (system comprehension) bzw."Programmverstehen" (program comprehension). Diese Begrie werden meist im Zusammenhang mit Reverse Engineering bzw. als notwendige Voraussetzung f ur die reibungslose Wartung von Softwareprodukten genutzt. Einen Uberblick uber Arbeiten in dem Bereich geben Hadar und Hazzan, die den Beitrag ausgew ahlter Diagrammarten der Unied Modeling Language (UML; (Rumbaugh et al. 2005)) auf das Softwaresystemverst andnis erforschen.3.2. Der Systembegri und fachdidaktische Schlussfolgerungen 29 3.2.2 Perspektiven auf Informatiksysteme Funktionen von Informatiksystemen In den"Great Principles of Computer Science" beschreibt Denning (2003) f unf Blickwinkel (windows of computing mechanics) auf die Informatik. Seine Arbeit beruht auf den Erkenntnissen einer Expertengruppe der ACM (Association for Computing Machinery) zur Erstellung der ACM-Curricula f ur die Hochschulinformatik. Diese erweitert er auf sieben Kategorien der Informatik: computation, communication, coordination, automation, recollection, evaluation, design (Denning 2007). Denning setzt die Kategorien mit den Hauptfunktionen von Informatiksystemen in Verbindung: "These categories cover the main functions of computing systems" (Denning 2007, S. 15). Damit liefert Denning eine implizite Antwort auf die Frage, welche Sichten Lernende auf den Lerngegenstand"Informatiksysteme" einnehmen k onnen und m ussen, um ein konsistentes Gesamtbild von Informatiksystemen zu bekommen. Im Folgenden werden die sieben Kategorien kurz genannt und im Sinne unterschiedlicher Perspektiven auf Informatiksysteme erl autert (Tabelle 3.1). Tabelle 3.1: Kategorien der Informatik nach (Denning 2003, S. 17) und (Denning 2007, S. 15) Kategorie Exemplarische Inhalte Computation Bedeutung von Berechnungen und Fragen der Berechenbarkeit: Automaten, formale Sprachen, Turingmaschinen, Universalit at, komplexit atstheoretische Fragestellungen, Ubersetzung, die technisch-physikalische Realisierung von Informatiksystemen Communication Zuverl assige Daten ubertragung: Informatiksystem als Medium, speziell als Nachrichtensystem im Shannon'schen Sinne eines Kanalmodells mit Kodierung, Kanalkapazit at, Rauschunterdr uckung, Datenkompression, Kryptographie, rekongurierbarer Paketvermittlung und Ende-zu-Ende Fehlerbehandlung Coordination Kooperation zwischen vernetzten Entit aten: zwischen Menschen deren Arbeitsabl aufe durch Informatiksysteme unterst utzt werden (Workows), Eingabeund Ausgabeverhalten der Informatiksysteme sowie Antwortzeit. Synchronisation zwischen Informatiksystemen mit Race-conditions und Deadlocks, Serialisierbarkeit und atomaren Aktionen Automation Fragen zu Grenzen der Simulation kognitiver Prozesse: philosophische Betrachtungen zur Automatisierung, zu Expertise und Expertensystemen, Verbesserung von (k unstlicher) Intelligenz, Turingtest, Bedeutung des Maschinenlernens und -erkennens mittels evolution arer Algorithmen, Bionik Recollection Speicherhierarchien, Lokalit at von Referenzen, Caching, Adressbereich und Abbildung, Namenskonventionen, Suche sowie Retrievaltechniken durch Name oder Inhalt Evaluation Leistungsvoraussagen und Kapazit atsplanung: S attigung und Flaschenh alse in Netzen Design Entwicklung qualitativ hochwertiger Informatiksysteme: Ebenenmodell des Rechners, Schichtenarchitektur des Internets, Modularisierung, Geheimnisprinzip und Abstraktion Aspekte von"computation","communication","coordination","automation" und"recollection" spielen in allen Informatiksystemen eine Rolle. Die Blickwinkel auf die Informatik nach Denning konnen mit dem fachdidaktischen Sichtenkonzept kombiniert werden. Brinda fordert f ur Lernsoftware, den zu explorierenden Lerngegenstand in unterschiedlichen, interaktiv erfahrbaren und synchronisierten Sichten darzustellen (Brinda 2004a, S. 52). So ist eine zuverl assige Daten ubertragung, wie sie unter dem Blickwinkel der Kommunikation (communication) analysiert wird, beispielsweise bez uglich ihres Entwurfs (design) und hinsichtlich der Nebenl augkeit von Prozessen im Rahmen der Koordinierung (coordination) zu betrachten. Die Sichten uberschneiden sich jedoch stark. Dies wird dadurch verst arkt, dass in jeder Sicht mehrere Modelle und Darstellungsformen zur Hervorhebung eines Gesichtspunktes zum Einsatz kommen, die wiederum auch in anderen Sichten genutzt werden. Deshalb wird eine Vielzahl an Facetten auf Informatiksysteme ermoglicht, die schwierig zu synchronisieren sind und einer weiteren Strukturierung bed urfen. Ausgehend von diesen Perspektiven auf Informatiksysteme, die im Einzelfall nicht trennscharf sind, lautet die Frage insbesondere, welche und ggf. wie viele Sichten auf Informatiksysteme30 3. Der Informatiksystembegri im Informatikunterricht angeboten werden sollten, und wie diese lernf orderlich zu verkn upfen sind. Zur Strukturierung bietet es sich an, dass Informatiksysteme anhand der drei Charakteristika"nach auen sichtbares Verhalten","innere Struktur" und"Entwicklung einer konkreten Realisierung" untersucht werden k onnen (vgl. Claus und Schwill 2006, S. 677). Denn die Fragestellungen bez uglich der einzelnen Kategorien k onnen nach diesem Schema geordnet werden. Das Prinzip des Sichtenwechsels (vgl. Brinda 2004a, S. 125), in dem Sch uler die Konsequenzen ihres Handelns anhand des Wechselns zwischen den Perspektiven und der Analyse der jeweiligen Anderungen verstehen, wird durch die Perspektiven"Blick auf das System" und"Blick in das System" unterst utzt. Brauer und Brauer (1992) nennen vier Arten von Unterst utzungssystemen, die als neue Anforderungen von der Informatik erwartet werden. Sie haben nicht an Aktualit at verloren. Als erstes sind es Systeme f ur die"funf C", die den Kategorien von Denning sehr ahnlich sind: communication, cooperation, collaboration, coordination, concurrency. Zweitens werden Unterst utzungssysteme des individuellen und kollektiven Ged achtnisses erwartet wie Nicht-Standard-Datenbanken und intelligente, kooperative Informationssysteme zur Bereitstellung gemeinschaftlich verwendeter Arbeitsumgebungen. Drittens sind es Informatiksysteme zur Unterst utzung des Verstehens und Steuerns komplexer Systeme beispielsweise durch Simulation, Visualisierung und Prozessregulierung. Zuletzt nennen Brauer und Brauer adaptive und lernf ahige Schnittstellensysteme fur die Interaktion zwischen Mensch und Maschine sowie zwischen Umwelt und Maschine, die Anderungen ihrer Arbeitsbedingungen bewerten k onnen (vgl. Brauer und Brauer 1992, S. 12). Diese vier unterschiedlichen Systemklassen strukturieren die konkreten Informatiksysteme, die im Informatikunterricht f ur Kompetenzentwicklung mit Informatiksystemen behandelt werden konnen. Systemverhalten als Folge von Zust anden Wie wird nun das Verhalten von Informatiksystemen erkl arbar? Broy und Rumpe (2007) nutzen Zustandsmaschinen und Schnittstellenbeschreibungen zur Veranschaulichung des Verhaltens von Informatiksystemen und grenzen sie von der Architektur ab: "Im Gegensatz zu Zustandsmaschinen und unserem Schnittstellenmodell, das abstraktes Verhalten im Sinne einer ,Black Box'-Sicht beschreibt, zielen Architekturen darauf ab, die Struktur also den inneren Aufbau eines Systems darzustellen" (Broy und Rumpe 2007, S. 11). Die Schnittstelle dient zur Beschreibung der Systemgrenze (vgl. (Goos und Zimmermann 2006), (Brugge 2000)). Dar uber hinaus kann ein System statisch oder dynamisch sein. Anderungen beziehen sich auf seinen Zustand und resultieren in ver andertem Systemverhalten: "[. . . ] das System als solches bleibt gleich, es beh alt seine Identit at und seinen Namen. Der Zustand besteht aus den jeweils vorhandenen Komponenten, ihren Eigenschaften und ihren Beziehungen. Die Folge der Zust ande bezeichnet man als das Verhalten des Systems " (Goos und Zimmermann 2006, S. 18; Hervorh. im Original) Systeme mit abz ahlbar vielen Zust anden werden auch als diskrete Systeme bezeichnet (vgl. Claus und Schwill 2006, S. 678). Dabei ist zu bemerken, dass sich die Informatik nicht nur mit diskreten Systemen besch aftigt. Selbst ohne Ber ucksichtigung des sozio-technischen Kontextes eines Informatiksystems stellt die (oft bewusste) Einschr ankung auf diskrete Systeme eine Idealisierung der technischen Realisierung dar: Informatiksysteme basieren durch fortschreitende Miniaturisierung und Erh ohung der Arbeitsgeschwindigkeit auf einer physikalischen Emulation eines Bit-Objekts, die sich durch kontinuierliche, zeitbehaftete Zustands uberg ange sowie spontane St orvorg ange (z. B. durch Soft Errors, bei denen Strahlung die Speicherzellenbelegung ver andert, oder St orein usse bei der drahtlosen Kommunikation) auszeichnet (vgl. Hertwig und Br uck 2000). Goos und Zimmermann (2006) unterscheiden dar uber hinaus deterministische und indeterministische Systeme. Bei ersteren ist das zuk unftige Verhalten aus dem Systemverhalten in der Vergangenheit ableitbar. F ur die F orderung der Kompetenzentwicklung mit Informatiksystemen ist die Betrachtung der Systemzust ande eine M oglichkeit, das Systemverhalten zu erkl aren. Zus atzlich kann der Einuss von St orungen an der Hardware auf das Systemverhalten thematisiert werden.3.2. Der Systembegri und fachdidaktische Schlussfolgerungen 31 3.2.3 Innere Struktur von Informatiksystemen Auswahl informatischer Grundlagen Welche informatischen Grundlagen zur Erkl arung der inneren Struktur von Informatiksystemen sind notwendig f ur den Einsatz von Informatiksystemen zur L osung eines Anwendungsproblems? Nievergelt (1995) beschreibt dazu ein Schichtenmodell der Informatik, den Informatikturm (Tabelle 3.2). Als oberste und gr ote Ebene nennt er die Anwendungsmethodik, die beschreibt, wie Informatiksysteme zur L osung eines Anwendungsproblems eingesetzt werden. Darunter ist die Ebene der Systemrealisierung mit Entwurf und Implementierung in Hardund Software. Eine weitere Ebene tiefer liegt die Algorithmik. Auf der untersten Ebene liegen fundamentale theoretische Erkenntnisse der Informatik. Nievergelt betont, dass er eine ausgewogene Mischung von Theorie und Anwendung bef urwortet und h alt das Fundament aus den drei Schichten f ur notwendig, damit die Schicht der Anwendung von Informatiksystemen verstanden wird. Gleichzeitig beantwortet er die Frage nach einer verpichtenden Menge Theorie, um Informatiksysteme anwenden zu k onnen, nicht pauschal. Er fordert, Einzelurteile zu unterschiedlichen theoretischen Grundlagen zu f allen (Nievergelt 1995, S. 344). Tabelle 3.2: Informatikturm nach (Nievergelt 1995, S. 342; Hervorh. im Original) "Anwendungsmethodik: z. B. Konguration eines MIS, GIS, . . . , CA-x f ur konkrete Falle.,Eine L osung verkaufen' . Stark zeitabh angig: ,heute, mit Windows 95!' System-Realisierung: Entwurf und Implementation, in Hardware und Software, von allgemein verwendbaren Systemen. z. B. Betriebs-, Reservations-, TextSystem. ,Programmieren im Grossen' Algorithmik: Entwurf, Analyse, Optimierung, Testen von Standardabl aufen, z. B. Bibliotheksprogramme. ,Programmieren im Kleinen' Theorie: abstrakt, mathematisch, allgemein, objektiv, z. B. ,geht oder geht nicht'. Ergebnisse ,zeitlos'. Analogie: Grundgesetze der Naturwissenschaften" Thomas (2003) identiziert im Sprachgebrauch der Kerninformatik f unf Hauptmodelltypen: Architekturmodelle, Vorgehensmodelle, Entwurfsmodelle, Untersuchungsmodelle und mentale Modelle (siehe Tabelle 4.2 in Abschnitt 4.2.4). Diese Systematik f uhrt bez uglich der inneren Struktur von Informatiksystemen zur Betrachtung von Architekturmodellen. Unter Architekturmodellen fasst Thomas Rechnerarchitekturen (z. B. Von-Neumann-Rechner), theoretische Maschinenmodelle (z. B. Turingmaschine, Automaten), Rechenmodelle (z. B. imperativ, logisch-deklarativ, funktional) und Referenzmodelle (z. B. Client-Server, OSI-Schichtenmodell (Open Systems Interconnection Basic Reference Model)) zusammen. Den Informatiksystemen zugrunde liegende Architekturmodelle wie Von-Neumann-Architektur und das Maschinenmodell der Turingmaschine verdeutlichen die grunds atzliche Arbeitsweise von Rechnern. Gleiches gilt beispielsweise f ur das imperative Rechenmodell, dem das mathematische Modell der Registermaschine (Random Access Machine (RAM)) zugrunde liegt (Schubert und Schwill 2004, S. 168). Wesentlich sind das Variablenkonzept und Befehlsfolgen, die Prozeduren bilden und den Zustand des Rechners ver andern (Claus und Schwill 2006, S. 525). Synonym zur Architektur wird oft der Begri"Strukturmodell" verwendet. Unter Strukturmodellen verstehen Broy und Rumpe (2007) Architekturen, die Perspektiven auf die innere Strukturierung eines Systems beschreiben (vgl. Wedekind et al. 1998). Da in den vorherigen Abschnitten vornehmlich die Perspektive der Praktischen Infor-32 3. Der Informatiksystembegri matik beschrieben wurde, werden im Folgenden Sichtweisen der Technischen und Theoretischen Informatik erg anzt. Architekturen der Technischen Informatik In der Technischen Informatik nennen Tanenbaum und Goodman (2001) die L ucke zwischen maschinenverst andlichen Befehlen und den f ur Informatiksysteme typischen Anwendungsproblemen als Grund f ur die Bildung von Schichtenarchitekturen (Tanenbaum und Goodman 2001, S. 19). Die einfachen bzw. primitiven Instruktionen von Maschinensprachen sind f ur Menschen schwierig zu benutzen, weshalb von den Instruktionen auf unterschiedlichen Ebenen abstrahiert wird: "Dies hat im Laufe der Zeit zur Strukturierung von Computern als Reihe von Abstraktionen gefuhrt. Dabei baute jede Abstraktion auf der jeweils darunterliegenden auf. Auf diese Weise kann Komplexit at gemeistert werden [. . . ]" (Tanenbaum und Goodman 2001, S. 19). Solche Ebenen sind Teil der Architektur: "Die auf jeder Ebene verf ugbaren Datentypen, Operationen und Merkmale nennt man Architektur (Architecture). Die Architektur betrit Aspekte, die f ur den Benutzer der jeweiligen Ebene sichtbar sind. Merkmale, die der Programmierer sieht, z. B. die verf ugbare Speichermenge, sind Teil von ihr. Implementierungsaspekte, etwa welche Chiptechnik zur Speicherimplementierung verwendet wird, sind nicht Teil der Architektur" (Tanenbaum und Goodman 2001, S. 26; Hervorh. im Original). Diese moderne Denition der Architektur vereint zwei Sichtweisen: erstens die Architektur als konzeptuelle Beschreibung einschlielich des Systemverhaltens wie sie bereits 1964 deniert wurde (Amdahl et al. 1964). Zweitens werden die weiteren Vorg ange in der Rechnerorganisation einbezogen (Stone, Harold S. 1975). Eine Komponentenarchitektur kann aus mehreren Subsystemen bestehen (vgl. Broy und Rumpe 2007, S. 10). Damit geh oren auch Fragestellungen zu Daten, Kontrolluss, Speicher und Adressierung sowie Beziehung zwischen Befehlssatz und Speicherorganisation zum Gebiet der Rechnerarchitektur (vgl. IEEE Standards Department 1990, S. 4). Jede Abstraktionsebene wiederum wird als abstrakte Maschine mit entsprechender Maschinensprache betrachtet: "[. . . ] bei sequentiellen Rechnern und Programmen werden h aug verschiedene Schichten abstrakter Maschinen aufeinandergebaut, wobei die Maschinen einer Schicht die der jeweils darunterliegenden Schicht verbergen" (M uhlhauser 2002, S. 675). Somit kann man einen Rechner in einem Schichtenmodell beschreiben. Maschinenmodelle der Theoretischen Informatik Von-Neumann-Rechner zeichnen sich dadurch aus, dass sie universell einsetzbar sind (Claus und Schwill 2006, S. 145). Um nun grundlegende Aussagen uber solche Informatiksysteme zu machen, werden in der Theoretischen Informatik Maschinenmodelle genutzt, die die technischen Strukturelemente von Informatiksystemen abstrahieren: "Ein Modell [Maschinenmodell; Anm. d. V.] sollte einerseits so abstrakt sein, da man auf relativ einfache Weise m oglichst weitreichende Aussagen machen kann. Andererseits darf es sich nicht zu sehr von den in der Wirklichkeit vorhandenen Rechnerarchitekturen entfernen" (Reischuk 1999, S. XV). Maschinenmodelle stellen also eine Abstraktion der Komponenten und Prozesse in Informatiksystemen dar, um beispielsweise Fragen der Berechenbarkeit und Komplexit at anhand von Systemeigenschaften zu erkl aren. Damit sind Maschinenmodelle je nach Abstraktionsgrad wie Architekturund Entwurfsmuster Abstraktionen informatischer Probleml osungen. Turingmaschine und Registermaschine sind Abstraktionen der in sequentiellen Rechnern vorherrschenden Architekturkomponenten. Wichtigste Komponenten sind { wie auch beim Von-NeumannRechner { Prozessor, Speicher, Programm sowie Eingabe und Ausgabe (vgl. Reischuk 1999, S. 6).3.2. Der Systembegri und fachdidaktische Schlussfolgerungen 33 Registermaschine und Turingmaschine sind sehr exibel, im Gegensatz dazu k onnen Schaltkreise nur Bitstrings einer fest vorgegebenen L ange verarbeiten und dienen zur L osung eines konkreten Problems. Um Schaltkreise als universelles Maschinenmodell nutzen zu k onnen und beispielsweise mit Turingmaschinen zu vergleichen, betrachtet man daher Schaltkreisfamilien G=G1; G2; : : : vonn Input Schaltkreisen Gn(vgl. Reischuk 1999, S. 87). Schaltkreise arbeiten auf Bits und damit auf einem sehr elementaren Niveau. Somit sind Schaltkreise geeignet, die Arbeitsweise eines Rechners zu beschreiben und besonders das Konzept der Digitalisierung zu betonen wie auch folgende Arbeiten unter Mitwirkung des Autors zeigen (Hinkelmann et al. 2007), (Hinkelmann et al. 2008). Des Weiteren wird zwischen deterministischem und nichtdeterministischem Maschinenmodell unterschieden. Auch wenn heutige Rechner deterministisch arbeiten (Claus und Schwill 2006, S. 456), l asst sich f ur manche Zuordnungsund Optimierungsprobleme eine eziente L osung nur nichtdeterministisch beschreiben, so dass man die Arbeitsweisen deterministischer und entsprechender nichtdeterministischer Maschinenmodelle vergleicht. Zur Erkennung regul arer Sprachen werden endliche Automaten verwendet, die das Konzept der Zust ande mit Zustands uberg angen hervorheben, so dass das Verhalten bzw. die Ausgabe des Automaten direkt auf dessen Zustandswechsel zu beziehen ist. Insbesondere f ur das Konzept der Rekursion gibt es Maschinenmodelle zur Veranschaulichung der Arbeitsweise. Zu nennen ist die Formularmaschine, die auch eine reale Entsprechung (vgl. Bauer und Goos 2004) hat: "Diese [Formularmaschine; Anm. d. V.] ist eine sehr ,menschliche' Maschine; man kann sich gut vorstellen, wie der Gang der Berechnung f ur einen Einzelrechner (etwa nach dem Kellerprinzip) oder fur eine Rechnergruppe organisiert wird [. . . ]" (Bauer und Goos 2004, S. 165). Es ist damit festzuhalten, dass Maschinenmodelle insbesondere die Arbeitsweise von Informatiksystemen erkl aren und veranschaulichen. Auerdem wird durch diese Betrachtungsweise ersichtlich, dass zur inneren Struktur von Informatiksystemen nicht nur ihre Komponenten, sondern insbesondere auch Abl aufe bzw. Prozesse zwischen den Komponenten geh oren (vgl. Abschnitt 3.2.1). Qualit atsanforderungen an Informatiksysteme Neben den bisher angef ugten expliziten Beschreibungen von Informatiksystemen kann auch implizit nach den Anforderungen und Qualit atsmerkmalen von Informatiksystemen gefragt werden. Qualit at von Informatiksystemen und das Bemerken mangelhafter Qualit at sind notwendig, wenn es gilt, Vorund Nachteile des Einsatzes von Informatiksysteme abzusch atzen (Claus und Schwill 2006, S. 97f). F ur Kompetenzentwicklung mit Informatiksystemen kann eine Thematisierung solcher Qualit atsmerkmale hilfreich sein. Sehr technisch orientierte Normen sind jedoch auf ihren Bezug zur Lebenswelt der Sch uler zu pr ufen und m ussen f ur Sch uler nachvollziehbar gemacht werden. Normen und Spezikationen existieren in vielen Bereichen der Informationstechnik (Wende 2002). So gibt es Normen zu Programmiersprachen und Softwareentwicklung, z. B. legt die DIN ISO/IEC 12119 Qualit atsanforderungen an Softwareprodukte fest und stellt Pr ufregeln auf. DIN EN ISO 9000-3 gibt einen Leitfaden zur Entwicklung, Lieferung und Wartung von Software. Dazu geh oren Korrektheit, Ezienz, Robustheit, Wiederverwendbarkeit, Kompatibilitat, Modularisierung, Benutzungsfreundlichkeit und Wartbarkeit (vgl. (Appelrath et al. 2002, S. 106), (Hesse et al. 1994, S. 97), (B oszormenyi 2001, S. 15)). Zur Kommunikation und verteilten Verarbeitung gibt es als Grundlage von Internet-Spezikationen das OSI-Referenzmodell, das in EN ISO/IEC 7498-1 beschrieben und durch EN ISO/IEC 7498 Teil 2 bis 4 erweitert wird. Das ISO/OSI 7-Schichtenmodell wurde bereits 1979 standardisiert. Notwendige Sicherheitsdienste von Informatiksystemen zur Gew ahrleistung des Datenschutzes sind beispielsweise gem a EN ISO 7498-2 Authentikation und Identikation, Zugriskontrolle, Vertraulichkeit, Integrit at und Verbindlichkeit (ISO 1989). Hinzugef ugt wird oft die Anforderung nach Verf ugbarkeit. Normen zu Buroger aten und Ergonomie stellen DIN EN ISO 9241 dar, die ergonomische Anforderungen an Bildschirmarbeitspl atze formulieren. Teil 10 nennt beispielsweise Aufgabenangemessenheit34 3. Der Informatiksystembegri und Individualisierbarkeit im Zuge der Dialoggestaltung als ergonomische Anforderungen (ISO 1996). 3.3 Fazit und Kriterien f ur die Analyse des Forschungsstandes Ein Informatiksystem besteht aus Hardware, Software und Vernetzung zur L osung eines Anwendungsproblems im sozio-technischen Kontext. Komponenten sind wiederum selbst andige Akteure, die miteinander und mit ihrer Umgebung interagieren. Hauptfunktionen eines Informatiksystems beziehen sich auf"computation","communication","coordination","automation", "recollection","evaluation"und"design". Durch die Feststellung, dass diese Funktionen sich uberschneidende Sichten auf den Lerngegenstand anbieten, bedarf es einer weiter gehenden Strukturierung. Daf ur bietet es sich an, dass Informatiksysteme anhand ihres nach auen sichtbaren Verhaltens, ihrer inneren Struktur und durch Entwicklung einer konkreten Realisierung untersucht werden (vgl. Claus und Schwill 2006, S. 677). Ihr nach auen sichtbares Verhalten steht dabei in Abh angigkeit zu Systemzust anden. Ihre innere Struktur wird durch die Systemkomponenten inklusive interner Prozesse und Organisationsbeziehungen beschrieben. Diesbez uglich bilden Strukturmodelle eine besondere Grundlage, um Informatiksysteme zu beschreiben, z. B. Softwarearchitekturen, Rechnerarchitekturen und abstrakte Maschinen. Damit ergibt sich folgende Grobstrukturierung der Kompetenzen in drei Bereiche Si; i2fA; B; Cg mitA:="nach auen sichtbares Verhalten", B:="innere Struktur", C:="Implementierungsaspekte", in die Lernziele eingeordnet werden k onnen. Die Sch uler sind in der Lage, eine Anforderungssituation zu bew altigen hinsichtlich . . . SA: des nach auen sichtbaren Verhaltens von Informatiksystemen, SB: der inneren Struktur und interner Prozesse von Informatiksystemen, SC: ausgew ahlter Aspekte der Implementierung einer konkreten Realisierung (Stechert 2006c). In den Bereichen Sikonnen Lernziele durchnummeriert werden: Si;j; i2fA; B; Cg; j2N. Bei der Grobstrukturierung ist anzumerken, dass eine Formulierung, die sich nur auf das Bewaltigen einer komplexen Anforderungssituation mittels eines Informatiksystems bezieht, eine Einschr ankung darstellen w urde. Basiskompetenzen zu von Informatiksystemen sind nun von generellen Informatikkompetenzen abzugrenzen. Deshalb wird f ur Basiskompetenzen vorausgesetzt, dass Sch uler im Alltag auf Anforderungssituationen treen, die durch das Verhalten von Informatiksystemen ausgel ost sind. Die Erstellung einer konkreten Realisierung eines Informatiksystems kann davon klar unterschieden werden. In der vorliegenden Arbeit wurde aufgrund des Kompetenzbegris die Entscheidung getroen, die Systementwicklung ( SC) nicht als Schwerpunkt zu setzen. Dementsprechend steht die Algorithmik nicht im Fokus der nachfolgenden Analyse des fachdidaktischen Forschungsstandes. Winograd und Flores (1988) betonen, dass Programmiersprachen zu stark an der Hardwarestruktur der Rechner orientiert sind und nicht an deren Verhalten: "Programming languages are one approach to formalizing this domain, but in general they are not well suited to the communication of intent and conceptual structure. They are too oriented to the structure of the machine, rather than to the structure of its behaviour" (Winograd und Flores 1988, S. 176). Damit sind nur wenige ausgew ahlte Implementierungsaspekte anhand von Programmiersprachen f ur Kompetenzentwicklung mit Informatiksystemen zu betrachten. Vielmehr sind die konzeptuelle und logische Struktur eines Informatiksystems geeignet, um das nach auen sichtbare Verhalten von Systemen zu erkl aren. Abbildung 3.2 fasst die Grobstukturierung zusammen. Zur Herleitung von komplexen Anforderungssituationen f ur Sch uler bietet die fachliche Strukturierung der Hauptfunktionen von Informatiksystemen nach Denning (2007) Anhaltspunkte.3.3. Fazit und Kriterien f ur die Analyse des Forschungsstandes 35 Kompetenzentwicklung mit Informatiksystemen Implementierungsaspekte • Erstellung einer     konkreten    RealisierungInnere Struktur • White-Box-Sicht • Strukturmodelle   (z. B. Rechnerund    Softwarearchitekturen    sowie theoretische   Maschinenmodelle) • Diagramme zur    Darstellung von    StrukturmodellenNach außen sichtbares Verhalten • Black-Box-Sicht • Funktionen • Folge von Zuständen • typische Repräsentanten • Qualitätsanforderungen Abbildung 3.2: Schematische Darstellung der Strukturierung der Basiskompetenzen zu Informatiksystemen Tabelle 3.3: Strukturierung nach Hauptfunktionen und Charakteristika von Informatiksystemen Hauptfunktionen sichtbares Verhalten innere Struktur Implementierungsaspekte Computation Wie passt das Verhalten zu Zweck und Funktion?Welche technischen Strukturen und Prozesse (z. B. Hardund Softwarearchitektur) unterst utzen die Hauptfunktion?Welche Spezikationsund Implementierungsaspekte beeinussen die Hauptfunktion?Communication Coordination Automation recollection Evaluation Design Diese k onnen mit den Perspektiven auf das nach auen sichtbare Verhalten und auf die innere Struktur von Informatiksystemen in Verbindung gesetzt werden (Stechert 2008a). Tabelle 3.3 verbindet die Sichten miteinander. Ziel ist speziell, dass zentrale Zusammenh ange zwischen der inneren Struktur von Informatiksystemen und ihrem nach auen sichtbaren Verhalten von Sch ulern erkannt und daraus angemessene Handlungsentscheidungen abgeleitet werden. Die unterschiedlichen Perspektiven auf Informatiksysteme unterst utzen die kognitive Flexibilit at der Sch uler (Cognitive Flexibility; (vgl. Hubwieser 2007a, S. 11)): Informatiksysteme werden unter unterschiedlichen Blickwinkeln in verschiedenen Kontexten betrachtet. Folgende Kriterien und Fragen zur Analyse des fachdidaktischen Forschungsstands zur Kompetenzentwicklung mit Informatiksystemen lassen sich aus diesen Uberlegungen ableiten: Bildungsziele Welche Bildungsziele und Kompetenzaspekte mit Informatiksystemen werden fur Sch uler an allgemein bildenden Schulen skizziert? Welche Bildungsanforderungen zu Informatiksystemen in Form von Lernzielen werden beschrieben? Typische Repr asentanten von Informatiksystemen Fur welche konkreten Informatiksysteme wird der Einsatz im Informatikunterricht begr undet? Wie ist die Rolle dieser Informatiksysteme im Lehr-Lernprozess? Verhalten von Informatiksystemen Welche Hauptfunktionen von Informatiksystemen werden in der fachdidaktischen Diskussion thematisiert? Werden bestimmte Hauptfunktionen36 3. Der Informatiksystembegri starker betont als andere? Welches Verhalten von Informatiksystemen m ussen Sch uler verstehen k onnen? Welche Vorgehensweisen zur Analyse und Erkundung von Informatiksystemen werden beschrieben? Innere Struktur von Informatiksystemen Welche Strukturierungsmodelle und Architekturen werden f ur den Informatikunterricht empfohlen? Wie gelingt die Verkn upfung von Hardware, Software und Vernetzung im Lehr-Lernprozess? Da gerade f ur Sch uler der Sinn eines Artefakts erkennbar sein sollte, wird im Folgenden immer vorausgesetzt, dass ein Informatiksystem zweckbehaftet ist, n amlich zur L osung eines Anwendungsproblems dienen soll. Mit Blick auf Rechnerund Softwarearchitekturen ist eine Annahme fur Unterricht zu Informatiksystemen und Kompetenzentwicklung, dass durch die grobe Art der Zerlegung von Systemen in wenige Architekturelemente bzw. aufeinander aufbauende Schichten das Verstehen von Systemcharakteristika gef ordert wird. Die innere Struktur umfasst Prozesse und Organisationsbeziehungen. Wichtig ist auch eine Abgrenzung: In der vorliegenden Arbeit zu Informatiksystemen und Kompetenzentwicklung bilden Verstehen und Anwenden von Informatiksystemmodellen keinen Schwerpunkt. Informatisches Modellieren wird oft als aktives Erstellen einer konkreten Realisierung eines Informatiksystem gesehen (vgl. Brauer und Brauer 1992), z. B. das Durchlaufen des Softwareentwicklungsprozesses. F ur Basiskompetenzen zu Informatiksystemen werden selbige im Alltag betrachtet. Modelle werden genutzt, um das nach auen sichtbare Verhalten von Informatiksystemen und deren innere Struktur zu beschreiben. Sie sind damit u. a. ein Mittel zur Kompetenzentwicklung. In Abgrenzung zum Systembegri sei ein Modell also eine abstrahierte Beschreibung eines realen oder geplanten Systems (vgl. Hubwieser 2007a, S. 86).4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung 4.1 Uberblick In diesem Kapitel werden anhand der in Kapitel 3 ausgearbeiteten Kriterien der nationale und internationale Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik analysiert (Abschnitte 4.2 und 4.3). Ziel des Kapitels ist es, die Ergebnisse nach Bildungszielen, Unterrichtsinhalten und -gegenst anden, Lehr-Lernmethoden sowie Lernmedien fur Informatiksysteme und Kompetenzentwicklung zu gruppieren (Abschnitt 4.4). In der Diskussion der analysierten Publikationen wird jeweils eine Referenz zu dem Ergebnisbereich gesetzt, z. B.: !Ziel 1: Aufbau, Vernetzung und Funktionsweise, !Inhalt 1: Typische Repr asentanten, !Methodik 1: Universalit at, !Medien 1: Visualisierung verborgener Prozesse. Die Ergebnisse werden in Abschnitt 4.4 ab Seite 97 vorgestellt. Dort bendet sich auch eine Ubersichtsgrak (Abbildung 4.1). Es werden einerseits Forschungsl ucken oen gelegt und andererseits weitere Schlussfolgerungen und wissenschaftliche Fragestellungen abgeleitet, die in einem Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung fokussiert werden. In Deutschland existiert das Fachgebiet Didaktik der Informatik erst seit 1996 in Form von Lehrstuhlen an Hochschulen (vgl. Humbert 2003, S. 55). Davor verfassten meist Fachwissenschaftler die Studien und Empfehlungen zur Schulinformatik. Eine strikte Trennung in Fachdidaktik und Fachwissenschaft wird bei der folgenden Analyse des Forschungsstandes vermieden, allerdings mit Schwerpunktverlagerung auf die Fachdidaktikforschung ab den 1990er Jahren. Die Forschung zur Schulinformatik in der Bundesrepublik Deutschland wurde bereits von verschiedenen Autoren in Phasen und Ans atze strukturiert und kommentiert (z. B. (Forneck 1990), (Baumann 1993), (Eberle 1996), (Humbert 2003)). Zur F orderung und empirischen Analyse der Kompetenzentwicklung mit Informatiksystemen liegt jedoch bisher kein auf die Schulinformatik bezogenes, hinreichend theoretisch fundiertes, dierenziertes und mit dem Erfahrungswissen der Fachdidaktik unterlegtes Unterrichtsmodell vor.38 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Die erste Bildungsempfehlung der GI von 1976 fordert die verpichtende informatische Bildung, und ihr Einuss pr agte die weitere Entwicklung der Schulinformatik in der Bundesrepublik Deutschland stark. Daher werden im Folgenden nationale Bildungsempfehlungen der GI und wissenschaftliche Publikationen ab 1976 zur Schulinformatik unter normativer Perspektive auf Kompetenzentwicklung mit Informatiksystemen untersucht. Vor 1970 war ein logischkybernetischer und f acher ubergreifender Ansatz in der Schulinformatik vorherrschend. Der darauf folgende hardwareorientierte Ansatz bis etwa 1976 befasste sich mit logischen Grundlagen und technischer Realisierung unter Zuhilfenahme von Modellrechnern und Digitalbausteinen. Hinweise auf damalige Unterrichtsinhalte nden sich bei Meiner (1971). Die seit 1984 zweij ahrlich stattndende Konferenz Informatik und Schule (INFOS) der GI hat von Beginn an groen Einuss auf die nationale Schulinformatik. Deshalb werden neben den Empfehlungen der GI zur Schulinformatik vornehmlich Beitr age dieser Konferenz und der seit 1981 herausgegebenen Zeitschrift LOG IN analysiert. Auf internationaler Ebene fordert Ershov durch seine Stellungnahme"Programming, the second literacy" auf der 3."World Conference on Computers in Education (WCCE)" 1981 eine verpichtende Schulinformatik und die entsprechende Fachdidaktikforschung. Zur Analyse des internationalen Forschungsstandes werden insbesondere die WCCE der IFIP und Bildungsempfehlungen der ACM und der UNESCO f ur die Schulinformatik betrachtet. Letztere wurden in Kooperation mit der IFIP entwickelt. Die Bildungsempfehlungen sind jedoch auch kritisch zu sehen, da sie Expertenempfehlungen und damit nicht zwangsl aug auf Forschungsergebnisse abgestutzt sind. In der Analyse des Forschungsstandes werden Publikationen betrachtet, die bis zum Jahr 2007 erschienen sind. 4.2 Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 4.2.1 Informatiksysteme im algorithmen-, anwendungs-, und benutzerorientierten Informatikunterricht Informatiksysteme in der GI-Empfehlung zu Zielsetzungen und Inhalten des Informatikunterrichts Die Empfehlung"Zielsetzungen und Inhalte des Informatikunterrichts", die von der GI 1976 veroentlicht wurde, fordert eine verpichtende informatische Bildung f ur alle Schulabg anger. Motivation ist der zunehmende Einsatz von Rechnern und damit einhergehend die wirtschaftspolitisch begr undete Forderung, dass Schulabg anger einfache Probleml osungen maschinenverst andlich formulieren k onnen (Brauer et al. 1976, S. 35). Hauptzielsetzung im Unterricht ist daher das systematische Finden algorithmischer L osungen inklusive Thematisierung von Datenund Kontrollstrukturen. Sie beherrscht die drei erstgenannten von f unf Inhaltsbereichen: (1) Vom Problem zur L osung (Algorithmen), (2) Realisierung von Algorithmen in einer algorithmischen Sprache, (3) Vertiefung des Gelernten durch Anwendung auf praxisorientierte Problemkreise, (4) Funktioneller Aufbau einer Rechenanlage und DV-Organisation, (5) Informatik in der Gesellschaft (Brauer et al. 1976, S. 35). Die Inhaltsebene"Funktioneller Aufbau einer Rechenanlage und DV-Organisation" ist relevant bez uglich des Informatiksystembegris, denn darin werden Zentraleinheit mit Speicher, Leitwerk und Rechenwerk sowie Abl aufe bei der Befehlsverarbeitung in der Zentraleinheit behandelt ( !Inhalt 2: Strukturmodelle). Dennoch wird der Stellenwert der technischen Organisation des Rechners gegen uber der Algorithmik relativiert: "Nur sofern es zur Modellbildung beitr agt, soll man w ahrend des Unterrichts auch auf die Funktionseinheiten des verf ugbaren Rechners wie Speicher, Register, Ein-Ausgabeger ate eingehen" (Brauer et al. 1976, S. 36).4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 39 Der Beitrag des Verstehens von Funktionseinheiten zur Modellbildung ist f ur Kompetenzentwicklung mit Informatiksystemen zu ber ucksichtigen (!Methodik 2: Kognitive Modelle). W ahrend betont wird, dass M oglichkeiten und Grenzen der Anwendung von Rechnern zu thematisieren sind (!Ziel 3: Bewusste Anwendung), werden technische Maschinenmodelle als optional deklariert. Hinsichtlich Informatiksysteme und Kompetenzentwicklung stellt dies eine erhebliche Einschr ankung dar, die im historischen Kontext jedoch als Abgrenzung der Algorithmik von den hardwareorientierten Ans atzen zu sehen ist. Mit dem Einbeziehen von Fragestellungen zur Informatik in der Gesellschaft ist die Empfehlung nicht vollst andig dem algorithmenorientierten Ansatz zuzurechnen. Dennoch werden insbesondere Methoden der Informatik in den Vordergrund gestellt, die den Programmerstellungsprozess unterst utzen und erm oglichen. Wie wissenschaftsprop adeutisch sinnvoll Algorithmen im Informatikunterricht auch sein m ogen, so wird der Ansatz den Herausforderungen in einer von Informatiksystemen durchdrungenen Welt allein nicht gerecht. Dies gilt umso mehr, wenn man Basiskompetenzen zu Informatiksystemen in der Lebenswelt der Sch uler als Bildungsziel hat. Informatiksysteme im anwendungsorientierten Informatikunterricht Bereits 1978 wird die Entmystizierung von Rechnern als Ziel des Informatikunterrichts beschrieben (!Ziel 4: Entmystizierung): "Der Begri ,Computer' stimuliert bei vielen Menschen einerseits Gef uhle mystischen Bewunderns einer g otter ahnlichen Vollkommenheit des Denkens und andererseits angstbesetzte Vorstellungen uber die allm achtige, sich verselbst andigende und den Menschen manipulierende Maschine"(Koerber 1978, S. 6f). Des Weiteren wird auf die sich abzeichnende Bedeutung der Kommunikationsund Interaktionsmoglichkeiten mit der sich vom Werkzeug zum"Denkzeug" wandelnden Maschine hingewiesen, die auch als ADV-System (automatisierte Datenverarbeitung) bezeichnet wird. Koerber et al. (1981) beschreiben den anwendungsorientierten Informatikunterricht. Sie betrachten Entwicklung und Anwendung von"Software bzw. von DV-Systemen" als zwei Str ange im Informatikunterricht (vgl. Koerber et al. 1981, S. 30). Sie unterscheiden zwischen problembezogener, modellbezogener und informatikmethodenbezogener Ebene. Der Softwareentwicklungsprozess verl auft von der Problemdenition (problembezogene Ebene) uber eine Modellbeschreibung (modellbezogene Ebene) zum Detailentwurf (informatikmethodenbezogene Ebene). Der Anwendungsprozess ist in diesem Modell analog zum Softwareentwicklungsprozess, allerdings ohne Einbezug der informatikmethodenbezogenen Ebene, die nur als automatisch ablaufender Prozess wahrgenommen wird, und mit stark reduziertem Anteil der modellbezogenen Ebene. Uberschneidungen von Anwendung und Entwicklung gibt es im anwendungsorientierten Informatikunterricht somit haupts achlich auf der problembezogenen Ebene. Koerber et al. (1981) fordern, dass Anwendung von ADV-Systemen vollst andig Gegenstand im Unterricht ist, d. h. von der Problemstellung bis zur Stilllegung des Systems thematisiert wird. Die Anwendungsorientierung umfasst somit die Schwerpunkte Modellbildung ( !Inhalt 2: Strukturmodelle; !Methodik 2: Kognitive Modelle) und softwaretechnisches Vorgehen, aber auch die Algorithmenorientierung. Es stellt sich die Frage, welche Informatikmethoden bzw. vorgehensweisen wichtige Unterrichtsinhalte f ur Informatiksysteme und Kompetenzentwicklung sind, wenn Softwareentwicklung nicht im Vordergrund steht. Nach Forneck (1990) liegt die Schwierigkeit des anwendungsorientierten Ansatzes in dem ganzheitlichen, vom Lebensweltbezug ausgehenden Vorgehen, in dem die Algorithmik weiterhin einen groen Anteil an Unterrichtszeit beansprucht. Zus atzlich ist nach Forneck die umfassende Thematisierung aller Konsequenzen von Informatikanwendungen f ur viele Lehrpersonen eine Uberforderung. 1986 wird als Resultat des von 1977 bis 1983 durchgef uhrten Berliner Modellversuchs"Entwicklung von Curriculumelementen f ur den Informatikunterricht in der Sekundarstufe I" (ECIS)40 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung zur inhaltlichen Ausgestaltung eines anwendungsorientierten Informatikunterrichts gefordert, die Entmystizierung von Rechnern durch die Darstellung ihres Werkzeugcharakters und des damit verbundenen Interessenbezugs ( !Ziel 5: Bereitschaften) zu erreichen (Bosse et al. 1986, S. 8). Dieser anwendungsorientierte Informatikunterricht integriert algorithmische und gesellschaftliche Aspekte auf Grundlage des Modellbildungsprozesses (vgl. Bosse et al. 1986, S. 9) und f uhrt zu einem didaktischen F unf-Phasen-Modell: Problemund Zielformulierung, Problemanalyse und Modellansatz, Algorithmierung, Programmierung und Anwendung des Systems. Letzteres umfasst Analyse der Auswirkungen des Einsatzes des neu geschaenen Arbeitsmittels. Zwei Dinge sind au allig an der vorgestellten Konzeption: Zum einen wird die von Koerber et al. (1981) beschriebene Anwendungsorientierung durch die Orientierung am Softwareentwicklungsprozess im didaktischen F unf-Phasen-Modell umgesetzt. Zum anderen ist es der Versuch der Entmystizierung allein durch Darstellung des Werkzeugcharakters von Rechnern zur L osung eines Anwendungsproblems. Ein direkter Bezug zwischen informatischen Konzepten, die sich in dem Artefakt widerspiegeln, wird nicht hergestellt. Die GI fordert 1986 in der Rahmenempfehlung f ur die Informatik im Unterricht der Sekundarstufe I, dass ohne wissenschaftsprop adeutischen Anspruch, aber dennoch fachlich vertretbar, zentrale Fragestellungen beantwortet werden m ussen, z. B. was ein Rechner ist und wie er arbeitet. Das Aktivwerden des Sch ulers wird dabei besonders betont: "Ohne die Erfahrung des eigenen Tuns ist eine Grundkompetenz in Informatik nicht zu vermitteln. Hierbei brauchen L osung und Programm nicht von Grund auf neu entwickelt zu werden, der Sch uler kann auch durch Andern und Erweitern vorgegebener Programme zu eigenen Ergebnissen kommen. Der Sch uler soll einen Einblick in Prinzipien der Organisation und Verarbeitung von Information in computergest utzten Systemen erhalten" (L othe et al. 1986, S. 141). Fur Informatiksysteme und Kompetenzentwicklung in der Sekundarstufe II ist anregend, dass Datenbanksysteme und spezielle Anwendersysteme als Unterrichtsinhalte thematisiert werden sollen (!Inhalt 1: Typische Repr asentanten) und Modikation statt Konstruktion vorgeschlagen wird (!Methodik 6: Modikation statt Entwicklung). 1989 ist zur Legitimation und Aktualisierung des allgemein bildenden Informatikunterrichts das Argument der Vernetzung hinzu gekommen (Koerber et al. 1989, S. 3). Weiterhin bilden Probleml osen und Modellbildung die Schwerpunkte des Unterrichts. Zur Abbildung auf den Rechner muss die Probleml osung sowohl in Algorithmen zur Ablaufbeschreibung der Probleml osung als auch in Datenstrukturen umgesetzt werden. Ein System wird als Repr asentation der vom Entwickler eingesetzten Probleml osungsstrategien gesehen: "Informationsverarbeitende technische Systeme stellen ein Werkzeug f ur das L osen von Problemen dar, das stets menschliche Ideen, Wertungen und auch Irrt umer widerspiegelt" (Koerber et al. 1989, S. 9). Fur Informatiksysteme und Kompetenzentwicklung ist dies ein Ansatzpunkt dahingehend, dass eine systematische Analyse eines Informatiksystems die Verbindung zwischen dem nach auen sichtbaren Verhalten des Systems und informatischen Konzepten bilden kann ( !Methodik 3: Verbindung von Verhalten und Struktur; !Methodik 4: Analyse des Systems { Experimente). Es werden vier Handlungsperspektiven der Lernenden gesehen: als Betroene hinsichtlich gesellschaftlicher Auswirkungen, als Benutzer in Beruf und Alltag, als Konstrukteur unter soziokulturellen Gegebenheiten und als Bediener, der die Funktionszusammenh ange versteht (vgl. Koerber et al. 1989, S. 13). F ur Informatiksysteme und Kompetenzentwicklung implizieren diese Handlungsperspektiven einen von den Anwendungen ausgehenden Informatikunterricht ( !Inhalt 4: Sichten;!Methodik 7: Von der Anwendung zur Maschine). Dar uber hinaus ist es aber auch notwendig, dass Grundlagen der Rechnerorganisation und der Vernetzung thematisiert werden, um Funktionszusammenh ange zu verstehen ( !Ziel 1: Aufbau, Vernetzung und Funktionsweise). 1990 fordert Cyranek, Systeme als Black-Box zu betrachten und schrittweise von gesellschaftlichen Auswirkungen der Informationstechnologien, uber Nutzung von Anwendungssystemen und4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 41 Probleml osen mit algorithmischen Methoden zu Prinzipien der Rechnerarchitektur zu gelangen (Cyranek 1990, S. 2). Dabei beruft sich Cyranek auf die Vereinigung der Lehrerbildung in Europa Association for Teacher Education in Europe (ATEE; (Weert 1984)) : "Moglichkeiten, dieses Ziel zu erreichen, sind nach der ATEE: [. . . ] Methoden der Modellbildung, die die Sch uler bef ahigen, ad aquate Vorstellungen uber ihre Erfahrungen mit automatischen Systemen zu entwickeln. Die Entwicklung dieser Denkmodelle nutzt systematisch das Prinzip der ,black boxes"' (Cyranek 1990, S. 3). Die Forderung nach einem Vorgehen, das bei der Lebenswelt der Sch uler mit Black-Boxes beginnt und schrittweise bis zu Prinzipien der Rechnerarchitektur voranschreitet, erg anzt f ur Informatiksysteme und Kompetenzentwicklung das Vorgehen nach Koerber et al. (1989), in dem der Schwerpunkt auf der Modellbildung mit Algorithmen und Datenstrukturen liegt ( !Methodik 7: Von der Anwendung zur Maschine). Meier (1990) beschreibt zehn"Anforderungen an die Informatikausbildung in den neunziger Jahren aus Sicht der Wirtschaft". Eine Anforderung ist dabei besonders interessant: Er fordert vernetztes Denken und neue Formen der Teamarbeit (vgl. Brauer und M unch 1996, S. 14), wobei er sich auf Vester (1988) beruft, der f ur den sinnvollen Einsatz aller Kommunikationsmedien pladiert, um neue Verst andnisebenen zu erschlieen: "Wer die Verechtung eines Problems mit seinem Umfeld akzeptiert, vernetzt denkt, kommt folgerichtig zu neuen Formen der Teamarbeit" (Vester (1988) zitiert nach (Meier 1990, S. 57)). Die Rolle des vernetzten Denkens ist f ur Kompetenzentwicklung mit Informatiksystemen zu klaren (!Methodik 9: Vernetzung der Unterrichtsinhalte). So wurde bereits von Koerber et al. (1989) betont, dass informationsverarbeitende technische Systeme Ideen widerspiegeln, die zur Probleml osung genutzt werden und demnach vernetzt sind. Dazu kommt von Vester (1988) der Aspekt des vernetzten Denkens durch Kooperation (Abschnitt 5.4.1; !Medien 3: Kooperation und Kommunikation). Die Informatiklehrer und Fachberater f ur Informatik Gasper, Lei, Spengler und Stimm aus Rheinland-Pfalz ver oentlichen 1992 eine informatikdidaktische Ausarbeitung zum Thema"Technische und theoretische Informatik" mit Lehr-Lernmaterial: "Es behandelt auf maschinenunabh angige Weise technische Grundlagen eines Computers, beschreibt ihn durch theoretische Automatenmodelle und zeigt prinzipielle, nicht durch die technische Entwicklung zu durchbrechende Grenzen seiner Leistungsf ahigkeit auf. Schlielich werden die Grenzen des verantwortlichen Computereinsatzes im Zusammenhang mit gesellschaftlichen Aspekten der Informatik diskutiert" (Gasper et al. 1992, S. 3). Ziel darin ist, zeitbest andige Methoden und Inhalte zu vermitteln. Inhaltlich werden dazu h ohere Programmiersprachen, Assemblerprogrammierung, Rechnerarchitekturen, Schaltungen, Automatenmodellen, formalen Sprachen, Komplexit at und gesellschaftliche Verantwortung thematisiert. Die Ausarbeitung beginnt mit der Denksportaufgabe des Bauern, der in einem kleinen Boot Kohlkopf, Wolf und Ziege ans andere Flussufer transportieren muss. Das Boot aber fasst nur den Bauern und eines der Tiere bzw. den Kohlkopf. Dabei w urde ohne Aufsicht der Wolf die Ziege bzw. die Ziege den Kohl fressen. Die Problemstellung wird auf drei verschiedene Weisen gelost: einmal mit einem Automatenmodell, mit logischen Schaltungen und mit einer formalen Sprache. Die enge Verzahnung von Technischer und Theoretischer Informatik verdeutlicht die Notwendigkeit, aber auch M oglichkeit eines ganzheitlichen Blicks auf Rechner ( !Inhalt 2: Strukturmodelle; !Inhalt 3: Fundamentale Ideen). Kritisch ist bei diesem Ansatz anzumerken, dass Grundbausteinen logischer Schaltungen und der Assemblerprogrammierung sehr viel Zeit einger aumt wird.42 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Informatiksysteme im benutzerorientierten Informatikunterricht Peschke pr agt den Ansatz der Benutzerorientierung, der Sch ulern ein Instrumentarium zur selbstandigen Einarbeitung in Standardsoftware vermitteln soll. Der Ansatz vollzieht damit eine Abkopplung von der Informatik. Peschke spricht jedoch auch vom systemorientierten Ansatz, wobei er die Bezeichnung jedoch auf das sozio-technische System der Anwendung von Standardsoftware bezieht (Peschke 1991, S. 152). Dieser Ansatz ist nicht zu verwechseln mit dem systemorientierten Ansatz nach Baumann (Abschnitt 4.2.3). Die widerspr uchliche Nutzung des Systembegris, die in Abschnitt 3.2.1 gekl art wird, ist Ursache der unterschiedlichen Interpretationen. Peschke argumentiert gegen die strikte Trennung von technischem Apparat und gesellschaftlichen Auswirkungen. Vielmehr sieht er in der Wechselwirkung zwischen Mensch und Computer ein tragendes Leitprinzip f ur den Informatikunterricht (Peschke 1990, S. 30). Forneck (1990) beschreibt r uckblickend den benutzerorientierten Ansatz. Dieser meidet die Algorithmik, indem er auf Programmierung verzichtet und Anwendersysteme im Unterricht behandelt. Seine Grundlage ist, dass es mit modernen Anwendungssystemen m oglich ist, innerhalb spezieller Anwendungsbereiche individuelle L osungen zu entwickeln, ohne eine Programmiersprache erlernt zu haben: "Damit geht es beim benutzerorientierten Ansatz nicht mehr um Maschinenkunde oder um eine wissenschaftsprop adeutische Einf uhrung in die Fachdisziplin [. . . ] Der benutzerorientierte Ansatz ist eine Allgemeinbildungskonzeption, die die technologische Entwicklung in erster Linie als epochales Kulturph anomen thematisiert" (Forneck 1990, S. 40). Damit sind Qualizierung zum rationalen Umgang mit Anwendungen sowie Steigerung der Beurteilungsf ahigkeit Ziel der Benutzerorientierung (vgl. Hubwieser 2007a, S. 52). F ur Kompetenzentwicklung mit Informatiksystemen sind diese Ziele ebenfalls relevant ( !Ziel 3: Bewusste Anwendung). Es mangelt dem Ansatz jedoch an einer ausgezeichneten Vorgehensweise: "Es gibt kein ausgezeichnetes methodisches Vorgehen, man durchl auft die folgenden T atigkeitsgebiete in unterschiedlicher Reihenfolge (manche auch mehrfach): Finden, Erkennen und Analysieren eines Problems, Strukturieren des Problems und Entwickeln modellhafter L osungsm oglichkeiten, Nutzen von Anwendersystemen und Programmierumgebungen, Beurteilen der Ergebnisse, Reektieren und Bewerten der Nutzung der Technologien" (Hubwieser 2007a, S. 52). Informatikunterricht f ur Kompetenzentwicklung mit Informatiksystemen muss jedoch die innere Struktur der Systeme, d. h. unterschiedliche Perspektiven aufgreifen ( !Inhalt 4: Sichten). Und es ist somit eine systematische Vorgehensweise zur Analyse von Informatiksystemen zu beschreiben (! Methodik 4: Analyse des Systems { Experimente). Abschlieend betont Forneck die Probleme bei einer m oglichen Spaltung der Didaktik der Informatik, wenn die anwendungsund benutzerorientierten Ans atze zunehmend in der Sekundarstufe I, der algorithmenorientierte Ansatz in der Sekundarstufe II vorherrschen. Er fordert, dass ein wissenschaftsprop adeutischer Ansatz immer einer lebenspraktisch und damit ganzheitlich ausgerichteten Konzeption vorgeschaltet sein muss, da letztere allein nicht Selbstzweck einer informationstechnischen Bildung sein durfe (vgl. Forneck 1990, S. 49). Da das Ziel der vorliegenden Arbeit Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II ist, muss die Verbindung der Wissenschaftsprop adeutik mit den Informatiksystemen in der Lebenswelt gelingen, ohne dabei haupts achlich auf die Algorithmik zur uckzugreifen. Die Wissenschaftsprop adeutik vorzuziehen widerspricht jedoch den Kompetenzzielen. F ur Basiskompetenzen liegt der Schwerpunkt auf der Anwendung von Informatiksystemen, in dem aber informatische Konzepte von Sch ulern identiziert und verstanden werden m ussen (!Methodik 3: Verbindung von Verhalten und Struktur). Somit ist die im anwendungsorientierten Informatikunterricht vorherrschende Trennung von Anwendung und Entwicklung dahingehend zu modizieren, dass f ur Kompetenzentwicklung mit Informatiksystemen Modellbildungsaspekte bei der Anwendung verst arkt hinzugef ugt werden (!Methodik 2: Kognitive Modelle).4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 43 Kompetenzentwicklung mit Informatiksystemen in Modrows anwendungsorientiertem Ansatz Modrow setzt 1991 im Zuge der sich wandelnden Stellung der Informatik im F acherkanon den informatischen Probleml oseprozess zur Begr undung des Fachs Informatik in den Mittelpunkt. Denn probleml osendes Denken stellt in der Informatik keine Uberforderung von Sch ulern dar, da in Programmen nur ein kleiner Weltausschnitt betrachtet wird: "Weiterhin stellen Computer ein Medium dar, in dem der Probleml osungsproze dynamisch ist, also durch ,trial-and-error', ,debugging', Fehlersuche, Tests und schrittweise Verbesserungen auch f ur durchschnittliche Sch uler/-innen erfolgreich durchf uhrbar" (Modrow 1991, S. 21). Es ist festzuhalten, dass Modrows"Zur Didaktik des Informatikunterrichts" ebenso wie Baumanns"Didaktik der Informatik"(Baumann 1996) weniger von fachdidaktischer Theorie geleitet, sondern pragmatisch und methodisch angelegt ist (Abschnitt 4.2.3). F ur den Informatikanfangsunterricht nennt Modrow folgende Lernziele: das Erlernen des Umgangs mit Rechner und Programmentwicklungssystem und Einblick in typische Arbeitsmethoden der Datenverarbeitung, Entwicklung von Algorithmen zur L osung kleiner Probleme, Projektarbeit, gesellschaftliche Folgen der Datenverarbeitung sowie Nutzung des Rechners als Textverarbeitungssystem (Modrow 1991, S. 72). Diese begr undet er damit, dass Problemanalyse, Begrisund Modellbildung, Auswahl von Datenstrukturen, Beschreibung von Probleml osungen und dazugeh origer Methoden, Realisierung, Test, Beurteilung und Dokumentation der L osung nicht ohne Kenntnisse uber das benutze Rechnersystem und seine Grenzen m oglich ist (vgl. Modrow 1991, S. 34). Modrow nennt folgende relevante Einsatzgebiete von Informatiksystemen, so dass eine Kategorisierung f ur den Informatikunterricht anhand ihrer Erscheinungsformen entsteht: Rechner, Datenverarbeitungssystem, Roboter, symbolverarbeitendes System (Computeralgebra, Sprachverarbeitung), Kommunikationsmittel, Planungsinstrument, Entscheidungsmaschine, k unstliche Intelligenz (Modrow 1992, S. 196). Diese Repr asentanten von Informatiksysteme k onnen im Unterrichtmodell zu Informatiksystemen und Kompetenzentwicklung eingesetzt werden ( !Inhalt 1: Typische Repr asentanten). Um Rechner anwenden zu k onnen, m ussen die Sch uler Hardwarekenntnisse uber Zentraleinheit mit Prozessor, Speicher, Eingabe und Ausgabe haben und die Abarbeitung von Programmen im Von-Neumann-Rechner kennen (vgl. Modrow 1991, S. 94), also ein Maschinenmodell ( !Inhalt 2: Strukturmodelle). Kenntnisse uber das Betriebssystem werden als kaum erforderlich angesehen, da sie zu speziell und nicht allgemein bildend sind (Modrow 1991, S. 94). Argument ist, dass Sch uler von der Existenz des Betriebssystems im Idealfall nichts bemerken. Historisch ist die Argumentation im Sinne der Anwendungsorientierung nachvollziehbar, denn darin wird der Softwareentwicklungsprozess meist f ur kleine Anwendungsprogramme besonders betont, nicht aber Betriebssystementwicklung im Speziellen. Hinsichtlich der Kompetenzentwicklung mit Informatiksystemen ist diese Auassung Modrows jedoch kritisch zu sehen, denn gerade das Betriebssystem verwaltet Hardund Software sowie die Netzverbindungen, die charakteristisch f ur Informatiksysteme sind. Im Zuge der Wissenschaftsprop adeutik und bez uglich Kompetenzentwicklung mit Informatiksystemen sind Betriebssysteme somit ein relevantes Themengebiet. Bei dem Schwerpunkt Hardware zieht Modrow den Schaltungsentwurf mit dem Ziel der Entwicklung heran: "Zur Beschreibung derart komplexer Systeme [Rechner; Anm. d. V.] geh ort die Benutzung von Blockschaltbildern, das Denken in Komponenten und die Beschreibungsformen der Rechnerarchitekturen. [. . . ] Gehen wir davon aus, da nicht die Einzelheiten des gerade benutzten Prozessors und seiner Komponenten behandelt werden [. . . ], sondern prinzipielle Strukturen, dann ist das Blockschaltbild eines Von-Neumann-Rechners nicht sehr kompliziert und in kurzer Zeit zu erlernen" (Modrow 1992, S. 328). Assemblerprogrammierung lehnt er ab, wenn sie nicht mittels (Modell-) Assembler die Br ucke vom Rechnermodell zur h oheren Programmiersprache schliet. Andernfalls sieht er darin nur eine weitere, uber ussige und komplizierte Programmiersprache (Modrow 1992, S. 329).44 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Das Programmentwicklungssystem in Kombination mit einem Texteditor wird von Modrow als das entscheidende Werkzeug angesehen, um nicht nur"Bedienerprobleme" im Informatikunterricht zu behandeln (Modrow 1991, S. 95). Die Probleml osung erfolgt somit auf h ohersprachlichem Niveau und l asst das Probleml osen selbst zentrale Aufgabe des Unterrichts werden, statt immer wieder kleinste Programme zu schreiben (vgl. Burkert 1994b, S. 89). Jedoch bezweifelt Modrow indirekt die Ubertragbarkeit von Erkenntnissen zur Hardware auf die Software und umgekehrt: "Computer sind ein typisches Beispiel f ur Systeme, die sich auf sehr unterschiedlichen Ebenen beschreiben und benutzen lassen. Dabei l at die Kenntnis einer Ebene nur sehr bedingt Aussagen uber Probleme zu, die auf einer anderen relevant sind. Konkret hilft die Kenntnis technischer Einzelheiten des Arbeitenden Mikroprozessors nichts, wenn mit einem Datenbanksystem gearbeitet werden soll; und selbst groe Erfahrung mit Programmiersprachen ist unn utz fur das L oten eines Druckerkabels" (Modrow 1991, S. 93). Dieses Argument ist im historischen Kontext aber durchaus kritisch zu sehen, denn es setzt voraus, dass das L oten eines Druckerkabels gleichberechtigter Inhalt der Informatik ist, wie z. B. Datenbanksysteme. Dem kann mit den Kriterien f ur fundamentale Ideen der Informatik widersprochen werden (Abschnitt 4.2.2). Auerdem kann die logische Aquivalenz von Hardware und Software (Tanenbaum und Goodman 2001, S. 27) herangezogen werden, um den nur scheinbar unmoglichen Transfer von Erfahrungen mit technischen Aspekten auf die Softwareebene doch zu begr unden. Hervorzuheben ist, dass Modrow auf Standardsoftwaresysteme im Informatikunterricht nicht verzichten will, auch wenn er die herk ommlichen Programmentwicklungssysteme aufgrund ihrer Universalit at (!Methodik 1: Universalit at) an erste Stelle setzt: "Werden also Datenbank-Fragestellungen behandelt, dann sollte auch irgendwann ein ,echtes' Datenbanksystem gezeigt werden, ohne auf alle seine Spezialit aten einzugehen" (Modrow 1991, S. 62f). Fur Datenbanksysteme gibt Modrow einen m oglichen und erprobten Unterrichtsgang an. Bemerkenswert daran ist, dass er nach der Vorstellung des Szenarios zur Erkundung eines Systems, eine"naive" Analyse des Systems bez uglich Teilfunktionen, deren Zusammenwirken und der Datenwege fordert, soweit dies von Sch ulern und Lehrern m oglich ist ((Modrow 1991, S. 39), (Modrow 1992, S. 270)). Danach werden Teilprobleme ausgew ahlt und von den Sch ulern in einem reduzierten Modell implementiert: "Die mangelnde Ezienz und die Unvollst andigkeit der entwickelten Programme kann eigentlich von den Beteiligten nicht als Nachteil empfunden werden, weil ja bewut mit einem reduzierten Modell gearbeitet wird, das Verst andnis fur Datenbanken f ordern soll, aber nicht unbedingt funktionierenmu" (Modrow 1991, S. 39; Hervorh. im Original). Schuler m ussen Informatiksysteme als Modell erkennen, das die Realit at nicht vollst andig abbilden kann. F ur Kompetenzentwicklung mit Informatiksystemen ist es deshalb gut nachvollziehbar, dass Unvollst andigkeit des reduzierten Modells keinen Nachteil darstellen muss. Schwierig hingegen ist der Aspekt des"Funktionierens" eines Programms, denn gerade Verhalten und Funktion sind unverzichtbare Charakteristika eines Informatiksystems (Abschnitt 3.2.2). Zusammenfassend werden Datenbanksysteme, Textverarbeitungssysteme und Programmentwicklungssysteme als Werkzeuge und typische Repr asentanten von Informatiksystemen genannt. Der von Modrow formulierte Schritt des naiven Erkundens unter Verwendung einer Versuch-IrrtumStrategie macht den Bedarf an systematischen Vorgehensweisen zur Erkundung von Informatiksystemen oensichtlich ( !Methodik 4: Analyse des Systems { Experimente): Die VersuchIrrtum-Strategie sollte vermieden werden (vgl. Brinda 2004b). Als Fazit dieses ersten Abschnitts ist anzuf uhren, dass Entmystizierung von Rechnern bereits als ein Ziel des Informatikunterrichts in den Publikationen formuliert wird. Vor allem die Vernetzung wird im anwendungsorientierten Informatikunterricht aufgegrien. Dazu geh ort auch eine ganzheitliche Sicht auf das Informatiksystem bzw. Anwendungen, in der nicht nur die Softwareentwicklung im Mittelpunkt steht. Technische Informatik und Algorithmik zur Erkl arung von4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 45 Rechnern r ucken in den fachdidaktischen Publikationen in den Hintergrund. Dennoch sind die analysierten Publikationen hilfreich hinsichtlich der Kompetenzentwicklung mit Informatiksystemen. Anwendungsorientierung beispielsweise stellt Analogien zwischen Softwareentwicklung und Softwarenutzung her. Auerdem wird darauf hingewiesen, dass Informatiksysteme die ihnen zugrunde liegenden Entwurfsentscheidungen zumindest prinzipiell widerspiegeln. Gesellschaftliche Fragen des Einsatzes werden unterrichtsrelevant. Oen bleiben jedoch Fragen zu Sch ulervorgehensweisen bei der Erkundung von Informatiksystemen ohne Schwerpunkt auf Softwareentwicklung, und es fehlen Unterrichtskonzeptionen, die st arker auf bewusste Anwendung von Informatiksystemen fokussiert und gleichzeitig wissenschaftsprop adeutisch sind. 4.2.2 Legitimation des Bildungswertes von Informatiksystemen durch fundamentale Ideen der Informatik 1993 transferiert Schwill (1993a) das erziehungswissenschaftliche Konstrukt der fundamentalen Ideen (Bruner 1960) zur Auswahl von Bildungsinhalten auf die Informatik, das den nichtspezischen Transfer f ordert. Dazu konkretisiert er Kriterien nach Bruner, Schreiber (1983) und Schweiger (1982), denen ein Konzept der Informatik gen ugen muss, um fundamentale Idee zu sein (Horizontal-, Vertikal-, Zeit-, Sinnkriterium). Schwill erg anzt das Zielkriterium, das zur Annaherung an eine idealisierte Zielvorstellung dient, die m oglicherweise unerreichbar ist (vgl. Schubert und Schwill 2004, S. 85). Des Weiteren entwickelt Schwill eine heuristische Vorgehensweise zur Identizierung von fundamentalen Ideen, indem die Kriterien ggf. mehrfach iterativ auf Inhalte der Informatik angewendet werden, um zu den Ideen als Abstraktion zu gelangen. Diese werden anschlieend in Beziehung zueinander gesetzt. Zur Formulierung eines Katalogs von fundamentalen Ideen zieht Schwill den Softwareentwicklungsprozess heran, identiziert in ihm wichtige Konzepte der Informatik und pr uft sie auf die denierten Kriterien. Die in mehreren Phasen des Softwareentwicklungsprozesses auftretenden Ideen Algorithmisierung, Strukturierte Zerlegung und Sprache werden durch Clusterung zu Masterideen, die als Wurzelknoten die hochste Hierarchieebene ihres Teilbereiches darstellen. Baumann beschreibt f ur den Informatikunterricht unabh angig von Schwill drei fundamentale Ideen der Informatik: Formalisierung, Automatisierung und Vernetzung (Baumann 1996, S. 153), (Baumann 1998). Er leitet seine fundamentalen Ideen aus den nichttechnischen Einsatzgebieten des Rechnens, des Kommunizierens sowie des Steuerns und Regelns ab, was dadurch begr undet ist, dass er die Informatik als Referenzwissenschaft f ur alle"Informationswissenschaften" sieht (Baumann 1996, S. 64). Auf den ersten Blick scheinen die fundamentalen Ideen nach Baumann damit enger an den Hauptfunktionen von Informatiksystemen nach Denning (Abschnitt 3.2.2) zu liegen. So stellt Humbert (2003) fest, dass Elemente der Technischen Informatik in den fundamentalen Ideen der Informatik nach Schwill unterrepr asentiert sind und erg anzt, dass ein Zugang zu sozio-technischen Systemen fehlt ( !Inhalt 4: Sichten): "Schwerwiegender erscheint dem Autor der fehlende Zugang zu soziotechnischen Systemen und den damit verbundenen Anwendungsbereichen" (Humbert 2003, S. 64). Nachteil der fundamentalen Ideen der Informatik nach Baumann ist jedoch das Fehlen von Kriterien. Somit mangelt es ihnen an einem Auswahlmechanismus, der weniger subjektiv gepr agt ist und die Auswahl von Inhalten nachvollziehbar macht. Dar uber hinaus ist die Argumentation auf Basis aller Informationswissenschaften kritisch zu sehen, da durch sie weniger eine Orientierung am Fach Informatik zur Auswahl von Inhalten vorgenommen wird, als es nach Schwill der Fall ist. Zur Bestimmung von Informatikinhalten zu Informatiksystemen und Kompetenzentwicklung ist es also notwendig, auf Kriterien zur uck zu greifen, die selektiv sind. Da uber den Wert der fundamentalen Ideen der Informatik nach Schwill in der Fachdidaktikforschung ein gewisser Konsens herrscht, der beispielsweise durch eine zunehmende Anzahl an Publikationen zu dem Thema belegt ist ((vgl. Schubert 2007), (Modrow 2002)), werden die Kriterien nach Schwill in der46 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung vorliegenden Arbeit zu Informatiksystemen und Kompetenzentwicklung eingesetzt ( !Inhalt 3: Fundamentale Ideen). Hartmann et al. (2006) beziehen sich auf die Kriterien nach Schwill und geben zus atzlich das Repr asentationskriterium an: Eine fundamentale Idee soll sich enaktiv begreifen, ikonisch visualisieren und symbolisch beschreiben lassen k onnen. Das Repr asentationskriterium liefert jedoch eine starke inhaltliche Uberschneidungen mit dem Vertikalkriterium, denn wenn beispielsweise Lernende der Primarstufe ein informatisches Prinzip kennen lernen, dann geschieht dies es entweder enaktiv, d. h. f ur sie aktiv begreifbar repr asentiert, oder aber die Lernenden verstehen es auch ikonisch bzw. symbolisch so dass das Repr asentationskriterium uber ussig wird. Als Kriterium wird es in der vorliegenden Arbeit nicht herangezogen, dennoch ist die Wichtigkeit der Repr asentationsform unbestritten. Von Schwill wird somit ein Fundament f ur die Begr undung des allgemeinen Bildungswertes im Informatikunterricht gelegt. Er betont, dass fundamentale Ideen den nichtspezischen Transfer unterst utzen, d. h. unbekannte Varianten einer Problemstellung k onnen als Spezialf alle eines vertrauten Grundkonzeptes erkannt und L osungsmethoden angepasst werden (Schubert und Schwill 2004). Damit unterst utzen fundamentale Ideen den Anspruch an Kompetenz, dass eine Probleml osung in variablen Situationen erfolgreich eingesetzt werden kann, weshalb die Kriterien fur fundamentale Ideen in der vorliegenden Arbeit zur Auswahl von Unterrichtsinhalten gew ahlt wurden. Frage ist, inwieweit sich fundamentale Ideen der Informatik bez uglich der Basiskompetenzen zu Informatiksystemen ausndig machen lassen und wie sie im Lehr-Lernprozess vernetzt werden k onnen (Abschnitt 5.3). Bereits der Titel dieses Abschnitts macht ein weiteres Dilemma der fundamentalen Ideen der Informatik deutlich. Anhand der Kriterien sind einzelne Konzepte auf ihren Bildungswert hin uberpr ufbar. Die Vernetzung der fundamentalen Ideen im Unterricht wird jedoch der Informatiklehrperson uberlassen. Elegant l asst sich dieses Problem durch das Durchlaufen des Softwareentwicklungsprozesses l osen, denn darin wurden die fundamentalen Ideen der Informatik nach Schwill identiziert und der Entwicklungsprozess bildet die logische Vernetzung. F ur Kompetenzentwicklung mit Informatiksystemen ist die L osung jedoch nicht mehr praktikabel, sind neben der Konstruktion doch auch das nach auen sichtbare Verhalten und die inneren Struktur von Informatiksystemen Schwerpunkte ( !Methodik 9: Vernetzung der Unterrichtsinhalte). In einer informatischen Bildung mit dem Ziel, Kompetenzentwicklung mit Informatiksystemen zu f ordern, m ussen gerade solche zugrunde liegenden informatischen Ideen genutzt werden, die unerwartetes Verhalten von Informatiksystemen erkl arbar machen. In der Konsequenz sind Kandidaten f ur fundamentale Ideen der Informatik auch im Verhalten von Informatiksystemen bzw. im Anwendungsprozess zu identizieren ( !Methodik 3: Verbindung von Verhalten und Struktur), auf die Kriterien nach Schwill zu pr ufen und mit weiteren fundamentalen Ideen der Informatik bez uglich Informatiksysteme und Kompetenzentwicklung zu vernetzen (Abschnitt 5.4). 4.2.3 Kompetenzentwicklung mit Informatiksystemen in systemorientierten Ansatzen Der systemorientierte Ansatz nach Baumann Baumann f uhrt erstmals einen systemorientierten Ansatz f ur die Schulinformatik ein (Baumann 1990), (Baumann 1993), (Burkert 1994a, S. 56). Zur theoretischen Fundierung seines aus der Schulpraxis kommenden Konzeptes bezieht er sich auf den Systembegri als Strukturbegri aller Wissenschaft. Die Struktur in Form von Ordnung und Organisation wiederum sei ein Synonym fur Information (Baumann 1993, S. 12). Er folgert, dass das Pichtfach Informatik stellvertretend fur alle"Informationswissenschaften" wie Linguistik, Kognitionstheorie, Kybernetik, allgemeine Systemtheorie, Mathematik und Logik die notwendigen Begrie, Denkmethoden zur Informationsverarbeitung vermitteln sollte (Baumann 1990, S. 13). Baumann sieht in der Anwenderund der Benutzerorientierung die Gefahr, dass Informatik zur Sozialwissenschaft wird und folgert,4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 47 dass ein Rechner nicht als isoliertes Einzelger at, sondern als Teil umfassender Systeme gesehen werden muss (Baumann 1993, S. 12). Er erkl art, dass die"Ganzheitlichkeit" der Anwendungsorientierung ubersch atzt wurde und zur Legitimation des Informatikunterrichts nicht (mehr) nutzbar ist (Baumann 1993, S. 11), denn dergleichen beraube dem Informatikunterricht seines Fachprinzips: "Denn jenem Bestreben liegt ein gedanklicher Kurzschlu bzw. ein Irrglaube zugrunde { n amlich der, da eine Wissenschaft, die sich der Gesellschaft verpichtet wei, indem sie sozial n utzliche bzw. menschengerechte Informatiksysteme entwirft und gestaltet, darum bereits Sozialwissenschaft oder gar eine ,Wissenschaft vom Menschen' sei" (Baumann 1996, S. 3). Neben die Hardund Softwareseite tritt im systemorientierten Ansatz die Perspektive des Benutzers (!Inhalt 4: Sichten). Baumann (1996) fasst die Informatik als konstruktive Wissenschaft des Entwurfs und der Gestaltung von Informatiksystemen auf. Ein Informatiksystem deniert er folgendermaen: "Unter einem Informatiksystem versteht man ein verteiltes, heterogenes technisches System, das Wissen unterschiedlicher Art und Herkunft repr asentiert, diese Wissensrepr asentationen in Gestalt von Daten und Programmen verarbeitet und den Benutzern in geeigneter Form zur Verf ugung stellt" (Baumann 1996, S. 164; Hervorh. im Original). Der Gestaltung der Benutzungsober ache kommt somit entscheidende Bedeutung zu (vgl. Baumann 1993, S. 12). F ur Kompetenzentwicklung mit Informatiksystemen ist dies wieder ein Hinweis auf den engen Zusammenhang von Verhalten und Struktur ( !Methodik 3: Verbindung von Verhalten und Struktur). Baumann integriert den Ansatz der Informatik als Wissenstechnik (vgl. (Luft und K otter 1994), (Schubert und Schwill 2004, S. 12f)), um Informatiksysteme zu erklaren: "Darunter sind technische Systeme zu verstehen, die Wissen enthalten, das Systemanalytiker und Wissensingenieure in Zuge einer Anforderungsanalyse gewonnen, Systemarchitekten und Programmierer verstanden, und das in Form von Daten und Programmen mit Hilfe geeigneter Werkzeuge (Programmiersprachen, Ubersetzer, Datenhaltungssystemen) implementiert sowie mit Hilfe von Zugangs-, Betriebsund Nutzungssystemen verf ugbar gemacht worden ist" (Baumann 1996, S. 94). Damit formuliert er die Auassung, dass Informatiksysteme Wissen im Sinne der K unstlichen Intelligenz repr asentieren. Grundlage seines Konzeptes sind neben allgemeinen Bildungszielen vier Grundkategorien der Informatik, n amlich Information, System, Modell und Programm, sowie die drei fundamentalen Ideen Formalisierung, Automatisierung und Vernetzung (Baumann 1996, S. 153). Letztere tritt beispielsweise auf bei parallelen und verteilten Systemen, Aktoren und Agenten sowie bei Rechnernetzen. Diese Ideen d urfen jedoch nicht verwechselt werden mit den fundamentalen Ideen der Informatik nach Schwill (1993a) (Abschnitt 4.2.2). Als"Gesichtspunkte" der Didaktik der Informatik formuliert er A) Probleml osen mit Informatiksystemen, B) Wirkprinzipien von Informatiksystemen und C) Grundlagen und Grenzen technischer Wissensverarbeitung (Baumann 1993, S. 12). Ab 1996 spricht er von"Leitlinien". Ihnen ordnet er nachfolgende Leitfragen zu: A)"Wie k onnen durch Entwicklung, Gestaltung und Anwendung von Informatiksystemen Probleme der Lebenswelt gel ost werden? B) Wie sind Informatiksysteme aufgebaut, welches sind die Prinzipien des Zusammenwirkens ihrer Komponenten und wie ordnen sie sich in gr oere Systemzusammenh ange ein? C) Wo liegen die Grenzen formaler bzw. technischer Wissensverarbeitung, und wie kann { angesichts der fortschreitenden Automatisierung geistiger T atigkeiten { die kognitive Autonomie menschlicher Subjekte gewahrt werden?" (Baumann 1996, S. 120), (vgl. auch Baumann 1993, S. 12).48 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung In der Leitlinie"Probleml osen mit Informatiksystemen" sollen Sch uler typische Einsatzbereiche und exemplarische Anwendungen der Informatik in der Gesellschaft diskutieren und reektieren, Methoden der Modellierung von Realit atsausschnitten kritisch nutzen, Werkzeuge problemangemessen ausw ahlen, Entwurfsmethoden f ur Informatiksysteme kennen und anwenden sowie Probleme und Algorithmen hinsichtlich Komplexit at beurteilen k onnen (Baumann 1996, S. 171f). In der Leitlinie"Wirkprinzipien von Informatiksystemen" sollen Sch uler Digitalisierung als Prinzip der Informationsverarbeitung kennen, anwenden und bewerten sowie die Verarbeitung durch programmgesteuerte Automaten und die entsprechende Rechnerarchitektur (Von-Neumann-Rechner, Parallelarchitekturen) verstehen. Auerdem sollen sie Aufgaben, Funktionen und Datenmodelle von Informationssystemen kennen. Dazu m ussen sie einfache Datenbanksysteme entwerfen konnen, Struktur und Funktion von Netzen bei der Informationsverarbeitung kennen und als sozio-technische Systeme verstehen sowie Risiken komplexer Hardund Softwaresysteme hinsichtlich ihres Einsatzes einsch atzen k onnen (Baumann 1996, S. 172). Interessant ist an dieser Stelle die Benutzung des Begris des Informationssystems, das die Aufgabe hat, Daten zu speichern, zu verwalten sowie deren Auswertung zu unterst utzen und daher meist ein Datenbanksystem umfasst. Baumann betont, dass jedes Informationssystem ein Informatiksystem sei, dies jedoch nicht umgekehrt gelte (Baumann 1996, S. 287). Mit dem Hinweis auf sozio-technische Systeme stellt Baumann heraus, dass Informatiksysteme aus der Gesellschaft heraus entstehen und in diese zur uckwirken (Baumann 1993, S. 12). F ur Kompetenzentwicklung mit Informatiksystemen ist gerade diese Leitlinie zu beachten, denn wechselwirkende Teilsysteme, deren Zusammenschluss in Netzen und die freie Programmierbarkeit sind zentral ( !Ziel 1: Aufbau, Vernetzung und Funktionsweise; !Methodik 1: Universalit at). Lernziele in der Leitlinie"Grundlagen und Grenzen der technischen Wissensverarbeitung" sind, dass die Sch uler Rechner als universelle symbolverarbeitende Maschine begreifen lernen und in die Entwicklung von Technik und Kultur einordnen k onnen. Neben der Universalit at, die auch bei den Wirkprinzipien thematisiert wird, sind die Grenzen der Probleml osung mit Rechnern in dieser Leitlinie Hauptthema. Auerdem sollen sie formale und nat urliche Sprachen in Zusammenhang bringen und Grenzen formaler Kommunikation kennen ( !Ziel 3: Bewusste Anwendung). Grundlegende Konzepte symbolischer Informationsverarbeitung und prinzipielle Grenzen der Berechenbarkeit und Ezienzsteigerung sollen sie kennen sowie Grenzen des Einsatzes von Informatiksystemen aufgrund individueller und gesellschaftlicher Verantwortung beachten (Baumann 1996, S. 172f). Exemplarisch skizziert er eine Kursfolge f ur sechs Schulhalbjahre der Sekundarstufe II, die sich an Anwendungsgebieten orientiert: Datenbanken und Informationssysteme, Sprachverstehen mit nat urlichsprachlicher Datenbankabfrage, elementare Computergraphik, Strategiespiele, Compilerbau und Sicherheit im Datennetz mit kryptologischen Algorithmen (Baumann 1996, S. 198). Fasst man Baumanns Ausf uhrungen zusammen, dann beschreibt er einen stark an theoretischen Begrien orientierten Ansatz f ur die Schulinformatik. Die konkrete Auswahl der Unterrichtsinhalte ist von ihnen ausgehend argumentativ nachvollziehbar, sie ist im Einzelfall jedoch nicht ausgrenzend und verschiebt den Schwerpunkt des Informatikunterrichts einseitig zu Themen der K unstlichen Intelligenz und der damit verbundenen Informationsund Wissensverarbeitung. Systemorientierung versteht Baumann als Synergetik, d. h. das Zusammenwirken. Es ist das grundlegende Prinzip, das Baumann zu thematisieren versucht: das Zusammenwirken von Teilsystemen untereinander, von verschiedenen Wissensformen und bei der Systemgestaltung die Kooperation zwischen Auftraggeber und Auftragnehmer (Baumann 1996, S. 115). Hinsichtlich der Kompetenzentwicklung mit Informatiksystemen ist Baumanns Leistung vor allem in der Nutzung des Begri des Informatiksystems zu sehen, womit er den Vernetzungsaspekt besonders hervorhebt ( !Methodik 9: Vernetzung der Unterrichtsinhalte).4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 49 Der systemanalytische Anfangsunterricht nach Lehmann Der Berliner Lehrer und Informatikfachseminarleiter Lehmann (1993) stellt einen systemanalytischen Einstieg in den Informatikunterricht vor, der sich am damaligen Berliner Informatiklehrplan orientiert, in dem komplexe Systeme im Mittelpunkt des Anfangsunterrichts stehen. Lehmann publiziert in Folge mehrere Unterrichtsbeispiele in der Zeitschrift LOG IN und spricht von der fundamentalen Idee"Arbeiten mit komplexen Systemen" (vgl. Lehmann 1995), die er allerdings nur ober achlich auf die Kriterien nach Schwill pr uft (!Ziel 2: Arbeiten mit komplexen Systemen). Somit kann es nicht als Nachweis angesehen werden, dass es sich um eine fundamentale Idee handelt, zumal einerseits die per Denition geforderte Komplexit at hinsichtlich des Vertikalkriteriums kritisch zu sehen ist, und weil es sich andererseits um einen sehr weit gefassten Bereich handelt, in dem sich viele feingranularere fundamentale Ideen der Informatik nden lassen. Schwerpunkte und Phasen der Konzeption nach Lehmann sind Benutzung (die Sicht von auen), Analyse (der Blick in das System), Wartung des Systems mit kleinen Anpassungen ( Anderung) und Konstruieren eines neuen Systems (Konstruktion) (Lehmann 1993, S. 134), (Lehmann 1995, S. 31). Durch Anfangsunterricht zu komplexen Systemen wird vernetztes Denken gef ordert (!Methodik 9: Vernetzung der Unterrichtsinhalte), denn es werden von Anfang an sowohl groere Zusammenh ange im Softwaresystem als auch mit dessen gesellschaftlichem Kontext thematisiert (vgl. Lehmann 1993, S. 134). Dabei ist jedoch die Kritik anzubringen, dass auch die von ihm beschriebenen komplexen Systeme nur relativ einfache Unterrichtsbeispiele sind. Er selbst hat den Ansatz mehrfach erprobt (Lehmann 1993, S. 135). Den Sch ulern muss das komplexe System kompiliert mit Dokumentation und als Quelltext vorliegen. Die Benutzungsober ache soll klar und der Funktionsumfang begrenzt sein, damit ihre Erkundung hilfreich f ur eine Detailanalyse des Systems ist: "An dem Hauptmen u des Lottosystems erkennen wir die haupts achlichen Funktionen [. . . ]. Damit durfte deutlich geworden sein, da bereits ein Blick auf die Benutzerober ache viel vom Aufbau des Systems verr at und eine nachfolgende Detailanalyse erleichtert" (Lehmann 1995, S. 31). Dabei bezieht sich die Aussage Lehmanns vor allem darauf, dass sich einzelne Funktionalit aten ebenso wie unterschiedliche Men us identizieren lassen, die wiederum intern im System in verschiedenen Module gekapselt sind ( !Methodik 3: Verbindung von Verhalten und Struktur). Fur das zu analysierende komplexe System fordert Lehmann folgende Eigenschaften (Abschnitt 5.6.2): "Klare Benutzerf uhrung, gute Strukturierung mit deutlich erkennbarer Modulhierarchie, relativ begrenzter Funktionsumfang, der sich z. B. in den Men us widerspiegelt, gut verst andliche Dokumentation (kann auch im Programm integriert sein), einige f ur eine Uberarbeitung leicht zug angliche Programmteile" (Lehmann 1993, S. 135). Nach Lehmann bedeutet"verst andiger Computereinsatz" (Lehmann 1995, S. 37) u. a. Auswahl geeigneter Anwenderprogramme, Zielgerichtetheit, Angemessenheit der Eingaben und der Reaktion auf Ausgaben des Rechners, planm aiges Ausw ahlen und Dokumentieren von Ergebnissen sowie ggf. das Konstruieren eines kleinen Programms ( !Ziel 3: Bewusste Anwendung) mit Hilfe passender Bausteine wie Prozeduren, Funktionen oder Datentypen (Lehmann 1993, S. 136). Konkrete Lernziele werden f ur das erste Unterrichtsjahr genannt. Im Bereich Benutzung eines dokumentierten Systems (10 Stunden) sollen die Sch uler ein Programmsystem benutzen, Systemund Programmstruktur erkennen, wieder verwendbare Bausteine nden, mit einem Editor arbeiten und kleine Programm anderungen bzw. Wartungsarbeiten mit Lehrerhilfe durchf uhren konnen. Im Bereich Konstruktion von Teilalgorithmen zu Anwendungsf allen (35 Stunden) sollen sie algorithmische Elemente kennen lernen, Elemente der Programmiersprache erlernen und Bausteine verwenden k onnen. Weitere Inhalte sind Anwendungen und Auswirkungen der Datenverarbeitung (20 Stunden), Rechnerorganisation (10 Stunden) und Entwicklungsgeschichte der50 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Datenverarbeitung (5 Stunden). Im zweiten Unterrichtsjahr stehen u. a. die Konstruktion eines Programmsystems zur Dateiverwaltung und Anwendung eines relationalen Datenbanksystems an. Im dritten Jahr ist die weitgehend selbst andige Konstruktion eines komplexen Systems im Lehrplan vorgesehen (Lehmann 1995, S. 32). Grunde daf ur, dass diese Erfolg versprechende Top-down-Vorgehensweise von der Anwendung zur Maschine (!Methodik 7: Von der Anwendung zur Maschine) kaum Verbreitung fand, liegen vermutlich darin, dass unterschiedliche Vorkenntnisse der Sch uler ungen ugend ber ucksichtigt werden und sie erheblichen Vorbereitungsaufwand der Lehrpersonen erfordert. Denn der Ansatz bedarf eines geeigneten Softwaresystems und wieder verwendbarer Programmbausteine, die Blick auf und in das System in Einklang bringen sowie Wartung und Konstruktion vereinfachen. Dar uber hinaus ist die Vorgehensweise oenbar nur von Lehmann erprobt worden, so dass die Abh angigkeit von der Lehrperson nicht ausreichend analysiert wurde. F ur ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung, das auf Softwareentwicklung in weiten Teilen verzichtet, bietet der systemanalytische Ansatz ( !Methodik 4: Analyse des Systems { Experimente) mit Einbeziehung des Modizierens ( !Methodik 6: Modikation statt Entwicklung), Ver anderns und systematischen Testens vorhandener Informatiksysteme jedoch wichtige Anregungen. Foegens systemorientierte Didaktik Foegen entwickelt 1996 im Rahmen einer Diplomarbeit ein Konzept f ur eine systemorientierte Didaktik der Informatik, die das Gestalten sozio-technischer Systeme zum Leitbild hat. Als Grundlage seiner Konzeption nutzt er die allgemeine Systemtheorie, f ur die er die Erf ullung der Kriterien f ur fundamentale Ideen der Informatik nach Schwill nachweist. Kritik an dem Nachweis ist jedoch dahingehend zu uben, als dass einer Universaltheorie wie der Systemtheorie das Informatikspezische fehlt. Ebenso k onnte die Systemtheorie in einem Fach wie der Biologie Grundlage f ur die Betrachtung biologischer Systeme sein oder in einem anderen Fach hinsichtlich sozialer Systeme. An den Anfang setzt Foegen das Modul"Grundlagen des Verstehens und Gestaltens von Systemen", betont aber insbesondere soziale und die in ihnen eingebetteten technischen Systeme, explizit schliet er reine Softwaresysteme aus (Foegen 1996, S. 38). Er betont dabei die wichtige Rolle von Strukturierungsmustern in Systemen, die z. B. Softwaremuster sein konnen (Gamma et al. 1995) oder in sozialen Systemen Handlungsmuster und Rollenverhalten. Nacheinander werden anschlieend die Module"Systeme als Dienstleister","Auftraggeber und Auftragnehmer","Informationen strukturieren","Akteure","Wissen und seine Grenzen","Kommunikation","Rechner als Ausf uhrungsorgane" sowie"Gestalten von Systemen" abgearbeitet. Letzteres verl auft in Teilen parallel zur ansonsten sequentiellen Gliederung. In dem vorletzten Modul"Rechner als Ausf uhrungsorgane" betrachtet Foegen Rechner als Systeme aus Hardund Software und thematisiert Betriebssystem, Ubersetzer, Schaltwerke und deren Zusammenhang zu Automatentheorie und Robotik ( !Inhalt 3: Fundamentale Ideen): "Im Mittelpunkt dieses Kapitels steht die Frage, wie ein Rechner und seine Teile als dienstleistende Systeme aufgefat werden k onnen und wie diese zusammenarbeiten. Dabei wird absteigend vorgegangen, indem zun achst jedes Teil (-System) von auen betrachtet und seine Funktion analysiert und danach zur Innenansicht ubergegangen wird" (Foegen 1996, S. 76). Diese Vorgehensweise eignet sich ebenfalls f ur Kompetenzentwicklung mit Informatiksystemen (!Methodik 7: Von der Anwendung zur Maschine). Zusammenfassend ist zu sagen, dass der systemorientierte Ansatz von Foegen sowohl bei der Betonung der allgemeinen Systemtheorie als auch bei dem f ur alle Ingenieurwissenschaften geltenden Gestalten sozio-technischer Systeme nicht deutlich macht, warum daf ur gerade der Informatikunterricht zust andig ist. Darauf aufbauend kommt Foegen dennoch zu Schlussfolgerungen, die f ur Kompetenzentwicklung mit Informatiksystemen hilfreich sind. So betont er Funktion, Verhalten und Zweck eines Systems ebenso wie die Wichtigkeit von Strukturierungsmustern ( !Inhalt 2: Strukturmodelle; Abschnitt 5.4). Daruber hinaus gliedert er den Informatikunterricht von einfachen zu komplexen Systemen und4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 51 betont sowohl passive als auch aktive Systeme, deren Akteure Erkenntnisse der K unstlichen Intelligenz nutzen (vgl. Brauer und Brauer 1995). Kompetenzentwicklung mit Informatiksystemen im informationszentrierten Ansatz Hubwieser und Broy stellen 1997 den informationszentrierten Ansatz f ur den Informatikunterricht an Gymnasien vor. Zur Legitimation des Unterrichts wird in der Informationszentrierung das Grundschema der Informationsverarbeitung mit Repr asentation, Verarbeitung, Transport und Interpretation von Information in Anlehnung an das EVA-Prinzip (Eingabe-VerarbeitungAusgabe) herangezogen. Sie stellen fest, dass Informationsund Kommunikationssysteme im Unterricht unterschiedliche Rollen erf ullen: Unterst utzung von Lernvorg angen, Schulung von Bedienerfertigkeiten und Unterst utzung der Aneignung langlebiger Informatikgrundlagen (Hubwieser und Broy 1997a, S. 40f), (Hubwieser 2007a, S. 43f). Nach Hubwieser und Broy ist es der letztgenannte Aspekt, der den Informatikunterricht im eigentlichen Sinne ausmacht, d. h. dass im Unterricht Konzepte und Methoden zur Planung, Konstruktion, Beschreibung und Bewertung abstrakter Systeme thematisiert werden. Begriich werden die Informationsund Kommunikationssysteme darauf aufbauend von Hubwieser allgemein als Informatiksysteme bezeichnet. Diese gliedern sich in das Grundschema der Informationsverarbeitung ein, so dass ihre Wirkungsweise in drei Bereiche eingeteilt werden kann: "automatische Verarbeitung, Vernetzung (Transport von Repr asentation, r aumliche Verteilung von Verarbeitung oder Reprasentationen) und Interaktion (Repr asentation und Interpretation)" (Hubwieser 2007a, S. 80). Hubwieser sieht dieses Grundschema ( !Ziel 1: Aufbau, Vernetzung und Funktionsweise) als Abstraktion vorheriger fachdidaktischer Ans atze, die auf Informatiksysteme abzielen, wie die Leitlinien von Friedrich (1995a) zu Umgang mit Information, Wirkprinzipien von Informatiksystemen, Probleml osen mit Informatiksystemen und Arbeiten mit Modellen (Hubwieser 2007a, S. 82). Um m ogliche Unterrichtsinhalte zu identizieren, werden die Phasen des Grundschemas sowie die Wechselwirkungen von Informatiksystemen mit ihrer Umgebung untersucht, woraus nach Hubwieser jedoch nur eine Inhaltsauistung ohne Kategorisierung entsteht (Hubwieser 2007a, S. 81). Die Darstellung von Information erfordert beispielsweise die Aufteilung eines Systems in Subsysteme, die Betrachtung von Daten ussen zwischen Subsystemen und zur Umwelt sowie Modelle von Informatiksystemen inklusive zeitlicher Abl aufe. Bei der automatischen Verarbeitung von Informationsrepr asentationen sind Anwendungsm oglichkeiten von Systemen zu betrachten sowie die zeitliche und r aumliche Struktur von Informatiksystemen mit Komponenten, Verteilung, Kooperation und Abl aufen. Hinsichtlich der Interaktion sind M oglichkeiten zum Schutz vor unerlaubten oder unerw unschten Interpretationen mittels Datenschutz, Zugrisrechten und Verschl usselung zu betrachten. Es ist auf Fehlinterpretationen durch Manipulationsmoglichkeiten und Darstellungsfehler einzugehen. Zur Vorbereitung der Sch uler auf zuk unftige Lebenssituationen zieht Hubwieser auch m ogliche Rollen des Menschen gegen uber Informatiksystemen heran. Aus den Rollen wiederum lassen sich Anforderungssituationen zur Formulierung von Basiskompetenzen zu Informatiksystemen herleiten ( !Inhalt 4: Sichten). Diese sind: Entscheider in Firmen zu Kauf oder Eigenentwicklung von Informatiksystemen, Planer im Sinne von Projektleitern bei der Entwicklung eines Systems, Entwickler, Administratoren, direkte und indirekte Nutzer sowie Betroene, deren Arbeitspl atze sich durch Informatiksysteme stark andern (Hubwieser 2007a, S. 63). Dabei betont Hubwieser, dass f ur professionelle Benutzer, Administratoren und Entwickler von Informatiksystemen Ausund Weiterbildungsangebote sowohl als Produktschulungen als auch im Sinne einer fundierten Informatikausbildung vorhanden sind, alle anderen aber durch Schule52 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung auf ihre Aufgaben vorbereitet werden m ussten (Hubwieser 2007a, S. 62). Aus Hubwiesers Forderung ergibt sich in der Konsequenz, dass Informatikunterricht darauf vorbereiten muss, Kaufentscheidungen aufgrund informatischer Bildung zu treen, nichtprofessionellen Anwendern eine bewusste Nutzung von Informatiksystemen zu erm oglichen und Betroene in die Lage zu versetzen, Ver anderungen nachvollziehen und mitgehen zu k onnen. F ur Kompetenzentwicklung mit Informatiksystemen kann Hubwiesers Forderung dahingehend pr azisiert werden, dass auch Produktschulungen eines Grundverst andnisses f ur Informatiksysteme bed urfen, um nachhaltig zu sein. Ebenso ben otigen Planer, die Anforderungen an Informatiksysteme erstellen, Kenntnisse zu M oglichkeiten und Grenzen von Informatiksystemen. Eine konkrete Ableitung von Unterrichtsinhalten, Lehr-Lernmethodik und Lernmedien aus den jeweiligen Rollen nimmt Hubwieser nicht vor. Zur Auswahl der Unterrichtsinhalte im informationszentrierten Ansatz begr unden Hubwieser und Broy eine Klassizierung nach Anwendungsbreite: In Klasse 1 fallen Unterrichtsinhalte der Informatik, die auch auerhalb von elektronischen Rechenanlagen Anwendung nden. Klasse 2 beinhaltet Konzepte, die charakteristisch f ur alle elektronischen Informationsund Kommunikationssysteme sind. In Klasse 3 benden sich Konzepte, die nur f ur eine Systemklasse charakteristisch sind. Klasse 4 umfasst Konzepte, die nur spezielle Subsysteme betreen (Hubwieser und Broy 1997a, S. 44). Nur Themen der Klassen 1 und 2 sind laut Hubwieser uneingeschr ankt f ur den Informatikunterricht geeignet. Themen der Klasse 3 sind nur f ur wichtige Systemklassen, Inhalte der Klasse 4 allenfalls als Grundlage f ur das Verst andnis von Themen der niedrigeren Klassen verwendungsf ahig (!Methodik 7: Von der Anwendung zur Maschine). Die Klassikation wird fur das Unterrichtsmodell aufgegrien (Abschnitt 5.3). Auerdem zieht Hubwieser die drei Masterideen Algorithmisierung, Sprache und strukturierte Zerlegung nach Schwill heran und stellt heraus, dass sie"ungef ahr" den Bereichen Verarbeitung, Darstellung und Verteilung von Information entsprechen (Hubwieser 2007a, S. 83). Zur konkreten Auswahl von Unterrichtsinhalten werden die Kriterien Lebensdauer und Vermittelbarkeit in Anlehnung an die Kriterien f ur fundamentale Ideen formuliert und um das Exemplarische erganzt. Davon ausgehend wird die Modellierung als inhaltlicher Kern der Informationszentrierung deniert. In dem durch die vorliegende Arbeit angestrebten Unterrichtsmodell soll jedoch Kompetenzentwicklung mit Informatiksystemen den inhaltlichen Kern bilden. Fragen der Modellierung von Aspekten wie der Zerlegung eines Systems in Subsysteme, zur Darstellung der Kommunikation der Subsysteme und zur Beschreibung der inneren Struktur informationsverarbeitender Subsysteme, die Hubwieser und Broy aufwerfen, sind dessen ungeachtet wichtig bezuglich der inneren Struktur und des Verhaltens von Informatiksystemen (Hubwieser und Broy 1997a, S. 44): "Am Anfang [der Systembeschreibung; Anm. d. V.] steht eine Partition des zu behandelnden Systems in Subsysteme (Objekte), deren innere Struktur (Attribute), Verhalten (Operationen) und hierarchische Klassizierung (Klassen und Vererbungsbeziehungen, Instanzen) dann zu beschreiben sind. Zus atzlich mu das Verhalten des Gesamtsystems von auen gesehen und die Kommunikation zwischen den einzelnen Objekten (Assoziationen) bestimmt werden." (Hubwieser und Broy 1997b, S. 44) Damit sind nach auen sichtbares Verhalten und innere Struktur als Charakteristika von Informatiksystemen direkt angesprochen und m ussen miteinander in Beziehung gesetzt werden (!Methodik 3: Verbindung von Verhalten und Struktur): "Das Verhalten des Gesamtsystems entsteht aus dem Zusammenspiel seiner Objekte, die durch Beziehungen verbunden sind und gegenseitig ihre Methoden durch Botschaften aktivieren" (Hubwieser 2007a, S. 95). So wird betont, dass in Informationsrepr asentationen aller Informationsund Kommunikationssysteme abstrakte Datentypen als gemeinsame Grundstrukturen auftauchen, die als Bausteine komplexerer Strukturen genutzt werden k onnen. Als Beschreibungstechniken fordern Hubwieser4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 53 und Broy einpr agsame grasche Notationen und nennen neben statischen Modellen auch Objektund Zustands ubergangsdiagramme, Sequenzdiagramme, Datenussmodelle und Aktionsgraphen (!Inhalt 2: Strukturmodelle), also funktionale bzw. Verhaltensmodelle zur Darstellung von Kommunikation der Subsysteme (Hubwieser und Broy 1997a, S. 46). Hubwieser nennt, Bezug nehmend auf Winograd und Flores (1988), drei Kriterien f ur Software, die Ansatz f ur eine wirksame Bedienerschulung im Sinne einer informatischen Bildung sein konnen und damit f ur Kompetenzentwicklung mit Informatiksystemen interessant sind: (1) Zuhanden sein zur L osung tats achlicher Probleme sowie (2) Bewusstsein von Blindheit der Software gegen uber Problemen auerhalb ihres Einsatzbereichs, f ur den sie modelliert wurde. Dazu kommt (3) die Vorwegnahme von Pannen: "Ebenso [. . . ] sollten auch bei der Bedienerschulung m oglichst viele F alle von Fehlfunktionen angesprochen werden. Damit wird die Umgebung der Systeme ebenso wie ihre innere Struktur durchleuchtet. Dem Nutzer werden die Grenzen ihrer Anwendbarkeit und ihre Leistungsf ahigkeit klar (Hubwieser 2007a, S. 47). Fur Kompetenzentwicklung mit Informatiksystemen folgt daraus, dass gerade Fehler die Kombination der Sichten des nach auen sichtbaren Verhaltens und der inneren Struktur erfordern (!Methodik 3: Verbindung von Verhalten und Struktur). 1999 beschreibt Hubwieser ein pragmatisches Gesamtkonzept f ur das Gymnasium beginnend in Jahrgangsstufe 6 zur Vorbereitung informatischer Denkweisen. Die Funktionsweise von Rechenanlagen soll beispielsweise in Blockschaltbildern veranschaulicht werden (Hubwieser 2007a, S. 101). Er betont, dass es f ur Sch uler erst ab diesem Alter aufgrund der Abstraktionsf ahigkeit m oglich ist, uber das konkret verwendete Informatiksystem hinaus gehend Grundprinzipien zu verstehen (Hubwieser 2007a, S. 100f). Wahlmodule in den Jahrgangsstufen 7-9 (Hubwieser 1999, S. 171) erm oglichen die spielerische Besch aftigung mit Informatik. F ur Kompetenzentwicklung mit Informatiksystemen bietet darin der Bereich Kommunikation in Rechnernetzen mit Diensten sowie Informationssuche im Internet Ansatzpunkte. Gleiches gilt f ur den Bereich der Konzeption von Rechenanlagen, in dem Aufbau und Funktionsweise von Rechnern und Netzen sowie Konzeption und Planung von lokalen Netzwerken mit Zugrisund Sicherungsstrategien thematisiert werden (Hubwieser 2007a, S. 103). In den Allgemeinbildungsmodulen der Jahrgangsstufen 10-11 werden neben Grundlagen zu Datenbanksystemen auch das Client-Server-Prinzip und Datenussdiagramme von Rechenanlagen angefertigt. Ein Automatenmodell des Von-Neumann-Rechners kann Variablen und Verarbeitungsvorschriften durch Zust ande von Speicherzellen thematisieren (Hubwieser 2007a, S. 105). In der Oberstufe sind neben der Softwareentwicklung Vertiefungen zu Maschinenmodellen aus der Theoretischen Informatik ( !Inhalt 2: Strukturmodelle) sowie Fragen der Parallelverarbeitung m ogliche Themen (Hubwieser 2007a, S. 106f). Durch Unterrichtsbesuche im Rahmen eines Schulversuchs wird das Erreichen des Bildungsziels, d. h. die Unterst utzung einer fachgerechten Sicht auf Informatiksysteme durch objektorientiertes Modellieren (OOM), best atigt. In der externen Evaluation des Ansatzes wurden Unterrichtsbeobachtungen und auswertende Gespr ache mit den Fachlehrern an Gymnasien durchgef uhrt: "Die Evaluationsfrage lautete: Bildet das Konzept der objektorientierten Modellierung im konkreten Vermittlungszusammenhang f ur die Lernenden eine brauchbare Metapher, die ihnen hilft, Neues mit Bekanntem so zu verbinden, dass eine fachgerechte Sicht auf Informatiksysteme im Unterricht erkennbar wird? [. . . ] Die Fachsprache des objektorientierten Modellierens wurde konsequent angewendet. Sie f orderte bei den Sch ulerinnen und Sch ulern die Einsicht in die wesentlichen Prinzipien der Informatik" (Hubwieser et al. 2001, S. 213f). Viele der aktuellen Bayerischen Schulb ucher f ur die Sekundarstufe I sind der Informationszentrierung nach Hubwieser zuzurechnen. Dementsprechend wird z. B. bei den Themen Standardsoftware sowie Ordnerund Hypertextstrukturen in einem ersten Analyseschritt der Sch uler eine objektorientierte Darstellung der Sachverhalte vorbereitet, z. B. Baumdarstellung der Ordner. Anschlieend werden die Darstellungen in ein objektorientiertes Modell uberf uhrt (vgl. Frey (2003),54 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Breier und Hubwieser (2002), Vo (2006); Abschnitt 4.2.4). Systemanalyse und die Vorwegnahme von Pannen sind f ur Kompetenzentwicklung mit Informatiksystemen sehr viel versprechende Ansatze. Die positive Beantwortung obiger Evaluationsfrage liefert eine Begr undung f ur die Integration von OOM in das Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung. Bei der Fehlervorwegnahme sollte jedoch die im informationszentrierten Ansatz kaum explizit benannte Hypothesenbildung der Sch uler st arker im Vordergrund stehen, um Versuch-IrrtumStrategien in unbekannten Situationen zu vermeiden ( !Methodik 4: Analyse des Systems { Experimente). Dekonstruktion von Informatiksystemen als fachdidaktischer Ansatz Auf der INFOS 1999 (Schwill 1999) stellen Magenheim, Schulte und Hampel den didaktischen Ansatz der Dekonstruktion von Informatiksystemen vor (Hampel et al. 1999). Sie betonen insbesondere sozio-technische Aspekte von Informatiksystemen (! Inhalt 4: Sichten): "Informatiksysteme beinhalten softund hardwaretechnische Komponenten, die ihrerseits fundamentale Methoden und Ideen der Informatik und zugleich in digitaler Form materialisierte Modelle eines Realit atsauschnitts repr asentieren. Diese Modelle werden in Modellierungsprozessen entwickelt und bilden ein wesentliches Element der Systemgestaltung [. . . ]. Die soziale Interaktion im Kontext eines existierenden oder zu konstruierenden technischen Informatiksystems erweitert dieses zu einem sozio-technischen System" (Hampel et al. 1999, S. 152). Die Schwerpunktverlagerung auf die Interaktion wird u. a. mit Wegners Uberlegungen"Why Interaction Is More Powerful Than Algorithms" begr undet (Wegner 1997). Wegner weist darauf hin, dass Algorithmen als formalisierbare Dimension von Informatiksystemen nicht ausreichen, um Prozesse in Rechnern, parallele Prozesse oder verteilte Systeme in ihrer ganzen Komplexit at zu erfassen. Menschen und Maschinen machen Eingaben in Informatiksysteme und beeinussen damit die Systemzust ande und den auf Protokollen basierenden Datenaustausch. Das Systemverhalten ist damit im Detail kaum noch deterministisch nachvollziehbar. Dekonstruktion ist urspr unglich eine Vorgehensweise zur Beurteilung von Texten. Der informatikdidaktische Ansatz der Dekonstruktion von Informatiksystemen basiert auf der Verschmelzung von Analyse und (Re-) Konstruktion bestehender, hinreichend komplexer Systemen durch Sch uler. Im Unterricht wurde bisher nur die objektorientierte Modellierung f ur die Dekonstruktion eingesetzt. Die Sch uler sollen Einsicht in wichtige Methoden der Gestaltung und Bewertung von Informatiksystemen bekommen. Programmierung steht somit nicht mehr im Mittelpunkt eines Konstruktionsprozesses, sondern am Ende eines Modellierungs-, Formalisierungsund Abstraktionsprozesses bei der Analyse eines speziellen Softwaresystems: "Dekonstruktion ist [. . . ] mehr als Lesen von Quellcode einer Software, zum Zwecke des Erlernens der Syntax einer Programmiersprache anhand eines Beispiels. Modellannahmen und Entwurfsund Designentscheidungen k onnen hypothetisch extrahiert, nicht aber eindeutig belegt werden. Damit werden aber Spielr aume f ur Gestaltungsalternativen oengelegt" ((Magenheim 2001, S. 6) zitiert nach (Engbring 2004, S. 181)). Die von Magenheim genannten Hypothesen zu den getroenen Entwurfsund Designentscheidungen sind Grundlage der Dekonstruktion und fordern von den Sch ulern ein Verst andnis f ur den Aufbau des Informatiksystems. Gleichzeitig sind die Entwurfsentscheidungen nicht mehr eindeutig zur uck zu verfolgen und mindern den Erfolg des didaktischen Ansatzes der Dekonstruktion. Schulte und Block (2002) geben sieben Schritte zur Dekonstruktion eines Informatiksystems an: In der ersten Phase, der Analyse der Software, werden die Perspektiven des Anwenders (1), Designers (2) und Testers (3) auf die Software genutzt. In der n achsten Phase, der Erweiterung als Synthese (4), soll mit diesem Wissen das System erweitert, ver andert oder das neue Wissen auf ein unbekanntes sozio-technisches Informatiksystem transferiert werden. Zuletzt werden w ahrend einer Bewertung und Reexion die Fehlerfreiheit (5), Wartbarkeit (6) und Brauchbarkeit4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 55 (7) durch die Lernenden betrachtet. Aus den Rollen wiederum lassen sich Anforderungssituationen zur Formulierung von Basiskompetenzen zu Informatiksystemen herleiten. Dar uber hinaus fallt auf, dass die drei Perspektiven Anwender, Designer und Tester fast deckungsgleich zu den Untersuchungsebenen von Informatiksystemen sind: nach auen sichtbares Verhalten (Anwender) und innere Struktur (Designer). Der Tester verbindet die Sicht auf das Verhalten und auf Implementierungsdetails ( !Inhalt 4: Sichten; !Methodik 7: Von der Anwendung zur Maschine). Beim ersten Schritt des Schemas wird die Anwenderperspektive eingenommen, um durch entdecken und erkunden Anwendungsf alle herauszuarbeiten. Dar uber hinaus sollen die Sch uler "versuchen, anhand dieses Erkundungsvorgangs auf die verwendeten Fachklassen und deren Beziehungen zu schlieen (dies geht allerdings uber die Anwender-Perspektive hinaus und ragt in die Designer-Perspektive hinein)" (Schulte und Block 2002, S. 7). Das Zitat macht deutlich, dass die Fixierung auf die drei Perspektiven hinderlich sein kann, da durch die Personizierung Uberschneidungen der Perspektiven vorkommen. In der vorliegenden Arbeit wird speziell Kompetenzentwicklung mit Informatiksystemen f ur Anwender angestrebt, die auch ein Grundverst andnis von Entw urfen und Systemtests haben m ussen, aber weit von der Perspektive eines Designers oder Testers entfernt sind. Daher wird im Folgenden weiterhin die Unterteilung nach innerer Struktur, nach auen sichtbarem Verhalten und ausgew ahlten Implementierungsaspekten beibehalten, um keine Missverst andnisse hinsichtlich der Zielgruppe zu unterst utzen. Dennoch sind Rollen von Menschen gegen uber Informatiksystemen (vgl. auch Hubwieser 2007a) hinsichtlich ihrer notwendigen Kenntnisse in Beziehung zu setzen, z. B. konnen sie anhand ihrer Hauptt atigkeiten den Ebenen des Informatikturms nach Nievergelt zugeordnet werden (siehe Seite 31). Insgesamt lassen sich aus den Rollen Anforderungssituationen ableiten, die zur Kompetenzbeschreibung beitragen k onnen. Zus atzlich ist f ur die Rollen der Anwendungskontext n aher zu bestimmen (Abschnitt 5.3). Zentral f ur die Dekonstruktion ist die Produkt-Prozess-Relation, also die Verbindung des soziotechnischen Informatiksystems mit dem dazugeh origen Entwicklungsprozess, der von den Lernenden in der Dekonstruktion nachvollzogen und in Teilen umgesetzt wird (Magenheim und Schulte 2006). Die von Magenheim und Schulte betonte Produkt-Softwareentwicklungsprozess-Relation hingegen entspricht nicht den in der vorliegenden Arbeit angestrebten Basiskompetenzen zu Informatiksystemen. Vielmehr bietet es sich an, eine Produkt-Anwendungsprozess-Relation zu postulieren, die f ur Kompetenzentwicklung mit Informatiksystemen anzustreben ist, um den f ur Kompetenzbeschreibungen geforderten Anforderungssituationen gerecht zu werden ( !Methodik 3: Verbindung von Verhalten und Struktur). Sie schlagen des Weiteren didaktische Linsen im Sinne von Sichten auf Informatiksysteme vor, die technische und soziale Aspekte kombinieren (! Inhalt 4: Sichten): Automatisierung (Automation), Interaktion (Interaction), Informationsverarbeitung (Information processing), Vernetzung (Networking), Normen und Recht (Norms, regulation and law), Gesellschaft und Ethik (Societal and ethical aspects) (Magenheim und Schulte 2006, S. 328). Daf ur berufen sie sich u. a. auf Denning (2003), aber es wird eine deutliche Schwerpunktverlagerung auf sozio-technische Aspekte vorgenommen. In der vorliegenden Arbeit k onnen die didaktischen Linsen als sinnvolle Erganzung der fachlich bestimmten Hauptfunktionen nach Denning (2007) verwendet werden. Die Auswirkungen des Einsatzes von konkreten Informatiksystemen auf die Gesellschaft werden in der vorliegenden Arbeit in Abschnitt 5.5 im Rahmen einer systematischen Erkundung des Systemverhaltens aufgegrien. Zur Analyse eines sozio-technischen Informatiksystems ist sein Kontext relevant und neben Abstraktion, Reduktion und Formalisierung wird insbesondere die Dekontextualisierung im didaktischen Ansatz der Dekonstruktion betont: "Contextualising learning with application areas supports claims from situated learning and cognitive exibility" (Magenheim und Schulte 2006, S. 325).56 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Magenheim und Schulte fordern, typische Anwendungen zur Kontextualisierung zu nutzen. Ubertragen auf Informatiksysteme und Kompetenzentwicklung k onnen die Anwendungen genutzt werden, um Anforderungssituationen zu beschreiben. Tabelle 4.1 zeigt die zeitabh angige Auswahl. Kriterien f ur das Ausschlieen anderer Bereiche werden nicht genannt. Der Einsatz von Class-Responsibility-Collaborator-Karten (CRC-Karten) und die Pr ufung von Anwendungsf allen im Rollenspiel werden als Lehr-Lernmethoden vorgeschlagen ( !Methodik 2: Kognitive Modelle). Ubertragen auf Informatiksysteme und Kompetenzentwicklung sind Rollenspiele zu Anwendungsf allen eines M oglichkeit, das Systemverhalten systematisch zu analysieren (!Methodik 7: Von der Anwendung zur Maschine). F ur Kompetenzentwicklung mit Informatiksystemen folgt daraus, dass sich aktives Verhalten von Systemkomponenten oder gekapselten Subsystemen durch Interaktion von Lernenden gut nachempnden l asst. Ahnlich wie bei der Objektorientierung hat jede Systemkomponente Verhalten und Zustand. Statische Modelle von Informatiksystemen geben die teilnehmenden Rollen bzw. Personen an, und dynamische Modelle wie Anwendungsf alle oder Sequenzdiagramme liefern das Drehbuch des Rollenspiels. Insbesondere Prozessbeziehungen eignen sich f ur Rollenspiele (Schubert und Schwill 2004, S. 272). Dar uber hinaus eignen sich Rollenspiele zur Simulation von Gespr achen zwischen Kunden und Entwicklern. Zur Gestaltung von Unterricht zu sozio-technischen Informatiksystemen beschreiben Magenheim und Schulte einen fachdidaktischen Rahmen (Tabelle 4.1) und gestalten Beispiele zur Computerspielentwicklung und Wikis im Informatikunterricht. Vorteil, aber auch Schwierigkeit des Ansatzes ist, dass er allzu umfassend ist. Begriich f allt eine Problematik auf: Dekonstruktion wird einerseits als Unterrichtsmethode aufgef uhrt (vgl. Hampel et al. 1999), sie wird aber auch als umfassende Vorgehensweise gesehen, die Konstruktion umfasst und andere Methoden wie Rollenspiele nutzt (vgl. Schulte und Block 2002). Die eingesetzten Medien dienen u. a. der Visualisierung (!Medien 1: Visualisierung verborgener Prozesse). Tabelle 4.1: Informatiksysteme im Unterricht nach (Magenheim und Schulte 2006, S. 332) Was? Wie? Anwendungsgebiet Didaktische Linsen Medien Methoden Produktion Automatisierung Videos Rollenspiele Logistik Interaktion Software Konikte identizieren Bildung Informationsverarbeitung Visualisierungen Analysieren Gesundheitswesen Vernetzung Dokumentation Dekonstruktion Unterhaltung Normen Quelltext Konstruktion Forschung Gesellschaftliche Fragen . . . . . . Milit ar E-Demokratie Eine Gegen uberstellung von Informationszentrierung nach Hubwieser und Dekonstruktion nach Magenheim nimmt Engbring (2004) vor. Er stellt fest, dass der Kontext in der Dekonstruktionuberbetont wird. Engbring fordert eine st arkere Unterscheidung zwischen technischer und nichttechnischer Ebene, um nicht politische oder sozialwissenschaftliche Bildung zu betreiben und durch die klare Trennung ggf. Kooperationen mit anderen F achern zu erm oglichen, die der Aufgabenteilung bedarf (Engbring 2004, S. 195). Der Bildungserfolg durch die Umsetzung der Dekonstruktion ist abh angig von der Verf ugbarkeit angemessen komplexer sozio-technischer Informatiksysteme als Gegenstand. Schwierigkeit ist in verst arktem Mae die schon der Objektorientierung zugesprochene Diskrepanz zwischen komplexen, sinnvoll erweiterbaren Systemen einerseits und einem f ur Sch uler angemessenen Komplexit atsgrad andererseits. Dies impliziert nach Magenheim, dass professionelle Entwicklungsumgebungen im Sinne von"Cognitive Tools"4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 57 weit reichende Ber ucksichtigung erfahren (Magenheim 2003). Die Arbeit mit Cognitive Tools bezeichnet in der Schule den Einsatz von (Standard-) Software, die weitgehend nicht an Fachinhalte gebunden und deshalb an spezielle Problemstellungen zur Wissensverarbeitung und -weitergabe anzupassen ist (vgl. Eberle 1996). Dazu kommt f ur die Lehrperson ein nicht zu vernachl assigender Aufwand bei der Gestaltung eines geeigneten Informatiksystems, das dekonstruiert wird. Technische Aspekte als wesentlicher Teil der Wirkprinzipien von Informatiksystemen werden bei der Dekonstruktion nicht betrachtet (Humbert 2003, S. 69). So wird zwar bei Informatiksystemen die Einheit aus Hardund Software betont, aber beispielsweise werden bei der Beschreibung der Produkt-Prozess-Relation nur bei der Sicht auf das Produkt kurz Sensoren und Aktoren als physikalische Komponenten genannt, ohne daraus Konsequenzen zu ziehen (Magenheim und Schulte 2006, S. 322f). Im Entwicklungsprozess werden ausschlielich Fragestellungen der Softwareentwicklung betrachtet. Die de facto Einschr ankung der Dekonstruktion auf objektorientierte Softwareentwicklung zeigt die Forschungsl ucke, dass auch eine strukturierte Beschreibung der technischen Aspekte des Von-Neumann-Rechners ebenso wie Netzverbindungen zu thematisieren ist (!Inhalt 2: Strukturmodelle). Mit den Ans atzen der Informationszentrierung und der Dekonstruktion werden auf informatischer Modellierung beruhende Alternativen f ur die im Informatikunterricht vorherrschende Implementierung vorgeschlagen. Daf ur wird die Verkn upfung von informatischem Modellieren mit der Analyse existierender Informatiksysteme vorgenommen. Die Dekonstruktion strebt dabei das Ziel an, anhand des vollst andigen Informatiksystems mittels Hypothesenbildung und -prufung Entwurfsentscheidungen nachzuvollziehen. Der bislang ausbleibende Erfolg des ambitionierten didaktischen Ansatzes ist sicherlich in erster Linie darauf zur uckzuf uhren, dass aus dem Produkt nicht mehr eindeutig R uckschl usse auf Entwurfsentscheidungen gezogen werden konnen: Es lassen sich viele Alternativl osungen nden. Arbeiten wie die von Schulte (2004) und Ullenboom (2005) liefern mittlerweile didaktisch vorbereitete Materialen f ur den Einsatz im Informatikunterricht. F ur Informatiksysteme und Kompetenzentwicklung bietet der Ansatz der Dekonstruktion besonders hinsichtlich der Produktebene, der Anwendungsbereiche sowie Hypothesenbildung und -pr ufung Potential (!Methodik 4: Analyse des Systems { Experimente). In einer Diplomarbeit erstellt Ullenboom eine Software"Media Player", die Entwurfsmuster nach Gamma et al. (1995) f ur die Ausbildung aufgreift. Zielgruppe sind Sch uler eines Leistungskurses Informatik in der Sekundarstufe II und Studierende der Informatik (Ullenboom 2005, S. 21). Kritisch zu sehen ist die Vermengung von Sch ulern und Studierenden als Zielgruppe. Lernende sollen in der Dekonstruktionsphase uber den Quellcode, die UML-Diagramme und Dokumentation des"Application Programming Interface" (API) die Entwurfsmuster entdecken. Anschlieend wird eine L osung erarbeitet, mit der Umsetzung in der Software verglichen und reektiert. Eine empirische Uberpr ufung der Software in der Lehre fand nicht statt (Ullenboom 2005, S. 94). Die Entwicklung von Unterrichtsmaterialien zu Entwurfsmustern konkretisiert den Ansatz der Dekonstruktion. Durch die Zielgruppe des Leistungskurses Informatik, die starke Pr agung durch die Hochschulinformatik und fehlende empirische Erprobung bleibt er jedoch f ur Schule als ambitioniert zu bezeichnen. Schulte (2008) nutzt die didaktischen Linsen in Verbindung mit einer Gegen uberstellung von Funktion und Struktur zur Analyse und Rekonstruktion von Software. Am Beispiel der Textverarbeitung skizziert er die Rekonstruktion der Dualit at von Struktur und Funktion durch ein spiralf ormiges Anwenden aller didaktischen Linsen. Diese Dualit at ist konform zur Schwerpunktsetzung auf dem nach auen sichtbaren Verhalten und der inneren Struktur von Informatiksystemen, die der Autor in seinem Unterrichtsmodell (Kapitel 5; (Stechert 2007c)) erprobt und daraufhin verfeinert hat (Kapitel 7; (Stechert und Schubert 2007)).58 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Kompetenzentwicklung mit Informatiksystemen im ideenorientierten Informatikunterricht Nach Schubert und Schwill hat das Bildungziel der Entmystizierung von Rechnern nicht an Aktualit at eingeb usst (Schubert und Schwill 2004, S. 253). Der relativ neue Terminus Informatiksystem bringt ihrer Meinung nach jedoch mehr Klarheit bez uglich dessen, was die informatische Bildung leisten muss, als die Begrie Rechner oder Computer: "Es geht nicht um das Inbetriebnehmen von Ger aten, wie Fernseher oder das Programmieren von Geraten wie DVD-Player oder das Steuern von Maschinen wie Autos. Es geht um die Organisation der eigenen geistigen T atigkeiten, die Sch uler erlernen m ussen" (Schubert und Schwill 2004, S. 253). Damit entkr aften Sie Argumente zur prinzipiellen Unbeherrschbarkeit von Informatiksystemen wie Brunnstein sie vorbringt hinsichtlich ihrer Konsequenzen f ur die Schulinformatik (Abschnitt 4.2.4). Schubert und Schwill beziehen sich auf die Denition des Informatikdudens (Claus und Schwill 2006, S. 314) und betonen, dass Informatiksysteme aus Schichten bestehen, die alles Geheimnisvolle ausschlieen (Schubert und Schwill 2004, S. 254). Fehler jedoch, die darauf zuruckzuf uhren sind, dass eine Anwendungssituation bei der Entwicklung des Informatiksystems nicht einkalkuliert wurde, verleihen dem Informatiksystem etwas Bedrohliches: "Schwere Fehler treten scheinbar zuf allig auf. In Wirklichkeit sind sie an seltene Konstellationen im System gebunden, dadurch kaum analysierbar und entsprechend schwer zu beheben. Genau diese Alltagserfahrung verleiht Rechnern in den Augen von Sch ulern etwas Mystisches (Rechenberg, 1994)" (Schubert und Schwill 2004, S. 254). Es ist gerade das Prinzip der freien Programmierbarkeit, das diese Fehlerzust ande erm oglicht bzw. bef ordert (!Methodik 1: Universalit at). Denn es wird versucht, die Welt so genau wie moglich im Informatiksystem zu beschreiben, dabei aber vernachl assigt, dass Informatiksysteme nur einen Realit atsausschnitt abbilden k onnen und somit ein Modell darstellen (vgl. Schubert und Schwill 2004, S. 255). Schubert und Schwill kritisieren, dass Informatikunterricht es zurzeit oft vers aume, die technische Basis von Rechnern zu thematisieren. So treten bestimmte Modellierungsfehler immer wieder auf, wenn die Sch uler keine Vorstellung von Speicherung und Datenaustausch im Rechner haben (Schubert und Schwill 2004, S. 200). Als Unterrichtsleitlinien nennen Schubert und Schwill die drei Bereiche Pl ane, Sprachen und Systeme (Schubert und Schwill 2004, S. 45). In dem Bereich"Systeme" sind dementsprechend der technische Aufbau von Informatiksystemen und die Thematisierung wichtiger Repr asentanten von Systemen verankert. In der Leitlinie"Plane" geht es um Fragen der Berechenbarkeit, in der Leitlinie"Sprachen" um Interaktion mit Informatiksystemen, z. B. mittels formaler Sprachen. Zur Gestaltung der Unterrichtsleitlinie"Systeme" empfehlen Schubert und Schwill f ur Unterricht zu den Wirkprinzipien von Informatiksystemen die Thematisierung des engen Verh altnisses zwischen realer, abstrakter und virtueller Maschine (Schubert und Schwill 2004, S. 269). Als reale Maschine nennen sie beispielhaft den Von-Neumann-Rechner, als abstrakte Maschine den mathematischen Funktionsbegri und logisches Schlieen uber Aussagen. Eine virtuelle oder gedachte Maschine zeichnet sich durch Abstraktion von Speicherstrukturen, Operationseinheiten und Kontrollmechanismen zur L osung eines Problems aus (Claus und Schwill 2006, S. 727). Sie kann anschlieend durch Programme auf einem Rechner realisiert werden ( !Inhalt 2: Strukturmodelle). Fur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe I empfehlen Schubert und Schwill neben den Aspekten reale, abstrakte und virtuelle Maschine dazu komplement ar eine Struktur des Lehr-Lernprozesses, die die Analyse eines Von-Neumann-Rechners, Betriebssysteme und typische Anwendungen einschliet: "Die Sch uler sollen sich im Informatikunterricht ein Grundverst andnis zu Systemen aneignen, indem sie schrittweise zuerst den Rechner analysieren (Rechnerarchitektur, Betriebssystem), danach Rechner logisch zu einem Rechnernetz verbinden, auf dem die Ausf uhrung einer typischen Anwendung untersucht wird (z. B. Informationssystem / Datenbanksystem). Wir empfehlen folgende Schwerpunkte:4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 59 Rechnerarchitektur: kognitives Modell zu Aufbau und Arbeitsweise eines Rechners, Von-NeumannPrinzipien, Schichten-Architektur (z. B. MVC-Architektur (model { view { controller)), Betriebssystem: Prozesse, Betriebsmittel, Schichten-Modell (z. B. Ger ateverwaltung mit Unterbrechungsbehandlung, Ger atetreiber, Zuteilung und Freigabe von Ger aten, Eingabe-AusgabeBibliotheken), Rechnernetz / verteiltes System: Adressierung, Protokoll, Schichten-Modell (z. B. Schichtenmodell der Internet-Technologie [. . . ]), Informationssystem / Datenbanksystem: Daten, Information, Wissen, Schichten-Modell (z. B. Drei-Ebenen-Konzept eines Datenbankmanagementsystems mit internem, konzeptionellem und externen Schema). Dieser Lernprozess sollte in den Jahrgangsstufen 5 bis 8 der Sekundarstufe I schulartspezisch stattnden, indem ein Spiralcurriculum von den Anwendungen zu den Wirkprinzipien f uhrt" (Schubert und Schwill 2004, S. 269f). Methodisch wird damit der Weg von der Anwendung zur Maschine empfohlen ( !Methodik 7: Von der Anwendung zur Maschine). Diese Ubersicht skizziert einerseits die Verbindung von Hardware und Software, andererseits die Wichtigkeit von Schichtenmodellen f ur Kompetenzentwicklung mit Informatiksystemen. Dar uber hinaus weisen Schubert und Schwill den zusammenwirkenden Prozessen eine Schl usselrolle zu: "Der Begri Prozess hilft Anwendern von verteilten Informatiksystemen, deren Wirkprinzipien besser zu verstehen. Prozesse sind Folgen von Ereignissen, denen Aktionen zugeordnet werden, die zur Losung geh oren. Die Ereignisse stehen in kausaler Beziehung. Daraus folgen die m oglichen Varianten fur eine zeitliche Ordnung, die das Nebenund Nacheinander festlegt" (Schubert und Schwill 2004, S. 270). Die vielf altigen von Schubert und Schwill vorgestellten Vorgehensweisen f ur Unterricht zu Wirkprinzipien von Informatiksystemen m ussen nun in ein konsistentes Unterrichtsmodell zu Informatiksysteme und Kompetenzentwicklung einieen und ggf. im konkreten Unterricht auf ihre Tragf ahigkeit uberpr uft werden. Das Prozesskonzept beispielsweise unterst utzt direkt die Vernetzung und Verteiltheit heutiger Informatiksysteme. Dar uber hinaus erg anzt es explizit die Beschreibung der inneren Struktur um die zu ihrem Verst andnis notwendigen Abl aufe (Abschnitt 3.2.3). Dabei ist jedoch begriich zwischen den Beziehungen und Abl aufe zwischen den Strukturkomponenten einerseits, die im allgemeinen Sprachgebrauch ebenfalls als Prozesse bezeichnet werden, und dem informatischen Prozesskonzept andererseits zu unterscheiden. Schlussfolgerung der hier skizzierten Vorgehensweise f ur Kompetenzentwicklung mit Informatiksystemen ist auch, dass Schichtenmodellen als logische Verkn upfung zwischen Hardware, Software und Vernetzung zur F orderung der Kompetenzentwicklung mit Informatiksystemen dienen k onnen (Abschnitt 9.3). Bei Schichtenmodellen ist jedoch zu bedenken, dass sie in der Informatikpraxis nicht zwangsl aug so trennscharf implementiert werden, wie ihre Spezikation es vorschreibt. Strukturmodelle werden deshalb f ur das Unterrichtsmodell analysiert ( !Inhalt 2: Strukturmodelle). 4.2.4 Weitere Entwicklungen zu Informatiksystemen seit den 1990er Jahren Kompetenzentwicklung mit Informatiksystemen in der Schulinformatik bis zur Jahrtausendwende Tom van Weert (1993), der an internationalen curricularen Projekten der ATEE und der IFIP mitarbeitete, begr undet auf der INFOS 1993 (Troitzsch 1993) Informatik als Teil der Allgemeinbildung und unterscheidet daf ur technische Systeme, die eine mechanische Automatisierung des primaren Betriebsprozesses, also des Produktionsprozesses vornehmen. Denen gegen uber sieht er Informationssysteme als Ausgangspunkt der Automatisierung bei den sekund aren, administrativen Prozessen. Aus den gesellschaftlichen Ver anderungen durch Informationstechnologie, Automatisierung (Unterst utzung des Verwaltungsprozesses), Informatisierung (pers onliche Qualizierung) und Kommunikatisierung (pers onliche Qualizierung im Prozess), leitet er gesellschaftliche60 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Forderungen an den Informatikunterricht ab. In ihm soll das Lernen uber Automatisierung auf der ersten Stufe in Form einfacher Programmerstellung und Organisation eines Rechenzentrums thematisiert werden. Auf der zweiten Stufe, der Informatisierung, soll Informatik als Anwendung der Informationstechnologie behandelt werden. Auf der dritten Stufe, der Kommunikatisierung, sieht er die Auspr agung eines neuen Alphabetismus und beruft sich daf ur auf Ershov (Abschnitt 4.3.1): "Ershovs Metapher l at sich weiterentwickeln: der traditionelle Alphabetismus wird erweitert werden um die F ahigkeit, komplexe dynamische konzeptuelle Modelle in exekutierbaren Symbolen (generalisierten Programmen) auszudr ucken [. . . ]. Dies wird durch eine Gesellschaft mit immer komplizierteren, auf Kommunikationsnetzen basierten Organisationsformen erfordert" (Weert 1993, S. 17). Weert fordert dementsprechend den"Alphabetismus in der Informationstechnologie f ur alle" (Weert 1993, S. 17). Elemente der Informatik, die dazu f ur die Allgemeinbildung notwendig sind, umfassen seiner Meinung nach Methoden der Modellierung, der Programmierung und den Entwurf von Datenstrukturen. Als Vertiefung in einem Wahlfach schl agt er Software Engineering und Techniken der Mensch-Maschine-Kommunikation vor. F ur Kompetenzentwicklung mit Informatiksystemen ist die Klassizierung der Informatiksysteme anhand ihres Einsatzes in Produktionsund Verwaltungsprozessen interessant ( !Inhalt 4: Sichten). Insbesondere letztere lassen sich weiter abstufen, z. B. in Unterst utzung von Routineprozessen hoher Standardisierung, Regelprozessen mit individuellen Eingrien und Einzelfallprozessen, deren Abl aufe kaum planbar sind (Picot und Rohrbach 1995). Jede Stufe ben otigt ein tieferes Verst andnis f ur das Informatiksystem und den entsprechenden Arbeitsprozess. Die Fachdidaktikforscher Koerber und Peters (1993) diskutieren auf der INFOS 1993 die Stellung des Informatikunterrichts gegen uber der informationstechnischen Grundbildung. Dazu beziehen sie sich unter anderem auf die Nutzung von Informationstechnologie als das Gemeinsame der Aspekte informatischer Bildung, f ur die sie ein Gesamtkonzept fordern. Darin enthalten sein mussen Reduktion der Realit at durch Modellbildung und Abstraktion. Dazu betonen sie, dass komplexes Wissen zur Systemkonstruktion nicht Voraussetzung f ur kompetente Anwendung von Informatiksystemen sein darf: "Aber es ist bisher selten oder fast gar nicht beachtet worden, da zu einer kompetenten Beurteilung und Anwendung eines informationstechnischen Systems ebenfalls systemanalytische und teststrategische Kompetenzen notwendige Voraussetzungen sind. [. . . ] es kann nicht davon ausgegangen werden, da zuerst das komplexe analytische Wissen um alle Probleme der Konstruktion und Anwendung vermittelt worden sein mu, um irgendwann diese Kompetenzen nutzen zu k onnen" (Koerber und Peters 1993, S. 111f). Diese Erkenntnis ist konform zu der in der vorliegenden Arbeit getroenen Entscheidung, Softwareentwicklung nur am Rande zu thematisieren. Koerber und Peters (1993) schlussfolgern, dass im Unterricht Informatiksysteme, wie komplexe Anwendungen oder vorgegebene Programme, auf ihre Funktionalit at analysiert werden m ussen. Dabei fordern sie als Lehr-Lernmethodik die Thematisierung informationstechnischer Systeme aus dem historischen Kontext heraus ( !Methodik 7: Von der Anwendung zur Maschine), also ausgehend von dem fr uher von Menschen durchgef uhrten und nun von der Maschine ubernommenen Handlungsablauf (Koerber und Peters 1993, S. 112). Die GI legt 1993"Empfehlungen f ur das Fach Informatik in der Sekundarstufe II allgemeinbildender Schulen" vor (Schulz-Zander et al. 1993). Es werden drei leitende Sichtweisen genannt: A) Mensch-Computer, B) Formalisierung und Automatisierung geistiger Arbeit sowie C) Informatiksysteme, Gesellschaft und Umwelt. Gegen uber der GI-Empfehlung von 1976 wird auf veranderte Bedingungen und Sichtweisen hingewiesen: "Informatik verlangt neben reinen mathematisch-formal gepr agten Methoden und algorithmischen Sichtweisen weitere Bearbeitungsperspektiven. [. . . ] Dies setzt ein Behandeln von Probleml osungsund Gestaltungsmethoden sowie deren kritische Beurteilung, eine F orderung des Denkens in Ablaufen und Zusammenh angen, eine F orderung der Kommunikationsund Kooperationsf ahigkeit und eine Darstellung der Probleme und Methoden, komplexe Systeme zu uberschauen, im Informatikunterricht voraus" (Schulz-Zander et al. 1993, S. 206).4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 61 Damit sind f ur Kompetenzentwicklung mit Informatiksystemen die Themen"Arbeiten mit komplexen Systemen" und"Vernetzte Systeme" neu gewichtetet oder aufgenommen (! Ziel 1: Aufbau, Vernetzung und Funktionsweise; !Ziel 2: Arbeiten mit komplexen Systemen). Relevant fur Informatiksysteme und Kompetenzentwicklung ist, dass eine verst arkte Umorientierung des Informatikunterrichts zu den lebenspraktisch-orientierten Ans atzen inklusive gesellschaftsund arbeitsweltlichen Abh angigkeiten stattndet ( !Inhalt 4: Sichten), wenngleich nicht von einer Abkehr von der Algorithmik gesprochen werden kann. Friedrich (1995b) fordert, im Informatikunterricht Aufbau, Funktion und Wirkungsweise der maschinellen Informationsverarbeitung und Probleml osungsstrategien mit Werkzeugen der Informatik zu behandeln ( !Ziel 1: Aufbau, Vernetzung und Funktionsweise). Er stellt auf der INFOS 1995 (Schubert 1995) Thesen f ur die Informatikdidaktik vor, die er aus der informationstechnischen Grundbildung ableitet, die den schnellen technischen Entwicklungen nicht gewachsen ist (vgl. Brauer 1990): "Ein ernsthafter Fachunterricht in der Informatik sollte ein solideres Fundament f ur den vern unftigen Umgang mit Informatiksystemen legen sowie ein wesentlich besseres Verst andnis der Anwendungen der Informatik [. . . ] erm oglichen. Dieser Anspruch wurde nicht nur aus den Augen verloren, sondern in manchen Grundpositionen zu Zielen informatischer Bildung ungen ugend ber ucksichtigt"(Friedrich 1995b, S. 34). Speziell fordert er, uber Benutzungsfertigkeiten einerseits und spezielle Programmiersprachenkenntnisse andererseits hinauszugehen: "Also steht mehr die Frage, die Grundprinzipien der Informatik zu beschreiben, die unabh angig von aktuellen Entwicklungen im Bereich der Hardund Software Allgemeingut f ur den Absolventen der jeweiligen Schulart sein m uten. Das sind z. B.: Grundprinzipien des Aufbaus, des Funktionierens und der Wirkung von Maschinen zur Verarbeitung von Informationen; Strategien der Probleml osung mit Werkzeugen der Informatik, Betrachtung zu deren M oglichkeiten und Grenzen;" (Friedrich 1995b, S. 38). In der didaktischen Untersetzung dieser fachwissenschaftlichen Bildungsinhalte und -ziele ( !Ziel 3: Bewusste Anwendung), einschlielich fr uhzeitiger Begrisbildung bei Sch ulern, sieht Friedrich die Aufgabe der Fachdidaktik. Wie eine entsprechende Modellbildung umgesetzt werden soll, bleibt jedoch oen. Dies gilt ebenso f ur Kompetenzentwicklung mit Informatiksystemen. Engbring (1995) begr undet kulturund technikgeschichtlich, dass F ahigkeiten und Fertigkeiten im Umgang mit Rechnern im Kontext menschlichen Handelns, Denkens und Lernens in der Allgemeinbildung zu vermitteln sind: "Betrachtet man also [. . . ] den Umgang mit Computern in Zusammenhang mit geistigen T atigkeiten und den dazu erforderlichen Techniken (technikgenetische Sichtweise), ist dieses Herangehen geeignet, kulturelle Koh arenz fur Computernutzung und Informatik zu stiften. [. . . ] ,Wissenschaftliche' Inhalte der Informatik sind dann nur Mittel zum Zweck, diese Zusammenh ange zu verstehen" (Engbring 1995, S. 75f; Hervorh. im Original). Ziel der technikgenetischen Sichtweise ist damit Entmystizierung technischer Ph anomene (! Ziel 4: Entmystizierung), wobei"Technik" sowohl Fertigkeiten und Kulturtechniken meint als auch Erkl arung, Einsch atzung, Beurteilung und Bewertung von Technik, speziell von Rechnern (Engbring 1995, S. 76). Dazu fordert er unterrichtspraktische Uberlegungen und Konsequenzen fur die Lehrerbildung. Engbring (1995) warnt nachdr ucklich vor einer Festlegung auf eine der Metaphern"Werkzeug" oder"Medium", da beide zu kurz greifen. Solche Hilfsmittel m ussten, wie Engbring mit Bezug zu Keil-Slawik (1992) feststellt, kulturund technikgeschichtlich betrachtet werden, um Gestaltungsrichtlinien und -kriterien f ur interaktive Systeme abzuleiten. Auf diese Weise gewonnene Informatikunterrichtsinhalte seien sowohl allgemein bildend als auch den Zielbereichen Algorithmik und Programmierung, Informatik und Gesellschaft und Computerkunde zuzuordnen (Engbring 1995, S. 75). Computerkunde umfasst nach Engbring den Umgang mit62 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Anwendungen und Grundprinzipien uber den Aufbau von Hardund Software (Engbring 1995, S. 70). Erg anzend muss jedoch erw ahnt werden, dass die Werkzeug-Metapher auch zu einer Untersch atzung der Universalit at des Rechners f uhrt (Schubert und Schwill 2004, S. 229). Die technikgenetische Sichtweise (vgl. Abschnitt 5.2.2) kann f ur das Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung dahingehend interpretiert werden, dass nicht nur unter Laborbedingungen verschiedene typische Repr asentanten von Informatiksystemen integriert werden sollen, sondern vielmehr universelle Informatiksysteme in einem ansprechenden Kontext unter Thematisierung menschlichen Denkens und Handelns einzubeziehen sind ( !Methodik 1: Universalit at). Friedrich, Schubert und Schwill skizzieren 1996 den Wandel des Schulfachs Informatik, der bei den fachdidaktischen Gespr achen zur Informatik in K onigstein diagnostiziert wurde und f ur den folgende Ziele des Informatikunterrichts formuliert wurden: "Zu den auszupr agenden Qualikationen geh oren insbesondere: Wissen um die allgemeinen Wirkprinzipien von Informatiksystemen und deren grundlegender technischer Realisierung. Fahigkeiten zur Auswahl und der problembezogenen selbst andigen Nutzung geeigneter Systeme sowie deren Anpassung. Haltungen und Einstellungen zu Auswirkungen der Nutzung von Informatiksystemen, einschlielich deren M oglichkeiten und Grenzen" (Friedrich et al. 1996, S. 29). Fur die Fachdidaktik folgt daraus, dass dahingehend Fragen zu beantworten sind zu Gegenstanden, Denkweisen und Methoden, zur Stellung eines Unterrichtsgegenstands im Fach und in der Alltagswelt, zu den Zug angen, zur Begrisbildung auf unterschiedlichen Schulstufen, zu Lernschwierigkeiten und zur Umsetzung in Lerneinheiten (Friedrich et al. 1996, S. 31). Dar uber hinaus wird eine Strukturierung des Schulfachs aus Sicht der Fachwissenschaft vorgeschlagen, die die wesentlichen Grundbegrie, Prinzipien, Werkzeuge und Methoden umfasst und durch Uberpr ufung auf fundamentale Ideen der Informatik hinsichtlich ihrer Relevanz gesichert wird. Da dies jedoch nicht ausreiche, ist die Strukturierung aus Sicht der Fachwissenschaft hinsichtlich wissenschaftstheoretischer Sichtweisen und Fragen der Allgemeinbildung zu erg anzen (vgl. Friedrich et al. 1996, S. 32). F ur Kompetenzentwicklung mit Informatiksystemen sind bewusste Anwendung, Strukturmodelle und Bereitschaften zur Anwendung zu betrachten ( !Ziel 3: Bewusste Anwendung; !Ziel 5: Bereitschaften; !Inhalt 2: Strukturmodelle) Schubert und Schwill f uhren als Beispiel die Telekommunikation an, die von einer Arbeitsgruppe in Konigstein auf ihren fachlichen Gehalt gepr uft wurde. Dabei identizieren sie hinter dem Teilbereich des elektronischen Bezahlens im World Wide Web (WWW) eine Vielzahl fundamentaler Ideen, jedoch ohne Nachweis der Kriterien: Im Bereich der Algorithmisierung sind es Verschl usselungsverfahren, Protokollverfahren, Routing-Verfahren, Nebenl augkeit, Fairness, Konsistenz, Authentizierung und Suchen. Bei der strukturierten Zerlegung nden sich Netzwerktopologie, Protokollhierarchie (Schichtenmodell der"International Organization for Standardization" (ISO); auch:"Open Systems Interconnection Basic Reference Model" (OSI-Referenzmodell)), Transportstrategien und verteiltes System. Im Bereich Sprache sind es Syntax, Dokumentendarstellung und Ubersetzung. Ausgangspunkt der Analyse war eine Anwendungssituation, in der ein Warnhinweis zur unsicheren Daten ubertragung auftrat. F ur Kompetenzentwicklung mit Informatiksystemen ist dieses Vorgehen sehr hilfreich, da es aus der Anwendungssituation heraus fundamentale Ideen zur Begr undung des Bildungswertes liefert ( !Inhalt 3: Fundamentale Ideen). Es wird jedoch auch festgestellt, dass durch die fundamentalen Ideen fast ausschlielich formalisierbare Aspekte der Kerninformatik geltert werden. Allgemeinbildungsaspekte bleiben, wie angedeutet, auen vor (Friedrich et al. 1996, S. 33). Auerdem ist f ur Kompetenzentwicklung mit Informatiksystemen der Bezug zu Informatiksystemen und den Sichten auf sie herzustellen (Abschnitt 3.2.2). Vernetze Informatiksysteme als Unterrichtsgegenstand und Medium setzen Witten und Penon in einem Halbjahreskurs"Telekommunikation" ein (Witten und Penon 1997). Dabei wird Projektarbeit angewendet, Modellieren von Informationen mit der Hypertext Markup Language4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 63 (HTML) als Sprache wird anhand von Anforderungen an gut gestaltete Webseiten thematisiert und Fragen der gesellschaftlichen Auswirkungen werden integriert. Sie merken kritisch an, dass durch den Pilotcharakter ihres Kurses einige informatische Grundlagen der Telekommunikation wie Schichtenmodelle, Protokolle und Netzarchitekturen im Sinne der fundamentalen Idee der strukturierten Zerlegung zu kurz kamen ( !Inhalt 2: Strukturmodelle). Neupert und Friedrich (1997) betonen, dass Informatikunterricht immer wieder von Medienerziehung abzugrenzen ist, in der Informatiksysteme als Werkzeuge im Sinne einer Black-Box gelehrt werden, denen der Anwender letztlich ausgeliefert ist. Sie stellen die Frage, ob Sch uler informatische Bildung ben otigen und belegen die positive Antwort anhand von Fehlermeldungen bei Nutzung des Internets, die ohne entsprechende Kompetenz die bewusste und eziente Anwendung verhindern. Als Themen bez uglich der Arbeit mit Netzen nennen sie f ur die Sekundarstufen im Bereich Struktur von Rechnernetzen die Topologien von Netzen, Schichtenmodelle und Netzdienste sowie exemplarische Kommunikationssysteme ( !Inhalt 2: Strukturmodelle). Interessant f ur Kompetenzentwicklung mit Informatiksystemen ist an der Aufteilung von Neupert und Friedrich, dass der Struktur von Rechnernetzen ein eigener Bereich zu kommt. Aber sie nennen weitere Bereiche wie die Wahl der Informationsdarstellung, der Datensicherheit und gesellschaftliche Entwicklungstendenzen, die im Kontext der Netze spezisch sind. Letztere sind nicht getrennt in Verhalten und innere Struktur von Informatiksystemen. Als Fazit ist zu ziehen, dass erstens die Werkzeugsicht im Sinne der Black-Box nicht gleich zu setzen ist mit dem Verstehen des Verhaltens eines Informatiksystems, denn Kompetenzentwicklung mit Informatiksystemen bedarf des Wissens um deren Grundprinzipien, die nur eine informatische Bildung leistet (! Methodik 3: Verbindung von Verhalten und Struktur). Zweitens liefern gerade die Fehlersituationen Ansatzpunkte f ur allgemein bildenden Unterricht zur F orderung der Kompetenzentwicklung mit Informatiksystemen ( !Ziel 4: Entmystizierung). Auf der INFOS 1997 (Hoppe und Luther 1997) betrachtet Kr amer Rechner aus der philosophisch-medienwissenschaftliche Perspektive unter Werkzeug-, Denkzeug(vgl. Koerber 1978) und Spielzeugaspekt ( !Inhalt 4: Sichten). Den Rechner charakterisiert sie in Analogie zum Menschen: "Mensch und technisches Instrument weisen { zumindest funktionell { gleichwertige Eigenschaften auf; die Technik wird zur Erweiterung unseres K orpers und seiner Verm ogen: Sie gilt als prothetische Verst arkung, Entlastung unserer motorischen, sensorischen und kognitiven Organe" (Kr amer 1997, S. 7). Sie betont dabei den apparativen Vollzug von Kulturtechniken (vgl. Nake 1998). Auf den Vernetzungsaspekt von Medien ging Kr amer in einem Vortrag verst arkt ein, den sie 2006 im Forschungskolleg 615"Medienumbr uche" der Deutschen Forschungsgemeinschaft (DFG) hielt, an dem der Autor im Teilprojekt A8"Informatikunterricht und E-Learning zur aktiven Mitwirkung am digitalen Medienumbruch" mitforscht (vgl. (Schubert et al. 2005a), (Schubert et al. 2005b), (Schubert und Stechert 2008)). F ur Kompetenzentwicklung mit Informatiksystemen ist durch den apparativen Vollzug von Kulturtechniken eine weitere Begr undung hinsichtlich der allgemeinen Bildung zu sehen ( !Methodik 7: Von der Anwendung zur Maschine). Fasst man den Abschnitt zusammen, so f allt auf, dass durch die Empfehlungen der GI und in weiteren Publikationen Informatikunterricht zu Wirkprinzipien von Informatiksystemen gefordert wird. W ahrend van Weert aus den Arbeitsprozessen Anwendungssituationen extrahiert, begrunden Friedrich und Neupert anhand von Fehlermeldungen bei der Nutzung des Internets die Notwendigkeit einer informatischen Bildung. Gerade solche Fehlermeldungen k onnen in einem Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung aufgegrien und als Ausgangspunkt eines systematischen Erkundens des Systemverhaltens genutzt werden (Abschnitt 5.5). Foegens Konzeption einer Didaktik der Informatik anhand der universellen Systemtheorie zeigt im Nachhinein, wie wichtig eine begriiche Trennung des Systembegris vom Informatiksystembegri ist (Abschnitt 3.2.1), die im Unterrichtsmodell zu beachten ist.64 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Informatiksysteme im Gesamtkonzept zur informatischen Bildung an allgemein bildenden Schulen In den Empfehlungen der GI f ur ein Gesamtkonzept zur informatischen Bildung an allgemein bildenden Schulen (GI 2000) wird als ubergeordnetes Ziel der Schulinformatik formuliert, allen Schulern einen "gleichberechtigten Zugang zu informatischen Denkund Arbeitsweisen und modernen Informationsund Kommunikationstechniken zu onen, informatische Bildung zu vermitteln und damit auch auf lebenslanges Lernen, d. h. auf die M oglichkeiten der st andigen Wissensreorganisation, vorzubereiten. Informatische Bildung ist das Ergebnis von Lernprozessen, in denen Grundlagen, Methoden, Anwendungen, Arbeitsweisen und die gesellschaftliche Bedeutung von Informatiksystemen erschlossen werden" (GI 2000, S. 1). Die Empfehlung ist durch vier Leitlinien strukturiert. Insbesondere werden"Wirkprinzipien von Informatiksystemen" als eine Leitlinie neben der"Interaktion mit Informatiksystemen", der"informatischen Modellierung" und der"Wechselwirkungen zwischen Informatiksystemen, Individuum und Gesellschaft" formuliert. Dabei wird betont, dass Interaktion mit Informatiksystemen als Werkzeug oder Medium nur bei bewusster Thematisierung informatischer Aspekte zur informatischen Bildung geh ort (vgl. GI 2000, S. 1). Im eklatanten Gegensatz zu dieser inhaltlichen Forderung bez uglich Informatiksysteme steht der sich in der Empfehlung oenbarende Mangel an denierten Kompetenzen: So werden Informatiksysteme bei gegebener Beschreibung von Fach-, Methoden-, Sozialund Selbstkompetenz nur bei den beiden letztgenannten Kompetenzen explizit erw ahnt. Gema der Lernziele zur Leitlinie"Interaktion mit Informatiksystemen" sollen Sch uler in lokalen und globalen Netzen zielorientiert navigieren k onnen, sich Gestaltungsm oglichkeiten erarbeiten, geeignete Informatiksysteme zur Probleml osung ausw ahlen und anwenden sowie Anforderungen an die Gestaltung von Informatiksystemen formulieren k onnen (vgl. GI 2000, S. 3). Zu den Wirkprinzipien sollen Sch uler Aufbau, Funktionsprinzipien und das Zusammenspiel der Systemkomponenten in gr oere Zusammenh ange einordnen k onnen (!Ziel 1: Aufbau, Vernetzung und Funktionsweise): "Dazu lernen sie grundlegende Ideen und Konzepte (wie z. B. die Digitalisierung und die Kodierung, die universelle Maschine), die Wirkungsweise wichtiger Bestandteile heutiger Informatiksysteme (z. B. Prozessor, Speicher, Netze), Prinzipien, Verfahren und Algorithmen (beispielsweise Suchverfahren) und den prinzipiellen Aufbau komplexerer Basissysteme (beispielsweise Betriebssysteme, Datenbanksysteme, Netzsoftware) kennen" (GI 2000, S. 3). Es fallt auf, dass das Systemverhalten nicht zur Analyse genutzt wird. Vielmehr werden ausschlielich Fachkonzepte mit Bezug zur inneren Struktur von Informatiksystemen aufgez ahlt (!Inhalt 2: Strukturmodelle; !Inhalt 3: Fundamentale Ideen). Auerdem lernen die Sch uler, Informatiksysteme als Produkt eines Modellierungsvorgangs zu sehen und die Komponenten eines Informatiksystems in Modellen zu beschreiben: "Informatische Modelle spielen bei der Konstruktion und Analyse von Informatiksystemen die Rolle von Baupl anen. Die Sch ulerinnen und Sch uler verstehen, dass jedes Informatiksystem als Kombination von Hardund Software-Komponenten das Ergebnis eines informatischen Modellierungsvorgangs ist, das nach seiner Fertigstellung als Bestandteil der realen Welt mit allen Eigenschaften eines unvollst andigen, k unstlichen Systems wirkt" (GI 2000, S. 3). Die gesellschaftlichen Auswirkungen von Informatiksystemen sollen anhand von Kriterien diskutiert werden und Gef uhlen des Ausgeliefertseins ( !Ziel 4: Entmystizierung) entgegenwirken (vgl. GI 2000, S. 4). Als Konsequenz aus den Inhalten der Leitlinien wird bereits f ur die Primarstufe ein intuitiver, aber fachlich korrekter Unterricht gefordert, der Fertigkeiten in der Anwendung von Informatiksystemen als Werkzeug und Medium, sowie Grundkenntnisse zu Systemkomponenten und Funktionen einschlielich Internetdiensten vermittelt (vgl. GI 2000, S. 5). Fur die unterschiedlichen Schulstufen werden die Bildungsinhalte und -ziele pr azisiert. F ur die4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 65 Sekundarstufe I soll den Sch ulern ein angemessenes Objektmodell helfen, um"Phanomene im Zusammenhang mit Informatiksystemen" (GI 2000, S. 6) zu verstehen. Beispielsweise wird darauf hingewiesen, dass sich bei der Anwendung von Standardsoftware Objekte identizieren und Zusammenh ange herstellen lassen. Ahnlich argumentiert auch Hubwieser im didaktischen Ansatz der Informationszentrierung (Abschnitt 4.2.3). Kritik ist jedoch dahingehend zu uben, dass Schulern ein Objektmodell sicherlich hilft, aber ein handlungsorientiertes Vorgehen notwendig erscheint, um die Objekte zu entdecken, z. B. durch Experimente mit einem Informatiksystem (vgl. Seite 28;!Methodik 4: Analyse des Systems { Experimente). Die Vernetzung von Dokumenten in Hypertextstrukturen, Fragen der Etikette bei der Nutzung von E-Mail-Diensten, Grundlagen der Digitalisierung, automatisierte Datenverarbeitung und Datenstrukturierung sowie Auswahl, Benutzung, Gestaltung, Konstruktion und Bewertung problemangemessener Informatiksysteme sollen Sch uler sich aneignen (GI 2000, S. 6). Dazu sind vertiefte Kenntnisse zum Aufbau typischer Informatiksysteme und deren Klassikation notwendig, die jedoch nicht n aher erl autert werden: "Die problembezogene Auswahl, Benutzung, Analyse, Gestaltung, Konstruktion und Bewertung geeigneter Anwendungssysteme f uhrt zum Aneignen und Vertiefen informatischer Kenntnisse uber Aufbau, Arbeitsweise und Klassikation typischer Informatiksysteme und einer darauf aufbauenden soliden Handlungsund Beurteilungskompetenz" (GI 2000, S. 6). Wiederum wird das Systemverhalten nicht explizit f ur Kompetenzentwicklung mit Informatiksystemen herangezogen. Gerade Analyse und Bewertung sollten sich daher neben der Komponenten der inneren Struktur auch auf das Systemverhalten beziehen. Einen Hinweis darauf, was typische Informatiksysteme sind, liefern die in der Empfehlung genannten Informatiksysteme: E-MailSysteme, Betriebssysteme, Datenbanksysteme, Kommunikationssysteme, Informationssysteme, Netzsoftware, Lernsoftware, Textverarbeitungssysteme, Grakprogramme und verteilte Systeme (!Inhalt 1: Typische Repr asentanten). Ob mit Klassikation von Informatiksystemen eine Zuordnung zu den genannten Repr asentanten und eine einfache Unterteilung in Anwendungsund Systemsoftware gemeint ist, bleibt jedoch oen. In der Sekundarstufe II sind Anwendung, Analyse, Modikation und Bewertung Grundlage der Besch aftigung mit Informatiksystemen ( !Methodik 6: Modikation statt Entwicklung; !Methodik 7: Von der Anwendung zur Maschine): "Die Sch ulerinnen und Sch uler eignen sich die Basiskonzepte ausgew ahlter Informatiksysteme durch Anwendung, Analyse, Modikation und Bewertung an. Die Aufgaben eines Betriebssystems bei der Verwaltung von Betriebsmitteln werden modellhaft skizziert. Rechnernetze und verteilte Systeme werden durch geeignete Modelle (Schichtenmodell, Protokolle, Adressierung) charakterisiert und auf schultypische Aufgabenstellungen angewandt. Die Struktur und Funktionsweise von Rechnern wird ausgehend vom von-Neumann-Modell verallgemeinert" (GI 2000, S. 7f; Hervorh. durch den Autor). Die Auswahl der Schichtenmodelle und des Von-Neumann-Modells stellt die Frage nach weiteren Modellen, die Kompetenzentwicklung mit Informatiksystemen f ordern. Somit sind weitere Modelle auf ihre Eignung zu untersuchen. Dar uber hinaus m ussen Sch uler Fragen der Berechenbarkeit und Entscheidbarkeit beantworten k onnen und Konzepte der Software-Ergonomie zur Bewertung von Informatiksystemen und Problemstellungen einsetzen (vgl. GI 2000, S. 8). Kritik am Begri Informatiksystem in der GI-Empfehlung uben Bartke und Maurer: "Der von der GI gepr agte Begri des ,Informatiksystems' mit seiner verwaschenen, je nach Kontext beliebig interpretierbaren Semantik eignet sich nicht als Abstraktion f ur die Beschreibung von Zielen und Inhalten des Informatikunterrichts" (Bartke und Maurer 2000, S. 1). Thomas weist diese Kritik jedoch zur uck. Dazu nennt er drei Gr unde: Erstens, die vorhandenen Denitionen von Informatiksystemen, nicht zuletzt durch die GI und den Informatikduden, zweitens die verbreitete Nutzung des Begris, und drittens betont er, dass auch andere Wissenschaften keine pr azise Denition von ihren Gegenst anden haben (Thomas 2002, S. 2).66 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Kompetenzentwicklung mit Informatiksystemen in der aktuellen Diskussion von 2001 bis 2007 Brunnstein (2001) legt auf der INFOS 2001 (Keil-Slawik und Magenheim 2001) dar, dass komplexe Informatiksysteme nur schwer zu durchschauen und kaum zu beherrschen seien, was aber im Informatikunterricht nicht zur Sprache komme: "Die bisherige Entwicklung der Schulinformatik in Deutschland hat es vers aumt, den Lehrern wie auch den Sch ulern ein angemessenes Verst andnis der Risiken und der Un-Beherrschbarkeit heutiger Computerund Netzsysteme nahe zu bringen" (Brunnstein 2001, S. 9). Verst arkt werde dies dadurch, dass Sch uler Elemente des Programmierens, die Prinzipien von Hardware, Software, Betriebsund Netzsystemen kennen lernen und zus atzlich wesentliche Anwendungsfelder und Techniken zur Nutzung von Informationstechnik im Informatikunterricht erfahren. Damit wird nach Brunnstein die prinzipielle M oglichkeit des Verstehens impliziert. Jedoch sieht Brunnstein im Gegenteil schon die Grundannahme als unzutreend an, man"verstehe" Ger ate, Systeme und Programme durch Informatikunterricht, da nur wenige Informatikspezialisten mit viel Erfahrung einzelne Systeme beherrschen (Brunnstein 2001, S. 11). Seine Schlussfolgerung ist, dass der risikobewusste Gebrauch einschlielich des Verzichts auf riskante Nutzungen f ur Sch uler anzustreben w are: "Es w are nunmehr spannend zu sehen, wie sich die Curricula ver andern m ussten, damit das naive Verst andnis heutiger Schulabg anger durch ein aufgekl artes Verst andnis [. . . ] durch eine risikobewusste Nutzung, z. T. auch eine Einschr ankung oder Vermeidung riskanter Nutzungen abgel ostwird" (Brunnstein 2001, S. 12; Hervorh. im Original). Diese Sichtweise von Brunnstein unterst utzt einerseits die Notwendigkeit des Informatikunterrichts. Andererseits greift sie die Schwierigkeit auf, dass informatische Prinzipien wie das Geheimnisprinzip bei der Gestaltung von Informatiksystemen eingesetzt werden. Deren Ziel ist gerade das Verbergen von Wirkprinzipien und Teilen der inneren Struktur vor dem Anwender. Aber auch andere Entwickler k onnen aufgrund von Kapselung beispielsweise von primitiven Datenstrukturen abstrahieren. In der Umkehrung kann die Schlussfolgerung jedoch nicht sein, dass wissenschaftsorientierter Informatikunterricht bez uglich Basiskompetenzen zu Informatiksystemen nicht m oglich ist, weil bereits der Entwickler von Informatiksystemen L osungen zur Systemgestaltung versteckt. Deshalb gilt es, Erkenntnisse der Informatik einzusetzen, um mittels informatischer Konzepte wie strukturierter Zerlegung sowie Mechanismen zur Abstraktion und Formalisierung konkrete Informatikl osungen und -strukturierungen hervorzuheben ( !Methodik 2: Kognitive Modelle, vgl. auch Abschnitt 4.2.3). Genau dies ist Ziel des Informatikunterrichts: "Es besteht die Gefahr der Einengung auf zu schlichte Bildungsziele, da die komplexen Modellhintergrunde zur Undurchsichtigkeit der Systeme f uhren. Informatikdidaktik stellt sich deshalb die Aufgabe, die Transparenz komplizierter Algorithmen und Datenstrukturen zu f ordern, damit menschliche Verantwortung tats achlich wahrgenommen werden kann" (Schubert und Schwill 2004, S. 52). Thomas (2002) stellt Verbindungen zwischen Informatiksystemen und Modellen der Informatik her. Er untersucht den Modellbegri in der Informatik durch Auswertung universit arer Skripte und bezieht sich dabei auf die Allgemeine Modelltheorie nach Stachowiak (1973). Danach ist ein Modell immer auch als System im Sinne der Systemtheorie auassbar, ein System aber nicht zwingend ein Modell (vgl. Thomas 2001, S. 176). Er identiziert im Sprachgebrauch der Kerninformatik Hauptmodelltypen (Tabelle 4.2). Alle Hauptmodelltypen stehen in engem Bezug zu Informatiksystemen. W ahrend Architekturmodelle der inneren Struktur von Informatiksystemen zugrunde liegen, beschreiben Vorgehensmodelle im Wesentlichen den Ablauf bei der Softwareentwicklung. Dabei kommen insbesondere Entwurfsmodelle als Beschreibungstechniken zum Einsatz. Untersuchungsmodelle werden genutzt, um vollst andige (Teil-) Systeme zu testen. Auerdem nennt er mentale Modelle, denen er Metaphern und fundamentale Ideen der Informatik nach Schwill (Thomas 2002, S. 62) zuordnet. Gerade bei diesem letzten Modelltyp ist sicherlich4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 67 kritisch zu hinterfragen, inwieweit die beispielhaft genannten Metaphern informatikspezisch unduber deren nachweisbares Auftreten im Sprachgebrauch hinaus einen vergleichbaren Anteil an der Strukturierung der Kerninformatik haben, wie die vier erstgenannten Hauptmodelltypen. Dennoch betont Thomas die Wichtigkeit der so verstandenen mentalen Modelle f ur die Anwendung und Entwicklung von Informatiksystemen: "Es zeigt sich zusammenfassend, dass mentale Modelle einen bedeutenden Stellenwert bei der Anwendung und Entwicklung von Systemen der Informatik haben. Mentale Modelle bilden die Grundlage zum Verst andnis und f ur die Entwicklung von externen semantischen und technischen Modellen. Das Zusammenstellen und Evaluieren von n utzlichen Metaphern und konzeptuellen Modellen zum Aufbau mentaler Modelle in der Informatik und im Informatikunterricht sollte Ausgangspunkt f ur weitere zahlreiche Arbeiten sein, um eine zukunftsorientierte Modellierungskompetenz im Allgemeinen und beim Umgang mit Informatiksystemen zu erzeugen" (Thomas 2002, S. 45). Thomas beruft sich auf Dutke (1994), der den Aufbau mentaler Modelle durch Exploration von Informatiksystemen exemplarisch im Bereich Software-Ergonomie analysiert hat (Abschnitt 5.5). Der von Thomas betonte Zusammenhang von Modellierungskompetenz und dem bewussten Anwenden von Informatiksystemen ist f ur Kompetenzentwicklung hervorzuheben. Dabei ist begriich fest zu halten, dass Thomas unter Modellierung in diesem Fall nicht ausschlielich Systementwicklung, sondern Modellbildung versteht. Tabelle 4.2: Hauptmodelltypen und Beispiele zitiert nach (Thomas 2003, S. 147) Hauptmodelltypen Beispiele f ur Untermodelle Architekturmodelle Rechnerarchitekturen (Von-Neumann, SISD, MIMD, neuronale Netze), theoretische Maschinenmodelle (Turingmaschine, Automaten), Rechenmodelle (imperativ, logisch-deklarativ, funktional), Referenzmodelle (Client-Server, OSISchichten) Vorgehensmodelle Wasserfallmodell, Prototypenmodell, Evolution ares Modell, Objektorientierte Modellierung Entwurfsmodelle Aufgabenmodell oder Anforderungsanalyse, Modellierungssprachen (Struktogramm, Programmablaufplan, UML), Komponentenmodell, Datenmodelle (hierarchisches, relationales, logisches, objektorientiertes) Untersuchungsmodelle Analytisches Modell (Verikation, betriebswirtschaftliche Modelle), Simulationsmodell (Blackbox Testen; deterministisch, stochastisch) Mentale Modelle Metaphern, Konzeptuelle Modelle, Fundamentale Ideen Als Beispiel zieht er den Von-Neumann-Rechner heran, der in Informatikvorlesungsskripten als technisches Idealmodell unter Vernachl assigung technischer Details beschrieben wird. Damit kann "ein Modell sowohl Abbild ,von etwas' (hier: Denkmodelle) als auch Vorbild ,f ur etwas' (hier: Computerger at) sein" (Thomas 2001, S. 177). Da Thomas die Notwendigkeit mentaler Modelle hervorhebt, um Informatiksysteme anwenden und konstruieren zu k onnen (!Methodik 2: Kognitive Modelle), und gleichzeitig fundamentale Ideen der Informatik zu den mentalen Modellen z ahlt, zeigt er implizit die enge Verbindung zwischen Kompetenzentwicklung mit Informatiksystemen und fundamentalen Ideen der Informatik (!Inhalt 3: Fundamentale Ideen). Humbert (2003) entwickelt in seiner Dissertation ein Modulkonzept f ur die Schulinformatik und beschreibt darin das Modul"Informatiksysteme verstehen und verantwortlich nutzen". Bez uglich Informatiksysteme stellt er fest: "Heute ist Informatik u. a. gekennzeichnet durch die objektorientierte Konstruktion von Informatiksystemen. Der Begri Informatiksystem wird zur Bezeichnung der Einheit von Hardund Software unter Betonung ihrer interaktiven Eigenschaften verwendet. Informatiksysteme werden zunehmend unter st arkerer Ber ucksichtigung verteilter und vernetzter Systeme gestaltet. Die beiden Aspekte objektorientierte Modellierung und verteilte, vernetzte Systeme stellen eine Umorientierung des informatischen Wissenschaftsverh altnisses dar, die als Paradigmenwechsel (vgl. Kuhn 1969) bezeichnet werden kann" (Humbert 2003, S. 5).68 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Auch wenn der Autor der vorliegenden Arbeit diesen Umschwung nicht als Paradigmenwechsel bezeichnen m ochte, da keine Grundlagenkrise ausgel ost wurde, so stimmt er mit Humbert darin uberein, dass diese Entwicklungen in der Fachwissenschaft von der Fachdidaktik Informatik produktiv aufzunehmen und konstruktiv zu diskutieren sind (Humbert 2003, S. 5). Die fachliche Strukturierung des Modulkonzepts nach Humbert orientiert sich aufgrund der Umorientierung an den Bereichen Rechnernetze, verteilte Systeme und informatische Modellierung (Humbert 2003, S. 105). Er schlussfolgert: "Pragmatisch angelegte Ans atze zu den Uberlegungen, welche Methoden in der Informatik zum Einsatz gebracht werden, f uhren zu der Schl usselbestimmung ,Informatische Modellierung im Kontext' und dabei insbesondere zu der Besonderheit von Informatiksystemen, die Modellierung eines Realit atsausschnitts in eben dieser Realit at wirksam werden lassen" (Humbert 2003, S. 15). Informatiksysteme k onnen demnach auch als enaktive Modelle gesehen werden, die in die Realitat einwirken ((Schubert und Schwill 2004, S. 155); ( !Methodik 2: Kognitive Modelle; Abschnitt 5.3)). Er weist dem Modul"Informatiksysteme verstehen und verantwortlich nutzen" eine Schlusselrolle zu, da das Modul die fachliche Basis f ur die in allen Modulen notwendige Arbeit in vernetzten Strukturen, beispielsweise im Schulintranet, legt (vgl. Humbert 2001, S. 123). Nach Humbert muss Problem l osender Informatikunterricht auch in der wissenschaftsprop adeutisch ausgerichteten Sekundarstufe II den Sch ulererwartungen hinsichtlich deren eigener Perspektiven auf die Anwendung von Informatiksystemen entgegen kommen (vgl. Humbert 2001). Dies wird begleitet von seiner Forderung, f ur den Informatikunterricht die spielerische Interaktion als Modalit at des Handelns (Kr amer 1997) bez uglich Informatiksysteme verf ugbar zu machen, was seiner Ansicht nach noch nicht geschehen ist ( !Inhalt 4: Sichten). Auerdem seien die Uberlegungen von Thomas (2002) zur Modellierung von Modellen zu konkretisieren und auf Eignung fur den Informatikunterricht zu untersuchen (vgl. Humbert 2003, S. 78). Inhaltlich umfasst das Modul einerseits Fragen des Pers onlichkeitsschutzes, z. B. bei ComputerSupported-Collaborative-Learning-Systemen (CSCL-Systemen). Aber es wird auch beschrieben, wie Betriebssysteme handlungsorientiert und plattformunabh angig beispielsweise mittels Scriptsprachen erschlossen werden k onnen. Humbert schl agt darin eine Br ucke zur Modellierung mit Schichtenmodellen, Model-View-Controller-Architektur (MVC) bzw. Entwurfsmustern: "Soll Informatikunterricht zukunftsweisende Impulse setzen, so ist hier durch die Trennung der verschiedenen Ebenen bei der Modellierung von Informatiksystemen, z. B. mit dem MVC-Konzept, eine Moglichkeit aufzuzeigen, wie zuk unftige Entwicklungen ber ucksichtigt werden k onnen, ohne die erarbeiteten Fachkonzepte obsolet zu machen. Dabei soll nicht unterschlagen werden, dass die Benutzung von Entwurfsmustern im Informatikunterricht nicht ohne Probleme m oglich ist. Ein zentrales (bisher nicht zufriedenstellend gel ostes) Problem besteht in der Motivation von Entwurfsmustern auf einer schmalen fachlichen Basis ohne hinreichende Projekterfahrung (im Sinne der Informatik) und der damit verbundenen Notwendigkeit (und N utzlichkeit) dieses Abstraktionsmechanismus" (Humbert 2003, S. 107). Entwurfsmuster werden von Humbert f ur den Informatikunterricht somit als hilfreiche Abstraktionen zur Strukturierung von Informatiksystemen angesehen ( !Inhalt 2: Strukturmodelle). Allerdings zieht er zur Begr undung ihres Einsatzes im Lehr-Lernprozess allein die N utzlichkeit im Softwareentwicklungsprozess heran, die, wie er betont, f ur Informatikunterricht nicht unproblematisch ist (Abschnitt 5.4). Als Beispielthema betrachten Humbert et al. (2005) im Rahmen des Modulkonzeptes den Anmeldevorgang zu Informatiksystemen f ur den Informatikunterricht. Ziel ist es, isolierte Wissensinseln zu vermeiden. So stellen sie den Vorgang mittels Struktogrammen dar und nehmen ihn als Ausgangspunkt f ur Unterricht zu Rechnernetzen, softwareergonomischen Fragestellungen und Kryptologie. Daran zeigt sich, wie ein einfacher Vorgang beim bewussten Anwenden von Informatiksystemen genutzt werden kann, um einen inhaltlich zusammen h angenden Unterricht zur F orderung der Kompetenzentwicklung zu gestalten, der viele unterschiedliche Bereiche der Informatik aufgreift (! Inhalt 4: Sichten; !Methodik 9: Vernetzung der Unterrichtsinhalte). Dar uber hinaus erg anzt Humbert, dass Uberlegungen der4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 69 Theoretischen Informatik notwendig sind, um Wirkprinzipien von Informatiksystemen zu verstehen. Denn mit ihnen k onnen deren Strukturen verdeutlicht und modelliert werden (vgl. Humbert 2001). Ahnlich argumentieren Hartmann und Nievergelt bez uglich des Stellenwertes der Theoretischen Informatik f ur Kompetenzentwicklung mit Informatiksystemen und fordern"formale Systeme" als Grundprinzip der Informatik und der informatischen Bildung (Hartmann und Nievergelt 2002). Begr undung ist, dass mathematisch streng denierte formale Systeme in der Informatik genutzt werden, um Verhaltensweisen von Maschinen zu beschreiben und auszuf uhren. Als Beispiele nennen sie Automaten, Turingmaschine und logische Kalk ule (!Inhalt 2: Strukturmodelle). Auf der INFOS 2003 (Hubwieser 2003) bezeichnet Hubwieser ezientes Arbeiten und verantwortliches Anwenden von Informatiksystemen als Schl usselkompetenzen ( !Ziel 1: Aufbau, Vernetzung und Funktionsweise; !Ziel 3: Bewusste Anwendung): "Ezientes Arbeiten und verantwortungsvoller Umgang mit Informatiksystemen geh oren daher zu den Schl usselkompetenzen unserer Zeit. Dies setzt jedoch grundlegende Kenntnisse uber den Aufbau und die Funktionsweise solcher Systeme voraus" (Hubwieser 2003, S. 4; Hervorh. durch den Autor). Durch diese Feststellung wird f ur Kompetenzentwicklung mit Informatiksystemen nochmals betont, dass Architekturen und Strukturmodelle von Informatiksystemen ebenso notwendig sind wie grundlegende Informatikprinzipien, die die Funktionsweise der Systeme erkl aren. Dar uber hinaus muss es in einem Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung gelingen, beides miteinander zu kombinieren ( !Methodik 9: Vernetzung der Unterrichtsinhalte). Der Autor schl agt dazu so genannte Wissensrepr asentationen vor (Abschnitt 5.4.1). Hubwieser begrundet seine Feststellung mit der umfassenden Digitalisierung und Vernetzung und betont, dass die Informatik Fachkonzepte bereitstellt, die uber Aufbau und Funktionsweise im Bereich der Informatiksysteme hinaus bei der Beschreibung und Beherrschung von komplexen Systemen (!Ziel 2: Arbeiten mit komplexen Systemen) aller Art hilfreich sind (Hubwieser 2003, S. 4). Zur Vorbereitung von Informatikbildungsstandards zieht Friedrich (2003) Schlussfolgerungen aus dem"Programme for International Student Assessment" (PISA) (Senkbeil und Drechsel 2004). Er skizziert eine ausschlielich theoretisch begr undete und auf Basis von Arbeiten zu mathematischen und naturwissenschaftlichen Kompetenzen beruhende Kompetenzstufung f ur den Informatikunterricht: (1) Bedienung von Informatikanwendungen, (2) Benutzung von Informatiksystemen, (3) Kenntnis fachsystematischer Grundlagen, (4) Verst andnis von Konzepten der Informatik, (5) Entwicklung und Bewertung von Informatiksystemen. Kritisch ist hierbei anzumerken, dass Benutzung von Informatiksystemen nur auf solch niedriger Stufe nicht mit der in dieser Arbeit angestrebten Kompetenzentwicklung mit Informatiksystemen gleichzusetzen ist. Des Weiteren impliziert insbesondere die h ochste Stufe, dass Entwicklung von Informatiksystemen als Ziel informatischer Bildung angesehen wird, wenngleich Friedrich dies durch den Zusatz der Bewertung von Informatiksystemen relativiert. Die Stufung kombiniert Friedrich mit den vier Leitlinien (Abschnitt 4.2.4) der GI-Empfehlung (GI 2000), so dass eine Matrix entsteht. Dabei ordnet er den Leitlinien vorab jeweils einen grundlegenden Aspekt informatischer Bildung zu: der Interaktion mit Informatiksystemen die Probleml osung, den Wirkprinzipien von Informatiksystemen die Konzepte, der Informatischen Modellierung die Abstraktion und den Wechselwirkungen zwischen Informatiksystemen, Individuum und Gesellschaft die Allgemeinbildung (Friedrich 2003, S. 136). Diese von Friedrich vorgeschlagene Zuordnung birgt jedoch auch die Gefahr, dass eine Gleichsetzung beispielsweise von Fachkonzepten mit den Wirkprinzipien von Informatiksystemen erfolgt, die wiederum den Verlust der Fokussierung auf Informatiksysteme zur Folge haben kann. Friedrich bietet eine Begriskl arung f ur Wirkprinzipien von Informatiksystemen an, die ahnlich dem Begri"Prinzip" im Duden Fremdw orterbuch (Drosdowski et al. 2001) ist:70 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung "Ein WIRKPRINZIP kennzeichnet naturwissenschaftliche und technische Gegebenheiten bei der Realisierung von Vorg angen, insbesondere dabei die Gesetzm aigkeit, die Idee, die einer Sache zugrunde liegt bzw. nach der etwas wirkt oder auch das Schema nach dem es aufgebaut ist. Man untersucht also deren Zweck, ihre Struktur und Funktionalit at" (Friedrich 2003, S. 142). Die Bildungsziele zur Leitlinie Wirkprinzipien umfassen nach Friedrich (1) die Benennung und Beschreibung des Rechnerarbeitsplatzes, (2) Wissen um Grundfunktionen eines Informatiksystems, (3) Grundlegende Fachbegrie und Einordnung in Fachsystematik, (4) Theoretische Grundlagen sowie Fachbegrie und Konzepte sowie (5) Anwenden und Entwickeln von Konzepten (Friedrich 2003, S. 140). F ur die Leitlinie Interaktion bedeutet dies eine Ausrichtung auf Informationen und Daten, Arbeitsweisen und Methoden (Friedrich 2003, S. 142f). Schwierigkeit dieser Matrix ist, dass sich der direkte Bezug zu Informatiksystemen auf die unterschiedlichen Leitlinien kaum nachvollziehbar aufteilt: So wird"Wissen um Grundfunktionen von Informatiksystemen" der Leitlinie Wirkprinzipien auf Stufe 2 (Benutzung von Informatiksystemen) zugeordnet, aber"Umgang mit Systemen; Auswahl von Methoden" der Leitlinie Interaktion auf Stufe 4 (Verst andnis von Konzepten der Informatik). Der Grund daf ur, dass dieser Ansatz kaum weitere Beachtung erfahren hat, ist in dem starken Bezug zu den Leitlinien der GI-Empfehlung von 2000 zu sehen, die in der nachfolgenden Diskussion um Informatikbildungsstandards nicht weiter verfolgt werden (Abschnitt 4.2.5). Humbert und Puhlmann (2004) geben eine Klassikation von Ph anomenen f ur die informatischen Bildung anhand deren Bezug zu Informatiksystemen an. Sie beziehen sich dabei auf den aus der Physik und Mathematik bekannten fachdidaktischen Ansatz der Ph anomene. Diese bezeichnen dabei das Auftreten von Informatik im Alltag. Humbert und Puhlmann identizieren drei Kategorien von Ph anomenen: (1) Ph anomene mit direktem Bezug zu Informatiksystemen (bewusstes Anwenden von Informatiksystemen), (2) Ph anomene mit indirektem Bezug zu Informatiksystemen (Alltagssituationen in denen Informatiksysteme nicht bewusst wahrgenommen werden) und (3) Ph anomene ohne Bezug zu Informatiksystemen, aber mit informatischer Struktur. Ziel ist dabei die Alltagsbew altigung im Sinne einer"Literacy". Die beiden Ph anomenkategorien mit Bezug zu Informatiksystemen sind relevant f ur Kompetenzentwicklung. Ein Ziel muss letztendlich das Bewusstmachen von Informatiksystemen im Alltag sein. Schlussfolgerung und Herausforderung f ur ein Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen im Sinne eines bewussten Anwendens von Informatiksystemen ist, dass konsequent motivierende Ph anomene im Unterricht einzusetzen sind ( !Ziel 5: Bereitschaften), die Experimente mit Informatiksystemen fordern (vgl. Seite 28) und deshalb auch abstrakte und theoretische Themen tangieren (Abschnitt 5.5). Modrow (2004) diskutiert den m oglichen Beitrag eines Pichtfachs Informatik zur Auspr agung einer"Technical Literacy" (auch:"Technological Literacy") bei Sch ulern. Er begr undet diesen Beitrag der informatischen Bildung vor allem damit, dass Informatik valide Modelle von Hardund Software zum Gegenstand hat sowie die Konstruktion und das Testen von Systemen. Diese "Technical Literacy" beruht nach Modrow auf einer Ausweitung der"Computer Literacy", die um eine Entscheidungskomponente erg anzt wird, so dass uber den angemessenen Einsatz oder Nichteinsatz von Computern entschieden werden kann. Modrow betont in diesem Kontext die Wichtigkeit technischer Aspekte wie Rechnernetze neben Algorithmik, Theoretischer Informatik und gesellschaftlichen Fragestellungen f ur den Informatikunterricht, die er in den 2004 von der Kultusministerkonferenz ver oentlichten"Einheitliche Pr ufungsanforderungen in der Abiturprufung (EPA) im Fach Informatik" vermisst. Welche technischen Aspekte er explizit vermisst, bleibt jedoch unbeantwortet. In den EPA Informatik werden Kompetenzen zur Funktionsweise, zur inneren Struktur sowie zu M oglichkeiten und Grenzen von Informatiksystemen beschrieben: "Der Informatikunterricht in der gymnasialen Oberstufe leistet einen spezischen Beitrag zur Allgemeinbildung, indem er den Erwerb eines systematischen, zeitbest andigen und uber bloe Bedienerfertigkeiten hinausgehenden Basiswissens uber die Funktionsweise, die innere Struktur sowie die M oglichkeiten und Grenzen von Informatiksystemen ermoglicht. Dadurch wird deren4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 71 sinnvolle, kompetente und verantwortungsbewusste Nutzung und Beurteilung erm oglicht. [. . . ] Informatische Methoden wie das Strukturieren, das systematische Zerlegen komplexer Systeme inuberschaubare Teile, das Formalisieren und Interpretieren f ordern und fordern die Abstraktionsf ahigkeit und das Erfassen logischer Zusammenh ange. Bei der Modellbildung, die bei der Konstruktion und Analyse von Informatiksystemen eine entscheidende Rolle spielt, uben die Sch uler in besonderem Mae, eine Situation von verschiedenen Standpunkten aus zu beurteilen" (KMK 2004, S. 3; Hervorh. durch den Autor). Mit dem Hinweis, dass es bei der Analyse von Informatiksystemen wichtig ist, verschiedene Standpunkte einzunehmen, ist f ur ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung ein Sichtenkonzept zu entwickeln ( !Inhalt 4: Sichten). Grundlage k onnen in einer ersten Ann aherung die Kategorien des nach auen sichtbaren Verhaltens, der inneren Struktur und ausgew ahlter Implementierungsaspekte bilden (Abschnitt 5.3) und entsprechende informatische Modelle. Bei dem Zusammenf uhren der unterschiedlichen Perspektiven auf Informatiksysteme wird die Lehrperson darauf hingewiesen (KMK 2004, S. 12), dass sie m oglichst zusammenh angende Teilaufgaben stellen soll, die unterschiedliche Blickrichtungen und m ogliche Vernetzung f ordern (!Methodik 9: Vernetzung der Unterrichtsinhalte). Dementsprechend bieten sich Experimente als Analyseaufgaben an, die die Kombination der Perspektiven erm oglichen (!Methodik 4: Analyse des Systems { Experimente; Abschnitt 5.5). Die Wichtigkeit von Informatiksystemen wird in den EPA auch durch den angegebenen fachlichen Inhaltsbereich"Interaktion mit und von Informatiksystemen" betont, beispielsweise sollen die Sch uler verschiedene typische Informatiksysteme ( !Inhalt 1: Typische Repr asentanten) als Werkzeuge nutzen k onnen (vgl. KMK 2004, S. 6). Somit legen die EPA Informatik Wert auf das Strukturieren und systematische Zerlegen von Informatiksystemen, auf Interaktion zwischen Informatiksystemen, beispielsweise mit Protokollen und einem Schichtenmodell, sowie auf die MenschMaschine-Interaktion. Insbesondere wird Modellbildung als Grundlage einer Analysef ahigkeit betont, die uber Bedienerfertigkeiten hinaus geht ( !Methodik 2: Kognitive Modelle). Neben dem von Modrow fest gestellten Mangel bez uglich der technischen Grundlagen der Informatik in den EPA ist die sehr starke Fokussierung auf die Beschreibung von Systemteilen in Modellen fur Kompetenzentwicklung mit Informatiksystemen nicht allein ausreichend. Dies liegt vor allem daran, dass eben auch konkretes Systemverhalten betrachtet werden muss und theoretische Hintergr unde aller Hauptfunktionen von Informatiksystemen zu analysieren sind (Kapitel 3). Es stellt sich die Frage, inwieweit die Anforderungsbereiche I-III der EPA zur Bestimmung von Niveaustufen in einem Kompetenzmodell f ur die informatische Bildung dienen k onnen. Auf der INFOS 2005 (Friedrich 2005) skizziert Hubwieser, wie durch Konsens uber Postulate die Durchsetzung des Fachs Informatik nach dem Ansatz der Informationszentrierung in Bayern gelang (Hubwieser 2005). Darunter ist das Postulat"Tiefgreifendes Verst andnis statt Benutzerfertigkeit", das auf ubertragbare, langlebige Konzepte statt Bedienerschulung setzt. Das Postulat"Werkzeuge in Reichweite" wiederum fordert neben dem Verst andnis grundlegender Konzepte die gedankliche Durchdringung allgegenw artiger Softwaresysteme, wodurch praktische Arbeit am Rechner impliziert ist (Hubwieser 2005, S. 29). Damit kann auch ein m oglicher Vorwurf mangelnder Kreativit atsforderung bei der Fokussierung auf Basiskompetenzen zu Informatiksystemen entkr aftet werden: Die F orderung von Kreativit at und Teamarbeit sind in der Informatik eben nicht ausschlielich bei der Konstruktion bzw. Programmierung von Informatiksystemen in Projektarbeit m oglich. Genauso kann Unterricht diese Aspekte integrieren, indem theoretische Grundlagen durch bewusstes Anwenden am Rechner veranschaulicht werden ( !Ziel 5: Bereitschaften). Die Dissertationsschrift von Vo (2006) zeigt, wie Standardsoftware anhand von Modellen und informatischen Konzepten verstanden werden kann. Vo stellt ein Vorgehen zu Anwenderschulungen f ur Tabellenkalkulationen und Textverarbeitung in der beruichen Weiterbildung vor, das im Kontext der Informationszentrierung auch in der Sekundarstufe II erprobt wurde (Vo 2005b). Motivation ist die zunehmende Komplexit at von Standardsoftware, die durch informatische Bildung verst andlich wird:72 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung "Eine eziente Nutzung der zunehmend komplex gestalteten B uroanwendungen setzt umfassendes und vernetztes Wissen voraus [. . . ]. Informatische Modelle bieten eine M oglichkeit, Dokumentstrukturen zu repr asentieren, die im Gegensatz zu den schnelllebigen Benutzungsober achen l angerfristig Bestand haben und helfen k onnen, die Arbeitsweise moderner Softwaresysteme zu erkl aren" (Vo 2006, S. III; Hervorh. durch den Autor). Ihr Ziel ist ein Konzept f ur eine nachhaltige Benutzerschulung. Sie identiziert informatische Modelle in der Standardsoftware: "Die Prinzipien der objektorientierten, zustandsorientierten bzw. funktionalen oder ablauforientierten Modellierung werden am konkreten Anwendersystem entdeckt und verstanden" (Vo 2005b, S. 286). Kennzeichnend f ur ihre Arbeit ist ein objektorientiertes Re-engineering der Informatiksysteme. Daraus ergeben sich zwei Konsequenzen: Erstens werden Standardsoftwaresysteme in der vorliegenden Entwicklung des Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung ausgeklammert, da die Arbeit von Vo diesen Bereich abdeckt. Zweitens ist aus ihrer Vorgehensweise abzuleiten, dass Modellierungen von Informatiksystemteilen zu entwickeln bzw. vorhandene informatische Konstrukte und Modelle f ur den Informatikunterricht nutzbar zu machen sind (! Inhalt 2: Strukturmodelle; Abschnitt 5.4). Diese k onnen dann als Grundlage einer systematischen Erkundung eines Informatiksystems dienen, in der Wirkprinzipien entdeckt und verstanden werden ( !Methodik 4: Analyse des Systems { Experimente; Abschnitt 5.5). Koubek (2005) greift Aufbau und Funktionsweise von Informatiksystemen in einem Kompetenzmodell auf. Er stellt zwei getrennte Kompetenzstufungen f ur eine informatische Allgemeinbildung vor, die im Unterricht zu kombinieren sind. Die erste beschreibt das diskursive Grundverst andnis der Sch uler zum informationstechnologischen Inhalt, d. h. sozio-kulturelle Themen wie Ethik, Datenschutz und Urheberrecht. Die zweite Stufung zielt auf technische Kompetenzen ab. Deren erste Ebene umfasst technische Hintergr unde zu Kernthemen wie Datenbanken und Kommunikationswerkzeugen. Die zweite Stufe stellt eine Vertiefung in die Komponenten von Hardund Software dar."Aufbau und Funktionsweise der Informatiksysteme verstehen" bildet die mittlere Kompetenzstufe. Beispiel ist, dass Sch uler ein Verst andnis f ur Schichtenarchitektur entwickeln und mit der Hardund Software des Schulsystems arbeiten k onnen (Koubek 2005, S. 59). Die nachfolgenden beiden Stufen beinhalten das Modellieren und Implementieren sowie das L osen von Problemen der eigenen Lebenswelt mit informatischen Methoden. Koubek betont, dass diese letzten Ebenen nur in Kombination mit Kompetenzen zum diskursiven Grundverst andnis erklommen werden k onnen. Positiv an dem Modell der zwei Kompetenztreppen nach Koubek ist sicherlich die klare Trennung zwischen technischen und sozio-kulturellen Aspekten. Dennoch fehlt es an konkreten Angaben, wie die Kompetenztreppen zu verbinden sind ( !Inhalt 4: Sichten). Gelingt die Verbindung, so unterst utzt sie die Gestaltung komplexer Anforderungssituationen, z. B. Datenschutz, im Sinne der Kompetenzdenition nach Weinert (Abschnitt 2.1). Kritik ist jedoch hinsichtlich Informatiksystemen und Kompetenzentwicklung durch die Frage anzubringen, warum gerade das Implementieren als Teil der h ochsten Kompetenzebene das Ziel bildet. Der ebenfalls auf dieser Kompetenzebene genannte Aspekt hingegen, dass Sch uler in der Lage sein sollen, Informationstechnologien ihren W unschen und Bed urfnissen entsprechend einzusetzen, entspricht den mit der F orderung der Kompetenzentwicklung mit Informatiksystemen verfolgten Zielen. Zur F orderung der Kompetenzentwicklung mit Informatiksystemen werden auch Simulationen eingesetzt. Herper und Hinz (2005) beschreiben, wie Sch uler ein informatisches Schienenverkehrssystem mit Signalsteuerung mittels unterschiedlicher Modellierungen analysieren und implementieren k onnen. Dazu skizzieren sie eine Unterrichtssequenz f ur 26 Unterrichtsstunden. Schwerpunkte darin sind das Verstehen des Modells bestehend aus mechanischer Funktionalit at, Hardund Software sowie Sensorik und Aktorik. Nach Modellierung in einem Klassendiagramm wird eine Simulation des Systems zur Entwicklung der Signalsteuerung eingesetzt. Bez uglich4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 73 Informatiksysteme und Kompetenzentwicklung ist klar zu stellen, dass f ur dieses Szenario eine Abgrenzung der Systembegrie vorzunehmen ist (Abschnitt 3.2.1). Zu trennen sind das zugrunde liegende Informatiksystem und seine Umwelt, in die es einwirkt. Die Simulation des Gesamtsystems wiederum er onet viele M oglichkeiten des Experimentierens mit unterschiedlichen Eingaben und Systemkonstellationen ( !Methodik 4: Analyse des Systems { Experimente). Eine Alternative zur Simulation bildet der Einsatz von Robotersystemen, wie Wiesner und Brinda ihn f ur den Informatikunterricht nutzen. Sie berichten insbesondere von Erfahrungen bei der Vermittlung von Algorithmen anhand eines konkreten Robotersystems (Wiesner und Brinda 2007). Dabei nutzen sie die mechanisch-technischen Komponenten vornehmlich als motivationalen Faktor (!Ziel 5: Bereitschaften; (vgl. Hirsch et al. 2000)), haben aber das Ziel, Sch ulern das formale Beschreiben von Abl aufen anhand des Analysierens, Modellierens, Implementierens und Reektierens handlungsorientiert nahe zu bringen (Wiesner und Brinda 2007, S. 117). Interessant ist fur Informatiksysteme und Kompetenzentwicklung dar uber hinaus, dass Robotersysteme genutzt werden k onnen, um Verteiltheit zu thematisieren. B udding (2007) verst arkt diesen Eekt noch, indem er Robotersysteme im Rahmen des mobilen Lernens mit tragbaren Rechnern, so genannten"Personal Digital Assistant" (PDA), im Informatikunterricht einsetzt. Roboter werden kabellos mit PDAs vernetzt und k onnen von den Sch ulern uber die PDAs gesteuert werden. Wursthorn (2006) erarbeitet in ihrer Dissertation, welche informatischen Grundkonzepte f ur Klasse 5 der Realschule im f acher ubergreifenden Unterricht geeignet sind. In ihrer Einteilung der Unterrichtsinhalte fasst sie unter Wirkprinzipien von Informatiksystemen die Bereiche Codierung im Sinne von Abbildevorschriften, Algorithmisierung und Automatisierung zusammen. Fur Algorithmisierung beruft sie sich auf die fundamentalen Ideen nach Schwill und f ur Automatisierung auf den informationszentrierten Ansatz (Wursthorn 2006, S. 22). Warum sie genau diese Grundkonzepte w ahlt, bleibt jedoch trotz vorheriger Analyse des Forschungsstandes unklar. Wursthorn geht davon aus, dass diese Themen in Klassenstufe 5 von den Sch ulern verstanden werden k onnen und weist anhand von Sinn-, Zeit-, Zielund Horizontalkriterium nach, dass es sich um fundamentale Ideen der Informatik nach Schwill handelt ( !Inhalt 3: Fundamentale Ideen). Im Anschluss an die einj ahrige Studie mit einer Schulklasse stellt Wursthorn eine ver anderte Einstellung der Sch uler zum Rechner fest. Insbesondere haben die Sch uler erkannt, dass der Rechner nur Anweisungen durch ein Programm und Benutzereingaben abarbeitet: Das Gef uhl der Kinder, dass der Computer undurchschaubar ist, hat bei einigen am Ende des Schuljahres abgenommen. [. . . ] V ollig unerkl arlich ist die Annahme fast aller Sch ulerinnen und Sch uler, dass der Computer nur Fehler mache, wenn er falsch bedient w urde. Mehrfach hatten die Kinder im Unterricht selbst erfahren, dass ihre Logo-Programme ,Fehler' machten, weil sie von ihnen selbst nicht korrekt erstellt worden waren" (Wursthorn 2006, S. 188). Sicherlich spielt neben der systematischen Heranf uhrung an informatische Grundkonzepte die Besch aftigung mit dem Rechner uber einen langen Zeitraum in vier Schulf achern bei der veranderten Einstellung der Sch uler eine groe Rolle. Wursthorn schlussfolgert, dass die Sch uler nicht zwischen der Anwendung und Programmierung unterscheiden (Wursthorn 2006, S. 188). Fur Informatiksysteme und Kompetenzentwicklung ist damit wiederum ein Schwerpunkt auf die Universalit at zu legen und den Sch ulern M oglichkeiten und Grenzen aufzuzeigen ( !Methodik 1: Universalit at). Freischlad stellt 2006 sein Forschungsprojekt"Didaktisches System Internetworking" vor, das eine Kollektion abgestimmter Komponenten des Lehr-Lernprozesses zur fachdidaktischen Kommunikation und Umsetzung im Unterricht zum Ziel hat. Ausgangspunkt sind die Anforderungen, die der zunehmende Einsatz digitaler Medien im Alltag an den m undigen B urger stellt (Freischlad 2006). Schwerpunkte sind Anwenden und Verstehen des Internets ( !Inhalt 1: Typische Repr asentanten) mit Bezug zu Strukturen, Kommunikationsbeziehungen und Informationssicherheit im Internet (Freischlad 2007). Hinsichtlich der drei Charakteristika von Informatiksystemen ist festzustellen, dass der Bereich Strukturen im Internet sicherlich der inneren Struktur74 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung des Informatiksystem inklusive Abl aufen zuzuordnen ist ( !Inhalt 4: Sichten). Protokolle und Architekturen wie Client-Server-Architektur fallen hierunter. Kommunikationsbeziehungen und Informationssicherheit sind dann sowohl auf der Ebene des nach auen sichtbaren Verhaltens als auch auf der Ebene der zugrunde liegenden Strukturen und Wirkprinzipien zu betrachten. Mehr als in anderen Informatiksystemen lassen sich beim Internet die Netzverbindungen thematisieren. Hinsichtlich der Hauptfunktionen von Informatiksystemen birgt das Internet damit unterrichtliche Ankn upfungspunkte in den Bereichen Kooperation, Koordinierung und Lokalit at von Information. Andere Hauptfunktionen sind ggf. schwieriger im Unterricht zu verankern (Abschnitt 3.2.2). Freischlad analysiert Fachb ucher der Hochschulausbildung und extrahiert einen Katalog von Aufgabenklassen als erste Komponente des didaktischen Systems. Die Planung und mehrfache Erprobung seines Konzeptes im Informatikunterricht der Sekundarstufe II resultieren in Beschreibungen von Wissensstrukturen. Eine umfassende und in weiten Teilen explorative Lernsoftware zur Interaktion mit den Wirkprinzipien vervollst andigt als dritte Komponente das didaktische System ( !Medien 2: Interaktion mit Wirkprinzipien). Da das Internet ein allgegenwartiges, konkretes Informatiksystem ist, wurden einige Synergien zwischen dem didaktischen System Internetworking und einem Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen erzielt (vgl. Schubert et al. 2007). Grund ist, dass das Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung mit Ergebnissen zum didaktischen System Internetworking verglichen und auf Konsistenz bzw. bereichsspezische Abwandlungen uberpr uft werden kann. Stechert pr asentiert auf der INFOS 2007 (Schubert 2007) Ergebnisse der Erprobung seines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung in der Sekundarstufe II (Kapitel 6; (Stechert 2007c)). Eine erstes Konzept f ur den Einsatz von objektorientierten Entwurfsmustern wurde auf der INFOS 2005 vorgestellt. Da in einigen Entwurfsmustern Potential zur Vernetzung fundamentaler Ideen der Informatik identiziert wurde (Stechert 2006b), sind sie als Wissensrepr asentation Bestandteil des Unterrichtsmodells (Abschnitt 5.4; (Stechert 2006c)). Grundlage der Strukturierung der Lernphasen sind zu diesem Zeitpunkt das nach auen sichtbare Verhalten, die innere Struktur und ausgew ahlte Implementierungsaspekte von Informatiksystemen. Verschiedene konkrete Informatiksysteme sind f ur Kompetenzentwicklung im Informatikunterricht zu thematisieren. Doebeli Honegger (2007) nutzt Wikis als Informatiksysteme mit Werkzeugfunktion im Sinne eines Lernmittels, aber auch als Lerngegenstand in der Schule. Dazu identiziert er fundamentale Ideen nach den Kriterien von Schwill (1993a) in Wikis ( !Inhalt 3: Fundamentale Ideen). Obwohl Wikis netzbasiert sind, ist das Thema im Gegensatz zum gesamten Bereich Internetworking st arker Lernmittel denn Lerngegenstand im Informatikunterricht. Das Interessante dieses Ansatzes f ur Kompetenzentwicklung mit Informatiksystemen ist, dass fundamentale Ideen der Informatik zur Begr undung des Bildungswertes nicht im Softwareentwicklungsprozess, sondern bei der Anwendung bzw. als Systemeigenschaften identiziert werden. Antonitsch (2007) stellt in der g angigen fachdidaktischen Literatur zu Datenbanken zwei Vermittlungskonzepte fest, einmal basierend auf dem Anwendungsaspekt (Werkzeugebene) und einmal auf dem Modellierungsaspekt (konzeptueller und logischer Entwurf gefolgt von Normalisierung und Abfragen). Als Alternative stellt er das Konzept"Erforschen und Anwenden" vor. Zentral darin ist das Strukturieren durch die Sch uler, welches Modellieren und Anwenden integriert: ",Vollst andiges Strukturieren' ist in diesem Zusammenhang vielmehr als Prozess mit den Phasen ,Erlernen von Regeln zur Strukturbildung' { ,Anwenden von Regeln zur Strukturbildung' { ,Datengewinnung aus erzeugten Strukturen' { ,Hinterfragen erzeugter Strukturen' zu verstehen" (Antonitsch 2007, S. 231). Antonitsch erstellt eine t atigkeitsorientierte Sicht auf Anwendungsund Modellierungsebene von Datenbanken, um diese dann mit konkreten Anwendungsf allen zu untersetzen. Seine Vorgehens-4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 75 weise kann als Vorgehensmodell aufgefasst werden, ahnlich wie es eines f ur die Anwendungsorientierung gab (Abschnitt 4.2.1). Er erprobte das Konzept mit 13 Sch ulern in ca. sieben Doppeleinheiten  a 100 Minuten (Antonitsch 2007, S. 233f). Es ist zu pr ufen, ob und inwieweit das Konzept"Erforschen und Anwenden von Datenbanksystemen" auf Informatiksysteme verallgemeinert werden kann (! Inhalt 1: Typische Repr asentanten;!Methodik 4: Analyse des Systems { Experimente). Gerade die Kombination eines entdeckenden Ansatzes zur bewussten Anwendung mit dem Erstellen entsprechender Modelle erscheint viel versprechend (vgl. (Thomas 2002), (Vo 2006)). F ur Kompetenzentwicklung ist eine aussagekr aftige t atigkeitsorientierte Sicht auf Informatiksysteme zu verallgemeinern (vgl. Schubert und Schwill 2004, S. 41), die Anwendungsund Modellierungsebene anspricht und auch die Diskussion um Konsequenzen einschliet (!Methodik 7: Von der Anwendung zur Maschine; Abschnitt 5.5). 4.2.5 Informatiksysteme und Kompetenzentwicklung in den Bildungsstandards f ur die Sekundarstufe I Der Fachausschuss"Informatische Bildung in Schulen" und die Fachgruppe"Didaktik der Informatik", beide in der GI, erarbeiteten seit 2003 Bildungsstandards f ur die Informatik in der Sekundarstufe I. Da nur in wenigen Bundesl andern Informatik in der Sekundarstufe I verpichtend angeboten wird, ist es legitim und notwendig, die Bildungsstandards auf ihren Beitrag zur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II zu analysieren. Die Informatikbildungsstandards beruhen sowohl auf den Mathematikstandards (Carpenter und Gorg 2000) des US-amerikanischen Mathematiklehrerverbandes National Council of Teachers of Mathematics (NCTM) als auch auf dem Bildungsstandardbegri, wie er in der Expertise"Zur Entwicklung nationaler Bildungsstandards" (Klieme et al. 2007) verwendet wird (vgl. GI 2008, S. 3). Erstere stellen die Inhalte des schulischen Lernens und letztere die Lernergebnisse in den Vordergrund. Die Kombination dieser gegenl augen Sichtweisen in den Mindeststandards f ur die Informatik resultiert in so genannten Kompetenzbeschreibungen, die durch ihre konkreten Inhaltsvorgaben nicht mehr mit dem in der vorliegenden Arbeit verwendeten Kompetenzbegri (Abschnitt 2.1) nach Weinert (2001) und Klieme et al. (2007) ubereinstimmen. Daher werden diese im Folgenden als Bildungsziele referenziert. W ahrend die Wichtigkeit von Informatiksystemen fur den Informatikunterricht unbestritten ist, wurde bei der Entwicklung der Bildungsstandards vieluber ihre Rolle in den Standards diskutiert: "In einer fr uhen Phase der Diskussion wurde auch ein Themenstrang ,Informatiksysteme' genannt. Viele der diesem Strang zugeordneten Inhalte beziehen sich auf die praktische Umsetzung eines Aspekts aus einem anderen Inhaltsbereich. Das ist aber ein generelles Ziel des Informatikunterrichts: zwar auch ohne Computer Einsichten zu erlangen, aber diese nicht im Abstrakten zu belassen, sondern am Computer (oder ggf. mit einem anderen Informatiksystem) handelnd praktisch werden zu lassen. Ein solches generelles Ziel sollte aber nicht als Themenstrang, sondern als Prinzip des Unterrichts genannt werden" (Puhlmann 2005, S. 84). Diese Auassung hat sich wiederum gewandelt. Aufbau und Funktionsweise von Informatiksystemen zu verstehen, wird sowohl als ubergeordnetes Ziel als auch in einem gesonderten Inhaltsbereich betrachtet. So wird als ubergeordnetes Ziel formuliert, dass jeder Sch uler "in die Lage versetzt werden [soll], auf einem der jeweiligen Schulart angemessenen Niveau den grundlegenden Aufbau von ,Informatiksystemen' und deren Funktionsweise zu verstehen, um damit einerseits deren zielgerichtete Anwendung bei der L osung von Problemen, aber auch die leichte Erschlieung anderer Systeme der gleichen Anwendung zu erm oglichen" (GI 2008, S. 11). Es wird betont, dass dieses Ziel nicht erreicht werden kann, wenn Informatikunterricht ausschlielich auf der Ebene der Benutzungsschnittstelle verbleibt ( !Ziel 1: Aufbau, Vernetzung und Funktionsweise). In den Bildungsstandards Informatik wird zwischen Inhaltsund Prozessbereichen unterschieden, wie es in Diskussionen w ahrend eines Dagstuhlseminars (Magenheim und Schubert 2004) angeregt wurde (vgl. Magenheim 2005). Die Inhaltsbereiche in den Bildungsstandards nennen die inhaltlichen Anforderungen an Sch uler am Ende der 7. bzw. 10.76 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Jahrgangsstufe. Sie sind in f unf Bereiche aufgeteilt: Information und Daten, Algorithmen, Sprachen und Automaten, Informatiksysteme sowie Informatik, Mensch und Gesellschaft. Die Prozessbereiche wiederum sind Modellieren und Implementieren, Begr unden und Bewerten, Strukturieren und Vernetzen, Kommunizieren und Kooperieren sowie Darstellen und Interpretieren. Als Zugang zur Erreichung des ubergeordneten Ziels, Aufbau und Funktionsweise von Informatiksystemen zu verstehen (GI 2008, S. 11), wird folgende Reihenfolge der miteinander verzahnten Inhaltsund Prozessbereiche vorgeschlagen: "Den Ausgangspunkt f ur einen produktunabh angigen Zugang bildet daher die ,Darstellung' bzw. Reprasentation von ,Information' zu Problemen aus der Lebenswelt der Sch ulerinnen und Sch uler durch ,Daten' in Informatiksystemen verschiedener Anwendungsklassen. Dabei lernen die Sch ulerinnen und Schuler auch von Informatiksystemen produzierte Daten im Hinblick auf die darin enthaltene Information zu ,interpretieren'. Weiterhin erkennen sie, dass Information in festgelegter Art und Weise, unter Verwendung bestimmter ,Sprachen' dargestellt werden muss, damit ein Informatiksystem diese mittels ,Automaten' und ,Algorithmen' verarbeiten kann. Dies erm oglicht ihnen einen intuitiven Zugang zur ,Modellierung' des grundlegenden Aufbaus und der Funktionsweise von Informatiksystemen und deren exemplarischer ,Implementierung'. Diese Betrachtung hilft den Sch ulerinnen und Schulern auch, die prinzipiellen M oglichkeiten und potenziellen Gefahren und Risiken zu erkennen und darauf sachgerecht zu reagieren. Sie erkennen und bewerten damit relevante Zusammenh ange zwischen ,Informatik, Mensch und Gesellschaft' " (GI 2008, S. 11f). Kompetenzen bzw. Bildungsziele aus den Prozessbereichen Begr unden und Bewerten, Kommunizieren und Kooperieren sowie Strukturieren und Vernetzen sollen dabei von Beginn an einbezogen werden (GI 2008, S. 12). Damit wird die Schwierigkeit der Zuordnung von Unterrichtsinhalten zu den Leitlinien der GI-Empfehlung aus dem Jahr 2000 behoben, insbesondere die Trennung der Leitlinie"Wirkprinzipien von Informatiksystemen" von der"Informatischen Modellierung" (Abschnitt 4.2.4). Die neue Aufteilung in Inhaltsund Prozessbereiche impliziert, dass der Inhaltsschwerpunkt Informatiksysteme bez uglich aller Prozessbereiche zu betrachten ist, wenngleich die oben beschriebene Verzahnung der Bereiche dies zum Teil relativiert: "Daruber hinaus { und f ur den Unterricht von groer Bedeutung { sind aber auch Inhalte und Prozesse aufeinander angewiesen. Die Prozesskompetenzen werden an der Arbeit mit den Inhalten erworben, ohne die Inhalte w aren viele von ihnen nicht spezisch f ur die Informatik. Umgekehrt stunden die Inhalte ohne Prozesse in der Gefahr, zu einer Wissenssammlung [. . . ] zu verkommen" (GI 2008, S. 45). Eine Interpretationsschwierigkeit liegt jedoch dadurch vor, dass das ubergeordnete Ziel der Bildungsstandards, das Aufbau und Funktionsweise von Informatiksystemen zur zielgerichteten Anwendung und zum leichten Erschlieen weiterer Informatiksysteme beinhaltet, fast gleichlautend als Ziel des Inhaltsbereichs Informatiksysteme ubernommen wurde. Kritisch zu sehen ist auch die Gleichsetzung von Informatiksystemen mit Alltagsger aten, die elektronische Komponenten besitzen: "Beispiele f ur Informatiksysteme sind Computer und Handys. Informatiksysteme sind aber auch u. a. in DVD-Rekordern, Waschmaschinen, Autos, Foto und Videokameras enthalten" (GI 2008, S. 37). Diese Aussage steht in direktem Widerspruch zur Ansicht von Schubert und Schwill, die betonen, dass es bei der informatischen Bildung um die notwendige Organisation des eigenen Denkens geht, um Informatiksysteme bewusst anwenden zu k onnen (Schubert und Schwill 2004, S. 253). Rechner, und mittlerweile Mobiltelefone, sind frei programmierbar. Die Universalit at stellt somit eine kognitive H urde dar, die mittels informatischer Bildung zu uberwinden ist (!Methodik 1: Universalit at; Abschnitt 3.2.1). Bei vielen Alltagsger aten mit elektronischer Komponente ist die Notwendigkeit informatischer Bildung zur bewussten Anwendung jedoch nicht nachzuvollziehen. Sie sind allenfalls als ein motivierendes Beispiel f ur bestimmte Aspekte von Informatiksystemen heranzuziehen (!Ziel 5: Bereitschaften). Die Bildungsziele zu Informatiksystemen sind strukturiert nach der Hardware, Software und Vernetzung als Bestandteile von Informatiksystemen. In den Jahrgangsstufen 5 bis 7 sollen die Schuler wichtige Bestandteile von Informatiksystemen benennen und Eingabe, Verarbeitung und4.2. Analyse des nationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 77 Ausgabe zuordnen. Lokale und globale Netze sollen sie unterscheiden k onnen sowie Betriebssystem und Anwendungssoftware dierenzieren (GI 2008, S. 17). Als weitere Grundlage f ur Fahigkeiten zum Aufbau von Informatiksystemen sollen die Sch uler Daten speichern und Arten der Speicher unterscheiden k onnen. F ur das zielgerichtete Anwenden von Informatiksystemen verwenden sie Dateien und verwalten diese in Verzeichnissen, arbeiten mit graschen Benutzungsoberachen, bearbeiten Dokumente mit ausgew ahlten Anwendungen und arbeiten in Netzen (GI 2008, S. 38). Um sich weitere Informatiksysteme erschlieen zu k onnen, m ussen die Sch uler den Grundaufbau von Informatiksystemen wieder erkennen, die in anderen Ger aten integriert sind und gleichartige Aufgaben mit unterschiedlichen Programmen der gleichen Anwendungsklasse losen (!Inhalt 1: Typische Repr asentanten). In den Jahrgangsstufen 8 bis 10 sollen die Sch uler Kenngr oen von Hardwarebestandteilen kennen sowie Hardund Software klassizieren. F ur das zielgerichtete Anwenden von Informatiksystemen erweitern sie bestehende Informatiksysteme um Softund Hardwarekomponenten, setzen das Betriebssystem f ur ihre Zwecke ein, kennen unterschiedliche Dateiformate, sind in der Lage problemangemessene Anwendungen auszuw ahlen und nutzen Internetdienste. Auerdem sollen sie sich selbstst andig neue Anwendungen und Informatiksysteme erschlieen k onnen (GI 2008, S. 39). Die genannten Bildungsziele werden in den Standards weiter pr azisiert und mit einzelnen Beispielen unterlegt. Bez uglich Informatiksysteme oenbart sich bei der Analyse des Inhaltsbereichs der Informatiksysteme jedoch auch ein Mangel an Konkretisierung. So wird eine Systematik zu Informatiksystemen angegeben, die Hardware, Software und Anwendungssoftware auistet und jeweils potentielle Unterkategorien nennt. Dennoch fehlt eine Angabe weiterer m oglicher Anwendersoftwareklassen, die im Informatikunterricht betrachtenswert sind, und eine Angabe von Gr unden fur die Auswahl der angegebenen Repr asentanten Textverarbeitung, Tabellenkalkulation, Datenbanken, Multimedia, Spiele und Kommunikation. Als Unterscheidungsmerkmal zwischen den Anwendungsprogrammen werden beispielsweise unterschiedliche Dateiformate angegeben, Verhalten und Funktionen werden aber nur implizit als Unterscheidungskriterien genannt: "Zur Auswahl eines problemad aquaten Anwenderprogramms geh ort auch die grundlegende Uberlegung, ob f ur die L osung des Problems ein Informatiksystem uberhaupt erforderlich ist. Im n achsten Schritt erfolgt die korrekte Auswahl der Anwendung. So werden zum Beispiel Texte mit einem Textverarbeitungssystem geschrieben, Berechnungen in der Tabellenkalkulation durchgef uhrt oder Daten in Datenbanksystemen gesammelt und verwaltet" (GI 2008, S. 40). In der Beschreibung der Prozessbereiche wird immer auch ein Bezug zu dem Inhaltsbereich "Informatiksysteme" hergestellt. In dem Prozessbereich"Modellieren und Implementieren" wird das Modellieren durch die vier Teilschritte Problemanalyse, Modellbildung zur zweckm aigen Probleml osung mit einem Informatiksystem, Implementierung und Modellkritik charakterisiert. In den Jahrgangsstufen 5 bis 7 sollen Sch uler Informatiksysteme unter dem Aspekt der zugrunde liegenden Modellierung betrachten und Objekte mit ihren Attributen in Informatiksystemen identizieren, um die Zweckm aigkeit der Modellierung zu pr ufen (vgl. GI 2008, S. 19). Auerdem sollen Sch uler bereits implementierte Systeme mit geeigneten Werkzeugen analysieren. Eine Konkretisierung dieser Forderung bleibt jedoch aus, und es ist unklar, inwieweit Quelltextanalyse oder der Einsatz von Softwareentwicklungswerkzeugen an dieser Stelle gemeint sind. Genannt werden objektorientierte Modelle und deren Darstellung mit Klassendiagrammen, Datenmodelle und Zustandsdiagramme. Es wird allerdings betont, dass es auf dieser Jahrgangsstufe kaum moglich ist, Modelle selbst zu implementieren. Letzteres ndet vermehrt in den Jahrgangsstufen 8 bis 10 statt. Daraus folgt f ur Informatiksysteme und Kompetenzentwicklung, dass Sch uler erste bereits implementierte Systeme modizieren sollten ( !Methodik 6: Modikation statt Entwicklung; Abschnitt 5.5). Der Prozessbereich"Begrunden und Bewerten" setzt bez uglich des Einsatzes von Informatiksystemen die Kenntnis informatischer Sachverhalte in den Mittelpunkt, damit die Vorgehensweisen78 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung bei der Nutzung eines Systems zur Probleml osung nicht nur intuitiv oder spielerisch sind. In Jahrgangsstufe 8 bis 10 sollen die Sch uler Kriterien zur Auswahl von Informatiksystemen f ur die Probleml osung anwenden, bewerten und Informatiksysteme verantwortlich nutzen (GI 2008, S. 48f). Daraus folgt, dass es einer systematischen Vorgehensweise zur Erkundung implementierter Systeme bedarf ( !Methodik 4: Analyse des Systems { Experimente; Abschnitt 5.5.1). In dem Prozessbereich"Strukturieren und Vernetzen" werden Methoden zur Darstellung und Umsetzung von Systemen thematisiert, z. B. hierarchische Strukturen, um Aufbau und Funktionsweise von Anwendungen zu erfassen (GI 2008, S. 51). Dabei kommen Analogien und der Ubertragung von L osungswegen auf andere Bereiche Schl usselrollen zu (GI 2008, S. 51). Die Nahe dieses Prozessbereichs zur fundamentalen Idee der strukturierten Zerlegung nach Schwill ist oenkundig. Daraus folgt f ur Informatiksysteme und Kompetenzentwicklung, dass Strukturmodelle zur L osung von Teilproblemen in Informatiksystemen zu thematisieren sind, die in unterschiedlichen Systemen eingesetzt werden k onnen (!Inhalt 2: Strukturmodelle; Abschnitt 5.4). Weiterer Prozessbereich ist"Kommunizieren und Kooperieren". In diesem werden Informatiksysteme haupts achlich als Medium eingesetzt, sowohl als Mittel zur Pr asentation eigener Ergebnisse als auch als Werkzeug zum kooperativen Arbeiten und zum Kommunizieren. Dabei nutzen die Schuler in den Jahrgangsstufen 8 bis 10 synchrone und asynchrone Kommunikationsm oglichkeiten und diskutieren auftretende Konikte und Probleme. Hieraus folgt, dass die didaktische Doppelfunktion von Informatiksystemen hinsichtlich Lerngegenstand und -medium f ur die Kompetenzentwicklung zu thematisieren ist ( !Methodik 8: Medium und Gegenstand). Zuletzt wird der Prozessbereich"Darstellen und Interpretieren" beschrieben. Darin geht es vornehmlich darum, unterschiedliche Darstellungsformen komplexer Sachverhalte, also ggf. auch von Informatiksystemen, kennen zu lernen und Informatiksysteme als Werkzeuge zur Erstellung solcher Darstellungen einzusetzen. Somit ergeben sich nach Auassung des Autors mit Blick auf Informatiksysteme viele Uberschneidungen mit dem Prozessbereich"Modellieren und Implementieren", vor allem in den Jahrgangsstufen 5 bis 7, in denen Implementierungen von Informatiksystemen kaum vorgenommen werden. Weitere Uberschneidungen mit bzw. Ankn upfungspunkte zu anderen Inhaltsbereichen existieren ebenfalls. So sollen die Sch uler im Inhaltsbereich"Sprachen und Automaten"formale Sprachen zur Interaktion mit Informatiksystemen nutzen, was auch das Interpretieren von Fehlermeldungen sowie das EVA-Prinzip als grundlegendes Arbeitsprinzip von Informatiksystemen ( !Methodik 3: Verbindung von Verhalten und Struktur) einschliet (vgl. GI 2008, S. 16). Im Inhaltsbereich"Informatik, Mensch und Gesellschaft" werden als Bildungsziele das Benennen von Wechselwirkungen zwischen Informatiksystemen und ihrer gesellschaftlichen Einbettung, das Wahrnehmen von Entscheidungsfreiheiten im bewussten Anwenden von Informatiksystemen und das Handeln in Ubereinstimmung mit gesellschaftlichen Normen sowie das angemessene Reagieren auf Sicherheitsrisiken bei der Nutzung hervorgehoben (vgl. GI 2008, S. 13). Zusammenfassend liegt den Bildungsstandards f ur die Sekundarstufe I eine feingranularere Strukturierung durch Inhaltsund Prozessbereiche zugrunde als der GI-Empfehlung aus dem Jahr 2000, die sich auf vier Leitlinien berief. Wenngleich die inhaltliche Zuordnung weiterhin nicht immer eindeutig ist, so ist sie durch die beschriebenen Ankn upfungspunkte und die entsprechende Verzahnung der Bereiche nachvollziehbar. Bez uglich Informatiksysteme und Kompetenzentwicklung ist fest zu halten, dass Aufbau und Funktionsweise von Informatiksystemen ebenso thematisiert werden wie die Notwendigkeit, F ahigkeiten, Fertigkeiten und Bereitschaften zur Anwendung einer Informatiksystemklasse auf eine andere zu ubertragen. An dieser Stelle jedoch fehlt nach Ansicht des Autors eine Betrachtung des Verhaltens von unterschiedlichen Informatiksystemklassen hinsichtlich ihrer Gemeinsamkeiten und Dierenzen. F ur Kompetenzentwicklung sind daher typische Repr asentanten von Informatiksystemen von Sch ulern zu untersuchen und mit geeigneten Strukturmodellen zu erkl aren, um sie vergleichen und klassizieren zu k onnen.4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 79 Auerdem sollen laut Bildungsstandards Sch uler in den Jahrgangsstufen 5 bis 7 eine Zuordnung von Systemkomponenten zu Eingabe, Verarbeitung und Ausgabe vornehmen, aber die Vertiefung in den Jahrgangsstufen 8 bis 10 geschieht eher auf Ebene von Klassikationskennzahlen, denn hinsichtlich einer weiteren Vernetzung von Komponenten und Funktionsweise. Es fehlt weiterhin sowohl eine unterrichtspraktische Erprobung bez uglich der in den Bildungsstandards angegeben Bildungszielen zu Informatiksystemen sowie ein fundiertes Kompetenzmodell, denn die zwei angegebenen Niveaustufen erlauben nur wenig Dierenzierung in der Einsch atzung der Schulerleistung. Eine Unterscheidung zwischen dem nach auen sichtbaren Verhalten, der inneren Struktur und ausgew ahlten Implementierungsaspekte wird in den Mindeststandards nicht vorgenommen. Die Zuordnung von Komponenten eines Informatiksystems zu Eingabe, Verarbeitung und Ausgabe stellt einen Schritt in diese Richtung dar, gerade die Architektur mit den Beziehungen zwischen Komponenten wird dadurch jedoch zu wenig betont. 4.3 Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 4.3.1 Internationale Ausgangslage Fur Kompetenzentwicklung mit Informatiksystemen wird im Folgenden die internationale Diskussion historisch nachgezeichnet. Wie am Anfang des Kapitels begr undet, ist Ershovs Vortrag "Programming, the second literacy"auf der 3. IFIP World Conference on Computers in Education (WCCE) in Lausanne aufgrund seines Einusses auf die nachfolgende Forschung als Startpunkt gewahlt. Ershov impliziert mit dem Begri"programming literacy", dass die Informatik eine neue Kulturtechnik ist. Er sieht in der Programmierung den einzigen Weg, mit einem Rechner zu kommunizieren und ihn als Werkzeug f ur den m undigen Menschen zu nutzen. Um seiner Forderung nach einer verpichtenden informatischen Bildung zur Entmystizierung von Rechnern Nachdruck zu verleihen, zieht er deren volkswirtschaftliche Bedeutung heran: "In two generations communicating with a computer will become the concern of practically every person involved in social production. [. . . ] every man has learned to count and to write and secretaries have acquired new masters and new obligations. The same is bound to happen with programming: [. . . ] ordinary programming will be mastered by everyone. This is precisely what I call the second literacy" (Ershov 1981, S. 12). Durch den Wandel der Steuerung von Informatiksystemen seit 1981 von Programmbefehlen zur Menusteuerung ist die Schlussfolgerung, dass ein m undiger B urger heutzutage nicht programmieren k onnen, sondern Basiskompetenzen besitzen muss, um mit Informatiksystemen produktiv und zielgerichtet arbeiten zu k onnen. Im Folgenden werden die internationalen Curricula der UNESCO vor allem hinsichtlich beschriebener Bildungsziele und Empfehlungen zu Unterrichtsinhalten betrachtet. Dazu kommen die Curricula der ACM zur Schulinformatik, da sie als US-amerikanische Informatikfachgesellschaft einen starken internationalen Einuss hat. Anschlieend sind die Weltkonferenzen zum Einsatz von Rechnern in der Bildung (WCCE) im Fokus, die auf Forschungsund Erfahrungsberichte zur F orderung der Kompetenzentwicklung mit Informatiksystemen untersucht werden. Dazu kommen die seit 2005 stattndenden ISSEP-Konferenzen (Informatics in Secondary Schools { Evaluation and Perspectives) sowie eine alle zehn Jahre stattndenden Konferenz des Informatikweltverbandes IFIP zur Verkn upfung von Informatik und Mathematik in der Bildung, die fur Kompetenzentwicklung mit Informatiksystemen viele Anregungen bot. Die Habilitationsschrift von Eberle wird aufgrund ihres Einusses im deutschsprachigen Raum hinzugezogen, um Hinweise zur Lehr-Lernmethodik zu extrahieren. Nicht untersucht werden die international viel beachteten ACM-Konferenzen zu"Computer Science Education Research", namentlich SIGCSE (Special Interest Group on Computer Science Education: Technical Symposium on Computer80 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Science Education; seit 1970), ITiCSE (Innovation and Technology in Computer Science Education; seit 1996) und ICER (International Computing Education Research Workshop; seit 2005), da in ihnen fast ausschlielich hochschuldidaktische Fragestellungen zur Informatik thematisiert werden. Endpunkt des Untersuchungszeitraumes ist wiederum das Jahr 2007. 4.3.2 Internationale Informatikcurricula ACM Model High School Computer Science Curriculum 1993 wurde das"ACM Model High School Computer Science Curriculum" ver oentlicht, das eine ACM-Arbeitsgruppe bestehend aus Lehrern, Hochschulinformatikern und Administratoren verfasst hatte. Es beschreibt einen einj ahrigen, f ur alle Sch uler verpichtenden Kurs, der an der Schnittstelle zwischen den Sekundarstufen I und II angesiedelt ist und informatische Bildung erstmalig viel pr aziser als die Forderungen von 1981 beschreibt. Es werden f unf Pichtbereiche genannt: Algorithmen, Programmiersprachen, Betriebssysteme, Rechnerarchitektur sowie sozialer, ethischer und professioneller Kontext. Auerdem werden die zwei optionalen Bereiche Anwendungen (z. B. Datenbanken, Computeralgebrasysteme) und Additivum (z. B. Softwaretechnik, k unstliche Intelligenz) beschrieben. Von den optionalen Bereichen soll mindestens einer in den Unterricht integriert werden. Fur Kompetenzentwicklung mit Informatiksystemen relevant erscheint mit Blick auf die jeweiligen Inhalte vor allem der Bereich 3 zu Betriebssystemen als einer Informatiksystemklasse (Tabelle 4.3). Neben dem Kernthema Telekommunikation mittels Rechnernetzen ist ein empfohlenes Ziel darin das Arbeiten mit komplexen Systemen (working with large complex systems (ACM 1993, S. 4)), bei dem auch die Mensch-Maschine-Interaktion betrachtet wird: "They [students; Anm. d. V.] will recognize types of user interfaces and command languages viewed as a set of directives, hierarchical organization of information in records, les, directories, and the connection with other systems via networks [. . . ] from the users point of view. [. . . ] Students will recognize the recurring theme, managing complexity by using dierent levels of abstraction and information hiding" (ACM 1993, S. 7f). Damit steht die Komplexit atsbew altigung durch Abstraktion im Vordergrund ( !Ziel 2: Arbeiten mit komplexen Systemen). Bemerkenswert ist, dass ein Zugang uber die Perspektive des Anwenders gew ahlt wird. Im Schwerpunkt Programmiersprachen werden unterschiedliche Abstraktionsebenen von Programmiersprachen thematisiert, aber auch theoretische Maschinenmodelle (theoretical machines) (ACM 1993, S. 4). Zum Kern des Rechnerarchitekturmoduls gehort ein Grundmodell eines Von-Neumann-Rechners mit Hauptprozessor (Central Processing Unit (CPU)), Speicher und Ein/ Ausgabe. Empfohlen sind Gatter und Schaltnetze sowie VonNeumann-Prinzipien. Datenbanken werden f ur das Anwendungsmodul exemplarisch genannt. Als Mittel zur Abstraktion und der damit verbundenen Komplexit atsbew altigung wird damit Strukturmodellen von Informatiksystemen eine Schl usselrolle zugewiesen ( !Inhalt 2: Strukturmodelle; Abschnitt 3.2.3). Durch dieses Curriculum werden einerseits (implementierungs-) technische Details vermieden und andererseits ein wissenschaftsprop adeutischer Unterricht beschrieben (ACM 1993, S. 1). Dabei wird in Anlehnung an die Naturwissenschaften der Experimentbegri herangezogen: "The study of computer science is composed of basic universal concepts that transcend the technology [. . . ] students will conduct experiments and write programs that demonstrate the abstract concepts, conrm the theory and demonstrate the power of computers" (ACM 1993, S. 1). Damit wird der Wert langfristig g ultiger Informatikkonzepte betont, die gleichzeitig Potential und Grenzen von Rechnern erkl aren. Zur Erl auterung wird beschrieben, wie Sch uler konkrete Software durch Experimente zu analysieren lernen ( !Methodik 4: Analyse des Systems { Experimente):4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 81 Tabelle 4.3: Vernetzung und das Arbeiten mit komplexen Systemen als Teil des Betriebssystemmoduls im ACM Model High School Computer Science Curriculum von 1993 (ACM 1993, S. 4) Core topics Recommended topics Optional topics 3. Operating Systems and User Support Command languages and its use Human-Computer interaction Communication network implementation (e.g., graphs, protocols) Files and disk management Working with large complex systemsMemory management and virtual memory Telecommunications, local and wide area networksOperating system functions (e.g. task scheduling, interrupts, buered I/O) Single and multiuser machines "Laboratories and exercises give students an opportunity to carry out experiments that illustrate topics in a realistic setting and at the same time learn the specics of the software used" (ACM 1993, S. 3) Potential hinsichtlich der F orderung der Kompetenzentwicklung mit Informatiksystemen liegt in der expliziten Thematisierung der Vernetzung im Zusammenhang mit dem Betriebssystem und Rechnernetzen. Insbesondere die Betonung von Komplexit atsreduktionsstrategien, die in allen gr oeren Systemen genutzt werden k onnen, sind hier zu nennen. Fazit ist daher, dass Betriebssysteme und weitere Repr asentanten unterschiedlicher Informatiksysteme im Unterricht zu behandeln sind, um das Anwenden gr oerer Systeme zu erlernen. Dar uber hinaus sind Unterrichtsexperimente eine viel versprechende Vorgehensweise zur Analyse von Informatiksystemen (Abschnitt 5.5). Abschlieend ist anzumerken, dass neben der fachwissenschaftlichen auch eine fachdidaktische Fundierung des Curriculums stattndet: In dem Curriculum werden zu den Inhalten auch unterschiedliche Zugangsm oglichkeiten diskutiert, z. B."Breadth Approach" und "Applications-based" (ACM 1993, S. 2), sowie ein erprobter Beispielkurs vorgestellt, der geteilt in Theorieund Praxisphasen mit der Analyse der Komponenten eines Rechners beginnt, zu vielen Themen Programmierbeispiele vorsieht, den Schwerpunkt jedoch auf Anwendungen (!Methodik 7: Von der Anwendung zur Maschine) legt (vgl. ACM 1993, S. 9). Informatics for Secondary Education { A Curriculum for Schools Das 1994 von der UNESCO in Zusammenarbeit mit der IFIP erstellte Curriculum"Informatics for Secondary Education { A Curriculum for Schools" sieht die Anwendung von Informatics Technology (IT) als eine neue Kulturtechnik: "Understanding IT and mastering the basic skills and concepts of IT are now regarded by many countries as part of the core of education alongside reading and writing. This area of study goes under the all-embracing name of informatics" (UNESCO 1994, Introduction, General Aim). Kritisch ist die k unstliche Trennung von Informatics und Informatics Technology anzumerken, bei der Informatics Technology die Anwendung von Informatik in der Gesellschaft bezeichnet. Durch sie wird die Forderung nach einer verpichtenden informatischen Bildung durch Ershov (1981) aufgehoben und die Anwendung in den Mittelpunkt gestellt. Es werden f ur die allgemeine Bildung drei Hauptziele genannt:"Computer Literacy", Anwendung von Informatiktechnologie als Werkzeug zum Probleml osen in anderen Schulf achern (Application of Informatics Technology Tools in Other Subject Areas) und Anwendung von Informatik zum Probleml osen in anderen Schulf achern (Application of Informatics in Other Subject Areas). Die Hauptziele werden in zwei Niveaustufen unterteilt. Damit kann in dem Curriculum bez uglich Basiskompetenzen zu Informatiksystemen in erster Linie nur der Bereich"Computer Literacy" betrachtet werden, f ur den als Ziel die kompetente und intelligente Anwendung von Rechnern ( !Ziel 3: Bewusste Anwendung) im Alltag genannt82 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung wird (UNESCO 1994, Introduction, General Aim). Problematisch ist dies vor allem, weil in diesem Bereich eine wissenschaftsprop adeutische Ausrichtung kaum erfolgt. Vier weitere Lernziele gehoren zur"Computer Literacy": "Students should be able to: 1. handle the basic hardware and software facilities of a computer system; 2. use, control and apply application oriented software tools; 3. solve routine problems in an algorithmic form; 4. identify the most important social, economical and ethical consequences of IT" (UNESCO 1994, Section 3, The Curriculum Units). Punkt 3 stellt dabei einen Zugang zur Informatik dar, aber nicht vordergr undig zur Kompetenzentwicklung mit Informatiksystemen. Die ersten Punkte hingegen zielen nur auf Bedienung (handle) und Nutzung von Werkzeugen (use). Die Hauptlernziele zu"Computer Literacy"werden mit 26 Beispielunterrichtssequenzen unterlegt und in Kernmodule (Hardware, Systems Software Environment, Computing Trends, Introduction to Using a Computer, Text Processing, Working with a Database, Working with Graphics, Social and Ethical Issues, Choice of Software Tools) und Wahlmodule (Database Design and Use, Spreadsheet Design and Use, Careers in Informatics) unterschieden. Eine genauere Betrachtung der feineren Lernziele wird an dem sp ateren UNESCO ICT Curriculum (UNESCO 2002) vorgenommen, dass viele Elemente des vorhergehenden Informatics Curriculum ubernommen hat. Zu groen Teilen entsprechen die Inhalte und Ziele der"Computer Literacy" damit denen, die die"Association for Teacher Education in Europe (ATEE)" f ur eine"literacy in information technology" erarbeitet hat (Abschnitt 4.2.1), was durch den Einuss von Weert begr undet ist, der an beiden beteiligt und f ur UNESCO / IFIP federf uhrend war (Weert 1984). ICT in Secondary Education { A Curriculum for Schools and Programme of Teacher Development 2002 ver oentlicht die UNESCO das bereits im Jahr 2000 in Zusammenarbeit mit der IFIP erstellte Curriculum"Information and Communication Technology (ICT) in Education", das eine Weiterentwicklung des"Informatics Curriculum" von 1994 darstellt. Informatik wird darin anhand des"Information Processing System" deniert: "[. . . ] informatics as the science dealing with the design, realization, evaluation, use, and maintenance of information processing systems; including hardware, software, organizational and human aspects, and the industrial, commercial, governmental and political implications" (UNESCO 2002, S. 12). Umso wichtiger ist es deshalb anzuf uhren, dass diese Denition zwar aufgegrien wird, aber im Wesentlichen zu einer Abgrenzung zwischen Informatik und ICT dient. So verbindet ICT das Spektrum der technologischen Anwendungen, die als Informatics Technology deniert werden, mit Kommunikationstechnologie: "Information and communication technology, or ICT, is dened as the combination of informatics technology with other, related technologies, specically communication technology" (UNESCO 2002, S. 13). Dementsprechend gibt es gegen uber dem UNESCO Curriculum von 1994 Erg anzungen hinsichtlich der neuen Kommunikationsm oglichkeiten, die die Kompetenzentwicklung mit Informatiksystemen f ordern k onnen (!Medien 3: Kooperation und Kommunikation). Insgesamt werden vier Stufen des Lernens zur Anwendung von ICT angegeben: (1) Entdecken von ICT (discovering ICT tools), (2) Anwenden von ICT (learning how to use ICT tools), (3) Bewerten von Situationen zum Einsatz von ICT (understanding how and when to use ICT tools) und (4) beruiche Spezialisierung (specializing in the use of ICT tools) (UNESCO 2002, S. 17). Dabei ist es bezeichnend, dass von"ICT literacy skills" (UNESCO 2002, z. B. S. 31, S. 33, S. 35), also (Bedien-) Fertigkeiten statt F ahigkeiten oder gar Kompetenzen gesprochen wird.4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 83 In der ersten Stufe des Entdeckens von ICT stehen die generellen ICT-Funktionen sowie deren Anwendung im Sinne einer"ICT Literacy" im Vordergrund. Ziel ist Kompetenzentwicklung mit Informatiksystemen inklusive Betriebssystem und dessen Entmystizierung ( !Ziel 4: Entmystizierung): "Students should understand how computers and the basic operating system work and demonstrate that the computer is under their control. They should be encouraged not to be mystied by computers and should be able to understand that computers are continually being improved and why"(UNESCO 2002, S. 68). Die Inhalte zur ICT Literacy basieren zum Teil auf dem Internationalen und Europ aischen Computer F uhrerschein (European Computer Driving Licence (ECDL)) (UNESCO 2002, S. 18). Alltagliche ICT Anwendungen sind im Mittelpunkt: "This curriculum area covers the use of ICT as encountered in the daily life of many communities. Specic units include basic concepts of ICT, using computers and managing les, word processing, spreadsheets, databases, creating presentations, nding information and communicating with computers, social and ethical issues, and jobs using ICT" (UNESCO 2002, S. 18). Als konkretes Lernziel wird angegeben, dass die Sch uler Komponenten der Hardware wie Zentraleinheit, Eingabe, Ausgabe und Speicher unterscheiden k onnen und um deren Funktion wissen sollen (UNESCO 2002, S. 67). Auerdem sollen sie Peripherieger ate identizieren k onnen und deren Funktion kennen, ein lokales Netz in Bezug zum Internet setzen, z. B. anhand von E-Mail, und ein Verst andnis f ur die Funktionalit at von Systemsoftware entwickeln. Dadurch k onnen sie Systemund Anwendungssoftware unterscheiden und gezielt Rechner anwenden (using the computer), beispielsweise einfache grasche und textuelle Problemstellungen kompetent l osen: "students should be able to [. . . ] demonstrate the ability to use a computer competently [. . . ] using simple software" (UNESCO 2002, S. 69). Einstiegssoftware kann dabei ein einfaches Grakprogramm oder altersgem ae Lernsoftware sein. Als Unterrichtsmittel werden daf ur Modelle der Rechnerkomponenten und Illustrationen ihrer Funktionalit at erwartet sowie Systemsoftware zur Demonstration. Methodisch wird f ur das bewusste Anwenden von Systemsoftware ein vom Lehrer gef uhrtes Vorgehen und bez uglich Anwendungssoftware entdeckendes Lernen gefordert: "Student-centred activities, hands-on activities, on a guided basis for the system operation activities, and on a creative, self-exploratory basis for the production activities" (UNESCO 2002, S. 70). Das ICT Curriculum ist eines der wenigen, das derartige Aussagen zur Methodik trit. Jedoch oenbart die Forderung nach entdeckendem Lernen zum Umgang mit dem Rechner ohne Angabe eines konkreten Vorgehens eine L ucke, die es zu schlieen gilt ( !Methodik 4: Analyse des Systems { Experimente). Weiteres Lernziel in der ersten Stufe ist, dass die Sch uler einfache Datenbanksysteme anwenden konnen (UNESCO 2002, S. 74). Zur Erreichung des Lernziels wird f ur den Unterricht ein problemorientiertes Vorgehen skizziert, in dessen Verlauf Sch uler Phasen des Probleml osens erkennen, in der Lage sind zu beschreiben, welche Probleme mit Datenbanken gel ost werden k onnen, und wie Informationen gespeichert werden (UNESCO 2002, S. 74). Die Sch uler sollen auch in der Lage sein, mit dem Rechner uber das Internet auf andere Rechner zuzugreifen und mit anderen Menschen zu kommunizieren. Dazu geh oren das Kooperieren, z. B. das Senden und Empfangen von Nachrichten und Dokumenten, Nutzung von Mailing Lists, Newsgroups und Videokonferenzen, auerdem Informationssuche im WWW inklusive Einsch atzung der Qualit at der Information sowie urheberrechtlicher Aspekte (UNESCO 2002, S. 78f). Auf der zweiten Stufe des Lernens von ICT stehen das Anwenden und der Transfer des Wissens auf ICT in anderen Disziplinen. Vertiefungen k onnen Modellierung und Simulation, Roboter, Tabellenkalkulation und Datenbankdesign behandeln. Der Einsatz einfacher Roboter kann genutzt werden, um naturwissenschaftliche Experimente durchzuf uhren, und beinhaltet den Einsatz von84 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Sensoren als Eingabe (UNESCO 2002, S. 88). F ur Informatiksysteme und Kompetenzentwicklung ist die Besch aftigung mit Robotersystemen hilfreich, da Sensoren eine weitere Eingabem oglichkeit darstellen. Dar uber hinaus k onnen mehrere mobile Roboter ggf. drahtlos kommunizieren, so dass die Sch uler an dieser Stelle den Eindruck von eigenst andigen Akteuren bekommen, die miteinander und mit ihrer Umwelt interagieren ( !Methodik 8: Medium und Gegenstand; Abschnitt 3.2.1). Die dritte Stufe schliet das Bewerten von Situationen ein und die Frage, ob der Einsatz von ICT gerechtfertigt ist und welche Werkzeuge hilfreich sind, um ein reales Problem zu l osen. Erst die vierte Stufe involviert informatische Konzepte zu Programmierung und Entwurf von Informatiksystemen, wird jedoch zur beruichen Bildung gez ahlt (UNESCO 2002, S. 19). Neben einfachen Algorithmen steht darin der Softwareentwicklungsprozess im Vordergrund. Das fertige Produkt sollen die Sch uler anschlieend mittels Testdaten evaluieren: "Students should test their programs with given or created test data to determine correctness and limitations [. . . ]" (UNESCO 2002, S. 127). Daruber hinaus sollen die Sch uler die Ezienz und Eektivit at eines Informatiksystems ebenso wie Potential und Grenzen des Einsatzes bewerten k onnen (UNESCO 2002, S. 141f). Dabei soll der konkrete Einsatz der Software in einem speziellen Kontext nachgespielt werden, z. B. ein Unternehmen, so dass die Sch uler selbst uberpr ufen k onnen, inwieweit sie in der Lage sind, die Eignung der Software zur L osung ihres Anwendungsproblems richtig einzusch atzen (!Ziel 3: Bewusste Anwendung). Dazu soll den Sch ulern die Dokumentation der Software zur Verf ugung gestellt werden (!Inhalt 4: Sichten). Zusammenfassend l asst sich feststellen, dass weniger die Informatik, denn Anwenden und Auswirkungen von Informationsund Kommunikationstechnologien Themen des Curriculums sind. In dem ICT Curriculum sind insbesondere die Kooperation ( !Medien 3: Kooperation und Kommunikation), typische Vertreter von Softwaresystemen und durch Roboter die Vernetzung bzw. spezielle Eingabeformen betont ( !Inhalt 1: Typische Repr asentanten). Die Unterscheidung, bei Anwendungssoftware entdeckendes Lernen und bei Systemsoftware lehrergeleitetes Vorgehen einzusetzen, ist durchaus kritisch zu sehen: Anwendungen laden durch ihren speziellen Kontext zwar zum Entdecken ein, allerdings werden viele Anforderungssituationen durch unerwartetes Verhalten auf Betriebssystemebene ausgel ost. Auf das Lernen von Informatikkonzepten, die das Verhalten erkl aren k onnten, wird im ICT Curriculum jedoch weitgehend verzichtet. A Model Curriculum for K-12 Computer Science 2003 ver oentlicht die ACM das"Model Curriculum for K-12 Computer Science", das aus vier Ebenen (Level) besteht. Level I greift die Fertigkeiten, F ahigkeiten und grundlegenden Konzepte auf, die f ur die IT Fluency (NRCCITL 1999) deniert wurden. Ab Level II erfolgt mit dem Hinweis auf die wissenschaftsprop adeutischen Ausrichtung eine explizite Abgrenzung von der IT Fluency (ACM 2006, S. 13). Die in Level I referenzierte"IT Fluency"wird in Abgrenzung zur"Computer Literacy"verwendet, da letztere oft allein mit Fertigkeiten im Umgang mit aktuellen Softwareprodukten an einem Einzelplatzrechner gleichgesetzt wird: "People uent with information technology (FIT persons) are able to express themselves creatively, to reformulate knowledge, and to synthesize new information." (NRCCITL 1999, S. 2) Dazu umfasst IT Fluency die drei Kompetenzaspekte Fertigkeiten, Konzeptwissen und F ahigkeiten. Konzeptwissen (foundational concepts) beinhaltet: "computer organization , information systems, networks, digital representation of information, information organization, modeling and abstraction, algorithmic thinking and programming, universality ,limitations of information technology , and societal impact of information technology" (NRCCITL 1999, S. 4; Hervorh. durch den Autor).4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 85 Fahigkeiten (intellectual capabilities) umfassen: "engage in sustained reasoning, manage complexity , test a solution, manage faulty systems and software , organize and navigate information structures and evaluate information, collaborate, communicate to other audiences, expect the unexpected, anticipate changing technologies, and think abstractly about IT " (NRCCITL 1999, S. 4; Hervorh. durch den Autor). Die Komplexit atsbew altigung greift das Ziel des ACM-Curriculums von 1993 wieder auf ( !Ziel 2: Arbeiten mit komplexen Systemen). Die F ahigkeit, abstrakt uber Informatiksysteme zu denken, hilft sicherlich auch, um unerwartetes Verhalten der Systeme zu erkl aren. Daher sind Abstraktionsmechanismen, z. B. (Struktur-) Modelle von Informatiksystemen und Beschreibungssprachen, in ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung zu integrieren (Abschnitt 5.3). Geforderte Fertigkeiten (contemporary skills) sind: "set up a personal computer, use basic operating system features, use a word processor and create a document, use a graphics or artwork package to create illustrations, slides, and images, connect a computer to a network, use the Internet to nd information and resources, use a computer to communicate with others, use a spreadsheet to model simple processes or nancial tables, use a database system to set up and access information, and use instructional materials to learn about new applications or features" (NRCCITL 1999, S. 4). Durch die Angabe der Kompetenzaspekte wird die"Computer Literacy" weiter entwickelt. F ur Kompetenzentwicklung mit Informatiksystemen bilden insbesondere die geforderten F ahigkeiten eineahnliche Zieldimension. Besonders hervorzuheben ist im ACM-Curriculum, dass neben den Zielen auch ausf uhrliche Unterrichtsbeispiele angegeben werden. Level I behandelt bez uglich Informatiksysteme und Kompetenzentwicklung Grundlagen der Informatik. Sie umfassen Basisf ahigkeiten und -fertigkeiten zur bewussten Anwendung von Rechnern, die mit einfachem algorithmischem Denken verbunden werden: "To live and work successfully in an increasingly information-rich society, K-8 students must learn to use computers eectively and incorporate the idea of algorithmic thinking into their daily problemsolving vocabulary" (ACM 2006, S. 9). Neben dem algorithmischen Probleml osen, z. B. mit Robotersystemen, ist auch die zielgerichtete Interaktion mit dem Rechner zur Kooperation mit anderen zu thematisieren (vgl. ACM 2006, S. 9). Auerdem verstehen sie grundlegende Konzepte: "[. . . ] students will: [. . . ] Demonstrate an understanding of concepts underlying hardware, software, algorithms, and their practical applications" (ACM 2006, S. 10f). Fur Kompetenzentwicklung mit Informatiksystemen ist relevant, dass Sch uler am Ende der Klassenstufe 8 Strategien zur Fehleridentikation und -behebung bei allt aglichen Softund Hardwareproblemen anwenden k onnen. Zus atzlich kennen sie die Auswirkungen sich schnell ver andernder Technik auf die Gesellschaft, legen rechtlich und ethisch angemessenes Verhalten an den Tag und konnen bereichsspezische Informatiksysteme anwenden. Dazu geh ort, dass sie mit Partnern kooperieren und Ergebnisse mit ICT entwickeln und publizieren ( !Medien 3: Kooperation und Kommunikation). Die Unterrichtsbeispiele zu Level I beziehen sich auf grundlegende Informatikkonzepte, die ohne Rechnereinsatz zu behandeln sind. Level II, das f ur viele Sch uler die letzte verpichtende Ber uhrung mit Informatik darstellt, zielt darauf, Informatikkonzepte, -methoden und ihre Anwendung in der Wissensgesellschaft zu vermitteln (ACM 2006, S. 7). F ur Kompetenzentwicklung mit Informatiksystemen ist es dahingehend relevant, dass Operationen des Rechners, Netze, Mensch-Maschine-Schnittstelle und das Erstellen einfacher Programme thematisiert werden ( !Ziel 1: Aufbau, Vernetzung und Funktionsweise):86 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung "A major outcome [. . . ] is to provide students with general knowledge about computer hardware, software, languages, networks, and their impact in the modern world" (ACM 2006, S. 11). Dabei ist zu betonen, dass Informatikkonzepte von den Sch ulern aus Sicht des Anwenders und nicht aus Sicht des Entwicklers kennen gelernt werden sollen (vgl. ACM 2006, S. 12). So soll beispielsweise neben Tastatur und Maus uber Roboter und deren Sensoren ein Verst andnis f ur Eingabeger ate geschaen werden: "For instance, the idea that a robot needs a method of acquiring sensory data from its environment draws attention to the general notion of an 'input device' beyond the standard keyboard and mouse. Teaching students about various input devices currently in use should help demystify the general idea of input, and prepare students to be comfortable using devices with which they are not yet familiar" (ACM 2006, S. 12). Das Zitat zeigt damit einen Weg, typische Eigenschaften von Informatiksystemen anhand unterschiedlicher Auspr agungen zu thematisieren, um Informatiksysteme zu entmystizieren ( !Ziel 4: Entmystizierung; !Inhalt 1: Typische Repr asentanten). Bei einer Ubertragung der Idee auf das Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen ist dazu eine Klassikation des Systemverhaltens notwendig, um pr aziser als die Einteilung in Eingabe, Verarbeitung und Ausgabe auf die Besonderheiten eingehen zu k onnen. Am Ende des zweiten Levels sollen die Sch uler (1) ein konzeptuelles Verst andnis von Rechnerarchitektur mit Eingabe, Ausgabe, Speicher, Verarbeitung, Software und Betriebssystem entwickeln sowie (2) grundlegende Schritte des algorithmischen Probleml osens von der Problemstellung uber Entwurf und Implementierung zu Test und Verikation kennen. F ur Kompetenzentwicklung mit Informatiksystemen ist die Beziehung zwischen der Architektur sowie Eingabe, Verarbeitung Ausgabe wieder interessant (siehe auch Abschnitt 4.2.5). Obwohl der Entwicklungsprozess und die Algorithmik f ur Kompetenzentwicklung mit Informatiksystemen nicht im Mittelpunkt stehen, sind Test und Verikation ein wichtiges Mittel, um das Verhalten von Informatiksystemen zu analysieren ( !Methodik 4: Analyse des Systems { Experimente; Abschnitt 5.5.1). Auerdem sollen die Sch uler ein Verst andnis f ur Hierarchisierung und Abstraktion einschlielich h oherer Programmiersprachen, Ubersetzung, maschinennaher Sprachen und Schaltkreise entwickeln. Ebenso sollen sie ethische Fragestellungen zu Rechnern und Netzen wie Sicherheit und Zuverl assigkeit von Information sowie Auswirkungen auf die Gesellschaft kennen (ACM 2006, S. 12). Die Unterrichtsbeispiele zu Level II sind f ur Kompetenzentwicklung besonders interessant. F ur die Sch uleraktivit at"Setting up a computer" m ussen auf einem Rechner ein neues Betriebssystem und Anwendungen installiert sowie Peripherieger ate angeschlossen werden. In dem Beispiel"Connections inside and out" stehen die Komponenten innerhalb des Rechners, deren Vernetzung und die Einbindung des Rechners in ein Netz sowie einfache Netzkomponenten im Mittelpunkt (!Methodik 7: Von der Anwendung zur Maschine). Zur Konkretisierung der Inhalte werden unterschiedliche Industriekurse mit Zertizierung angegeben und auf die Inhalte des Curriculums bezogen, z. B. zum"Certied Internet Webmaster": "The Foundations level exam requires competency in Internet, Web page authoring, and networking fundamentals. These concepts are introduced in Levels I and II" (ACM 2006, S. 17). Die Aspekte der Vernetzung, die in den ersten beiden Stufen des Curriculums thematisiert werden, entsprechen in hohem Mae den Anforderungen, die per Denition an Kompetenzentwicklung mit Informatiksystemen gestellt werden. Andererseits entspricht der Inhalt des"Web page authoring" dem Ansatz, informatische Grundlagen aus der Perspektive des Anwenders zu betrachten. Level III vertieft Wissenschaftsprop adeutik und professionelle Aspekte wie ingenieurm aiges Vorgehen, algorithmisches Probleml osen, Datenstrukturen, Softwareund Hardwareentwurf, Netze und gesellschaftliche Auswirkungen (ACM 2006, S. 8). Hinsichtlich der Kompetenzentwicklung4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 87 mit Informatiksystemen ist es interessant, dass die von Eberle (1996) als wichtig f ur den Unterricht mit der Maschine erachteten Schichten der Software bzw. Programmiersprachen wieder aufgegrien werden (Abschnitt 4.3.3), um Eigenschaften von Compilern, Betriebssystemen und Netzen zu erkl aren (ACM 2006, S. 13). Hinzu kommt eine explizite Betrachtung von Systemen im Zusammenhang mit der Hardware, die ebenfalls auf das Ebenenmodell zur uckzuf uhren ist: "Hardware and systems : logic, gates and circuits, binary arithmetic, machine and assembly language, operating systems, user interfaces, compilers" (ACM 2006, S. 13; Hervorh. durch den Autor). In den vorgestellten Beispielaufgaben f ur Level III wird ausschlielich auf Algorithmik, speziell Rekursion eingegangen, die z. B. mittels Rollenspiel erarbeitet wird. Die Betrachtung des Systems fehlt. Level IV erm oglicht eine Vertiefung in einem Bereich der Informatik (vgl. ACM 2006, S. 8). Schwerpunkte k onnen Probleml osen durch Algorithmenentwicklung zur Vorbereitung auf ein Studium, aber auch Projektarbeiten sein, die auf grundlegenden Konzepten aufbauend professionelle Fertigkeiten schulen. F ur Informatiksysteme und Kompetenzentwicklung ist die im Curriculum vorgesehene Verkn upfung der theoretischen Fundierung mit Anwendungen durch den Blick hinter die Fassade der Software relevant: "While some [projects; Anm. d. V.] of the project curriculum may be more skills-based, the skills need to be tied to the 'behind-the-scenes' activities of the software { particularly how each task is implemented in the software (e. g., what is happening when you click 'bold'?). Answering such questions enables students to problem-solve when software does not perform as anticipated." (ACM 2006, S. 16) Der Blick hinter die Fassade korrespondiert mit dem Ansatz von Vo (2006) zur Betrachtung von Standardsoftware. Allerdings wird im ACM K-12 Curriculum verst arkt auf die Implementierung eingegangen, w ahrend bei Vo Reengineering und speziell objektorientierte Modelle in den Vordergrund r ucken. Im ACM K-12 Curriculum ist die Vorgehensweise zur Kopplung von Fertigkeiten mit dem Blick hinter die Fassade von Software nicht konkret beschrieben. Einziges Unterrichtsbeispiel ist die Einf uhrung in objektorientierten Entwurf. Dennoch kann der Blick hinter die Fassade eine Grundlage der Kompetenzentwicklung bilden ( !Methodik 4: Analyse des Systems { Experimente). Denn sie st utzt die Annahme des Autors, dass grundlegende Konzepte und Modelle der Informatik hilfreich sind, um unerwartetes Verhalten von Informatiksystemen zu verstehen. Abschlieend ist festzuhalten, dass das ACM K-12 Curriculum Wissenschaftspropadeutik und damit die Informatik in den Mittelpunkt stellt. So ist nicht die Bedienung von Systemen, sondern Anwenden der informatischen Grundlagen das Ziel. 4.3.3 Informatiksysteme und Kompetenzentwicklung in Eberles Didaktik einer informationsund kommunikationstechnologischen Bildung auf der Sekundarstufe II Eberle ver oentlicht 1996 seine Habilitationsschrift zur informationsund kommunikationstechnologischen Bildung. Die umfangreiche fachdidaktische Arbeit liefert viele theoretische Begr undungen f ur Ziele und Themen. Im Vergleich zu den betrachteten internationalen Curricula und den international publizierten Erfahrungsberichten und Forschungsergebnissen liegt ihr Wert jedoch vor allem in der Begr undung von Lernmethoden. So gibt er"Empfehlungen zum Unterricht mit der Maschine". Danach ist Voraussetzung f ur ein verst andnisvolles Arbeiten mit der Maschine ein Verst andnis f ur Programmschichten und den prinzipiellen Hardwareaufbau, also ein Modell des Rechners inklusive seiner Funktionsweise und Grenzen ( !Inhalt 2: Strukturmodelle). Er schl agt vor, diese Grundlagen im Unterricht zeitlich vor m oglichen Anwendungen zu behandeln, um Sch uler die Universalit at verst andlich zu machen: "Diese Inhalte sind deshalb { im Prinzip { vor der Einf uhrung in Anwendersoftware zu erarbeiten. Dazu geh oren zumindest die Vermittlung eines einfachen Modells des Computers, der Systemsoftware sowie der verschiedenen Programmschichten und, durch Einblick in die Idee der Programmierung, das Verst andnis f ur die grunds atzliche Funktionsweise und die Grenzen des Computers. Das Modell soll den Zusammenhang zwischen Eingaben und den durch diese Eingaben in der Maschine initiierten Prozessen beschreibbar und damit f ur den Anf anger verstehbar machen" (Eberle 1996, S. 350).88 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Die leichte Einschr ankung"im Prinzip" macht Eberles Dilemma deutlich: Verst andnisvolles Arbeiten mit der Maschine erfordert eben in erster Linie das konkrete Informatiksystem, an dem kompetent gearbeitet wird. Andererseits ist nach Meinung von Eberle die Universalit at des Rechners Grund f ur das h auge Scheitern von Bem uhungen um ein grundlegendes Verst andnis der Maschine (!Methodik 1: Universalit at). Er fordert, die Universalit at immer wieder bewusst zu machen und sieht es deshalb als notwendig an, den grunds atzlichen Hardwareaufbau und Programmebenen zu thematisieren (Eberle 1996, S. 343). Hinzu kommt, dass die im Sinne der Universalit at erstellten virtuellen Maschinen im Gegensatz zu mechanischen Maschinen intern allein an die Regeln eines abstrakten Systems gebunden sind, z. B. formale Logik oder eine Menge an Prozeduren, und nicht an Regeln der Mechanik. Dadurch sind viele Prozeduren in einem Computer zun achst nicht auf Alltagserfahrungen zur uck zu f uhren und vor allem nicht beobachtbar (Eberle 1996, S. 342): "Reines Black-Box-Denken reicht bei einer ,universellen Maschine' nicht aus. Zu gross sind die Inputund Outputm oglichkeiten; dies im Gegensatz zu den Beispielen anderer technischer Ger ate wie Auto und Fernsehen, die immer wieder f ur die Begr undung der Black-Box-These herangezogen werden. Die Lernenden m ussen als Voraussetzung f ur das Gef uhl von ,Beherrschung' verstehen, wie Computer grunds atzlich arbeiten" (Eberle 1996, S. 250). Einen hohen Stellenwert schreibt Eberle der Bildung und fortw ahrender rascher Korrektur mentaler Modelle zu ( !Methodik 2: Kognitive Modelle). Die Bedeutung der auf dem Bildschirm angezeigten Objekte und Fehlermeldungen soll deshalb konsequent gekl art und einzelnen Objektkategorien sowie Programmebenen zugeordnet werden ( !Methodik 3: Verbindung von Verhalten und Struktur). Mittel dazu sind z. B. Schichtenmodelle ( !Inhalt 2: Strukturmodelle). (Fehler-) Meldungen sind Programmebenen zuzuordnen (Eberle 1996, S. 350). Die Fehlervorwegnahme im Unterricht kann zur Angstpr avention dienen, indem bewusst typische und vor allem unterschiedliche Fehler erfahren werden (Eberle 1996, S. 351). Ebenso muss thematisiert werden, warum unterschiedliche Befehle die gleichen Systemeekte erzielen und wie Benutzungsober ache und Navigation mit der"Bedienphilosophie" zusammen h angen. Zur Korrektur der mentalen Modelle der Sch uler schl agt er unter Berufung auf Jih und Reeves (1992) vor, Lernende bei der Arbeit mit Anwendungen zu beobachten und einen Lernenden einem anderen das Programm erklaren zu lassen. Die Lernenden sollen Verhaltensweisen des Programms voraussagen und beschreiben, wie sie mit dem Programm arbeiten. Dazu sind Modelle und Analogien anzubieten, die die bei der Anwendung ablaufenden Verarbeitungsschritte f ur den Lernenden transparent machen (Eberle 1996, S. 350). Eberle fordert, jede Aktion bei der Anwendung eines Systems mit voraussagendem Sinn zu f ullen: "Dazu geh oren Intention (Zielsetzung), Selektion (Plan, Entwurf), Aktion (Handeln, Tun) und Evaluation (Reexion)" (Eberle 1996, S. 351). Er begr undet dies damit, dass Lernende nicht nur die m oglichen Systemzust ande kennen, sondern diese auch vorhersehen und das dazugeh orende Systemverhalten bewerten k onnen m ussen (Eberle 1996, S. 348). Gleichzeitig folgt aus der Forderung, dass Versuch-und-Irrtum-Strategien zu vermeiden sind (Abschnitt 5.5), d. h. systematisches Vorgehen ist anzustreben ( !Methodik 4: Analyse des Systems { Experimente). Eberle bezieht die Einf uhrung in Standardsoftware bzw. Anwendungen in seine Konzeption ein. Er empehlt, eine Top-down-Vorgehensweise von den generell mit der Software l osbaren Problemen mit Grundbegrien und Erl auterungen hin zu konkreten Problemstellungen mit detaillierten, aber m oglichst produktunabh angigen Anwendungsbeispielen ( !Methodik 7: Von der Anwendung zur Maschine) (Eberle 1996, S. 334). F ur Befehle, Eingaben und strukturelle Eigenschaften sind geeignete Modelle zu verwenden, um mentale Modelle m oglichst nachhaltig aufzubauen. Konkrete Beispiele werden hierzu jedoch nicht genannt. Auerdem sollen analog zu Programmiersprachen nur grundlegende semantische und syntaktische Besonderheiten behandelt, diese aber klassiziert werden, damit Lernende sp ater gelerntes strukturieren k onnen.4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 89 Daruber hinaus sind Struktogramme und Programmablaufpl ane, ahnlich zu ihrem Einsatz in der Algorithmik, geeignet, um Probleml osungsmethoden mit Standardsoftware zu visualisieren (Eberle 1996, S. 340). Daf ur muss das Problem jedoch eingegrenzt, zerlegt und exakt formuliert werden. Eberle empehlt des Weiteren, dass f ur jede Systemklasse eigene Vorgehensweisen zu nutzen sind, die an deren Grundstrukturen orientiert sind, die sich meist uber Jahre hinweg nicht andern, z. B. Zellen in einer Tabellenkalkulation (Eberle 1996, S. 340). Zu strukturellen Elementen ist nach Eberle auch die werkzeugtypische Men ustruktur zu z ahlen, wenn sie produktunabh angig ist (Eberle 1996, S. 336). F ur Kompetenzentwicklung mit Informatiksystemen bedeutet dies, dass vor allem der Anwendungsprozess als Probleml osen erkannt wird, das auf vielf altige informatische Konzepte zur uck greift und mit Darstellungsmitteln der Informatik geeignet beschrieben werden kann ( !Methodik 5: Anwendung als Probleml osen). Eine solche Vorgehensweise zur Erkundung von Informatiksystemen wird in Abschnitt 5.5 beschrieben. Da bei der Anwendung von Datenbanken deklaratives Wissen im Vordergrund steht, empehlt Eberle f ur diese spezielle Klasse, uber die Thematisierung der Entwicklungsmethodik zus atzlich prozedurale Aspekte in den Lernprozess zu integrieren (Eberle 1996, S. 336). Zur Auswahl von Unterrichtsinhalten zieht Eberle ein Raster zur Strukturierung von Informationstechnologien heran, dass von Steinbock (1993) aufgestellt wurde ( !Inhalt 1: Typische Repr asentanten). Besonders betont er Rechnerklassen (z. B. Client-Server-Architekturen, Ubergang vom Von-Neumann-Rechner zu Parallelrechnern, drahtlose Kommunikation), Benutzungsschnittstelle (z. B. Daten und Funktionsumfang), Kommunikationsinfrastruktur (z. B. Netze und Dienste) und die Softwareklassen Betriebssysteme, Datenbanksysteme, Programmiersprachen sowie Anwendungssoftware (z. B. Administrations-, B uro-, F uhrungs-, Entwurfs-, Wissensmanagementsund Prozesssteuerungssoftware) (Eberle 1996, S. 68). Fasst man Eberles Ansatz hinsichtlich der Lehr-Lernmethodik zusammen, gibt er insbesondere Empfehlungen zu Standardsoftware und generell zum Unterricht mit dem Rechner. Entscheidend ist, dass sich diese Empfehlungen zu einem groen Teil uberschneiden (Abschnitt 5.6.2): Strukturelle Merkmale sollen immer mit geeigneten informatischen Modellen unterlegt werden, damit die Sch uler korrekte mentale Modelle ausbilden k onnen. Grundlagen der Hardware erachtet Eberle als notwendig, um die Universalit at des Rechners in Abgrenzung zur mechanischen Maschine verstehen zu k onnen. Im Gegensatz zu Eberles Vorschlag, zuerst die technischen Grundlagen zu lernen, impliziert der Kompetenzbegri, Grundlagen handlungsorientiert anhand der Anwendung zu erlernen. F ur Kompetenzentwicklung mit Informatiksystemen besteht damit ein Zielkonikt, der eine enge Verzahnung von Anwendungssituation und Strukturmodellen des Informatiksystems erfordert (! Methodik 9: Vernetzung der Unterrichtsinhalte). 4.3.4 Internationale Forschungsund Erfahrungsberichte Kurz nach der Ver oentlichung des UNESCO Curriculums von 1994 stellt Weert (1995) auf der 6. WCCE (Tinsley und Weert 1995) Richtungen vor, die zur Integration von Rechnern in die Bildung zuk unftig eingeschlagen werden k onnen. Hierbei wird das Anwenden von Standardsoftware wie Statistiksoftware, programmierbarer Mathematikprogramme (z. B. Maple, Mathematica) oder von Tabellenkalkulation in den Informatikunterricht integriert ( !Inhalt 1: Typische Reprasentanten;!Methodik 7: Von der Anwendung zur Maschine). Aber auch anwendungsorientierter Informatikunterricht mit Datenstrukturen und Modellierung wird als Grundlage gesehen (backbone of the new literacy), allerdings nur als"Informatics for a few" (Weert 1995, S. 8), also nicht im Sinne einer verpichtenden allgemeinen Bildung. Die Mehrheit der Sch uler erh alt somit nur die Gelegenheit, Zahlen in einer Anwendung zu manipulieren, ohne die dahinter liegende Datenstruktur zu verstehen. Fehlerhafte Berechnungen, die durch Bereichs uberschreitung bzw. zu kleine Register entstehen, k onnen von den Sch ulern somit nicht verstanden werden. Proulx (1995), die zum ACM-Curriculum von 1993 einen modulbasierten Beispielkurs mit Aufgaben entwickelte (ACM 1993, S. 13), verbindet den Ansatz der"Computer Literacy" mit dem90 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung des ACM-Curriculums. Insbesondere begr undet sie anhand von Beispielen, wie die sechs Bereiche des ACM-Curriculums, Algorithmen, Programmiersprachen, Rechnerarchitektur, Betriebssysteme und Benutzerunterst utzung, Anwendungen sowie sozialer, ethischer und beruicher Kontext (Abschnitt 4.3.2), zum Verstehen der Informationsgesellschaft (Information World) beitragen und deshalb notwendiger Teil der"Computer Literacy" sind. Abschlieend fordert Proulx (1995) sorgf altig gestaltete und ggf. rechnergest utzte Unterrichtsmaterialien, die dynamischen Prozesse in der Rechnerarchitektur und das Verhalten eines Rechners visualisieren: "To study computer architecture students should be able to play with a model which allows them to feed in the input, examine the memory, see the bits going through adder and other logical circuits, see the program which is being executed, explore what happens if some parameters, statements or inputs are changed. The processes happening inside of the computer are very complex and many students have a hard time visualizing or understanding this dynamic behaviour" (Proulx 1995, S. 502). Visualisierungen der inneren Struktur von Informatiksystemen mit den entsprechenden Prozessen sind somit f ur die F orderung der Kompetenzentwicklung mit Informatiksystemen in Betracht zu ziehen (!Medien 1: Visualisierung verborgener Prozesse). Dies kann vor allem in einer Lernsoftware geschehen, aber auch durch ein entsprechendes Berechnungsoder Rechnermodell, z. B. Registermaschine. Es ist also gerade bei Strukturmodellen eines Rechners immer der Prozess, d. h. die Interaktion zwischen den Systemkomponenten zu betrachten. Daf ur sind geeignete Visualisierungen sowie enaktive Modelle zu schaen, um Modelle direkt manipulieren zu k onnen (Abschnitt 5.6). Kennewell (1995) stellt Basisf ahigkeiten in der Anwendung von Informatiksystemen (IT capability) in Beziehung zu konzeptuell-deklarativem und prozeduralem Wissen, wobei er sich auf Erfahrung als Lehrer im Primarund Sekundarbereich bezieht. Daf ur nutzt er den Begri des mentalen Modells in Anlehnung an Anderson (1987): "Thus a person's mental model of a computer system contains an understanding of what a computer and its software can do, indicates whether it will be useful to them in a particular situation, and guides their actions when using a computer for a task" (Kennewell 1995, S. 421). Dabei entspricht das deklarative Wissen dem Wissen uber das System. Es kann genutzt werden, um M oglichkeiten und Grenzen des Systems zu erkl aren und Verhalten vorher zu sagen. Das prozedurale Wissen entspricht einem dynamischen Modell, das das Anwenden des Systems ermoglicht, z. B. zur Erkl arung des Systemverhaltens in Abh angigkeit vom jeweiligen Zustand und ausgef uhrter Aktion (!Methodik 5: Anwendung als Probleml osen). Ahnlich wie Thomas (2003) schlussfolgert Kennewell (1995), dass Analogien hilfreich sind, speziell um Sch uler in kognitive Koniktsituationen und damit zu einer Anpassung ihres mentalen Modells von Informatiksystemen zu bringen (Abschnitt 4.2.4). Rechnereinsatz h alt er bei Lernerfolgskontrollen zu den Basisf ahigkeiten in der Anwendung von Informatiksystemen f ur unumg anglich. Fazit im Rahmen des Unterrichtsmodells ist, dass die Unterscheidung zwischen erkl arendem Wissen, im Sinne von Fakten und Konzepten, sowie prozeduralem Wissen dar uber, wie ein Informatiksystem zielgerichtet angewendet werden kann, zur F orderung der Kompetenzentwicklung mit Informatiksystemen heranzuziehen sind. Eine Verbindung beider Wissensarten kann in Sch ulerexperimenten vorgenommen werden ( !Methodik 4: Analyse des Systems { Experimente), die Anwendung und erkl arende Konzepte aufgreifen (Abschnitt 5.5). Cassel et al. (1995) stellen einen Grundlagenkurs in einem universit aren Bachelor of Arts vor, der sowohl literaturwissenschaftliche als auch informatische Inhalte hat, und Informatiksysteme von den Anwendungen ausgehend aufgreift. Darin verwenden sie einen entdeckenden Ansatz in dem das Ergebnis nicht vorab festgelegt ist (Cassel et al. 1995, S. 674). Eine Erkundung des abstrakten Datentyps (ADT) Baum wird anhand der Verzeichnisstruktur des Betriebssystems vorgenommen: "The ADT Tree: [. . . ] In the laboratory, the students encountered trees in the context of the DOS [Disk Operating System; Anm. d. V.] directory structure [. . . ]. The root of the tree was the root of4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 91 the network le system. [. . . ] Further exploration led to discovery of directories containing various classes of software (editors and word processors, mathematics packages, images, databases, even games)" (Cassel et al. 1995, S. 672). Weitere informatische Inhalte sind formale Grammatiken und Netze bzw. Graphen. Wenngleich direkte Ubertragung von der Hochschule auf Schule nur (fach-) didaktisch fundiert geschehen darf, ist der Ansatz aus drei Gr unden f ur Kompetenzentwicklung mit Informatiksystemen inspirierend: Erstens nutzt er informatische Konzepte wie den ADT Baum, so dass Sch uler Daten nicht nur manipulieren, sondern auch deren Struktur und entsprechende Konsequenzen verstehen (!Inhalt 3: Fundamentale Ideen). Zweitens wird das informatische Konzept wie die Verzeichnisstruktur in einem konkreten Informatiksystem mittels entdeckendem Lernen erfahren (!Methodik 4: Analyse des Systems { Experimente). Drittens k onnen unterschiedliche Softwareklassen auch auf Ebene der Dateien identiziert werden, z. B. anhand der Dateiformate (!Inhalt 1: Typische Repr asentanten). Thurber und Stratton (1995) stellen die These auf, dass Rechner und das Internet bereits durch Entwurfsentscheidungen stark von der westlichen Kultur gepr agt sind. Sie sprechen vom"Western Computer". Eine starke kulturelle Beeinussung bei der Gestaltung von Rechnern legt nahe, dass ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung bei gleicher Technologie nicht ohne weiteres in einen anderen Kulturkreis zu ubertragen ist. Die Forschungsrichtung Ethnocomputing (Tedre et al. 2006) unterst utzt diese These. Bezuglich Kompetenzentwicklung mit Informatiksystemen ist die 7. WCCE (Watson und Andersen 2002) gepr agt von Beitr agen, die sich weniger auf Informatik, als auf die Arbeiten zur"Information Technology Fluency" (NRCCITL 1999, vgl. Abschnitt 4.3.2) und die Bildungsstandards zu Technologie im Unterricht (National Educational Technology Standards) der"International Society for Technology in Education" (ISTE 1998) beziehen (vgl. (Callegarin und Cortesi 2001), (Aiken und Sand as 2001), (Zammit und Downes 2001)). Zammit und Downes (2001) erkl aren auf der 7. WCCE, wie Lesekompetenz und"Information Technology Competence" (IT-Kompetenz) einander bedingen und entwickeln die Standards der ISTE (1998) diesbez uglich weiter. Die Rolle der Lesekompetenz ist bei der systematischen Erkundung der Benutzungsober ache von Informatiksystemen, aber auch bei der Quellcodeanalyse zu beachten. Schwerpunkt der 8. WCCE im Jahre 2005 ist"Lifelong Learning" und die Rolle von ICT diesbezuglich (vgl. Weert und Kendall 2005). Dabei bleibt wie auch schon bei der WCCE 2001 der "IT Fluency" Ansatz verbreitet (vgl. Barron et al. 2005). Magenheim stellt auf der WCCE 2005 eine Vorstufe eines theoretisch begr undeten Kompetenzmodells der Informatik zur Diskussion (Magenheim 2005), das explizit Informatiksystemverstandnis (Level of System Comprehension) als eine von drei Dimensionen ausweist. Daneben gibt es Anwendung (Level of Application) und Informatiksysteme als Medium (Usage of Media Functions of the Informatics System). Die Dimension Anwendung reicht von der angeleiteten Nutzung von Grundfunktionen zur kombinierten Nutzung spezieller Funktionen unterschiedlicher Informatiksysteme. Die Dimension Informatiksysteme als Medium umfasst Dom anenspezik, generische Cognitive Tools, Kommunikationsund Kooperationsmedien, Explorationsund Evaluationssysteme sowie professionelle Entwicklungswerkzeuge ( !Inhalt 1: Typische Repr asentanten). Fur die Dimension Informatiksystemverst andnis werden aufeinander folgende Verstehensebenen skizziert: Wissen (Knowledge), Wissenstransfer (Transfer of Knowledge), Konstruktion (Complexity of Construction), Evaluation (Assessment). Die Wissensebene umfasst Grundfunktionen von Systemen und Basiskonzepte der Hardware. Unterschiedliche Sichtweisen auf Systeme wie Algorithmen, Quelltext, Benutzungsober achen, Modelle und Protokolle werden als Themenschwerpunkte vorgeschlagen. Auerdem sollen Sch uler grundlegende Informatikprinzipien und abstrakte Konzepte als Metamodelle kennen lernen.92 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Wissenstransfer beinhaltet die Anwendung von ICT-Wissen in einem bekannten Kontext und den Transfer zu einem neuen Kontext. Auf der Ebene der Konstruktion bedarf es eines Verst andnisses von der Konsistenz eines Systems und der F ahigkeit des Re-engineering. Dazu geh ort die Nutzung von Information sowie adaquaten Methoden, Konzepten und Theorien der Softwaretechnik, z. B. Entwurfsmuster, zur Gestaltung neuer Systeme. Die letzte Ebene der Evaluation umfasst die Bewertung von Systementw urfen und von Auswirkungen des Einusses von Informatiksystemen im sozio-technischen und gesellschaftlichen Rahmen (Magenheim 2005, S. 4). Somit werden Strukturmodelle, Informatikkonzepteund -methoden sowie unterschiedliche Sichten thematisiert (! Inhalt 2: Strukturmodelle; !Inhalt 3: Fundamentale Ideen; !Inhalt 4: Sichten). Die Stufung in diesem Kompetenzmodell ist ahnlich der Lernzieltaxonomie nach Bloom. Darin sind ebenfalls Konstruktion als vorletzte und Evaluation als h ochste Stufe der kognitiven Prozesse genannt. Da in der uberarbeiteten Lernzieltaxonomie nach Bloom (Anderson und Krathwohl 2001) diese Ebenen getauscht sind, ist auch f ur dieses Kompetenzmodell eine neue Einsch atzung der Schwierigkeitsgrade zu pr ufen. Eine Schwierigkeit inhaltlicher Art liegt in der Kombination von Kompetenzentwicklung mit Informatiksystemen einerseits und Softwareentwicklung andererseits. Sie impliziert, dass h ohere Ebenen der Kompetenzentwicklung mit Informatiksystemen nur erreicht werden k onnen, wenn Methoden der Softwaretechnik zur Systemkonstruktion beherrscht werden. Das aber setzt in hohem Mae Programmierung und Kenntnis von Implementierungsdetails voraus, welche wiederum nicht notwendigerweise Teil von Kompetenzentwicklung mit Informatiksystemen sein m ussen (Abschnitt 3.2.1). Zusammenfassend ist anzumerken, dass die Dimension Informatiksystemverstandnis durch die N ahe zur Softwareentwicklung nicht der in der vorliegenden Arbeit angestrebten Kompetenzentwicklung mit Informatiksystemen entspricht. Es bestehen jedoch Ubereinstimmungen mit der Dimension der Anwendung: "The dimension 'Level of Application ' measures the complexity of the functions of an informatics system which are used in a given scenario of application. The category ' Guided Use of Selected Basic Functions of the IS ' [Informatics System; Anm. d. V.], for instance, is often realized in a learning software. 'Scenario Adequate Free Choice of Selected Basic Functions of the IS' is mainly linked to cognitive tools. The other categories [. . . ] are representing an increasing complexity of the usage of the system" (Magenheim 2005, S. 5). Damit er onet Magenheim eine Diskussion dar uber, inwieweit Fragen der Skalierbarkeit hinsichtlich kleiner und groer bzw. einfacher und komplexer Informatiksysteme f ur Kompetenzentwicklung zu betrachten sind (Abschnitt 5.6.2). Die Einstufung der Anwendung nach ihrer Komplexit at, die u. a. durch die Benutzerf uhrung bestimmt ist, kann genutzt werden, um Informatiksysteme zu klassizieren, ohne auf ihren Zweck als (alleiniges) Merkmal zur uckzugreifen, z. B. Tabellenverarbeitung, Datenbank etc. Schubert stellt eine Verbindung zwischen den Dimensionen des Magenheim'schen Kompetenzmodells und den Komponenten des Didaktischen Systems her (Schubert 2005). Sie bezieht sich auf Erfahrungen mit dem Didaktischen System f ur objektorientiertes Modellieren (Brinda und Schubert 2001) in der Sekundarstufe und erkennt eine L ucke zwischen Wissen uber kleinste Grundstrukturen von Informatiksystemen, z. B. Attribute und Datenstrukturen, Methoden und Funktionen, Klassen und abstrakte Datentypen sowie Klassenhierarchien, einerseits und Systemverst andnis durch Wissen uber Systemarchitekturen andererseits. Als Zwischenebene nutzt sie deshalb in Einf uhrungsveranstaltungen zur Informatik an der Universit at objektorientierte Entwurfsmuster, die eine Abstraktion eines Subsystems darstellen ( !Inhalt 2: Strukturmodelle). Sie stellt folgende Thesen auf: T1:"Virtual machines and their levels and layers are not strong enough connected with the knowledge networks of an introductory informatics course Algorithms and Data Structures.4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 93 T2: The application of patterns bridges the gap to higher-level abstraction of subsystems" (Schubert 2005, S. 3). Dazu fordert sie die Untersuchung der kognitiven Beziehungen zwischen Entwurfsmustern und Schichtenmodellen f ur Kompetenzentwicklung mit Informatiksystemen. Auerdem formuliert sie die Forschungsfrage, inwieweit Lernende in der Lage sind, Verst andnis objektorientierter Systeme auf allgemeine Informatiksysteme konsistent zu transferieren. F ur Kompetenzentwicklung mit Informatiksystemen folgen daraus zwei Dinge: (1) Ein Zugang uber Entwurfsmuster ist auf seine Tragf ahigkeit zu pr ufen. (2) Die Rolle der Objektorientierung ist f ur Kompetenzentwicklung mit Informatiksystemen zu pr ufen. Objektorientierung ist ein Mittel f ur das Programmieren im Groen (Appelrath et al. 2002), so dass zusammen mit Entwurfsmustern ein Beitrag hinsichtlich der Skalierbarkeit eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung zu erwarten ist (Abschnitt 5.6.2). Auf der ISSEP 2005 (Mittermeir 2005) stellen sowohl Ramsky und Rezina (2005) als auch Dreier und Hartmann (2005) vor, wie Informatikunterricht zur Funktionsweise von Suchmaschinen gestaltet werden kann. Ramsky und Rezina stellen dabei die Motivation in den Vordergrund. Sie berufen sich auf Arestova et al. (2000), die beschreiben, dass die Motivation von Internetanwendern vielgestaltig ist: kognitiv, wirtschafts-, kommunikations-, kooperationsoder freizeitbezogen, spielerisch, auf Gruppenzugeh origkeit, Selbsterf ullung oder Selbstbehauptung ausgerichtet (!Ziel 5: Bereitschaften). Die Lehrperson sollte sowohl kognitive Motivation, z. B. Zugang zu Zeitschriften und Bibliothekskatalogen, als auch soziale Motivation erzeugen, z. B., dass Informationssuche eine Hauptaufgabe im Studium sein wird. Anschlieend nennen Ramsky und Rezina als inhaltliche Themen unterschiedliche Arten der Informationssuche (Verzeichnisse und Suchmaschinen), die Funktionsweise mit Erfassen der Webseiten, Indizieren und Bewerten sowie die Formulierung von Anfragen mittels Boolscher Operatoren. Interessant f ur Kompetenzentwicklung mit Informatiksystemen ist, dass ein Programmablaufplan angegeben wird, der die Schritte der Informationssuche beinhaltet. Somit wird die Anwendung als Probleml oseprozess gesehen (!Methodik 5: Anwendung als Probleml osen), der mittels informatischer Darstellungsmittel visualisiert wird (vgl. Eberle 1996). Er beginnt bei der Analyse der Problemstellung und anschlieender Formulierung der Suchanfrage in der Suchmaschine. Falls die Suche nicht erfolgreich ist, muss die Anfrage pr azisiert und gegebenenfalls um Boolsche Operatoren erg anzt werden. Falls auch dadurch das Ziel nicht erreicht wird, ist die Anfrage vollst andig neu zu generieren. Die Betonung motivationaler Aspekte ist ein Ansatzpunkt, dem Kompetenzbegri bei der Anwendung von Informatiksystemen gerecht zu werden. Dreier und Hartmann (2005) stellen die didaktische Suchmaschine Soekia vor. Als Themen nennen sie neben dem Erfassen der Webseiten, der Indizierung und der Bewertung das"Matching", d. h. das Finden der zur Benutzeranfrage passenden Dokumente. "Die meisten Leute sind der falschen Ansicht, dass Suchmaschinen bei einer Anfrage das Internet in Echtzeit durchsuchen. Eine klare Vorstellung vom Aufbau und der Funktionsweise eines Indexes konnte hier vielen Missverst andnissen vorbeugen" (Dreier und Hartmann 2005, S. 152). Daruber hinaus betonen sie, dass viele Anwender die Anfragen falsch stellen und z. B. nicht zwischen oenen und geschlossenen Fragen unterscheiden sowie zu wenige bzw. unspezische Suchbegrie nutzen ( !Methodik 7: Von der Anwendung zur Maschine). Ein weiterer Schwerpunkt auf der ISSEP 2005 ist Informatikunterricht zu Standardsoftware. Hodnigg (2005) stellt f ur die Tabellenkalkulation ein 3  Ebenen-Konzept vor, dass Wertebene, Formelebene mit Datenabh angigkeiten und Datenussebene beinhaltet. Sie stellt die n dimensionale Datendarstellung in den Vordergrund und identiziert vier Charakteristika von Tabellenkalkulationen: die tabellarische Benutzungsober ache, die durch Zellen sehr lokale Sicht auf Daten, Elemente h oherer Programmiersprachen wie Kontrollstrukturen und zuletzt die Tatsache, dass zur erstmaligen Anwendung kaum Vorkenntnisse vorhanden sein m ussen. Fazit ist,94 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung dass die eingeschr ankte Menge an Programmierkonstrukten einerseits und die starke grasche Strukturierung zur Darstellung von Daten f ur den Informatikunterricht besonders geeignet sind. Die Berechnung durch die Formeln lassen die Unterscheidung in Eingabe und Ausgabe wichtig werden, w ahrend die Verarbeitung wenig transparent f ur den Anwender stattndet. Um dem zu begegnen schl agt Hodnigg vor, in dem Berechnungsmodell zu betonen, dass die r aumliche Anordnung der Daten und deklarative Aspekte zu verstehen sind. Sie schliet damit, dass deswegen traditionelle Datenussbetrachtungen nicht angemessen sind. Sie pr asentiert ein konzeptuelles Modell, das auf dem Beobachtermuster basiert ((Tao 2000), (Tort und Blondel 2007)). Zellen, deren Inhalt von einer anderen Zelle abh angen, werden bei deren Anderung informiert und aktualisiert ( !Inhalt 2: Strukturmodelle). Steinert nutzt Tabellenkalkulation hingegen f ur Datenussmodellierungen in der Sekundarstufe I, indem zu Beginn Elemente eines Datenussdiagramms auf die Zellen projiziert werden (Schneider 2005, S. 132). Somit wird auf die r aumliche Position der Daten eingegangen. Vo (2005a) stellt einen Ansatz aus der beruichen Bildung vor, in dem Modelle der Objektorientierung eingesetzt werden, um Standardsoftware zu unterrichten (siehe Abschnitt 4.2.4). Borchel et al. (2005) erg anzen in ihrem Artikel"Design of an Informatics System to bridge the Gap Between Using and Understanding in Informatics" den Ansatz von Vo um die Implementierung der objektorientierten Modelle der Standardsoftware. Dazu nutzen sie das Pythonmodul Ponto, das durch die Pythonschnittstelle von OpenOceWriter (OpenOce.org) direkt auf ein Standardsoftwaresystem zugreifen und aus einem objektorientierten Modell ein Dokument erzeugen kann. Antonitsch (2005) diskutiert, inwiefern Tabellenkalkulationssysteme die Eigenschaften einer"Microworld"aufweisen: (1) Reduktion der Komplexit at, (2) Verstecken von Komplexit at, (3) Visualisierung von Programmabl aufen und Struktur, (4) Einfachheit der Programmierumgebung und (5) die M oglichkeit, Probleme aus der Lebenswelt zu l osen. Daf ur schl agt er eine Neuordnung der Kriterien (1) bis (5) vor, die zu den Eigenschaften Skalierbarkeit, Ubertragbarkeit und Visualisierung f uhrt (!Medien 1: Visualisierung verborgener Prozesse). F ur die Tabellenkalkulation weist er exemplarisch nach, dass die Kriterien erf ullt sind. Dabei unterscheidet er weiter zwischen struktureller Skalierbarkeit, d. h. die M oglichkeit, eine uberw altigende Funktionsf ulle gem a den Vorkenntnissen des Lernenden zu reduzieren bzw. auszublenden. Dazu z ahlt auch, Aspekte der Problemstellung vor ubergehend zu vernachl assigen. Methodische Skalierbarkeit zielt auf die M oglichkeit der Verwendung unterschiedlicher Unterrichtsmethoden, und curriculare Skalierbarkeit auf mehrfachen Einsatz der Software in unterschiedlichen Unterrichtsstunden. Ubertragbarkeit ist dann gegeben, wenn das Gelernte in anderen Bereichen wieder aufgegrien werden kann, z. B. Datenussoder objektorientierte Modellierung, die erst in der Standardsoftware und sp ater in Softwareentwicklungsprojekten eingesetzt wird. Die ISSEP 2006 (Mittermeir 2006) wurde unter dem Titel"Informatics Education { the Bridge Between Using and Understanding Computers" durchgef uhrt. Verhoe stellt dort Ergebnisse aus einem in mehreren Durchg angen erprobten zweieinhalbt agigen Softwaretechnikprojekt mit Schulern der Sekundarstufe II vor, dass einen Schritt zu der von Schubert auf dem WCCE 2005 geforderten Erforschung des Beitrags von Schichtenarchitekturen zur Kompetenzentwicklung mit Informatiksystemen leistet. Zu Beginn des zweit agigen Kurses, einer so genannten"Master Class", sollten die 12 Teilnehmer mit einem vorgegebenen Programm, einem Fahrstuhlsimulationssystem, experimentieren, dass die technischen Gegebenheiten simuliert, d. h. Fahrstuhl, Stockwerke, T uren, Kn opfe und Anzeigedisplay. Daraus sollten die Anforderungen an die Steuerungssoftware abgeleitet werden. Das Thema wurde ausgew ahlt, da es sich durch geringe algorithmische Komplexit at auszeichnet. Somit konnte der Schwerpunkt auf die Softwarearchitektur gelegt werden (! Inhalt 2: Strukturmodelle). Um diese Anforderungen umzusetzen, wurden Vorteile von Softwarearchitekturen in Kombination mit dem Teile-und-Herrsche-Prinzip bez uglich der Komplexit atsreduktion thematisiert ( !Ziel 2: Arbeiten mit komplexen Systemen; !Inhalt 3: Fundamentale Ideen):4.3. Analyse des internationalen Forschungsstands zu Informatiksystemen und Kompetenzentwicklung in der Schulinformatik 95 "The technique of divide and conquer must be applied to bridle the complexity. We briey discuss the notion of software architecture as a description of the structure of a software solution (components and their relationsships), and various views of such an architecture (abstract static, abstract dynamic, code les, code execution). The main advantages of software architecture are that it facilitates concurrent development and verication of components in isolation; stepwise integration of components; piecewise improvement by changing one or two components at a time" (Verhoe 2006, S. 154; Hervorh. im Original). Vorkenntnisse der Sch uler waren Grundkenntnisse in der Programmiersprache Delphi wie globale und lokale Variablen und Prozeduren mit Parameter ubergabe. Einige der Teilnehmer hatten keinerlei Programmiererfahrung. Daher wurde die Softwarequalit at explizit betont, neben nach auen sichtbaren Anforderungen wie funktionale Korrektheit und Ezienz insbesondere Verizierbarkeit, Wartbarkeit und Wiederverwendbarkeit. Projektmanagement wurde am Rande thematisiert. Mehrmals war es Aufgabe, kleine Teile in der 3-Schichtenarchitektur zu modizieren (!Methodik 6: Modikation statt Entwicklung). Die Lehrperson gab jedoch im Verlauf des Kurses erweiterte Versionen des Programms mit Musterl osung der einzelnen Komponenten, so dass Programmierung nicht den Schwerpunkt bildete. Am Ende standen systematische Tests und Zustandsbeschreibungen der einzelnen Komponenten. Schrittweise wurden die Komponenten zusammengef ugt. Verhoe betont, dass die Methode der Master Class nur f ur gr oere Projekte geeignet ist, da die darin verwendeten Softwaretechnikmethoden andernfalls als unn otig empfunden werden. Nachteil einer solchen Master Class ist der hohe Betreuungsaufwand durch die notwendige intensive Betreuung der Kleingruppen. Dennoch ist f ur Kompetenzentwicklung mit Informatiksystemen der vorgestellte Ansatz sehr interessant, da explizit auf algorithmische Fragestellungen verzichtet wird. Vielmehr steht die Zerlegung eines Systems im Vordergrund. Implementierungsaspekte wurden dadurch minimiert, dass Sch uler nach einer kurzer Zeit der eigenen Entwurfsarbeit eine Architektur vorgegeben bekamen, so dass durch klar denierte Schnittstellen alle Kleingruppen unterschiedliche Teilaufgaben l osen konnten. Systematisches Testen der Komponenten und des Gesamtsystems wurde vorgenommen. Alle 10 Jahre richten Arbeitsgruppen aus dem"Technical Committee 3: Education" des Informatikweltverbandes IFIP eine Konferenz zur Verkn upfung von Informatik und Mathematik in der Bildung aus. Auf der"Informatics, Mathematics and ICT { IMICT 2007" (Benzie und Iding 2007) war die Informatik besonders stark repr asentiert (z. B. (Hubwieser 2007b), (Brinda 2007)), so dass die Konferenz in die Betrachtungen zum Forschungsstand zur Kompetenzentwicklung mit Informatiksystemen aufgenommen wird. Bruidegom und Koolen-Wijkstra (2007) nutzen das ver anderte niederl andische Informatikcurriculum f ur die Sekundarstufe, in der Hardwareorganisation ein Wahlthema ist. Daf ur adaptieren sie eine f ur die Hochschule entwickelte Simulationsumgebung f ur digitale Systeme. Sie simuliert das Verhalten eines Schaltkreises pro Zeiteinheit und stellt Werte der Eingaben, Ausgaben, an den Kanten und Speicherzellen des Schaltkreises dar. Sch uler sind so in der Lage, mit grundlegenden Schaltungen spielerisch zu interagieren und sich ein einfaches Prozessormodell zu erschlieen ( !Medien 1: Visualisierung verborgener Prozesse). Bruidegom und Koolen-Wijkstra heben den Datenpfad und die zeitliche Strukturierung durch Takt und Ereignisse hervor ( !Inhalt 2: Strukturmodelle). Romeike diskutiert Einussfaktoren f ur Kreativit at im Informatikunterricht. Interessant f ur Kompetenzen zu Informatiksystemen sind die damit verbundenen motivationalen Aspekte. Das Verstehen von informatischen Konzepten sieht er dabei als Grundlage der kreativen Anwendung von Informatiksystemen (Romeike 2007, S. 10). Es ist jedoch zu erw ahnen, dass Romeike die Softwareentwicklung, die er mit dem Komponieren im Fach Musik vergleicht, als wichtigen Faktor fur kreativen Informatikunterricht hervorhebt. Obwohl dieser Bereich in der vorliegenden Arbeit zur Kompetenzentwicklung mit Informatiksystemen bis auf Modikation existierender Software vernachl assigt wird, zeigt Romeike hierf ur einen Ankn upfungspunkt auf:96 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung "Computer systems function according to precise rules. As they consist of a big amount of pieces the challenge of CS [Computer Science; Anm. d. V.] lies in building and combining them. Many pieces already exist, but to put them together certainly takes creativity" (Romeike 2007, S. 8). Damit kann das Zusammenspiel der Konzepte in Informatiksystemen und deren Komponenten Ausgangspunkt eines kreativit atsfordernden und damit motivierenden Unterrichtsexperiments sein (!Ziel 5: Bereitschaften; !Inhalt 2: Strukturmodelle; !Inhalt 3: Fundamentale Ideen). Micheuz et al. (2007) beschreiben Bezug nehmend auf Hubwieser ein integratives Konzept, dass alle Kategorien der Anwendung von Rechnern in Schulen abdeckt. Danach werden Rechner in Schulen eingesetzt als Lernmedium, zur Vermittlung von Bedienfertigkeiten f ur ein konkretes Werkzeug und zur Vermittlung langlebiger Informatikgrundlagen (Hubwieser 2007a, S. 43f). Micheuz et al. (2007) formulieren als Ziel, dass Sch uler allt agliche Situationen durch die Anwendung von Rechnern bew altigen k onnen, ein angemessenes Bild von der Rolle des Rechners in der Gesellschaft aufbauen und"kompetente" Anwender werden, die Potential und Grenzen des Rechnereinsatzes bewerten k onnen, um ihn ezient und verantwortungsbewusst einzusetzen. Um sp ater vernetzte Rechner als Werkzeug und Lernmedium anwenden zu k onnen, fordern sie zu Beginn die Aneignung informatischer Konzepte, z. B. fundamentale Ideen der Informatik oder"Threshold Concepts": "The students should deepen their concrete knowledge and skills for using software tools and understand the underlying concepts and principles. With these concepts in mind the students are more likely to transfer knowledge in the wide and quickly changing eld of computer applications. Finally knowledge about core concepts allows the students to reect and evaluate the use of computers in a networked society" (Micheuz et al. 2007, S. 4). Informatische Konzepte werden durch empirische Untersuchungen als"Threshold Concepts" identiziert. Sie zeichnen sich dadurch aus, dass es einem Lernenden erst durch ein Verst andnis dieser Schwellwertkonzepte m oglich ist, einen neuen Lernbereich kognitiv zu erschlieen. So gilt Objektorientierung als ein solches Konzept in der Informatik (Eckerdal et al. 2006). Es stellt sich die Frage, ob f ur die bewusste Anwendung von Informatiksystemen ebenfalls"Threshold Concepts" identiziert werden k onnen (!Inhalt 3: Fundamentale Ideen; Abschnitt 9.3). Weigend (2007) sieht die Ausf uhrung von Programmen als Drama, dessen Protagonisten Daten, Namen, Objekte oder Funktionen darstellen, die im Quelltext auftreten. Diese Entit aten sind oft aus der Lebenswelt den Sch ulern bekannt und eignen sich f ur Rollenspiele oder k onnen in einer Microworld erfahren werden, z. B. Logo. Damit ist es Sch ulern m oglich, sich die Ausfuhrung eines Programms vorzustellen und zu verstehen. Auerdem stellen Rollenspiele und Microworld unterschiedliche Modelle dar, so dass Sichten kombiniert werden k onnen. Der Ansatz ist fur Kompetenzentwicklung mit Informatiksystemen insofern interessant, als dass Objekte im Systemverhalten identiziert werden k onnen und durch die Interpretation als Drama eine Formalisierung der inneren Struktur stattndet ( !Methodik 3: Verbindung von Verhalten und Struktur). Freischlad und Schubert (2007) betrachten die Entwicklung von Aufgabenklassen (vgl. Brinda 2007) f ur Internetworking. Der Katalog, der aus der Analyse von Fachb uchern entstand, ist durch die Bereiche Anwendungen, Protokolle, Adressierung, Daten ubertragung und Architekturen fachsystematisch strukturiert. F ur Kompetenzentwicklung mit Informatiksystemen ist zu pr ufen, wie die Unterrichtsinhalte hinsichtlich des nach auen sichtbaren Verhaltens und der inneren Struktur einzuordnen sind. Protokolle beispielsweise sind eng mit der Architektur verbunden, da sie den Ablauf auf unterschiedlichen Ebenen beschreiben ( !Inhalt 2: Strukturmodelle). In die Aufgabenklassen iet hinsichtlich der Zug anglichkeit auch die Sch ulertatigkeit einer Aufgabe ein, und zwar Beobachten, Beschreiben, Zuordnen, Entscheiden, Schlussfolgern, Berechnen und Darstellen in Diagrammform. F ur Kompetenzentwicklung mit Informatiksystemen ist gerade das aktive Beobachten des Systemverhaltens ein wichtiger Schritt zur Analyse4.4. Fazit f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II 97 (!Methodik 3: Verbindung von Verhalten und Struktur). Iding (2007) gibt in diesem Zusammenhang Hinweise, wie die Korrektheit bzw. Glaubw urdigkeit von Information auf Webseiten bewertet und im Unterricht thematisiert werden kann. Stechert und Schubert (2007) werten die Ergebnisse der ersten Fallstudie zum Unterrichtmodell zu Informatiksystemen und Kompetenzentwicklung aus (Kapitel 6) und beziehen die Ergebnisse der Analyse des Stands der Forschung ein (Abschnitt 4.4). Sie diskutieren den Sichtenwechsel auf Informatiksysteme (vgl. Stechert 2007c) und speziell Sch ulertatigkeiten zur Verbindung des nach auen sichtbaren Verhaltens von Informatiksystemen mit deren innerer Struktur (Abschnitt 7.2). 4.4 Fazit f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II 4.4.1 Uberblick und Strukturierung der Ergebnisse In diesem Kapitel wurden der nationale und internationale Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung untersucht. Ziel war, das Erfahrungswissen der Fachdidaktiken und der Schulinformatik zu analysieren, um darauf aufbauend Bildungsanforderungen eines Unterrichtsmodells zur F orderung der Kompetenzentwicklung mit Informatiksystemen anzugeben. Die Ergebnisse liefern Anhaltspunkte f ur mogliche Kompetenzkomponenten und bilden einen normativ begr undeten Kompetenzrahmen, der als Grundlage des Unterrichtsmodells dient (Kapitel 5). In der nationalen Diskussion (Abschnitt 4.2) wird vornehmlich ab den 1990er Jahren in Artikeln und Bildungsempfehlungen Unterricht zu Wirkprinzipien von Informatiksystemen in den Sekundarstufen I und II gefordert (z. B. (Baumann 1993), (Friedrich et al. 1996), (GI 2000)). Fachdidaktische Konzeptionen wurden f ur den Informatikunterricht entwickelt, die explizit auch Informatiksystemen einen groen Stellenwert zuschreiben (z. B. (Baumann 1996), (Hubwieser und Broy 1997b), (Hampel et al. 1999), (Humbert 2003)). Auf der internationalen Ebene sind unterschiedliche Konzeptionen f ur Informatikunterricht erkennbar (Abschnitt 4.3). Eberle ist mit seiner Konzeption einer Didaktik der Informatik nah an der bundesrepublikanischen Diskussion. Die vorgestellten ACM-Curricula sind sehr stark durch die Fachwissenschaft Informatik strukturiert, so dass vor allem das Entwerfen und Gestalten von Informatiksystemen im Vordergrund steht. In den von UNESCO und IFIP ver oentlichten Curricula hingegen wird vom allt aglichen Probleml osen mit Anwendungen ausgehend ein Verst andnis fur ICT geschaen. F ur das in der vorliegenden Arbeit verfolgte Ziel der Kompetenzentwicklung mit Informatiksystemen m ussen beide Ans atze miteinander verbunden werden, indem Bildungsziele bez uglich des Anwendens von Informatiksystemen auf Informatikthemen und -methoden bezogen werden. Plattformen f ur diesen Austausch bilden die Weltkonferenzen WCCE. Insgesamt wird Kompetenzentwicklung mit Informatiksystemen nach Ansicht des Autors jedoch auch dort nur unzureichend thematisiert. Die Ergebnisse aus der Analyse des Forschungsstands lassen sich in die Bereiche (1) Bildungsziele, (2) Unterrichtsinhalte und Lerngegenstand, (3) Lehr-Lernmethodik und (4) Lehr-Lernmedien aufteilen. Aufgrund der Ziel-Inhalts-Mittel-Abh angigkeiten, ist es nicht m oglich, sie trennscharf zu formulieren (Meyer 2005, S. 92). Ergebnisse der Analyse werden im Folgenden aufgef uhrt und exemplarisch mit Referenzen zu fachdidaktischen Publikationen belegt. Strukturiert werden die vier Bereiche durch die in Kapitel 3 erarbeiteten Facetten des Informatiksystembegris. Dabei ist zu unterscheiden zwischen der Funktion eines vorliegenden Informatiksystems, seinem nach auen sichtbaren Verhalten, der inneren Struktur und den spezikationsbedingten Eigenschaften. Abbildung 4.1 zeigt die Strukturierung der Ergebnisse der Analyse des Forschungsstandes.98 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Abbildung 4.1: Die Strukturierung der Ergebnisse der Analyse des Forschungsstandes 4.4.2 Bildungsziele f ur Kompetenzentwicklung mit Informatiksystemen In den analysierten Bildungsempfehlungen nationaler Fachgesellschaften und in den internationalen Curricula der UNESCO und ACM nden sich ubergeordnete Ziele f ur die allgemeine Bildung in der Sekundarstufe II. Insgesamt lassen sich mehrere Schwerpunkte in der Schulinformatik zur Kompetenzentwicklung mit Informatiksystemen feststellen. Die internationalen Curricula orientieren sich entweder an der Strukturierung der Fachwissenschaft Informatik (ACM 2006) oder aber an einer eingeschr ankten Sicht durch Fokussierung auf ICT (UNESCO 2002). Im deutschsprachigen Raum stellt die Ver oentlichung von Bildungsstandards f ur die Sekundarstufe I durch die GI eine Publikation dar, die einen ersten Schritt in Richtung einer Beschreibung von Kompetenzen zu Informatiksystemen darstellt (GI 2008). Durch den in Kapitel 3 dargestellten Filter, was Informatiksysteme auszeichnet, lassen sich die in Bildungsempfehlungen genannten Ziele folgendermaen strukturieren. Bildungsziel 1 (Aufbau, Vernetzung und Funktionsweise) In vielen Publikationen wird als Bildungsziel das Verstehen von Aufbau und Funktionsweise von Informatiksystemen formuliert, um sie zielgerichtet und bewusst zur L osung von Problemen anwenden und sich weitere Systeme leicht erschlieen zu k onnen (GI 2008). Das Verstehen von Rechnern in lokalen Netzen und im Internet wird als Ziel formuliert. Dazu kommt das Wissen um Strukturmodelle von Informatiksystemen (ACM 1993). Bildungsziel 2 (Arbeiten mit komplexen Systemen) Komplexe Systeme zu uberschauen, ist ein Ziele des Informatikunterrichts (Schulz-Zander et al. 1993), (ACM 1993). Dazu sind Formalisierungsund Abstraktionsmechanismen sowie Metaphern f ur Kompetenzentwicklung mit Informatiksystemen zu schaen. Komplexe Systeme sind systematisch zu zerlegen und logische Zusammenh ange in Modellen zu erfassen (KMK 2004). Bildungsziel 3 (Bewusste Anwendung) Schuler sollen Informatiksysteme als Werkzeug und Lernmedium bewusst anwenden k onnen. Dazu geh oren Auswahl geeigneter Anwenderprogramme, Zielgerichtetheit, Angemessenheit der Eingaben und der Reaktion auf Ausgaben des Rechners, planm aiges Ausw ahlen und Dokumentieren von Ergebnissen (Lehmann 1995). Wissen um Moglichkeiten und Grenzen von Informatiksystemen ist hierf ur notwendig. Grundlage dessen ist eine informatische Bildung, aber auch Bedienfertigkeiten werden in einigen Empfehlungen gefordert (UNESCO 2002) und bilden eine Kompetenzfacette (Klieme et al. 2007).4.4. Fazit f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II 99 Bildungsziel 4 (Entmystizierung) Entmystizierung des Rechners und Abwendung des Gefuhls des Ausgeliefertseins sind im Unterricht umzusetzen ((Koerber 1978), (Humbert 2003), (Schubert und Schwill 2004)). Dabei sind die traditionellen Kulturtechniken und Prozesse zu berucksichtigen, die durch Informatiksysteme ubernommen werden. Bildungsziel 5 (Motivationale, volitionale und soziale Bereitschaften) Der Kompetenzbegri nach Weinert (2001) bzw. Klieme et al. (2007) beinhaltet motivationale, volitionale und soziale Bereitschaften und F ahigkeiten, ein Problem zu l osen. Die Motivation der Sch uler, Informatiksysteme f ur ihre Zwecke einzusetzen, soll gef ordert werden (Bosse et al. 1986). 4.4.3 Empfehlungen zu Unterrichtsinhalten und -gegenst anden f ur Kompetenzentwicklung mit Informatiksystemen Der Softwareentwicklungsprozess wird in vielen Publikationen als wichtige Grundlage des Informatikunterrichts gesehen (z. B. (Schwill 1993a), (Baumann 1996)). Kompetenzentwicklung mit Informatiksystemen wird dann jedoch oft als Vorstufe von F ahigkeiten zur Systemkonstruktion beschrieben (Magenheim 2005). Zur Vermeidung der einseitigen Betrachtung des Softwareentwicklungsprozesses betonen Magenheim und Schulte (2006) die Produkt-Prozess-Relation hinsichtlich sozio-technischer Informatiksysteme. Oen bleibt damit, wie eine Konzeption zu Informatiksystemen und Kompetenzentwicklung aussehen muss, die nicht wesentlich auf Systemgestaltung basiert und dennoch grundlegende Informatikkompetenzen umfasst. Zur Auswahl der Bildungsinhalte f ur Kompetenzentwicklung mit Informatiksystemen ist das fachdidaktische Konzept der fundamentalen Ideen der Informatik (Schwill 1993a) vielversprechend. Jedoch m ussen diese fundamentalen Ideen f ur Kompetenzentwicklung mit Informatiksystemen anhand der vorgegebenen Kriterien nicht im Softwareentwicklungsprozess, sondern im Anwendungsprozess identiziert werden. Die allgemeinen Bildungsanforderungen zu Wirkprinzipien von Informatiksystemen sind nur realisierbar, wenn eine Konkretisierung der Bildungsergebnisse und des Bildungszugangs in Form von Lernzielen erfolgt. Hinsichtlich der Unterrichtsinhalte und -gegenst ande f ur Kompetenzentwicklung mit Informatiksystemen zeichnen sich im fachdidaktischen Forschungsstand nachfolgende Schwerpunkte ab. Unterrichtsinhalt 1 (Typische Repr asentanten) Die Thematisierung verschiedener Hauptfunktionen (Denning 2007) f uhrt zum Einsatz typischer Informatiksysteme im Unterricht. In der fachdidaktischen Literatur umfasst dies Standardsoftware wie z. B. Tabellenkalkulation und Textverarbeitung, Datenbanken und Betriebssysteme. Dabei ist zwischen Anwendungssoftware und Systemsoftware zu unterscheiden (GI 2008). Aber auch die Unterscheidung hinsichtlich des Einsatzes in Produktionsund administrativen Prozessen wird vorgenommen (Weert 1993). Unterrichtsinhalt 2 (Strukturmodelle der Informatik) Strukturmodelle werden als wichtig angesehen, um ein korrektes Bild von Informatiksystemen zu vermitteln. Dazu geh oren VonNeumann-Rechner inklusive Maschinenmodell mit Zentraleinheit, auerdem Schichtenmodelle und Entwurfsmuster. Letztere stellen eine Ebene zwischen Datenstrukturen und Algorithmen einerseits sowie Architekturmodellen andererseits dar (vgl. Schubert 2005). Das Prozesskonzept und die Unterscheidung von realer, virtueller und abstrakter Maschine schlieen sich an (Schubert und Schwill 2004). Damit wird auch die Wichtigkeit theoretischer Maschinenmodelle (Humbert 2003) bzw. formaler Systeme (Hartmann und Nievergelt 2002) betont. Protokolle formalisieren die Kommunikation zwischen den Systemkomponenten (Freischlad und Schubert 2007). Um Objektmodelle oder Datenussmodelle zur Kompetenzentwicklung mit Informatiksystemen einzusetzen, werden unterschiedliche Beschreibungssprachen vorgeschlagen. Die UML dominiert in letzter Zeit diese Diskussion, zeichnet sich aber durch eine Vielzahl von Diagrammarten aus, die nach Verhaltensdiagrammen zur Beschreibung von Prozessen innerhalb des Systems sowie in Wechselwirkung mit der Umwelt und Strukturdiagrammen klassiziert werden. In der fachdidaktischen Diskussion werden u. a. Klassen-, Objekt-, Zustandsund Sequenzdiagramme genannt sowie Struktogramme (vgl. auch Abschnitt 6.4.5).100 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Unterrichtsinhalt 3 (Informatikkonzepte: Fundamentale Ideen der Informatik) Fur Kompetenzentwicklung mit Informatiksystemen ist eine Auswahl an Unterrichtsinhalten zu treffen bzw. sind Informatikkonzepte im Einzelfall hinsichtlich ihres Beitrags zu begr unden. F ur den Informatikunterricht ist die fachdidaktische Diskussion zur Auswahl von Unterrichtsinhalten zurzeit von den fundamentalen Ideen der Informatik (Schwill 1993a) dominiert. Kompetenzen in der Denition von Weinert (2001) bzw. Klieme et al. (2007) beinhalten, dass Probleml osungen in variablen Situationen erfolgreich eingesetzt werden k onnen. Fundamentale Ideen der Informatik unterst utzen den nichtspezischen Transfer, d. h. unbekannte Varianten einer Problemstellung konnen als Spezialf alle eines vertrauten Grundkonzeptes erkannt und L osungsmethoden angepasst werden (Schubert und Schwill 2004), weshalb die Kriterien f ur fundamentale Ideen in der vorliegenden Arbeit zur Auswahl von Unterrichtsinhalten gew ahlt wurden. Herausforderung ist, wie die fundamentalen Ideen der Informatik im Unterricht f ur Kompetenzentwicklung mit Informatiksystemen sinnvoll miteinander vernetzt werden k onnen, wenn auf das Durchlaufen des Softwareentwicklungsprozesses bewusst verzichtet wird (Stechert 2006c). Unterrichtsinhalt 4 (Sichten auf Informatiksysteme) Informatiksysteme zeichnen sich durch ein nach auen sichtbares Verhalten, eine innere Struktur und Implementierungsaspekte aus. Sie sind eingebettet in ihre Umwelt und speziell in gesellschaftliche Prozesse. Dadurch ist ihr Kontext, d. h. die konkrete Anwendungssituation f ur Kompetenzentwicklung mit Informatiksystemen relevant. Informatiksysteme sind daher aus unterschiedlichen Perspektiven zu betrachten. Diese k onnen beispielsweise den Rollen Entwickler, Anwender, Tester, Entscheider, Planer, Administrator, und Betroener zugeordnet werden (Hubwieser 2007a, S. 63), (Schulte und Block 2002). Die Personalisierung der Perspektiven ist jedoch auch kritisch zu sehen. Alternativ sind Informatiksysteme im Unterricht hinsichtlich ihres Zwecks im Rahmen eines Anwendungsgebietes und den Auswirkungen ihres Einsatzes zu thematisieren (Engbring 1995), (Magenheim und Schulte 2006). Die Hauptfunktionen von Informatiksystemen werden nach Denning durch sieben Kategorien der Informatik abgedeckt: computation, communication, coordination, automation, recollection, evaluation, design (Denning 2007). Sie k onnen als Perspektive bzw. Filter zur Auswahl der Unterrichtsinhalte dienen. 4.4.4 Lehr-Lernmethodische Empfehlungen zur Kompetenzentwicklung mit Informatiksystemen Die Analyse des Forschungsstands oenbart zwei haupts achlich in der Unterrichtpraxis eingesetzte Vorgehensweisen. Erstens existieren viele allein stehende Unterrichtsreihen zu typischen Informatiksystemen wie Datenbanken (Antonitsch 2007), Internet (Freischlad 2006) und Standardsoftware (Vo 2006), denen jedoch die Einordnung in ein Gesamtkonzept zur Kompetenzentwicklung mit Informatiksystemen fehlt. Daher m ussen unterschiedliche Informatiksystemklassen in ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung integriert werden (!Inhalt 1: Typische Repr asentanten). Neben den genannten sind Kooperationssysteme f ur Computer Supported Cooperative Work (CSCW) und Computer Supported Cooperative Learning (CSCL) wichtig f ur den Informatikunterricht (vgl. Humbert 2001), da sie weitere Hauptfunktionen von Informatiksystemen betonen (Kapitel 3). Anderen Unterrichtskonzeptionen, die Informatiksysteme besonders hervorheben ((Baumann 1996), (Hubwieser und Broy 1997b), (Hampel et al. 1999), (Humbert 2003)), fehlt es ebenfalls an verbindenden Elementen, um die zusammenh angenden Wirkprinzipien in Informatiksystemen vernetzt zu vermitteln und unterschiedlichen Sichten auf Informatiksysteme zu unterst utzen. Wie m ussen Inhalte zu Wirkprinzipien von Informatiksystemen repr asentiert werden, damit sie ein korrektes Bild von Informatiksystemen vermitteln und von Sch ulern kognitiv erfasst werden konnen? Im Folgenden werden Wissensrepr asentationen zur Vernetzung der Unterrichtsinhalte vorgestellt (Abschnitt 5.4). Bei der Publikation von Unterrichtskonzepten spielen fundamentale Ideen bisher oft keine Rolle. Dies ist auch darauf zur uckzuf uhren, dass das Problem der Vernetzung der Inhalte von Lehrpersonen selbst gel ost werden muss. So ist sie oft durch langj ahrige4.4. Fazit f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II 101 Lehr-Lernerfahrungen zu Algorithmenklassen, Datentypen und Datenstrukturen, also durch die Vorgehensweise beim Programmieren im Kleinen und die eingesetzten Programmierstile (z. B. pradikativ, funktional) begr undet. Wie k onnen Sch uler Informatiksysteme erkunden und Kompetenzen handlungsorientiert entwickeln? Im Informatikunterricht fehlt das systematische Beobachten von Informatiksystemen bisher fast vollst andig (Kapitel 4). Es existieren keine Unterrichtsmodelle, die das systematische Vorgehen, das zum Bewerten und Beobachten von Informatiksystemen notwendig ist, thematisieren und mit ausgew ahlten Bildungsanforderungen f ur Kompetenzentwicklung mit Informatiksystemen verkn upfen. Hinsichtlich der Lehr-Lernmethodik zu Informatiksystemen und Kompetenzentwicklung zeichnen sich im fachdidaktischen Forschungsstand nachfolgende Schwerpunkte ab, die zu ber ucksichtigen sind. Dabei werden Universalit at, Systemanalyse und Modikation von Programmen nicht als Unterrichtsinhalte, sondern als Prinzipien der Unterrichtsgestaltung, d. h. als Unterrichtsmethoden aufgef uhrt (vgl. Hubwieser 2007a, S. 69). Methodik 1 (Universalit at)Eine der wichtigsten Eigenschaften eines Informatiksystems und gleichzeitig Lernschwierigkeit ist die freie Programmierbarkeit. Daraus folgt die Notwendigkeit der Betonung der Universalit at des Rechners in Abgrenzung zu mechanischen Maschinen (Eberle 1996). Damit ist auch die Umsetzung der Universalit at in einem geeigneten Modell notwendig, z. B. Von-Neumann-Architektur und Registermaschine. Die Universalit at des Rechners ist ein wichtiger Unterrichtsinhalt. Die vorliegende Einordnung in die Methodik soll betonen, dass die Universalit at von Informatiksystemen kontinuierlich zu thematisieren ist. F ur unterschiedliche Informatiksysteme ist deren Verhalten jeweils neu zu erkunden, wodurch die Methodenentscheidungen stark beeinusst werden. Methodik 2 (Kognitive Modelle) Modellbildung ist ein Ziel des Informatikunterrichts (GI 2000). Methodisch ist zu beachten, dass Modelle sowohl Abbild von Informatiksystemen als auch Vorbild f ur Informatiksysteme sein k onnen (Thomas 2001). Ersteres kann im Rahmen der vorliegenden Arbeit genutzt werden, um Kompetenzentwicklung mit Informatiksystemen zu unterst utzen und einzelne Aspekte zu betonen. Zur Bildung korrekter kognitiver Modelle vom Rechner beim Sch uler sind m oglichst fr uhzeitig entsprechende Strukturmodelle zu thematisieren (Eberle 1996). Methodik 3 (Verbindung von Verhalten und Struktur) Es herrscht Konsens dar uber, dass Informatiksysteme die von Entwicklern eingesetzten Methoden und Konzepte widerspiegeln (Magenheim und Schulte 2006), wenngleich sie nicht immer eindeutig am Produkt nachzuvollziehen sind. In der fachdidaktischen Literatur werden das Produkt, der Anwendungsprozess, der Softwareentwicklungsprozess und die Konzepte in Informatiksystemen als korrelierende Ein usse auf das Informatiksystem beschrieben, die einem Zweck, d. h. der L osung eines Anwendungsproblems dienen. In der vorliegenden Arbeit f ur Kompetenzentwicklung mit Informatiksystemen wurde die Entscheidung getroen, die Softwareentwicklung nicht vordergr undig zu betrachten. Zur Analyse des Verhaltens von Informatiksystemen werden jedoch explizit Tests und Experimente genannt (Claus und Schwill 2006). Und Methoden wie Teamarbeit werden als wichtig erachtet (Humbert 2003). Das"Inverbindung-setzen" des nach auen sichtbaren Verhaltens mit einem Blick hinter die Fassade, z. B. den Ebenen des Rechners (Eberle 1996), muss kontinuierlich geschehen (ACM 2006). Dazu geh ort das Kl aren der Beziehung zwischen Elementen der Benutzungsober ache und den Komponenten in der inneren Struktur des Informatiksystems. Die bewusste Vorwegnahme h auger Fehler im Unterricht und deren Einordnung in das Ebenenmodell des Rechners sind im Unterricht umzusetzen (Eberle 1996), (Neupert und Friedrich 1997), (Hubwieser 2007a). Daf ur ist auf bewusste Anwendung zu achten, beispielsweise durch Experimente mit Hypothesenbildung (ACM 1993), um Verhalten des Systems mit den eigenen Handlungen in Verbindung zu setzen.102 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung Methodik 4 (Analyse des Systems: Experimente) Systemanalytische und teststrategische Kompetenzen sind notwendig zur kompetenten Beurteilung und Anwendung von informationstechnischen Systemen (vgl. Koerber und Peters 1993). Experimente werden als handlungsorientierte Methode vorgeschlagen, um Informatiksysteme zu erkunden ((ACM 1993), (UNESCO 2002)). Sie implizieren Hypothesenbildung, Wiederholbarkeit und Dokumentation des eigenen Vorgehens, so dass sie das bewusste Anwenden und bewerten der Systeme unterst utzen. Die Kombination aus Erforschen und Anwenden (Antonitsch 2007) kann dabei als Grundlage eines methodischen Vorgehens zur Erreichung dieses Ziels dienen. Methodik 5 (Anwendung als Probleml osen) Die zielgerichtete Anwendung eines Informatiksystems kann als Probleml osen analog zur Algorithmik behandelt werden, z. B. Darstellung des Ablaufs durch Struktogramme oder Anwendungsf alle (Eberle 1996). Es sind unterschiedliche Systemklassen zu identizieren und Vorgehensweisen zur bewussten Anwendung zu entwickeln (Eberle 1996). Dabei kann zwischen deklarativem Wissen als Wissen uber das System und prozeduralem Wissen zur Anwendung des Systems unterschieden werden (Kennewell 1995). Methodik 6 (Modikation statt Entwicklung) Es wurde die Entscheidung getroen, f ur Kompetenzentwicklung mit Informatiksystemen die Softwareentwicklung nicht zu betrachten. Dennoch wird ein Grundverst andnis f ur Algorithmik und abstrakte Datenstrukturen in vielen Publikationen als notwendig f ur Kompetenzentwicklung mit Informatiksystemen angesehen (Nievergelt 1995), (Hubwieser und Broy 1997a). Integriert werden k onnen sie in das angestrebte Unterrichtsmodell, indem existierende Software von den Sch ulern modiziert wird (Lehmann 1995). Methodik 7 (Von der Anwendung zur Maschine) Kompetenzen erfordern Anforderungssituationen, die zu bew altigen sind. Motivation, F ahigkeiten, Fertigkeiten und Bereitschaften sind daf ur notwendig. Daher ist f ur Kompetenzentwicklung mit Informatiksystemen ein Weg von der Anwendung zur Maschine zu w ahlen, auf dem nach und nach das Black-Box-Modell durch Strukturmodelle ersetzt wird (Cyranek 1990), (Modrow 1991), (Klieme et al. 2007). Methodik 8 (Informatiksysteme als Medium und Lerngegenstand) Die didaktische Doppelfunktion von Informatiksystemen als Lerngegenstand und -medium bietet Potential hinsichtlich der Lehr-Lernmethodik (Brinda 2004a). Lernende k onnen durch das Lernmedium an Informatikkonzepte herangef uhrt werden. Fortgeschrittene Lernende k onnen auf Grundlage der so erlernten Konzepte das Lernmedium auf seine innere Struktur untersuchen und modizieren. Methodik 9 (Vernetzung der Unterrichtsinhalte) Informatiksysteme repr asentieren die in der Entwicklung eingesetzten Probleml osestrategien und Konzepte (z. B. Koerber et al. 1989). Wie die Informatikmethoden und -konzepte vernetzt im Unterricht thematisiert werden k onnen, wenn nicht Softwareentwicklung gelehrt wird, bleibt weitgehend unbeantwortet. Teamarbeit und kooperatives Arbeiten mit Informatiksystemen unterst utzt das vernetzte Denken (Vester 1988), (Meier 1990). Voraussetzung f ur Teamarbeit ist jedoch eine gemeinsame (Fach-) Sprache. 4.4.5 Empfehlungen zu Lehr-Lernmedien f ur Kompetenzentwicklung mit Informatiksystemen Hinsichtlich der Lehr-Lernmedien zur Kompetenzentwicklung mit Informatiksystemen sind nur wenige direkte Hinweise zu nden. Gr otenteils sind Anforderungen aus den Empfehlungen zur Lehr-Lernmethodik abzuleiten: Um das nach auen sichtbare Verhalten eines Informatiksystems zu analysieren, k onnen mediale Repr asentationen genutzt werden, um das Verhalten mit informatischen Konzepten und deren Umsetzung in der inneren Struktur des Systems miteinander in Verbindung zu setzen. Informatiksysteme als Lernmittel zur F orderung der Kompetenzentwicklung mit Informatiksystemen werden jedoch kaum in einer didaktisch aufbereiteten Form angewendet (Magenheim 2001), um die Wirkprinzipien von Informatiksystemen sichtbar zu machen.4.4. Fazit f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II 103 Neben Lernmedien werden in den vorherrschenden Ans atzen zur Konstruktion von Informatiksystemen oft professionelle Werkzeuge der Softwareentwicklung eingesetzt, die Sch uler in der Sekundarstufe II uberfordern. Hinzu kommen generische"Cognitive Tools" (Eberle 1996) und domanenspezische Software, z. B. zur Gesch aftsprozessmodellierung. Kooperationswerkzeuge und Standardsoftware sind in den Informatikunterricht zu integrieren (Humbert 2003), (Hubwieser 2007a). Freischlad (2007) nutzt eine Lernsoftware zur Verdeutlichung von Wirkprinzipien im Bereich Internetworking. Genannt werden in der fachdidaktischen Forschung nachfolgende Anforderungen. Medien 1 (Visualisierung verborgener Prozesse) Die Darstellung der im inneren von Informatiksystemen ablaufenden Prozesse und der Struktur wird gefordert, z. B. in Animationen bzw. Simulationen (Proulx 1995). Motivation zu Lernaktivit aten soll durch Beobachtung gef ordert werden. Medien 2 (Interaktion mit den Wirkprinzipien) Lernende sollen mit den Wirkprinzipien von Informatiksystemen interagieren k onnen, d. h. Lernmedien sollen durch Experimentieren das Entdecken fundamentaler Ideen und produktunabh angiger Strukturen erm oglichen. Fehlender Erfahrung der Lernenden mit einer systematischen Erkundung von Informatiksystemen ist durch die Lernsoftware und einen realistischen Anwendungskontext zu begegnen. Explorationsmodule nach Brinda (2004a) und die von Freischlad (2007) vorgestellte Lernumgebung f ur Internetworking unterst utzen Interaktion mit den Wirkprinzipien und einen experimentierenden Zugang. Medien 3 (Kooperationsund Kommunikationsmedium) Informatiksysteme k onnen als Kooperationsund Kommunikationsmedien im Informatikunterricht genutzt werden, beispielsweise zur Unterst utzung bei Projektund Gruppenarbeit (UNESCO 2002). 4.4.6 Schlussfolgerungen und wissenschaftliche Fragestellungen Zusammenfassend ist eine Vielzahl an Bildungszielen, -inhalten, -methoden und -medien erkennbar, die Basiskompetenzen zu Informatiksystemen f ordern kann. Schlussfolgerung ist, dass ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung einschlielich LehrLernmaterialien zur Unterst utzung von Sch ulern und Lehrern auszuarbeiten ist. Dementsprechend m ussen auch Lehrer in Weiterbildungsangeboten f ur die Notwendigkeit von Kompetenzentwicklung mit Informatiksystemen sensibilisiert werden, z. B. in Lehrerfortbildungen ((Schubert et al. 2007), (Freischlad und Stechert 2008)). Es ergeben sich folgende wissenschaftlichen Fragestellungen: 1. Wie ist ein Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen gem a der Ergebnisse der Analyse des fachdidaktischen Forschungsstandes zu gestalten? Ausgehend von den in der Literatur dokumentierten fachlichen Aspekten zu Informatiksystemen und den fachdidaktisch formulierten Bildungszielen, -inhalten, -methoden und -medien wird ein Unterrichtsmodell entwickelt. Die Auswahl der Komponenten muss durch Erkenntnisse aus Informatik, Lernpsychologie, allgemeiner Didaktik und Fachdidaktik begrundet werden, um Lernschwierigkeiten zu vermindern. Bei der Entwicklung des Unterrichtsmodells ist auf Stimmigkeit der Inhalte, Realisierbarkeit im unterrichtlichen Geschehen und fortw ahrend auf den Beitrag zu den in Kapitel 3 analysierten Eigenschaften von Informatiksystemen zu achten. 2. Wie kann das Unterrichtsmodell im Informatikunterricht der Sekundarstufe II exemplarisch erprobt werden? Die Forderung nach empirisch uberpr uften Kompetenzmodellen (Abschnitt 2.1) oenbart, dass die Entwicklung eines Unterrichtmodells nicht bei einer theoretischen Fundierung104 4. Stand der Forschung zu Informatiksystemen und Kompetenzentwicklung durch Erfahrungswissen der Didaktik der Informatik stehen bleiben kann, um Sch ulerleistungen realistisch einsch atzen zu k onnen. Ziel dieser Arbeit ist die Wegbereitung eines Kompetenzmodells zu Informatiksystemen durch Angabe eines theoretisch begr undeten, durch normative Analyse des Forschungsstands praxisrelevanten Unterrichtsmodells, das exemplarisch gestaltet und im Unterricht erprobt wird. Die exemplarische Erprobung hat die Aufgabe, zwischen normativen Zielen und Inhalten sowie konkretem Informatikunterricht zu vermitteln.5. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 5.1 Uberblick Da eine Unterrichtsmodellentwicklung nur mit einer konsensualen Verst andigung uber die zu erreichenden Bildungsziele und -inhalte sowie unterst utzende Unterrichtsmedien und Lehr-Lernmethoden m oglich ist, wurden im vorherigen Kapitel der nationale und internationale Stand der Forschung zur informatischen Bildung auf Ans atze zur F orderung der Kompetenzentwicklung mit Informatiksystemen im historischen Verlauf untersucht. In diesem Kapitel werden die vorgestellten Uberlegungen zu Informatiksystemen und Kompetenzentwicklung in die Entwicklung eines Unterrichtsmodells integriert und fokussiert. Dies schliet die Integration von Erkenntnissen aus der Fachwissenschaft, der Erziehungswissenschaft und anderen Fachdidaktiken in die Didaktik der Informatik ein. Abbildung 5.1: Struktur des Kapitels zur Unterrichtsmodellentwicklung Die Gliederung der Unterrichtsmodellentwicklung nutzt die in der Berliner Didaktik (Heimann 1976) genannten Entscheidungsfelder als Strukturierung (siehe Abschnitt 5.2.2). Danach ist die Intention des Unterrichtsmodells zu bestimmen (Abschnitt 5.2). Anschlieend werden die Ergebnisse aus der Analyse des Forschungsstandes aufgegrien und eine Strategie zur Strukturierung sowie die Fokussierung im Rahmen der vorliegenden Arbeit dargelegt (Abschnitt 5.3). Ersten Schwerpunkt bildet die Vernetzung fundamentaler Ideen der Informatik zur F orderung1065. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung der Kompetenzentwicklung mit Informatiksystemen. Der Autor begr undet mit Erkenntnissen der Lernpsychologie, Informatik und Informatikdidaktik, dass Entwurfsmuster informatikspezische, extern darstellbare Wissensrepr asentationen von vernetzten fundamentalen Ideen der Informatik sind (Abschnitt 5.4). Einige nach fachdidaktischen Kriterien ausgew ahlte Entwurfsmuster sind gleichzeitig Lernmittel und Lerngegenstand. Als Sch ulertatigkeiten zur F orderung der Kompetenzentwicklung mit Informatiksystemen werden Vorgehensweisen zur systematischen Erkundung von Informatiksystemen vorgestellt (Abschnitt 5.5). Einen weiteren Teil des Unterrichtsmodells bildet Lernsoftware, die vernetzte fundamentale Ideen anhand von Wissensrepr asentationen aufgreift (Abschnitt 5.6). Abbildung 5.1 zeigt die Struktur des Kapitels. 5.2 Zielsetzung und Denition des Unterrichtsmodells 5.2.1 Motivation f ur Komponenten eines Unterrichtsmodells Die Analyse des Informatiksystembegris sowie des nationalen und internationalen fachdidaktischen Forschungsstandes zeigen, dass es zur F orderung der Kompetenzentwicklung mit Informatiksystemen einer Strukturierung der Bildungsziele, -inhalte, Lehr-Lernmethoden und Lernmedien f ur den Informatikunterricht bedarf. Im Folgenden ist es das Ziel, ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung zu entwickeln, dass zu dem oenkundigen Bedarf geeignete Schwerpunkte setzt, um den Aneignungsund Vermittlungsprozess zu unterstutzen: Bedarf einer Strukturierung der Bildungsziele und m oglicher Unterrichtsinhalte Ausgehend von den Erkenntnissen zu dem Informatiksystembegri und Kompetenzbegri sowie den Ergebnissen aus der Analyse des Stands der Forschung ist eine Strukturierung der Bildungsziele vorzunehmen. Die Bildungsziele sind Grundlage von Strukturierungsempfehlungen, die sowohl Vorschl age f ur Unterrichtsinhalte als auch zu deren Reihenfolge umfassen. In der vorliegenden Arbeit wird insbesondere fundamentalen Ideen der Informatik eine Schl usselrolle zugewiesen (Abschnitt 5.3). Bedarf einer Vernetzung der Wirkprinzipien von Informatiksystemen im Unterricht Begrundet werden Entwurfsmuster als Wissensrepr asentation vernetzter fundamentaler Ideen der Informatik, die gleichzeitig etablierte Bausteine zur Softwareentwicklung sind. Nachgewiesen wird, dass sie die lernpsychologisch begr undeten Eigenschaften von Schemata besitzen und sich zus atzlich extern repr asentieren lassen. Als graphbasierte Darstellungsmittel zur Repr asentation der vernetzten fundamentalen Ideen der Informatik in Entwurfsmustern werden Wirkungsdiagramme vorgestellt, um die fachdidaktische Kommunikation zu f ordern (Abschnitt 5.4). Lehr-Lernmethodischer Bedarf an Sch uleraktivit aten und Herangehensweisen an Informatiksysteme Um dem Mangel an unterrichtsgeeigneten Vorgehensweisen zur Erkundung von Informatiksystemen zu begegnen, wird eine Herangehensweise in Anlehnung an Unterrichtsexperimente begr undet und mit einer Stufung der kognitiven Prozesse nach Anderson und Krathwohl (2001) theoretisch fundiert (Abschnitt 5.5). Bedarf an Lernmedien wie lernf orderlicher Software zur Unterst utzung des Lehr-Lernprozesses Gestaltungskriterien f ur Lernsoftware werden anhand der Erkenntnisse zu Wissensrepr asentationen erarbeitet, und Lernsoftware wird sowohl w ahrend als auch nach der Entwicklung im unterrichtlichen Geschehen erprobt. Zentral f ur die Vorgehensweise bei der Entwicklung von Lernsoftware sind antizipierte kognitive H urden und erwartete Fehlvorstellungen der Sch uler bez uglich Informatiksysteme. Im Rahmen des Unterrichtsmodells soll Lernsoftware die Vernetzung fundamentaler Ideen der Informatik und Sch ulervorgehensweisen zur systematischen Erkundung von Informatiksystemen f ordern (Abschnitt 5.6).5.2. Zielsetzung und Denition des Unterrichtsmodells 107 Das erfolgreiche"Didaktische System f ur objektorientiertes Modellieren" (Brinda und Schubert 2001) legt nahe, auch f ur Kompetenzentwicklung mit Informatiksystemen ein didaktisches System zu entwickeln. Denn mit dem Ansatz der didaktischen Systeme wird eine Sammlung aufeinander abgestimmter Lehr-Lernmaterialien bereitgestellt, welche die Unterst utzung der fachdidaktischen Kommunikation und Umsetzung im Unterricht zum Ziel hat. Anforderungen an Lernsoftware, Wissensstrukturen und qualitativ hochwertige Aufgaben werden f ur ein didaktisches System formuliert. Schubert betont, dass mit einem didaktischen System in Abh angigkeit von unterschiedlichen Unterrichtsszenarios je nach Zielgruppe sehr exibel verschiedene Kompetenzen erreicht werden k onnen (Schubert und Schwill 2004, S. 134). Dennoch oenbart der Transfer des didaktischen Systems auf Kompetenzentwicklung mit Informatiksystemen das Dilemma unterschiedlicher Abstraktionsebenen. W ahrend es Brinda (2004a) gelingt, f ur das klar umrissene Feld der objektorientierten Modellierung aus der vorhandenen Literatur zu OOM an Schulen und Hochschulen einen konsensf ahigen Katalog an Aufgabenklassen zu extrahieren, muss f ur Kompetenzentwicklung mit Informatiksystemen festgestellt werden, dass das Thema weder derart eindeutig von anderen Gebieten abzugrenzen ist noch entsprechende Literatur existiert. Dar uber hinaus stellt Schubert fest, dass erg anzend zum didaktischen System ein Bedarf an einer an der Fachwissenschaft orientierten Auswahl von Unterrichtsinhalten besteht, z. B. durch fundamentale Ideen der Informatik (Schubert und Schwill 2004, S. 134). Somit ist es nach Auassung des Autors notwendig, statt eines didaktischen Systems ein Unterrichtsmodell zu entwickeln, das eine Strukturierung des Feldes vornimmt, die sowohl fachdidaktische Kommunikation und Umsetzung f ordert als auch die Auswahl von Informatikinhalten und -methoden zum Ziel hat. Dennoch ieen Erkenntnisse aus dem didaktischen System in das Unterrichtsmodell ein, insbesondere hinsichtlich Lernsoftware (Abschnitt 5.6) und Aufgaben, die ein experimentierendes Vorgehen zur Systemerkundung zugrunde legen (Abschnitt 5.5). Im Folgenden werden die genannten Schwerpunkte verkn upft zu einem Unterrichtsmodell und dessen Entwicklung exemplarisch f ur Kompetenzentwicklung mit Informatiksystemen dargestellt. 5.2.2 Denition Unterrichtsmodell Aufgabe des Unterrichtsmodells ist, einen fachdidaktischen Rahmen f ur Informatikunterricht zu schaen, um ein Bildungsziel, wie beispielsweise Kompetenzentwicklung mit Informatiksystemen, zu fordern. Unter einem Unterrichtsmodell sei im Folgenden ein fachdidaktisch begr undetes Konzept verstanden, das Erkenntnisse aus der Lehr-Lerntheorie, der Fachwissenschaft, der Erziehungswissenschaft sowie anderen Fachdidaktiken aufgreift und mit informatikdidaktischen Konzepten zur Vernetzung der Grundbegrie und Wirkprinzipien sowie zur fachdidaktischen Kommunikation (Wissensrepr asentation f ur vernetzte fundamentale Ideen), zur Kategorisierung von Bildungszielen und -inhalten (Perspektiven auf Informatiksysteme; Strategie zur Strukturierung) und zur Umsetzung im unterrichtlichen Geschehen (Entwicklung von lernf orderlicher Software und Sch ulervorgehensweisen mit Handreichungen zu Motivation und Durchf uhrung von Experimenten) verkn upft. Die Vernetzung der Grundbegrie und Wirkprinzipien von Informatiksystemen blieb bisher eine Aufgabe, die der Lehrer selbst l osen musste. Das Unterrichtsmodell unterst utzt den Lehrer, die Unterrichtsinhalte durch Wissensrepr asentationen zu vernetzen. Ahnlich dem didaktischen System, das als oener, erweiterbarer Verbund von Komponenten des Lehr-Lernprozesses angelegt wurde, gilt auch f ur ein Unterrichtsmodell, dass zielgruppenund themenspezische Gestaltungsanforderungen zu einer Verfeinerung und der Ber ucksichtigung1085. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung weiterer Aspekte f uhren k onnen. Der Begri des Unterrichtsmodells wird verwendet, um anzudeuten, dass es sich um einen theoretischen Rahmen f ur Informatikunterricht handelt. Dabei ist eine sofortige Umsetzbarkeit des Unterrichtsmodells in Unterricht nicht das prim are Ziel, wie es bei so genannten Unterrichtskonzepten angestrebt wird: "Unterrichtskonzepte sind Gesamtorientierungen didaktisch-methodischen Handelns [. . . ]. Probleme didaktischer Theoriebildung treten oft, nicht immer in den Hintergrund" (Jank und Meyer 2002, S. 305f). Vielmehr soll durch den Begri des Unterrichtsmodells die fachdidaktische Theoriebildung besonders betont werden. So ist es anhand des Unterrichtsmodells m oglich, existierenden Unterricht auf die im Unterrichtsmodell denierten Bildungsziele hin zu untersuchen und daraufhin Anpassungen vorzunehmen. Der Begri des Unterrichtsmodells muss jedoch abgegrenzt werden von einem didaktischen Modell, wie z. B. der Berliner Didaktik. Solch ein didaktisches Modell bildet ein Theoriegeb aude, durch das didaktisches Handeln analysiert und modelliert werden kann (Jank und Meyer 2002, S. 35). Es kl art "theoretisch umfassend und praktisch folgenreich die Voraussetzungen, M oglichkeiten, Folgen und Grenzen des Lehrens und Lernens" (Jank und Meyer 2002, S. 35). Diese didaktischen Modelle geben einen Rahmen f ur das angestrebte Unterrichtsmodell vor. Die bildungstheoretische Didaktik nach Klafki unterscheidet sieben Kategorien zur Unterrichtsplanung. Diese sind Gegenwartsbedeutung, Zukunftsbedeutung, exemplarische Bedeutung, thematische Struktur und soziale Lernziele, Erweisbarkeit und Uberpr ufbarkeit, Zug anglichkeit und Darstellbarkeit beispielsweise durch Medien und zuletzt die methodische Lehr-Lernprozessstruktur (Klafki 1996). Die lerntheoretische bzw. Berliner Didaktik entstand aus der Diskussion um die bildungstheoretische Didaktik. Heimann (1976) betont im Gegensatz zur bildungstheoretischen Didaktik, dass die Entscheidungsfelder voneinander abh angig seien. Die sozio-kulturellen und anthropogenen Voraussetzungen wirkten dar uber hinaus in die Bedingungsfelder zur Intention, zu den Unterrichtsinhalten, zu den Methoden und zu den Medien hinein (vgl. Hubwieser 2007a, S. 27). Beide Didaktiken, die sich laut Jank und Meyer bis zur Ununterscheidbarkeit einander angen ahert haben (Jank und Meyer 2002, S. 37), bilden die Grundlage des vorliegenden Unterrichtsmodells. Weitere Grundlage des Unterrichtsmodells ist die Forderung nach konstruktivistischem Lernen im Sinne des gem aigten Konstruktivismusses (Jank und Meyer 2002, S. 301). Es basiert auf der Grundannahme, dass Menschen alles Wissen nur auf Grundlage eigener Erfahrungen konstruieren k onnen und die Wirklichkeit letztlich nur ein Konstrukt des Gehirns und damit nicht unmittelbar zu erkennen ist (Jank und Meyer 2002, S. 286). Jank und Meyer betonen dabei jedoch, dass konstruktivistische Didaktiken zwar zahlreiche Anregungen bieten, aber bildungstheoretisch weiterentwickelt werden m ussen (Jank und Meyer 2002, S. 301). Hubwieser f uhrt einige konstruktivistische Str omungen an (Hubwieser 2007a, S. 10f), die spezische Anregungen betonen und in der vorliegenden Arbeit zum Beispiel bei der Entwicklung von Lernsoftware und bei Planung und Durchf uhrung der Unterrichtserprobungen handlungsleitend waren: Situiertheit dadurch, dass die Sch uler direkt mit Informatiksystemen als Gegenstand der Aufgaben in einem konkreten Zusammenhang befasst sind (Abschnitt 5.5), Gestaltung und Einbindung eines narrativen Ankers bei der Konzeption der Lernsoftware Pattern Park (Abschnitt 5.6), kognitive Flexibilit at zur Begr undung unterschiedlicher Sichten auf Informatiksysteme und entsprechende Modelle (Abschnitt 5.3), und Cognitive Apprenticeship bei der Durchf uhrung von Informatikexperimenten (Abschnitt 5.5). Zusammenfassend sei der Begri Unterrichtsmodell deniert als ein theoretisch begr undeter Rahmen f ur praktische Unterrichtskonzepte. Das Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen wird f ur den allgemein bildenden Informatikunterricht der Sekundarstufe II konzipiert. Prinzipiell ist jedoch auch f ur die Sekundarstufe I angemessener Unterricht zur F orderung der Kompetenzentwicklung mit Informatiksystemen zu fordern. Ab Abschnitt 5.4 werden die Komponenten des Unterrichtsmodells vorgestellt und diskutiert.5.3. Strukturierung und Fokussierung der Bildungsziele, -inhalte, -methoden und -medien 109 5.3 Strukturierung und Fokussierung der Bildungsziele, -inhalte, -methoden und -medien 5.3.1 Perspektiven auf Informatiksysteme Die Analyse des Informatiksystembegris in Kapitel 3 ergab folgende Grobstrukturierung der Bildungsziele zur F orderung der Kompetenzentwicklung mit Informatiksystemen (Claus und Schwill 2006): Die Sch uler sind in der Lage, eine Anforderungssituation zu bew altigen hinsichtlich . . . SA: des nach auen sichtbaren Verhaltens von Informatiksystemen, SB: der inneren Struktur und interner Prozesse von Informatiksystemen, SC: ausgew ahlter Aspekte der Implementierung einer konkreten Realisierung. Bei der Erstbegegnung mit einem Sachverhalt ist das intuitive Denken und Verstehen der Sch uler zu ber ucksichtigen. Bruner klassiziert in seinem Repr asentationsmodell die Informationsaufnahme, -verarbeitung und -speicherung nach der Stufe der Handlung (enaktiv), der bildhaften Wahrnehmung (ikonisch) und der Sprache (symbolisch) (vgl. Bruner 1966). Es ist zu ber ucksichtigen, dass diese Stufen aufeinander aufbauen und ebenso wie die fundamentalen Ideen nach Bruner das Spiralprinzip unterst utzen (Abschnitt 4.2.2). Hartmann et al. (2006) unterscheiden daruber hinaus zwischen enaktiv und virtuell-enaktiv. Letzteres bezieht sich auf Handlungen in einer (Lern-) Software. Fur den Lernprozess ist interessant, dass f ur das nach auen sichtbare Verhalten, die innere Struktur und die Implementierungsebene je eine andere Repr asentationsebene als Beschreibungsart dominiert (enaktiv, ikonisch, symbolisch), wenngleich dies nicht zwingend ist. So bietet sich f ur die Ebene SAein enaktiver oder virtuell-enaktiver Zugang an. Das heit, Lernende k onnen ein aktives Informatiksystem im doppelten Wortsinn begreifen. Informatiksysteme, die durch ihr Verhalten in die Realit at einwirken, werden auch als enaktive Modelle bezeichnet: "Wir sprechen [. . . ] von enaktiven (handlungsbezogenen) Modellen: Die Wirklichkeit wird durch Objekte modelliert, an denen man Handlungen vornehmen kann, und die selber aktiv werden und auf andere Objekte einwirken k onnen, die folglich vom Menschen kognitiv erfasst werden wie ihre Originale" (Schubert und Schwill 2004, S. 155). Die innere Struktur SBhingegen ist sehr gut durch Diagramme, also ikonisch, zu beschreiben. Mit ihnen lassen sich neben statischen auch dynamische Aspekte des Informatiksystems erfassen. Die Erarbeitung einer konkreten Realisierung SCerfordert das Erstellen und Bearbeiten einer Spezikation sowie Programmierung und Modikation von Quelltext. Somit uberwiegt in diesem Bereich die textuelle, also symbolische Repr asentationsform. In der vorliegenden Arbeit wird der Schwerpunkt jedoch auf das Systemverhalten und die innere Struktur gelegt, Implementierungsaspekte spielen eine nachgeordnete Rolle (Abschnitt 3.3). Hinsichtlich der zu w ahlenden Modelle folgt daraus: "Von diesem Standpunkt aus gesehen stellen Datenstrukturen, Verarbeitungsvorschriften und Systembeschreibungen Modelle oder Teile von Modellen dar, allerdings auf unterschiedlichen Abstraktionsstufen. W ahrend Datenstrukturen und Verarbeitungsvorschriften auf die Implementierungtechnik bezogen sind, besch aftigen sich Systembeschreibungen mit den Eigenschaften des zu modellierenden Systems" (Hubwieser 2007a, S. 87; Hervorh. im Original). Damit sind Modelle zur Systembeschreibung zu w ahlen, die auf h oherem Abstraktionsniveau liegen.1105. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 5.3.2 Strategie zur Strukturierung der Unterrichtsinhalte Thematische Fokussierung In diesem Abschnitt soll anstelle eines festen Katalogs von Unterrichtsinhalten eine Strategie zur Strukturierung begr undet werden. Dabei spielen Fragestellungen zum Allgemeinbildungswert, zur Ziel-Inhalts-Mittel-Relation und zur fundierten Auswahl von vernetzten fundamentalen Ideen eine Rolle. In der Didaktik der Informatik ist besonders der Ansatz nach Bussmann und Heymann (1987) weit verbreitet (vgl. Hubwieser 2007a, S. 57). Danach ist mindestens einer der folgenden Punkte fur Unterrichtsinhalte zu erf ullen: (1) Vorbereitung auf zuk unftige Lebenssituationen, (2) Stiftung kultureller Koh arenz, (3) Aufbau eines Weltbildes, (4) Anleitung zum kritischen Vernunftgebrauch, (5) Entfaltung eines verantwortlichen Umgangs mit den erworbenen Kompetenzen, (6) St arkung des Sch uler-Ichs (vgl. Engbring 1995, S. 71). Bez uglich der Vorbereitung auf zukunftige Lebenssituationen ist sicherlich ein Blick auf die Rollen des Menschen gegen uber Informatiksystemen zu nennen. Diese sind Entscheider, Planer, Entwickler, Administratoren, Nutzer und Betroene (Hubwieser 2007a, S. 63). Stiftung kultureller Koh arenz gelingt beispielsweise durch Vereinheitlichung der Fachsprache, die bei der Anwendung von Informatiksystemen verwendet wird (Hubwieser 2007a, S. 63), aber auch durch Darlegen einer systematischen Herangehensweise an Informatiksysteme (vgl. Abschnitt 5.5). Der Aufbau eines Weltbildes wird gest arkt durch Ausbildung einer Sach-, Handlungsund Beurteilungskompetenz zur Anwendung von Informatiksystemen. Die Anleitung zum kritischen Vernunftgebrauch kann nach Hubwieser aus den Moglichkeiten und Grenzen der Systeme durch Berechenbarkeit und Komplexit at, Funktionsweise und durch Bewusstmachen des Ph anomens der Blindheit von Informatiksystemen erwachsen. Die St arkung des Sch uler-Ichs geschieht unter anderem durch Vermeidung von Computergl aubigkeit, z. B. durch Thematisierung der Grenzen von Informatiksystemen und Vorwegnahme von Fehlern im Unterricht. Im bildungstheoretischen Ansatz der G ottinger Schule nach Klafki (1996) m ussen Themen f ur den Fachunterricht ausgew ahlt werden, die als Besonderes das Allgemeine enthalten. Die Leitfragen sind: "Welche exemplarische Bedeutung hat der Unterrichtsgegenstand? Wie bedeutend ist er f ur die Gegenwart? Welche Bedeutung f ur die Zukunft l asst sich vermuten? Wie ist die Struktur des Inhalts? Wie steht es mit der unterrichtlichen Zug anglichkeit?" (Hubwieser 2007a, S. 25f). In ihnen wird wie auch bei der Berliner Didaktik nach Heimann (1976) besonders das Exemplarische betont. Die Analyse von Bildungsempfehlungen und Curricula ergibt eine Vielzahl m oglicher Unterrichtsinhalte, die zur Kompetenzentwicklung mit Informatiksystemen f ur notwendig erachtet werden. In solchen Empfehlungen werden oft jedoch nur Lernziele formuliert, ohne sie in einen gr oeren Kompetenzzusammenhang zu bringen (Abschnitt 4.4). Um die Unterrichtsinhalte f ur ein Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung zu strukturieren, beziehen sich Stechert und Schubert (2007) auf ihre Forschungsresultate zu Schichtenmodellen, Entwurfsmustern und vernetzten fundamentalen Ideen der Informatik. Dazu werden folgende Kategorien identiziert: A) Typische Repr asentanten von Informatiksystemen, {Systemsoftware mit besonderer Ber ucksichtigung der Hardware, {Anwendungssoftware mit besonderer Ber ucksichtigung der Vernetzung; B) Strukturmodelle von Informatiksystemen mit geeigneten Darstellungsformen, {Von-Neumann-Rechner inklusive Maschinenmodell, {Schichtenmodelle,5.3. Strukturierung und Fokussierung der Bildungsziele, -inhalte, -methoden und -medien 111 {Entwurfsmuster; C) Vernetzte fundamentale Ideen der Informatik in Informatiksystemen. Dabei ist zu beachten, dass an typischen Repr asentanten und Strukturmodellen wiederum fundamentale Ideen { durch den exemplarischen Charakter m oglicherweise auf einem niedrigeren Abstraktionsniveau { zu lernen sind. Der Bereich B) ist einerseits strukturiert durch das Ebenenmodell der Rechnerarchitektur, das unterschiedliche Abstraktionsebenen von der digitalen Logikebene (reale Maschine) zur h oheren Programmiersprache beschreibt (Tanenbaum und Goodman 2001), andererseits durch den Zusammenhang zwischen realer, abstrakter und virtueller Maschine (Schubert und Schwill 2004). Im Folgenden wird die Auswahl der Unterrichtsinhalte diskutiert und f ur das Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung weiter begr undet. Typische Repr asentanten von Informatiksystemen Es gibt unterschiedliche Ausgestaltungen von Informatiksystemen, z. B. Betriebssystem, Datenbanksystem und Textverarbeitungssystem. Das zu inspizierende Informatiksystem im Unterricht ist ein durch die Lehrperson ausgesuchter exemplarischer Lerngegenstand. Besch aftigung mit dem Lerngegenstand soll Kompetenzentwicklung zu ausgew ahlten Aspekten von Informatiksystemen f ordern. Es reicht daher nicht, allein das Verhalten eines Systems zu kennen. Zur Begrundung liefern Hubwieser und Broy eine entscheidende Klassikation der Unterrichtsinhalte nach ihrer Allgemeing ultigkeit, bei der nur die beiden erstgenannten f ur die Schulinformatik uneingeschr ankt geeignet sind: Anwendung auch auerhalb von Informatiksystemen, charakteristisch f ur alle Informatiksysteme, charakteristisch f ur eine Klasse von Informatiksystemen, charakteristisch f ur ein konkretes Informatiksystem (vgl. Hubwieser 2007a, S. 83). Unterrichtsinhalte sollen also m oglichst f ur alle Informatiksysteme relevant sein. Typische, ausgewahlte Repr asentanten von Informatiksystemen k onnen dazu dienen, diese Unterrichtsinhalte oder, bei entsprechender Begr undung, die f ur eine Systemklasse relevanten Unterrichtsinhalte zu thematisieren. Vom Autor betreut wurden Datenbanksysteme und Betriebssysteme in Seminararbeiten von Dittich (2008) und Gerding (2008) f ur Kompetenzentwicklung mit Informatiksystemen betrachtet. Beispielsweise bei Datenbanksystemen lassen sich zentrale Konzepte der Modellbildung anschaulich verdeutlichen (Dittich 2008). Dazu wird die Funktionalit at eines Datenbankmanagementsystems auf verschiedenen Abstraktionsebenen, also als Schichtenarchitektur modelliert (vgl. Antonitsch 2007): vom Sekund arspeicherzugri bis zu deklarativen Datenbanksprachen (vgl. Tanenbaum und Goodman 2001). Skalierbarkeit ist hier sowohl hinsichtlich der Benutzeranzahl als auch hinsichtlich der Datenmenge zu gew ahrleisten. Es kann auf Datenmengen eingegangen werden, wie sie beispielsweise in Datenbanken von Suchmaschinen anfallen. Auch konkurrierender Zugri und dessen Vermeidung durch das ACID-Prinzip (Atomicity, Consistency, Isolation, Durability) lassen sich thematisieren. Da typische Informatiksysteme wie Datenbanksysteme h aug im Unterricht thematisiert werden, erfolgt in der vorliegenden Arbeit eine Fokussierung auf Eigenschaften, die f ur m oglichst viele Informatiksysteme zutreen, z. B. Zugriskontrolle. Zur Argumentation werden neben obiger Klassikation hinsichtlich der Allgemeing ultigkeit auch die Kategorien der Informatik nach Denning (2007) genutzt und im Sinne von Hauptfunktionen von Informatiksystemen angewendet.1125. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Strukturmodelle von Informatiksystemen Strukturmodelle bilden einen Zugang zur inneren Struktur von Informatiksystemen. Durch die Annahme, dass durch die grobe Art der Zerlegung von Systemen in wenige Architekturelemente, bzw. aufeinander aufbauende Schichten, das Verstehen von Systemcharakteristika gef ordert wird, ist eine Auswahl aus den Strukturmodellen zu treen. Dabei sollten sowohl Hardwarearchitekturen als auch Softwarearchitekturen ber ucksichtigt werden. Eine Grundannahme ist hierbei das Konzept der strukturierten Zerlegung, speziell der Modularisierung: "Hinter der Modularisierung verbirgt sich die Zielvorstellung, jedes System liee sich durch die Eigenschaften seiner Teile vollst andig erkl aren und als Summe total voneinander unabh angiger Teile (bottom-up ) auassen bzw. in total voneinander unabh angige Teile zerlegen (top-down ). Diese Zielvorstellung ist zwar faktisch unerreichbar, denn die Eigenschaften eines Systems lassen sich nicht nur aus den Eigenschaften der Subsysteme allein ableiten, sondern sie werden auch durch ihre Beziehungen untereinander beeinusst; die normative (nach Plato) bzw. regulative (nach Kant) Funktion dieser Idee auert sich jedoch in dem Bestreben, die Abh angigkeiten zwischen den Teilsystemen (Schnittstellen) dann wenigstens so gering wie m oglich zu halten" (Schubert und Schwill 2004, S. 93; Hervorh. im Original). Begrundung ist, dass Lernende durch Strukturmodelle, seien es Rechnerarchitektur, Softwarearchitektur oder generell die Zerlegung von Systemen in wenige Komponenten, ein kognitives Modell des Systems aufbauen k onnen. Dementsprechend bieten sich Von-Neumann-Rechner, Schichtenmodelle und Entwurfsmuster zur Strukturierung an. Schichtenmodelle k onnen im Unterricht die Verbindung zwischen den verschiedenen Strukturmodellen begr unden: "To describe computer-computer interaction as well as the gap between human-computer interaction and binary machine code, i. e., between virtual machine and real machine, 'models of layers' are essential" (Stechert und Schubert 2007, S. 6) In der vorliegenden Arbeit werden Entwurfsmuster (Abschnitt 5.4) und Architekturmuster (Abschnitt 7.3) als Strukturmodelle eingesetzt. Ein Ausblick auf das Blockmodell des Von-NeumannRechners und Schichtenmodelle wird in Abschnitt 9.3 gegeben. Schichtenmodelle stellen eine hierarchische Strukturierung von Informatiksystemen dar. Entwurfsmuster wiederum bilden viel feinere Strukturelemente zur Beschreibung von Systemkomponenten, die sich nicht notwendigerweise an der Schichtenarchitektur orientieren. Dar uber hinaus unterst utzen Entwurfsmuster den Lernvorgang im Sinne des Cognitive Apprenticeship (kognitive Handwerkslehre; (vgl. Hubwieser 2007a, S. 11)), da sie als Probleml osemuster von Experten auf dem Gebiet der Softwareentwicklung eingesetzt werden und somit authentische Methoden darstellen. Informatische Strukturmodelle sollen sowohl f ur das Verstehen der Strukturierung von Informatiksystemen einsetzbar als auch als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik einen stark fachdidaktisch begr undeten Einsatz erfahren. Vernetzte fundamentale Ideen der Informatik in Informatiksystemen Wahrend der Analyse des Forschungsstandes wurde die Entscheidung getroen, f ur das Unterrichtsmodell fundamentale Ideen der Informatik zu nutzen, da sie auf p adagogisch motivierten Kriterien basieren und gleichzeitig den Bildungswert sowie die Orientierung am Fach garantieren. Dar uber hinaus ergab die Analyse, dass die Vernetzung von Unterrichtsinhalten f ur Kompetenzentwicklung mit Informatiksystemen wichtig ist. Brauer und Brauer fordern mit Blick auf komplexe Informatiksysteme die Informatik auf, vernetztes Denken und Handeln mit zu gestalten: "Ja, es wird immer klarer, da sequentielle geschlossene Systeme sehr grobe Idealisierungen darstellen, da aber konkrete Systeme i. a. verteilt, oen (interaktiv) und nichtsequentiell sind. Selbst die simple Turingmaschine ist nicht wirklich sequentiell realisierbar (worauf schon Petri in [Pet 62] hinwies). [. . . ] Deshalb ist die Anderung der Denkgewohnheiten n otig; vernetztes, nicht l anger sequentielles Denken wird gebraucht [. . . ]. Vernetztes Denken und Handeln wird unterst utzt durch die Informatik: durch Softund Hardware-Systeme, aber auch durch Begrie, Konzepte, Modelle, Verfahren" (Brauer und Brauer 1992, S. 17).5.3. Strukturierung und Fokussierung der Bildungsziele, -inhalte, -methoden und -medien 113 Fur das Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen wurde deshalb die Entscheidung getroen, nicht isolierte, sondern vernetzte fundamentale Ideen der Informatik in den Mittelpunkt zu stellen. Vernetzte fundamentale Ideen der Informatik sind zentral f ur Kompetenzentwicklung mit Informatiksystemen. Fundamentale Ideen der Informatik nach Schwill wurden anhand des Softwareentwicklungsprozesses identiziert und sind somit eng mit Entwurf und Konstruktion von Informatiksystemen verkn upft (Schwill 1993a). Konsens herrscht dar uber, dass sich informatische Konzepte, die bei der Konstruktion eingesetzt wurden, auch in den Produkten widerspiegeln (vgl. Kapitel 4). Wie kann eine sinnvolle Auswahl geeigneter fundamentaler Ideen der Informatik vorgenommen werden, die f ur Kompetenzentwicklung mit Informatiksystemen wichtig sind? Durch die Kriterien ist eine Einschr ankung auf den von Schwill vorgegebenen Katalog fundamentaler Ideen nicht zwingend: "Stets ist aber zu ber ucksichtigen, dass jede Liste ein gewisses subjektives Element enth alt, weil die beteiligten Begrie und Bedingungen nicht formal deniert sind und auch nicht formal deniert werden k onnen (regulative versus konstitutive Funktion von Ideen), also immer Interpretationsfreiheiten lassen. Auch gibt es kein Kriterium, um nachzuweisen, ob eine Ideenkollektion alle Elemente der Wissenschaft vollst andig und in angemessenem Umfang beschreibt" (Schubert und Schwill 2004, S. 87). Nievergelt schl agt vor, nicht pauschal, sondern im Einzelfall zu pr ufen, ob ein Konzept zielf uhrend ist (Abschnitt 3.2.3). Zur Begr undung der Auswahl fundamentaler Ideen f ur Kompetenzentwicklung mit Informatiksystemen bieten sich drei Alternativen an. Erstens kann uber fachdidaktische Kriterien argumentiert werden. So k onnte in einer Auslegung des Zielkriteriums f ur fundamentale Ideen das (m oglicherweise unerreichbare) Ziel"Beherrschung von Informatiksystemen" (vgl. Brunnstein 2001) herangezogen werden, denn dieses philosophische Kriterium soll erm oglichen, dass man "sie [die Informatik, A. d. V.] gegen andere Wissenschaften abgrenzen [kann]" (Schubert und Schwill 2004, S. 85). Als zweites kann uber die Sichtweisen auf Informatiksysteme argumentiert werden. Hier gibt es das nach auen sichtbare Verhalten, die innere Struktur und die Erstellung einer konkreten Realisierung. Im Rahmen des Unterrichtsmodells wird ein Zugang uber das nach auen sichtbare Verhalten gew ahlt, daher bietet sich die Analyse des Anwendungsprozesses auf fundamentale Ideen an. Eine Auswahl kann hier einerseits uber typische Repr asentanten von Informatiksystemen gelingen, indem Interaktionsformen bzw. Ein-Ausgabe-Anforderungen betrachtet werden. Andererseits kann uber Qualit atsanforderungen (in Form von Normen) eine Auswahl begr undet werden. Zusatzlich kann normativ vorgegangen werden. Einige grundlegende Begrie der Informatik, die in Bildungsempfehlungen oft genannt werden, sind eng mit Informatiksystemen verbunden. Dazu z ahlen beispielsweise das EVA-Prinzip, Formalisierung, Speicherung, freie Programmierbarkeit und Skalierbarkeit von Informatikl osungen. Auerdem kann uber Hauptfunktionen von Informatiksystemen argumentiert werden (Denning 2007), z. B. spielt bei fast allen Informatiksystemen Zugriskontrolle eine Rolle. Freie Programmierbarkeit ist ein Von-Neumann-Prinzip und dementsprechend h aug vertreten. Die strukturelle Einsicht, dass Informatiksysteme nur dass verarbeiten k onnen, was formalisierbar ist, wird oft in Kombination mit formalen Sprachen und Automaten angef uhrt. Zur Auswahl und Repr asentation vernetzter fundamentaler Ideen werden im Folgenden ausgewahlte Entwurfsmuster der Objektorientierung analysiert.1145. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 5.4 Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 5.4.1 Entwurfsmuster zur F orderung der Kompetenzentwicklung mit Informatiksystemen Motivation und Ziel Die Analyse des Forschungsstandes ergab eine Ubersicht der fachdidaktischen Erkenntnisse zu Wirkprinzipien von Informatiksystemen bez uglich deren Aufbau, Arbeitsweise und Vernetzung (Abschnitt 4.4). Besondere Aufmerksamkeit kommt fundamentalen Ideen der Informatik, der Vernetzung von Informatikkonzepten und Strukturmodellen von Informatiksystemen zu (Abschnitt 5.3). Potential zur Verkn upfung dieser Aspekte liefern nach Ansicht des Autors objektorientierte Entwurfsmuster nach Gamma et al. (1995). Entwurfsmuster sind Strukturmodelle von Informatiksystemen. Bisher werden sie nur in wenigen Publikationen zur Schulinformatik aufgegrien, aber es wird in ihnen viel Potential gesehen (vgl. Humbert (2003), Schubert (2005), Magenheim (2005), Ullenboom (2005)). Kompetenzentwicklung mit Informatiksystemen bedeutet unter anderem, dass Sch uler Aufbau und Funktionsweise verstehen, Ursache-Wirkungsbeziehungen kennen und ablaufende Prozesse zur Erkl arung und Bew altigung von Anforderungssituationen anwenden k onnen. Daf ur wird eine fachdidaktische Klassikation angestrebt, deren St arke in der informatiktypischen Repr asentation von Informatikkonzepten durch Entwurfsmuster liegt. Vorteil eines Entwurfsmuster-basierten Zugangs ist die vorliegende Musterbeschreibung. Sch uler k onnen jedes Detail bei Interesse untersuchen, wodurch Sch ulerzentrierung unterst utzt wird. Darauf aufbauend k onnen Sch uler sich mit Variationen einzelner Entwurfsmuster besch aftigen und deren Kombinationsm oglichkeiten selbst erarbeiten. F ur Kompetenzentwicklung mit Informatiksystemen ist hervorzuheben, dass Entwurfsmuster eines Kontextes bed urfen, d. h. eines objektorientierten Modells. Daraus folgt beispielsweise, dass das Kompositummuster aufgrund der objektorientierten Denkweise eine informatiktypische Repr asentation ist, um Rekursion darzustellen, w ahrend Fibonacci-Zahlen mathematiktypisch sind. Die informatiktypische Repr asentation erlaubt es Lernenden, ein kognitives Modell von fundamentalen Ideen der Informatik als Teil eines Informatiksystems zu entwickeln. Deshalb bieten Entwurfsmuster nach Meinung des Autors ein hohes Potential, um Aufbau und Funktionsweise von Informatiksystemen zu verstehen und Kompetenzen zu entwickeln. Sie m ussen aber trotz und gerade wegen des f ur die Systemstrukturierung notwendigen hohen Abstraktionsgrads f ur Sch uler in der Sekundarstufe II zug anglich sein, und eine Auswahl muss fachdidaktisch begr undet werden. Ein weiteres Beispiel ist, dass die Sch uler mit graschen Benutzungsober achen arbeiten und ihre Elemente kennen (GI 2008, S. 38). Humbert (2003) nutzt in diesem Zusammenhang das Architekturmuster Model-View-Controller (MVC) und das Beobachtermuster als Mittel, um die Trennung von Datenhaltung und Darstellung in der Benutzungsober ache zu vermitteln (Abschnitt 4.2.4). Das MVC wird in dem Kontext auch im Informatiklehrplan f ur die Sekundarstufe II der Stadt Hamburg genannt. Explizit wird gefordert, dass Sch uler des Leistungskurses in der Lage sind, Entwurfsmuster und speziell das MVC-Muster zur Gestaltung von Benutzungsober achen einzusetzen (Bluhm et al. 2004). Damit ist der Einsatz von Entwurfsmustern auf einen kleinen Bereich der Modellierung beschr ankt und nur f ur leistungsstarke Sch uler vorgesehen. Dennoch nden sich zu dem Muster auch auf mehreren Bildungsservern und Webseiten von Studienseminaren Unterrichtsmaterialien (vgl. Ullenboom 2005, S. 25) sowie in der Zeitschrift LOG IN, z. B. von Hermes (2003). Im Folgenden wird nachgewiesen, dass ausgew ahlte Entwurfsmuster vernetzte fundamentale Ideen repr asentieren und wie sie Kompetenzentwicklung mit Informatiksystemen f ordern k onnen. Sie werden als Wissensrepr asentationen bezeichnet. Zur Klassikation der Entwurfsmuster sind Kriterien notwendig. Daher werden aus der Analyse des Forschungsstandes sowie fachwissenschaftlichen und fachdidaktischen Klassikationen von Entwurfsmustern5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 115 Kriterien abgeleitet, bei deren Erf ullung ein Beitrag zur F orderung der Kompetenzentwicklung mit Informatiksystemen von Entwurfsmustern erwartet wird, z. B. !Kriterium 3: Vernetzte fundamentale Ideen der Informatik. Die Ergebnisse werden in Abschnitt 5.4.1 ab Seite 122 vorgestellt. Nach Forneck erfordert Verstehen, dass Sch uler selbst Verantwortung f ur ihr Lernen ubernehmen (Forneck 1997, S. 25). Dies fuhrt zur Lernerzentrierung des Informatikunterrichts und heit unter anderem, dass Sch uler ihr Lernen selbst organisieren m ussen. Deshalb m ussen drei Ebenen betrachtet werden: a) Sch uler der Sekundarstufe II als Lernende, b) Didaktik der Informatik als Teil der Informatik, c) Informatik als Fachwissenschaft. Dabei sind a) und b) interessiert an Lernstrategien und neuen kognitiven Zug angen, w ahrend b) und c) Informatiksysteme zum Gegenstand haben. Der Beitrag von Entwurfsmustern als Strukturmodelle zur Kompetenzentwicklung mit Informatiksystemen Strukturmodelle von Informatiksystemen wurden als ein Mittel zur F orderung der Kompetenzentwicklung mit Informatiksystemen identiziert (Abschnitt 5.3). In Anlehnung an eine Denition aus der Architektur (Alexander et al. 1977) wurden Mitte der Neunziger Jahre f ur die Softwaretechnik Entwurfsmuster entwickelt (Gamma et al. 1995). Heide Balzert charakterisiert sie folgendermaen: "Ein Entwurfsmuster gibt eine bew ahrte, generische L osung f ur ein immer wiederkehrendes Problem an, das in bestimmten Situationen auftritt. Es lassen sich klassenund objektbasierte Muster unterscheiden. Klassenbasierte Muster werden durch Vererbungen ausgedr uckt. Objektbasierte Muster beschreiben in erster Linie Beziehungen zwischen Objekten (, die zur Laufzeit ge andert werden konnen; Einschub von S. 283)" (Balzert 1999, S. 53). Damit nimmt Balzert Bezug auf die Klassikation von Entwurfsmustern nach Gamma et al. (1995). Der Autor ist aufgrund der Analyse des Informatiksystembegris und des fachdidaktischen Forschungsstandes zu Informatiksystemen und Kompetenzentwicklung davon uberzeugt, dass Softwareund Rechnerarchitekturen sowie die dazugeh orenden Wirkprinzipien Kompetenzentwicklung mit Informatiksystemen bef ordern. Sie umfassen Beschreibungen des Systemverhaltens und Repr asentationen von Daten, Operationen und Funktionseinheiten. Die Struktur von Komponenten und ihren Schnittstellen wird durch sie f ur den Lernenden verst andlich. Dar uber hinaus sind jedoch weitere Betrachtungen zu Struktur der Funktionseinheiten notwendig. Insbesondere Schichtenarchitekturen und objektorientierte Architekturen bieten das Potential, die Vernetzung in und von Informatiksystemen zu beschreiben. Ein traditioneller Zugang wie mit Blockmodellen des Von-Neumann-Rechners allein verfehlt dieses Ziel zur F orderung der Kompetenzentwicklung mit Informatiksystemen, da er meist einen isolierten Rechner impliziert und die Hardwarekomponenten uberbetont. Fur Kompetenzentwicklung mit Informatiksystemen soll im Folgenden theoretisch begr undet und praktisch evaluiert werden, inwieweit Entwurfsmuster den Lehr-Lernprozess f ordern. Generell sind solche Strukturund vor allem Probleml osemuster in der informatischen Bildung von besonderer Bedeutung. Beim algorithmenorientierten Ansatz waren solche Strukturen beispielsweise Summenbildung, Sortieren und Berechnung des Maximums bzw. Minimums (Schubert und Schwill 2004, S. 224). Sowohl bei Standardarchitekturen wie auch bei Entwurfsmustern nach Gamma et al. (1995) liegen Regeln vor, wie gute Strukturen zu bilden sind, insbesondere hinsichtlich eines softwaretechnischen Qualit atsbegris. Diese Kriterien gehen einher mit Charakteristika der Objektorientierung. Es sind vor allem die B undelung zusammen geh orender Aufgaben1165. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung in einem Objekt, Entkopplung von Objekten, Trennung von Schnittstelle und Implementierung sowie Abstraktion. Entwurfsmuster basieren zudem auf Heuristiken, d. h. Erfahrungen aus der Softwareentwicklung hinsichtlich bew ahrter und wieder verwendbarer L osungen. Ein kognitiver Zugang uber Entwurfsmuster als vorgegebene Systemstrukturierungen reduziert Komplexit at, indem Wissen zur Probleml osung strukturiert wird. Wiederkehrende Probleme in objektorientierten Softwareentw urfen sind charakteristisch f ur bestimmte Teilsysteme. Vorarbeiten zu Entwurfsmustern in der Hochschullehre wurden von Schubert (2005) geleistet (Abschnitt 4.3.4). Darin wird der Beitrag der Entwurfsmuster zur Erkl arung von Strukturen auf einer mittleren Ebene zwischen den elementaren Konzepten wie Datenstrukturen und der umfassenden Architektur beschrieben. Die Abstraktion von Implementierungsaspekten ist ein wichtiger Beitrag f ur Kompetenzentwicklung mit Informatiksystemen, der durch Strukturmodelle wie Entwurfsmuster geleistet wird ( !Kriterium 1: Abstraktion von Implementierungsaspekten). Entwurfsmuster liegen somit auf einer Mesoebene der Strukturmodelle. Sie zeichnen sich dadurch aus, dass sie kombiniert werden k onnen (pattern language), um ein Teilsystem zu beschreiben. Schichtenarchitekturen und Prozesse werden von Schubert und Schwill gefordert f ur Unterricht zu Wirkprinzipien von Informatiksystemen. Architekturen, Schichtenmodelle und Entwurfsmuster lassen sich f ur Kompetenzentwicklung mit Informatiksystemen verkn upfen. Gerade Entwurfsmuster betonen die Vernetzung ( !Kriterium 4: Zusammenh ange mit anderen Strukturmodellen). Davon ausgehend sollen Entwurfsmuster in die Konzipierung von Lehr-Lernprozessen einbezogen werden. Humbert stellt die Abstraktion zur Beschreibung von Strukturen als wichtiges Prinzip der Informatik heraus und schl agt den Bogen zu Entwurfsmustern als Abstraktion von wiederkehrenden Problem-L osungsans atzen: "Zur Entwicklung von dekontextualisierten, operationalen Strukturen hat die Informatik besondere Abstraktionsmechanismen, namentlich die Prozessabstraktion und die Datenabstraktion entwickelt. Diese sind i. d. R. als parametrisierte Algorithmen beschrieben, die auf allgemeinen Datenstrukturen operieren. F ur den Bereich der Objektorientierung konnten mit Entwurfsmustern (vgl. Gamma et al. (1995)) erste Ans atze f ur die Darstellung und Katalogisierung typischer wiederkehrender L osungsmuster vorgelegt werden" (Humbert 2003, S. 20). Humbert unterstreicht, dass solche "Losungsmuster [. . . ] ein allgemeineres Hilfsmittel f ur die Softwareentwicklung dar[stellen] und [. . . ] zudem programmiersprachenunabh angig ausgelegt [sind] (auch wenn gewisse Muster ihren Bezug zu Deziten konkreter Sprachen nicht verleugnen k onnen { z. B. Singleton-Muster" (Humbert 2003, S. 20). Damit wird unterstrichen, dass die meisten Entwurfsmuster von Implementierungsaspekten abstrahieren, eine Pr ufung darauf ist jedoch vorzunehmen ( !Kriterium 1: Abstraktion von Implementierungsaspekten). Bisher sind Entwurfsmuster im Schulund Hochschulbereich weitgehend hinsichtlich der Zielsetzung Softwareentwicklung eingesetzt worden. F ur Kompetenzentwicklung mit Informatiksystemen muss dies nicht der einzige Zugang sein. Denn Entwurfsmuster leisten einen Beitrag zur Beschreibung der Vernetzung eines Teilsystems. In diesem Sinne unterst utzen Entwurfsmuster vernetztes Denken auf einem hohen Abstraktionsgrad zur Probleml osung. Fasst man diesen Abschnitt zusammen, so f uhrt die Eigenschaft eines Entwurfsmusters, ein Strukturmodell zu sein, zur Auswahl von zwei Kriterien: !Kriterium 1: Abstraktion von Implementierungsaspekten; !Kriterium 4: Zusammenh ange mit anderen Strukturmodellen. Damit wird die Programmiersprachenunabh angigkeit gest arkt und die Bedeutung der inneren Struktur gegen uber Implementierungsaspekten hervorgehoben. Auerdem unterst utzen Hinweise auf Zusammenh ange mit anderen Modellen die Unterrichtsgestaltung dahingehend, dass die Bildung von Wissensinseln vermieden werden kann.5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 117 Fundamentale Ideen und vernetztes Denken als Beitrag zur Kompetenzentwicklung mit Informatiksystemen Fur die Schulinformatik ist es unabdingbar, dass Architekturen und Muster nicht nur durch die typischen Ver anderungen in Anforderungen bei der professionellen Entwicklung von mittelgroen und groen Systemen motivierbar sind, sondern ein Allgemeinbildungswert erf ullt ist. Damit ist klar, dass nicht alle Muster gleichermaen f ur den Informatikunterricht in der Sekundarstufe II geeignet sein werden. Vernetzte fundamentale Ideen der Informatik bilden einen Schwerpunkt des vorliegenden Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung (Abschnitt 5.3). Sie werden als ein Kriterium zur Klassikation von Entwurfsmustern herangezogen ( !Kriterium 3: Vernetzte fundamentale Ideen der Informatik), da sie den Bildungswert f ur die informatische Bildung und Kompetenzentwicklung mit Informatiksystemen garantieren. Das Lernen von isolierten fundamentalen Ideen der Informatik entspricht nicht den Anforderungen, die an Informatikunterricht zur Kompetenzentwicklung mit Informatiksystemen gestellt werden (Abschnitt 4.4). Deshalb ist bei Entwurfsmustern deren Abstraktion einer Probleml osung mittels vernetzter fundamentaler Ideen herauszustellen. Damit die Probleml osung f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II angemessen ist, wird als weiters Kriterium ein Lebensweltbeispiel gefordert (!Kriterium 6: Lebensweltbezug). Fundamentale Ideen sind in den Bet atigungsfeldern der Didaktik der Informatik (b) und Informatik (c) wichtig (siehe Seite 115), denn sowohl in der Informatikdidaktik als auch im Fach Informatik werden Beziehungen und Verbindungen zwischen fundamentalen Ideen erforscht und begrundet. Vernetzte fundamentale Ideen liefern Potential zur Entwicklung des vernetzten Denkens der Sch uler. F ur den Informatikunterricht in der Sekundarstufe II r uckt das vernetzte Denken auch durch Lehrplanforderungen in den Vordergrund: "Wissenschaftsprop adeutisches Arbeiten erfordert problemund prozessbezogenes Denken und Denken in Zusammenh angen" (MSWWF 1999, S. XII). Dabei kommt der Verteiltheit und der Interaktion von Subsystemen eine besondere Rolle zu. Objektorientierte Entwurfsmuster sind Lernmittel f ur vernetzte Informatikl osungen, in denen durch Aufgabenteilung der teilnehmenden Objekte vernetztes Denken erforderlich ist. Entwurfsmuster stellen ein objektorientiertes Modell einer Probleml osung dar, die in der Regel nicht zentral verwaltet wird. Guzdial (1995) spricht, unter Bezug auf Resnicks Dissertationsschrift (Resnick 1992), davon, dass Informatiklernende an Hochschulen oft zentralgesteuerte Probleml osungsans atze pr aferieren w urden (centralized mindset). Diese zentralgesteuerten Probleml osungen seien einfach zu verstehen und bei kleinen Systemen ezient, entspr achen aber in der Denkweise nicht den Anspr uchen an objektorientiertes Modellieren. Guzdial schl agt Reexion der programmierten L osungen, Quelltextevaluation, Kenntnis der Bibliotheken und das Bereitstellen dezentraler Beispiell osungen vor. Gerade letzteres ist zur F orderung der Kompetenzentwicklung mit Informatiksystemen sicherlich hilfreich, da dahinter nicht nur Implementierungsaspekte stehen m ussen. Dezentrale Modelle f uhren zu einem besseren Verst andnis verteilter und paralleler Prozesse wie zum Beispiel die Kooperation von Objekten mit klarer Aufgabenteilung. Auch bei der Analyse von Informatiksystemen ist es wichtig, dezentral und somit vernetzt zu denken: "Gemeint ist damit ein integrierendes, zusammenf ugendes Denken, das auf einem breiteren Horizont beruht, von gr osseren Zusammenh angen ausgeht und viele Einussfaktoren ber ucksichtigt, das weniger isolierend und zerlegend ist als das ubliche Vorgehen. Ein Denken also, das mehr demjenigen des viele Dinge zu einem Gesamtbild zusammenf ugenden Generalisten als dem analytischen Vorgehen des auf ein enges Fachgebiet beschr ankten Spezialisten entspricht" (Ulrich und Probst 1988, S. 11). Mit Hinweis auf M oller (1999) kommt Schulte f ur die Objektorientierung zu folgendem Fazit:1185. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung "Fokussiert man die formalen Bildungsziele auf das probleml osende Denken, dann kann folgende Hypothese aufgestellt werden: Man kann zwischen einfachen und komplexen Problemen sowie (damit verkn upft) zwischen linear-analytischem und vernetztem Denken unterscheiden. Objektorientierte Methoden fordern und f ordern Letzteres st arker als algorithmenorientierte Herangehensweisen" (Schulte 2001, S. 6). Denn Ziel sei die Erstellung eines objektorientierten Systems in dem die interagierenden Objekte sinnvoll miteinander vernetzt werden m ussen. Im Gegensatz zu imperativen Programmen ist die Dezentralisierung Grund f ur die Vernetzung. Schulte betont allerdings nur f ur Softwareentwickler die Notwendigkeit des vernetzten Denkens. Nach Meinung des Autors kann das gleiche jedoch auch f ur Kompetenzentwicklung mit Informatiksystemen gefordert werden. Unterst utzt wird diese Sicht durch Wallingford, der zur St arkung einer vernetzten L osung f ur die Anfangskurse in der Hochschulinformatik objektorientierte Entwurfsmuster vorschl agt, die aber nicht aus dem Katalog von Gamma et al. (1995) kommen: "One of the key goals in this eort [is] to help students overcome the centralized mindset that they bring to problem solving. [. . . ] OO patterns provide a mechanism for seeing solutions to problems in terms of distributed objects with distributed control " (Wallingford 1996, S. 30; Hervorhebung durch den Autor). Mit diesen Zitaten wird die Vermutung gest utzt, dass Entwurfsmuster die in der Analyse des Forschungsstandes identizierte Vernetzung (Abschnitt 4.4) unterst utzen k onnen. Die Vernetzung von Informatikkonzepten ist wissenschaftsprop adeutisch notwendig und liegt in Informatiksystemen vor. Der Bezug zum Denken in Modellen und zur Erfassung von Dynamik ist auch wichtig. Daruber hinaus schlagen Entwurfsmuster eine Verbindung zur Objektorientierung, in der ebenfalls das Potential gesehen wird, vernetztes Denken zu f ordern. Die didaktische Herausforderung besteht darin, ein erfolgreiches Unterrichtsmodell zu Informatiksystemen und Kompetenz zu entwickeln, dass eben dieses vernetzte Denken f ordert. Im Folgenden werden die Klassikationskriterien von Entwurfsmustern in der Fachwissenschaft analysiert und auf ihre Eignung als Kriterium zur F orderung der Kompetenzentwicklung mit Informatiksystemen gepr uft. Zusammenfassend f uhrt dieser Abschnitt zur Auswahl und Begr undung von zwei Kriterien: ! Kriterium 3: Vernetzte fundamentale Ideen der Informatik; !Kriterium 6: Lebensweltbezug. Fundamentale Ideen dienen als Qualit atsmerkmale und sichern den"Bildungswert". Vor allem ist uber fundamentale Ideen der Einsatz von Entwurfsmustern in der Sekundarstufe II begr undbar. Die Vernetzung wiederum vermeidet das Lernen isolierter fundamentaler Ideen zur Erkl arung eines Systems. Eine Analogie aus der Lebenswelt der Sch uler, die das Zusammenwirken der Komponenten des Strukturmodells erkl art, unterst utzt den Lernprozess. Das Lebensweltbeispiel kann, muss aber nicht notwendiger Weise direkten Bezug zu einem Informatiksystem und dessen Verhalten haben. Klassikation von Entwurfsmustern in der Fachwissenschaft In diesem Abschnitt werden fachliche Musterkataloge kurz vorgestellt und wie Entwurfsmuster darin fachlich klassiziert sind. Die Kriterien zur Systematisierung der Muster in der Fachwissenschaft werden darauf gepr uft, ob sie zur fachdidaktischen Klassikation einen Beitrag leisten konnen. Neben der Klassikation von Entwurfsmustern nach Gamma et al. (1995), die als Wegbereiter gilt, gibt es auch weitere in der Fachwissenschaft, z. B. von Buschmann et al. (1996), Zimmer (1995) und Tichy (1997), die im Folgenden kurz anhand ihrer Klassikationskriterien beschrieben werden. Die Auswahl der Kataloge erhebt dabei keinen Anspruch auf Vollst andigkeit, da ihre Anzahl zu immer spezialisierteren Anwendungsbereichen weiterhin ansteigt, so existieren mittlerweile auch Muster f ur den Hardwareentwurf (Rincon et al. 2005). In Entwufsmusterkatalogen werden Muster einheitlich beschrieben mithilfe eines Beschreibungsschemas mit Mustername, Problemabschnitt, L osungsabschnitt und Konsequenzenabschnitt.5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 119 Diese sind bei Gamma et al. (1995) zur Beschreibung eines Musters weiter unterteilt in Zweck, alternative Bezeichnungen, Motivation, Anwendbarkeit, Struktur, Teilnehmer, Interaktionen, Konsequenzen, Implementierung, Beispielcode, bekannte Verwendungen sowie verwandte Muster. Bei Gamma et al. (1995) wird auch der Gesamtkatalog unterteilt in die zwei Dimensionen Gultigkeitsbereich (Vererbung oder Objektaggregation) und Zweck bzw. Aufgabe (Erzeugungs-, Strukturoder Verhaltensmuster). "Wir klassizieren Muster mittels zweier Kriterien [. . . ]. Das erste Kriterium namens Aufgabe gibt wieder, was das Muster macht. Muster k onnen entweder eine erzeugende, eine strukturorientierteoder eine verhaltensorientierte Aufgabe haben. [. . . ] Das zweite Kriterium, der Gultigkeitsbereich, legt fest, ob ein Muster sich prim ar auf Klassen oder auf Objekte bezieht. [. . . ] Praktisch alle Muster greifen zu einem gewissen Grad auf Vererbung zur uck. Somit sind die einzigen klassenbasierten Muster jene, die sich auf Klassenbeziehungen konzentrieren" (Gamma et al. 1995, S. 14f; Hervorh. im Original). Tabelle 5.1 zeigt die Klassikation der Muster nach Gamma et al. (1995). F ur Kompetenzentwicklung mit Informatiksystemen ist sicherlich der Zweck des Entwurfsmusters relevant ( ! Kriterium 2: Zweck und Einsatzgebiet). Falls er ausschlielich in der Softwareentwicklung relevant ist, kann das Kriterium als Ausschlusskriterium f ur ein Muster dienen. Steinert vermutet, dass Erzeugungsmuster nicht f ur die Schule geeignete sind, weil sie in groem Mae Kenntnisse der zugrunde liegenden Programmiersprache fordern (Schneider 2003, S. 168). Ihr Zweck ist die Generierung von Objekten, die vom konkreten Einsatz des Objektes und der konkreten Implementierung entkoppelt wird ( !Kriterium 1: Abstraktion von Implementierungsaspekten). Tabelle 5.1: Musterkatalog nach (Gamma et al. 1995, S. 14) Aufgabe Erzeugungsmuster Strukturmuster Verhaltensmuster GultigkeitsbereichklassenbasiertFabrikmethode Adapter Interpreter, Schablonenmethode objektbasiertAbstrakte Fabrik, Erbauer, Prototyp, SingletonAdapter, Br ucke, Dekorierer, Fassade, Fliegengewicht, Kompositum, ProxyBefehl, Beobachter, Besucher, Iterator, Memento, Strategie, Vermittler, Zustand, Zustandigkeitskette Bei Buschmann et al. (1996) werden ebenfalls zwei Dimensionen unterschieden: "A closer look at existing patterns reveals that they cover various ranges of scale and abstraction" (Buschmann et al. 1996, S. 11). Zur Einordnung in Problemkategorie (scale) unterscheiden sie strukturelle Dekomposition, Arbeitsorganisation, Zugangskontrolle, Management, Kommunikation, Strukturierung, verteilte Systeme, adaptierbare Systeme und interaktive Systeme. Zur Verfeinerung nutzen sie den Abstraktionsgrad (abstraction), in dem sie Architekturmuster, Entwurfsmuster und programmiersprachenabh angige Idiome gegeneinander abgrenzen. F ur Kompetenzentwicklung mit Informatiksystemen wurde bereits gefordert, von Implementierungsaspekten zu abstrahieren ( !Kriterium 1: Abstraktion von Implementierungsaspekten). Betont werden die Abh angigkeiten der unterschiedlichen Teilnehmerobjekte ( !Kriterium 4: Zusammenh ange mit anderen Strukturmodellen). F ur Unterricht sind die Zusammenh ange der Muster auf Ankn upfungen f ur weiteren Unterricht zu untersuchen. Zum Beispiel kann das Beobachtermuster in der MVC-Architektur identiziert werden. Die MVC-Architektur zeigt das Konzept der Schichten und seine Verbindung zu Entwurfsmustern. Die drei Schichten realisieren1205. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung eine Trennung der Daten (Model), der Benutzungsober ache (View) und Aspekten der Interaktion (Controller). Sie repr asentieren damit die fundamentale Idee Modularisierung ( !Kriterium 3: Vernetzte fundamentale Ideen der Informatik). Weitere Klassizierungen sind die von Zimmer und Tichy. Insbesondere erstgenannte ist sehr interessant, da sie veranschaulicht, welches Muster sich auf welchen anderen abst utzt. Zimmer (1995) klassizierte die Muster nach Gamma et al. (1995) grasch anhand ihrer Beziehung mit anderen Entwurfsmustern: Muster X nutzt Muster Y in seiner L osung, Muster X ahnelt Muster Y, Muster X kann mit Muster Y kombiniert werden. Diese Klassikation ist in die Fachdidaktik, d. h. auf die Strukturierung des Lehr-Lernprozesses ubertragbar. Die ersten beiden Beziehungen sind n utzlich hinsichtlich der Beschreibung von Vorkenntnissen der Lernenden. Die dritte Relation weist auf Ankn upfungspunkte f ur weiteren Unterricht hin ( !Kriterium 4: Zusammenh ange mit anderen Strukturmodellen). Tichy (1997) entwirft einen Katalog, der sich, ahnlich wie bei Buschmann et al. (1996), an der Art der Probleml osung orientiert, und unterscheidet beispielsweise zwischen Entkopplungsmustern und Kontrollussmustern. Als Bereiche werden genannt: Decoupling, Variant Management, State Handling, Control, Virtual Machines, Convenience Patterns, Compound Patterns, Concurrency, Distribution. F ur Kompetenzentwicklung mit Informatiksystemen ist dieser Bezug zu bestimmten Klassen von Informatiksystemen wichtig ( !Kriterium 2: Zweck und Einsatzgebiet). Zusammenfassend f uhrt dieser Abschnitt zur Auswahl und Begr undung eines neuen Kriteriums: !Kriterium 2: Zweck und Einsatzgebiet. Uber das Kriterium ist ein Bezug zum nach auen sichtbaren Verhalten von Informatiksystemen m oglich. Auerdem werden weitere Begr undungen fur drei bereits ausgew ahlte Kriterien geliefert: !Kriterium 1: Abstraktion von Implementierungsaspekten;!Kriterium 3: Vernetzte fundamentale Ideen der Informatik; !Kriterium 4: Zusammenh ange mit anderen Strukturmodellen. Klassikation von Entwurfsmustern in der Fachdidaktik Aus Sicht der Hochschuldidaktik der Informatik klassizieren Harrer und Steinert Entwurfsmuster. Sie betonen, dass sich die Klassikation bzw. die Systematik der bei Gamma et al. (1995) und Buschmann et al. (1996) vorgestellten Muster an den Bed urfnissen der Softwaretechnik orientiert. Fur beide Kataloge wurden fachliche Kriterien gefunden. Dahingegen sind aus fachdidaktischer Sicht die mit den Mustern vermittelbaren grundlegenden Konzepte der Informatik und ihr Komplexit atsgrad f ur eine solche didaktische Systematik unabdingbar. Nach Harrer und Steinert ist die Klassizierung von Gamma u. a. fachdidaktisch nicht begr undet, da hier viele Muster zusammengefasst werden, die untereinander wenig Ahnlichkeit aufweisen. Die Klassizierung anhand des Abstraktionsgrads bei Buschmann u. a. ist jedoch f ur den Unterricht sinnvoll, um eine Grobeinteilung der Muster vorzunehmen. In der Problemkategorie werden allerdings Systemklassen, wie verteilte und interaktive Systeme, mit Konzepten, wie Kommunikation und Zugrisregelung, vermischt. Ausgehend von einem Top-Down Ansatz der Softwaretechnik (von der Architektur uber Entwurfsmuster zur Verwaltung von Objekten mit Idiomen) entwickeln sie eine didaktische Klassikation f ur die Hochschulinformatik, die die Konzepte Modularisierung bzw. Dekomposition, Wiederverwendung, Modellierung der Interaktion und Objekt-Management den Mustern zuordnet. Diese bei der Softwareentwicklung wichtigen Aspekte sind damit eine Grundlage ihrer fachdidaktischen Klassikation f ur die Hochschule. F ur die Konzepte Interaktion und Dekomposition geben Harrer und Steinert jeweils eine ubergeordnete Musterstruktur an, d. h. eine Verallgemeinerung der in allen Mustern, denen dieses Konzept innewohnt, vorhandenen Struktur. Bei den ubergeordneten Strukturen zu Dekomposition und Interaktion gelingt dies sehr gut, da sofort die Ahnlichkeit mit den aus Gamma et al. (1995) bekannten Strukturdiagrammen ins Auge f allt. F ur Wiederverwendung und Management geben sie jedoch nur an, welche Muster dazu geh oren, ohne eine ubergeordnete Struktur zu beschreiben. Ein weiteres wichtiges Kriterium der Klassizierung nach Harrer und Steinert ist die Komplexit at, fur die drei Gesichtspunkte eine Rolle spielen: Schwierigkeit des Verst andnisses bei5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 121 Betrachtung der Gesamtheit des Musters, Umfang der Diskussionspunkte wie Einsatz und Auswirkungen und als letzter Punkt die Anzahl der Variationsm oglichkeiten des Musters. Schwierigkeit bei diesem Kriterium ist die mangelnde Eindeutigkeit der Einstufung. Harrer und Steinert unterscheiden die drei Stufen leicht, mittel und schwer. Zur Ubertragung der Ergebnisse auf die Sekundarstufe II ist es nach Ansicht des Autors notwendig, Erprobungen im Informatikunterricht durchzuf uhren, um Aussagen uber die Komplexit at des Musters zu treen. Allerdings kann eine theoretische Analyse der Komplexit at Anhaltspunkte f ur den Einsatz des Musters im Informatikunterricht bieten ( !Kriterium 5: Komplexit at). Anschlieend erweitern Harrer und Steinert ihre Systematik um die Dimensionen"Art", die dem Abstraktionsgrad bei Buschmann et al. (1996), und"Einsatzgebiet", die etwa der Problemkategorie bei Buschmann et al. (1996) entspricht. Somit haben Harrer und Steinert in ihrer Systematik die Systemklassen und die informatischen Konzepte sorgf altig getrennt: "Statt der Dimension der Problemkategorie denieren wir eine Dimension Einsatzgebiet, die ausdruckt, ob ein Muster allgemein einsetzbar ist oder f ur ganz spezielle Systemtypen und Umgebungen charakteristisch ist (z. B. verteilte Systeme, interaktive Systeme). Dadurch haben wir in unserer Klassizierung Systemklassen und informatische Konzepte sauber getrennt, wohingegen in (Buschmann et al. 1996) eine Vermischung dieser Aspekte vorliegt" (Harrer und Schneider 2002, S. 73; Hervorh. im Original) Um die Muster zu lehren, wenden sie das induktive Vorgehen (Bottom-up; vom Quelltext ausgehend) haupts achlich f ur Erzeugungsmuster an. Das deduktive Vorgehen, das von der abstrakten Losungsidee ausgeht, kommt bei einfachen Architekturmustern zum Einsatz. Zur F orderung der Kompetenzentwicklung mit Informatiksystemen ohne Betrachtung der Implementierungsaspekte ist dieses Vorgehen nahe liegend, da die Konstruktion eines Systems nicht im Fokus liegt. F ur komplexe Architekturmuster wird von Harrer und Steinert vorschlagen, Details bzw. Komponenten nacheinander, aber mit Bezug zu den bekannten Komponenten zu behandeln, so dass die Gesamtarchitektur sich erst am Ende zusammen setzt. Abschlieend stellen Harrer und Steinert den Bezug zum Schulfach Informatik her. Sie betonen, dass Entwurfsmuster insbesondere Problemstellungen bei der objektorientierten Modellierung l osen und einige Entwurfsmuster, die ausgew ahlte Konzepte auf einem angemessenen Schwierigkeitsgrad repr asentieren, f ur die Sekundarstufe II interessant sind (Harrer und Schneider 2002, S. 76). Welche Muster dies sein k onnten, wird nicht erw ahnt. Steinert stellt weiterhin die Frage, inwieweit Entwurfsmuster der Objektorientierung bereits in der Sekundarstufe I in den Unterricht integriert werden k onnen (Schneider 2003). Hierbei bezieht er sich auf den neu konzipierten Informatikunterricht an Bayerischen Gymnasien. Steinert empehlt die Entwurfsmuster Kompositum und Beobachter nach Gamma et al. (1995) f ur den Informatikunterricht in der Sekundarstufe I und formuliert Kriterien f ur die Auswahl von Entwurfsmustern: 1."The pattern has to represent a substantial concept of informatics. 2. The pattern has to be of general interest. Special patterns, which are utilised in some specic context only, are normally not suited. 3. The pattern has to provide real support to the teaching of the represented concept and therefore provide a didactical function. 4. The pattern should not be too complex such that the students would not understand it easily or fully. 5. The understanding of the respective pattern should not require too much background information about a specic programming language" (Schneider 2003, S. 167f; Nummerierung durch den Autor). Deren Anwendung f uhrt ihn auerdem zur Empfehlung der Entwurfsmuster Interpreter und Zustand. Die Kriterien m ussen jedoch f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II diskutiert werden. Aus den vorherigen Uberlegungen zum Stand der Forschung1225. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung (Kapitel 4) ergibt sich, dass statt eines wichtigen Konzeptes wie in Zier 1 gefordert, vernetzte fundamentale Ideen der Informatik in dem Entwurfsmuster zu identizieren sind. Damit ist gleichzeitig der Bildungswert begr undet. Forderung 2 ist durch fundamentale Ideen ebenfalls automatisch erf ullt. Der erste Teil von Zier 2 kann f ur Kompetenzentwicklung mit Informatiksystemen dahingehend konkretisiert werden, dass ein Beitrag zu den Hauptfunktionen von Informatiksystemen, ihrem Aufbau und Wirkprinzipien anzustreben ist. Dies kann uber die Einordnung in die Klassikation der Unterrichtsinhalte nach Hubwieser und Broy erfolgen (Hubwieser 2007a, S. 83). Zier 5 ist insofern konform zu den Zielen zur Kompetenzentwicklung mit Informatiksystemen, als dass Implementierungsdetails zur Softwareentwicklung nicht im Fokus der vorliegenden Arbeit liegen. In Zier 3 wird hervorgehoben, dass Entwurfsmuster nicht um ihrer selbst willen, sondern nur im Unterricht eingesetzt werden sollten, wenn sie eine didaktische Funktion hinsichtlich des Lernens eines Informatikkonzeptes erf ullen. Zusammenfassung der fachlichen und fachdidaktischen Klassikationen ist, dass die vorhandenen Entwurfsmusterkataloge nicht nach fachdidaktischen Kriterien zur F orderung der Kompetenzentwicklung mit Informatiksystemen zusammengestellt wurden und daher eine Auswahl von Entwurfsmustern vorgenommen werden muss. Dazu ist auf den Beitrag der Entwurfsmuster zur Kompetenzentwicklung mit Informatiksystemen und Angemessenheit f ur die Schule zu achten. Die fachwissenschaftlichen und fachdidaktischen Klassikationen nach Buschmann et al. (1996) sowie Harrer und Steinert (Harrer und Schneider 2002) liefern jedoch Anregungen f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II. Im n achsten Abschnitt werden die Analyseergebnisse zusammengefasst und Kriterien f ur eine fachdidaktische Klassikation zur Forderung der Kompetenzentwicklung mit Informatiksystemen angegeben. Zusammenfassend f uhrt dieser Abschnitt zur Auswahl und Begr undung eines neuen Kriteriums: !Kriterium 5: Komplexit at. Dieses Kriterium ist jedoch ambivalent: Einerseits ist durch die Betrachtung von Schwierigkeitsgrad, Variationsm oglichkeiten und notwendiger Vorkenntnisse der Schuler ein Beitrag f ur den Lehr-Lernprozess zu erwarten. Andererseits kann die Komplexit at kaum als Auswahlkriterium herangezogen werden, da keine empirischen Ergebnisse zum Einsatz von Entwurfsmustern in der Sekundarstufe II zu Informatiksystemen und Kompetenzentwicklung existieren. Fazit: Kriterien zur Klassikation In Abschnitt 5.4.1 wurden fachwissenschaftliche Entwurfsmusterkataloge auf die verwendeten Kriterien untersucht. Von den fachlichen Kriterien zur Klassikation von Entwurfsmustern sind der Abstraktionsgrad und die Beziehungen bzw. Abh angigkeiten von Entwurfsmuster zueinander fur Kompetenzentwicklung mit Informatiksystemen n utzlich. So ist f ur Kompetenzentwicklung mit Informatiksystemen sicherzustellen, dass Implementierungsaspekte nicht im Vordergrund stehen, sobald das Muster im Informatikunterricht eingesetzt wird. Auerdem ist f ur die abstrakte Probleml osung ein Beispiel aus der Lebenswelt des Sch ulers zu nden. Das hochschuldidaktische Kriterium von Harrer und Steinert, dass Konzepte wie Management und Interaktion in Mustern enthalten sein m ussen, reicht f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II nicht aus. Es sind vernetzte fundamentale Ideen der Informatik in Entwurfsmustern zu identizieren (vgl. (Stechert 2006c), (Ufer 2007)). Auerdem muss die Relevanz f ur Informatiksysteme betrachtet werden (Hubwieser 2007a, S. 83), beispielsweise durch den Bezug zu den Hauptfunktionen eines Informatiksystems (Kapitel 3). Zur fachdidaktischen Klassikation von Entwurfsmustern zur F orderung der Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II wurden folgende Kriterien identiziert: Kriterium 1 (Abstraktion von Implementierungsaspekten) Nur Entwurfsund Architekturmuster sind zur F orderung von Basiskompetenzen zu Informatiksystemen relevant. Programmiersprachenspezische Muster, so genannte Idiome, werden dementsprechend aussortiert. Damit wird die Programmiersprachenunabh angigkeit gest arkt und die Bedeutung der inneren Struktur gegen uber Implementierungsaspekten hervorgehoben.5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 123 Kriterium 2 (Zweck und Einsatzgebiet) Der Zweck bzw. das Einsatzgebiet des Musters ist hinsichtlich der Relevanz f ur Kompetenzentwicklung mit Informatiksystemen zu pr ufen. Dieses Kriterium betrachtet die Verallgemeinerbarkeit der Probleml osung durch das Muster. Verwendungsm oglichkeiten und Zuordnungen zu den Kategorien der Informatik, die die Hauptfunktionen von Informatiksystemen abdecken (Kapitel 3), untermauern den Beitrag zur Kompetenzentwicklung mit Informatiksystemen. Es sind m oglichst Muster zu identizieren, die in unterschiedlichen Klassen von Informatiksystemen eingesetzt werden (vgl. Hubwieser und Broy 1997a, S. 44). Kriterium 3 (Vernetzte fundamentale Ideen der Informatik) Durch fundamentale Ideen in Informatiksystemen wird sowohl der Bildungswert begr undet als auch dem Anspruch genugt, Wirkprinzipien zu vermitteln. Fundamentale Ideen dienen somit als Qualit atsmerkmale und vor allem ist uber sie der Einsatz von Entwurfsmustern in der Sekundarstufe II begr undbar. Die Vernetzung wiederum vermeidet das Lernen isolierter fundamentaler Ideen zur Erkl arung eines Systems. Die Vernetzung der fundamentalen Ideen beschreibt, wie das Entwurfsmuster eine Probleml osung zur Erf ullung seines Zwecks umsetzt, so dass ein Beitrag zur F orderung des vernetzten Denkens erwartet wird. Durch die Pr ufung auf den Beitrag des Zwecks hinsichtlich des Systemverhaltens ist damit ein indirekter und durch die geforderte Vernetzung ein direkter Beitrag des Kriteriums zur F orderung der Kompetenzentwicklung mit Informatiksystemen begrundbar. Die identizierten fundamentalen Ideen dienen zur Gestaltung des Lehr-Lernprozesses und unterst utzen die Lehrperson beim Setzen von Priorit aten. Dadurch, dass fundamentale Ideen der Informatik speziell den nichtspezischen Transfer unterst utzen, ist ein Beitrag zur Kompetenzentwicklung zu erwarten. Kriterium 4 (Zusammenh ange mit anderen Strukturmodellen) Durch die Kombination von Entwurfsmustern gelingt ein Beitrag zur F orderung des vernetzten Denkens als ubergeordnetes Ziel der Kompetenzentwicklung mit Informatiksystemen. Die Vernetzung der Muster vermeidet die Bildung einzelner Wissensinseln. Zus atzlich k onnen Perspektiven zur Erweiterung und Verkn upfung von Lernszenarien aufgezeigt werden. Bei der Kombination von Entwurfsmustern werden die in den Mustern enthaltenen fundamentalen Ideen der Informatik miteinander vernetzt. Neben den Kombinationsm oglichkeiten wird analysiert, ob ein Entwurfsmuster eine strukturelle Ahnlichkeit zu anderen Mustern aufweist. Kriterium 5 (Komplexit at)Hinsichtlich der Gesamtheit des Musters, der Variationsm oglichkeiten in unterschiedlichen Kontexten sowie der zum Verstehen notwendigen Aspekte f ur den Informatikunterricht ist die Komplexit at einzustufen, zum Beispiel hinsichtlich der Aspekte nach Harrer und Steinert: Schwierigkeit des Verst andnisses, Umfang der Diskussionspunkte und der Variationsm oglichkeiten (Harrer und Schneider 2002). Vorab kann die Einstufung theoretisch erfolgen, sie sollte jedoch empirisch auf ihre Tragf ahigkeit uberpr uft werden. Da empirische Ergebnisse f ur die Sekundarstufe II nicht vorliegen, wird auf die Anwendung des Kriteriums der Komplexit at und eine damit begr undete Selektion von Mustern in der nachfolgenden Betrachtungen verzichtet. In den Unterrichtsmaterialien bzw. studentischen Arbeiten, die im Rahmen des Promotionsvorhabens des Autors erstellt wurden, werden Muster jedoch auf ihre Komplexit at untersucht, um den Lehr-Lernprozess zu unterst utzen ((Ufer 2007), (Weyer 2007b)). In Abschnitt 5.4.4 werden die Eigenschaften von Entwurfsmustern, Schemata und extern repr asentierbar zu sein, aufgegrien, um Komplexit at im Lernprozess zu bew altigen. Kriterium 6 (Lebensweltbezug) Ein Lebensweltbeispiel, das das Zusammenwirken der Komponenten des Strukturmodells erkl art, unterst utzt den Lernprozess. Das Lebensweltbeispiel kann, muss aber nicht notwendiger Weise direkten Bezug zu einem Informatiksystem und dessen Verhalten haben. Im Folgenden werden Entwurfsmuster anhand der erarbeiteten Kriterien analysiert.1245. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 5.4.2 Klassikation der Entwurfsmuster Im Folgenden werden die Softwaremuster nach Gamma et al. (1995) nach obigen Kriterien klassiziert. Das erste Kriterium dient im Voraus zum Ausschluss einiger Muster ( !Kriterium 1: Abstraktion von Implementierungsaspekten). Falls ein Muster zum gr oten Teil das Verstehen von Implementierungsaspekten unterst utzt, ist es f ur zur F orderung der Kompetenzentwicklung mit Informatiksystemen im Rahmen dieser Arbeit nicht weiter relevant und wird nicht betrachtet. Dies gilt vornehmlich f ur samtliche Idiome, d. h. programmiersprachenabh angige Muster, die von Buschmann et al. (1996) identiziert wurden: Counted Pointer, Singleton, Fabrikmethode und Schablonenmethode (Buschmann et al. 1996, S. 380). Dar uber hinaus werden Erzeugungsmuster in dieser Arbeit nicht betrachtet (vgl. Schneider 2003), da sie in hohem Mae Programmierkenntnisse erfordern. Ihr Beitrag zum Verstehen von Implementierungsaspekten eines Informatiksystems sei damit nicht bestritten. Die verbleibenden 17 Muster werden kurz mit ihrer wichtigsten Charakteristik vorgestellt. Zur besseren Ubersicht wird zwischen Verhaltensmustern und Strukturmustern nach Gamma et al. (1995) unterschieden. Zu den in ihnen vorhandenen informatischen Konzepten bzw. fundamentalen Ideen wird zwischen Konzepten der Objektorientierung und weiteren informatischen Konzepten unterschieden. Erstere sind in objektorientierten Entwurfsmustern selbstverst andlich und daher zur besseren Ubersicht f ur die Planung des Lehr-Lernprozesses genannt. Unter einer fundamentalen Idee werden im Folgenden auch Kandidaten f ur fundamentale Ideen zusammengefasst, die in der Wissenschaft anerkannte Konzepte sind, deren Uberpr ufung auf die Kriterien nach Schwill jedoch aussteht (Abschnitt 4.2.2). Vor allem der Nachweis des Vertikalkriteriums, der im Zweifelsfall eine Uberpr ufung der Lernbarkeit auf Niveau der Primarstufe erfordert, kann aus Zeitgr unden nicht im Rahmen dieser Arbeit gef uhrt werden. Bei Mustern, zu denen im Laufe der Forschungsarbeit Unterrichtsmaterialien ausgearbeitet wurden, z. B. in studentischen Arbeiten, wird darauf hingewiesen. Zuerst werden die Strukturmuster nach Gamma et al. (1995) analysiert. Adapter Zweck und Einsatzgebiet: Das Adaptermuster dient der Kompatibilit at von Schnittstellen, indem es eine Schnittstelle den Erwartungen des Klienten anpasst (Gamma et al. 1995, S. 171). Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind Mehrfachvererbung oder Objektkomposition, Klassenschnittstelle sowie die enth altBeziehung. Informatische Konzepte im Muster sind Wiederverwendbarkeit (anderer Klassen), Polymorphie , Kapselung und Emulation. Zusammenh ange mit anderen Mustern: Der Adapter weist Ahnlichkeiten mit den Mustern Br ucke, Dekorierer und Proxy auf. Lebensweltbezug: Beispiel ist das Werkzeug Knarre zum L osen oder Festziehen von Schraubverbindungen. Durch Aufs atze, d. h. Adapter, k onnen unterschiedliche Schraubengr oen gel ost werden (Duell et al. 1998, S. 8). Unterrichtsbeispiel im Rahmen des Unterrichtsmodells: Sulz (2007) betrachtet in seiner vom Autor betreuten Seminararbeit das Adaptermuster hinsichtlich der Kompatibilit at als Qualit atsanforderung an Informatiksysteme. Brucke Zweck und Einsatzgebiet: Das Br uckmuster trennt eine Abstraktion von ihrer Umsetzung, indem sowohl eine Klassenhierarchie der Schnittstellen als auch Klassenhierarchien der jeweiligen Auspr agung angelegt werden, um beide getrennt voneinander anpassen zu konnen (Gamma et al. 1995, S. 186). Ein Klient interagiert mit einer konkreten Umsetzung einer Abstraktion. Die Kommunikation l auft dabei uber die Abstraktion, die Anfragen des Klienten zu einem Objekt der geeigneten Umsetzung weiterleitet. Das Muster ist beispielsweise geeignet, eine Klassenbibliothek f ur verschiedene Datenstrukturen zu beschreiben. Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind Objekte, zwei parallele Vererbungshierarchien, Selbstverantwortlichkeit von Objekten, Abstrakte Klasse. Weitere Eigenschaften sind Wiederverwendbarkeit und das Geheimnisprinzip durch die Trennung der beiden Klassenhierarchien. Damit sind als informatische5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 125 Konzepte die fundamentale Idee der Modularisierung und Schichtung in dem Entwurfsmuster enthalten, und es erf ullt Aspekte der Masteridee der strukturierten Zerlegung. Daruber hinaus sind zum Verst andnis des Br uckemusters Aspekte der Algorithmisierung notwendig. Uber Parameter wird festgelegt, welche Umsetzung zu w ahlen ist. Damit sind gleichzeitig die fundamentale Idee der Alternative und auch das Prinzip der Polymorphie bzw. des dynamischen Bindens enthalten. Polymorphie ist ein relevantes Konzept, um Systemverhalten zu analysieren: Abh angig von Kontext und Parametern wird im System dynamisch entschieden, welches Verhalten zu w ahlen ist. Sch uler werden mit ver andertem Systemverhalten konfrontiert. Polymorphie ist deshalb wichtig, um Schnittstellen und ggf. Vererbungshierarchien zu verstehen. Weitere informatische Konzepte im Muster sind Trennung von Abstraktion und Implementierung, verschachtelte Generalisierung, Entkopplung von Schnittstelle und Implementierung, unabh angige Erweiterbarkeit der zwei Ebenen und Kapselung. Konzeptbruch bzw. Widerspruch zu"guter" Entwurfsheuristik ist jedoch auch zu nden: Eng verbundene Daten sind nicht an einem Ort geb undelt. Auerdem sind Schnittstelle und Daten getrennt. Zusammenh ange mit anderen Mustern: Es ist dem Adapterahnlich und wirkt oft mit Singleton und Abstrakter Fabrik zusammen. Lebensweltbezug: Als Lebensweltbeispiel kann ein elektrischer Schalter angesehen werden. Dessen Abstraktion in einem Schaltplan ist unabh angig vom konkreten Lichtschalter (Duell et al. 1998, S. 9). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Sulz (2007) betrachtet in seiner vom Autor betreuten Seminararbeit das Br uckemuster hinsichtlich der Kompatibilitat als Qualit atsanforderung an Informatiksysteme, das aufbauend auf dem Adaptermuster eingesetzt werden kann. Dekorierer Zweck und Einsatzgebiet: Das Dekorierermuster erm oglicht exible funktionale Erweiterungen eines Objektes ohne Unterklassenbildung (Gamma et al. 1995, S. 199). Anwendung ndet das Prinzip bei Eingabe-Ausgabe-Str omen (I/O-Streams). Es f uhrt zu guter Testbarkeit, da Funktionalit aten gekapselt werden. Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind Objekte (Objektidentit at), Delegation, Schnittstelle, Zustandsdarstellung in Unterklassen, Methodenaufruf, die hat-Beziehung (der Dekorierer hat eine Exemplarvariable, die eine Referenz auf die Klasse Komponente h alt), Vererbung wird f ur die Anpassung des Typs genutzt, nicht f ur die Denition des Objektverhaltens. In Java erfolgt die Realisierung uber ein Interface oder eine abstrakte Klasse, nicht uber Objektaggregation. Informatische Konzepte im Muster sind rekursive Dekomposition (Kettenbildung), Erweiterbarkeit der Objektfunktionalit at zur Laufzeit (beliebig viel), Kapselung, Mehrfachnutzung der gleichen Dekoration, Verhinderung der Uberfrachtung der Oberklassen, Kapselung der dynamischen Kettenbildung von der Klientenfunktionalit at, Trennung der Kettenbildung von den Kettenkomponenten (Shalloway und Trott 2002), Kapselung neuer Funktionalit at und Koh asion. Die Reihung der Dekorationen f uhrt zu einer Listenstruktur. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Fabrik, Erbauer, Prototyp, und weist Ahnlichkeiten mit Adapter, Kompositum (Dekorierer als degeneriertes Kompositum) und Strategie auf. Konzeptbruch bzw. Widerspruch zu"guter" Entwurfsheuristik: Klassen sollen durch Vererbung erweitert werden, Vererbungshierarchien sollten in der Theorie der Objektorientierung tief sein, wenngleich sie in der Praxis Fehlerquellen darstellen, und es werden viele kleine ahnliche Objekte erzeugt. Lebensweltbezug: Werkzeuge und Arbeitskleidung von Mitarbeitern dienen zu deren funktionaler Erweiterung in der Lernsoftware Pattern Park (Franke et al. 2007). Auch Benutzungsober achen von Software konnen durch Werkzeugleisten dekoriert werden (Duell et al. 1998, S. 14). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Das Muster ist in die Lernsoftware Pattern Park zur F orderung der Kompetenzentwicklung mit Informatiksystemen integriert worden (Abschnitt 5.6). Weyer (2007b) klassiziert das Entwurfsmuster in seiner Diplomarbeit, die vom Autor betreut wurde (Tabelle 5.2).1265. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Fassade Zweck und Einsatzgebiet: Die Fassade dient der Zugriskontrolle durch Anbieten einer einheitlichen Schnittstelle zu einem Subsystem (Gamma et al. 1995, S. 212), (Buschmann et al. 1996, S. 380). Anwendungen sind Ubersetzer bzw. Compiler und Schichten (BlackBox, White-Box). Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind Schnittstelle und Delegation. Informatische Konzepte im Muster sind Entkopplung von Systemen, Kapselung, Reduktion der Komplexit at durch Vereinfachung der Schnittstelle und Zerlegung in Teilsysteme sowie Zustandslosigkeit. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Abstrakte Fabrik und Singleton. Fassade ist ahnlich dem Vermittler. Lebensweltbezug: Ein Lebensweltbeispiel ist ein Pf ortner eines Unternehmens, der Anfragen und Lieferungen weiterleitet (Franke et al. 2007). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Das Muster ist in die Lernsoftware Pattern Park zur F orderung der Kompetenzentwicklung mit Informatiksystemen integriert worden (Abschnitt 5.6). Weyer (2007b) klassiziert das Entwurfsmuster in seiner Diplomarbeit, die vom Autor betreut wurde, und beschreibt den Entwurf einer Lernsoftware, die das Muster enth alt (Tabelle 5.2; Abschnitt 7.3.2). Fliegengewicht Zweck und Einsatzgebiet: Das Fliegengewichtmuster erlaubt die eziente Verwendung groer Mengen kleinster Objekte, z. B. Buchstabenbzw. Zeichenobjekte in einem Textdokument (Gamma et al. 1995, S. 223). Vernetzte fundamentale Ideen der Informatik: Informatische Konzepte im Muster sind strukturierte Zerlegung und Zust ande. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Kompositum, Zustand und Strategie. Lebensweltbezug: Als Beispiel wird die Generierung von Freizeichen und Besetztzeichen sowie deren Zuweisung auf eine groe Menge Telefonkunden beschrieben (Duell et al. 1998, S. 17). Kompositum Zweck und Einsatzgebiet: Das Kompositum f ugt Objekte rekursiv in einer Baumstruktur in Form von Teil-Ganzes-Beziehungen zusammen (Gamma et al. 1995, S. 239). Einzelne Objekte und die Zusammenstellung von Objekten werden auf die gleiche Weise aufgerufen und behandelt. Vernetzte fundamentale Ideen der Informatik: Analysiert man das Kompositummuster, ist die einheitliche Schnittstelle zu allen Komponenten charakteristisch. Der Klient f uhrt eine Operation auf dem Kompositum aus, indem der Aufruf von jeder Komponente des Kompositums gem a der eigenen Spezikation ausgef uhrt wird. Die innere Struktur des Kompositums basiert auf den fundamentalen Ideen Rekursion und Polymorphie. Konzepte der Objektorientierung im Muster sind demnach Schnittstelle, Klassenhierarchien, die Unterscheidung zwischen primitiven und komplexen Objekten sowie Polymorphie. Hinsichtlich fundamentaler Ideen sind insbesondere die Rekursion und dadurch bewirkt die strukturierte Zerlegung eines zusammengesetzten Objektes zu nennen. Denn durch die Rekursion des Kompositummusters wird ein Divide-and-Conquer-Verfahren realisiert. Weitere informatische Konzepte im Muster sind Baumstrukturen (und Komponentenzugri), Typsicherheit, Datenstruktur Liste als Spezialfall des Baumes und Traversierung von Datenstrukturen. Durch das Kompositummuster ist auch ein Bezug zur Masteridee Sprache gegeben. Steinert beschreibt, dass textuelle Objekte durch dieses Entwurfsmuster zusammengesetzt werden konnen und h alt dieses Vorgehen bereits f ur Sch uler geeignet, die in der Sekundarstufe I sind, da es nah an der Lebenswelt der Sch uler ist (Schneider 2003). Ein Text wird in Abschnitte unterteilt, die wiederum in kleinere Einheiten zerlegt werden k onnen. Einzelne Zeichen bilden die Bl atter der durch das Kompositum beschreibbaren Baumstruktur. Auf dem Beispiel von Steinert aufbauend kann in der Sekundarstufe II das Entwurfsmuster erweitert werden, um die dynamischen Aspekte der Algorithmisierung st arker zu betonen. Dazu k onnen Unterklassen genutzt werden. Diese repr asentieren nichtterminale Ausdr ucke unterschiedlicher Art wie Wiederholung und Auswahl. Damit wird der Kontext des Entwurfsmusters zu regul aren Ausdr ucken und formalen Grammatiken ger uckt und im Infor-5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 127 matikunterricht die Br ucke geschlagen von der OOM zur Theoretischen Informatik. Damit ist ein Beitrag zu M oglichkeiten und Grenzen von Informatiksystemen zu erwarten. Information uber Syntax ist dann in der resultierenden Vererbungshierarchie gespeichert. So ist das Kompositummuster geeignet, S atze einer Sprache zu interpretieren. In diesem Kontext wird das modizierte Kompositummuster auch als Interpretermuster bezeichnet, denn der abstrakte Syntaxbaum ist ein Exemplar des Kompositummusters (Gamma et al. 1995, S. 334). Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Erbauer, Prototyp, Zust andigkeitskette, Dekorierer, Fliegengewicht, Iterator, Besucher und Proxy. Es ist verwandt mit dem Interpreter. Lebensweltbezug: Lebensweltbeispiele bilden die Zusammensetzung komplexer Graken aus primitiven Zeichenobjekten und die Aufteilung einer Jugendgruppe in Teilgruppen (Franke et al. 2007). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Das Muster ist in die Lernsoftware Pattern Park zur F orderung der Kompetenzentwicklung mit Informatiksystemen integriert worden (Abschnitt 5.6). Proxy Zweck und Einsatzgebiet: Der Proxy dient der Zugriskontrolle und nutzt ein Stellvertreterobjekt (Gamma et al. 1995, S. 254), (Buschmann et al. 1996, S. 380). Das Muster wird zur einfachen Zugriskontrolle, aber auch zur Protokollierung von Zugrien eingesetzt, und es k onnen Ankn upfungspunkte zur Webarchitektur identiziert werden. Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind Schnittstelle, Methodenaufruf, Vererbung und Objekte. Informatische Konzepte im Muster sind Interaktionsregelung, Kapselung, Zugriskontrolle, Platzhalter bzw. Referenz und Polymorphie. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Kompositum. Ahnlich ist es dem Adapter und dem Dekorierer. Lebensweltbezug: Ein Beispiel f ur einen Proxy ist die Stellvertreterrolle einer Geldkarte f ur Geld (Franke et al. 2007). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Das Muster ist in die Lernsoftware Pattern Park zur F orderung der Kompetenzentwicklung mit Informatiksystemen integriert worden (Abschnitt 5.6) und in den unterrichtlichen Erkundungen eingesetzt worden (Kapitel 6 und 8). Weyer (2007b) klassiziert das Entwurfsmuster in seiner Diplomarbeit, die vom Autor betreut wurde, und beschreibt den Entwurf einer Lernsoftware, die das Muster enth alt (Tabelle 5.2; Abschnitt 7.3.2). Nachfolgend werden die verbleibenden Entwurfsmuster analysiert. Sie geh oren zu den Verhaltensmustern nach Gamma et al. (1995). Befehl Zweck und Einsatzgebiet: Das Befehlsmuster erstellt f ur Befehle eigene Objekte, um Operationen einzeln behandeln zu k onnen, z. B. um sie r uckgangig zu machen (Gamma et al. 1995, S. 273). Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind (Befehls-) Objekte, Methodenaufrufe, Objekterzeugung und Objektspeicherung. Informatische Konzepte im Muster sind Interaktionsregelung, Dekomposition, Parametrisierung, Schlange oder Liste zur Speicherung der Befehlsobjekte, traversieren (f ur Undo-RedoFunktionalit at) sowie Persistenz durch ein Logbuch. Weitere Konzepte sind Entkopplung von Ausl oser, Empf anger und Anfrage, Erweiterbarkeit, Festlegung des Kontrollusses zur Laufzeit und Zust ande. Konzeptbruch bzw. Widerspruch zu"guter" Entwurfsheuristik: Operationen werden in diesem Muster zu Klassen, was im Widerspruch zu der auch in der Schule oft angewendeten Vorgehensweise steht, dass in beschreibenden Texten Subjekte zu Klassen und Verben zu Operationen werden. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. f ur zusammengesetzte Befehle mit dem Kompositum, auerdem mit Memento und Prototyp. Lebensweltbezug: Als Lebensweltbeispiel kann die Sammlung von Bestellungen f ur einen Tisch auf einem Zettel dienen, die in einem Restaurant vorgenommen wird. Der Kellner reicht die Liste weiter an den Koch, der aus1285. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung den einzelnen Elementen Handlungsanweisungen ableitet. Ein solcher Zettel zur Aufnahme der Bestellungen kann in verschiedenen Restaurants benutzt werden (Duell et al. 1998, S. 21). Beobachter Zweck und Einsatzgebiet: Das Beobachtermuster nutzt 1-zu-n-Abh angigkeiten, um einen Datensatz unterschiedlich darzustellen, indem Zustands anderungen allen Sichten mitgeteilt werden (Gamma et al. 1995, S. 287). Anwendung ndet es in Schichtenarchitekturen und dem Model-View-Controller-Architekturmuster. Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind Schnittstelle zur Registrierung, Objekte und Abstrakte Klasse. In Java erfolgt die Umsetzung mit Observer Interface und Observable class. Informatische Konzepte im Muster sind 1-zu-n-Abh angigkeiten, Konsistenz, Trennung von Daten und Darstellung, Kapselung, "Publish-Subscribe" (lose Kopplung), Zust ande, Interaktionsregelung und Erweiterbarkeit. Der Benachrichtigungsaufwand (Komplexit at) kann analysiert werden. Auerdem gibt es Polymorphie. Konzeptbruch bzw. Widerspruch zu"guter" Entwurfsheuristik: Eng verbundene Daten werden nicht an einem Ort deniert, und es besteht die Gefahr, dass es zu viele kooperierende Klassen gibt. Zusammenh ange mit anderen Mustern: Neben dem ModelView-Controller-Architekturmuster sind Vermittler und Singleton verwandte Muster. Lebensweltbezug: Ein Beispiel sind Funkuhren, die mit einer zentralen Uhr in Verbindung stehen (Franke et al. 2007). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Das Muster ist in die Lernsoftware Pattern Park zur F orderung der Kompetenzentwicklung mit Informatiksystemen integriert worden (Abschnitt 5.6). Weyer (2007b) klassiziert das Entwurfsmuster in seiner Diplomarbeit, die vom Autor betreut wurde, und beschreibt den Entwurf einer Lernsoftware, die das Muster enth alt (Tabelle 5.2; Abschnitt 7.3.2). In einer vom Autor betreuten Seminararbeit wurden Aufgaben zum Beobachtermuster erstellt (Graf 2008). Besucher Zweck und Einsatzgebiet: Das Besuchermuster erweitert die Funktionalit at von Objekten in einer Objektstruktur, indem die Operation als Objekt gekapselt wird (Gamma et al. 1995, S. 301). Vernetzte fundamentale Ideen der Informatik: Informatische Konzepte im Muster sind Datenstrukturen, deren Traversierung, Geheimnisprinzip und Wiederverwendung. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Kompositum und Interpreter. Lebensweltbezug: Ein Lebensweltbeispiel ist die Begutachtung einer Organisation durch externe Gutachter. Diese werden zu Personen oder Abteilungen gefuhrt, wo die Gutachter aktiv werden, beispielsweise k onnen sie Interviews durchf uhren (Duell et al. 1998, S. 35). Interpreter Zweck und Einsatzgebiet: Das Interpretermuster erm oglicht f ur eine denierte formale Sprache die Interpretation von S atzen (Gamma et al. 1995, S. 319). Vernetzte fundamentale Ideen der Informatik: Konzept der Objektorientierung im Muster ist Vererbung. Informatische Konzepte im Muster sind rekursive Dekomposition, regul are Ausdr ucke, Baum, Syntax, Grammatik und Konkatenation. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Fliegengewicht und Besucher. Ahnlichkeit besteht mit Iterator und vor allem dem Kompositum. Lebensweltbezug: Als Beispiel k onnen Musiker dienen, die Musikkompositionen spielen, die aus Terminalzeichen wie Noten und zusammengesetzten Zeichen bestehen (Duell et al. 1998, S. 22). Iterator Zweck und Einsatzgebiet: Der Iterator dient der Iteration und Zugriskontrolle auf Datenstrukturen (Gamma et al. 1995, S. 335), (Buschmann et al. 1996, S. 380). Vernetzte fundamentale Ideen der Informatik: Konzept der Objektorientierung im Muster ist die Schnittstelle. Informatische Konzepte im Muster sind Management, polymorphe Iteration, In-order und pre-order Traversierung, rekursiver Stack-Aufbau in Kombination mit einer Baumstruktur wie dem Kompositum. Zusammenh ange mit anderen Mustern: Es5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 129 wirkt mit anderen Mustern zusammen, z. B. dem Proxy in C++ f ur einen polymorphen Iterator, Memento zur Speicherung des Iterationszustands, Kompositum und Fabrikmethode. Lebensweltbezug: Als Beispiel dient das Durchlaufen eine Besucherliste im Pattern Park (Franke et al. 2007). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Das Muster ist in die Lernsoftware Pattern Park zur F orderung der Kompetenzentwicklung mit Informatiksystemen integriert worden (Abschnitt 5.6). Weyer (2007b) klassiziert das Entwurfsmuster in seiner Diplomarbeit, die vom Autor betreut wurde, und beschreibt den Entwurf einer Lernsoftware, die das Muster enth alt (Tabelle 5.2; Abschnitt 7.3.2). Memento Zweck und Einsatzgebiet: Das Mementomuster erlaubt die Zwischenspeicherung eines Objektzustands, ohne dessen Kapselung zu verletzen, um es sp ater in den Zustand zur uck versetzen zu k onnen (Gamma et al. 1995, S. 354). Vernetzte fundamentale Ideen der Informatik: Konzept der Objektorientierung im Muster ist Schnittstelle bzw. Zugriskontrolle, denn nur Memento soll auf ein Objekt und dessen Zustande zugreifen k onnen. Informatische Konzepte im Muster sind Kapselung, Zust ande und inkrementelle Speicherung von Anderungen. Zusammenh ange mit anderen Mustern: Es wirkt oft mit anderen Mustern zusammen, z. B. Befehl und Iterator. Lebensweltbezug: Als Beispiel dient das Autoradio. Jeder Fahrer kann sich seinen Sender speichern und nach einem Fahrerwechsel durch einen Tastendruck seinen Sender wieder einstellen. Auerdem wird ein Foto der Einstellungen eines Audiomischpultes zur Erinnerung an eine bew ahrte Reglerkombination genannt (Duell et al. 1998, S. 22). Strategie Zweck und Einsatzgebiet: Das Strategiemuster macht das Austauschen einzelner, aber ahnlicher Algorithmen m oglich, indem sie gekapselt werden (Gamma et al. 1995, S. 373). Vernetzte fundamentale Ideen der Informatik: Konzepte der Objektorientierung im Muster sind Schnittstelle, Vererbung (Strategiehierarchien), Verantwortlichkeiten von Objekte und Delegation, um einen gesamten Algorithmus zu variieren. Informatische Konzepte im Muster sind Kapselung (von Regeln), algorithmische Komplexit at, Polymorphie, Trennung von Strategiewahl und Implementierung, Bedingungen, Zusammenfassen von Familien ahnlicher Strategien, Dekomposition sowie Alternative. Zusammenh ange mit anderen Mustern: Es wirkt mit z. B. mit dem Fliegengewicht zusammen. Lebensweltbezug: Als Beispiel dient dieUberwindung einer Strecke durch ein Transportmittel. Die Auswahl eines Transportmittels wie Taxi, Flugzeug oder Bus entspricht der Strategie (Duell et al. 1998, S. 32). Vermittler Zweck und Einsatzgebiet: Das Vermittlermuster kontrolliert und koordiniert die Interaktion mehrerer Objekte (Gamma et al. 1995, S. 385). Vernetzte fundamentale Ideen der Informatik: Konzept der Objektorientierung im Muster ist Entkopplung. Informatische Konzepte im Muster sind Interaktionsregelung, Dekomposition, 1-zu-n Abh angigkeiten, Kapselung und Zentralisierung. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Beobachter (Vermittler als Beobachter). Die Fassade wirkt sehr ahnlich, aber unidirektional. Lebensweltbezug: Als Beispiel fur einen Vermittler dient der Kontrollturm auf dem Flughafen uber den jegliche Kommunikation und die Verwaltung der Startund Landezeiten der Flugzeuge l auft (Duell et al. 1998, S. 25). Zustand Zweck und Einsatzgebiet: Das Zustandsmuster deniert mehrere allein stehende Objektzust ande, damit das Objektverhalten zur Laufzeit in Abh angigkeit von seinem Zustand geandert wird (Gamma et al. 1995, S. 398). Vernetzte fundamentale Ideen der Informatik: Informatische Konzepte im Muster sind Dekomposition, Kontextobjekte, Alternative und Zustand. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Fliegengewicht, Proxy und Singleton. Lebensweltbezug: Beispiel kann eine Achterbahnfahrt mit den unterschiedlichen Zustanden der Bahn sein (Franke et al. 2007). Unterrichtsmaterial im Rahmen des Unterrichtsmodells: Das Muster ist in die Lernsoftware Pattern Park zur F orderung der Kom-1305. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung petenzentwicklung mit Informatiksystemen integriert worden (Abschnitt 5.6) und wurde im unterrichtlichen Geschehen erprobt (Kapitel 8). Weyer (2007b) klassiziert das Entwurfsmuster in seiner Diplomarbeit, die vom Autor betreut wurde, und beschreibt den Entwurf einer Lernsoftware, die das Muster enth alt (Tabelle 5.2; Abschnitt 7.3.2). In einer vom Autor betreuten Seminararbeit wurden Aufgaben zum Zustandsmuster erstellt (Graf 2008). Zustandigkeitskette Zweck und Einsatzgebiet: Die Zust andigkeitskette fasst Objekte in einer Liste zusammen und leitet Anfragen die Kette entlang, wenn deren Adressat erst zur Laufzeit festgelegt wird (Gamma et al. 1995, S. 410). Vernetzte fundamentale Ideen der Informatik: Informatische Konzepte im Muster sind Interaktionsregelung, Dekomposition, Iteration und Liste. Zusammenh ange mit anderen Mustern: Es wirkt mit anderen Mustern zusammen, z. B. Kompositum. Lebensweltbezug: Als Beispiel dient eine M unzsortiermaschine. Jeder Slot pr uft, ob die M unze in ihm aufbewahrt werden kann. Falls nicht, wird sie weitergereicht (Duell et al. 1998, S. 19). Die Auswahl der informatischen Konzepte erfolgte vornehmlich mit Blick auf fundamentale Ideen der Informatik, aber nicht f ur alle aufgef uhrten Konzepte ist bislang nachgewiesen worden, dass es fundamentale Ideen sind. Vor dem Transfer in Unterricht kann die Pr ufung auf die Kriterien fur fundamentale Ideen erfolgen (Abschnitt 5.4.4). Dennoch zeigt die Sammlung das Potential der Entwurfsmuster. In einer Diplomarbeit, die vom Autor betreut wurde, klassiziert Weyer (2007b) ausgew ahlte Entwurfsmuster und entwickelt jeweils ein Lebensweltbeispiel im Kontext einer Arztpraxis (Tabelle 5.2; siehe auch Abschnitt 7.3.2). Die Einsch atzung des Schwierigkeitsgrades ist nur sehr knapp begr undet und bedarf der empirischen Uberpr ufung. Tabelle 5.2: Klassikation ausgew ahlter Entwurfsmuster nach Weyer (2007b) Name Fundamentale IdeenZusammenhange mit MusternKomplexit at Einsatzgebiet Lebensweltbeispiel: Arztpraxis Dekorierer Rekursive Dekomposition, VererbungAdapter, Kompositum, Strategiemittel Erweiterung der Funktionalitat eines ObjektesErweiterung der Funktion einer Arzthelferin, indem sie mit Mikroskop und Terminkalender ausgestattet wird Fassade Dekomposition, Delegation, Entkopplung von Systemen, ZugriskontrolleAbstrakte Fabrik, Vermittler, Singleton, Proxyeinfach Modularisierung in SystemenEine Arzthelferin nimmt die Rolle der Fassade ein. Sie ruft Patienten uber die Sprechanlage aus dem Wartezimmer Proxy Zugriskontrolle, Platzhalter / Referenz, SchnittstelleAdapter, Dekorierer, Iterator, Kompositummittel Zugriskontrolle und intelligente ZeigerZugri auf die Daten eines bestimmten Patienten Beobachter 1-zu-n-Abh angigkeiten, Trennung von Daten und Darstellung, Publish-SubsribeModelViewController, Vermittler, Singletonmittel Schichten Eine Patientendatenbank mit Beobachtern wie Kartei und Rezept Iterator Traversierung, Polymorphie, StackKompositum, Fabrikmethode, Mementoeinfach zusammengesetzte ObjekteDurchsuchen einer Patientendatenliste Zustand Zustand, Dekomposition, ModularisierungFliegengewicht, Singleton, Mementoschwer Kapselung der Zustands anderungen eines ObjektesZustande einer Blutprobe5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 131 5.4.3 Zwischenfazit zur Klassikation f ur Kompetenzentwicklung mit Informatiksystemen In diesem Abschnitt wird auf die Einsatzm oglichkeiten der Klassikation eingegangen. Im n achsten Abschnitt wird der Beitrag eines Entwurfsmusters, das mittels obiger Kriterien ausgew ahlt wurde, am Beispiel diskutiert. Die vorliegende Klassikation erlaubt nun die konkrete Auswahl bzw. den Vergleich von Entwurfsmustern f ur den Informatikunterricht zur F orderung der Kompetenzentwicklung mit Informatiksystemen. In (Stechert 2006b) werden die beiden Entwurfsmuster Kompositum und Brucke exemplarisch untersucht und verglichen. Beide Entwurfsmuster sind komplex und die Betrachtung ihrer Eigenschaften scheint auf den ersten Blick f ur Kompetenzentwicklung mit Informatiksystemen viel versprechend. Trotzdem uberwiegen die Vorteile des Kompositummusters: Insbesondere die fundamentale Idee der Sprache wird hinsichtlich der formalen Grammatiken und nicht nur durch Darstellbarkeit in der UML unterst utzt. Textobjekte in Textverarbeitungssystemen, wie Steinert sie beschreibt, werden bereits in Klassenstufe 6 thematisiert. Deshalb bietet das Kompositum und mit ihm die einfache Erweiterung zum Interpretermuster groes Potential bei der Einf uhrung in den Lehr-Lernprozess der Sekundarstufe II. Aufgrund der Erfahrungen in der Hochschullehre an der Universit at Siegen (Schubert 2005), die Arbeit von Steinert (Schneider 2003) und obige Uberlegungen zu fundamentalen Ideen der Informatik wird das Kompositummuster als wertvoller Unterrichtsinhalt in der Sekundarstufe II betrachtet. Das Br uckemuster hingegen ist aufgrund seiner hohen Komplexit at (vgl. auch Harrer und Schneider (2002) und Unger-Lamprecht (2001) f ur die Hochschule) und dem weniger starken Beitrag zu fundamentalen Ideen erst gegen Ende der Sekundarstufe II einzusetzen. Dar uber hinaus ist in die Uberlegungen einzubeziehen, dass es weitere Entwurfsmuster gibt, die die Trennung von Aufgaben auf eine einfachere Weise veranschaulichen als das Br uckemuster, z. B. das Beobachtermuster. Auch das Strategiemuster erscheint f ur den Anfang geeigneter, da es weniger komplex ist und die fundamentale Idee der Alternative repr asentiert. Vorteil der angegebenen Klassikation ist, dass mit ihr statt einzelner Entwurfsmuster auch Entwurfsmusterkombinationen und Architekturen klassiziert und vom Sch uler verstanden werden konnen. Die Lernsoftware Pattern Park stellt eine Aufgabe zur Kombination der Muster Kompositum, Iterator, Dekorierer und Fassade (Abschnitt 5.6.3). In Kapitel 8 wird die Kombination von Proxy und Zustand im Informatikunterricht vorgestellt. Durch die Kombination unterschiedlicher Entwurfsmuster werden die fundamentalen Ideen in ihnen weiter vernetzt, und es treten neue Abh angigkeiten auf. Ein Iteratormuster beispielsweise, das alle Elemente einer Datenstruktur aufz ahlt, arbeitet je nach Datenstruktur iterativ oder rekursiv. So ist bei der Kombination von Iterator und Kompositum ein rekursives Vorgehen zur Aufz ahlung aller Objekte notwendig. Fasst man die Ergebnisse zusammen, sind Entwurfsmuster Tr ager von fundamentalen Ideen der Informatik, d. h. sie sind eine Repr asentation f ur diese fundamentalen Ideen der Informatik. Damit ist insbesondere f ur den Informatikunterricht in der Sekundarstufe II der Bildungswert von Entwurfsmustern begr undbar. Dazu m ussen Zug ange zur Kompetenzentwicklung mit Informatiksystemen mittels Entwurfsmustern folgende Anforderungen erf ullen: Erstens m ussen sie auf ausgew ahlten Entwurfsmustern basieren, die f ur den Lehr-Lernprozess in der Sekundarstufe II gema der Klassikation f ur Kompetenzentwicklung mit Informatiksystemen geeignet sind. Dafur m ussen sie vor allem die Vernetzung fundamentaler Ideen erm oglichen. Zweitens sollten die Entwurfsmuster kombinierbar sein, um die Bildung von Wissensinseln zu vermeiden. Die durch Fokussierung auf Entwurfsmuster vorgenommene Einschr ankung auf objektorientierte Modellierung wird durch die fundamentalen Ideen zum Teil egalisiert, da sie per Denition in weiten Gebieten der Informatik vorkommen.1325. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 5.4.4 Beitrag der durch die Klassikation ausgew ahlten Entwurfsmuster zur Kompetenzentwicklung mit Informatiksystemen am Beispiel der Zugriskontrolle Erwartete kognitive Barrieren und Fehlvorstellungen zur Zugriskontrolle Wie f ordert ein Entwurfsmuster, das nach obiger Klassikation beschrieben wurde, die Kompetenzentwicklung mit Informatiksystemen? Im Folgenden werden erwartete kognitive Barrieren und Fehlvorstellungen zur Zugriskontrolle aufgezeigt (vgl. Schubert et al. 2009). Zugriskontrolle ist bei vielen Informatiksystemen unabdingbar, z. B. bei Mehrbenutzersystemen zur Kommunikation, Koordination und Datenspeicherung (Abschnitt 3.2.2). F ur die Arbeit mit Informatiksystemen ist meist eine Authentizierung einschlielich einer Passwortpr ufung notwendig und den Sch ulern vom Schulnetz bereits vertraut (vgl. Humbert et al. 2005). Hinsichtlich der Klassikation der Lernziele nach Hubwieser und Broy ist Zugriskontrolle als charakteristisch fur fast alle Informatiksysteme einzustufen (Hubwieser 2007a, S. 83). Um Zugriskontrolle zu verstehen, m ussen verborgene Prozesse sichtbar und durch den Lernenden handlungsorientiert ver anderbar gemacht werden. Ziel des Beispiels zur Zugriskontrolle ist es aufzuzeigen, wie Entwurfsmuster im Unterricht zur F orderung der Kompetenzentwicklung mit Informatiksystemen eingesetzt werden k onnen. Lehrenden wird anhand des komplexen Szenarios gezeigt, dass Entwurfsmuster bis zu einem gewissen Grad sukzessive kombiniert werden k onnen und eine logische Verkn upfung von Themen m oglich ist. Eine erwartet Fehlvorstellung zur Zugriskontrolle ist, dass ein Objekt den Zugri auf sich selbst kontrolliert und uberwacht. Dies ist aber in aller Regel nicht der Fall: Sei es aus Sicherheitsoder sei es aus Performancegr unden wird oft, beispielsweise beim Proxymuster, ein Stellvertreterobjekt mit der gleichen Schnittstelle wie der des Originalobjekts eingesetzt. Somit kontrolliert das Stellvertreterobjekt die Zugrisrechte, z ahlt bei Bedarf die Anzahl der Zugrie und leitet letztendlich Aufrufe an das Original weiter. Eine weitere kognitive H urde ist die Frage, wie ein Platzhalter dasselbe Verhalten, d. h. die gleiche Schnittstelle wie das Original haben kann. Dies kann durch Vererbung realisiert werden, indem Stellvertreter und Original von der gleichen (abstrakten) Klasse erben. Dadurch ergibt sich f ur beide die gleiche Schnittstelle bei durchaus unterschiedlicher Spezialisierung. Eine gleichnamige Operation wird beim Original ein bestimmtes Verhalten ausl osen, w ahrend beim Stellvertreter beispielsweise nur die Pr ufung der Zugrisrechte und gegebenenfalls die Weiterleitung an das Original durchgef uhrt werden. Die n achste kognitive H urde ist Formalisierung dynamischer Prozesse { ein generelles Ziel der informatischen Bildung, das sehr gut anhand der Zugriskontrolle diskutiert werden kann. Lernende sollen hier die Lebensweltsituation in einem ersten Schritt Richtung maschinelle Verarbeitung formalisieren. Als letzte Schwierigkeit ist genannt, dass fundamentale Ideen der Informatik, in diesem Fall z. B. Zugriskontrolle und Vererbung, vernetzt sind und einander beeinussen { eine weitere kognitive Hurde, denn beide k onnen in anderen Kontexten unterschiedlich umgesetzt werden. In der Beschreibung der erwarteten kognitiven Barrieren und Fehlvorstellungen wird bereits angedeutet, wie ihre Uberwindung gelingen kann. Im Folgenden soll dies anhand des Proxymusters f ur Kompetenzentwicklung mit Informatiksystemen vorgestellt werden. Im Vorgri auf Abschnitt 5.6 wird vorausgesetzt, dass eine Software das Entwurfsmuster umsetzt und dadurch die Zugriskontrolle im Systemverhalten erkennbar ist. Folgende Gr unde sprechen daf ur, dass durch die Thematisierung der Zugriskontrolle anhand des Entwurfsmusters Proxy die Kompetenzentwicklung mit Informatiksystemen gef ordert wird: Relevanz f ur viele Informatiksysteme ( !Kriterium 1: Abstraktion von Implementierungsaspekten;!Kriterium 2: Zweck und Einsatzgebiet),5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 133 Vernetzte fundamentale Ideen zur Erkl arung des Systemverhaltens ( !Kriterium 3: Vernetzte fundamentale Ideen der Informatik), Sichtenwechsel zwischen Verhalten und bew ahrter Struktur ( !Kriterium 1: Abstraktion von Implementierungsaspekten; !Kriterium 5: Komplexit at), Vernetzte Strukturmodelle und Lebensweltbezug ( !Kriterium 4: Zusammenh ange mit anderen Strukturmodellen; !Kriterium 6: Lebensweltbezug), Entwurfsmuster als lernf orderliche Schemata ( !Kriterium 5: Komplexit at), Externe Repr asentation von Entwurfsmustern ( !Kriterium 5: Komplexit at). Diese Aspekte der Kompetenzentwicklung mit Informatiksystemen werden im Folgenden anhand der vorgestellten Kriterien erl autert. Relevanz f ur viele Informatiksysteme Exemplarisch soll anhand der Zugriskontrolle mittels Proxymuster der Beitrag der durch die Klassikation ausgew ahlten Entwurfsmuster zur Kompetenzentwicklung mit Informatiksystemen aufgezeigt werden. F ur Kompetenzentwicklung mit Informatiksystemen wurde festgestellt, dass das nach auen sichtbare Verhalten und die innere Struktur von Informatiksystemen zu analysieren sind. Implementierungsaspekte sind f ur Kompetenzen nur in geringem Mae relevant. Das Entwurfsmuster Proxy abstrahiert per Denition von Implementierungsdetails ( !Kriterium 1: Abstraktion von Implementierungsaspekten), denn es wird nicht den Idiomen zugeordnet (vgl. Buschmann et al. 1996), so dass die Strukturierung im Mittelpunkt steht. Daruber hinaus ist Zugriskontrolle f ur viele Informatiksysteme charakteristisch und in deren Verhalten erkennbar, z. B. in Mehrbenutzersystemen, so dass von dem Proxymuster als Strukturmodell ein Beitrag zur Kompetenzentwicklung mit Informatiksystemen zu erwarten ist. Das Proxymuster erkl art, wie Zugriskontrolle mittels Stellvertreter realisiert werden kann ( !Kriterium 2: Zweck und Einsatzgebiet). Eine der DeSeCo-Schl usselkompetenzen (OECD 2005) ist die interaktive Anwendung von Technologien (DeSeCo: 1c). Zu ihr leistet Zugriskontrolle einen Beitrag, da durch sie in vielen f allen die Nutzung von Systemen erm oglicht oder verhindert wird. Kooperation mit anderen und Informationsaustausch wird uber Zugriskontrolle reguliert (DeSeCo: 2). Auerdem ist anhand von Zugriskontrolle das Thema Datenschutz und eine kritische Einstellung gegen uber Informatiksystemen im Sinne einer ICT und Information Literacy im Unterricht thematisierbar (UNESCO 2008). Da viele Entwurfsmuster als"Probleml osemuster" direkten Einuss auf das Systemverhalten haben (!Kriterium 2: Zweck und Einsatzgebiet) ist neben wissenschaftsprop adeutischen Aspekten oft ein Beitrag zu den genannten Kompetenzen m oglich (Kapitel 2). Insgesamt ist durch den Einsatz von Entwurfsmustern in Lernsoftware (Abschnitt 5.6) ein Beitrag zur Media Literacy zu erwarten (UNESCO 2008). Vernetzte fundamentale Ideen zur Erkl arung des Systemverhaltens Ausgew ahlte vernetzte fundamentale Ideen ( !Kriterium 3: Vernetzte fundamentale Ideen der Informatik) im Entwurfsmuster Proxy sind: Zugriskontrolle, Schnittstelle, Vererbung und Kapselung (Abbildungen 5.4 und 5.6). Da fundamentale Ideen in der Klassikation gefordert werden, sei an dieser Stelle der Nachweis gefuhrt, dass Zugriskontrolle die Kriterien f ur fundamentale Ideen der Informatik nach Schwill (1993a) erf ullt (Abschnitt 4.2.2). Dabei ist zu betonen, dass der Ideenkatalog nach Schwill keinen Anspruch auf Vollst andigkeit erhebt. Auf Zugriskontrolle mittels Stellvertreter treen Lernende in Form von Platzhaltern f ur Graken in Textdokumenten und beim Navigieren im Internet (Sinnkriterium). Zugriskontrolle ist auf unterschiedlichem intellektuellen Niveau erkl arund1345. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung verstehbar, da bereits Kinder Zugriskontrolle durch ihre Eltern erfahren (Vertikalkriterium). Das Rollenspiel zu Suchalgorithmen, in dem ein Sch uler den Zugri auf die von ihm verwaltete Zahl kontrolliert und nach Annahme einer S uigkeit die Zahl zeigt, ist ein einfaches Unterrichtsbeispiel f ur die Grundschule (Bell et al. 2002, S. 45f). Seit der Einf uhrung von Mehrbenutzersystemen, z. B. UNIX, ist Zugriskontrolle in der Informatik relevant und wird durch die zunehmende Verbreitung von Informatiksystemen l angerfristig relevant bleiben (Zeitkriterium). Zugriskontrolle kommt in der Informatik sowohl bei Mensch-Maschine-Interaktion, bei Betriebsund Anwendungssystemen als auch bei deren Entwurf vor, wenn Zugri auf unterschiedliche Schichten kontrolliert wird (Horizontalkriterium). Auch f ur weitere, im Unterricht thematisierte Konzepte sollte der Nachweis der Fundamentalit at gefuhrt werden: Vererbung und Kapselung, die ein Synonym f ur das Geheimnisprinzip ist (Claus und Schwill 1997, S. 315), wurden von Schwill als fundamentale Ideen klassiziert (Schubert und Schwill 2004). Kalkbrenner (2007) weist nach, dass Schnittstelle selbst eine fundamentale Idee der Informatik ist. Allerdings ist sein Nachweis hinsichtlich des Vertikalkriteriums kritisch zu sehen, denn eine Erprobung in der Grundschule oder zu Beginn der Sekundarstufe I wird nicht vorgenommen. Da das Konzept der Schnittstelle jedoch eng verwandt ist mit Parametrisierung und Geheimnisprinzip, die ebenfalls von Schwill anhand der Kriterien als fundamentale Idee der Informatik best atigt wurden, wird Schnittstelle im Folgenden als fundamentale Idee betrachtet. Dabei wird der Begri Schnittstelle auch in dem Sinne verwendet, dass erst sie die Kommunikation unterschiedlicher Systemkomponenten, Systemteile und ganzer Informatiksysteme erm oglicht: "Das Konzept der Schnittstelle ist essentiell f ur die gezielte Abstraktion von Systemen sowie Teilsystemen und damit die Beherrschung umfangreicher Systeme der Informatik im Rahmen von Architekturen. Die Idee der Schnittstelle erlaubt eine entscheidende Abstraktion von der Implementierung zur reinen Darstellung der Wirkung eines Systemteils (anschaulich spricht man von ,Black Box Sicht' oder dem dahinter stehenden Prinzip des ,Information Hiding')" (Broy und Rumpe 2007, S. 9). Die Vernetzung der fundamentalen Ideen erkl art das f ur Kompetenzentwicklung mit Informatiksystemen wichtige Prinzip der Zugriskontrolle mittels Proxymuster als Strukturmodell: Ein Stellvertreterobjekt kontrolliert den Zugri auf ein Objekt. Erm oglicht wird die Stellvertreterrolle erst durch die gleiche Schnittstelle zu dem zu sch utzenden Objekt. Die gleiche Schnittstelle wiederum ist durch Vererbung von einer gemeinsamen abstrakten Klasse realisiert. Dieses einfache Beispiel zeigt das Zusammenwirken fundamentaler Ideen zur Erkl arung des Systemverhaltens. Damit wird ein Beitrag zu der Anforderung geleistet, Wirkprinzipien von Informatiksystemen zu verstehen. Dadurch, dass fundamentale Ideen der Informatik speziell den nichtspezischen Transfer unterst utzen, ist ein Beitrag zur Kompetenzentwicklung zu erwarten. Vernetztes Denken wiederum wird als Grundvoraussetzung f ur Schl usselkompetenzen betrachtet: "Vernetztes Denken ist dabei eine zentrale Voraussetzung. Wir sollten lernen, die vielf altigen Verbindungen und Beziehungen zwischen Standpunkten oder Ideen zu ber ucksichtigen, die unter Umst anden nur auf den ersten Blick widerspr uchlich erscheinen m ogen" (OECD 2005, S. 11). Die Analyse vernetzter fundamentaler Ideen kann damit einen Beitrag zur Orientierung in einer zunehmend komplexer werdenden Welt leisten. Sichtenwechsel zwischen Verhalten und bew ahrter Struktur Fur den Lernprozess zur F orderung der Kompetenzentwicklung mit Informatiksystemen ist die Unterst utzung unterschiedlicher Perspektiven auf Informatiksysteme relevant. Daher wird im Folgenden kurz auf ihren Beitrag zu den Sichten nach auen sichtbares Verhalten SA, innere Struktur SBund Implementierungsaspekte SCeingegangen. Entwurfsmuster sind abstrakte Elemente zur Gestaltung der inneren Struktur von Informatiksystemen ( SB). In dieser Ebene unterst utzen sie sowohl statische Beschreibungen, z. B. durch Klassendiagramme, als auch dynamische Beschreibungsformen wie Sequenzdiagramme. Am Ende5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 135 der Formalisierung von Zugriskontrolle durch die Sch uler steht eine abstrakte Beschreibung, die als Grundlage f ur weitere Situationen mit Zugriskontrolle genutzt werden kann: das Entwurfsmuster Proxy (!Kriterium 1: Abstraktion von Implementierungsaspekten). Die Komplexit at des Proxymusters wird von Harrer und Steinert f ur die Hochschule als moderat eingesch atzt ((Harrer und Schneider 2002); !Kriterium 5: Komplexit at). DieUbertragung der abstrakten Strukturelemente in die Implementierungsebene ( SC) wird nicht zuletzt durch die Entwurfsmusterkataloge durch Angabe von Beispielimplementierungen vorgenommen. Entwurfsmuster sind aber auch Probleml osemuster, d. h. ein Problem das ggf. im Verhalten des Systems erkennbar ist, wird durch eine bew ahrte Struktur gel ost. Wird ein Programm eingesetzt, dass ausschlielich auf einem Entwurfsmuster basiert, ist das nach auen sichtbare Verhalten direkt durch die Entwurfsmusterstruktur begr undet ( SA; vgl. Abschnitt 5.6.2). Die vernetzten fundamentalen Ideen der Informatik k onnen zur Erkl arung des nach auen sichtbaren Verhaltens genutzt werden. Entwurfsmuster erm oglichen damit Sichtenwechsel: Einerseits zwischen Verhalten, Struktur und Implementierungsaspekten, andererseits zwischen statischen und dynamischen Repr asentationen. Voraussetzung f ur soziale Kompetenz ist gem a der DeSeCo-Schl usselkompetenzen Empathie, d. h. Sch uler m ussen sich in andere Personen hineinversetzen k onnen (DeSeCo: 2a): "Dies erfordert, dass die Individuen ein Niveau an sozialer Reife erlangen, das es ihnen erm oglicht, sich von sozialem Druck zu distanzieren, verschiedene Sichtweisen einzunehmen, eigenst andige Urteile zu fallen und die Verantwortung f ur ihre Handlungen zu ubernehmen" (OECD 2005). Bezuglich Informatiksysteme sind f ur die Rollen Administrator, Entwickler und Anwender unterschiedliche Sichten einzunehmen. Die Sch uler k onnen sich durch den Sichtenwechsel in die Aufgaben dieser Personengruppen, die die interaktive Anwendung von Technologien mageblich mitgestalten, hineinversetzen (DeSeCo: 1c). Vernetzte Strukturmodelle und Lebensweltbezug Zur Vernetzung der Entwurfsmuster sei im Folgenden ein Beispiel zur Erkl arung von Textverarbeitungssystemen betrachtet, dass die drei Entwurfsmuster Proxy, Kompositum und Iterator umfasst (!Kriterium 4: Zusammenh ange mit anderen Strukturmodellen; !Kriterium 6: Lebensweltbezug). Dazu ist folgendes Szenario zur Veranschaulichung hilfreich: Eine Grak besteht aus Teilgraken. Sie wird durch ein Kompositum beschrieben. Die Grak soll nun in ein Textdokument eingef ugt werden. Zur ezienten Anzeige des Textdokumentes wird die Grak nicht direkt eingebunden, sondern vorerst nur durch einen Platzhalter repr asentiert, ein Proxy-Objekt. Erst wenn die Dokumentenstelle angezeigt werden soll, in der die Grak liegt, wird die richtige Grak geladen. In Abbildung 5.2 wird ein Klassendiagramm zur Darstellung der Vernetzung von Entwurfsmustern genutzt. Es erfasst aber nur implizit die ihnen innewohnenden fundamentalen Ideen. Die drei Entwurfsmuster Kompositum, Proxy und Iterator sind so kombiniert, dass der Iterator alle Elemente eines zusammengesetzten Objektes, des Kompositums, rekursiv iteriert. Dabei sind f ur die Blattobjekte und die zusammengesetzten Objekte des Kompositums Iteratoren gew ahlt worden. Freeman et al. beschreiben ein anschauliches Beispiel zur Kombination von Kompositum und Iterator inklusive Quelltext (Freeman et al. 2005, S. 315). Die Proxyklasse aus dem Proxymuster hat eine Verbindung zur abstrakten Klasse des Kompositums und erm oglicht so die Zugriskontrolle auf das Kompositum. Iteratoren stellen in diesem Sinne ebenfalls eine Form der Zugrisregelung dar. Eine Kombination des Proxymusters mit dem Zustandsmuster wird in der zweiter Unterrichtserprobung eingesetzt (Kapitel 8). Entwurfsmuster als lernf orderliche Schemata Die Komplexit at von Entwurfsmustern wurde als ambivalent bezeichnet, da zwar theoretische Aussagen zu einzelnen Mustern m oglich sind, eine Erprobung in der Sekundarstufe II zur Kompetenzentwicklung mit Informatiksystemen jedoch noch aussteht ( !Kriterium 5: Komplexit at).1365. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Subjekt Operation() Komponente Operation() FuegeHinzu(Komponente)Entferne(Komponente)GibKindobjekt(int)ErzeugeIterator()Proxy Operation()echtesSubjekt Blatt Operation()ErzeugeIterator()Kompositum Operation()FuegeHinzu(Komponente)Entferne(Komponente)GibKindobjekt(int)ErzeugeIterator()kindObjekteKlient Iterator Start()Weiter()IstFertig()AktuellesElement() KonkreterIterator1 KonkreterIterator2Proxy IteratorKompositum Start() Weiter()IstFertig()AktuellesElement()Start() Weiter()IstFertig()AktuellesElement() Abbildung 5.2: Klassendiagramm der kombinierten Entwurfsmuster Im Folgenden wird erg anzend argumentiert, dass Entwurfsmuster Schemata bilden, die lernf orderlich sind. Steinert fordert f ur die Sekundarstufe I, dass Entwurfsmuster nur eingesetzt werden, wenn sie eine didaktische Funktion erf ullen und somit lernf orderlich sind (Schneider 2003). Der Erfolg der F orderung der Kompetenzentwicklung mit Informatiksystemen h angt davon ab, ob es gelingt, komplexe Zusammenh ange, wie sie zwischen der inneren Struktur und dem Verhalten von Informatiksystemen bestehen, zu strukturieren ( !Kriterium 1: Abstraktion von Implementierungsaspekten), um Aneignung und Anwendung des Wissens zu unterst utzen. Solche Wissensorganisation f ordert den Erwerb, die Kommunikation uber den Wissensbereich und die Anwendung des Wissens. Nach Mandl und Fischer ist ein Schl ussel dazu die Visualisierung als externe Reprasentationsform (Mandl und Fischer 2000). Ein anderer sind Schemata als interne, kognitive Repr asentationen uber einen Wissensbereich: "Insbesondere in wenig strukturierten Wissensdom anen beeinussen Schemata als Strukturvorgaben die Behaltensund Anwendungsleistung" (Kopp und Mandl 2006, S. 133). Fur das Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung bieten Entwurfsmuster die Kombination dieser beiden, sich erg anzenden Formen der Wissensorganisation, die gleichzeitig die Komplexit atsbew altigung unterst utzen (!Kriterium 5: Komplexit at). Sie werden im Folgenden dargestellt. Nach Kopp und Mandl (2006) sind Wissensschemata abstrakte Wissensstrukturen (nicht zu verwechseln mit der gleichnamigen Komponente des didaktischen Systems), denen die Auassung zugrunde liegt, "dass s amtliche Objekte, Situationen, Ereignisse und Handlungen vom Individuum mental erfasst und verarbeitet werden, dass ihre einzelnen Komponenten kognitiv als zusammenh angendes Konzept abgebildet werden" (Kopp und Mandl 2006, S. 127). Sie haben zwei Hauptfunktionen: "Zum einen lenken sie bei der Wahrnehmung die Aufmerksamkeit, zum anderen unterst utzen sie die Integration von Wissen" (Kopp und Mandl 2006, S. 129).5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 137 Eigenschaften von Schemata sind, dass das durch sie erworbene Wissen { sei es konkret oder abstrakt, generisch oder episodisch (dynamische Abl aufe) { auf allen Abstraktionsebenen repr asentiert werden kann, Leerstellen vorkommen k onnen, die nach Bedarf mit Erfahrungen oder in neuen Situationen neu belegt werden k onnen, Schemata ineinander verschachtelt und hierarchisch organisiert sein k onnen, Schemata erworben und in verschiedenen Situationen angewendet werden k onnen, Schemata zentral beim Erwerb neuen Wissens sind, da sie darauf abzielen, bestm oglich mit den zu verarbeitenden Informationen zu korrespondieren, um Verstehen zu unterst utzen (Kopp und Mandl 2006, S. 128). An Erwerb und Ver anderung von Schemata sind die Prozesse Wissenszuwachs, Feinabstimmung und Umstrukturierung beteiligt (Kopp und Mandl 2006, S. 129). Kopp und Mandl stellen fest, dass die Anwendung fremdinduzierter Schemata f ur den Lernprozess hilfreich ist. Sie betonen, dass solche Schemata ausgesprochen dom anenspezisch sind, da sie erst von Experten eines Fachgebietes erarbeitet werden m ussen. Insgesamt unterscheiden sie drei Arten von Schemata: (1) Darstellungsschemata als abstrakte Metastruktur. Entwurfsmuster der Softwaretechnik entsprechen diesem Schematyp. (2) Probleml oseschemata als Vorstrukturierung des Probleml oseprozesses. Entwurfsmuster geben ebenfalls Hinweise zur Probleml osung. Mehrnoch entspricht jedoch die Vorgehensweise zur systematischen Erkundung des Verhaltens von Informatiksystemen diesem zweiten Schematyp (Abschnitt 5.5). (3) Falll oseschema als Spezialfall des Probleml oseschemas (Kopp und Mandl 2006, S. 131f). Eine ahnliches Verst andnis von Schemata wird beispielsweise genutzt, um kognitive Belastungen gem a der Cognitive Load Theory (CLT) zu reduzieren (Merrienboer und Sweller 2005). Die CLT geht davon aus, dass das menschliche Arbeitsged achtnis im Gegensatz zum Langzeitgedachtnis in seiner Kapazit at begrenzt ist. Das fortlaufende Umorganisieren und Vergleichen mit bestehenden Strukturen f uhrt zu neuem Wissen, das in Form von Schemata im Langzeitgedachtnis gespeichert wird. Vorteil dieser Schemata ist, dass sie als eine Informationseinheit aufgefasst werden und dadurch die Belastung des Arbeitsged achtnisses reduzieren. In der CLT wird dar uber hinaus beschrieben, welche Eekte die Belastung des Arbeitsged achtnisses hat und wie sie soweit reduziert werden kann, dass Schemata gebildet werden k onnen, d. h. dass Lernen stattndet (vgl. B orstler 2007). Das Begrispaar"Schema { Auspr agung" ist f ur die Informatik pr agend (Wedekind et al. 2004). Wie oben angedeutet sind Auspr agungen einer universellen Beschreibung wie Handlungsund Objektschemata zuzuf uhren. Objektschemata (z. B. Sch uler, Lehrer) sind jedoch leichter erlernbar. Die Entwurfsmusterstruktur, bestehend aus zentralen Aspekten wie Name, Problembeschreibung, L osungsbeschreibung und Konsequenzen, unterst utzen die Schemabildung. Es ist zu unterscheiden zwischen internen Schemata und Beschreibungsschemata wie sie beispielsweise bei Entwurfsmustern vorliegen. Dennoch werden solche Beschreibungsschemata als fremdinduzierte Schemata genutzt, um die interne Schemabildung zu unterst utzen. Au allig ist die Ahnlichkeit von Entwurfsmustern zu solchen Schemata (vgl. auch Clancy und Linn 1999) wie beispielsweise dem Wissensschema"DICEOX" (Brooks und Danserau 1983), das zur F orderung des Textverstandnisses auf zentrale Aspekte eines Texts aufmerksam macht. Aktiviert man beispielsweise das Schema"Entwurfsmuster Proxy", werden einzelne Komponenten und Beziehungen zur Realisierung der Zugriskontrolle kognitiv repr asentiert. Je nach Kontext werden unterschiedliche Informationen, z. B. die Frage der Zugrisrechte, relevant. Schemata als bewusste Lernstrategien konnen explizit oder implizit in den Lern-Prozess integriert werden.1385. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Externe Repr asentation von Entwurfsmustern Ebenso wie die Eigenschaft, ein Schema zu bilden, ist die externe Repr asentierbarkeit von Entwurfsmustern lernf orderlich und hilft, Komplexit at zu bew altigen (!Kriterium 5: Komplexit at). Lernstrategien der externen Visualisierung haben nach Renkl und N uckles (2006) unterschiedliche Funktionen. Eine wichtige ist die F orderung der Verarbeitungstiefe von Unterrichtsinhalten durch Herstellen von Zusammenh angen zwischen neuen Unterrichtsinhalten, Reduktion durch Identikation von Hauptpunkten sowie Elaboration. Das heit, die Beschreibung des Herstellens von Zusammenh angen zwischen Neuem und Vorwissen. Ein weiterer Aspekt ist die F orderung der Metakognition, da durch externe Repr asentation"Wissensund Verstehensl ucken" (vgl. Renkl und N uckles 2006, S. 136) den Lernenden bewusst werden. Externe Repr asentationen haben auerdem eine Ubersetzungsfunktion von einem Repr asentationscode in einen anderen. Auf Kompetenzentwicklung mit Informatiksystemen ubertragen kann dies beispielsweise der Wechsel von Quelltext zu Klassendiagrammen sein. Nach Renkl und N uckles (2006) k onnten externe Visualisierungen mentaler Modelle oft besser als Stimuli f ur Lernende dienen, als es die mentalen Modelle selbst k onnen (vgl. Renkl und N uckles 2006, S. 135f). Es wird zwischen bereichsunabhangigen Techniken wie Mind Maps und Concept Maps sowie bereichsspezischen Techniken der externen Visualisierung unterschieden. Beispiele f ur letztere sind Klassenund Sequenzdiagramme. Die Wirksamkeit von Techniken der externen Visualisierung ist nach Renkl und N uckles (2006) jedoch kaum empirisch untersucht. Allein bei Concept Maps l agen die Befunde vor, dass sie Textverst andnis, Metakognition und die wahrgenommene Selbstwirksamkeit des Lernens f ordern. Dies gelte allerdings nur, wenn die Lernenden nicht uberfordert sind. Als hilfreich h atten sich Anleitungen zum Erstellen der Repr asentationen erwiesen. Bei leistungsstarken Lernenden, die korrekte Repr asentationen erstellten, f uhrte der Einsatz zu erh ohter Transferleistung. Renkl und N uckles sehen zwei Hauptprobleme f ur Lernende bei externen Visualisierungen: Sie binden kognitive Ressourcen, und es kann f ur Lernende schwierig sein, korrekte externe Visualisierungen anzufertigen. Sie schlussfolgern, das Lernende ggf. bei der Erstellung unterst utzt werden m ussen. Sie weisen darauf hin, dass Kompetenzen zum Anwenden grascher Darstellungen durch die Nutzung externer Repr asentationen gef ordert werde und verweisen auf die PISA-Studie-2000, die die Auspr agung dieser Kompetenzen fordert. Des Weiteren wird auch die F ahigkeit gef ordert, unterschiedliche Repr asentationsarten aufeinander zu beziehen. Gerade f ur Kompetenzentwicklung mit Informatiksystemen, bei der unterschiedliche Sichten auf Informatiksysteme und innere Ablaufe notwendig sind, ist dieser Aspekt essentiell. Renkl und N uckles schlieen mit dem Hinweis, dass man mangels empirischer Befunde "aus theoretischer Perspektive genau uberlegen [muss], welche kognitiven Prozesse vermutlich durch spezische Varianten ausgel ost werden und ob man diese Prozesse anstrebt" (vgl. Renkl und N uckles 2006, S. 146). Grasche Darstellungen dominieren die objektorientierte Modellierung. Ein Entwurfsmuster ist die Zusammenfassung mehrerer Repr asentationen wie Klassen, Sequenzund Objektdiagrammen, aber auch textueller Beschreibung und Angabe von Quelltextbeispielen zu einer semantischen Einheit. Es ist Repr asentation und Artefakt aus der Softwareentwicklung zugleich. Vorteil der semantischen Einheit ist die damit gegebene Strukturierung des Wissens. Fasst man dies zusammen, so unterst utzen beispielsweise Klassen-, Sequenzund Zustandsdiagramme zu Entwurfsmustern durch Sichtenwechsel den Lernprozess zu Informatiksystemen. Typischerweise bezeichnet Wissen die Kenntnis von Fakten uber Objekte in einem bestimmten Bereich. Ein Entwurfsmuster impliziert Fakten bez uglich der Teilnehmer in dem Subsystem, das eine bestimmte Probleml osung beschreibt. Somit k onnen wir Informatiksysteme und Teile von Informatiksystemen mittels Entwurfsmustern repr asentieren. Dar uber hinaus beschreiben Entwurfsmuster Ereignisse, d. h. sie sind ein Repr asentationsformalismus und beschreiben den zeitlichen Ablauf einer Ereignisfolge und die zwischen ihnen bestehenden Ursache-WirkungsBeziehungen. Entwurfsmuster sind bereichspezische Repr asentationen, die beispielsweise in den5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 139 Fachern Architektur und Informatik eingesetzt werden, und hier wiederum deutliche fachspezische Unterschiede aufweisen. Daraus folgt eine erforderliche Abgrenzung: Diagrammarten wie Klassenund Sequenzdiagramm sind ebenfalls bereichsspezische Repr asentationen. Entwurfsmuster hingegen sind in ihrer Gesamtheit, bestehend aus Name, Problembeschreibung, L osungsbeschreibung und Konsequenzen, zu sehen. Daf ur wiederum wird ein B undel an Klassen-, Objektund Sequenzdiagrammen eingesetzt. Der Einsatz einer Wissensrepr asentation erfordert, dass man mit ihr arbeiten, sie ver andern kann. Genau dies leistet jedes einzelne Entwurfsmuster: Mit einem sehr viel engeren Fokus als beispielsweise ein Klassendiagramm, das ein statisches Modell eines beliebigen Softwaresystem darstellen kann, erlaubt jedes Entwurfsmuster viele Varianten einer spezischen Probleml osung (z. B. Zugriskontrolle mit dem Proxy). Dar uber hinaus jedoch kann der Kontext der Probleml osung in einem breiteren Sinne beschrieben werden als es allein mit einem Klassendiagramm f ur dieses Problem m oglich w are, z. B. statische und dynamische Aspekte. 5.4.5 Darstellung der Vernetzung fundamentaler Ideen Motivation der Darstellung zur fachdidaktischen Kommunikation Im Folgenden wird erarbeitet, wie eine grasche Repr asentation der vernetzten fundamentalen Ideen zur F orderung der fachdidaktischen Kommunikation aussehen kann. Ziel der graschen Darstellung ist die Veranschaulichung der Vernetzung f ur Akteure in Lehr-Lernprozessen und Fachdidaktikforscher. Sch uler k onnen uber sie zu einer metakognitiven Auseinandersetzung mit den Unterrichtsinhalten angeregt werden. Da Entwurfsmuster in der Sekundarstufe II bisher recht selten thematisiert werden, soll die Darstellung auf einen Blick beantworten, warum ein aus der professionellen Softwareentwicklung bekanntes Informatikinstrument in der allgemeinen Bildung eingesetzt werden kann und sollte. Lernenden liefert die grasche Struktur einen Uberblick und Ausblick auf nahe liegende Informatikthemen. Damit leistet die grasche Repr asentation einen Beitrag zur Analyse von Lehr-Lernprozessen. Sie verbessert die fachdidaktische Kommunikation, so dass die Unterrichtsinhalte auf fachliche Fehler analysiert werden k onnen. Auerdem erleichtert die Abbildung der fundamentalen Ideen der Informatik in einer graschen Repr asentation die Auswahl von Elementen, die in Lernerfolgskontrollen zu pr ufen sind. Zur fachdidaktischen Diskussion ist die Vernetzung der fundamentalen Ideen der Informatik in Entwurfsmustern geeignet zu repr asentieren. Anhand des angestrebten Bildungsziels"Kompetenzentwicklung mit Informatiksystemen" kann dann ausgew ahlt werden, welche fundamentalen Ideen besonders hervorgehoben werden und wie sie einander bedingen. Es sind Kriterien f ur geeignete Darstellungen zu nden (vgl. auch Brinda und Schubert 2001): (1) Analog zu Wissensstrukturen des didaktischen Systems sind zur Auswahl der Darstellungsform Ausdrucksst arke und Ubersichtlichkeit gefordert. Ziel ist es, die Entwurfsmuster, die oft in unterschiedlichen graschen Darstellungen vorliegen, um einen kompakten Uberblick uber die im Entwurfsmuster vorhandenen fundamentalen Ideen zu erg anzen. Die Darstellung soll f ur Lehrer und Sch uler gleichermaen verst andlich sein und deshalb keiner groen Einarbeitung bed urfen (Anderson 2001, S. 139), (Brinda 2004a, S. 181). (2) Zweites Kriterium ist die Modellierung von Relationen zwischen den vernetzten fundamentalen Ideen. Im Entwurfsmuster vorkommende fundamentale Ideen sind daf ur durch Knoten eines Graphen darzustellen. Relationen k onnen als Kanten repr asentiert werden. Es ist eine geeignete und zur besseren Ubersichtlichkeit geringe Menge an Relationen w unschenswert. (3) Wenn m oglich sollten standardisierte Darstellungsformen genutzt werden, da durch sie die Semantik festgelegt ist und Werkzeuge zur Bearbeitung vorhanden sind. Weitere Kriterien hinsichtlich der Vorkenntnisstrukturierung sind nicht notwendig, da die Darstellung der vernetzten fundamentalen Ideen die Wissensstrukturen aus dem didaktischen System nicht ersetzen soll. Die vorhandene Vernetzung fundamentaler Ideen soll vor allem eine Erkl arung des Zusammenwirkens der Ideen liefern. Damit sind Vorrangrelationen, wie bei Lernzielen m oglich, nicht das Darstellungsziel.1405. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Ossimitz betrachtet den Begri des systemischen Denkens f ur die Mathematikdidaktik. Nach Ossimitz (2002) umfasst es: Vernetztes Denken, Denken in Modellen, dynamisches Denken und systemisches Handeln. Zum vernetzten Denken sind entsprechende Darstellungsmittel notwendig. Das bedeutendste Denkwerkzeug der Systemwissenschaft ist nach Ossimitz das Wirkungsdiagramm. Wirkungsdiagramme kommen aus der Kybernetik und werden von Ossimitz (2002) fur die Didaktik der Mathematik eingesetzt, um Abh angigkeiten von Einussfaktoren in einem System qualitativ zu beschreiben. Ubertragen auf Kompetenzentwicklung mit Informatiksystemen kann das Wirkungsdiagramm genutzt werden, um die vernetzten fundamentalen Ideen der Informatik zu visualisieren. Es ist eine informatikunabh angige Repr asentation der durch ein oder mehrere Entwurfsmuster vernetzten fundamentalen Ideen der Informatik. Begrisnetze (Concept Maps) als dom anenunabh angige Darstellungsform sind prinzipiell auch geeignet, das Netz der fundamentalen Ideen darzustellen. Im Gegensatz zur qualitativ eingezeichneten Beeinussung der einzelnen Konzepte, wie im Wirkungsdiagramm, kann in Concept Maps die Art der Beziehung speziziert werden. Beide Darstellungsformen werden im Folgenden verglichen. Analyse von Wirkungsdiagramm und Begrisnetz Zur graschen Darstellung der vernetzten fundamentalen Ideen werden die Formalisierungen durch Wirkungsdiagramme und Begrisnetze auf ihre Eignung untersucht und verglichen. Informatikdarstellungen wie Klassenund Objektdiagramme werden nicht herangezogen, da sie bereits zur Entwurfsmusterbeschreibung eingesetzt werden und implizit die Vernetzung der fundamentalen Ideen repr asentieren. Eine Darstellung der Vernetzung fundamentaler Ideen durch diese Diagramme der Objektorientierung kann im Lehr-Lernprozess unn otig verwirren. Es ist nicht ersichtlich, dass die durch Klassendiagramme darstellbaren Operationen und Attribute in diesem Kontext ben otigt werden, so dass auf sie zugunsten der Ubersichtlichkeit zu verzichten ist. Gegebenenfalls kann durch Vererbung die hierarchische Strukturierung der fundamentalen Ideen der Informatik nach Schwill anhand der drei Masterideen Sprache, Algorithmisierung und strukturiere Zerlegung nachgebildet werden. Allerdings gesch ahe dies auf Kosten der Ubersichtlichkeit und liefert keinen Beitrag zur Kompetenzentwicklung mit Informatiksystemen. Die von Brinda und Schubert f ur Wissensstrukturen genutzten Und-Oder-Graphen sind f ur die Darstellung der Vernetzung fundamentaler Ideen ungeeignet, da keine hierarchische Strukturierung vorliegt. Die oben genannten Anforderungen an die grasche Darstellung vernetzter fundamentaler Ideen der Informatik, (1) Ubersichtlichkeit und Ausdrucksst arke, (2) Modellierung von vernetzenden Relationen und (3) Nutzung einer standardisierten Darstellungsform, werden im Folgenden an den ausgew ahlten Repr asentationen, Wirkungsdiagramm und Concept Map, uberpr uft. Ossimitz deniert Wirkungsdiagramme wie folgt: "Ein Wirkungsdiagramm enth alt die wesentlichen Systemelemente als Knoten und Wirkungsbeziehungen zwischen diesen Elementen als Pfeile. Dabei wird { wenn m oglich { zwischen gleichgerichteten Wirkungen (Vorzeichen"+") und gegengerichteten Wirkungen (Vorzeichen" ") unterschieden" (Ossimitz 2000, S. 8). Zu beachten ist, dass ein System der Allgemeinen Systemtheorie gemeint ist. Damit ergibt sich die Schwierigkeit, dass es zur Beschreibung vernetzter fundamentaler Ideen nur in Ausnahmef allen m oglich sein wird, Wirkrichtungen einzutragen und die Art der Wirkung mit positiver oder negativer R uckkopplung zu bezeichnen. Daher sind zur Darstellung vernetzter fundamentaler Ideen der Informatik Wirkungsdiagramme zu verwenden, die auf diese, nach Ossimitz optionale Ruckkopplungsbeschreibung, verzichten. Wirkungsdiagramme dienen dabei zur qualitativen Darstellung, d. h. zur Beschreibung, welche fundamentalen Ideen in dem Entwurfsmuster der Probleml osung dienen (Abbildung 5.3). Als Beispiel wird das Wirkungsdiagramm des Proxymusters angegeben. Ein Proxyobjekt kontrolliert als Stellvertreter den Zugri auf ein zu sch utzendes Objekt. Die im Proxymuster enthaltenen fundamentalen Ideen sind in Abbildung 5.4 mit einem Wirkungsdiagramm dargestellt. Es5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 141 qualitativ quantitativverbale Beschreibung WirkungsdiagrammFlussdiagramm Gleichungen Abbildung 5.3: Wirkungsdiagramme als qualitative Darstellungsmittel zur Beschreibung von Systemen nach (Ossimitz 2002, S. 4) ist ersichtlich, dass die Wirkungsdiagramme sehr einfach zu erstellen und zu verstehen sind. Sie haben eine hohe Aussagekraft und Ubersichtlichkeit, wenngleich ein erl auternder Text notwendig erscheint. Weitere Wirkungsdiagramme f ur Kompetenzentwicklung mit Informatiksystemen nden sich in der Diplomarbeit von Ufer (2007). Er hat die in Architekturmustern vorhandenen vernetzten fundamentalen Ideen der Informatik uberzeugend in Wirkungsdiagrammen pr asentiert. Kapselung VererbungZugriffskontrolle Platzhalter  / Lokalität  von ObjektenInteraktionsregelung Schnittstelle Abbildung 5.4: Wirkungsdiagramm zu den vernetzten fundamentalen Ideen im Proxymuster Wirkungsdiagramme sind auch geeignet, vernetzte fundamentale Ideen in kombinierten Entwurfsmustern darzustellen. Insbesondere die Verbindungspunkte der Entwurfsmuster sind in Wirkungsdiagrammen beachtenswert, da sie ggf. neue Variationen verlangen. Abbildung 5.5 zeigt das Wirkungsdiagramm zu Proxy, Kompositum und Iterator gem a des Beispiels aus Abbildung 5.2. So ver andert die Kombination eines Iterators mit dem Kompositum das iterative Durchlaufen einer Datenstruktur zu einem rekursiven Traversieren der Baumstruktur des Kompositums, die eine Teil-Ganzes-Beziehung beschreibt. Nachdem Wirkungsdiagramme diskutiert wurden, werden Concept Maps untersucht. Sie sind folgendermaen deniert: "A concept map is a spatial array that represents elements of knowledge by means of nodes and directionally labeled or named links, whereas the nodes represent ideas, concepts, or beliefs and the links depict relations between them" (Tergan und Keller 2005, S. 3). Dadurch wird deutlich, dass sie beliebige n-nare Relationen darstellen k onnen, wie es f ur die vernetzten fundamentalen Ideen der Informatik hilfreich ist, wenn Hinweise zu den Zusammenh angen oder zur Umsetzung im Unterricht gegeben werden sollen. Damit sind Begrisnetze potentiell aussagekr aftiger als Wirkungsdiagramme. Abbildung 5.6 zeigt eine m ogliche Concept Map zu1425. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung    Zugriffskontrolle  Proxy (Klienten)  Schnittstelle  Iterator Rekursion  Iterator  Polymorphie   Iterator Stack-Datenstruktur   Iterato r  In-/pre-order   Traversierung   Iterator     Schnittstelle   Proxy   Kapselung  Proxy   Schnittstelle   Kompositum  Vererbung  Kompositum  Rekursion  Kompositum    Polymorphie   Kompositum  Baumstruktur   Kompositum  Teil-GanzesBeziehung  Kompositum  Kompositum  Iterato r  Proxy  Klassenhierarchie  Kompositum  Interaktionsregelung  Proxy  Platzhalter /   Referenz  Proxy  Vererbung  Proxy  Abbildung 5.5: Wirkungsdiagramm zur Kombination der Entwurfsmuster den vernetzten fundamentalen Ideen im Proxymuster. Bei der Bezeichnung der Relationen wurden ausschlielich ermoglicht und erfordert -Relationen genutzt, da sie das Zusammenwirken zur Realisierung von Zugriskontrolle erkl aren und implizit Hinweise auf die Umsetzung im unterrichtlichen Geschehen erlauben. In den hier gezeigten F allen ist es m oglich, sie bei Anderung der Lesebzw. Pfeilrichtung auszutauschen. Alternativ dazu kann eine ausf uhrlichere Beschreibung der Relationen im Begrisnetz erfolgen, die jedoch dem Prinzip der Ubersichtlichkeit widersprechen kann. Gleichzeitig ist anzumerken, dass auch ausf uhrlichere Beschreibungen durch Relationen nicht aquivalent zu der Musterbeschreibung im Entwurfsmusterkatalog sein werden, in der beispielsweise Klassendiagramme und Varianten des Musters angegeben sind. Mit Bezug zu Abbildung 5.3 ist das Begrisnetz zwischen Wirkungsdiagramm und Flussdiagramm als qualitatives Darstellungsmittel einzuordnen. Die Analyse ergibt, dass sich sowohl vereinfachte Wirkungsdiagramme als auch Begrisnetze zur Darstellung der vernetzten fundamentalen Ideen eignen. Letztere erm oglichen ein weites Spektrum m oglicher Relationen. Empfohlen seien ermoglicht und erfordert -Relationen, da sie explizit das Zusammenwirken der fundamentalen Ideen erkl aren und implizit Hinweise auf die unterrichtliche Gestaltung geben. Beide Diagrammarten stellen die Vernetzung der fundamentalen Ideen der Informatik qualitativ dar. In Wirkungsdiagrammen und Concept Maps repr asentieren die Knoten fundamentale Ideen der Informatik. Deren Kanten repr asentieren Relationen anhand derer ersichtlich wird, wie die fundamentalen Ideen im Entwurfsmuster zusammenh angen. Die Darstellung der vernetzten fundamentalen Ideen in einem Entwurfsmuster wird in der Unterrichtsvorbereitung kaum vollst andig erfolgen, sondern Schwerpunkte f ur den Lehr-Lernprozess setzen. Die eingezeichneten Wirkbeziehungen umfassen Intentionen und sind abh angig vom angestrebten Lehr-Lernprozess. Fazit ist, dass sowohl Concept Maps als auch die vereinfachten Wirkungsdiagramme aufgrund ihrer Ausdrucksst arke und Ubersichtlichkeit geeignet sind, vernetzte fundamentale Ideen darzustellen. Bei beiden sind die Relationen, die zwischen den fundamentalen Ideen bestehen, dennoch5.4. Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik 143 Abbildung 5.6: Concept Map zu den vernetzten fundamentalen Ideen im Proxymuster zusatzlich zu kl aren. Dies geschieht im Regelfall bereits durch die Beschreibung der Entwurfsmuster, wie sie in fachwissenschaftlichen Katalogen vorliegt. Erg anzend muss, wie von Stechert (2006a), Stechert (2006b), Ufer (2007) und Weyer (2007b) durchgef uhrt, ein erl auternder Text zur Auswahl der fundamentalen Ideen angegeben werden, wie es f ur Unterrichtsentw urfe ublich ist. Fasst man diese Ergebnisse zusammen, so sind Relationen in Begrisnetzen, die das Zusammenwirken der vernetzten fundamentalen Ideen erkl aren, w unschenswert, wenn die Ubersichtlichkeit nicht gef ahrdet ist. Hinsichtlich der Auswahl von Relationen in den Begrisnetzen ist zu beachten, dass insbesondere Vorrangrelationen, die eine Reihenfolge f ur den Unterricht implizieren, einer Erkl arung bed urfen. Vor allem erscheinen fundamentale Ideen als Themen nicht geeignet, um die Reihenfolge im Unterricht vollst andig zu begr unden: Lernziele sind im Fall von Vorrangrelationen zu erg anzen, und es gibt Darstellungsformen f ur Vorrangrelationen, die zu diesem Zweck entwickelt wurden, z. B. Wissensstrukturen des didaktischen Systems (Brinda und Schubert 2001), (Freischlad 2008) oder Lernzielgraphen (Steinert 2007). Kritische Betrachtung von Entwurfsmustern im Informatikunterricht der Sekundarstufe II Entwurfsmuster sind anspruchsvolle Konzepte der Softwaretechnik zur Herstellung qualitativ hochwertiger Software. In diesem Zusammenhang ist zu beantworten, warum ausgew ahlte Entwurfsmuster trotz Abstraktheit und Komplexit at geeignet sind, Basiskompetenzen zu Informatiksystemen zu f ordern. Vernetzte fundamentale Ideen als Argument sind bereits ausf uhrlich als Begr undung diskutiert worden, aber es gibt vor allem in der hochschuldidaktischen Informatikforschung Kritik am Einsatz von Entwurfsmustern. Sie werden im Folgenden aufgegrien, und es wird diskutiert, inwieweit sie auf den Einsatz von Entwurfsmustern zur F orderung der Kompetenzentwicklung mit Informatiksystemen zutreen. Im Zuge der Forschung um Entwurfsmuster nach Gamma et al. (1995) sind einige Ans atze erprobt worden, Muster der imperativen Programmierung als Gegenstand der universit aren Lehre (wieder) einzuf uhren (vgl. (Porter und Calder 2003), (Proulx 2000)). Wallingford (1996) diskutiert sowohl imperative als auch objektorientierte Programmiermuster und schlussfolgert, dass f ur die Anf angerausbildung an Hochschulen einfachere Muster f ur die Objektorientierung entwickelt werden m ussen. Seiner Meinung nach sind die f ur die Softwareentwicklung beschriebenen Entwurfsmuster aus zwei Gr unden ungeeignet: "First, that work targets primarily more advanced software practitioners. Second, it tends to emphasize design issues, whereas a rst course must provide a signicant amount of support for novice programmers " (Wallingford 1996, S. 29; Hervorh. im Original).1445. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Deutlich wird an dieser Aussage, dass Entwurfsmuster vor allem im Kontext von Programmierkursen diskutiert werden. Diese Aussage gilt f ur den Informatikunterricht zur F orderung der Kompetenzentwicklung mit Informatiksystemen jedoch nicht zwangsl aug, da im Rahmen einer Wissenschaftsprop adeutik durchaus die bekannten Entwurfsmuster eingesetzt werden sollten und die Entwurfsmuster von Sch ulern eben nicht zum Erstellen komplexer Softwaresysteme genutzt werden. Eine didaktisch begr undete Auswahl einiger Entwurfsmuster ist dennoch notwendig. Bezuglich der Objektorientierung ist Astrachan (2001) noch deutlicher. Er ubt Kritik an dem Ansatz, Objektorientierung und Entwurfsmuster um jeden Preis in Anf angervorlesungen an Hochschulen zu behandeln, und fordert einen angemessen Aufgabenkontext, da Entwurfsmuster eine Methodik f ur komplexe Systeme sind. Dies f uhrt zu einem Zielkonikt um ein minimales Szenario, das komplex genug ist, um die Vorteile der Entwurfsmuster zu lehren, und nicht zu komplex fur die Studierenden im Grundstudium bzw. in der Sekundarstufe II. Astrachan schliet seine Uberlegungen damit, dass er Entwurfsmuster immer dann lehren wird, wenn ein f ur die Zielgruppe geeignetes Szenario vorliegt. Allerdings ist er bereit, auf (einige) Entwurfsmuster zu verzichten, wenn gegebene Probleme ohne Entwurfsmuster einfacher und eleganter gel ost werden k onnen. Auerdem bevorzugt er den Vergleich von einer entwurfsmusterbasierten mit einer herkommlichen objektorientierten L osung eines Problems gegen uber der ausschlielichen Verwendung vieler verschiedener entwurfsmusterbasierter Probleml osungen, d. h. er verzichtet auf das Lehren eines umfangreichen Katalogs an Entwurfsmustern. F ur Kompetenzentwicklung mit Informatiksystemen ist die Konsequenz, dass der Beitrag jedes Entwurfsmusters sorgf altig zu begrunden ist. Fasst man die Kritikpunkte zusammen, so beziehen sie sich vornehmlich auf den Beitrag der Entwurfsmuster zum Programmierenlernen. Die Komplexit at eines Szenarios, in dem ein Entwurfsmuster f ur die Softwareentwicklung sinnvoll ist, wird in diesem Kontext als hinderlich betrachtet. F ur Kompetenzentwicklung mit Informatiksystemen ist dies jedoch wegen der geringeren Anforderungen an die Programmierkenntnisse nicht in dem Mae relevant. Ein einzelnes Entwurfsmuster kann zum Problemraum erkl art werden, wenn es f ur Kompetenzentwicklung mit Informatiksystemen f orderlich ist. Nach Schubert und Schwill (2004) darf eine "didaktische Vereinfachung die Vernetzung von Einussgr oen nicht zerst oren, kann aber sehr wohl einen Realit atsausschnitt zum Problemraum erkl aren, der als ,abgeschlossene Welt' behandelt wird" (Schubert und Schwill 2004, S. 53). So ist auch die Auswahl eines zur Erkl arung eines f ur Kompetenzentwicklung mit Informatiksystemen relevanten Netzes fundamentaler Ideen in einem Entwurfsmuster als abgeschlossene Welt zu begr unden. Die u. a. von Porter und Calder (2003) geforderte Verlagerung des Schwerpunktes von der Programmierung auf den Entwurf eines Systems ist hingegen auch f ur Kompetenzentwicklung mit Informatiksystemen nachvollziehbar. Insgesamt wird die Kritik am Einsatz von Entwurfsmustern in der vorliegenden Arbeit so interpretiert, dass eine didaktisch begr undete Auswahl von Entwurfsmustern vorzunehmen ist und hinsichtlich der Machbarkeit eine Erprobung im Informatikunterricht stattnden muss. Kritische Betrachtung von Entwurfsmustern f ur Kompetenzentwicklung mit Informatiksystemen Neben dem Einsatz von Entwurfsmustern in der Schule muss auch ein Beitrag zu Informatiksystemen und Kompetenzentwicklung kritisch diskutiert werden. Mit Entwurfsmustern wurde ein Mittel gefunden, das vernetztes Denken f ordern kann und die Erkl arung des nach auen sichtbaren Verhaltens eines Systems uber eine bew ahrte Struktur erm oglicht. Eingef uhrt in das Unterrichtsmodell, um vernetzte fundamentale Ideen der Informatik zu repr asentieren, sind Entwurfsmuster dennoch Strukturierungsmuster und Heuristiken aus der Informatikpraxis. Mit ihnen nden sich f ur das Unterrichtsmodell sehr viele Ankn upfungspunkte an den traditionellen5.5. Entwicklung von Vorgehensweisen zur Erkundung von Informatiksystemen 145 objektorientierten Informatikunterricht f ur eine Unterrichtsreihe zum Thema Informatiksysteme. Dennoch ist Kompetenzentwicklung mit Informatiksystemen nicht zwangsl aug mit der objektorientierten Modellierung der Sekundarstufe II verkn upft. Vielmehr k onnen im Sinne eines Spiralcurriculums besonders Themen und Fragestellungen zum nach auen sichtbaren Verhalten bereits fr uher und ggf. ohne Objektorientierung im Informatikunterricht behandelt werden. Es bleibt festzuhalten, dass Entwurfsmuster eine besondere Art von Strukturmodellen darstellen, die aufgrund ihrer Anwendung als Probleml osemuster unter bestimmten Voraussetzungen die Kompetenzentwicklung mit Informatiksystemen f ordern. Informatiksysteme und Kompetenzentwicklung sind jedoch nicht notwendigerweise an objektorientierte Entwurfsmuster gebunden (siehe auch Kapitel 4). 5.4.6 Zusammenfassung zu Entwurfsmustern als Wissensrepr asentationen Aus der Analyse des Forschungsstandes wurde geschlossen, dass es an lernf orderlichen Strukturen fehlt, die Informatikunterricht zu Wirkprinzipien von Informatiksystemen unterst utzen. In Entwurfsmustern wurde Potential zur F orderung der Kompetenzentwicklung mit Informatiksystemen gesehen, und in der vorliegenden Arbeit wurden sie auf vernetzte fundamentale Ideen der Informatik untersucht. Grund f ur die Verkn upfung von Entwurfsmustern mit vernetzten fundamentalen Ideen der Informatik war, dass die Analyse des Forschungsstandes ergab, dass die Vernetzung der Grundbegrie und Wirkprinzipien von Informatiksystemen bisher eine Aufgabe blieb, die der Lehrer selbst l osen musste. Ausgew ahlte Entwurfsmuster wurden nach Anwendung der Klassikation als Wissensrepr asentationen f ur vernetzte fundamentale Ideen bezeichnet. Aufgabe dieser Wissensrepr asentationen ist es, eine fachdidaktische Begr undung zur Erreichung des Bildungsziels"Kompetenzentwicklung mit Informatiksystemen" zu liefern. Fasst man die Diskussion zusammen, so erf ullen ausgew ahlte Entwurfsmuster als Wissensreprasentation zur F orderung der Kompetenzentwicklung mit Informatiksystemen folgende Eigenschaften: Sie erf ullen eine didaktische Funktion und sind lernf ordernd (Lehr-Lerntheorie), sie basieren auf bew ahrten Informatik(system)strukturen (Informatik), sie sichern den Bildungswert durch Vernetzung fundamentaler Ideen der Informatik (Didaktik der Informatik), sie sind im Unterricht kombinierbar mit weiteren Wissensrepr asentationen, z. B. mit weiteren Softwaremustern, virtuellen Maschinen und Schichtenmodellen. Ziel ist es, die fachdidaktische Kommunikation zu unterst utzen, um Unterricht zur F orderung der Kompetenzentwicklung mit Informatiksystemen begr unden und bewerten zu k onnen. Neben der informatischen Darstellung der Wissensrepr asentation, z. B. Musterform nach Gamma et al. (1995), wurden Wirkungsdiagramme und Concept Maps als graphbasierte Darstellungsmittel der vernetzten fundamentalen Ideen der Informatik kurz diskutiert (Abschnitt 5.4.5). Zusammenfassend ist somit das Ziel des Einsatzes von Wissensrepr asentationen im Lehr-Lernprozess das Komprimieren und Veranschaulichen, um das Aneignen und Rekapitulieren zu unterst utzen. 5.5 Entwicklung von Vorgehensweisen zur Erkundung von Informatiksystemen 5.5.1 Experimente und Tests zur Erkundung von Informatiksystemen Begr undung f ur Experimente zur Erkundung von Informatiksystemen Ziel dieses Abschnitts ist es, eine Sch ulervorgehensweise zur F orderung der Kompetenzentwicklung mit Informatiksystemen im Informatikunterricht anzugeben, die gleichzeitig mit dem Ansatz1465. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung der Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik kombiniert werden kann (Abschnitt 5.4). Winograd und Flores (1988) betonen, dass das Verhalten komplexer Systeme kaum vorhersagbar und deshalb das Systemverhalten schrittweise zu erkunden ist: Similarly, in a complex computer system designed and functioning properly at a higher level there is often no way to predict how a program will act, short oft running it (or simulating it step by step, which is of the same complexity). In interacting with such a system we tend to treat it in the same way we treat organisms { we operate by perturbing it and observing the results, gradually building up an understanding of its behavior" (Winograd und Flores 1988, S. 95). Komplexe Systeme sind demnach durch Intransparenz gekennzeichnet (D orner und Schaub 1994), und dem Experimentieren kommt eine Schl usselrolle zu. Um das Verhalten von Informatiksystemen zu analysieren, wird sowohl in der Fachwissenschaft das Experimentieren als auch f ur die Schulinformatik ein experimentierender, handlungsorientierter Zugang zu Informatiksystemen gefordert: Gem a Duden Informatik ist das nach auen sichtbare Verhalten von Informatiksystemen durch Tests und Experimente zu ermitteln (Claus und Schwill 2006, S. 677). Fur die Schulinformatik wird beispielsweise 1993 im ACM-Curriculum das Experimentieren gefordert (ACM 1993, S. 3). Im aktuellen UNESCO ICT Curriculum ist Experimentieren eine empfohlene Lehr-Lernmethode: "Experimenting is one of the principal means to perform exploratory learning and to construct knowledge { based on experience" (UNESCO 2002, S. 94). Konkrete Handreichungen zu Aufbau und Durchf uhrung der Experimente zur F orderung der Kompetenzentwicklung mit Informatiksystemen werden jedoch nicht angegeben. Denition von Forschungsexperiment und Unterrichtsexperiment Begriich ist zwischen dem Forschungsund Unterrichtsexperiment zu unterscheiden. Das Forschungsexperiment entspricht der systematischen Erforschung von Gesetzm aigkeiten: "Informatiker simulieren, experimentieren, pr ufen und analysieren am Modell, um zu neuen Erkenntnissen zu kommen. Im Unterschied zum Naturwissenschaftler gilt das Erkenntnisinteresse jedoch nicht den Gesetzen oder Ph anomenen der Natur, sondern vor allem kulturellen Ph anomenen (Schefe 1999, S. 123), dem intendierten Informatiksystem und den zugrunde liegenden Strukturen" (Thomas 2002, S. 64; Hervorh. im Original). Dabei sind jedoch nicht allein intendierte Informatiksysteme das Ziel, sondern durchaus auch bestehende, un uberschaubare Systeme. In diesem Sinne ist das Experiment im Duden Informatik deniert: "Experiment: Methode, um eine Vermutung, eine These oder eine Theorie zu uberpr ufen, um einen Eekt zu untersuchen oder um die Einsatzm oglichkeiten zu demonstrieren. Da Systeme der Informatik oft un uberschaubar sind, uberpr uft man gewisse Eigenschaften durch Experimente. Man spricht aber erst von Experimenten, wenn hierbei entweder umfangreiche Messreihen erforderlich sind [. . . ] oder wenn der Einsatz von Methoden, Ober achen, Schnittstellen usw. sich nur in der Praxis feststellen l asst" (Claus und Schwill 2006, S. 243; Hervorh. im Original). Systematisches Testen in der Kerninformatik und im Informatikunterricht Testen wird mit Bezug zum Experimentbegri folgendermaen deniert: "Testen: Uberpr ufung des Ein/ Ausgabeverhaltens eines Programms anhand von Experimenten und gezielten Programmdurchl aufen" (Claus und Schwill 2006, S. 682; Hervorh. im Original).5.5. Entwicklung von Vorgehensweisen zur Erkundung von Informatiksystemen 147 In den von Thomas (2003) identizierten Hauptmodelltypen der Kerninformatik (Architekturmodelle, Vorgehensmodelle, Entwurfsmodelle, Untersuchungsmodelle und mentale Modelle) gehort systematisches Testen zu den Untersuchungsmodellen. Das systematische Testen korrespondiert stark mit dem Qualit atsmerkmal Zuverl assigkeit von Informatiksystemen (Kapitel 3). Im Unterricht k onnen Anforderungen an und Qualit atsmerkmale von Informatiksystemen von den Schulern erarbeitet werden und anschlieend ein System systematisch getestet werden. Fur Kompetenzentwicklung mit Informatiksystemen sind die Analyse der inneren Struktur und des nach auen sichtbaren Verhaltens von Informatiksystemen notwendig. In der Fachwissenschaft wird Testen in White-Box-Testen, d. h. Implementierung und innere Struktur sind bekannt, oder aber Black-Box-Testen unterschieden (Abschnitt 3.2.1). Bei letzterem wird allein das nach auen sichtbare Verhalten untersucht. Er ist somit programmiersprachenunabh angig: "Beim Black-Box-Test geht man von den funktionalen Anforderungen an das Programm aus, d. h. von der Interaktion des Programms mit seiner Umgebung und seiner Wirkung auf diese. Die Auswahl der Testf alle richtet sich nach den Eingaben, Ausgaben und ihrer funktionellen Verkn upfung" (Fr uhauf et al. 1997, S. 47). Fazit an dieser Stelle ist, dass zur Analyse des nach auen sichtbaren Verhaltens eine Vorgehensweise f ur den Unterricht in Anlehnung an den Black-Box-Test zu entwickeln ist. Man spricht von einem optimalen Test, wenn alle Kombinationen von Einund Ausgaben f ur alle funktionellen Verkn upfungen getestet werden. Aufgrund der kombinatorischen Explosion versucht man in der Praxis, gleichwertige Ergebnisse auf eine Klasse von Eingabewerten zusammenzufassen und nur einmal zu testen. Diese Klassen von Eingabewerten nennt man Aquivalenzklassen. Grenzwerte bilden hier oft eine eigene Aquivalenzklasse. S ulz (2007) hat in einer Seminararbeit betreut vom Autor eine Unterrichtssequenz zu diesem Thema beschrieben und dabei das fachliche Kriterium fur gute Testf alle aufgegrien: "Die f ur den Testfall gew ahlten Werte sind typisch, stehen also stellvertretend f ur eine ganze Klasse von Eingabewerten" (Thaller 1994, S. 99). Dieses Kriterium ist f ur Kompetenzentwicklung mit Informatiksystemen relevant, l auft es doch auf eine Klassizierung des Verhaltens von Informatiksystemen hinaus. Verikation und Validierung werden eingesetzt, um zu uberpr ufen, ob ein Programm korrekt arbeitet, d. h. sie dienen zur Kontrolle der Zuverl assigkeit eines Informatiksystems. Verizieren ist dabei das Pr ufen, ob in dem Informatiksystem vorgegebene Anforderungen erf ullt sind, w ahrend Validieren das Pr ufen auf Eignung f ur den vorgesehenen Verwendungszweck ist (vgl. Fr uhauf et al. 1997). Nach Schwill ist Verikation eine fundamentale Idee der Informatik. Daf ur zeigt Schwill (1993b), dass es m oglich ist, die Verikation eines Programms im Informatikunterricht aller Stufen zu behandeln (vgl. auch Schwill 1994). Im n achsten Abschnitt wird die Entwicklung von Unterrichtsexperimenten zur F orderung der Kompetenzentwicklung mit Informatiksystemen beschrieben. 5.5.2 Unterrichtsexperimente zur F orderung der Kompetenzentwicklung mit Informatiksystemen Im Folgenden wird die Denition des Unterrichtsexperiments nach Meyer verwendet, der betont, dass das Unterrichtsexperiment weiter gefasst ist als in der Wissenschaft ublich: Beobachtungsaufgaben und Messungen werden als Experiment bezeichnet (Meyer 2006, S. 316). Transferiert man das in der Informatik geforderte Testen und Experimentieren ad aquat auf Unterricht, so kann in beiden F allen von Unterrichtsexperimenten gesprochen werden. Grundannahme ist, dass das Verhalten von Informatiksystemen systematisch erkundet werden kann und rational, beispielsweise anhand vernetzter fundamentaler Ideen der Informatik, verstehbar wird: "Den Prozess, sich Informatikwissen und -k onnen anzueignen, soll der Sch uler als systematisches Testen des Informatiksystems auassen. Er hat dann den ersten Schritt zum Verst andnis der interaktiven Arbeit mit dem Rechner bew altigt" (Schubert und Schwill 2004, S. 43).1485. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Als Konsequenz des Kompetenzbegris ist die aktive Bearbeitung einer Problembzw. Anforderungssituation durch die Sch uler ein Gestaltungsmerkmal des zu entwickelnden Unterrichtsmodells. Nach Meyer f uhrt Handlungsorientierung zu einem sch ulerorientierten Unterricht (Meyer 2005, S. 215). Sch ulerorientierter Unterricht versucht, den subjektiven und objektiven Bed urfnissen und Interessen der Sch uler zu entsprechen (Meyer 2005, S. 216). Problemorientierung ist ein zur Motivation und zur Gestaltung von Anforderungssituationen hilfreiches Instrumentarium im Informatikunterricht. Ein Problem besteht dabei aus unerw unschtem Anfangszustand, erwunschtem Zielzustand und einer zu uberwindenden Barriere (Edelmann 1986). Problemsituationen entsprechen den wichtigen komplexen Anforderungssituationen und sind nicht routinem aig losbare Aufgaben. Solches Probleml osen geh ort zur allgemeinen Bildung. Gerade entdeckender Unterricht (nach Bruner) fordert, dass Sch uler ein Problem analysieren, prozessorientierte Lernhilfen bekommen, Hypothesen und L osungen formulieren, die von der Lehrperson uberpr uft werden. Nach Edelmann (1986) sind Probleme optimal, die sich durch Anwenden von Strategien oder systemisches Denken l osen lassen (vgl. (Hubwieser 2007a, S. 69), (Diethelm 2007, S. 48)). Hubwieser betont, dass strikte Problemorientierung den Informatikunterricht vor Produktschulungscharakter verschont (Hubwieser 2007a, S. 69). Informatikunterricht ist deshalb so geeignet fur Problemorientierung, weil Probleml osestrategien von den Sch ulern nicht nur angewendet, sondern f ur die Probleml osung mit Informatiksystemen auch zu formalisieren sind (Schubert und Schwill 2004). Dies gilt hinsichtlich der Kompetenzentwicklung mit Informatiksystemen nicht nur f ur die Programmentwicklung, sondern auch f ur den Anwendungsprozess. Uberg ange zwischen dem entdeckenden Lernen und dem Experimentieren der Sch uler sind ieend (Meyer 2006, S. 317). Wagenschein (1991) stellt in seiner Verallgemeinerung der bildungstheoretischen Didaktik das Exemplarische f ur entdeckendes Lernen in den Vordergrund, da es als Spiegel des Allgemeinen dient (Jank und Meyer 2002, S. 37). Der typische Ablauf von Unterrichtsexperimenten in Anlehnung an Meyer (Meyer 2006, S. 318) ist: 1. Beobachtung eines Ph anomens (z. B. ein unerwartetes Verhalten eines Informatiksystems), 2. Formulierung einer klaren Fragestellung durch Lehrer und Sch uler (Hypothesen zur Erkl arung der Beobachtung), 3. Konzeption eines Experiments zur Uberpr ufung der Hypothese durch Lehrer und / oder Schuler, 4. Durchf uhrung des Experiments und Dokumentation der Ergebnisse, 5. Best atigung oder Widerlegung der Hypothesen durch Interpretation der Ergebnisse und des Versuchsverlaufs, 6. Diskussion um Kontrollversuche, Varianten, technische und soziale Folgen des Einsatzes von Informatiksystemen. Schubert und Schwill halten fest, dass die wesentlichen Sch ulertatigkeiten das Planen des Experiments, das Manipulieren und das Beobachten des Untersuchungsgegenstands sind (Schubert und Schwill 2004, S. 240). Auerdem ist eine Auswertung des Experiments vorzunehmen. Paul (1994) unterscheidet bei der Exploration zwischen den Interaktionsformen Erkundung und Experiment. Durch erkundende Interaktion verschat sich ein Lernender einen Uberblick uber das Leistungsspektrum des Informatiksystems. In Experimenten uberpr uft der Lernende seine Hypothesen uber die Wirkungsweise von Funktionen. In Unterrichtsexperimenten k onnen sowohl Erkundung als auch Experiment nach Paul zusammengefasst werden, denn die Erkundung nach Paul liefert Beobachtungen, die Motivation f ur ein hypothesengeleitetes Vorgehen sein k onnen. Beobachtungsaufgaben kommt also eine wichtige Rolle in den Experimenten f ur Kompetenzentwicklung mit Informatiksystemen zu:5.5. Entwicklung von Vorgehensweisen zur Erkundung von Informatiksystemen 149 "Lernen durch Beobachtung bedeutet aktive Auseinandersetzung mit dem Lerngegenstand. Daher muss der Lernende aufgefordert und angeleitet werden, mitzudenken, die T atigkeit des Vorbilds in Bestandteile aufzugliedern und gleichzeitig deren Zusammenh ange zu erkennen, die gesehene T atigkeit vorstellungsm aig mitzuvollziehen" (Hacker und Skell 1993, S. 229). So verstandene Beobachtungsaufgaben k onnen zur Motivation als Vorstufe eines Experimentiervorganges zum systematischen Erkunden von Informatiksystemen genutzt werden. Sch ulern muss es beim Experimentieren gelingen, Hypothesen uber fachliche Zusammenh ange aufzustellen und diese experimentell zu uberpr ufen. Interaktionen eines Sch ulers mit dem Informatiksystem sind Ausgangspunkt f ur ihn, Hypothesen uber den Lerngegenstand, das Informatiksystem, zu bilden und diese in Experimenten (Interaktionen mit dem System) zu uberpr ufen (vgl. Paul 1994). Ziel von Unterrichtsexperimenten ist auch die F orderung der Methodenkompetenz der Sch uler zum Planen von Abl aufen. Sie bezieht sich nicht auf den Kompetenzbegri nach Weinert (Abschnitt 2.1). Man unterscheidet Unterrichtsexperimente nach den Ausf uhrenden in Lehrerund Schulerexperiment, wobei ersteres oft eine Demonstration ist (Meyer 2006, S. 316f). Solches Experimentieren im Unterricht wird gefordert, um systematische Vorgehensweisen zu lernen und Beobachtungsf ahigkeit zu schulen. Dar uber hinaus werden sie nach ihrem Ziel unterschieden: Experimente zur systematischen Erkundung von Informatiksystemen k onnen beispielsweise als Einfuhrungsexperiment zur Motivation dienen. Oder sie sind Entdeckungst atigkeiten zur Erkundung von Beziehungen und Strukturen bzw. Best atigungsexperimente zur Uberpr ufung von Hypothesen uber gesetzm aige Beziehungen und Strukturen (vgl. auch Steinkamp 1999, S. 38). In Anlehnung an Meyer (2006) werden im Folgenden m ogliche Lernziele f ur Kompetenzentwicklung mit Informatiksystemen skizziert, die Sch uler durch systematisches Erkunden von Informatiksystemen durch Unterrichtsexperimente erreichen k onnen. Kognitive und manuelle Lernziele sind, dass die Sch uler lernen k onnen, Systemverhalten genau zu beobachten, Beobachtungsresultate zu klassizieren und sie Oberbegrien zuzuordnen, Vorhersagen uber den mutmalichen Experimentierablauf zu formulieren und die Prognosen mit dem tats achlichen Verlauf zu vergleichen und Schlussfolgerungen auf vernetzte fundamentale Ideen aus den Beobachtungsergebnissen zu ziehen. Des Weiteren lernen sie, die im Experiment ermittelten Daten zu interpretieren, abhangige Variablen zu unterscheiden und Problemstellungen zu operationalisieren, also so zu formulieren, dass sie durch Messoperationen einer Uberpr ufung zug anglich werden (Meyer 2006, S. 319). Als aektiv-emotionale Lernziele k onnen die Sch uler dar uber hinaus ihre Neugierde befriedigen und lernen, sich bei der Erkundung zu konzentrieren (Meyer 2006, S. 319). Diese Lernziele sind wichtig zur Kompetenzentwicklung, da Einstellungen und Bereitschaften nicht zu vernachl assigen sind (Abschnitt 2.1). Die Lernf orderlichkeit des Experimentierens wird belegt durch nachfolgende Aussage: "Das selbstt atige oder auch vom Lehrer locker geleitete Vorbereiten, Durchf uhren und Auswerten eines Experiments ist auf jeden Fall eine der besten denkbaren M oglichkeiten, die methodische Handlungskompetenz der Sch uler zu entwickeln, und zwar sowohl in kognitiver als auch in sozialer und motorisch-manueller Hinsicht" (Meyer 2006, S. 318). Steinkamp entwickelte in einer Diplomarbeit Ans atze zur Ubertragung des Experimentbegris aus dem naturwissenschaftlichen und technischen Unterricht in die Informatik. Darin kommt Steinkamp zu dem Ergebnis, dass nachfolgend aufgez ahlte Experimente im Informatikunterricht nicht hinl anglich vertreten sind: "Entdeckende und erkundende Experimente Unter diesen Begri fallen Experimente, deren Durchf uhrungsund Beobachtungsaufgaben zu Hypothesen uber Eigenschaften und Funktionsm oglichkeiten des Untersuchungsobjekts f uhren sollen. [. . . ] prufende Experimente Bei diesen Experimenten bildet eine Hypothese den Ausgangspunkt, die durch das Experiment erhartet oder widerlegt werden soll. In diesen Bereich fallen auch g utepr ufende Experimente, die zu theoretischen Absch atzungen praktische Belege liefern k onnen [. . . ]1505. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung strukturermittelnde Experimente Hierbei stehen Erkenntnisse uber das Zusammenspiel mehrerer Komponenten im Mittelpunkt des Interesses" (Steinkamp 1999, S. 38). Alle genannten Ans atze sind Unterrichtsexperimente nach (Meyer 2006). Brinda zieht ein positives Fazit zu dem von Steinkamp entwickelten Konzept der Informatik-Experimente und dessen Beitrag zum Erkennen von Wirkprinzipien von Informatiksystemen: "Durch die Arbeiten von Steinkamp und durch die erfolgreiche Erprobung ist ein exemplarischer Nachweis daf ur gegeben, dass ein handlungsorientierter Zugang zu Wirkprinzipien von Informatiksystemen uber Informatik-Experimente m oglich ist" (Brinda 2004a, S. 118). Bezug nehmend auf Bunge (1967) betont Brinda f ur Explorationsmodule, dass die Experimente der Lernenden qualitativ sind: "Bei diesen Experimenten geht es um das Entdecken, Erkunden, Pr ufen von Hypothesen und die Ermittlung von Strukturen (vgl. 5.3.1.2) und nicht um das Messen bestimmter Variablen" (Brinda 2004a, S. 153). Gleiches gilt f ur die systematische Erkundung eines Informatiksystems. Indem die Lernenden Informatiksysteme, die nach fachdidaktischen Kriterien gestaltet sind, systematisch durch Interaktion erkunden, k onnen sie ihre Vorstellungen in Form von Hypothesen mit Experimenten auf Richtigkeit pr ufen. Die Lernenden k onnen sich bei der Erkundung an ihren Hypothesen mit Bezug zu fundamentalen Ideen der Informatik bzw. Leitfragen orientieren, die als Beobachtungsaufgaben durch die Lehrperson vorgegeben sind. Bei der Vorgehensweise zur systematischen Erkundung ist es wichtig, die Strategie des Sch ulers zur Analyse von Informatiksystemen dahingehend zu lenken, dass er planvoll vorgeht, geeignete Mittel nutzt und w ahlt, Hilfen umsetzt, seine Ergebnisse reektiert und seinen L osungsweg gegebenenfalls korrigiert. Die Mensch-Maschine-Schnittstelle, an der Informatiksysteme erkundet werden k onnen, ist deren meist grasche Benutzungsober ache. Sie besteht in der Regel aus drei Komponenten: der Pr asentation zur Darstellung von Daten, der Interaktion, durch die Dialogfunktionen bereitgestellt werden, und die Kontrolle zur Datenanalyse und Ausf uhrung von Programmen und Dialogbefehlen (Claus und Schwill 2006, S. 89). Schubert und Schwill fordern, dass Sch uler bei der Interaktion mit Informatiksystemen folgende Stufen der Dialogarbeit durchlaufen: Die Sch uler k onnen Ausgaben des Informatiksystems richtig interpretieren und vorhersehen, die Eingaben zur Steuerung der Ausgaben gezielt vornehmen sowie die jeweiligen Ergebnisse im Anwendungskontext bewerten und verantwortlich nutzen (Schubert und Schwill 2004, S. 231f). Dabei ist die Stufung nicht am Informatiksystem, sondern an den kognitiven Prozessen des Sch ulers orientiert. Die Ziele der Experimente mit Informatiksystemen k onnen in zwei Bereiche unterteilt werden: den prim aren, fachlichen und den sekund aren, f acher ubergreifenden. Der fachliche Anteil des Experiments zur systematischen Erkundung kann durch vernetzte fundamentale Ideen der Informatik erfolgen, die der Grund f ur ein spezisches Systemverhalten sind und ihren Hauptfunktionen zugrunde liegen (Denning 2007). F acher ubergreifend ist das Erkennen, das Informatiksysteme, die im Alltag auftreten, systematisch erkundet werden k onnen. Dabei erfahren die Lernenden, dass Informatiksysteme oft unerwartetes Verhalten an den Tag legen (Abschnitt 5.5.3). Wenn dies so ist, m ussen sie Hypothesen f ur den Grund daf ur aufstellen k onnen und ggf. Fehlersuche betreiben. Ziel ist, Informatiksysteme und deren Funktionalit at zu hinterfragen. Dies geht nur, wenn die Lernenden verschiedene Sichtweisen auf Informatiksysteme verstanden haben und diese miteinander kombinieren k onnen. Ein weiteres Lernziel beim Experimentieren ist Teamarbeit, meist in Form von Partnerarbeit, um die Kommunikation uber Informatiksysteme zu f ordern. Daruber hinaus soll das strukturierte und planerische Denken gef ordert werden, was sich insbesondere durch Uberpr ufung aller Sonderf alle auszeichnet. Auerdem k onnen die Lernenden eine eigene Dokumentation des Informatiksystems erstellen, also die Entstehung von Modellen selbst nachvollziehen und eigene konstruieren. Im Folgenden wird das Experimentieren zur Analyse des nach auen sichtbaren Verhaltens und der inneren Struktur von Informatiksystemen (Abschnitt 5.5.3 und Abschnitt 5.5.4) beschrieben.5.5. Entwicklung von Vorgehensweisen zur Erkundung von Informatiksystemen 151 5.5.3 Vorgehensweise zur systematischen Erkundung des nach auen sichtbaren Verhaltens In der Analyse des Forschungsstands wurden Fehler als Mittel identiziert, Verhalten und Struktur von Informatiksystemen miteinander zu verbinden ( !Methodik 3: Verbindung von Verhalten und Struktur; S. 101; (Eberle 1996); (Hubwieser 2007a)). Nach Hubwieser erm oglichen es Fehler, die Umgebung der Systeme und ihre innere Struktur zu durchleuchten (Hubwieser 2007a, S. 47). Fehler und Irrt umer bei der Anwendung eines Systems sind nach Dutke Ereignisse, die Schulern die Grenzen ihres Wissens bzw. ihres mentalen Modells aufzeigen. Dutke beschreibt und evaluiert die Wirksamkeit explorierenden Lernens in der Mensch-Computer-Interaktion als Mittel zum Aufbau mentaler Modelle: "Dabei wird kaum beachtet, da Bedienungsfehler technischer Systeme zun achst nur Regelverst oe darstellen, Verst oe gegen artizielle, von Menschen mehr oder weniger willk urlich konstruierten Regeln" (Dutke 1994, S. 154). Die Vorwegnahme von Fehlern und unerwartetem Verhalten im Lehr-Lernprozess ,immunisiert' gegen Stress in Fehlersituationen (Dutke 1994, S. 155). Die systematische Erkundung bedarf jedoch des Vorwissens uber das System zur geeigneten Wahl eines Ziels (Dutke 1994, S. 156). Daruber hinaus erleichtert das Beherrschen einfacher Funktionen das Erlernen komplexerer Funktionen, wenn das System konsistent ist (Dutke 1994, S. 159). Da bei Exploration dieser Lernweg nicht vorausgesetzt werden kann, bietet sich eine Vorgabe der Schrittfolge bei ersten Erkundungen an. Fehlfunktionen sind bei der nachfolgenden systematischen Erkundung handlungsleitend. Ausgangspunkt ist der Erfahrungsbereich und der Alltag der Sch uler. Im Folgenden werden zwei Vorgehensweisen zur systematischen Erkundung von Informatiksystemen entwickelt. In Anlehnung an den Black-Box-Test bezieht sich die erste Vorgehensweise vornehmlich auf das nach auen sichtbare Verhalten des Informatiksystems. Die zweite Vorgehensweise dient der Analyse der Systemkomponenten und geht davon aus, dass beispielsweise der Quelltext eines Programms vorliegt. In Anlehnung an die von Anderson und Krathwohl uberarbeitete Bloom'sche Taxonomie (Anderson und Krathwohl 2001) wurde eine aus acht Schritten bestehende Experimentierabfolge entwickelt, die alle sechs kognitiven Prozesse anspricht: Erinnern, Verstehen, Anwenden, Analysieren, Bewerten und (Er)schaen (vgl. (Schobel und Holdt 2004), (Fuller et al. 2007); Abschnitt 2.1.5). Eine Vertiefung der Analyse der informatischen Konzepte und deren Sonderf alle f uhrt zu der Erweiterung auf acht Schritte. Die Sch uler sollen das nach auen sichtbare Verhalten eines Informatiksystems systematisch erkunden und alle Zwischenergebnisse notieren. Bei der nachfolgenden Vorgehensweise sind in Klammern der entsprechende kognitive Prozess und die Wissensdimension nach Anderson und Krathwohl (2001) angegeben: 1. Wie lautet der Name des Systems? (Erinnern; Faktenwissen) 2. Beschreiben Sie die Benutzungsober ache. (Verstehen; Faktenwissen) 3. Welche Funktionalit aten vermuten Sie unter Ber ucksichtigung der vorherigen Beobachtungen? (Verstehen; Begriiches Wissen) 4. Welche Beziehungen bestehen zwischen den Elementen? (Verstehen; Faktenwissen) 5. Welche informatischen Konzepte wurden eingesetzt, um die Funktionalit at zu erreichen? (Analysieren; Begriiches Wissen) 6. Analysieren Sie das Programm, indem Sie Sonderf alle ermitteln und mit ihnen experimentieren. (Analysieren und Anwenden; Begriiches Wissen) 7. Werten Sie Fehler und unerwartetes Verhalten aus { auch mit Blick auf die Sonderf alle der Konzepte. (Bewerten; Begriiches Wissen)1525. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 8. Hypothetischer Einsatz des Systems { Wie w urde sich das Programm in anderen (realen, komplexeren) Situationen verhalten? ((Er)schaen; Faktenwissen) Die Schrittfolge ergibt damit ein Probleml oseschema ((Kopp und Mandl 2006, S. 131f); vgl. S. 135). Durch Schritt 3 erfolgt ein Bezug zu den Hauptfunktionen von Informatiksystemen nach Denning (2007), indem die Funktionalit at des Systems beobachtet wird. Der Bezug zu informatischen Konzepten (Schritt 5) und deren Sonderf alle (Schritt 6) erm oglicht die Klassikation des Systemverhaltens anhand typischer F alle und Sonderf alle. Gleichzeitig bilden sie den Ankn upfungspunkt zu vernetzten fundamentalen Ideen der Informatik und zu den Wissensrepr asentationen (Abschnitt 5.4). Anhand der Hauptfunktionen von Informatiksystemen ist auerdem eine Diskussion uber Informatiksysteme und Gesellschaft strukturierbar (Schritt 8). Damit bezieht die Aufgabe sowohl die problembezogene Ebene (den Zweck des Systems) und die modellbezogene Ebene mit ein (Modellbildung). Auch wird eine (nicht formale) Verikation vorgenommen (vgl. Abschnitt 4.2.1). Bei der Untersuchung der Informatiksysteme auf Fehler sind Sonderf alle der Konzepte und un ubliche Eingaben ein Ansatzpunkt, um das Systemverhalten zu klassizieren. Zum Beispiel k onnen zu groe Zahlen eingegeben und Datenstrukturen stark gefullt oder uberpr uft werden, ob eine Operation auf einer leeren Liste ebenso funktioniert wie auf einer nicht-leeren Liste. Diese Vorgehensweise eignet sich f ur Partnerund Teamarbeit, denn soll f ur ein Systemverhalten eine Erkl arung gefunden werden, kann die Lerngruppe vorab ein Brainstorming durchf uhren. So k onnen in der Gruppe Beispiele diskutiert werden, die ggf. durch den Lehrer vorgegeben werden. Dies k onnen systematische Fehler sein, d. h. Fehler, die f ur eine Klasse von Eingaben immer zu erwarten sind. Beispiele f ur Fehler von Informatiksystemen aus Tageszeitungen k onnen f ur die Auswirkungen sensibilisieren (Abschnitt 6.4). Dafur ist es wichtig, Elemente des Systems, insbesondere Objekte, zu identizieren und zu benennen. Diese ersten Objektkandidaten lassen R uckschl usse auf Klassen zu. Analog zum objektorientierten Entwurf k onnen statt Klassendiagrammen auch CRC-Karten (Abschnitt 4.2.3) eingesetzt werden, die statt Verantwortungen von und Beziehungen zwischen Klassen nun Systemkomponenten und deren Verantwortungen und Beziehungen untereinander beschreiben. Der letzte Schritt der systematischen Vorgehensweise (Schritt 8) spricht den Aspekt der Blindheit eines Systems an, also speziell die Grenzen des Systems und Aufgaben, f ur die es nicht vorgesehen ist (vgl. Hubwieser 2007a, S. 47). Bei der Betrachtung der Vorgehensweise f allt auf, dass diese Art der systematischen Erkundung insbesondere dem nach auen sichtbaren Verhalten zuzuordnen ist, aber durch Hypothesenpr ufung hinsichtlich zugrunde liegender fundamentaler Ideen auch ein Bezug zur inneren Struktur des Informatiksystems besteht. 5.5.4 Vorgehensweise zur systematischen Erkundung der inneren Struktur eines Informatiksystems In der Fachwissenschaft Informatik wird der Begri des White-Box-Tests (auch: Glass-Box-Test) genutzt, um einzelne Komponenten eines Systems bei oen liegendem Quelltext des Systems zu testen. Analog dazu wird im Folgenden eine Vorgehensweise zur Analyse des Systems bei vorliegender Beschreibung der inneren Struktur f ur die Schulinformatik angegeben. Eine Abbildung der Vorgehensweisen f ur einen White-Box-Test auf die Schulinformatik ist damit nicht intendiert. Die Sch uler sollen die innere Struktur eines Informatiksystems anhand des Quelltextes systematisch erkunden und alle Zwischenergebnisse notieren. Bei der nachfolgenden Vorgehensweise sind in Klammern der entsprechende kognitive Prozess und die Wissensdimension nach Anderson und Krathwohl (2001) angegeben: 1. Wie lautet der Name des Projektes und der beteiligten Dateien? (Erinnern; Faktenwissen) 2. Identizieren Sie beteiligte und uber ussige Klassen durch Beziehungen im Quellcode. (Verstehen; Faktenwissen)5.5. Entwicklung von Vorgehensweisen zur Erkundung von Informatiksystemen 153 3. Welche Operationen und Attribute gibt es? Nutzen Sie zur Analyse Kommentare im Quelltext. (Verstehen; Faktenwissen) 4. Erstellen Sie ein Klassendiagramm, dass Ihre Ergebnisse beinhaltet. (Anwenden; Begriiches Wissen) 5. Welche informatischen Konzepte nden Sie in diesem Informatiksystem? Analysieren Sie auch die Abl aufe. (Analysieren; Begriiches Wissen) 6. Wie werden Sonderf alle behandelt? (Analysieren; Begriiches Wissen) 7. Wo liegen Fehlerursachen? (Bewerten; Begriiches Wissen) 8. Bewertung des Systems: Sind einfache und elegante Strukturen genutzt worden, die f ur andere Programme wieder genutzt werden k onnen? (Bewerten; Begriiches Wissen) 9. Modikation des Systems ((Er)schaen; Begriiches Wissen / Verfahrensorientiertes Wissen) Analog kann eine Vorgehensweise zur Analyse der Systemkomponenten anhand vorgegebener Diagramme statt Quelltextanalyse angegeben werden. Die ersten Schritte entsprechen dem Reverse Engineering. Dabei werden gestaltende Ideen und abstrakte Konzepte, speziell Strukturen, Nebenl augkeit sowie Datentypen analysiert und in einer (Re-) Dokumentation zusammengefasst (Claus und Schwill 2006, S. 582), ohne auf Implementierungsdetails einzugehen: "Reverse engineering generally involves extracting design artefacts and building or synthesizing abstractions that are less implementation-dependent" (Chikofsky und Cross 1990, S. 15). Ziel beim Reverse Engineering in der Fachwissenschaft ist, in einem ersten Schritt "die Bedeutung der existierenden Software [zu] ermitteln (, Software-Verstehen '), was nicht entscheidbar ist und daher generell nicht automatisiert werden kann"(Claus und Schwill 2006, S. 570; Hervorh. im Original). Die Modikation des Informatiksystems f ordert das Verstehen durch Variantenbildung, bei der das Bekannte variiert und auf ahnlichem Weg wie zuvor gel ost wird. Die theoretisch, anhand des Experimentiervorgangs (Meyer 2006) und kognitiver Stufen (Anderson und Krathwohl 2001) begrundeten Vorgehensweisen sind im unterrichtlichen Geschehen auf ihre Tragf ahigkeit zu pr ufen. Ziel ist, dass die Erkenntnisse aus einem Experiment handlungsleitend f ur die Anwendung von Informatiksystemen sind. Als methodische Variation k onnen unterschiedliche Informatiksysteme in Form eines Unterrichtszirkels im Unterricht von den Sch ulern erkundet werden. Dazu werden an mehreren Stationen Informatiksysteme oder Modelle von Informatiksystemen platziert, die in vorgegebener Zeit von den Sch ulern nach den bekannten Vorgehensweisen erkundet werden m ussen. Bei dieser Unterrichtsmethode spricht man vom Unterrichtsbzw. Lernzirkel oder auch vom Stationenlernen. Dabei k onnen je nach Aufgabenstellung wiederum unterschiedliche Repr asentationsformen von Informatiksystemen vorliegen, sei es als UML-Diagramm, Animation, simuliertes System oder aktives Informatiksystem. Insbesondere zum Abschluss einer Unterrichtsreihe lassen sich Kompetenzen an bisher nicht untersuchten Informatiksystemen wie Robotern oder Textverarbeitungssystemen uberpr ufen. Die Sch uler arbeiten weitgehend selbstt atig. Nachteil ist, dass viele Materialien erstellt werden m ussen und ggf. viele Rechner zum Einsatz kommen. M oglichkeiten der Selbstkontrolle sind f ur Sch uler in dieser Methode besonders wichtig. Der Unterrichtszirkel kann in Pichtund Wahlstationen aufgeteilt sein, um Binnendierenzierung vorzunehmen.1545. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 5.5.5 Zusammenfassung und Einordnung der systematischen Erkundung in das Unterrichtsmodell Kritische Betrachtung der systemanalytischen Vorgehensweise Der systemanalytische Top-down-Zugang zu Informatiksystemen wurde gew ahlt, da er den Blick auf das System und den Blick in das System verbindet. Implementierungsaspekte k onnen weitgehend ausgeblendet werden. Bei der Dekonstruktion von Informatiksystemen wurde jedoch kritisch angemerkt, dass aus dem Produkt nicht mehr eindeutig R uckschl usse auf Entwurfsentscheidungen gezogen werden k onnen. Es l asst viele Alternativl osungen zu (Abschnitt 4.2.3). Gleiches gilt { im Prinzip { f ur die vorgestellten Vorgehensweisen der systematischen Erkundung. Ihr Vorteil ist in der Einbindung in das Unterrichtsmodell zu sehen. Ziel ist es, uber das Experimentieren erst einzelne, dann vernetzte fundamentale Ideen der Informatik in einem Informatiksystem zu entdecken. Dadurch, dass ein oder mehrere ausgew ahlte Entwurfsmuster Grundlage einer entsprechend gestalteten lernf orderlichen Software sind (Abschnitt 5.6), besteht das Potential, auf die fundamentalen Ideen zu fokussieren. Indem zuerst das nach auen sichtbare Verhalten des Systems als Black-box erkundet wird und anschlieend der Quelltext bzw. die Klassenstruktur zur Analyse der inneren Struktur hinzu kommt, kann eine Korrektur der kognitiven Modelle der Sch uler erfolgen. Sie f uhrt implizit oder explizit zu den Entwurfsmustern bzw. fundamentalen Ideen. Eine nicht zu vernachl assigende Schwierigkeit liegt in der Sch ulermotivation, das Experiment durchzuf uhren. Die Sch uler m ussen erfahren, dass das systematische Vorgehen ihnen einen Vorteil bietet gegen uber einer Versuch-Irrtum-Strategie. Um dies zu erreichen, wurden in den Unterrichtserprobungen (Kapitel 6 und 8) zum einen unterschiedliche Varianten eines Programms eingesetzt, deren Verhalten sich in besonderen Situationen unterschied. Als Beispiel ist das Programm einer Arztpraxis mit dem Iteratormuster zu nennen, in dem Notfallpatienten in den Varianten unterschiedlich in die Patientenliste eingef ugt wurden (Kapitel 6). Die Variantenbildung war durch die gleich bleibende innere Klassenstruktur des Programms f ur die Lehrperson ohne groen Aufwand zu erstellen. Zum anderen ist die Problemgr oe relevant. So konnte ein Programm um ein neues Entwurfsmuster erweitert werden. In der systematischen Erkundung wurde bekanntes Verhalten aus der vorherigen Version, dies war Zugriskontrolle mit dem Proxymuster, identiziert und von dem neuen Verhalten abgegrenzt. Letzteres war durch die Identikation neuer Zust ande m oglich, die durch das Zustandsmuster hinzugef ugt wurden (Kapitel 8). Da Unterrichtsexperimente sowohl Aspekte von Instruktion und Konstruktion kombinieren, bieten sie die M oglichkeit, Informatiksysteme und fundamentale Ideen nachhaltig zu verstehen. Die konkrete Vorgabe einer Schrittfolge zur Erkundung von Informatiksystemen ber ucksichtigt das zur Kompetenzentwicklung notwendige individuelle Lern-und Leistungsverm ogen von Sch ulern. Insbesondere k onnen auch lernschw achere Sch uler Erfolge erzielen. Durch die Beobachtung unerwarteten Verhaltens bleiben den Sch ulern Freiheiten, eigene L osungswege zu gehen, die aber durch die Orientierung am Unterrichtsexperiment nicht beliebig sind. Die Schritte erlauben es daruber hinaus, Zwischenl osungen als Teill osungen anzuerkennen. Nachdem die Sch uler erste Erfahrungen mit der systematischen Erkundungen gemacht haben, kann das Unterrichtsexperiment als oenere Aufgabe gestellt werden, indem die Kleinschrittigkeit verringert wird. Oene Aufgaben verlangen von den Sch ulern eine h ohere Flexibilit at beim L osen der Aufgaben. Im Folgenden wird daher das Beispiel Zugriskontrolle wieder aufgegrien, um die Verkn upfung der systematischen Analyse mit den Wissensrepr asentationen f ur vernetzte fundamentale Ideen zu illustrieren. Systematische Erkundung eines Programms am Beispiel Zugriskontrolle: Rolle der Wissensrepr asentationen Die vorgestellten Vorgehensweisen zur systematischen Erkundung des nach auen sichtbaren Verhaltens und der inneren Struktur von Informatiksystemen sind durch theoretische Uberlegungen5.6. Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 155 zu Unterrichtsexperimenten und zu kognitiven Prozessen begr undet. Ihr Potential f ur Kompetenzentwicklung mit Informatiksystemen liegt jedoch in der Kombination mit den in Abschnitt 5.4 vorgestellten Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik. Ausgewahlte Entwurfsmuster f ordern die Kompetenzentwicklung mit Informatiksystemen. Diese Entwurfsmuster k onnen genutzt werden, um lernf orderliche Software zu gestalten, die dann anhand der beschriebenen Vorgehensweisen systematisch erkundet werden k onnen (Abschnitt 5.6). F ur Kompetenzentwicklung mit Informatiksystemen ist es wichtig, dass ihr Verhalten klassiziert wird (Abschnitt 5.5.1), beispielsweise durch Aquivalenzklassen hinsichtlich Einund Ausgabe. Zur Beschreibung der Aquivalenzklassen sind insbesondere Sonderf alle zu betrachten, die eigene Klassen bilden. Eine Klassikation des Verhaltens ist dann besonders einfach, wenn fundamentale Ideen identizierbar sind. Beispielsweise lassen sich bei Rekursion bzw. Baumstrukturen (Kompositummuster), Listenstrukturen (Iteratormuster) und Zugriskontrolle (Proxymuster) anhand der Datenstrukturen oder der Unterscheidung von Zugrisrechten ( Aquivalenz-) Klassen des Verhaltens angeben. Dar uber hinaus bieten Entwurfsmuster besonders elegante Beschreibungen der inneren Struktur, die ein vernetztes Denken erfordern und lernf orderlich sind. Fur das Beispiel zur Zugriskontrolle (Abschnitt 5.4) bedeutet dies { f ur den Fall, dass das Proxymuster als Wissensrepr asentation die strukturelle Grundlage eines untersuchten Programms bildet {, dass die fundamentalen Ideen per Denition in der Wissensrepr asentation und damit in der Software vorhanden sind. Sie unterst utzen Sch uler und Lehrperson, unterschiedliche F alle im Systemverhalten zu klassizieren. So k onnen beim Proxymuster unterschiedliche Zugrisrechte identiziert werden. Aufgrund des Lebensweltbezugs der Entwurfsmuster ( !Kriterium 6: Lebensweltbezug; S. 123) ist es f ur Sch uleruber Analogien leichter m oglich, Hypothesen zu bilden, z. B. zu unterschiedlichen Zugrisrechten, die uberpr uft werden. Darauf aufbauend sind Hypothesen zur inneren Struktur zu pr ufen. Zusammenh ange mit anderen Entwurfsmustern ( ! Kriterium 4: Zusammenh ange mit anderen Strukturmodellen; S. 123) zeigen Ankn upfungspunkte zur Erweiterung der lernf orderlichen Software, so dass Ergebnisse von Experimenten vor und nach der Erweiterung durch Sch uler verglichen werden k onnen. Zugriskontrolle bietet hinsichtlich der aktuellen politischen Debatte um Datenschutzrechte ein groes Potenzial, Auswirkungen in der Gesellschaft zu diskutieren. Eine ausf uhrlichere Diskussion der systematischen Erkundung wird in Abschnitt 5.6.2 zur Lernsoftware vorgenommen. Im Folgenden werden deshalb Gestaltungshinweise f ur Lernsoftware basierend auf Wissensrepr asentationen angegeben (Abschnitt 5.6), die Sch uler anhand der vorgestellten Vorgehensweisen systematisch erkunden k onnen. Im Laufe des Forschungsprojekts wurde die systematische Erkundung von Informatiksystemen in zwei Unterrichtserprobungen (Kapitel 6 und 8) sowie mittels Laut-Denken in einer Laborstudie evaluiert und jeweils anschlieend weiterentwickelt (Kapitel 7). 5.6 Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 5.6.1 Anforderungen an lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen Ziel dieses Abschnitts ist es, Lernsoftware zu beschreiben, die vernetzte fundamentale Ideen in Wissensrepr asentationen und Sch uleraktivit aten zur systematischen Erkundung sinnvoll miteinander verkn upft. Das Ziel"Kompetenzentwicklung mit Informatiksystemen" erfordert lernf orderlich gestaltete Software. Das beinhaltet, dass die Charakteristika von Informatiksystemen { nach auen sichtbares Verhalten, innere Struktur und Implementierungsaspekte { in einem Programm zusammenhangend, beispielsweise durch Sichtenwechsel, und konsistent repr asentiert werden. Damit wird die didaktische Doppelfunktion von Informatiksystemen als Bildungsmedium und Bildungsgegenstand genutzt.1565. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Vorteil eines im Unterricht eingesetzten, konkreten Informatiksystems ist die Situiertheit (vgl. Hubwieser 2007a, S. 10). Die Sch uler gehen unmittelbar mit dem System als Gegenstand der Aufgabe um und sind mit dem konkreten Fall befasst. Auerdem gelingt soziale Einbettung, da uberwiegend in Teams gearbeitet wird. Gerade die Anschlussm oglichkeiten durch die Anwendung von Modellierung, aber auch Programmierung im Sinne von Modikation und systematischem Testen unter Einbezug des problemorientierten Lernens sind lernf orderlich. Systematische Erkundung und systematisches Testen der Informatiksysteme lassen sich oft so gestalten, dass die Lernenden ihr Arbeitstempo selbst bestimmen (vgl. Wiesner und Brinda 2007). Ein ansprechender Kontext des Systems ist daf ur unabdingbar. Folgende Arten Lernsoftware werden f ur das Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung eingesetzt: 1. Informatiksysteme, deren innere Struktur durch Entwurfsmuster als Wissensrepr asentation fur vernetzte fundamentale Ideen bestimmt ist. In Abschnitt 5.6.2 wird auf diese Art Lernsoftware weiter eingegangen. 2. Lernsoftware, die fundamentale Ideen der Informatik unter Nutzung von Entwurfsmustern als Wissensrepr asentation thematisiert. Ein geeigneter Lebensweltkontext hinsichtlich der Basiskompetenzen zu Informatiksystemen ist in der Lernsoftware darzustellen. Beispiel ist die Lernsoftware Pattern Park (Abschnitt 5.6.3). Daruber hinaus ist Lernsoftware zu Verhalten und innerer Struktur von Informatiksystemen denkbar, die die beiden oben genannten Varianten kombiniert und in der sowohl eine Produktsicht auf ein regul ares Informatiksystem als auch eine Parametersicht mit Zugri auf Parameter von Entwurfsmustern existieren. Parameter anderungen m ussen dann zur F orderung der Basiskompetenzen in ge andertem Systemverhalten resultieren und weiteres Experimentieren erlauben. Weyer (2007b) erarbeitete im Rahmen einer Diplomarbeit einen Entwurf solcher Lernsoftware (Abschnitt 7.3.2). Grundlage der Entwicklung von Lernsoftware sind Uberlegungen zu kognitiven Barrieren und Fehlvorstellungen hinsichtlich des Lerngegenstands, die mit Hilfe der Lernsoftware abgebaut bzw. korrigiert werden sollen. F ur beide oben genannten Arten Software wird exemplarisch Zugriskontrolle mit dem Proxymuster betrachtet, da es sowohl in der Lernsoftware Pattern Park umgesetzt wurde als auch Grundlage kleiner Programme ist, die im unterrichtlichen Geschehen eingesetzt wurden (Kapitel 6 und 8). Kognitive Barrieren und Fehlvorstellungen zur Zugriskontrolle nden sich in Abschnitt 5.4.4. 5.6.2 Entwurfsmuster als strukturelle Grundlage lernf orderlicher Software Verkn upfung von vernetzten fundamentalen Ideen in Entwurfsmustern mit der systematischen Erkundung eines Programms Es wurden Kriterien angegeben, nach denen Entwurfsmuster ausgew ahlt werden k onnen, um den Bildungsprozess zu Informatiksystemen positiv zu beeinussen (Abschnitt 5.4). Ziel ist, dass die positiven Eigenschaften der fachdidaktisch ausgew ahlten Entwurfsmuster dadurch f ur den Unterricht nutzbar gemacht werden, dass die Muster die innere Struktur von Software bilden. Einfach zu erstellen sind kleine Programme, in denen ein Strukturmodell explizit und unverf alscht gestaltgebend ist. Der Funktionsumfang solcher Systeme kann erkundet und mit deren innerer Struktur in Verbindung gesetzt werden. Neben der direkten Beeinussung des Systemverhaltens, die sich in der Benutzungsober ache widerspiegelt, ist durch die modulare Entwurfsmusterstruktur die leichte Zug anglichkeit zu Programmteilen f ur deren Modikation gegeben (vgl. Lehmann 1993, S. 135). Dies ist z. B. beim Proxymuster durch Unterscheidung der Klassen"Proxy" und "RealesSubjekt" gegeben (Abbildungen 5.7 und 5.8).5.6. Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 157 Abbildung 5.7: Umsetzung des Programms zur Zugriskontrolle in Delphi und Java; Information bzw. Objekt korrespondieren zur Klasse"RealesSubjekt" aus Abbildung 5.8, die Rollen Administrator, Benutzer und Gast sind Klienten Magenheim stellt f ur den Ansatz der Dekonstruktion von Informatiksystemen folgende Anforderungen an Lernsoftware: 1."Hinreichende Komplexit at, 2. Quellcode gut strukturiert und dokumentiert, 3. zugrunde liegende Entwurfsund Designkonzepte widerspiegeln wesentliche Konzepte des Softwareengineerings (z. B. Objektorientierung, Ereignisorientierung, model-view-control Konzept . . . ), 4. Benutzungsober achengestaltung entspricht den zentralen Anforderungen der Softwareergonomie, 5. zentrale Ideen und Methoden uber Software zug anglich, 6. Nutzungskontext der Software f ur Sch uler erschliebar, exemplarische 'didaktische Fenster' auf tieferliegenden Schichten des Informatiksystems m oglich (Symbolverarbeitung), 7. mediale Funktionen des Softwaresystems beispielhaft analysierbar, 8. erg anzende Dokumentationen uber Modellierungsprozess verf ugbar, 9. Visualisierung von impliziten Konzepten (z. B. Klassenhierarchien, Sequenzdiagramme etc.) mit geeigneten Entwicklungsumgebungen m oglich etc." (Magenheim (2001); zitiert nach (Engbring 2004, S. 183). Bei Ausblendung des Softwareentwicklungsprozesses und Fokussierung auf Basiskompetenzen zu Informatiksystemen wird klar, dass einige der Anforderungen eine weniger wichtige Rolle spielen. So sind hinreichende Komplexit at (1) und das Vorhandensein einer erg anzenden Dokumentation uber den Modellierungsprozess (8) weniger relevant, da Softwareentwicklung nicht wie im Ansatz der Dekonstruktion ein Ziel des Unterrichts ist. Es ist die Balance zwischen angemessener Komplexit at der Software f ur die Lernenden und Angemessenheit des Einsatzes eines Entwurfsmusters zur L osung des Anwendungsproblems zu gew ahrleisten. Andere Anforderungen m ussen umformuliert werden: Die zugrunde liegenden Entwurfsund Designkonzepte m ussen vernetze fundamentale Ideen der Informatik widerspiegeln (3 und 5). Auerdem m ussen Visualisierungen von impliziten Konzepten in geeigneten Lernmaterialien m oglich sein (9). Beispiel: Lernf orderliche Software zur Zugriskontrolle mit dem Proxymuster Nach auen sichtbares Verhalten, innere Struktur und Implementierungsaspekte werden als Perspektiven genutzt (Stechert 2006c), um die Informatiksysteme, z. B. in Form lernf orderlicher Software, systematisch und handlungsorientiert zu erkunden. Im Folgenden soll am Beispiel der Zugriskontrolle die Rolle der lernf orderlichen Software im Unterrichtsmodell diskutiert werden.1585. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Nach der positiven Klassikation und Auswahl des Proxymusters (Abschnitt 5.4) wurde anschlieend lernf orderliche Software entwickelt, in der das Muster als Br ucke zwischen dem nach auen sichtbaren Verhalten und der inneren Struktur dient. Subjekt Proxy RealesSubjektAnfrage() Anfrage() Anfrage() realesSubjekt.Anfrage()realesSubjekt.Anfrage()Klient Abbildung 5.8: Das Klassendiagramm des Programms zur Zugriskontrolle { ohne Benutzungsober ache { entspricht dem Proxymuster Die lernf orderliche Software zur Zugriskontrolle hat diesbez uglich exemplarischen Charakter, da sie auf dem Proxymuster basiert, und die Dualit at von Verhalten und Struktur eine systematische Erkundung unterst utzt (Abbildung 5.8). Somit kann das Programm sowohl auf sein Verhalten als auch auf seine bew ahrte innere Struktur uberpr uft werden. Nach Brinda kann Lernsoftware, wie Explorationsmodule, auch zum Unterrichtsinhalt werden, denn Lernende k onnen die Umsetzung "informatischer Fachkonzepte (z. B. Entwurfsmuster, vgl. Gamma et al. 1996) in einem Explorationsmodul analysieren und selbst daraus resultierende, kleine Erweiterungen des Systems vornehmen" (Brinda 2004a, S. 153). Eine Bereicherung des Lehr-Lernprozesses im Rahmen des Unterrichtsmodells wird durch die Kombination von Wissensrepr asentationen (gem a der Kriterien zur Klassikation der Entwurfsmuster) mit der Vorgehensweise zur systematischen Erkundung erzielt (Abschnitt 5.5.3). F ur die systematische Erkundung ist das Lernen aus Fehlern, z. B. ausgel ost durch unerwartetes Verhalten von Informatiksystemen, ein Ansatzpunkt. Durch Schritt 3 (vgl. Abschnitt 5.5.3; S. 152) der Vorgehensweise erfolgt ein Bezug zu den Hauptfunktionen von Informatiksystemen nach Denning (2007). Der Bezug zu informatischen Konzepten (Schritt 5; vgl. Abschnitt 5.5.3; S. 152) und deren Sonderf alle (Schritt 6; vgl. Abschnitt 5.5.3; S. 152) erm oglicht die Klassikation des Systemverhaltens. Gleichzeitig bilden sie den Ankn upfungspunkt zu vernetzten fundamentalen Ideen der Informatik ( !Kriterium 3: Vernetzte fundamentale Ideen der Informatik; S. 123). Da diese per Denition in der Wissensrepr asentation und damit in der Software vorhanden sind, unterst utzen sie Sch uler und Lehrperson, unterschiedliche F alle im Systemverhalten zu klassizieren. So k onnen beim Proxymuster unterschiedliche Zugrisrechte identiziert werden. In den Abschnitten 6.4 und 8.3 wird dies aufgegrien, z. B. die Vernetzung der Zugriskontrolle mit den fundamentalen Ideen Vererbung und Schnittstelle in der lernf orderlichen Software, um Problemstellen im Unterricht zu bew altigen. Auerdem wird in Abschnitt 8.3 eine Verkn upfung des Proxymusters mit dem Zustandsmuster in das unterrichtliche Geschehen integriert, um Systemzust ande zu betrachten.5.6. Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 159 Aufgrund des Lebensweltbezugs der Entwurfsmuster ( !Kriterium 6: Lebensweltbezug; S. 123) ist es f ur Sch uleruber Analogien leichter m oglich, Hypothesen zu bilden, z. B. zu unterschiedlichen Zugrisrechten, die uberpr uft werden. Darauf aufbauend sind Hypothesen zur inneren Struktur zu pr ufen. Zusammenh ange mit anderen Entwurfsmustern ( !Kriterium 4: Zusammenhange mit anderen Strukturmodellen; S. 123) zeigen Ankn upfungspunkte zur Erweiterung der lernforderlichen Software, so dass Ergebnisse von Experimenten vor und nach der Erweiterung durch Sch uler verglichen werden k onnen. Erweiterungen, d. h. sinnvolle Kombinierbarkeit eines zugrunde liegenden Entwurfsmusters als Wissensrepr asentation mit anderen einzelnen Entwurfsmustern sollte m oglich sein. Denn um den Nachteil auszugleichen, dass f ur jedes Entwurfsmuster eine neue Software eingesetzt wird, sollten die bekannten Strukturen in sp ateren Phasen wieder erkennbar sein, um den Wissenstransfer zu f ordern: Eine strukturell unver anderte Software mit einem anderen Kontext kann im Unterricht ohne groen Aufwand f ur die Lehrperson eingesetzt werden (Kapitel 8). Die Vernetzung fundamentaler Ideen kann einerseits durch den Einsatz solcher Variationen der im Kern unver anderten Software mit anderer Schwerpunktsetzung im Unterricht erfolgen. Andererseits ist es m oglich, durch Kombination mit weiteren Entwurfsmustern eine f ur Kompetenzentwicklung mit Informatiksystemen f orderliche Software zu gestalten. Bei einer Erkundung des Verhaltens des erweiterten Systems k onnen die Sch uler auf vorherige Erkenntnisse aufbauen. Anhand der Hauptfunktionen von Informatiksystemen ist auerdem eine Diskussion uber Informatiksysteme und Gesellschaft strukturierbar (Schritt 8; vgl. Abschnitt 5.5.3; S. 152). Beispiele f ur einfache Programme, die auf Entwurfsmustern als strukturelle Grundlage basieren, sind die in den Unterrichtserprobungen (Kapitel 6 und 8) eingesetzten Programme mit dem Lebensweltbezug der Arztpraxis sowie Programme zu Architekturmustern (Abschnitt 7.3.1; (vgl. Ufer 2007)). Dazu kommen Programme aus den Seminararbeiten von S ulz (2007) und Graf (2008). Die Unterrichtsprojekte zeigen, dass Sch uler einen experimentierenden Zugang uber die lernforderliche Software annehmen und die darin enthaltene Vernetzung fundamentaler Ideen der Informatik entdecken (Kapitel 6 und 8). Kompetenzentwicklung mit Informatiksystemen im Groen und im Kleinen Der Einsatz von einem oder wenigen Entwurfsmustern als strukturelle Grundlage eines Informatiksystems f uhrt zu einem begrenzten Funktionsumfang des Systems. DeRemer und Kron (1975) postulieren in ihrem wegweisenden Artikel"Programming-in-the-Large Versus Programmingin-the-Small", dass sich das Programmieren im Kleinen grundlegend vom Programmieren im Groen unterscheidet: "We argue that structuring a large collection of modules to form a 'system' is an essentially distinct and dierent intellectual activity from that of constructing the individual modules. That is, we distinguish programming-in-the-large from programming-in-the-small. Correspondingly, we believe that essentially distinct and dierent languages should be used for the two activities" (DeRemer und Kron 1975, S. 114). Als"groe"Programme denieren sie Systeme, die aus vielen kleinen Programmen bzw. Modulen bestehen, die wiederum von unterschiedlichen Personen geschrieben sein k onnen (DeRemer und Kron 1975, S. 114). Aufgrund der allgemeinen Zustimmung, dass es diesen prinzipiellen Unterschied gibt (z. B. Appelrath et al. 2002), ist nun zu fragen, ob sich daraus Konsequenzen f ur die vorliegende Arbeit ergeben { d. h., ob eine Unterscheidung hinsichtlich der Kompetenzentwicklung mit groen Informatiksystemen wie Standardsoftware, Betriebssystemen und Datenbanksystemen einerseits und der Kompetenzentwicklung mit kleinen Informatiksystemen andererseits notwendig ist, die beispielsweise einen Algorithmus zur Berechnung des Maximums umsetzen. Die Analyse des fachdidaktischen Forschungsstandes st utzt die Annahme, dass Informatiksysteme die w ahrend der Konstruktion eingesetzten Konzepte und Methoden widerspiegeln. Deshalb1605. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung wird im Folgenden zusammengefasst, welche Aspekte das Programmieren im Groen ausmachen und inwieweit sie Einuss auf Kompetenzentwicklung zu Informatiksystemen haben. Es ist zu pr ufen, ob Kompetenzentwicklung mit groen Informatiksystemen anderer Strategien und Informatikkonzepte bedarf als mit kleinen Informatiksystemen. Menschen werden im Alltag mit Informatiksystemen konfrontiert, die nach der Denition von DeRemer und Kron (1975) gro sind. F ur Kompetenzentwicklung mit Informatiksystemen fehlen jedoch theoretisch begr undete und empirisch uberpr ufte Kriterien zur Beurteilung und Stufung der Gr oe eines Informatiksystems. Frage ist, wie sich Programme, die auf Entwurfsmustern basieren, zwischen kleiner Software, die einfache Algorithmen umsetzt, und komplexer Software einordnen lassen. Welche Informatikkonzepte und -methoden kommen in groen Informatiksystemen zum Einsatz? Da Programmiersprachen und -werkzeuge f ur die Entwicklung kleiner Programme bzw. Module existieren, stellen DeRemer und Kron (1975) fest, dass es Sprachen und Werkzeugen zur Vernetzung der Module bedarf. Daher skizzieren sie Anforderungen an eine Beschreibungssprache. Damit ist bereit oensichtlich, dass DeRemer und Kron die Beziehungen zwischen den Systemmodulen als den entscheidenden Unterschied zwischen kleinen und groen Programmen ansehen (module interconnctivity information), der Datenabstraktion und Systemtests notwendig macht. Als Methoden zur Sicherung der Zuverl assigkeit groer Programme betonen sie das Geheimnisprinzip und Schichten virtueller Maschinen. Appelrath et al. (2002) widmen in ihrem Standardwerk zur Einf uhrung in die Informatik das Kapitel zur Softwareentwicklung dem Programmieren im Groen. In der Gliederung des Kapitels kommt der objektorientierten Modellierung und der Qualit at von Software eine Schl usselrolle zu. Genannt werden: Korrektheit, Ezienz, Robustheit, Benutzungsfreundlichkeit, Wartbarkeit, Bewertung des Programms gegen uber den Anforderungen und gute Verst andlichkeit f ur jedermann (Appelrath et al. 2002, S. 106). Das Prinzip der Zerlegung ist sowohl f ur das Programmieren im Kleinen als auch im Groen fundamental: "Wahrend die Zerlegung beim Programmieren im Kleinen an den einzelnen Funktionalit aten des Programms ausgerichtet ist, orientiert sie sich beim Programmieren im Groen an den Elementen (Daten, Objekte) des Problembereichs. Die Datenstrukturen sowie Prozeduren zum Zugri und zur Manipulation der Daten werden in Komponenten (Module, Klassen) zusammengefasst. Diese werden strukturiert zusammengesetzt und bilden die Architektur des Softwaresystems" (Appelrath et al. 2002, S. 106). Hieran lassen sich bereits mehrere Unterschiede erkennen: Einzelne Funktionalit aten des Programms, die sicherlich im Verhalten sichtbar werden, konnen gegebenenfalls auf allein stehende Prozeduren und damit auf Aspekte des Programmierens im Kleinen zur uckgef uhrt werden. Diese Zuordnung ist jedoch nicht zwingend, da andere Funktionalit aten erst durch das Wechselspiel mehrerer Komponenten (Klassen) realisiert werden, z. B. Zugriskontrolle durch das Proxymuster. Wahrend einfache Datentypen zum Programmieren im Kleinen geh oren, sind abstrakte Datentypen, die Datenstrukturen und Operationen auf ihnen zusammenfassen, dem Programmieren im Groen zugeordnet, da relevante Eigenschaften in den Vordergrund treten und Implementierungsdetails vernachl assigt werden k onnen (Appelrath et al. 2002, S. 112). Objektorientierte Modellierung wird unter den Methoden des Programmierens im Groen aufgefuhrt, da sie die Vernetzung von Komponenten beschreibbar macht. Entsprechende Konzepte des Programmierens im Groen wie Objekte, Klassen, Attribute, Methoden, Kommunikation zwischen Objekten, Vererbung, Polymorphismus und dynamisches Binden sowie Datenkapselung werden explizit er ortert. Entwurfsmuster werden in diesem Kontext als hilfreich f ur Studienanfanger hervorgehoben:5.6. Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 161 "Entwurfsmuster beschreiben allgemeing ultige Entwurfsl osungen, die von erfahrenen Softwareentwickler(inne)n gefunden wurden und in unterschiedlichen Kontexten vor allem von anderen Entwicklergruppen wiederverwendet werden k onnen. Sie helfen damit insbesondere Anf angern und Anfangerinnen beim Erlernen der objektorientierten Softwareentwicklung" (Appelrath et al. 2002, S. 127). Diese Aussage unterstreicht einen positiven Seiteneekt des vorgestellten Unterrichtsmodells, namlich den, dass die als Wissensrepr asentation f ur vernetzte fundamentale Ideen ausgew ahlten Entwurfsmuster lernf orderlich f ur OOM sein k onnen. Kritisch zu sehen ist, dass diese Aussage sich nicht auf Schule, sondern den Kontext der Hochschule bezieht. Inahnlichem Mae ist die Skalierung hinsichtlich der Anzahl der Anwender eines Informatiksystems ein Kennzeichen f ur groe Informatiksysteme. Der Funktionsumfang ebenso wie die"Bedienphilosophie" bei groen Programmen spielen eine entscheidende Rolle zu deren Verst andnis. Fragen wie"Wo bin ich?","Was kann ich hier tun?","Wie kam ich hier hin?","Wo kann ich noch hin und wie komme ich dahin?" muss sich der Anwender beantworten (Nievergelt und Ventura (1983), zitiert nach (Eberle 1996, S. 351)). Im Informatikunterricht sind strukturelle Merkmale eines Informatiksystems mit geeigneten informatischen Modellen zu unterlegen, damit die Sch uler korrekte mentale Modelle ausbilden k onnen (Vo 2006). Interessant ist, dass Eberle (1996) das Anwenden, z. B. von Standardsoftware, als Probleml oseprozess sieht, der beispielsweise mit Struktogrammen beschrieben werden kann, die der Algorithmik und damit dem Programmieren im Kleinen zuzuordnen sind. Andererseits empehlt er, dass Strukturen der Benutzungsober ache und Fehlermeldungen den verschiedenen Programmebenen zuzuordnen sind (Eberle 1996, S. 351). Das Ebenenmodell des Rechners wiederum ist ein Beispiel f ur Schichtenarchitekturen, die dem Programmieren im Groen zugerechnet werden. Auf die Notwendigkeit des vernetzten Denkens f ur Kompetenzentwicklung mit Informatiksystemen im Alltag weisen Brauer und Brauer hin (Abschnitt 5.4.1; (Brauer und Brauer 1992, S. 17)). Damit wurden einige Informatikkonzepte identiziert, die in groen Informatiksystemen zum Einsatz kommen. Wenn die Annahme stimmt, dass Informatiksysteme die in ihnen eingesetzten Konzepte widerspiegeln, bietet der Ansatz f ur Kompetenzentwicklung mit Informatiksystemen, der Entwurfsmuster als Wissensrepr asentationen f ur vernetzte fundamentale Ideen nutzt, viel Potential, denn wichtige Aspekte groer Informatiksysteme werden bereits angesprochen, ohne dass die Systeme konstruiert werden m ussen. Eine empirische Uberpr ufung ist jedoch notwendig. Oene Frage ist letztendlich die Skalierbarkeit des Unterrichtsmodells, d. h. inwieweit die diskutierten Vorgehensweisen f ur Kompetenzentwicklung mit Informatiksystemen sowohl f ur kleine Systeme als auch f ur groe Systeme eingesetzt werden k onnen, oder ob unterschiedliche Methoden zum Einsatz kommen m ussen. Die Komplexit at des Informatiksystems sei als Eingabegr oen bezeichnet. Die Frage ist, wie viele Ressourcen f(n) beispielsweise die systematische Erkundung des Informatiksystems ben otigt. Ressourcen seien Zeit und Kompetenzstufe zu Informatiksystemen, wobei letztere beispielsweise durch Wissen um Informatikkonzepte und deren Vernetzung in einem System gekennzeichnet ist. So ist es m oglich, dass eine Vorgehensweise f ur groe Informatiksysteme nicht zum gew unschten Ergebnis f uhrt, w ahrend sie f ur kleine Programme gute Resultate liefert. Unter Skalierbarkeit sei also die Anpassungsf ahigkeit des Unterrichtsmodells auf die Eingabe eines konkreten Informatiksystems verstanden. Dazu z ahlt auch die Frage der Vollst andigkeit, d. h., ob das Unterrichtsmodell bestimmte Aspekte groer (oder kleiner) Informatiksysteme gar nicht erfasst und diese ausgeblendet werden. Zur Erinnerung sei betont, dass Kompetenzentwicklung mit Informatiksystemen die Entmystizierung, das Verstehen des Aufbaus, der Vernetzung und der Funktionsweise sowie bewusstes Anwenden und entsprechende Komplexit atsbew altigung zum Ziel hat, die motiviert, ein Informatiksystem f ur seine Zwecke zielgerichtet einzusetzen. Nicht gemeint ist die vollst andige Beherrschung eines Systems wie Brunnstein (2001) sie beschreibt. So beinhaltet der hier verwendete Begri der Skalierbarkeit1625. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung sowohl Aspekte der Ezienz, d. h. Kompetenz zu Informatiksystemen schnell zu entwickeln, als auch der Eektivit at, falls das Unterrichtsmodell einige Aspekte gr oerer Systeme vernachl assigt. Die Skalierbarkeit des Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung ist in sp ateren Forschungsarbeiten mittels empirischer Untersuchungen mit Referenzsystemen durchzuf uhren. Unter anderem k onnen zwei Systeme mit prinzipiell ahnlicher Funktion, aber unterschiedlichem Funktionsumfang gegen uber gestellt werden. Anhand von Kriterien und Kategoriensystemen l asst sich dann der Grad der Kompetenz zu Informatiksystemen messen. Daf ur bedarf es somit eines Kompetenzmodells, das nicht mehr im Rahmen der vorliegenden Arbeit zu untersuchen ist. Der Autor greift diese Fragestellungen im Rahmen weiterer Forschung wieder auf (Abschnitt 9.3). 5.6.3 Fallstudienbasierte Entwicklung der Lernsoftware Pattern Park Einordnung der Entwicklung in die Forschungsvorgehensweise In diesem Abschnitt wird die Entwicklung der Lernsoftware Pattern Park beschrieben. Die Lernsoftware ist das Resultat der Arbeit einer studentischen Projektgruppe mit einem Umfang von 3600 Arbeitsstunden. Darin werden ausgew ahlte Entwurfsmuster gem a des Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung f ur die Lernenden der Sekundarstufe II aufbereitet. Ziel der Lernsoftware ist nicht, die Sch uler zu Softwareentwicklern auszubilden, sondern Entwurfsmuster als Wissensrepr asentationen f ur wichtige vernetzte fundamentale Ideen der Informatik lernf orderlich einzusetzen. Dabei wird besonderer Wert auf die Formalisierung von statischen und dynamischen Aspekten von (Lebenswelt-) Situationen gelegt. Immer werden dazu Sichtenwechsel angeboten. Bereits entwicklungsbegleitend wurden einzelne Modulelemente exemplarisch im Informatikunterricht der Sekundarstufe II eingesetzt und evaluiert (Abschnitt 6.4.4). Dadurch gab es noch w ahrend des Entwicklungsprozesses R uckkopplung mit den Sch ulern, woraus notwendige Verfeinerungen abgeleitet werden konnten. Die Entwicklung von Lernsoftware wird in einer experimentell bzw. quantitativ ausgerichteten Lehr-Lernforschung vernachl assigt, wodurch eine Innovationskrise entsteht (Reinmann 2006). Eine Orientierung an der ingenieurwissenschaftlichen Forschungsmethodik, die Softwareentwicklung einschliet und beispielsweise von Brinda (2004a) und Arnold (2007) vorgenommen wurde, fordert hingegen alltagstaugliche Innovation: "the engineering approach to research is directly concerned with practical impact { understanding how the world works and helping it 'to work better' by designing and systematically developing highquality solutions to practical problems. [. . . ] It combines imaginative design and empirical testing of the products and processes during development and in evaluation. [. . . ] In the educational research community the engineering approach is often undervalued" (Burkhardt und Schoenfeld 2003, S. 5). Reinmann (2006) bezeichnet dieses Vorgehen als"grundlagenorientierte Anwendungsforschung". Die Lernsoftware Pattern Park basiert auf dem Lebensweltbezug durch das Szenario eines Freizeitparks. Dieser fungiert im Sinne der"Anchored Instruction" (Bransford et al. 1990) als interessanter und realistischer narrativer Anker (Bransford et al. 1990), also als Makrokontext (vgl. Hubwieser 2007a, S. 10). Eingeordnet in die Strukturierung der Unterrichtsinhalte des Unterrichtsmodells unterst utzt die Lernsoftware sowohl die Strukturmodelle als auch die vernetzten fundamentalen Ideen dadurch, dass sie Entwurfsmuster als Wissensrepr asentation einsetzt. Dar uber hinaus legt die Lernsoftware die Schwerpunkte auf das nach auen sichtbare Verhalten und die innere Struktur von Informatiksystemen. Quelltext der Entwurfsmuster wird zwar erg anzend f ur fortgeschrittene Lernende angeboten, ist aber nicht manipulierbar. Vernetzte fundamentale Ideen der Informatik in Lebensweltsituationen bilden somit das Fundament.5.6. Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 163 Sichtenkonzept und Aufbau der Lernsoftware Pattern Park Im Folgenden werden das Sichtenkonzept und der Aufbau der Lernsoftware Pattern Park beschrieben. Neben der Zugriskontrolle, die sowohl im Proxyals auch im Iteratormuster vorhanden ist, und den Zust anden mit dem Zustandsmuster, werden die fundamentalen Ideen Rekursion durch Kompositum und Dekorierer, Kapselung durch Fassade, Modularisierung durch Schablonenmethode, Iteration durch den Iterator, und"separation of concerns", d. h. Aufteilung der Aufgaben auf unterschiedliche Komponenten, durch das Beobachtermuster thematisiert (Tabelle 5.3). Zus atzlich zur Betrachtung fundamentaler Ideen in einzelnen Entwurfsmustern wird auch die Kombinierbarkeit der Muster aufgegrien. Sie wurde in der fachdidaktischen Klassikation als ein Kriterium identiziert, das Ankn upfungspunkte f ur weiteren Unterricht liefert (Abschnitt 5.4.1). Daher gibt es in der Lernsoftware Pattern Park eine so genannte Musterkombinationsaufgabe, in der die Muster Kompositum, Iterator, Dekorierer und Fassade verbunden sind. Darin wird das Lebensweltbeispiel einer zusammengesetzten Grak zur Erstellung eines Logos des Freizeitparks, das bereits aus dem Modul zum Kompositummuster bekannt ist, wieder aufgegrien und erweitert. Zur Begr undung des Sichtenkonzepts werden die sechs Interaktivit atsstufen von Lernumgebungen nach Schulmeister herangezogen. Bei der Erstbegegnung mit einem Sachverhalt ist das intuitive Denken und Verstehen der Sch uler zu ber ucksichtigen. 1. Objekte betrachten und rezipieren, 2. multiple Darstellungen betrachten und rezipieren, 3. die Repr asentationsform variieren, 4. den Inhalt der Komponente modizieren, 5. das Objekt bzw. den Inhalt der Repr asentation konstruieren, Tabelle 5.3: Ubersicht uber die in der Lernsoftware Pattern Park umgesetzten Entwurfsmuster (Franke et al. 2007, S. 3) Entwurfsmuster Lebensweltbeispiel Fundamentale Ideen Kompositum Grak / Jugendgruppe Rekursion, Datenstruktur Baum, Aggregation, Komposition Beobachter Eine Uhrzeit { mehrere UhrenAssoziation (1-zu-n), Darstellung von Daten, separation of concerns Fassade Pf ortner Datenkapselung, Schnittstelle, Delegation Proxy Geldkarte Zugrisschutz, Schnittstelle Dekorierer Werkzeuge und Arbeitskleidung von MitarbeiternRekursion, Vererbung Iterator Durchlaufen einer BesucherlisteDatenstruktur Liste, Traversierung Schablone Aufbau von Bahnen Vererbung Zustand Achterbahnfahrt Zustandsdiagramm, Zust ande, Bedingungen, Aktionen Musterkombination (Kompositum, Iterator, Dekorierer, Fassade)Grakwettbewerb siehe einzelne Muster1645. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 6. den Gegenstand bzw. Inhalt der Repr asentation konstruieren und durch manipulierende Handlungen intelligente R uckmeldung vom System erhalten (Schulmeister 2002, S. 194). Folgende Sichten bzw. Aufgabentypen mit unterschiedlichen Sichten werden im Pattern Park angeboten. Animation Jedes Entwurfsmustermodul enth alt eine Animation zur Darstellung einer fundamentalen Idee, die durch ein Lebensweltbeispiel und anhand des jeweiligen Entwurfsmusters motiviert wird. Es gibt die M oglichkeit, Untertitel zu aktivieren, so dass unabh angig vom deutschsprachigen Audiokommentar weitere Sprachen durch Austausch der entsprechenden XML-Datei (Extensible Markup Language) unterst utzt werden k onnen. Zus atzlich zu den einzelnen Modulen gibt es eine Animation, die die Ziele der Lernsoftware f ur Kompetenzentwicklung mit Informatiksystemen zusammenfasst, und eine Animation zu Entstehung und Zweck der Entwurfsmuster nach Gamma et al. (1995), die Sch ulern das Prinzip der Wiederverwendung von Mustern n aher bringen soll. Die Animationen k onnen der Interaktivit atsstufe 1 nach Schulmeister zugeordnet werden. Aufgabe im Freizeitparkkontext Aufgaben diesen Typs greifen einen Lebensweltbezug im Rahmen des Freizeitparks auf, um eine fundamentale Idee, die zu dem entsprechenden Entwurfsmustermodul geh ort, handlungsorientiert zu verstehen. Die Veranschaulichung der Problemstellung steht im Vordergrund. Es werden keine weiteren Formalisierungen verlangt. Oft werden Zuordnungsaufgaben gestellt. Diese Aufgaben k onnen der Interaktivitatsstufe 2 nach Schulmeister zugeordnet werden. Aufgabe im Freizeitparkkontext mit Formalisierung Aufgaben diesen Typs beziehen sich ebenfalls auf eine Situation im Kontext des Freizeitparks, nutzen aber UML-Diagramme zur Formalisierung. In diesen Aufgaben werden bis zu drei Sichten dargestellt. Neben der Lebensweltoder Realsicht meist eine formale Sicht, z. B. Sequenzdiagramm, in der die Aufgabe zu l osen ist. Zus atzlich ist beispielsweise im Modul zum Proxymuster ein vollst andiges Klassendiagramm angegeben. Die Vorgabe einer bereits formalisierten Darstellung zusatzlich zur Lebensweltsicht wurde gew ahlt, um die Sch uler bei der Formalisierung einer Problemsituation durch eine weitere formale Sicht zu unterst utzen. Im Zustandsmodul wird durch ein Zustandsdiagramm eine Achterbahnfahrt gesteuert. Insgesamt st arkt der in diesem Aufgabentyp immer vorhandene Sichtenwechsel einerseits die Verbindung des nach auen sichtbaren Verhaltens mit der inneren Struktur, andererseits erg anzt die Synchronisation einer statischen und dynamischen Sicht, z. B. durch Klassenund Sequenzdiagramm, den Blick auf die Problemsituation (Brinda 2004a). Diese Aufgaben k onnen den Interaktivitatsstufen 2 bis 3 nach Schulmeister zugeordnet werden. Aufgabe mit Klassendiagrammeditor Zur formalen Darstellung der Musters wurde ein einfacher Klassendiagrammeditor, d. h. eine ikonische Repr asentation, in Pattern Park integriert. In dem so genannten UML-Puzzle gibt es ein unvollst andiges Klassendiagramm und eine Aufgabenstellung, die letztlich zu einer konkreten Umsetzung des Entwurfsmusters f uhrt. Ein UML-Puzzle erm oglicht auch die Kombination mehrerer Entwurfsmuster in der Musterkombinationsaufgabe. Diese Aufgaben k onnen der Interaktivit atsstufe 5 bis 6 nach Schulmeister zugeordnet werden, da die Lernsoftware Unterst utzungsfunktionen anbietet. Quelltextsicht Die Quelltextsicht erg anzt das Entwurfsmustermodul um eine symbolische Reprasentation des Musters. Sie wendet sich an interessierte Sch uler, die sich auch Implementierungsaspekte ansehen m ochten und ist in Java verfasst. Die Quelltextsicht ist nicht manipulierbar und kann der Interaktivit atsstufe 1 nach Schulmeister zugeordnet werden.5.6. Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 165 Arnold et al. (2005) stellen drei Anforderungen an entdeckendes Lernen im Informatikunterricht: Oenheit des Themas, Vollst andigkeit des zur Verf ugung gestellten Materials und W urdigung aller ernsthaften Sch ulerlosungen in der Bewertung. Diesem Ansatz des entdeckenden Lernens entsprechen in der Lernsoftware Pattern Park Aufgaben zum UML-Puzzle (Tabelle 5.4) insofern, dass die Problemstellungen nicht nur eine einzige richtige L osung besitzen (Oenheit des Themas) und dass das jeweilige Modul hinreichend viel Zusatzmaterial zur Verf ugung stellt, um die Problemstellung zu l osen (Vollst andigkeit des zur Verf ugung gestellten Materials). Die Bearbeitungszeit kann in Abh angigkeit vom Problem festgelegt werden und den Sch ulern kann Freiraum bei der Bearbeitung gelassen werden. Die Auswertung erfolgt nur zum Teil durch die Lernsoftware, so dass dem Lehrer die Bewertung der Sch ulerlosungen obliegt. Abbildung 5.9: Ubersicht einer Aufgabe zur Zugriskontrolle mit Angabe der Dauer, Lernziele und Vorkenntnisse Zur Unterst utzung des Lernens enth alt die Modul ubersicht Elemente zur Steuerung des eigenen Lernens (Abbildung 5.9). Sch uler werden vorab uber Lernziele, Lerndauer und notwendige Vorkenntnisse informiert und k onnen dadurch ihren Lernprozess durch eine meta-kognitive Betrachtung selbst organisieren. Abbildung 5.9 zeigt die Modul ubersicht zur Zugriskontrolle. Sichten und Sch ulert atigkeiten, um erwartete kognitive Barrieren zur Zugriskontrolle zu uberwinden Die Lernsoftware Pattern Park bietet handlungsorientierte Zug ange an, um die Fehlvorstellungen und kognitiven Barrieren hinsichtlich der abstrakten Konzepte auszur aumen (siehe Abbildung 5.10 und Abschnitt 5.4.4). In diesem Abschnitt wird das Beispiel zur Zugriskontrolle wieder aufgegrien (vgl. Abschnitte 5.4.4 und 5.5.5). Um die fundamentale Idee Zugriskontrolle zu veranschaulichen, muss der Blick hinter die grasche Benutzungsober ache erm oglicht werden. Ein Entwurfsmuster als Wissensrepr asentation wird genutzt, um zu beschreiben, wie Struktur und Prozess zusammenspielen, um Zugriskontrolle zu realisieren. Dazu wird der Ansatz des entdeckenden Lernens eingesetzt, durch das1665. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Aufgabe Aktivität Notizen des SchülersLernsoftware Beobachtungsaufgabe Tafelbild Proxy SubjektSubjektProxymusterIdentifiziere  Stellvertreter und  das echte Subjekt im Bezahlvorgang mit einer Kreditkarte. ZeitAnimation zur Zugriffskontrolle Korrektur kognitiverModelle Start Platzhalter einzelnes  SubjektVererbung unabhängige  ObjekteVernetzung keine  VernetzungFormalisierung keine  Abstraktion Abbildung 5.10: Korrektur von Fehlvorstellungen und kognitiven Modellen im Lehr-Lernprozess (vgl. Schubert et al. 2009, S. 3) die Sch uler vernetzte fundamentale Ideen erkunden k onnen. Somit wird es in der Lernsoftware moglich, mit den fundamentalen Ideen der Informatik zu interagieren. Das Konzept der Sichtensynchronisation unterst utzt das Lernen. Das Modul zur Zugriskontrolle startet mit einer Animation, die den Prozess und die teilnehmenden Objekte der Zugriskontrolle mittels Stellvertreter visualisiert ( SA: nach auen sichtbares Verhalten; siehe Abschnitt 5.3). Mit der Animation wird die erste Fehlvorstellung, ein Objekt kontrolliere den Zugri auf sich selbst, vermieden. Danach k onnen Sch uler den Prozess des Geldabhebens an einem Geldautomaten mit Hilfe unterschiedlicher UML-Diagramme beschreiben ( SA+SB: Kombination des nach auen sichtbaren Verhaltens mit der inneren Struktur von Informatiksystemen). Damit gelingt die Verbindung der formalen Beschreibung eines Entwurfsmusters in Diagrammform mit der Lebenswelt. Diese Kombination der Sichten erlaubt das Uberwinden der kognitiven Barriere der Vererbung in diesem Kontext, durch die Originalobjekt (Geld) und Stellvertreterobjekt (Geldkarte) die gleiche Schnittstelle aufweisen. Die kognitive H urde Formalisierung ist schwierig zu uberwinden: Das gegebene Klassendiagramm (vgl. Abbildung 6.3) ist eine weitere formale Darstellung, die die Sch uler unterst utzt zu formalisieren. Beistand leistet den Sch ulern in der Lernsoftware eine Hilfefunktion, die zu einem beliebigen Zeitpunkt im Probleml oseprozess aufgerufen werden kann. Sie stellt Problemstellung und vor allem die Elemente des Sequenzdiagramms nochmals vor, um die Sch uler in die Lage zu versetzen, den Prozess der Zugriskontrolle zu beschreiben. In Abbildung 5.10 wird der LehrLernprozess mit Unterst utzung von Lernsoftware zur Uberwindung von Fehlvorstellungen und kognitiven Barrieren beispielhaft dargestellt. Vor Fertigstellung der Lernsoftware Pattern Park wurden im Unterricht Teile des Moduls zur Zugriskontrolle mit dem Entwurfsmuster Proxy und des Moduls zur Iteration mit dem Iteratormuster prototypisch erprobt (Abschnitt 6.4.4). Die exemplarische Zuordnung der Aufgaben des Moduls zur Zugriskontrolle zu den Stufen der Interaktivit at zeigt Tabelle 5.4. Anforderungen an die Entwicklung interaktiver Lernsoftware Arnold und Hartmann (2007) stellen fest, dass an interaktive Lernsoftware meist drei Anforderungen gestellt werden: Im Unterricht soll sie einen didaktischen sowie lehr-lernorganisatorischen5.6. Lernf orderliche Software f ur Kompetenzentwicklung mit Informatiksystemen 167 Tabelle 5.4: Exemplarische Einordnung der Modulaufgaben zur Zugriskontrolle in die Interaktivitatstaxonomie nach Schulmeister (2002) Aufgabe in der Lernsoftware Pattern Park Stufe der Interaktivit at Animation zu Zugrisschutz mittels Geldkarte (Zugrisschutz, Stellvertreterfunktion, Smart Reference)Stufe 1: Die Animation erm oglicht das Rezipieren der beteiligten Objekte und der Terminologie. Weitergehende Interaktivit at ist nicht m oglich. Ubung zu Lebensweltbeispielen f ur Situationen mit Stellvertreter, Klienten und OriginalobjektenStufe 2-3: Die Sch uler k onnen die Objekte bewegen, jedoch nicht ihre Darstellung ver andern. Ubung zur Beschreibung von Kommunikationsbeziehungen in einem Lebensweltbeispiel mittels Sequenzdiagramm bei gegebenem Klassendiagramm.Stufe 3: Die Sch uler k onnen durch Eingabe von Parametern neue Darstellungsformen erarbeiten. UML-Puzzle zur Zugriskontrolle Stufe 5-6: Mit dem Klassendiagrammeditor steht den Schulern ein Werkzeug zur Verf ugung, in dem sie selbst Klassen erzeugen und beschreiben k onnen. Durch die Lernsoftware werden die symbolischen Inhalte als sinntragende Objekte modelliert, so dass eine (einfache) Uberprufungsfunktion zur R uckmeldung an die Sch uler umgesetzt ist. Quelltextsicht Stufe 1: Die Quelltextsicht erm oglicht das Rezipieren der Implementierung eines Entwurfsmusters. und insgesamt einen okonomischen Mehrwert haben. Da selten alle Anforderungen erf ullt sind, geben sie zehn pragmatische Empfehlungen, die bei der Entwicklung interaktiver Lernsoftware zu beachten sind (Arnold und Hartmann 2007, S. 177). Im Folgenden werden diese Schritte bzw. Fragestellungen aus Sicht der Lernsoftware Pattern Park kommentiert. 1. Ist Lernsoftware bzw. Rechnereinsatz f ur dieses Thema notwendig? Informatiksysteme und die ihnen innewohnenden fundamentalen Ideen der Informatik sind sehr facettenreich. Unterschiedliche Sichten auf und in ein Informatiksystem k onnen mit der Lernsoftware geeignet unterst utzt und die Sichten verbunden werden. Der ubergreifende Lebensweltbezug des Freizeitparks bei dennoch kleinen Modulen zu vernetzten fundamentalen Ideen mittels Entwurfsmuster stellt einen didaktischen Mehrwert dar. X 2. Ist das Unterrichtsthema auch in 10 Jahren noch relevant? Durch die an vernetzten fundamentalen Ideen der Informatik orientierte Umsetzung der Lernsoftware ist die Langfristigkeit gew ahrleistet und der Entwicklungsaufwand gerechtfertigt. X 3. Use-Cases: Ist Interaktivit at moglich? In zwei selbstorganisierten Seminaren zu Beginn des Projekts erarbeiteten die Projektgruppenmitglieder m ogliche Aufgabenstellungen. Diese wurden mit den Betreuern diskutiert und in der Zwischenpr asentation uberarbeitet vorgestellt. Jedes Modul in Pattern Park bietet Aufgaben unterschiedlich hoher Interaktivit at. Von einer Animation uber Zuordnungen und Aufgaben, die Wettk ampfe um beste Rundenzeiten einer Achterbahn erm oglichen, bis hin zur freien Gestaltung von Klassendiagrammen (vgl. Tabelle 5.4). X 4. Paper Based Prototyping Paper Based Prototyping der Benutzungsober achen zur Uberprufung von Funktionalit at und Layout wurde f ur Pattern Park insofern eingesetzt, dass viele grasche Elemente handgezeichnet und dann in die Adobe Flash Entwicklungsumgebung ubertragen wurden. Eine grasche Repr asentation ohne Funktionalit at wurde so sehr schnell umgesetzt. Dadurch, dass gleichzeitig erste Beschreibungen der Aufgaben existierten, konnte gepr uft werden, ob es Konikte zwischen dem beabsichtigten Einsatz der Aufgaben und der Gestaltung der Lernsoftware gab. {/ X1685. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung 5. Rapid Prototyping Da Flash-Filme in ein Java-Programm integriert werden sollten, war der Aufwand zur Erstellung eines Prototyps sehr gering und die Umsetzung schnell m oglich. Erste Erprobungen der Flash-basierten Aufgabenelemente wurden durch Peer-Review von Mitgliedern der Projektgruppe durchgef uhrt.X 6. Technische Anforderungen: so einfach wie nur m oglich Pattern Park ist in Java implementiert und ben otigt daher nur eine Java-Umgebung (Java Runtime Environment { JRE), die auf vielen Schulrechnern zu nden ist. Trotz der theoretischen Plattformunabhangigkeit durch Java gibt es verschiedene Versionen f ur Microsoft Windows, Linux und Mac OS, da die Betriebssysteme Adobe Flash unterschiedlich gut unterst utzen.X 7. Fr uhzeitige Erprobung Im November 2006 wurde eine Unterrichtserprobung in der Sekundarstufe II mit Modulelementen zur Iteration und zur Zugriskontrolle durchgef uhrt (Kapitel 6), um fr uhzeitig vor der endg ultigen Fertigstellung der Software den generellen Aufbau der Module und die Akzeptanz der Lernenden bez uglich der unterschiedlichen Aufgabentypen in einem Modul zu pr ufen.X 8. Sparsamkeit bei der Benutzungsschnittstelle Die Informatikstudierenden hatten alle das Nebenfach Medieninformatik und haben ihr Wissen zu Softwareergonomie genutzt, um die Benutzungsober ache ansprechend und intuitiv zu gestalten. Eine vertiefte Analyse der Benutzungsfreundlichkeit { uber die Unterrichtserprobung und Peer-Reviews hinaus { fand nicht statt. {/X 9. Verbreitung der Lernumgebung Der Verbreitungsprozess der Lernsoftware Pattern Park hat gerade erst begonnen. Neben der vorhandenen Webseite ist uber weitere Verbreitungsmoglichkeiten wie Bildungsserver nachzudenken. Tabelle 5.5 zeigt die Zugrisstatistik f ur Pattern Park im ersten Jahr nach der Fertigstellung. X 10. Sicherstellung von Unterhalt und Kontinuit atDadurch, dass die Software unter der GNU Lesser General Public License steht, ist eine { auch universit atsunabh angige { Weiterentwicklung prinzipiell m oglich. {/ X Analysiert man die Entwicklung der Software Pattern Park hinsichtlich der pragmatischen Empfehlungen, so ist vor allem hervorzuheben, dass fr uhzeitig R uckmeldungen von Sch ulern eingefordert und deren Anregungen integriert wurden. Das Interesse an der Lernsoftware Pattern Park zeigt die Zugrisstatistik des Webservers (Tabelle 5.5). F ur die Lernsoftware Pattern Park sind die von Hubwieser formulierten Fragen zum Medieneinsatz daher positiv zu beantworten: 1."Ist dieses Medium eindeutig genug, um das intendierte Lernziel unmissverst andlich und klar erscheinen zu lassen? 2. Repr asentiert dieses Medium den intendierten Inhalt derartig isomorph, dass es eine optimale Erfahrungsquelle f ur den Lernprozess schat? 3. Ist dieses Medium attraktiv genug, um Aufmerksamkeit zu erregen?" (Hubwieser 2007a, S. 40) Kritische Betrachtung der Lernsoftware Pattern Park Die ersten Erprobungen im Unterricht (Kapitel 6 und 8) zeigen, dass die Lernsoftware attraktiv genug ist, um Aufmerksamkeit der Sch uler zu erregen. Auerdem sind die Einbettung in einen Lebensweltkontext und das Anbieten unterschiedlicher Sichten dazu geeignet, den Unterrichtsgegenstand zu repr asentieren, und auch die Ubungsaufgaben sind auf die im Lernmodul formulierten Lernziele ausgerichtet. Dennoch wird die weitere Verbreitung sehr davon abh angen, Lehrpersonen von der Lernsoftware zu uberzeugen. Fundamentale Ideen als Unterrichtsinhalt konnen einen starken Beitrag dazu leisten. Es ist jedoch aus mehreren R uckmeldungen zu entnehmen, dass die Verwendung von Entwurfsmustern zum Teil hemmend wirkt. Dem kann durch Einbettung in gut ausgearbeitete Unterrichtssequenzen und die Hervorhebung der fundamentalen Ideen entgegen gewirkt werden. Ein weiterer Kritikpunkt zur Lernsoftware ist sicherlich5.7. Zusammenfassung und Schlussfolgerungen f ur die Kompetenzentwicklung 169 Tabelle 5.5: Zugrisstatistik des Webservers f ur die Lernsoftware Pattern Park binnen eines Jahres Jahr Monat Downloads Windows Linux MacOS 2007 Juli 108 5 3 August 133 23 8 September 114 20 12 Oktober 106 8 6 November 113 14 2 Dezember 74 4 4 2008 Januar 93 16 12 Februar 75 6 7 Marz 70 18 6 April 75 9 5 Mai 63 7 4 Juni 62 12 6 insgesamt 1086 142 75 dahingehend anzubringen, dass freies Experimentieren im Sinne der Interaktivit atsstufen 5 bis 6 innerhalb der Lernsoftware nur im Klassendiagrammeditor m oglich ist. Die Animationen und Aufgaben im Freizeitparkkontext mit und ohne formale Darstellungen sind durch die Realsicht weitaus ansprechender gestaltetet, jedoch von geringerem Freiheitsgrad. In dem vorliegenden Unterrichtsmodell ist die Lernsoftware Pattern Park daher zur Motivation und vor allem zur Kombination unterschiedlicher Sichten hinsichtlich Verhalten und Struktur, zur Verbindung dynamischer und statischer Darstellungen und zur Veranschaulichung fundamentaler Ideen einzusetzen. Hilfefunktionen unterst utzen den Lernenden im Pattern Park. Mehr Freiheiten im Lehr-Lernprozess bieten dagegen kleine Programme, die strukturell auf ausgew ahlten Entwurfsmustern basieren (Abschnitt 5.6.2). 5.7 Zusammenfassung und Schlussfolgerungen f ur die Kompetenzentwicklung 5.7.1 Zusammenfassung Zur F orderung der Kompetenzentwicklung mit Informatiksystemen wurde ein Unterrichtsmodell entwickelt. Daf ur wurde in diesem Kapitel zun achst die Intention des Unterrichtsmodells erlautert (Abschnitt 5.2). Eine Strategie zur Strukturierung inklusive einer Fokussierung der Ergebnisse der Analyse des Forschungsstandes wurde vorgestellt (Abschnitt 5.3). Schwerpunkte des Unterrichtsmodells zur F orderung der Kompetenzentwicklung mit Informatiksystemen bilden vernetzte fundamentale Ideen der Informatik und Entwurfsmuster als Strukturmodelle. Es wurde ein systemanalytischer Top-down-Zugang zu Informatiksystemen gew ahlt, der den Blick auf das System und den Blick in das System kombiniert, ohne die Erstellung eines konkreten Systems zum Ziel zu haben. Damit wird der h augen Schwierigkeit des Informatikunterrichts begegnet, dass Sch uler stark unterschiedliche Vorkenntnisse hinsichtlich der Syntax einer Programmiersprache haben. Es folgte die Forderung nach informatischen Wissensrepr asentationen fur vernetzte fundamentale Ideen der Informatik, die die konzeptuelle Planung des Unterrichtsmodells unterst utzen. Exemplarisch erfolgte eine Ausarbeitung von Entwurfsmustern als Wissensrepr asentation (Abschnitt 5.4). Aus der Strukturierung der Basiskompetenzen zur F orderung der Kompetenzentwicklung mit Informatiksystemen wurde abgeleitet, dass Sch uler in der Lage sein m ussen, Informatiksysteme systematisch zu erkunden. Ein systematisches Vorgehen in Anlehnung an Unterrichtsexperimente unter Ber ucksichtigung unterschiedlicher kognitiver Niveaustufen wurde entwickelt (Abschnitt 5.5). Abschlieend wurden Konsequenzen f ur Lernsoftware1705. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung diskutiert, die vernetzte fundamentale Ideen uber Entwurfsmuster aufgreift (Abschnitt 5.6). Damit wird eine Anleitung zum einfachen Erstellen von analysefreundlichen Programmen gegeben. Software, die auf nur einem oder zwei Entwurfsmustern basiert, ist dar uber hinaus leicht in andere Kontexte zu transferieren, so dass der Vorbereitungsaufwand f ur die Lehrperson gering ist. Die gut dokumentierten Entwurfsmusterkataloge unterst utzen die Lehrperson bei der Entwicklung. Im Rahmen der vorliegenden Arbeit wurden mehrere derartige Programme konstruiert. Erganzt werden die Materialien durch die umfangreiche Lernsoftware Pattern Park. Abbildung 5.11 zeigt die schematische Darstellung des Unterrichtsmodells. Systematische E rkundung  v on InformatiksystemenE ntwurfsmuster als  Wissenrepräsentation von fundamentalen Ideen Klassifikationskriterien: 1. Abstraktion 2. Zweck 3. Vernetzte fund. Ideen 4. Zusammenhänge 5. Komplexität 6. Lebensweltbezug 7. ParameterLernsoftware a) Entwurfsmuster als      strukturelle Grundlage b) PatternPark zu  fundamentalen      Ideen der Informatik Nach außen sichtbares Verhalten 1. Name des Systems 2. Benutzungsoberfläche 3. Funktionalität 4. Beziehung zwischen Elementen 5. Informatische Konzepte 6. Mit Sonderfällen ex perimentieren 7. Auswertung von Fehlern 8. Hypothetischer EinsatzInnere Struktur 1. Name des Projektes 2. Identifikation der Klassen 3. Operationen und Attribute 4. Klassendiagramm erstellen 5. Informatische Konzepte 6. Behandlung von Sonderfällen 7. Fehlerursachen 8. Bewertung des Systems 9. Modifikation des SystemsUnterrichtsmodel zu Informatiksystemen und Kompetenzentwicklung  Zielsetzung und Definition  Strategien zur Strukturierung E xperimente Abbildung 5.11: Schematische Darstellung des Unterrichtsmodells zur Kompetenzentwicklung mit Informatiksystemen 5.7.2 Schlussfolgerungen f ur die Kompetenzentwicklung mit Informatiksystemen Forderung von Schl usselkompetenzen im Unterrichtsmodell Hinsichtlich der Kompetenzentwicklung sind Sch ulertatigkeiten und speziell Handlungen mit Informatiksystemen notwendig. Als zentrale Sch ulertatigkeit wurde in dem Unterrichtsmodell die systematische Erkundung von Informatiksystemen herausgearbeitet (Abschnitt 5.5). Insbesondere wurde betont, dass Fehler und unerwartetes Verhalten von Informatiksystemen es den Schulern erm oglichen, Inkonsistenzen in der Software und ihrem kognitiven Modell aufzudecken (vgl."Anticipation of breakdown" und"Readiness-to-hand" (Winograd und Flores 1988, S. 164), (Hubwieser 2007a, S. 47)). Dadurch werden sie in die Lage versetzt, Informatiksysteme interaktiv anzuwenden, d. h. sie erwerben die Schl usselkompetenz (1c) gem a DeSeCo (Abschnitt 2.1.2; (OECD 2005)). Sie sind in der Lage, Potential und Grenzen einzusch atzen und Informatiksys-5.7. Zusammenfassung und Schlussfolgerungen f ur die Kompetenzentwicklung 171 teme in ihren Alltag zu integrieren (OECD 2005, S. 13). Damit k onnen sie Informatiksysteme beispielsweise als Lernmedium einsetzen und w ahlen zielgerichtet Anwendungen aus. Neben der bewussten Anwendung von typischen Informatiksystemen bedarf Kompetenzentwicklung mit Informatiksystemen aber auch weitergehender informatischer Kenntnisse, um sich Fertigkeiten und F ahigkeiten zur interaktiven Nutzung von Informatiksystemen als Werkzeug anzueignen. "Um dieses Potenzial zu nutzen, sind weiterreichende F ahigkeiten und Fertigkeiten erforderlich, die uber eine einfache Internet-Nutzung, den Versand von E-Mails usw. hinausgehen" (OECD 2005, S. 13). Kompetenzentwicklung mit Informatiksystemen erlaubt es, deren Anwendungsbereiche f ur das Individuum zu erweitern. In Kapitel 2 wurde argumentiert, dass Bereitschaften und Einstellungen zur Kompetenz geh oren. Damit stellt sich die Frage nach Erwartungshaltungen der Sch uler gegen uber Informatiksystemen, die dann ausschlaggebend sind, ob ein Sch uler sie als Werkzeug nutzt (DeSeCo: 1c). Zur F orderung der Motivation werden f ur die systematische Erkundung unerwartete Ereignisse und Beobachtungen als Ausgangspunkt gew ahlt. Durch die erwartete erhohte Motivation ist es Sch ulern dann m oglich, sich auf ihr Handeln zu konzentrieren und diese F ahigkeit in ihren auerschulischen Alltag zu transferieren. Es wurde herausgestellt, dass Sch uler die"Versuch-Irrtum"-Strategie f ur Kompetenzentwicklung nicht anwenden sollen, sondern ihr Handeln reektieren m ussen. Durch die systematische Erkundung von Informatiksystemen bekommen die Sch uler eine Handreichung, um eigenst andig zu handeln (DeSeCo: 3; (OECD 2005, S. 16)). Durch die F ahigkeit, sich selbst unbekannte Informatiksysteme zu erschlieen, k onnen sie an unterschiedlichen Projekten innerhalb und auerhalb der Schule aktiv teilnehmen (DeSeCo: 3b). Auerdem k onnen sie durch vorheriges Erkunden eines Informatiksystems als Individuen die Konsequenzen ihres Handeln einsch atzen, z. B. hinsichtlich der Bereitschaft, pers onliche Daten im System zu speichern, um Entscheidungen zu f allen und Verantwortung zu ubernehmen (DeSeCo: 3a). Reexion uber den hypothetischen Einsatz von Informatiksystemen einschlielich sozialer Implikationen wird in der systematischen Erkundung des nach auen sichtbaren Verhaltens von Informatiksystemen gefordert. Die Notwendigkeit, die systematische Erkundung eines Informatiksystems zu dokumentieren und mit Mitsch ulern uber das System und das geplante Experiment zu sprechen, f ordert die Kooperationsf ahigkeit der Sch uler. Sie erm oglicht das Agieren in heterogenen Gruppen zur Bew altigung einer Anforderungssituation mit Informatiksystemen (DeSeCo: 2b). Bei der Analyse der inneren Struktur von Informatiksystemen ist der Wechsel zwischen unterschiedlichen Rollen hilfreich, z. B. Anwender, Softwareentwickler und Auftraggeber. Durch Empathie gelingt es Sch ulern, unterschiedliche Anforderungen an Informatiksysteme abzuleiten und Verst andnis f ur die gew ahlte Strukturierung aufzubringen (DeSeCo: 2a). Auch bei kleinen Modikationen bestehender Systeme kann in Paaren an der Aufgabe gearbeitet werden, um die Kommunikationsf ahigkeit in heterogenen Gruppen zu erlernen (DeSeCo: 2b). Forderung der ICT Literacy durch das Unterrichtsmodell Zur Strukturierung des Unterrichtsmodells wurden Strukturmodelle und vernetzte fundamentale Ideen besonders betont (Abschnitt 5.3). Durch die Fokussierung auf Entwurfsmuster (Abschnitt 5.4) ist hinsichtlich der von der UNESCO denierten Literacys ein Beitrag zur Software Literacy zu erwarten (UNESCO 2008). Dennoch ist das Unterrichtsmodell nicht notwendigerweise mit Softwaremustern verkn upft. Vielmehr erm oglicht die Vernetzung von fundamentalen Ideen in Strukturmodellen ebenso eine st arkere Betonung der Hardware, z. B. durch das Von-NeumannBlockmodell oder das Ebenenmodell des Rechners (vgl. Abschnitt 9.3). Durch den Einsatz unterschiedlicher Lernsoftware (Abschnitt 5.6) ist des Weiteren ein Beitrag zur Media Literacy zu erwarten.1725. Vorgehensweise zur Entwicklung eines Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung Tabelle 5.6: Einordnung des Unterrichtsmodells in den EQR bis Niveaustufe 4 Kenntnisse Fertigkeiten Kompetenz 1 Grundlegendes Allgemeinwissen, z. B. zur Verbreitung typischer InformatiksystemeGrundlegende Fertigkeiten, die zur Ausf uhrung einfacher Aufgaben mit Informatiksystemen erforderlich sind, z. B. Analyse der Beziehung zwischen Elementen der Benutzungsober ache und der Funktionalit at des SystemsArbeiten oder Lernen mit Informatiksystemen unter direkter Anleitung in einem vorstrukturierten Kontext, z. B. lehrergeleitetes Erkunden eines Informatiksystems 2 Grundlegendes Faktenwissen zu Informatiksystemen, z. B. zur ZugriskontrolleGrundlegende kognitive und praktische Fertigkeiten mit Informatiksystemen, um Aufgaben auszufuhren und Routineprobleme unter Verwendung einfacher Regeln und Anwendungssoftware zu losen, z. B. Vermeidung von Versuch-Irrtum-StrategienArbeiten oder Lernen mit Informatiksystemen unter Anleitung mit einem gewissen Ma an Selbstst andigkeit, z. B. Einsetzen einer Lernsoftware unter Aufsicht der Lehrperson 3 Kenntnisse von Fakten, Grunds atzen, Verfahren und allgemeinen Begrien zu Informatiksystemen, z. B. systematisches TestenEine Reihe kognitiver und praktischer Fertigkeiten zur Erledigung von Aufgaben und zur L osung von Problemen, wobei die systematische Erkundung eines Informatiksystems ausgew ahlt und angewandt wird, z. B. Erkundung der neuen Version einer StandardsoftwareVerantwortung f ur die Erledigung von Arbeitsoder Lernaufgaben ubernehmen, z. B. die Bereitschaft, bei der L osung von Problemen die systematische Erkundung an unbekannte Systeme anpassen 4 Breites Spektrum an Theorieund Faktenwissen zu Informatiksystemen, z. B. Universalit at und die Rolle der EntwurfsmusterEine Reihe kognitiver und praktischer Fertigkeiten, die erforderlich sind, um L osungen f ur spezielle Probleme zu nden, z. B. Beheben von Fehlerursachen durch Identikation von Sonderf allen oder Modikation von QuelltextSelbstst andiges T atigwerden innerhalb der Handlungsparameter zu Informatiksystemen, die in der Regel bekannt sind, sich jedoch andern k onnen; Beaufsichtigung der Routinearbeit anderer Personen, wobei eine gewisse Verantwortung f ur die Bewertung und Verbesserung der Arbeitsoder Lernaktivit aten ubernommen wird, z. B. bei der systematischen Erkundung und Identikation von Sonderfallen der Software Einordnung des Unterrichtsmodells in den Europ aischen Qualikationsrahmen Exemplarisch k onnen Themen und Lernziele des Unterrichtsmodells in den Europ aischen Qualikationsrahmen f ur lebenslanges Lernen (EQR) eingeordnet werden. In Kapitel 2 wurde argumentiert, dass f ur informatische Bildung in der Sekundarstufe II nicht alle Niveaustufen des EQR zu adressieren sind. Tabelle 5.6 f uhrt m ogliche Lernziele und Unterrichtsinhalte anhand des Unterrichtsmodells bis einschlielich Niveaustufe 4 auf. Im Unterrichtsmodell selbst werden unterschiedliche Lernzielebenen gem a der Lernzieltaxonomie nach Anderson und Krathwohl (2001) genutzt (Abschnitt 5.5). Die theoretisch begr undete Entwicklung des Unterrichtsmodells erfordert nun eine exemplarische Erprobung in der Sekundarstufe II an allgemein bildenden Schulen (Kapitel 6).6. Erste exemplarische Erprobung des Unterrichtsmodells 6.1 Uberblick Ein Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen wurde theoretisch begr undet (Kapitel 5). In diesem Kapitel wird die erste exemplarische Erprobung des Unterrichtsmodells beschrieben. Dazu erfolgt eine Einordnung in den Forschungsverlauf (Abschnitt 6.2). Die Rahmenbedingungen einschlielich inhaltlicher Konzeption, Lerngruppe, zeitlichen und technischen Restriktionen sowie Unterrichtsmethodik werden in Abschnitt 6.3 angegeben. Abbildung 6.1: Einordnung des sechsten Kapitels in den Forschungsverlauf Die Beschreibung und Durchf uhrung der Erprobung geschieht in Abschnitt 6.4. In Abschnitt 6.5 werden die erhobenen Daten zur Evaluation hinsichtlich Machbarkeit und Akzeptanz durch Schuler und Lehrer herangezogen. Abschlieend wird eine kurze Diskussion der Ergebnisse vorgenommen (Abschnitt 6.6). Abbildung 6.1 zeigt die Einordnung des Kapitels in den Forschungsverlauf.174 6. Erste exemplarische Erprobung des Unterrichtsmodells 6.2 Motivation der Unterrichtserkundung und Einordnung in den Forschungsverlauf Die erste Unterrichtserprobung fand im Herbst 2006 statt (Stechert 2007c). Vorausgegangen waren die theoretische Fundierung der Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik (vgl. (Stechert 2006a), (Stechert 2006b)) und die Unterrichtsmodellentwicklung (vgl. Stechert 2006c). Basiskompetenzen wurden im Unterrichtsprojekt in drei Bereiche Si; i2fA; B; Cggrob strukturiert, die im Fokus des Unterrichtsmodells zu Informatiksystemen stehen (vgl. Claus und Schwill 2006, S. 677): SA: Aspekte des nach auen sichtbaren Verhaltens. SB: Aspekte der inneren Struktur, die auf Strukturmodellen und vernetzten fundamentalen Ideen der Informatik basieren. SC: Ausgew ahlte Implementierungsaspekte zur Entwicklung einer konkreten Realisierung. Im Sinne von Basiskompetenzen als Mindestanforderungen, die ein m undiger B urger im Alltag erfullen muss, wurde SCgering gewichtet und wenig Lernzeit darauf verwendet (Abschnitt 2.1). Der exemplarische Charakter der Umsetzung des Unterrichtsmodells musste trotz zeitlicher Restriktion gew ahrleistet werden. Annahme ist, dass die exemplarische Umsetzung von ausgew ahlten Teilen eines umfassenderen Forschungsprojekts verallgemeinerbare R uckschl usse hinsichtlich Lernschwierigkeiten auf das Forschungsprojekt insgesamt erlaubt (Schubert et al. 2007). Zum Beispiel bleiben durch die begr undete Auswahl von einigen wenigen Entwurfsmustern wesentliche Merkmale des Unterrichtsmodells bestehen. Dies gilt insbesondere bez uglich der Gestaltung von qualitativ hochwertigen Aufgaben zur Kompetenzentwicklung mit Informatiksystemen: So sind die ausgew ahlten Entwurfsmuster Wissensrepr asentationen f ur die in Informatiksystemen vorkommenden vernetzten fundamentalen Ideen der Informatik. Zur Strukturierung des Unterrichts wurden Sch ulertatigkeiten und Unterrichtsinhalte dem nach auen sichtbaren Verhalten, der inneren Struktur und Implementierungsaspekten zugeordnet. Lernende setzen das nach auen sichtbare Verhalten eines Informatiksystems in Beziehung zu der zugrunde liegenden inneren Struktur. Trotz Einschr ankung auf Softwaresysteme f ur Kompetenzentwicklung mit Informatiksystemen bleibt der exemplarische Charakter der Erprobung bewahrt, denn: "Hardware und Software sind logisch aquivalent" (Tanenbaum und Goodman 2001, S. 27). Bei ersten Rechnern war die Grenze zwischen Hardware und Software gut erkennbar. Heutzutage jedoch sind Hardund Software durch hinzuf ugen, entfernen und verschmelzen von Ebenen kaum noch zu unterscheiden. Tanenbaum und Goodman (2001) verweisen darauf, dass Softwareberechnungen auch direkt in der Hardware durchgef uhrt werden k onnen und Software wiederum Hardwarefunktionen simulieren k onne. Untersuchungsschwerpunkte sind 1. die Tragf ahigkeit und Auswirkung der Dreiteilung in Systemverhalten, innere Struktur und Implementierungsaspekte, 2. die Eignung ausgew ahlter Entwurfsmuster zur Repr asentation und Vernetzung fundamentaler Ideen der Informatik in kleinen Programmen, 3. die exemplarische Erprobung von Modulen der Lernsoftware Pattern Park, 4. die Lehr-Lernmethodik mit systematischen Erkundungen von Informatiksystemen und die Akzeptanz der Sch uler.6.3. Rahmenbedingungen und Untersuchungsmethodik 175 6.3 Rahmenbedingungen und Untersuchungsmethodik 6.3.1 Inhaltliche Konzeption Das theoretische Unterrichtsmodell muss an die Vorkenntnisse der konkreten Zielgruppe angepasst werden. Bei der Gestaltung von Lernmitteln f ur eine erste Erkundung des Unterrichtsmodells spielte die konkrete Lernsituation in Jahrgangsstufe 12 der Kooperationsschule eine groe Rolle. In Nordrhein-Westfalen ist Objektorientierung in der Sekundarstufe II ein weit verbreitetes Konzept (MSWWF 1999), das in der Kooperationsschule eingesetzt wird. Zur Vorbereitung wurde mit dem Informatiklehrer, in dessen Klasse das Unterrichtsprojekt durchgef uhrt werden sollte, und einem weiteren Informatiklehrer der Schule vier Monate vor der Durchf uhrung ein erster Entwurf der Unterrichtskonzeption diskutiert, um Umsetzungsprobleme fruhzeitig zu erkennen. Mit Blick auf das Schulcurriculum wurden die Lernziele zusammengestellt. Die Ergebnisse dieser Diskussionen ossen auch in die Unterrichtsmodellentwicklung (vgl. Stechert 2006c) ein. Dar uber hinaus hat der Autor in dem Kurs zwei Wochen vor der Durchfuhrung hospitiert, um an vorangegangenen Unterricht anzukn upfen. Dabei erwies es sich als unkompliziert, den bisherigen Unterricht nun nahtlos in einem Unterrichtsprojekt weiterzuf uhren, das dem Unterrichtsmodell zu Informatiksystemen und Kompetenzentwicklung folgte. Dies ist neben der Tatsache, dass konkrete Programme Unterrichtsgegenstand waren, auch auf die objektorientierten Entwurfsmuster zur uckzuf uhren. So eignete sich das Iteratormuster, um an die Datenstruktur Schlange anzukn upfen, die im Unterricht behandelt wurde. Das Thema Zugriskontrolle ist aufgrund seiner Wichtigkeit bei der Anwendung von Informatiksystemen aufgenommen worden (Abschnitt 5.4.4). Tabelle 6.1 zeigt die in Absprache mit den Informatiklehrern der Kooperationsschule erarbeitete Konzeption. Durch die geringe zur Verf ugung stehende Zeit wurde im Verlauf des Projektes von dieser Vorlage insofern abgewichen, als dass das Programm zur Zugriskontrolle auf Musikst ucke nur zur Motivation diente, und die Sch uler f ur die Listenstruktur bei einem Programm, einer einfachen Arztpraxissoftware, blieben. Tabelle 6.1: Struktur der ersten Unterrichtserprobung inklusive Sch ulertatigkeiten Thema (Muster)SA: Nach auen sichtbares Verhalten von ISSB: innere Struktur von ISSC: ausgew ahlte Implementierungsaspekte von IS Experimente mit BlackBox-SichtErkundung der inneren Struktur und Modellierung mit Klassenund SequenzdiagrammModikation einer konkreten Realisierung Zugri auf eine Liste (Iterator)Erkennen von Listeneigenschaften durch Testen von einfachen Programmen (Arztpraxis mit Warteschlange)Objektorientierter Entwurf einer Listenstruktur; Schlange vs. ListeIteration durch Iterator modellieren; Programmieren von Programmfragmenten Zugriskontrolle (Proxy)Textverarbeitung: Zugri auf Graken (virtueller Proxy); InternetBeispiel anhand eines Arbeitsblattes; Verhalten eines Programms mit Zugrisz ahler auf Musiktitel evaluieren; Vorteile von ZugriskontrolleObjektorientierter Entwurf der Zugriskontrolle; Proxy-Cache, Verbindung mit Liste als weiteres Beispiel; Zugriskontrolle auf Liste mit Musikst ucken entwerfen (Smart Reference)Erweiterung der Zugriskontrolle um das Zahlen der Zugrie (z. B. Zugri auf ein Musikst uck) mit Delphi; Programmierung von Programmfragmenten und Anpassung an vorgegebenen Quellcode176 6. Erste exemplarische Erprobung des Unterrichtsmodells Tabelle 6.2: Exemplarische Ubersicht der inhaltlichen Konzeption anhand der Strukturierung der Basiskompetenzen exemplarische Unterrichtsinhalte SA;1 Die Datenstruktur Schlange und Schlangentraversierung sowie weitere Anforderungen an das Entwurfsmuster Iterator. SA;2 Zugriskontrolle anhand des Entwurfsmusters Proxy. SB;1 Das Konzept der Schnittstelle anhand der Kombination von Schlange und Iteratorentwurfsmuster sowie phanomenologischer Vorwegnahme der Zugriskontrolle. SB;2 Zugriskontrolle anhand des Entwurfsmusters Proxy sowohl statisch, d. h. via Klassendiagramm, als auch dynamisch mittels Sequenzdiagramm. SC;1 Unterschiedlicher Traversierungsalgorithmen durch Modikation des Iteratormusters. SC;2 Zuweisung von Zugrisrechten durch Vererbung und Modikation von Implementierungsaspekten im Proxyentwurfsmuster. In der durchgef uhrten Unterrichtserprobung lag der Schwerpunkt auf dem Zusammenspiel zwischen dem nach auen sichtbaren Verhalten und der inneren Struktur eines zum Teil selbst erstellten Programms (S AundSB). Zur Formulierung der Teillernziele wurden Operatoren aus den Anforderungsbereichen I (z. B. Wiedergabe von Kenntnissen), II (z. B. Anwenden und Transferieren von Kenntnissen) und III (z. B. Probleml osen und Bewerten) der Einheitlichen Prufungsanforderungen (EPA) Informatik (KMK 2004) sowie nach Blooms uberarbeiteter Taxonomie eingesetzt (Anderson und Krathwohl 2001). Exemplarische Unterrichtsinhalte anhand der Strukturierung der Basiskompetenzen zeigt Tabelle 6.2. Die konkrete Umsetzung wird in Abschnitt 6.4 beschrieben. Der Bereich SCwar nicht vordergrundig Beobachtungsziel des Projekts. Nur vereinzelt wurde existierender Quellcode von den Schulern erweitert, um an vorhandenes Vorwissen anzukn upfen. 6.3.2 Lerngruppe und zeitlicher Rahmen Die Erprobung des Unterrichtsmodells fand im Rahmen eines Grundkurses Informatik in der Jahrgangsstufe 12 eines Siegener Gymnasiums statt. Der Kurs setzte sich zusammen aus vier Schulerinnen und 19 Sch ulern. Dadurch, dass es sich hierbei um einen regul aren Grundkurs handelte, sind valide qualitative Auswertungen m oglich, da der Kurs nicht nur aus hoch motivierten Schulern besteht, wie es im Rahmen von Wahlf achern oft der Fall ist. Um die Ergebnisse der Fallstudie im Sinne von Plausibilit atserkl arungen weitergehend verallgemeinern zu k onnen, sollten die Sch uler Vorkenntnisse in objektorientierter Modellierung besitzen und m oglichst keine Spezialisierung im technisch-naturwissenschaftlichen Bereich vorweisen. Die Sch uler nutzten bereits seit einem halben Schuljahr die objektorientierte Modellierung u. a. mit der Klassenbibliothek "Stifte und M ause" (Czischke et al. 1999). Assoziationen, Vererbung, das Erstellen von Klassen und Erzeugen von Objekten sowie ereignisgesteuerte Programmierung waren bekannt ebenso wie grundlegende Programmierkonzepte, z. B. Polymorphie und dynamisches Binden sowie Schleifen und Variablen. Die Hospitation in der Klasse kurz vor Beginn des Unterrichtsprojekts machte deutlich, dass Klassendiagramme als wichtiges Strukturbeschreibungsmittel eines Informatiksystems ohne weitere Vorbereitung eingesetzt werden konnten. Allgemein el w ahrend der Hospitation die Schwierigkeit der Sch uler auf, zwischen Daten und Darstellung zu unterscheiden { ein Abgleich zwischen Datenhaltung und Darstellungsebene fand in den Sch ulerlosungen dementsprechend oft nicht statt. Dies war ein erster Ansatzpunkt f ur die Erkundung des nach auen sichtbaren Verhaltens des Programms im Unterrichtsprojekt. Schnittstellen und Geheimnisprinzip sowie das Substitutions-Prinzip nach Liskov, welches besagt, dass Unterklassen Basisklassen substituieren, da Unterklassen alles von der Oberklasse erben, waren nur intuitiv bekannt. Die Erprobung umfasste 12 Unterrichtsstunden zu drei Stunden pro Woche. Zus atzlich wurden ein Abschlusstest und eine Akzeptanzbefragung mit den Sch ulern durchgef uhrt. Tabelle 6.36.3. Rahmenbedingungen und Untersuchungsmethodik 177 Tabelle 6.3: Themenliste der ersten Unterrichtserprobung mit Einzel(ES) und Doppelstunden (DS) Termin Stundenthema 17.10.2006 (ES) Systematisches Erkunden des nach auen sichtbaren Verhaltens und der inneren Struktur eines Informatiksystems am Beispiel eines Arztpraxisprogramms 19.10.2006 (DS) Zusammenh ange zwischen dem nach auen sichtbaren Verhalten und der inneren Struktur eines Informatiksystems herstellen 24.10.2006 (ES) Beschreiben der inneren Struktur mit Klassendiagrammen 26.10.2006 (DS) Iteration mit Iteratorentwurfsmuster 31.10.2006 (ES) Varianten der Iteration mit Iterator 02.11.2006 (DS) Zugriskontrolle mittels Proxy 16.11.2006 (DS) Beschreiben dynamischer Abl aufe bei der Zugriskontrolle 21.11.2006 (ES) Sequenzdiagramme zur Beschreibung von dynamischen Abl aufen (studentische Lehrperson) 23.11.2006 (ES) schriftliche Ubung: Test Akzeptanzbefragung zeigt die Ubersicht uber die Unterrichtsstunden. Die Unterrichtsentw urfe und -materialien auf der beiliegenden CD sind entsprechend dieser Ubersicht geordnet (Anhang A.3). Der Unterricht wurde bis auf eine Doppelstunde gegen Ende der Erkundung, die von einem Lehramtsstudierenden im Rahmen der schulpraktischen Studien unterrichtet wurde, von der Forschungsperson gehalten und vom Informatiklehrer sowie einem weiteren Mitarbeiter des Lehrstuhls f ur Didaktik der Informatik und E-Learning der Universit at Siegen gezielt beobachtet, um erste Erkenntnisse uber typische Bearbeitungsstrategien und Fehler zu gewinnen. Zur Methodenkritik siehe Abschnitt 1.2.2. Es wurde angenommen, dass die Sch uler keine Vorkenntnisse zur systematischen Erkundung des nach auen sichtbaren Verhaltens eines Informatiksystems aufweisen. Die Unterrichtsstunden wurden sowohl mit dem Lehrer als auch mit weiteren Mitarbeitern des Instituts f ur Didaktik der Informatik und E-Learning vorund nachbereitet. Der Informatiklehrer stand abschlieend f ur ein Leitfaden-Interview zur Verf ugung. Die Erprobung wurde unterbrochen durch eine Woche, in der der Informatiklehrer (aufgrund einer Vortragsreise des Autors) unabh angig vom Unterrichtsprojekt unterrichtete. Dar uber hinaus gab es eine Verz ogerung durch einen beweglichen Ferientag direkt im Anschluss, so dass insgesamt eine anderthalbw ochige Pause entstand. 6.3.3 Unterrichtsmethodik und technischer Rahmen Bei der Gestaltung des Unterrichtsprojekts wurde besonders darauf geachtet, dass die Sch ulertatigkeiten im Mittelpunkt standen. Somit wurde m oglichst wenig in Lehrervortr agen umgesetzt, stattdessen war das Unterrichtsprojekt sch ulerzentriert angelegt. Lehrervortr age nahmen nur wenige Minuten pro Unterrichtsstunde ein. Partnerarbeit war die vorherrschende Arbeitsform, sowohl an den Rechnern als auch bei schriftlichen Arbeitsauftr agen. Die r aumliche Gestaltung des Informatiklabors unterst utzte die Trennung von Theorie und Informatikexperimenten mit Rechnern durch den zentralen Kommunikationsbereich und die dezentral an den Seiten aufgestellten Rechner. Das Schulintranet besa eine Verbindung zum Internet und eine von allen gemeinsam nutzbare Speicherpartition des Dateiservers erm oglichte den problemlosen Austausch groerer Dateien. Der vordere Demonstrationsbereich des Lehrers war mit Whiteboard, Rechner und Projektor zur Pr asentation ausgestattet.178 6. Erste exemplarische Erprobung des Unterrichtsmodells 6.4 Beschreibung und Durchf uhrung der Erprobung 6.4.1 Lernphasen und Problemstellen im Unterrichtsprojekt Startpunkt zur Motivation war eine Ubersicht uber prominente Fehlerquellen und Pannen einiger Informatiksysteme, z. B. reagierte der Bordcomputer eines Flugzeugs auf ein Leck in einem Kerosintank damit, dass er Kerosin aus dem zweiten Tank in den leeren Tank pumpte, um das Flugzeug zu stabilisieren. Das Flugzeug musste landen, da nach kurzer Zeit beide Tanks leer waren. Um Fehlvorstellungen analysieren zu k onnen, wurden s amtliche in den Unterrichtsstunden handschriftlich oder digital erstellten Sch ulerlosungen eingesammelt. Nach Abschluss des Unterrichtsprojekts wurde ein Test in Form einer schriftlichen Ubung durchgef uhrt. Um dessen Wichtigkeit f ur die Sch uler zu unterstreichen, sollten die Ergebnisse in die Gesamtnote einieen. Aus diesem Grund wurde die schriftliche Ubung nicht anonymisiert durchgef uhrt. Logische Verkn upfung des Unterrichtsprojekts war das Wechselspiel von Erkundung des nach auen sichtbaren Verhaltens eines Programms und der Betrachtung und Erstellung von Modellen der inneren Struktur. Begonnen wurde mit einem Programm einer Arztpraxis mit einer Warteschlange, das bereits im vorhergehenden Informatikunterricht von den Sch ulern mittels Klassendiagramm modelliert und in der Programmiersprache Objekt-Pascal mit Delphi 6 geschrieben worden war. Es wurde erweitert um das Iteratormuster ( SA;1). Erst f ur das Thema Zugriskontrolle ( SA;2) wurde ein neues Programm untersucht, das die Vergabe von Zugrisrechten realisierte (Abbildung 6.2). Dies geschah jedoch immer mit R uckbez ugen zum"Arztinformationssystem". Spiralf ormig wurden somit die Lernphasen wiederholt und auf die Themen Datenstruktur Schlange, Iteration und Zugriskontrolle angewendet (Tabelle 6.1). Es zeigte sich wahrend der Unterrichtsfolge, dass Vererbung eine Fehlerquelle darstellte (siehe Abschnitt 6.5.1). 6.4.2 Datenstruktur Schlange und Iteratormuster Zu Beginn des Unterrichtsprojekts wurde das nach auen sichtbare Verhalten des Arztinformationssystems systematisch erkundet, und anschlieend schlossen die Sch uler auf zugrunde liegende informatische Konzepte. Hierf ur wurde ein Experimentiervorgang beschrieben, der aus acht Schritten (Abschnitt 5.5.3; analog zur Schrittfolge in Abbildung 6.2) besteht und die sechs kognitiven Prozesse umfasst (vgl. Stechert 2007b), die in der uberarbeiteten Lernzieltaxonomie nach Bloom angegeben sind (Anderson und Krathwohl 2001). Er bestand aus dem Aufstellen von Hypothesen uber das Systemverhalten, dem Beschreiben und Dokumentieren des Experimentierablaufs, den R uckschl ussen aus dem tats achlichen Verhalten auf informatische Konzepte, dem Identizieren von Sonderf allen wie der leeren Schlange, dem Uberpr ufen der Umsetzung der Sonderf alle im Informatiksystem sowie Auswirkungen des Einsatzes des Informatiksystems. Insbesondere das Erkennen von m oglichen Konzepten el anfangs bei Schlange und Iterator schwer (SA;1), obwohl das Listenkonzept bekannt war. Mit dem Hinzuf ugen des Iterators wurde die Schlange in eine Liste uberf uhrt, da nun das Entfernen von Elementen an beliebiger Stelle m oglich wurde { beispielsweise bei einem Notfall oder wenn ein Patient des Wartens uberdr ussig wird und die Arztpraxis verl asst. Bei der Auswertung der ersten Durchf uhrung des Informatikexperimentes wurde nur bei etwas mehr als der H alfte der abgegebenen L osungen das Konzept der Schlange wieder erkannt. Der Sonderfall, dass die Schlange leer, bzw. die Frage, ob die Schlange voll sein kann, wurde im Plenum diskutiert. Die Demonstration der Informatikexperimente, sei es durch Lehrperson oder Sch uler, unterst utzte das Unterrichtsprojekt zu Informatiksystemen und Kompetenzentwicklung stark, da die neuen systematischen Vorgehensweisen zur Analyse erl autert werden konnten. Danach galt es, die innere Struktur des Programms anhand des Quellcodes und eines unvollst andigen Klassendiagramms zu untersuchen ( SB;1). Daf ur wurde die Vorgehensweise zur Erkundung der inneren Struktur eingesetzt (Abschnitt 5.5.4). Die Umsetzung der identizierten informatischen Konzepte in eine Klassenstruktur wurde thematisiert. Um dynamische Abl aufe in der inneren Struktur beschreiben zu k onnen, wurden w ahrend der ersten Woche in einer Partnerarbeit Objektdiagramme zu verschiedenen Zeitpunkten des Programmablaufs6.4. Beschreibung und Durchf uhrung der Erprobung 179 erstellt. Relativ uberraschend war f ur die Sch uler die Einsicht, dass der Iterator eine Variante der Zugriskontrolle ist ( SB;1). Die Analyse des Systemverhaltens f uhrte dazu, in der inneren Struktur Fehler schneller nden und beheben zu k onnen ( SC;1). 6.4.3 Zugriskontrolle Bei der Erkundung der Zugriskontrolle ( SA;2) war den Sch ulern das Vorgehen zur systematischen Erkundung des Systemverhaltens bekannt. Uberraschend war f ur die Sch uler bei der inneren Struktur der auf Vererbung basierende Ansatz zur Uberpr ufung der Zugrisrechte (siehe Klassendiagramm in Abbildung 6.3). Da das Verstehen von dynamischen Aspekten essenziell f ur Kompetenzentwicklung mit Informatiksystemen ist, wurde zur Beschreibung der Abl aufe bei der Zugriskontrolle ( SB;2) das Sequenzdiagramm genutzt. Einstiegsaufgabe war die Erstellung eines so genannten Interaktionsdiagramms (als Vorstufe des Sequenzdiagramms), anschlieend wurden einfache Sequenzdiagramme mit Elementen der Lernsoftware Pattern Park erstellt (Abschnitt 6.4.4). Die Einf uhrung der Zugriskontrolle mittels Proxy erm oglichte den Sch ulern, das Prinzip der Zugrirechte zu verstehen und selbst f ur bestimmte Situationen zu gestalten. So konnten neben Administrator, Benutzer und Gast weitere Anwender (-gruppen) mit bestimmten Rechten versehen werden ( SC;2). Abbildung 6.2 zeigt eine Aufgabe aus der ersten Unterrichtserprobung und die Benutzungsober ache der Software, die auf dem Entwurfsmuster Proxy basiert. Es lassen sich die Rollen Administrator, Benutzer und Gast identizieren. Falls ein Proxy eingeschaltet ist, unterscheiden sich die Schreibund Leserechte. Bei der Erkundung des Systemverhaltens m ussen die Sch uler Hypothesen dar uber bilden, ob Zugriskontrolle vorliegt und wie diese umgesetzt ist, um Fehlvorstellungen zu uberwinden. 1. Wie lautet der Name des Systems? (Erinnern; Faktenwissen) 2. Beschreiben Sie die Benutzungsober ache. (Verstehen; Faktenwissen) 3. Welche Funktionalit aten vermuten Sie unter Ber ucksichtigung der vorherigen Beobachtungen? (Verstehen; Begriiches Wissen) 4. Welche Beziehungen bestehen zwischen den Elementen? (Verstehen; Faktenwissen) 5. Welche informatischen Konzepte wurden eingesetzt, um die Funktionalit at zu erreichen? (Analysieren; Begriiches Wissen) 6. Analysieren Sie das Programm, indem Sie Sonderf alle ermitteln und mit ihnen experimentieren. (Anwenden; Begriiches Wissen) 7. Werten Sie Fehler und unerwartetes Verhalten aus { auch mit Blick auf die Sonderf alle der Konzepte. (Bewerten; Begriiches Wissen) 8. Hypothetischer Einsatz des Systems { Wie w urde sich das Programm in anderen (realen, komplexeren) Situationen verhalten? ((Er)schaen; Faktenwissen) Abbildung 6.2: Benutzungsober ache und Aufgabe zur Erkundung der lernf orderlichen Software zur Zugriskontrolle mit kognitivem Prozess und Wissensart gem a Lernzieltaxonomie (Anderson und Krathwohl 2001)180 6. Erste exemplarische Erprobung des Unterrichtsmodells Da die Sch uler Vorkenntnisse zum Programmieren hatten, verf ugten sie implizit uber eine Vorgehensweise zur Analyse von Quelltext. Sie mussten die in Abbildung 6.2 gegebene Vorgehensweise zur Erkundung der lernf orderlichen Software zur Zugriskontrolle durchf uhren (!Kriterium 6: Lebensweltbezug; S. 123). Eine erwartete Fehlvorstellung zur Zugriskontrolle war, dass ein Objekt den Zugri auf sich selbst kontrolliert. Meist wird jedoch ein Stellvertreterobjekt mit der gleichen Schnittstelle wie der des Originalobjekts eingesetzt (Abschnitt 5.4.4). Daher wurde die Benutzungsober ache der Software so gestaltet, dass die Sch uler leichter erkannten, dass ein Stellvertreterobjekt eingesetzt wird (Abbildung 6.2). Im weiteren Verlauf der systematischen Erkundung des Systemverhaltens waren die Sch uler nicht in der Lage, die Frage, wie ein Stellvertreter das selbe Verhalten wie das Original haben kann, hypothetisch zu beantworten. Erst bei der Analyse des Quelltextes erkannten die Sch uler, dass Zugriskontrolle mit Vererbung (!Kriterium 3: Vernetzte fundamentale Ideen der Informatik; S. 123) realisiert wurde, indem Stellvertreter und Original von der gleichen (abstrakten) Klasse erben. Dadurch ergibt sich f ur beide die gleiche Schnittstelle bei durchaus unterschiedlicher Spezialisierung. Eine gleichnamige Operation"lesen()" bzw."schreiben()" wird beim Original ein bestimmtes Verhalten ausl osen, wahrend beim Stellvertreter nur die Pr ufung der Zugrisrechte und ggf. die Weiterleitung an das Original durchgef uhrt wird. Zur Dokumentation der Erkundungsschritte sollten die Sch uler ein Klassendiagramm erstellen des Programms erstellen und so die Struktur des Proxymusters selbst erarbeiten. In diesem Zusammenhang ist es wichtig, Variationen des Entwurfsmusters ( ! Kriterium 5: Komplexit at; S. 123), z. B. die Erweiterung um die Benutzungsober ache, explizit im Unterricht aufzugreifen. So fragten Sch uler bei der Diskussion des Klassendiagramms des Proxymusters, wie der Zugri auf das Muster umgesetzt werden k onne. Dies ist durch die Benutzungsober ache, oder allgemeiner, durch einen Klienten m oglich, der in das Klassendiagramm integrierbar ist (vgl. Abbildung 5.8). Die Dokumentation des Systemverhaltens durch Formalisierung von Abl aufen stellte sich als weitere H urde dar. 6.4.4 Rolle der Lernsoftware Durch Modularisierung bei der Entwicklung der Lernsoftware Pattern Park konnten f ur die unterrichtliche Erprobung schon vorab Animationen zu Iteration ( SA;1) und Zugriskontrolle ( SA;2) sowie Ubungsmodule mit Sequenzdiagrammen ( SB;2) eingesetzt werden. Letzteres geschah bei der Nutzung eines Proxy zur Realisierung von Zugrisschutz. Insbesondere das Ubungsmodul gri eine Lebensweltsituation handlungsorientiert auf und schlug so eine Br ucke zwischen dem nach auen sichtbaren Verhalten und der inneren Struktur eines Informatiksystems einerseits und zwischen der statischen und dynamischen Strukturbeschreibung andererseits. Die Beobachtung der Bearbeitungsweisen hat ergeben, dass gerade diese Aufgaben, die das nach auen sichtbare Verhalten von Informatiksystemen und die Analyse der inneren Struktur verkn upfen, Schlussel zur Kompetenzentwicklung waren, denn hier wurden unterschiedliche Sichten auf das Informatiksystem kombiniert. Auerdem zeigte sich w ahrend des Unterrichtsprojekts, dass das fruhzeitige Vorf uhren der Animation den Sch ulern nicht nur die Problemstellung klarer werden lie, sondern gleichzeitig durch den Bezug zum Entwurfsmuster, einem"Losungsmuster", eine konkretere Vorstellung von L osungsans atzen unterst utzte. Bezuglich des oben bereits ausgef uhrten Beispiels der Zugriskontrolle wurde diese in der Unterrichtserprobung mittels Stellvertreter (Proxyobjekt) eingef uhrt. Die Sch uler kennen Stellvertreter aus ihren allt aglichen Erfahrung, z. B. Klassensprecher. Die Unterrichtseinheit begann mit der Animation, in der eine Geldkarte als Stellvertreter f ur Geld eingesetzt wurde (nach auen sichtbares Verhalten). Dadurch werden die Sch uler sensibilisiert f ur weitere Arten der Zugriskontrolle mittels Proxy. Beispielsweise ist die Funktionalit at des Schutzproxys mit Uberpr ufung von Rechten anhand eines Passwortes zu nennen, aber auch dar uber hinaus gehende Aktionen wie Datenspeicherung wann und wie oft die Karte genutzt wird und ggf. Weiterleitung der Daten an Dritte.6.4. Beschreibung und Durchf uhrung der Erprobung 181 Abbildung 6.3: Klassenund Sequenzdiagramm zum Zugrisschutz aus der Lernsoftware Pattern Park Sensibilisiert durch die Animation wurde in der Unterrichtserprobung nun das { vom Pattern Park unabh angige { Programm zu Zugrisrechten vorgestellt. Darin gab es die unterschiedlichen Rollen Administrator, Benutzer und Gast (Abbildung 6.2). Bei eingeschaltetem Zugrisschutz mit Proxy konnte nur der Administrator auf eine Datei sowohl lesend als auch schreibend zugreifen, der Benutzer nur lesend, der Gast durfte auf die Datei nicht zugreifen. Die Sch uler konnten mit dem Programm insofern experimentieren, als dass das Proxyobjekt aktiviert und deaktiviert werden konnte und sich das Verhalten des Programms daraufhin anderte ( SA: nach auen sichtbares Verhalten). Danach sollten die Sch uler an die Beschreibung von dynamischen Aspekten, speziell den Ablauf bei der Zugriskontrolle, herangef uhrt werden. Dazu wurde ein Modulelement aus Pattern Park mit zwei Aufgaben ausgew ahlt, dass die statische Sicht auf ein Klassendiagramm und Bilder zur lebensweltlichen Illustration der Situation anbietet ( SAundSB: Kombination des nach auen sichtbaren Verhaltens mit der inneren Struktur) aus der ein Sequenzdiagramm zur Beschreibung der in den Aufgaben geschilderten Abl aufe erarbeitet werden soll. Das gender-neutrale Szenario mit Geld und Geldkarte war den Sch ulern bereits durch die Animation bekannt. Um die Sequenzdiagramme der Situationen ezient und ohne Versuch-Irrtum-Strategie zu erstellen, ist der st andige R uckbezug auf die durch das Klassendiagramm formal dargestellten Operationen unverzichtbar. Abbildung 6.3 zeigt das Klassendiagramm des Proxymusters zur Realisierung der Zugriskontrolle. Anhand des Klassendiagramms mussten die Sch uler zwei korrekte Sequenzdiagramme zweier typischer Abl aufe in dem vorgegebenen Szenario kreieren. Die beiden Aufgaben haben unterschiedliche Schwierigkeitsgrade: In der ersten Aufgabe zum Geldabheben an einem Geldautomaten sind nur drei Objekte involviert, im zweiten Szenario, eine Einkaufssituation, bereits f unf. Darauf aufbauend kehrten die Sch uler zum Programm mit Administrator, Benutzer und Gast zur uck, f uhrten ein Experiment zur Erkundung der inneren Struktur durch (SB: innere Struktur) und fanden diese in Form des nun bereits bekannten Proxymusters. 6.4.5 Exkurs: Beitrag der eingesetzten informatischen Darstellungsformen Um unterschiedliche Sichten auf Informatiksysteme einzunehmen, sind geeignete informatische Darstellungsformen f ur den Unterricht einzusetzen (vgl. Hubwieser und Broy 1997a, S. 46). In182 6. Erste exemplarische Erprobung des Unterrichtsmodells Abschnitt 3.2.3 wurde betont, dass zur Analyse der inneren Struktur von Informatiksystemen nicht nur die Komponenten, sondern auch die intern ablaufenden Prozesse betrachtet werden mussen, d. h. statische und dynamische Sichten sind notwendig (Brinda 2004a), (Hadar und Hazzan 2004, S. 150). Entwurfsmuster umfassen sowohl Strukturbilder also auch Beschreibungen von Prozesses. Modelle werden meist als Abstraktion eines realen oder geplanten Systems angesehen (Hubwieser 2007a, S. 86), deren Anwendungsf alle und hypothetischen Abl aufe dem Modell die Semantik geben. Als Modellierungssprache wurde f ur die erste Erprobung die UML mit Klassendiagramm und Sequenzdiagramm ausgew ahlt. Dazu ist anzumerken, dass Klassendiagramme als Vorkenntnisse der Sch uler vorhanden waren. Das Sequenzdiagramm wurde als dynamisches Modell zur Ablaufbeschreibung ausgew ahlt: "Sequenzdiagramme k onnen dazu verwendet werden, um Szenarien und (einfache) Anwendungsf alle grasch darzustellen. Sie beschreiben nicht nur die Ausf uhrungsreihenfolge der Operationen, sondern auch die daf ur zust andigen Klassen bzw. deren Objekte. Sie stellen somit in der UML eine wichtige Verbindung zwischen der Funktionalit at und dem Klassendiagramm dar" (Balzert 2005, S. 119; Hervorh. durch den Autor). Objektdiagramme wurden einmal exemplarisch eingesetzt, aber wegen der oensichtlichen ObjektKlasse-Fehlvorstellung bei den Sch ulern wurde im weiteren Verlauf auf sie verzichtet. Begrundungen f ur die Auswahl liefern Hadar und Hazzan (2004) sowie Karahasanovic und Holmboe (2006). Hadar und Hazzan (2004) fragten eine Gruppe von 42 Studierenden in einem Fragebogen, neun unterschiedliche Diagrammarten einerseits auf ihre Wichtigkeit im Softwareentwicklungsprozess und andererseits auf ihre N utzlichkeit zum Verstehen eines unbekannten Softwaresystems einzusch atzen. Die Unterschiede zwischen den Diagrammarten waren bez uglich des Programmverstehens im Gegensatz zur Entwicklung nicht sehr gro: "More specically, the order in which the four diagram types were ranked (from high to low importance) was: class, sequence, collaboration and nally, state. The dierences, however, in the level of importance were smaller in the comprehension section of the questionnaire compared to the development section" (vgl. Hadar und Hazzan 2004, S. 151f). Obwohl explizit zwischen der Softwareentwicklung und dem Verstehen eines existierenden Programms dierenziert wird, k onnen die Ergebnisse nur einen Anhaltspunkt f ur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II liefern, da Studierende befragt wurden. Karahasanovic und Holmboe (2006) uben Kritik an der Studie von Hadar und Hazzan, da in ihr keine Aussage uber die Rolle von UML als Hilfsmittel f ur das Lernen von OOM getroen wird, denn jede Gruppe nutzte UML. In ihrer dreiw ochigen Studie in der Sekundarstufe II mussten funf 18-j ahrige Sch uler ohne Modellierungsvorkenntnisse vier Aufgaben bearbeiten: ein Restaurant objektorientiert modellieren sowie Klassendiagramme eines Telefonbuchs, eines Zeichenprogramms und eines Schl usselkartenleseger ats erstellen. Implementierung war nicht erforderlich. Die f unf Sch uler wurden in zwei Gruppen aufgeteilt. Bei der Gruppe, die aktiv die UML nutzte, sahen Karahasanovic und Holmboe einen Hinweis auf verbessertes Verstehen von Konzepten der Objektorientierung. Nach der Fallstudie leiten sie aus den Ergebnissen ab, dass Lernende Schwierigkeiten haben, den Problembereich (Lebenswelt) und den L osungsbereich aufeinander abzubilden: "Understanding of a large system [. . . ] The students in our experiment appeared to have problems handling the mapping between the real world (problem domain) and the solution domain. Seemingly, they had problems understanding and analyzing the complex system they were faced with" (Karahasanovic und Holmboe 2006, S. 57; Hervorh. im Original). In einer anderen Aufgabe, in der die Sch uler die Aufgabe des Systems, ein Schl usselkartenlesegerat, kannten, waren ihre Leistungen besser:6.5. Evaluation 183 "[. . . ] they seemed to have fair understanding of the role of the computer system and thus of the implicit use-cases that it should accomodate" (Karahasanovic und Holmboe 2006, S. 58). Allerdings kann auch diese Studie nur als Indiz f ur den positiven Eekt von UML dienen, da eine zu kleine Grundgesamtheit angesetzt wurde. Appelrath et al. (2002) empfehlen f ur die Hochschule die UML zur Dokumentation, da sie Personen unterst utzt, die nicht selbst am Entwicklungsprozess beteiligt waren (Appelrath et al. 2002, S. 127). F ur Kompetenzentwicklung mit Informatiksystemen sind die beiden Studien insofern hilfreich, als dass sie es nahe legen, die UML als Modellierungssprache zu nutzen, falls OOM eingesetzt wird. Auerdem sollte der Zweck f ur Kompetenzentwicklung mit Informatiksystemen explizit thematisiert werden, denn dann k onnen die Sch uler typische Anwendungsf alle des Systems beschreiben. Dies wird in der in Abschnitt 5.4.1 angegebenen Klassikation der Entwurfsmuster vor allem durch das !Kriterium 2: Zweck und Einsatzgebiet (S. 123) ber ucksichtigt. In der ersten Erprobung zeigten die beschriebenen Unterrichtsbeobachtungen und die Lernerfolgskontrolle (Abschnitt 6.5.1), dass die eingesetzten Diagramme den Lehr-Lernprozess unterstutzen konnten. 6.5 Evaluation 6.5.1 Lernerfolgskontrolle Wichtiges Ziel der Untersuchung war zu beantworten, ob die Sch uler die intendierten Lernziele erreichen. Zur Beantwortung sind zwei Kriterien zu erf ullen. Die Sch uler m ussen die im Unterricht gestellten Aufgaben erfolgreich bearbeiten und die schriftlichen und praktischen Aufgaben selbst andig l osen. Fur die schriftliche Ubung wurden Multiple-Choice-Aufgaben und L uckentexte gew ahlt. Als Stimuli f ur die Testitems dienten u. a. Klassendiagramme. Inhaltlich waren die Schwerpunkte der schriftlichen Ubung: nach auen sichtbares Verhalten von Informatiksystemen, innere Struktur von Informatiksystemen, Zusammenhang zwischen nach auen sichtbarem Verhalten und innerer Struktur, Zugriskontrolle mittels Entwurfsmuster Proxy, Iteration mittels Entwurfsmuster Iterator. Fur die schriftliche Ubung wurden zwei Varianten A und B eingesetzt, so dass ein Thema bei Bedarf in der einen Variante mit L uckentext, in der anderen mit Multiple-Choice-Aufgabe gepr uft werden konnte. Die Bearbeitungszeit betrug 30 Minuten. Insgesamt wurden 21 Tests bearbeitet (Variante A: 11; Variante B: 10). Die Ergebnisse sind uberdurchschnittlich gut ausgefallen (gerundete Werte), obwohl die Sch uler in der Akzeptanzbefragung den Stoumfang als sehr gro eingesch atzt haben (vgl. Abschnitt 6.5.2). Im Folgenden werden die Kennzahlen in Prozent bezogen auf die maximal m ogliche Punktzahl in der Lernerfolgskontrolle angegeben: Minimalwert: 53%, Maximalwert 100%, Mittelwert: 75 %, Median: 77%. Die h augsten Werte (Modi) waren 63%, 67% und 77% mit je drei Auspr agungen. Der Mittelwert bei den M adchen lag mit 72% leicht unter dem Gesamtdurchschnitt, ist aber aufgrund der geringen Anzahl von vier Personen nicht aussagekr aftig. Bei den Fragen zum nach auen sichtbaren Verhalten hatten die Sch uler Schwierigkeiten in Bezug auf eine systematische Erkundung. Hieraus k onnte der Schluss gezogen werden, dass es kaum Vorkenntnisse bez uglich eines solchen Vorgehens gab. Im scheinbaren Widerspruch dazu steht die184 6. Erste exemplarische Erprobung des Unterrichtsmodells Aussage fast aller Sch uler, dass das Erkunden der inneren Struktur schwieriger als das Erkunden des nach auen sichtbaren Verhaltens sei. Es haben alle Sch uler angegeben, dass zum Verstehen des nach auen sichtbaren Verhaltens eines Informatiksystems ein systematisches Experimentieren notwendig sei und dass unerwartetes Verhalten eines Informatiksystems R uckschl usse auf dessen innere Struktur liefere. Mit der Vorgehensweise zum Erkunden der inneren Struktur hingegen waren im Test weniger Schwierigkeiten verbunden. Dies mag an den Vorkenntnissen zur Erstellung von Klassendiagrammen und auch zu Delphi-Projekten liegen. Es zeigte sich eine teilweise Uberforderung der Lernenden bei der Verbindung des nach auen sichtbaren Verhaltens mit der inneren Struktur. Angebracht gewesen w are hier eine Aufteilung in kleinere Teilaufgaben. Die Hauptschwierigkeiten lagen bei der Beschreibung der inneren Struktur der Datenstruktur Schlange und des Iterator, da oftmals falsche Assoziationen angegeben wurden. Des Weiteren ist einigen Sch ulern die Unterscheidung zwischen Schlange und Iterator nicht gelungen. Auerdem wurden bei dem Transfer des Proxy auf eine neue Situation Fehler gemacht, obwohl die zum Unterricht ahnliche Aufgabe zur Zugriskontrolle gel ost wurde. In weiteren Unterrichtsprojekten sollten deshalb mehr Transferaufgaben hinsichtlich ahnlicher Situationen und Strukturen zu bearbeiten sein. In der zweiten Unterrichtserprobung wird deshalb die Zugriskontrolle zus atzlich in einer Arztpraxissoftware umgesetzt (Abschnitt 8.3). Die Ergebnisse aus der Analyse der Explizierung und Reexion der jeweiligen Sch uler-Vorgehensweisen in der Lerngruppe lassen sich jedoch nicht eindeutig Fehlvorstellungen zu Informatiksystemen zuordnen. Insbesondere ist zu vermuten, dass typische Fehlvorstellungen der Objektorientierung sehr dominant sind und Sch ulervorstellungen von Informatiksystemen uberlagern. Zur Realisierung der Zugriskontrolle wurden beispielsweise oft falsche Vererbungsbeziehungen verwendet (vgl. Abschnitt 7.4). 6.5.2 Schriftliche Akzeptanzbefragung der Sch uler Im Nachgang des Unterrichtsprojekts wurden die Lernenden des Kurses schriftlich befragt. Der Akzeptanzfragebogen orientiert sich an dem von Brinda eingesetzten Fragebogen (Brinda 2004a, S. 222). Er wurde gemeinsam mit Freischlad adaptiert und gleicht { bis auf wenige themenspezische Fragen { dem zur Evaluation von Unterricht zum"Didaktischen System Internetworking" verwendeten Akzeptanzfragebogen (Freischlad 2007). Die Fragen und Ergebnisse benden sich im Anhang A.1. Die Befragung der Lernenden zum Unterricht erm oglicht eine Einsch atzung zur Akzeptanz und R uckschl usse auf den Lernerfolg (Schubert et al. 2007). Die ausgef ullten Frageb ogen wurden von den Lernenden anonymisiert. Die Frageb ogen enthielten 36 Aussagen aus den vier Bereichen"Informatikunterricht allgemein","Schwierigkeitsgrad und Lernsto","Befragung zum Unterrichtsthema" und"Einsch atzung des Lernfortschritts in den einzelnen Lernbereichen", zu denen die Lernenden durch Ankreuzen ihre Zustimmung oder Ablehnung bei (vorwiegend) vier vorgegebenen Skalenwerten auern sollten zuz uglich der M oglichkeit sich zu enthalten. Ein Ziel war es, die Motivation der Lernenden zu analysieren. Gefragt wurde deshalb auch nach auerschulischer Besch aftigung mit dem Thema, weitergehendem Interesse sowie Einsch atzung des pers onlichen Nutzens. Weitere ausgew ahlte Einussgr oen bzw. Einstellungen der Lernenden waren beispielsweise Geschlecht und Anzahl vers aumter Unterrichtstermine, um die Antworten interpretieren zu k onnen. In der Akzeptanzbefragung zeigte sich, dass von 23 Sch ulern 16 (70%) den Schwierigkeitsgrad des Unterrichtsprojekts als angemessen und nur vier (17%) ihn als hoch empfanden. Der Stoumfang wurde von 16 (70%) als angemessen und von sechs (26%) als viel wahrgenommen. Dieser Aspekt wird auch durch zehn (43%) schriftliche Anmerkungen gest utzt, welche die geringe zur Verf ugung stehende Zeit f ur das Bearbeiten einiger Aufgaben beanstanden. Zu dem eigenen Lernfortschritt bei den inhaltlichen Themen der Analyse, der inneren Abl aufe und des Aufbaus von Informatiksystemen geben jeweils 16 (70%) oder mehr Sch uler an, eini-6.5. Evaluation 185 ges bzw. viel dazugelernt zu haben. Die Konzentration auf die Aufgaben el 15 Sch ulern (65%) leicht. Der Aussage, dass Hilfsmittel wie Arbeitsbl atter und (Lern-) Software ausreichend und in guter Qualit at vorhanden waren, wurde von 17 (74%) Sch ulern etwas, bzw. voll zugestimmt. Dies ist sicherlich auch auf den Einsatz ausgew ahlter Animationen und Ubungen aus der Lernsoftware Pattern Park zur uckzuf uhren. Durchaus mit den auf den Basiskompetenzen liegenden Zielen des Unterrichtsmodell im Einklang steht, dass f unf (22%) Sch uler anzeigten nichts und elf (47%) nicht viel zur Programmierung dazugelernt zu haben. Dass elf (48%) Sch uler angaben eher keinen bzw. drei (13%) best atigten, keinen Spa daran zu haben, ihr Verst andnis f ur das Thema zu vertiefen, oenbart ein Motivationsproblem, dem in folgenden Erprobungen durch st arkeren Bezug zu Alltagsproblemen und anderen F achern begegnet werden muss. Die Motivation uber prominente Beispiele f ur Fehlfunktionen von Informatiksystemen und den Bezug zur Lebenswelt uber fundamentale Ideen wie Zugriskontrolle war sicherlich ein Schritt in die richtige Richtung, aber nicht ausreichend. Sequenzdiagramme als Darstellungsform wurden von den Sch ulern positiv aufgenommen, da 19 (82%) angaben, uber Abl aufe in Informatiksystemen etwas oder viel dazugelernt zu haben. Abschlieend ist zu erw ahnen, dass 16 (70%) Sch uler angaben, f ur sich etwas dazugelernt zu haben, und dass die Mehrheit von 19 (82%) Sch ulern der Aussage, dass die Inhalte des Unterrichtsprojekts f ur den Umgang mit Informatiksystemen sehr n utzlich sind, zustimmen. 6.5.3 Leitfaden Interview mit der Informatiklehrperson Das Interview mit der Lehrperson, die die Lerngruppe in der Kooperationsschule betreut, erlaubt eine Einsch atzung der Angemessenheit bez uglich Stoumfang und Schwierigkeitsgrad. Zudem kann die Lehrperson die Ergebnisse der Intervention zu anderen Lehr-Lern-Situationen in Bezug setzen und vergleichend bewerten (Schubert et al. 2007). Durch Befragungstechniken ermittelt man die subjektive Sichtweise von Akteuren uber vergangene Ereignisse, Zukunftspl ane etc. (Bortz und D oring 2002). Insbesondere qualitative Befragungen arbeiten mit oenen Fragen und ber ucksichtigen auch die Eindr ucke und Deutungen des Interviewers, hier des Forschers, als Informationsquellen. "Charakteristisch f ur diese Befragungsform ist ein Interview-Leitfaden, der dem Interviewer mehr oder weniger verbindlich die Art und die Inhalte des Gespr achs vorschreibt" (Bortz und D oring 2002, S. 239). Das Interview zur Unterrichtserprobung, f ur das der Informatiklehrer abschlieend zur Verf ugung stand, best atigte beispielsweise, dass der Schwierigkeitsgrad des Unterrichtsprojekts angemessen sei. Auch die Konzeption zur Kompetenzentwicklung mit Informatiksystemen mit dem Wechsel der unterschiedlichen Sichtweisen auf Informatiksysteme wurde bef urwortet. Ein zus atzliches Ergebnis war, dass weitere Kooperationsformen, insbesondere Gruppenarbeit, verst arkt eingesetzt werden sollten. Dies wird in der zweiten Unterrichtserprobung aufgegrien (Kapitel 8) und in einigen vom Autor betreuten Seminararbeiten weiter untersucht (Gerding 2008), (Graf 2008), (Dittich 2008). Wesentlich gr oeren Einuss als das Interview zum Abschluss der Erprobung hatten jedoch die R uckmeldungen und die konstruktive Kritik des Informatiklehrers nach jeder Unterrichtsstunde, durch die noch w ahrend der Erprobung Anpassungen des Konzeptes erfolgten. Ein weiterer Informatiklehrer der Schule, uber den die Kooperation initiiert wurde und der bei der Planung und den Vorgespr achen zu beiden in der vorliegende Arbeit genannten Erprobungen aktiv mitwirkte, res umiert die Situation zu Beginn der ersten Erprobung folgendermaen: "Trotz der intensiven wissenschaftlichen und didaktischen Vorbereitung [. . . ] war zun achst eine Kluft zwischen universit arer Sprache und Vorgehensweise sowie schulischen Gewohnheiten zu uberwinden" (Ganea und Koch 2008, S. 117). Das hohe Abstraktionsniveau und der hohe theoretische Anteil wurden deshalb zugunsten einer Starkung der Handlungsorientierung verringert. Insgesamt f uhrte die Bereitschaft, einen Kompromiss zwischen Schulpraxis und Wissenschaft zu erzielen, zu einem positiven Fazit der beteiligten Lehrer (Ganea und Koch 2008, S. 117), wenngleich einige der oben genannten Kritikpunkte im weiteren Verlauf der ersten Erprobung in geminderter Form weiter bestanden.186 6. Erste exemplarische Erprobung des Unterrichtsmodells 6.6 Zusammenfassung und Diskussion der Ergebnisse der ersten Unterrichtserprobung 6.6.1 Zusammenfassung der ersten Unterrichtserprobung Die Beobachtungen im unterrichtlichen Geschehen und die Ergebnisse der selbst andig gel osten schriftlichen und praktischen Aufgaben lassen den R uckschluss zu, dass es prinzipiell machbar ist, das theoretische Unterrichtsmodell in konkreten Unterricht zu transferieren. Auch die Akzeptanzbefragung der Sch uler lieferte positive R uckmeldungen. Untersuchungsschwerpunkte waren 1. die Tragf ahigkeit und Auswirkung der Dreiteilung in Systemverhalten, innere Struktur und Implementierungsaspekte, 2. die Eignung ausgew ahlter Entwurfsmuster zur Repr asentation und Vernetzung fundamentaler Ideen der Informatik in kleinen Programmen, 3. die exemplarische Erprobung von Modulen der Lernsoftware Pattern Park, 4. die Lehr-Lernmethodik mit systematischen Erkundungen von Informatiksystemen und die Akzeptanz der Sch uler. (1) Die Dreiteilung der Basiskompetenzen in Aufgaben zu Systemverhalten, innerer Struktur und Implementierungsaspekten hat sich als tragf ahig erwiesen. Eine konzeptionelle Schwierigkeit war jedoch, dass die Aufteilung zwar automatisch einen Sichtenwechsel, nicht aber die Kombination von Sichten impliziert. Deshalb ist eine Verfeinerung der Strukturierung der Basiskompetenzen notwendig (Abschnitt 7.2). (2) Ein weiteres Ergebnis ist, dass ausgew ahlte Entwurfsmuster in der Sekundarstufe II als Hilfsmittel f ur Kompetenzentwicklung mit Informatiksystemen eingesetzt werden k onnen und Sch uler mit Vorkenntnissen in der objektorientierten Modellierung vernetzte fundamentale Ideen in ihnen und der entsprechenden Lernsoftware entdecken. Ein Programm setzte die fundamentale Idee der Zugriskontrolle mit dem Proxymuster um, ein weiteres die Datenstruktur Liste mit dem Iteratormuster. Eine weitergehende theoretische Fundierung uber die untersuchten Entwurfsmuster hinaus wird vor dem Hintergrund der positiven Resonanz angestrebt (Abschnitt 7.3). (3) Auerdem sind allem Anschein nach die positiven Sch ulerr uckmeldungen zu der eingesetzten Software und den Lernmaterialien im Zusammenhang mit den prototypischen Modulen der Lernsoftware Pattern Park zu sehen. Die Ergebnisse und R uckmeldungen aus der Erprobung der Module ossen in die Entwicklung von Pattern Park ein (Abschnitt 5.6). (4) Die Unterrichtsmethodik ist selbstverst andlich nicht unabh angig vom eingesetzten Untersuchungsgegenstand. In den Erprobungen sollten die Sch uler die einsetzten Programme systematisch untersuchen. An dieser Stelle trat die Schwierigkeit auf, dass die Sch uler keine Erfahrung mit der systematischen Erkundung und speziell mit dem Formulieren von Hypothesen zur Erkl arung des Systemverhaltens hatten. Deshalb ist eine weitergehende Analyse der systematischen Erkundung notwendig (Abschnitt 7.4). Auf der 12. GI-Fachtagung"Informatik und Schule { INFOS 2007" (Schubert 2007) wurden die Ergebnisse der Fallstudie pr asentiert (Stechert 2007c). Direkt im Anschluss wurde in einem Workshop zur intervenierenden Fachdidaktik mit Informatiklehrern im Rahmen des 6. Informatiktages Nordrhein-Westfalen der GI uber die Ergebnisse diskutiert (Schubert et al. 2007). Ausgangspunkt waren drei Hauptthesen zu den M oglichkeiten und Grenzen der Forschungsmethodik, die in diesem Kapitel bereits aufgegrien wurden: (i) Das Interview der Lehrperson, die die Lerngruppe in der Kooperationsschule betreut, erlaubt eine Einsch atzung der Angemessenheit bez uglich Stoumfang und Schwierigkeitsgrad. Zudem kann die Lehrperson die Ergebnisse6.6. Zusammenfassung und Diskussion der Ergebnisse der ersten Unterrichtserprobung 187 der Intervention zu anderen Lehr-Lern-Situationen in Bezug setzen und vergleichend bewerten. (ii) Die Befragung der Lernenden zum Unterricht erm oglicht eine Einsch atzung zur Akzeptanz und R uckschl usse auf den Lernerfolg. (iii) Die exemplarische Umsetzung von ausgew ahlten Teilen eines umfassenderen Forschungsprojekts erlaubt verallgemeinerbare R uckschl usse hinsichtlich Lernschwierigkeiten auf das Forschungsprojekt insgesamt. Zu ber ucksichtigen sind dabei die in Abschnitt 1.2.2 beschriebenen M oglichkeiten und Grenzen der Forschungsmethodik, die Plausibilitatserkl arungen hinsichtlich Machbarkeit und Akzeptanz sowie unterst utzende Aussagen zu ahnlichen Untersuchungen implizieren. 6.6.2 Informatiksysteme und Kompetenzentwicklung in der ersten Unterrichtserprobung Im Folgenden wird kurz res umiert, wie die erste Unterrichtserprobung die Kompetenzentwicklung mit Informatiksystemen unterst utzt hat. Eine typische Aufgabe war die systematische Erkundung eines Informatiksystems zur Zugriskontrolle, die Analyse und einfache Modikation der Software umfasste. Es wurden mehrere Sichten auf bzw. Hauptfunktionen von Informatiksystemen thematisiert:"Design" wurde durch Betrachtung der Entwurfsmusterstrukturen von Iterator und Proxy diskutiert (Abschnitt 3.2.2; (Denning 2007)). Auerdem sind"Recollection", durch Iteration der Datenstruktur Liste, und Grenzen der"Automation" betrachtet worden; letztere hinsichtlich des hypothetischen Einsatzes der analysierten Programme in komplexeren Szenarien. Zusatzlich wurden"Coordination"und"Communication"als Perspektiven auf Informatiksysteme durch den Unterrichtsinhalt Zugriskontrolle genutzt. Hinsichtlich der von der UNESCO denierten Literacys ist ein Beitrag zur ICT Literacy und speziell zur Software Literacy zu erwarten (UNESCO 2008), denn das Thema Zugriskontrolle, das sowohl durch das Proxymuster als auch durch das Iteratormuster aufgegrien wird, ist f ur viele Systeme im Alltag relevant. Dazu geh ort die Zugriskontrolle durch das Betriebssystem der Rechner im Schulnetz, aber auch bei Anwendungsprogrammen auf Mehrbenutzersystemen und auf Webseiten im Internet. Insbesondere unterschiedliche Zugrisrechte wurden im Unterricht behandelt. Des Weiteren ist durch den Einsatz unterschiedlicher Arten von Lernsoftware, Pattern Park und kleine Programme zu einzelnen Entwurfsmustern, ein Beitrag zur Media Literacy geleistet worden. Durch oben genannte Betrachtung der Grenzen der eingesetzten Programme in hypothetischen, komplexeren Situationen, wurde das kritische Denken der Sch uler unterst utzt. Durch die Zugriskontrolle hat die Unterrichtserprobung eine Grundvoraussetzung f ur die interaktive Anwendung von Technologien (DeSeCo: 1c) thematisiert, ohne deren Kenntnis der Zugri auf Informatiksysteme verwehrt bleibt, d h. eine Schl usselkompetenz wurde gef ordert (OECD 2005). Die Sch uler mussten die Beobachtungen zu Zugrisrechten dokumentieren, dann die Daten auswerten und fundamentale Ideen identizieren, um im Alltag Systeme bewusst und zielgerichtet anzuwenden, z. B. f ur lebensbegleitendes Lernen. Auerdem ist Zugriskontrolle wichtig, um Zugang zu Informationen zu erhalten, und betrit somit die Schl usselkompetenz "Fahigkeit zur interaktiven Nutzung von Wissen und Informationen" (DeSeCo: 1b) und gleichzeitig die Information Literacy gem a UNESCO. Zusatzlich f ordern das Experimentieren mit und Erkunden von Informatiksystemen das Verknupfen von Verhalten und Struktur. Die Sch uler identizieren eine Menge an Sonderf allen, die im Systemverhalten getestet werden. Dadurch entwickeln sie die Kompetenz, eigenst andig mit Informatiksystemen zu handeln. Hypothesenbildung zu dem Einsatz eines Informatiksystems in der Lebenswelt bzw. komplexeren Szenarien adressieren die F ahigkeit zum Handeln im gr oeren Kontext (DeSeCo: 3) ebenso wie die Vermeidung der"Versuch-Irrtum"-Strategie. Die Sch uler konnen sich durch die systematische Erkundung Informatiksysteme eigenst andig erschlieen und fur ihre Ziele einsetzen. Die Antizipation von Systemfehlern im Lernprozess verringert Stress in individuellen Projekten der Sch uler, so dass deren eigenst andiges Handeln (DeSeCo: 3) unterstutzt wird.188 6. Erste exemplarische Erprobung des Unterrichtsmodells Interagieren in heterogenen Gruppen und vor allem Kooperationsf ahigkeit (DeSeCo: 2b) werden durch die erste Unterrichtserprobung dahingehend gef ordert, dass die Sch uler sich Kenntnisse uber die innere Struktur und eine angemessene Fachsprache bez uglich des Systemverhaltens aneignen. Dadurch sind sie in der Lage, eigene Ideen zu pr asentieren, anderen zuzuh oren oder ein Problem mit der Technologie in eigenen Worten zu umreien. Gleichzeitig wird das Informatiksystem entmystiziert und die Motivation steigt (vgl. Kollee et al. 2009). Die Einordnung des Unterrichtsmodells in den Europ aischen Qualikationsrahmen wurde in Abschnitt 5.7 vorgenommen. Hinsichtlich der erreichten Niveaustufen der Sch uler ist keine fundierte Aussage m oglich, da entsprechende qualitative und quantitative Messverfahren f ur den Informatikunterricht fehlen (Abschnitt 9.3).7. Weiterentwicklung, Verfeinerung und Erganzung des Unterrichtsmodells 7.1 Uberblick Die Durchf uhrung der Unterrichtserprobung zur Kompetenzentwicklung mit Informatiksystemen und die Tragweite der Ergebnisse wurden im Rahmen eines Workshops (Schubert et al. 2007) mit Informatiklehrern auf der INFOS 2007 diskutiert. Die Ergebnisse der ersten Unterrichtserprobung resultierten in einer Verfeinerung der Strategie zur Strukturierung im Rahmen des Unterrichtsmodells (Abschnitt 7.2). Abbildung 7.1: Struktur des Kapitels zu Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells Die didaktischen Klassizierungen von Entwurfsund Architekturmustern als Wissensrepr asentationen werden weiterentwickelt: Betreut durch den Autor entstanden 2007 zwei Diplomarbeiten, die vernetzte fundamentale Ideen anhand von Softwaremustern pr asentieren (Abschnitt 7.3). In der ersten wurde die fachdidaktische Klassikation von Entwurfsmustern als Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik auf Architekturmuster angewendet und mit Unterrichtbeispielen inklusive Lernmaterialien gestaltet (Ufer 2007). Die Ergebnisse der verfeinerten Strukturierung wurden bereits integriert. In der zweiten Diplomarbeit wurden Entwurfsmuster nach Gamma et al. (1995) klassiziert und ausf uhrlich auf ihren Beitrag zur Forderung der Kompetenzentwicklung mit Informatiksystemen hin untersucht sowie ein neues Konzept f ur eine Lernsoftware auf Basis von Entwurfsmustern entworfen (Weyer 2007b). In Abschnitt 7.4 wird die systematische Erkundung von Informatiksystemen durch die Methode des Laut-Denkens und anhand der neuen Strukturierung der Basiskompetenzen analysiert. Abbildung 7.1 zeigt die Struktur des Kapitels.190 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells 7.2 Verfeinerung der Strukturierung von Kompetenzen zu Informatiksystemen 7.2.1 Verfeinerung der Perspektiven auf Informatiksysteme Kompetenzen zu Informatiksystemen wurden bisher nach den Perspektiven des nach auen sichtbaren Verhaltens ( SA), der inneren Struktur ( SB) und den Implementierungsaspekten ( SC) von Informatiksystemen strukturiert. Im Unterricht und in der benoteten schriftlichen Ubung der ersten Erprobung wurden Problemstellen im Unterricht und kognitive H urden ausgemacht (Kapitel 6). Bei der in Abbildung 6.2 dargestellten Vorgehensweise zur Erkundung des Informatiksystems wurde die f ur Unterrichtsexperimente wichtige Dokumentation der Schritte anfangs von vielen Sch ulern vernachl assigt. Geeignete und den Sch ulern bekannte formale informatische Modelle wurden genutzt, um Quelltext zu veranschaulichen, z. B. Klassendiagramm, aber nicht, um einen Sachverhalt oder eine Hypothese hinsichtlich des Systemverhaltens darzustellen. Die Auswertung ergab, dass eine Verfeinerung der Strukturierung der Basiskompetenzen zur Uberwindung der gedanklichen Br uche zwischen den Perspektiven vorzunehmen ist. Damit wird es moglich, Uberleitungen wie". . . und nun kommen wir zur inneren Struktur des Informatiksystems!" zu vermeiden. Unter der Pr amisse, dass ein Zugang zu Informatiksystemen uber das nach auen sichtbare Verhalten zu w ahlen ist, ergibt sich folgende Verfeinerung der Strukturierung der Basiskompetenzen in Si; i2fA; B; C; AB; AC; BC g: SA: nach auen sichtbares Verhalten von Informatiksystemen, SAB: Wechselwirkungen zwischen dem nach auen sichtbaren Verhalten und der inneren Struktur (z. B. anhand von Entwurfsund Architekturmustern), SAC: Wechselwirkungen zwischen dem nach auen sichtbaren Verhalten und ausgew ahlten Implementierungsaspekten (durch systematisches Testen), SB: die innere Struktur von Informatiksystemen (z. B. anhand von Strukturmodellen: Entwurfsmuster, Schichtenmodelle etc.), SBC: Wechselwirkungen zwischen der inneren Struktur und ausgew ahlten Implementierungsaspekten (z. B. Idiome (Buschmann et al. 1996)), SC: ausgew ahlte Implementierungsaspekte zur Erstellung einer konkreten Realisierung. Die Lernphasen zu den Basiskompetenzen werden spiralf ormig wiederkehrend auf den gr oer werdenden Untersuchungsbereich des im Unterricht behandelten Informatiksystems angewendet (vgl. Stechert 2006c, S. 96). Im Folgenden werden die Perspektiven kurz skizziert (Stechert und Schubert 2007). SA: nach auen sichtbares Verhalten Das Verhalten von Informatiksystemen kann durch Beobachtungsaufgaben und einfache Experimente verstanden werden. Sch uler und Lehrer sollten hierzu die notwendigerweise zugrunde liegende Hypothese gemeinsam erarbeiten. Die Sch uler wenden ein konkretes Informatiksystem zielgerichtet an und entdecken beispielsweise eine fundamentale Idee der Informatik uber das Systemverhalten. Neben Lehrerdemonstrationen sind auch Animationen geeignet, um auf unerwartetes Verhalten aufmerksam zu machen (vgl. Lernsoftware Pattern Park in Abschnitt 5.6). Anwendungsfalldiagramme, Aspekte der Anforderungsanalyse und Qualit at von Informatiksystemen konnen thematisiert werden. SAB: Kombination von Systemverhalten und innerer Struktur Unterrichtsexperimente, in denen die Sch uler selbst andig Hypothesen formulieren, unterst utzen die Kombination der Perspektiven Verhalten und Struktur. Die Sch uler k onnen beispielsweise funktionale7.2. Verfeinerung der Strukturierung von Kompetenzen zu Informatiksystemen 191 Modelle nutzen, um das beobachtete Verhalten des Systems zu formalisieren. Fundamentale Ideen und Entwurfsstrukturen werden identiziert. Ein Beispiel ist die Datenstruktur Schlange, die um die einen Iterator erweitert wurde, was die Sch uler anhand des Systemverhaltens entdecken k onnen (Kapitel 6). Ein weiteres Beispiel f ur ein funktionales Modell von Hardware liefert Hubwieser (Hubwieser 2007a, S. 152). Ziel der kombinierten Sichten ist, dass die Sch uler in der Lage sind zu erkl aren, wie die innere Struktur das Systemverhalten beeinusst. SAC: Kombination von Verhalten und Erstellung einer Realisierung Durch systematisches Testen kann das Systemverhalten analysiert werden. Ist der Quelltext gegeben, so konnen Sch uler im Sinne eines White-Box-Tests (Abschnitt 5.5.1) in einem Unterrichtsexperiment das Systemverhalten auf Ursachen untersuchen. Das Systemverhalten kann klassiziert werden, w ahrend im Quelltext besonders wichtige Stellen variiert werden. Das heit, ein vorhandenes System wird modiziert. Zum Beispiel kann bei dem Programm zur Zugriskontrolle mit den zugewiesenen Zugrisrechten experimentiert werden. Beim Iteratormuster kann der Algorithmus zur Iteration ver andert werden. SB: innere Struktur Im Allgemeinen ist die innere Struktur eines Informatiksystems nur den Entwicklern, nicht aber den Anwendern bekannt (Claus und Schwill 2006). Systemkomponenten und deren Beziehungen m ussen von den Sch ulern erkundet werden. Dazu sind statische und dynamische Aspekte zu betrachten. Die Anwendung unterschiedlicher Diagrammarten wie Klassen-, Objekt-, Sequenzund Zustandsdiagramm kann die innere Struktur visualisieren (Karahasanovic und Holmboe 2006), (Hadar und Hazzan 2004). In Abgrenzung zu SCwerden insbesondere Strukturmodelle von Sch ulern zu identizieren sein, die sie miteinander in Verbindung setzen m ussen, z. B. Schichtenmodelle und ausgew ahlte Entwurfsmuster. SBC: Kombination von Struktur und Erstellung einer Realisierung Die Strukturierung von Implementierungsaspekten ist notwendig zur Erstellung einer konkreten Realisierung. Solche Strukturelemente liegen auf einer niedrigeren Abstraktionsebene als Entwurfsmuster. Ein Beispiel sind so genannte Idiome, d. h. programmiersprachenabh angige Strukturierungen. In Abschnitt 5.4.2 wurde argumentiert, dass Idiome in dieser Arbeit zur F orderung der Kompetenzentwicklung mit Informatiksystemen nicht betrachtet werden. SC: Erstellung einer konkreten Realisierung Zur Implementierung eines Informatiksystems sind Programmierkenntnisse unabdingbar. Studien zeigen jedoch, dass es Lernenden oftmals nicht gelingt, Programme zu entwerfen und zu erstellen, selbst wenn sie Programmierkonzepte kennen, weil ihnen der Uberblick uber das gesamte Programm fehlt (McCracken 2004). Deshalb wird der Schwerpunkt in der vorliegenden Arbeit auf Strukturmodelle gelegt, um Systemverhalten zu erkl aren. Diese verfeinerte Strukturierung erm oglicht die Kombination unterschiedlicher Perspektiven f ur ein konsistentes Gesamtbild vom Informatiksystem und unterst utzt explizit den lernf orderlichen Sichtenwechsel. Handlungsorientierung und Transfer von einer Perspektive auf eine n achste werden durch die genannten Sch ulertatigkeiten gef ordert. Wie bereits angedeutet sind SBCund SCfur Basiskompetenzen nicht erforderlich bzw. in dieser Arbeit von nachgeordneter Relevanz. Diese Ansicht st utzt sich ab auf der kontroversen fachdidaktischen Diskussion. Darin wird Programmierung oft entweder als ingenieurwissenschaftlicher Anteil und damit nicht allgemein bildend angesehen (vgl. Burkert 1995, S. 50). Oder Programmierung wird als essentiell f ur Abstraktionsprozesse der Informatik angesehen. Wie Hubwieser und Schubert feststellen, ist die Kontroverse oft durch unterschiedliche Auslegung der Begrie begr undet (vgl. (Schubert 1991), (Hubwieser 2007a, S. 88)). Bei einer Aufspaltung des Begris Programmierung in Modellierung und Strukturierung sowie Codierung wird klar, dass Syntaxund Implementierungsdetails der192 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells Codierung zuzurechnen sind. Diese sind jedoch allenfalls in Verbindung mit Modellen von gewissem Bildungswert, wenn durch die Implementierung die abstrakten Modelle veranschaulicht und Versuch-Irrtum-Strategien ausgeschlossen werden. 7.2.2 Strukturierung der Unterrichtsinhalte Exemplarische Kompetenzfacetten Die Vorstrukturierung der Basiskompetenzen erm oglicht nun die Formulierung konkreter Ziele in Anlehnung an die Kompetenzfacetten nach Weinert (2001). Da dies in der vorliegenden Arbeit nicht empirisch fundiert geschehen kann, seien beispielhaft folgende motivationalen, kognitiven Fahigkeiten und Fertigkeiten sowie die F ahigkeit, Probleml osungen in variablen Situationen anzuwenden genannt (vgl. Kapitel 2). Auf die Zuordnung konkreter vernetzter fundamentaler Ideen wird an dieser Stelle der Ubersichtlichkeit halber verzichtet. Beispiele nden sich bei der Erprobung des Unterrichtsmodells in den Kapiteln 6 und 8: Die Sch uler sind in der Lage . . . Motivation {die Bereitschaft und F ahigkeit zu entwickeln, von Black-Box-Vorstellungen (Computerglaubigkeit) zu rationalen Strukturmodellen zu wechseln ( SA). Konnen: Verstehen von Fachkonzepten und Anwenden von Fachmethoden (in"Entscheidungskonikten" bzw. -situationen) {Strukturmodelle anzuwenden, um das nach auen sichtbare Verhalten von Informatiksystemen erkl aren zu k onnen ( SAB). Fahigkeit: Transfer von Fachkonzepten {Erkenntnisse von Strukturmodellen f ur einen Sichtenwechsel auf andere Strukturmodelle zu ubertragen ( SB). Kompetenzfacetten nach Weinert sind F ahigkeit, Wissen, Verstehen, K onnen, Handeln, Erfahrung, Motivation (vgl. Klieme et al. 2007, S. 73). Diese werden um die Facetten des Transfers auf variable Anforderungssituationen im Sinne der Kompetenzdenition nach Weinert erg anzt. Volitionale Aspekte werden unter der Facette der Motivation mitbetrachtet, auch wenn absichtsund willensbezogene Bereitschaften nicht identisch mit Motivation sind. Zur Begriskl arung ist anzumerken, dass Wissen nicht nur als reines Faktenwissen interpretiert wird, sondern Prozesse mit einschliet. Um den fachlichen Bezug herzustellen wird auf das Erfahrungswissen der Fachdidaktik zur uckgegrien, das in Kapitel 4 analysiert wurde. Neben der Zielorientierung fur Informatikcurricula und der Denition von Standards dienen Kompetenzmodelle auch der Entwicklung von empirischen Messinstrumenten. Bezogen auf die Informatik kann damit die Wirksamkeit von Lernprozessen gemessen werden. Bezug zu Wissensstrukturen des didaktischen Systems Angemerkt sei an dieser Stelle, dass die Strukturierung der Basiskompetenzen Ahnlichkeiten zu Wissensstrukturen aus dem didaktischen System aufweist (vgl. Brinda und Schubert 2001). Denn sie sind wie Wissensstrukturen eine Strukturierungsempfehlung f ur Lehr-Lernprozesse, die eine Gesamtsicht auf das Themengebiet anbieten. Dargestellt werden Wissensstrukturen in einem Graph, dessen Knoten Unterrichtsinhalten und dessen Kanten Aufgabenklassen entsprechen. Aufgabenklassen sind dementsprechend notwendig, um einen neuen Unterrichtsinhalt zu erarbeiten. Wenn man die Basiskompetenzen nun einer Wissensstruktur zu Informatiksystemen zugrunde legt, bereichern sie das Konzept der Wissensstruktur gleichzeitig um Kompetenzclusterung, die dem Vorwurf entgegenwirkt, dass durch Wissensstrukturen haupts achlich die Fachsystematik reproduziert werde. Bei der Unterscheidung zwischen Groblernzielen und Feinlernzielen7.2. Verfeinerung der Strukturierung von Kompetenzen zu Informatiksystemen 193 ergibt sich folgende Lesart: Ein als Knoten repr asentiertes Groblernziel steht stellvertretend f ur einen neuen Teilgraph, der durch die zu dem Groblernziel geh orenden Feinlernziele und deren Verbindungen gebildet wird. Dies impliziert wiederum, dass der Ubergang von einem Lernziel zum n achsten nicht durch nur eine Aufgabenklasse, sondern durch eine Menge von Aufgaben realisiert wird, die { bedingt durch die unterschiedlichen Abstraktionsebenen { nicht notwendiger Weise in derselben Aufgabenklasse liegen. Die Weiterentwicklung der Wissensstrukturen des Didaktischen Systems ist nicht Ziel der vorliegenden Arbeit. Deshalb sei an dieser Stelle auf Arbeiten von Freischlad verwiesen (Freischlad 2008). Als weitere Verfeinerung der Lernziele zu den Basiskompetenzen bieten sich fundamentale Ideen der Informatik an. Durch die Kriterien f ur fundamentale Ideen wird der Bildungswert gesichert, wahrend die Basiskompetenzen einen auf Informatiksysteme und Systemverst andnis ausgerichteten Unterricht erm oglichen. Beispiele f ur die Zugriskontrolle (Zk) sind: Wesentliche Aspekte des nach auen sichtbaren Verhaltens bei Zugriskontrolle, z. B. den Unterschied zwischen aktivierter und deaktivierter Zugriskontrolle ( SA, Zk). Statische und dynamische Aspekte der inneren Struktur eines Informatiksystems, um Zugriskontrolle zu realisieren, z. B. uber das Stellvertreterprinzip im Proxy-Entwurfsmuster mit Vererbung (S B, Zk). Fur eine fachsystematische Strukturierung in Wissensstrukturen zum Thema Informatiksysteme bieten sich fundamentale Ideen der Informatik allein nur bedingt als Knoten an, da insbesondere die Vernetzung der Ideen nicht vorgenommen wird und der direkte Bezug zu den Perspektiven nicht deutlich wird. Die fundamentale Idee der Iteration sei im Folgenden als"It" abgek urzt. Beispiele f ur Basiskompetenzen anhand von Kompetenzfacetten nach Weinert (2001) sind dann bez uglich der vernetzten fundamentalen Ideen: Die Sch ulerinnen und Sch uler sind in der Lage . . . Motivation {die Bereitschaft und F ahigkeit zu entwickeln, von Black-Box-Vorstellungen (Computerglaubigkeit) zum Iteratormuster als rationales Strukturmodell zu wechseln ( SA;It). {die Bereitschaft und F ahigkeit zu entwickeln, von Black-Box-Vorstellungen (Computerglaubigkeit) zum Proxymuster als rationales Strukturmodell zu wechseln ( SA;Zk). Konnen: Verstehen von Fachkonzepten und Anwenden von Fachmethoden (in"Entscheidungskonikten" bzw. -situationen) {Das Iteratormuster anzuwenden, um das nach auen sichtbare Verhalten von Informatiksystemen erkl aren zu k onnen ( SAB;It ). {Das Proxymuster anzuwenden, um das nach auen sichtbare Verhalten von Informatiksystemen erkl aren zu k onnen ( SAB;Zk ). Fahigkeit: Transfer von Fachkonzepten {Erkenntnisse von der Erkundung eines Programms mit Iteratormuster f ur einen Sichtenwechsel auf ein Programm mit Proxymuster zu ubertragen ( SB;It). {Erkenntnisse von dem Zugri, den ein Iterator auf Datenstrukturen erm oglicht, f ur einen Sichtenwechsel auf Zugriskontrolle mit dem Proxymuster zu ubertragen ( SB;Zk). In praktischen Erprobungen m ussen Erkenntnisse dar uber gewonnen werden, in welchem Mae vernetzte fundamentale Ideen der Informatik Basiskompetenzen zu Informatiksystemen bei den Lernenden zu f ordern verm ogen.194 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells 7.3 Weiterentwicklung und Erg anzung zu Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik 7.3.1 Architekturmuster als Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik Die Diplomarbeit"Architekturmuster als Beitrag zum Informatiksystemverst andnis"wurde durch den Autor der vorliegenden Dissertationsschrift betreut und im Mai 2007 fertig gestellt (Ufer 2007). Im Rahmen der Arbeit sollten laut Themenbeschreibung objektorientierte Architekturmuster nach Buschmann et al. (1996) f ur Kompetenzentwicklung mit Informatiksystemen klassiziert werden { auch unter Ber ucksichtigung der fundamentalen Ideen der Informatik bez uglich des nach auen sichtbaren Verhaltens SAund dessen Kombination mit der inneren Struktur SAB sowie den Implementierungsaspekten SAC. Dazu geh orten die Strukturierung des Bildungsprozesses und deren Begr undung sowie die Erstellung eines Entwurfs von Lernmitteln, die auf der Klassikation der Architekturmuster beruhen. Ufer w urdigt darin Kompetenzentwicklung mit Informatiksystemen als wichtiges Bildungsziel des Informatikunterrichts. Die seiner Arbeit zugrunde liegende Annahme unter Berufung auf Stechert (2006b) ist, dass Architekturmuster eine Form der Wissensrepr asentation f ur vernetzte fundamentale Ideen der Informatik darstellen, als Strukturmodelle die Zusammenh ange zwischen Systemkomponenten beschreiben und bew ahrte L osungen der Softwareentwicklung sind. Ufer geht auf fundamentale Ideen der Informatik nach Schwill (1993a) und deren Erweiterung nach Modrow (2002) ein. Dar uber hinaus werden der Systembegri sowie das vernetzte Denken betrachtet und deren Kombination im fachdidaktischen Ansatz zu Kompetenzentwicklung mit Informatiksystemen nach Stechert beschrieben. Nach einer Kompetenzdenition gem a Weinert leitet Ufer im Rahmen des fachdidaktischen Ansatzes acht Kompetenzen f ur Sch uler in der Sekundarstufe II ab, die die Grundlage f ur operationalisierte Lernziele bilden. Trotz der Orientierung am Kompetenzbegri nach Weinert (Abschnitt 2.1) ist das Vorgehen insofern kritisch zu sehen, dass sie nicht in ein Kompetenzmodell eingeordnet werden (k onnen), so dass die Bezeichnung irref uhrend ist. Positiv ist jedoch die starke Einbeziehung motivationaler und volitionaler Bereitschaften zur bewussten Anwendung von Informatiksystemen, die einen Beitrag zur Erstellung eines Kompetenzmodells leisten kann. Die zur Klassikation der Architekturmuster notwendigen Leistungsparameter bestimmt Ufer in einer Anforderungsanalyse. Diese leiten sich aus dem fachdidaktischen Ansatz nach Stechert sowie der Arbeit von Harrer und Schneider zur Klassikation von Entwurfsmustern f ur die Hochschulinformatik ab (Harrer und Schneider 2002). Er nutzt f unf Kriterien: die vernetzten fundamentalen Ideen der Informatik, die Zusammenh ange mit weiteren Softwaremustern, die Komplexit at, das Einsatzgebiet des Architekturmusters und ein Lebensweltbeispiel (vgl. Abschnitt 5.4.1). Ufer untersucht die acht Architekturmuster Schichtenarchitekturmuster, Kan ale und Filter, Tafel, Vermittler, Model-View-Controller sowie Pr asentation-Abstraktion-Steuerung, Mikrokern und Reexion anhand der Kriterien einzeln (Tabelle 7.1). Die drei letztgenannten Muster werden als nicht geeignet f ur den Informatikunterricht der Sekundarstufe II eingestuft. Grund f ur die Ablehnung ist die starke inhaltliche Uberschneidung des Pr asentation-Abstraktion-SteuerungArchitekturmuster mit dem MVC-Architekturmuster bei erh ohter Komplexit at. Bei den Architekturmustern Reexion und Mikrokern ist das spezielle Anwendungsgebiet zusammen mit der geringen Anzahl fundamentaler Ideen und dem Schwierigkeitsgrad f ur die Aussortierung ausschlaggebend. In der Arbeit werden die den untersuchten Architekturmustern zugrunde liegenden vernetzten fundamentalen Ideen der Informatik in Wirkungsdiagrammen dargestellt bei gleichzeitig vorhandener Kritik der Wirkungsdiagramme (vgl. Abschnitt 5.4.5): "Die Wirkungsdiagramme h atten also auch in leicht ver anderter Form erstellt werden k onnen und erheben daher keinen Anspruch auf exklusive Korrektheit. Der Autor beschr ankt deshalb die Dia-7.3. Weiterentwicklung und Erg anzung zu Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik 195 gramme auf die Veranschaulichung der wichtigsten Zusammenh ange zwischen den fundamentalen Ideen des jeweiligen Architekturmusters" (Ufer 2007, S. 28). Jedes Muster wird nach dem gleichen Schema klassiziert. Nach einer kurzen Einf uhrung in Anlehnung an softwaretechnische Beschreibungen folgt die didaktische Analyse. Als fundamentale Ideen wird f ur das Schichtenarchitekturmuster beispielsweise die Masteridee Hierarchisierung beschrieben und im Kontext des { f ur Kompetenzentwicklung mit Informatiksystemen besonders wichtigen { Ebenenmodells des Rechners betrachtet. Weitere fundamentale Ideen in dem Beispiel sind die Master-Idee Sprache durch Bezug zu Compilern, Modularisierung durch Komponentenbildung im Gegensatz zum Abstraktionsgrad der Hierarchisierung sowie Top-downbzw. Bottom-up-Vorgehensweisen zur Umsetzung einer hierarchischen Modularisierung beispielsweise bei Netzwerkprotokollen oder dem Ebenenmodell des Rechners. Dar uber hinaus wird Delegation im Rahmen der Objektorientierung didaktisch begr undet in Abgrenzung zur Vererbung beschrieben und das Geheimnisprinzip wird in Anlehnung an das Fassademuster angef uhrt. Zuletzt wird die Wichtigkeit der Schichtenarchitektur bei Wiederverwendung hervorgehoben. Bezuglich des zweiten Kriteriums"Zusammenh ange mit weiteren Softwaremustern" werden korrespondierende Entwurfsmuster mit Hinweis auf fundamentale Ideen n aher beschrieben. Beim Schichtenarchitekturmuster sind dies Fassade, Zust andigkeitskette, Befehl und Beobachter. Das dritte Kriterium, Komplexit at, wird in Anlehnung an die hochschuldidaktische Evaluation von Harrer und Schneider betrachtet, aber f ur die Sekundarstufe II anhand erwarteter Lernschwierigkeiten bei den fundamentalen Ideen weiter begr undet. Dazu werden Varianten des Musters im Lehr-Lernprozess betrachtet. Beim vierten Kriterium, dem Einsatzgebiet des Musters, werden sowohl aus der Softwaretechnik heraus Einsatzbereiche des Musters genannt, als auch die Bez uge zu fundamentalen Ideen als Aspekte des Entwurfsmusters beschrieben, die per Denition in verschiedenen Bereichen der Informatik relevant sind. Das letzte Analysekriterium, das Lebensweltbeispiel zur Funktionalit at des Musters, wird in eine Problemstellung aus dem Erfahrungsbereich der Sch uler und eine m ogliche Lebenswelt-L osung aufgeteilt. Dar uber hinaus wird gegebenenfalls auf relevante Lebensweltbeispiele f ur einzelne fundamentale Ideen der Informatik hingewiesen wie das"Philosophenproblem" und den"schlafenden Fris or" bei der fundamentalen Idee Nebenl augkeit beim Kan ale-und-Filter-Muster. Eine Ubersicht der Klassikation in Form einer Tabelle res umiert in einer vergleichenden Evaluation die untersuchten Architekturmuster bez uglich aller Klassikationsparameter (Tabelle 7.1; (Ufer 2007, S. 95)). Ufer konstruiert aus den Analyseergebnissen Lehr-Lernprozesse in Form von Unterrichtsbeispielen zu den durch die Klassikation ausgew ahlten Architekturmustern. Dazu werden notwendige Vorkenntnisse der Lerngruppe und die operationalisierten Lernziele bez uglich der von ihm denierten Kompetenzen vorgestellt und der Lernprozess strukturiert. Nach der Vorstellung wichtiger Inhalte der Informatik werden durch die Klassikation der Architekturmuster daraus die didaktischen Anforderungen an Lehr-Lern-Prozesse und technischen Konsequenzen fur Lernsoftware abgeleitet. Dies geschieht unter Ber ucksichtigung des konstruktivistischen Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung. Dabei bew ahrte sich die Weiterentwicklung im Bereich der Wissensstrukturen ( Si) nach Brinda, indem sie mit Aufgabe und Aufgabentyp sowie mit einer Einordnung in die Kompetenzstrukturierung, Lernziel, und Lernzielebene (Anderson und Krathwohl 2001) verkn upft wurden. Ein Aufgabentyp war z. B. "Beobachtung mit vorgegebener Vorgehensweise". Bei der Entwicklung der Lernsoftware weist Ufer auf die Schwierigkeit hin, einerseits ein f ur die Sch uler angemessenes und sinnvolles Informatiksystem bereitzustellen, andererseits die Architekturmuster m oglichst im Kern unver andert zu integrieren (vgl. Ufer 2007, S. 99). Er bezieht sich dabei auf die von ihm umgesetzte Art der Lernsoftware, die auf einem Muster als196 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells Tabelle 7.1: Zusammenfassung der Untersuchungsergebnisse zu den Architekturmustern nach (Ufer 2007, S. 95) ArchitekturmusterFundamentale Ideen Enthaltene MusterKomplexit at Einsatzgebiet Lebensweltbeispiel Schichten Hierarchisierung, Sprache, Modularisierung, Top-down / Bottom-up, Delegation, Geheimnisprinzip, Umgekehrte Pyramide der WiederverwendungFassade, Zustandigkeitskette, Befehl, Beobachtereinfach allgemein Entfernte Kommunikation in verschiedenen Sprachen Kanale und FilterModularisierung, Geheimnisprinzip, Wiederverwendbarkeit, Wartbarkeit, Teamarbeit, EingabeVerarbeitung-Ausgabe, Schnittstelle, FIFO, Nebenlaugkeit, Thread, Zustand, FairnessSingleton einfachmittelnicht ereignisgesteuerte SystemeWasch-Firma Tafel Teile-und-Herrsche, Geheimnisprinzip, Nichtdeterminismus, Backtracking, Nebenl augkeit, Thread, Zustand, Grenzen der Berechenbarkeit, Alternative, Schleife, SchlangeBeobachter, Singleton, Strategie, Adaptereinfachmittelschwierige Probleme, kunstliche IntelligenzAufkl arung eines Verbrechens Vermittler Client-Server, Vernetzung, Graphen, Parallelverarbeitung, Delegation, Schnittstelle, Geheimnisprinzip, Wiederverwendung, gemeinsame Ressourcennutzung, Verfugbarkeit, Zuverl assigkeit, ZugriskontrolleProxy, ZustellerEmpf anger, Adapter, Vermittlerhoch verteilte SystemeReiseb uro Model-ViewControllerEingabe-VerarbeitungAusgabe, Ereignisse, Benutzungsober ache, Daten / Darstellung, Geheimnisprinzip, Wiederverwendung, Assoziation, VererbungBeobachter, Kompositum, Strategie, Dekorierer, Fabrikmethodemittel interaktive SystemeErgebnisse und Diagramme einer politischen Wahl PrasentationAbstraktionSteuerungHierarchische Modularisierung, Baum, Schnittstelle, Daten / Darstellung, ProzesseAdapter, Kompositum, Fassade, Vermittler, Beobachter, Zustandigkeitskettehoch interaktive SystemeErgebnisse und Diagramme einer politischen Wahl auf Verwaltungsebenen Mikrokern Emulation, Prozesse, Nebenlaugkeit, Ressourcenverwaltung, FairnessAdapter, Fassade, Proxyhoch adaptierbare Systeme, BetriebssystemeSpielekonsole / digitale Fotokamera Reexion Wartbarkeit, Schnittstellen, Metadaten,Strategie einfachmitteladaptierbare SystemeGesetze und Gerichte Strukturgrundlage beruht (Abschnitt 5.6.2). Eine weitere Schwierigkeit ist die Umsetzung von Architekturmustern f ur nebenl auge Systeme, wenn sie auf einem Von-Neumann-Rechner in der Schule eingesetzt werden sollen. Im Fall des Vermittler-Architekturmusters wurde dieser Aspekt simuliert, da das Vorhandensein weiterer fundamentaler Ideen der Informatik den Nachteil kompensiert. Als Unterrichtsbeispiele werden folgende Lehr-Lernprozesse beschrieben: ein Informatiksystem fur politische Wahlen mit dem Model-View-Controller-Architekturmuster, ein Labyrinthsystem7.3. Weiterentwicklung und Erg anzung zu Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik 197 in Prolog anhand des Tafelarchitekturmusters, ein Ubersetzungsprogramm mit dem Klartext verschl usselt und kodiert wird (Schichtenarchitektur), ein Informatiksystem zur Auswertung von Temperaturdaten (Kan ale-und-Filter-Muster) und ein Reisebuchungssystem anhand des Vermittlerarchitekturmusters. F ur jeden Lehr-Lernprozess werden Lernziele zu den Basiskompetenzbereichen nach auen sichtbares Verhalten von Informatiksystemen ( SA), Kombination von nach auen sichtbarem Verhalten mit innerer Struktur ( SAB) sowie Kombination von nach auen sichtbarem Verhalten und Implementierung ( SAC) angegeben und mit konkreten Aufgaben unterlegt. Es werden viele weitere Materialien wie UML-Diagramme und Arbeitsbl atter mit Losungsvorschl agen angegeben. F ur jedes Architekturmuster schliet die unterrichtspraktische Beschreibung mit einer Ubersicht uber alle Lernziele mit Zuordnung des Kompetenzbereichs, der Lernzielebene nach Blooms uberarbeiteter Taxonomie, der konkreten Aufgabe, des Aufgabentyps. Hervorzuheben ist, dass Ufer durchaus die Schwierigkeit benennt, dass die Lernzielebene in Abh angigkeit zum Vorwissen der Sch uler steht. Ufer macht deutlich, wie die Einbindung von f ur Lernende angemessener Lernsoftware zu Architekturmustern mit Schwerpunkt auf vernetzten fundamentalen Ideen der Informatik in den Informatikunterricht der Sekundarstufe II gelingen kann, wenngleich eine Unterrichtserprobung noch aussteht. Es werden Verbindungen zu der vom Autor durchgef uhrten Unterrichtserprobung mit Entwurfsmustern angedeutet, beispielsweise mit Hinweis auf die Lernsoftware Pattern Park (vgl. Ufer 2007, S. 154). 7.3.2 Entwurfsmuster als Wissensrepr asentationen: Einuss von Musterparametern auf das Systemverhalten und Entwurf einer Lernsoftware Weyer (2007b) klassiziert in seiner vom Autor betreuten Diplomarbeit objektorientierte Entwurfsmuster nach Gamma et al. (1995) exemplarisch unter Ber ucksichtigung fundamentaler Ideen der Informatik bez uglich des nach auen sichtbaren Verhaltens von Informatiksystemen. Er betrachtet die Entwurfsmuster Beobachter, Fassade, Proxy, Dekorierer, Iterator, Schablonenmethode und Zustand. Dazu nutzt er Kriterien, die auch Ufer (2007) einsetzte, passte sie aber f ur Entwurfsmuster an (vgl. Abschnitt 5.4; S. 130). Bei dem Kriterium der Zusammenh ange mit anderen Mustern geht er vornehmlich auf strukturelle Ahnlichkeiten von Mustern ein. Der Lebensweltbezug der Muster wird konsequent in den Kontext einer Arztpraxis gesetzt. Anschlieend wird der Entwurf einer Lernsoftware beschrieben, die eine Produktsicht (Arztpraxissoftware), eine Parametersicht (Entwurfsmusterparameter), eine Animationssicht und eine Drag-and-DropSicht anbietet. Dem vorangestellt sind die die Interaktivit atstaxonomie nach Schulmeister und Repr asentationsebenen nach Bruner, in die sp ater eine Einordnung der Sichten erfolgt. Fur die Entwurfsmuster Beobachter, Fassade, Proxy, Iterator und Zustand wird anschlieend je ein Szenario skizziert, in dem vornehmlich durch Ver anderung der Parameter des Musters in der Parametersicht das Verhalten des Informatiksystems in der Produktsicht ver andert wird. Dragand-Drop-Sicht sowie Animationssicht erg anzen die Lernsoftware um weitere Repr asentationsformen und Interaktivit atsstufen f ur einen gestuften Zugang zu den Unterrichtsinhalten anhand der kognitiven Prozesse aus der Lernzieltaxonomie nach Anderson und Krathwohl (2001). Nach den Modulen zu den einzelnen Entwurfsmustern wird ein Modul zur Kombination der Muster Proxy und Beobachter entworfen. Insgesamt sind die Ideen f ur die Lernsoftware ansprechend hinsichtlich der F orderung der Kompetenzentwicklung mit Informatiksystemen, aber uber das Stadium eines Grobentwurfs noch nicht hinaus. Zum Abschluss seiner Arbeit nutzt Weyer die Erkenntnisse aus dem Entwurf der Module, um ein neues fachdidaktisches Kriterium f ur die Evaluation von Entwurfsmustern zu beschreiben: Kriterium 7 (Auswirkung von Parametern auf das Systemverhalten) Die Korrelation zwischen der Anzahl der Parameter und dem Einuss von Anderungen der Parameter auf das198 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells nach auen sichtbare Verhalten ist in Entwurfsmustern zu untersuchen. Einerseits ist das Kriterium dadurch gegenl aug zum Kriterium der Komplexit at, denn eine hohe Anzahl an ver anderbaren Parametern ist Indiz f ur erh ohte Komplexit at des Musters. Andererseits k onnen Parameter, die das Verhalten des Systems beeinussen, jedoch helfen, das System zu analysieren, wodurch ein didaktischer Mehrwert geschaen wird. Damit wird die durch die uberarbeitete Strukturierung der Basiskompetenzen geforderte Kombination von Verhalten und Struktur ( SABundSAC) auf die Kriterien f ur Entwurfsmuster abgebildet. Tabelle 7.2 zeigt die Analyse der f unf von Weyer diskutierten Muster bez uglich des neuen Kriteriums ( !Kriterium 7: Auswirkung von Parametern auf das Systemverhalten). Tabelle 7.2: Exemplarische Analyse von Entwurfsmustern anhand des neuen Kriteriums ( !Kriterium 7: Auswirkung von Parametern auf das Systemverhalten; (Weyer 2007b, S. 74)) Muster Parameter Auswirkung auf das Systemverhalten Beobachter Anpassen an neuen Dokumenttyp (Neuer Beobachter)Animationssicht zeigt verschiedene Dokumente mit individuellen Daten Melde An / Melde Ab Entscheidet dar uber, ob ein Dokument mit Daten best uckt werden kann. Anpassen an neuen Beobachter Stellt zus atzliche Dokumenttypen zur Verf ugung Fassade Typ der Anfrage Entscheidend daf ur welches Subsystem angesprochen wird Anpassen an neues Subsystem (Neues Subsystem)Weitere Verarbeitungsf alle entstehen Proxy Benutzungsrechte Ermoglicht grasche Darstellung von zugelassenen oder blockierten Zugrien Aktivieren des Platzhalters (Proxy aktivieren)Entscheidet dar uber, ob ein Eingri des Schutzproxys uberhaupt stattnden kann Anzahl Zugrie z ahlen Ein Z ahler f ur die Anzahl der vorgenommenen Zugrie Iterator Sequentiell, Polymorph, Mehrfach Entscheiden uber den Typ der Iteration Art der Iteration (nach Datenstruktur) Passt den Iterator an die zu traversierende Datenstruktur an Anpassen an neuen Iterator (Neuer Iterator) Ohne diese Funktion w are es nicht m oglich mehrfach zu iterieren Zustand Zust ande denieren Essentiell f ur den Ablauf des Algorithmus Zustands uberg ange denieren Demnach kann in der Animationssicht ein Film abgespielt werden Kombination Proxy und BeobachterAnalog zu den einzelnen Entwurfsmustern Gegenseitige Beeinussung der bereits aufgefuhrten Parameter In einem Fazit weist Weyer darauf hin, dass weitere Entwurfsmuster anhand des neu entwickelten Kriteriums zu untersuchen sind und dass eine Implementierung des Entwurfs der Lernsoftware aussteht (Weyer 2007b, S. 80). 7.4 Analyse der systematischen Erkundung von Informatiksystemen 7.4.1 Auswirkungen der verfeinerten Strukturierung auf die systematische Erkundung des Systemverhaltens Unterrichtsinhalte sind nicht unabh angig von Unterrichtsmethoden. Erfahrungen und Beobachtungen aus der ersten Erprobung des Unterrichtsmodells haben oen gelegt, dass Sch uler Schwierigkeiten haben, ihr Wissen um Informatikkonzepte mit deren Realisierung in typischen Informatiksystemen zu verkn upfen und die Struktur der Informatiksysteme zu beschreiben (vgl. Kapitel 6). Durch die erste empirische Erprobung des Unterrichtsmodells und die anschlieende7.4. Analyse der systematischen Erkundung von Informatiksystemen 199 Strukturierung der Basiskompetenzen ist weiterhin oensichtlich geworden, dass eine Analyse der systematischen Erkundungen stattnden muss, die eine h ohere interne Validit at hat (Abschnitt 1.2.2). Mit Hilfe der neuen Strukturierung ist es m oglich, die in der ersten Unterrichtserprobung eingesetzten Aufgaben genauer zu analysieren. Bei der Erstellung der Aufgaben wurde bereits Wert auf die Kombination des nach auen sichtbaren Verhaltens mit der inneren Struktur und die Vernetzung fundamentaler Ideen der Informatik gelegt. Dabei stand der Lebensweltbezug im Vordergrund, um die Sch uler zus atzlich zu motivieren. Zur Evaluation ordnen Stechert und Schubert (2007) die Schritte der systematischen Erkundungen des Systemverhaltens und der inneren Struktur (Abschnitt 5.5) den Aspekten (I) Anwendung eines konkreten Informatiksystems, (II) Strukturmodelle von Informatiksystemen und (III) fundamentale Ideen zu. Gleichzeitig werden sie in die Kategorien SA,SAB,SACundSBexemplarisch eingeordnet (Abschnitt 7.2). Die Einordnung ist nicht immer eindeutig, da einige Erkundungsschritte unterschiedliche Aspekte kombinieren, z. B. die Aufgabe, ein Klassendiagramm ( SB) zur Zugriskontrolle (III) zu erstellen, resultiert in der Struktur des Proxymusters (II). In diesem Fall wurde die Aufgabe der Kombination SB-II zugeordnet (statt SB-III), da das Entwurfsmuster als Wissensrepr asentation mehrere vernetzte fundamentale Ideen der Informatik enth alt. Betrachtet man die Schritte der systematischen Erkundung der inneren Struktur von Informatiksystemen (Abschnitt 5.5) und deren Umsetzung im Unterricht, dann f allt auf, dass sie sich grotenteils auf ein konkretes Informatiksystem (I) und konstruktionsgem a auf das Systemverhalten SAbeziehen. Die Kategorie SABwird nur bei der Analyse der Systemkomponenten hinsichtlich ihrer Auswirkungen auf das Systemverhalten angesprochen und bei der Identikation fundamentaler Ideen, die sich auf das Systemverhalten auswirken. Um diese Kategorie zu starken, werden in der zweiten Unterrichtserprobung Systemzust ande thematisiert (Kapitel 8), in denen das Potential gesehen wird, die aufeinander abfolgenden Zust ande eines Systems zur Beschreibung des Verhaltens zu nutzen (Goos und Zimmermann 2006, S. 18). SACwar in der ersten Unterrichtserprobung durch mehrere Aufgaben zur Modikation eines Programms vertreten, es fehlte jedoch an kleineren Variationen, wie sie beim systematischen Testen eingesetzt werden k onnen. Insgesamt ist festzustellen, dass die Dimensionen I, II, III sowie SA,SAB,SAC undSBin der ersten Erkundung angesprochen wurden (Stechert und Schubert 2007, S. 8f). Deren Verteilung ist jedoch sehr unterschiedlich. Die erste Erprobung im unterrichtlichen Geschehen ergab, dass die Sch uler keine Erfahrung mit systematischen Erkundungen des Systemverhaltens haben. Zusammen mit dem Ergebnis der Analyse des Standes der Forschung, dass Beobachtungsaufgaben im Informatikunterricht selten sind, wurde vom Autor die Entscheidung getroen, das Beobachten im Rahmen der Unterrichtsexperimente weiter zu st arken. Daf ur ist Transparenz f ur die Sch uler erforderlich. Gem a der neuen Strukturierung der Basiskompetenzen kann die systematische Erkundung unterschiedlichen Bereichen zugeordnet werden. Der erste Teil stellt die Beobachtung in den Vordergrund (SA), die in Hypothesen uber vernetzte fundamentale Ideen resultiert ( SAB). Die Beobachtungen m ussen dokumentiert werden, um die Versuch-und-Irrtum-Strategie zu vermeiden. Bereits hier sind Sonderf alle und Variationen zu notieren, damit auf die dahinter stehenden Konzepte geschlossen werden kann. Der zweite Teil umfasst dann die Formulierung der Hypothese hinsichtlich der inneren Struktur des Systems (S ABundSB) und die Planung des Experiments. Am Ende der systematischen Erkundung der inneren Struktur stehen kleine Modikationen ( SAC). Eine Klassikation der in der ersten Unterrichtserprobung eingesetzten Aufgaben zeigt, dass zwei Drittel von ihnen den Kompetenzen SAundSABzuzuordnen sind und damit (potentiell oder tatsachlich) durch die Vorgehensweise der systematischen Erkundung von Informatiksystemen gelost werden k onnen (Stechert und Schubert 2007, S. 9). Dabei ist jedoch zu relativieren, dass die Aufgaben nicht gleichwertig bzw. gleich aufw andig sind. Speziell die Aufgaben, die nur die innere Struktur ( SB) und systematisches Testen SACbetreen, erfordern in der Regel mehr Bearbeitungszeit. Schlussfolgerung ist, dass die einzelnen Schritte der systematischen Erkundungen zu Beginn im Unterricht sehr klar deniert und klein zu w ahlen sind, um sie der Strukturierung200 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells zuordnen zu k onnen. Darauf aufbauend kann dann eine f ur den jeweiligen Lehr-Lernprozess geeignete Schwerpunktsetzung durch die Lehrperson erfolgen. 7.4.2 Analyse des Erkundens von Informatiksystemen mittels Laut-Denken Fur die Analyse der systematischen Erkundung mittels Laut-Denken gab es drei wesentliche Grunde: den Widerspruch zwischen (a) den weniger positiven Ergebnissen der Sch uler in der Lernerfolgskontrolle bei Aufgaben zur systematischen Erkundung und (b) der Einsch atzung der Sch uler in der Akzeptanzbefragung, dass die Erkundung von Informatiksystemen einfach sei, die Frage, ob Fehlvorstellungen zu Objektorientierung die kognitiven Barrieren zu Informatiksystemen und Kompetenzentwicklung uberlagern, die Frage, wie die systematische Erkundung anhand der neuen Strukturierung der Basiskompetenzen einzuordnen ist. Die Akzeptanzbefragung nach der ersten Erprobung ergab: Die Mehrheit von 19 (82%) Sch uler gibt an, die systematische Analyse des Systemverhaltens verstanden zu haben. Ebenfalls 19 (82%) Sch uler stimmten der Aussage zu, dass die Inhalte des Unterrichtsprojekts f ur den Umgang mit Informatiksystemen sehr n utzlich sind (Abschnitt A.1). Dabei nahm die systematische Erkundung von Informatiksystemen einen hohen Anteil der Unterrichtszeit ein. Die Lernerfolgskontrolle ergab jedoch folgende, auf den ersten Blick uberraschenden Resultate: Schwierigkeiten traten auf in Bezug auf eine systematische Erkundung des nach auen sichtbaren Verhaltens. Hieraus k onnte der Schluss gezogen werden, dass es kaum Vorkenntnisse bez uglich eines solchen Vorgehens gab, denn bei Aufgaben zur inneren Struktur, die den Aufgaben aus dem vorherigen Unterricht ahnlicher waren, schnitten die Sch uler besser ab. Dennoch haben in einer Aufgabe alle Sch uler angegeben, dass zum Verstehen des nach auen sichtbaren Verhaltens eines Informatiksystems ein systematisches Experimentieren notwendig sei und dass unerwartetes Verhalten eines Informatiksystems R uckschl usse auf dessen innere Struktur liefere. Es zeigte sich eine teilweise Uberforderung der Lernenden bei der Verbindung des nach auen sichtbaren Verhaltens mit der inneren Struktur (Abschnitt 6.5). Angebracht gewesen w are hier eine Aufteilung in kleinere Teilaufgaben. Diese Aufteilung in kleine Aufgaben ist durch die Schrittfolge zur systematischen Erkundung implizit gegeben. Insbesondere ist in der Feldstudie nicht exakt auszumachen gewesen, worauf die Schwierigkeiten zur uckzuf uhren sind, z. B. Fehlvorstellungen der Objektorientierung. Wegen der dennoch hohen Akzeptanz des systematischen Erkundens bei den Sch ulern, wurden einerseits der hohe Abstraktionsgrad der Schrittfolge und inhaltliche Schwierigkeiten mit eben jenen konkreten informatischen Konzepten vermutet. Zum Beispiel gab es zahlreiche Nachfragen zur Bedeutung des Begris"informatische Konzepte" und der Bezug zur bekannten Listenstruktur war f ur die Schuler nicht oensichtlich. Dar uber hinaus zeigte es sich, dass typische Fehlvorstellungen der Objektorientierung Schwierigkeiten zu Informatiksystemen in dieser Konstellation uberlagern konnten. Weigend (2006) erkl art kognitive Barrieren und Fehlvorstellungen damit, dass sich Intuitionen, also Vorstellungen von der Welt, nicht mehr mit der Realit at in Einklang bringen lassen. Weigend uberpr uft solche kognitiven Barrieren im Bereich der Programmierung. Karahasanovic und Holmboe (2006) nennen als typische Lernschwierigkeiten bei der objektorientierten Modellierung beispielsweise die Erzeugung geeigneter Klassen sowie die Integration deklarativer Aspekte (Klassenhierarchie) und prozeduraler Aspekte (Main-Methode), Fehlvorstellung von fundamentalen7.4. Analyse der systematischen Erkundung von Informatiksystemen 201 Konzepten wie Klassen und Vererbung sowie den Transfer von Vorerfahrungen mit traditionellem Entwurf in der prozeduralen Modellierung zur Objektorientierung (vgl. Karahasanovic und Holmboe 2006, S. 50). Beim Entwurf von Klassen sind Kapselung, innere Komplexit at, Platzierung und Benennung von Methoden und Attributen fehlertr achtig. Bei der Struktur die Beziehungen zwischen Klassen, Objekten und Exemplaren sowie die statische Systemstruktur und Assoziationsformen. Auerdem ist die Beschreibung der Problemdom ane schwierig, da sie auf Einschr ankungen hin interpretiert werden muss und die Frage aufkommt, ob man das Problem zur G anze erfasst hat (vgl. Karahasanovic und Holmboe 2006, S. 56). Deshalb wurde zur weiteren Evaluation die systematische Erkundung in einer exemplarischen Laborstudie mit der Methode des Laut-Denkens analysiert (Stechert 2008c). Die Methode f allt in die Kategorie Laborbeobachtung, weil die Beobachtungsbedingungen, unter denen die Untersuchung stattndet, vom Versuchsleiter k unstlich geschaen werden: "Grunds atzliche Unterschiede hinsichtlich des Beobachtungsfeldes lassen sich zwischen Feldbeobachtungen und Laborbeobachtungen feststellen" (Atteslander et al. 2006, S. 76). Laut-Denken zielt als qualitative Untersuchung darauf ab, "in erster Linie komplexere Situationen und Interaktionen in ihrer Ganzheit [zu] erfassen" (Atteslander et al. 2006, S. 77). In ihrer vom Autor betreuten Seminararbeit lieen Stupperich und Warkentin (2007) vier Studierende Aufgaben zur systematischen Erkundung l osen. Neben der systematischen Erkundung des Systemverhaltens wurden zwei weitere Aufgaben zur Erkundung der inneren Struktur des Informatiksystems gestellt. Da anschlieend die Schwerpunktverlagerung zum Systemverhalten vorgenommen wurde, werden letztere im Folgenden nicht explizit betrachtet. Einige Aspekte der inneren Struktur sind jedoch in die Erkundung des nach auen sichtbaren Verhaltens zu integrieren, wenn es um die Kombination mit der inneren Struktur geht. Die Probanden geh oren nicht zur Zielgruppe, Sch uler der Sekundarstufe II, sondern waren Studierende. F ur die Untersuchung mittels Laut-Denken standen Sch uler der Sekundarstufe II nicht zur Verf ugung, denn es bestand keine M oglichkeit, Sch ulern Anreize zu bieten, trotz ihres uberfullten Schullalltags an der Studie teilzunehmen. Die Informatikvorkenntnisse der Studierenden waren unterschiedlich: Versuchsperson 1 studiert Lehramt Informatik im ersten Semester, Versuchsperson 2 und 3 ebenfalls, aber im siebten bzw. f unften Semester, und Versuchsperson 4 hatte Informatik nach zwei Semestern abgew ahlt. Insbesondere die Versuchspersonen 1 und 4 wurden ausgew ahlt, da sie ahnliches Vorwissen wie die Sch uler der Sekundarstufe II aufwiesen. Zus atzlich waren die Versuchsleiterinnen unerfahren hinsichtlich der Durchf uhrung des Laut-Denkens, was sie in ihrer eigenen Kritik und im Rahmen von Verbesserungsvorschl agen f ur weitere Uberpr ufungen mittels Laut-Denken oen diskutieren (Stupperich und Warkentin 2007, S. 37). Deshalb ist klar, dass R uckschl usse vorsichtig zu ziehen sind und gefundene Problemstellen bei den Studierenden nur als Hinweise f ur die Sekundarstufe II dienen k onnen. Konkrete Aufgabe war, das nach auen sichtbare Verhalten eines Arztpraxissystems nach der vorgegebenen Systematik zu erkunden (Stupperich und Warkentin 2007, S. 39). Die Ergebnisse lassen sich in zwei Kategorien unterteilen. Einerseits sind typische Verst andnisprobleme bez uglich der Aufgabenstellung und andererseits Erkenntnisse uber die Vorgehensweisen bei der Bearbeitung der Aufgabenstellungen zu nennen. Die Verst andnisprobleme bez uglich Aufgabenstellung umfassten vor allem unklare, unbekannte Begrie wie den allgemein gehaltenen Terminus"informatische Konzepte", die von den Sch ulern identiziert werden sollten. Und unerwartete Schwerpunktsetzungen, wie sie das systematische Erkunden des nach auen sichtbaren Verhaltens oenbar aufgrund mangelnder Erfahrung mit einer solchen Vorgehensweise darstellte. Erwartet wurden vermutlich Programmieraufgaben. Auerdem wurden Hinweise zu den Aufgaben nicht beachtet.202 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells Stupperich und Warkentin (2007) el bei allen Versuchspersonen auf, dass sie Schwierigkeiten mit der Umsetzung der Vorgehensweise hatten. Sie h atten keinen richtigen Zugang zur Umsetzung der Vorgehensweise gefunden (Stupperich und Warkentin 2007, S. 25). F ur die Uberpr ufung der Aufgabe in weiteren Laborstudien empfehlen sie daher, eine Ubungsaufgabe des gleichen Schemas im Vorfeld zu stellen, damit die Probanden sie ein uben k onnen. F ur den Unterricht in der Sekundarstufe II ist diese Schlussfolgerung insofern nachvollziehbar, dass auch bei Sch ulern anzunehmen ist, dass diese Vorgehensweise nicht zu den Vorkenntnissen geh ort und sie deswegen von der Lehrperson daf ur sensibilisiert werden m ussen. Die Bearbeitungszeit f ur die Aufgabe konnte durch die Studie zum Laut-Denken sehr viel genauer bestimmt werden, als es in der Unterrichtserprobung m oglich war, so dass die Zeitplanung angepasst werden konnte. Die detaillierte Bearbeitung der Aufgabe durch Versuchsperson 3 dauerte beispielsweise 14 Minuten statt der erwarteten 5 Minuten (Stupperich und Warkentin 2007, S. 21), die durchschnittliche Bearbeitungszeit betrug 11 Minuten. Dennoch ist gerade bei der Einf uhrung der systematischen Erkundung auf eine detaillierte Bearbeitung durch die Sch uler wert zu legen, so dass die Bearbeitungszeit heraufzusetzen ist. Daruber hinaus wurden unterschiedliche Vorgehensweisen bei der Bearbeitung der Schritte zur systematischen Erkundung festgestellt. So arbeitete Versuchsperson 1 vom Konkreten zum Abstrakten, versuchte erst, jeden Erkundungsschritt grob abzuarbeiten und sich ein Bild vom Verhalten des Systems zu machen. Sp ater wurden die Ergebnisse einzelner Schritte n aher speziziert (Stupperich und Warkentin 2007, S. 10). Dabei ging sie dennoch strukturiert vor und formulierte Hypothesen uber das Verhalten, bevor es erkundet wurde. Auch Versuchsperson 2 stellte Hypothesen auf und revidierte sie gegebenenfalls (Stupperich und Warkentin 2007, S. 16), arbeitete die Schritte der systematischen Erkundung jedoch sukzessive ab. Interessant war, dass bei den sp ateren Aufgaben zur Erkundung der inneren Struktur oft Bezug genommen wurde auf die Erkenntnisse aus der systematischen Erkundung des Verhaltens. Es wurde also ein Perspektivwechsel zwischen Erkenntnissen aus beobachtetem Verhalten und Quellcodeanalyse sowie zwischen Klassendiagrammen und Quellcode vorgenommen: "Positiv aufgefallen ist die Tatsache, dass diese Versuchperson beim Bearbeiten des zweiten und dritten Schrittes [der Erkundung der inneren Struktur; Anm. d. V.] immer einen Perspektivenwechsel gemacht hat. Sie hat bestimmte Operationen im laufenden Programm mit den entsprechenden Funktionen im Quellcode verglichen. ,Wenn ich im Programm den Button 'neuer Patient' klicke, wird ein Patient erstellt mit den Parametern aus meinen Eingabefeldern'." (Stupperich und Warkentin 2007, S. 26). Ziel muss es sein, diesen Perspektivwechsel weiter zu unterst utzen. 7.4.3 Zusammenfassung der Analyse des Erkundens von Informatiksystemen Die Schwerpunktverlagerung auf die Betrachtung des Systemverhaltens resultiert darin, dass in der zweiten Erprobung (Kapitel 8) keine explizite Erkundung der inneren Struktur vorgenommen wird. Einige Aspekte der inneren Struktur sind jedoch in die Erkundung des nach auen sichtbaren Verhaltens zu integrieren, wenn es um die Kombination mit der inneren Struktur geht. Die Resultate der Laboruntersuchung f uhrten in erster Linie nur zu einer minimalen Uberarbeitung in der Formulierung der Schritte zur systematischen Erkundung von Informatiksystemen, aber nicht zu einer Reorganisation. Stattdessen ist die Konsequenz eine sehr viel detailliertere Einf uhrung der Vorgehensweise in den Unterricht. Die erste Unterrichtserprobung und Analyse mittels Laut-Denken legen nahe, dass den Sch ulern Erfahrungen mit einer systematischen Erkundung des Systemverhaltens fehlen und die Schrittfolge zur systematischen Erkundung nicht selbsterklarend ist. Somit ist das systematische Erkunden im Unterricht st arker zu thematisieren und beispielsweise von der Lehrperson zu demonstrieren. Der hohe Abstraktionsgrad der systematischen Erkundung kann durch eine Kontextualisierung verringert werden. Die Forderung nach Kontextualisierung impliziert eine Umformulierung in Anlehnung an die Lebenswelt der Sch uler7.5. Zusammenfassung 203 und hinsichtlich des konkreten Informatiksystems (vgl. Abbildung 8.3). Damit kann auch explizit auf den Zweck des jeweiligen Informatiksystems eingegangen werden, wie Karahasanovic und Holmboe es fordern (Karahasanovic und Holmboe 2006, S. 58), und die Verwendung von Begrien vermieden werden, die den Sch ulern unbekannt sind. 7.5 Zusammenfassung In diesem Kapitel wurde eine verfeinerte Strukturierung der Kompetenzen zu Informatiksystemen angegeben, die den Schwerpunkt auf die Analyse des nach auen sichtbaren Verhaltens und dessen Kombination mit der inneren Struktur und Implementierungsaspekten legt (Abschnitt 7.2). Die Analyse von Architekturmustern liefert eine Erweiterung der einsetzbaren Wissensrepr asentationen f ur vernetzte fundamentale Ideen der Informatik im Rahmen des Unterrichtsmodells. Die Anwendung der neuen Strukturierung und die Gestaltung von Aufgaben zur Architekturund Entwurfsmustern sowie entsprechender Lernsoftware erweitern das Spektrum des Unterrichtsmodells (Abschnitt 7.3). Durch die erste Unterrichtserprobung (Kapitel 6), die neue Strukturierung und die Analyse mittels Laut-Denken werden die Sch ulertatigkeiten zur systematischen Erkundung des Systemverhaltens im Rahmen des Unterrichtsmodells neu bewertet. Wichtigste Schlussfolgerung ist, dass die Erkundung im Unterricht explizit thematisiert werden muss, was beispielsweise eine Lehrerdemonstration mit einschliet, da den Sch ulern Erfahrungen mit einer solchen Vorgehensweise fehlen.204 7. Weiterentwicklung, Verfeinerung und Erg anzung des Unterrichtsmodells8. Zweite exemplarische Erprobung des Unterrichtsmodells 8.1 Uberblick In diesem Kapitel wird die zweite Erprobung des Unterrichtsmodells beschrieben und evaluiert. Grundlage ist das uberarbeitete Unterrichtsmodell, dessen Schwerpunkt auf der Verbindung unterschiedlicher Sichten auf Informatiksysteme liegt. Die Rahmenbedingungen einschlielich inhaltlicher Konzeption, Lerngruppe, zeitlichen und technischen Restriktionen sowie Unterrichtsmethodik werden in Abschnitt 8.2 angegeben. Abbildung 8.1: Einordnung des achten Kapitels in den Forschungsverlauf Die Beschreibung und Durchf uhrung der Erprobung geschieht in Abschnitt 8.3. In Abschnitt 8.4 werden die erhobenen Daten zur Evaluation hinsichtlich Machbarkeit und Akzeptanz durch Schuler und Lehrer herangezogen. Abschlieend wird eine kurze Diskussion der Ergebnisse vorgenommen (Abschnitt 8.5). Abbildung 8.1 zeigt die Einordnung des Kapitels in den Forschungsverlauf.206 8. Zweite exemplarische Erprobung des Unterrichtsmodells 8.2 Rahmenbedingungen und Untersuchungsmethodik 8.2.1 Inhaltliche Konzeption und Einordnung in den Forschungsverlauf Untersuchungsschwerpunkte sind 1. die Br ucke zwischen dem Verhalten und der inneren Struktur von Systemen und speziell die Eignung ausgew ahlter Entwurfsmuster zur Beschreibung von kombinierten Sichten auf Informatiksysteme (Abschnitt 7.2), 2. die lehr-lernmethodische Herausforderung durch die fehlende Erfahrung der Sch uler mit systematischen Erkundungen von Informatiksystemen und speziell die Akzeptanz der Sch uler bez uglich der uberarbeiteten Vorgehensweise zur systematischen Erkundung von Informatiksystemen (Abschnitt 7.4), 3. mehrfacher Einsatz (von Variationen) eines Entwurfmusters in unterschiedlichen Programmen und Kontexten zur F orderung des Transfers (vgl. Abschnitt 6.5.1), 4. die zunehmende Vernetzung fundamentaler Ideen durch Vernetzung von Entwurfsmustern im Unterricht (Stechert 2008a), (Stechert 2008b). Wie in der ersten Erprobung ist damit die Objektorientierung grundlegend. Insgesamt ist die zweite Unterrichtserprobung auf vier Wochen  a drei Unterrichtsstunden pro Woche ausgelegt. Es wurden Zugriskontrolle und Zust ande als Inhalte gew ahlt. Das Thema Zugriskontrolle wurde bereits in der ersten Unterrichtserprobung umgesetzt. Damit eignet es sich, um die Weiterentwicklung des Unterrichtsmodells in der Unterrichtspraxis zu uberpr ufen. Das Thema Zust ande wiederum ist aufgrund der Fokussierung auf das Systemverhalten in die Unterrichtserprobung aufgenommen worden. Systemzust ande beschreiben die innere Struktur von Informatiksystemen im Sinne von Kongurationen der Komponenten (Abschnitt 3.2.1; Abschnitt 7.4). Die Folge der Systemzust ande wiederum kennzeichnet das Systemverhalten, das ggf. nach auen sichtbar wird (Goos und Zimmermann 2006, S. 18). Weitere Anderung gegen uber der ersten Unterrichtserprobung ist, dass Implementierungsaspekte (SC) einen wiederum verringerten Stellenwert haben. Die Lernziele hinsichtlich des nach auen sichtbaren Verhaltens ( SA) mussen im Rahmen systematischer Erkundungen von Informatiksystemen stattnden, um unerwartetes Verhalten zu entdecken, z. B. Fehler. Zu erarbeitende Losungen k onnen auf der Ebene des nach auen sichtbaren Verhaltens durch Hypothesenbildung umgesetzt werden. Zur Kombination des Verhaltens mit der inneren Struktur ( SAB) sollen eine vorliegende Dokumentation eines Programms, unterschiedliche Modellierungen und Diagrammarten genutzt werden, und zwar Klassen-, Sequenzund Zustandsdiagramme. Zur Erstellung von Zustandsdiagrammen wurden die Zust ande aus dem Verhalten eines Informatiksystems abgeleitet, um sich von der Modellierung abzugrenzen, d. h. sie wurden nicht aus vorhandenen oder erarbeiteten objektorientierten Modellen wie Klassendiagrammen erstellt, bei denen Attribute Hinweise auf Zust ande und Operationen auf Zustands uberg ange liefern. Zusammenfassend bilden die fundamentalen Ideen Zugriskontrolle und Zust ande in den Entwurfsmustern Proxy und Zustand die Leitmotive, da die Entwurfsmuster eine konsistente Reprasentation f ur verschiedene Perspektiven auf das System bieten. Mit Blick auf den Zusammenhang zwischen Systemzust anden und dem Verhalten von Informatiksystemen wird implizit das Zustandsmuster im Systemverhalten nachgewiesen. Tabelle 8.1 zeigt exemplarische Unterrichtsinhalte anhand der Strukturierung der Basiskompetenzen. 8.2.2 Lerngruppe und zeitlicher Rahmen Im November und Dezember 2007 wurde die zweite Unterrichtserprobung uber vier Wochen durchgef uhrt. Um ahnliche Rahmenbedingungen wie in der ersten Unterrichtserprobung zu schaffen, wurde wieder ein Grundkurs Informatik am gleichen Gymnasium in der gleichen Jahrgangsstufe der Sekundarstufe II, n amlich 12. Klassenstufe, zur gleichen Zeit im Schulhalbjahr ausgewahlt. An der Erprobung beteiligt waren 13 Sch uler im Alter von etwa 17 Jahren, davon drei8.2. Rahmenbedingungen und Untersuchungsmethodik 207 Tabelle 8.1: Exemplarische Ubersicht der inhaltlichen Konzeption anhand der Strukturierung der Basiskompetenzen exemplarische Unterrichtsinhalte SA;1 Die fundamentale Idee der Zugriskontrolle und systematische Erkundung des Verhaltens von Informatiksystemen bez uglich unterschiedlicher Zugrisrechte (Proxymuster). SA;2 Die Relevanz von Zust anden anhand der Ergebnisse einer systematischen Erkundung des Verhaltens von Informatiksystemen (Zustandsmuster). SAB;1Die Beziehungen zwischen Aspekten der Zugriskontrolle im Verhalten und dem objektorientierten Entwurf, z. B. dass Vererbung es einem Stellvertreterobjekt erlaubt, wie ein anderes Objekt, auf das es den Zugri sch utzt, zu erscheinen. SAB;2Zustandsdiagramme aus dem Verhalten von Informatiksystemen ableiten, wie es in SA;2erkundet wurde. SAC;1 Repr asentation des Programms durch Quellcode und Darstellung des Verhaltens des Informatiksystems in einem Sequenzdiagramm zur Zugriskontrolle. SAC;2 Ableiten von Zustands uberg angen aus dem Verhalten des Informatiksystems und Identikation von Ursachen Quelltext. SB;1 Zugriskontrolle durch Vererbung und Ableitung eines objektorientierten Modells des Proxymusters (SA;1). SB;2 Zustande und Zustands uberg ange sowie Zustandsdiagramme. Schulerinnen. Vorkenntnisse der Sch uler umfassten wie in der ersten Erprobung objektorientiertes Modellieren, Klassendiagramme und die Warteschlange als Datenstruktur. Programmiert wurde bis dahin in Delphi 6. Abgeschlossen wurde das Unterrichtsprojekt mit einer schriftlichen Ubung als Lernerfolgskontrolle, einer schriftlichen Akzeptanzbefragung der Sch uler und einem Interview mit der betreuenden Informatiklehrperson der Schule. Tabelle 8.2 zeigt die Ubersicht uber die Unterrichtsstunden und -themen. Tabelle 8.2: Themenliste der zweiten Unterrichtserprobung mit Einzel(ES) und Doppelstunden (DS) Termin Stundenthema 12.11.2007 (DS) 1. Sensibilisierung f ur Informatiksysteme; 2. Sensibilisierung f ur Zugriskontrolle (Proxy, Stellvertreter) 15.11.2007 (ES) Entwurfsmuster Proxy identizieren 19.11.2007 (DS) Modellierung dynamischer Abl aufe bei der Zugriskontrolle mit Sequenzdiagrammen 22.11.2007 (ES) Wiederholung und Festigung vom Entwurfsmuster Proxy und von Sequenzdiagrammen 26.11.2007 (DS) 1. Sensibilisierung f ur Systemzust ande; 2. Zustandsmodellierung 29.11.2007 (ES) Beschreibung dynamischer Abl aufe durch Zustandswechsel 03.12.2007 (DS) Das Entwurfsmuster Zustand identizieren und Modellierung mit Zustandsdiagrammen 06.12.2007 (ES) schriftliche Ubung: Test Akzeptanzbefragung Eine wichtige Anderung zur ersten Unterrichtserprobung war, dass zwei Lehramtsstudierende im Rahmen ihres fachdidaktischen Praktikums unterrichteten. Unterrichtsentw urfe und Lernsoftware hatten sie anhand der Vorlagen aus der ersten Unterrichtserprobung zusammen mit dem Autor ausgearbeitet. Dies hatte zur Folge, dass der Autor die praktische Umsetzung des Unterrichtsmodells durch andere Lehrpersonen beobachten konnte. Der Umstand, dass in dieser zweiten Unterrichtserprobung zwei Lehramtsstudierende die unterrichtenden Personen waren und eine neue Informatiklehrperson den Kurs betreute, kann als Indiz daf ur gewertet werden, dass Wiederholbarkeit und Anwendbarkeit des Unterrichtsmodells nicht allein durch die Forschungsperson gelingt. Annahme war, dass die Sch uler bisher keine systematischen Vorgehensweisen zur Erkun-208 8. Zweite exemplarische Erprobung des Unterrichtsmodells dung von Informatiksystemen kennen gelernt haben. Die Informatiklehrperson der Schule, beide Informatiklehramtsstudierende und der Autor waren an der Stundenvorbereitung beteiligt und werteten die Unterrichtsverl aufe anschlieend aus. 8.2.3 Unterrichtsmethodik und technischer Rahmen In der zweiten Erprobung wurde verst arkt auf Motivierung der Sch uler eingegangen, da der Bedarf durch die Akzeptanzbefragung nach der ersten Unterrichtserprobung erkannt wurde. Mit diesem Ziel wurden die ersten Unterrichtsentw urfe nach dem ARCS-Modell (Attention { Relevance { Condence { Satisfaction) nach (Keller 1987) ausgearbeitet (vgl. Hubwieser 2007a, S. 17): Ein Informatiksystem kann durch Fehlermeldungen Sch uler vor mentale Herausforderungen stellen (Attention) und die Notwendigkeit von Kompetenzen wird schnell ersichtlich (Relevance). Mit Hinweis auf geeignete Vorgehensweisen wie der systematischen Erkundung und sp aterem Einsatz von Modellierungsmethoden wie Sequenzund Zustandsdiagrammen wurde ein angemessener Grad an Zuversicht erzeugt, das Ziel zu erreichen, wobei auch Grenzen der Methoden oen gelegt werden m ussen (Condence). Durch das erfolgreiche Anwenden der genannten Methoden und Vorgehensweisen wird der Lernerfolg (Satisfaction) sichtbar. Grundlage der Unterrichtsplanung bildeten des Weiteren Uberlegungen zu den Sch uleraktivit aten. Die Lehrervortr age und Einf uhrungen sollten nur wenige Minuten pro Stunde in Anspruch nehmen. Dies f uhrte zu einem Zielkonikt, denn in der ersten Erprobung wurde der Bedarf an Lehrerdemonstrationen zu den Unterrichtsexperimenten und Beobachtungsaufgaben der Sch uler festgestellt. Durch die Vermeidung von Programmieraufgaben gelang es im Vergleich zur ersten Unterrichtserprobung, mehr Zeit auf Beobachtungen und Gruppenarbeit statt auf Einzelbzw. Partnerarbeit zu verwenden. Partnerarbeit nahm jedoch weiterhin den Hauptteil der Aufgabenlosung ein. In dieser zweiten Erprobung fand der Unterricht in einem anderen Informatiklabor der Schule statt. Dennoch war auch hier ein zentraler Kommunikationsbereich, dezentrale Rechnerarbeitspl atze an zwei Seiten und ein Demonstrationsbereich mit Tafel, Projektor und Pr asentationsrechner an der Raumvorderseite. Damit unterst utzte der Raum den unkomplizierten Wechsel zwischen geistig planenden T atigkeiten im Kommunikationsbereich und praktischen T atigkeiten an den Rechnerarbeitspl atzen. Das Schulintranet erlaubte Verbindung zum Internet, so dass Rechercheaufgaben gestellt werden konnten, wie z. B. zu objektorientierten Entwurfsmustern. Eine gemeinsam nutzbare Partition erm oglichte das Austauschen aller eingesetzten Programme. 8.3 Beschreibung und Durchf uhrung der Erprobung 8.3.1 Lernphasen und Problemstellen im Unterrichtsprojekt Ziel der Unterrichtserprobung war es, kognitive Barrieren und Fehlvorstellungen bez uglich der Sichten auf Informatiksysteme und deren systematischer Erkundung qualitativ zu analysieren. Schulerlosungen wurden dementsprechend eingesammelt und vor der Erprobung wurde angekundigt, dass die Note der abschlieenden Lernerfolgskontrolle zur Gesamtnote z ahlen w urde, um zuverl assigere Daten zu bekommen. Gleichzeitig bedeutete es, dass die Testergebnisse nicht anonymisiert erhoben wurden. Begonnen wurde mit einem Programm zur Zugriskontrolle, dass auch in der ersten Unterrichtserprobung im Einsatz war, da diese eine fundamentale Idee der Informatik ist (Abschnitt 5.4.4). In dem Programm waren unterschiedliche Benutzerrollen mit verschiedenen Zugrisrechten umgesetzt: Administrator, Benutzer und Gast. Grundlage des Programms war das Proxymuster, das in der inneren Struktur eine von Softwareentwicklern erprobte L osung darstellt. Das Verstehen der Benutzungsober ache und der darauf bendlichen Funktionen erm oglicht die angemessene Bedienung des Programms. F ur eine uber die Bedienung hinausgehende Analyse des Informatiksystems m ussen die Sch uler dessen Funktionsweise verstehen lernen und abstrahieren k onnen.8.3. Beschreibung und Durchf uhrung der Erprobung 209 Auerdem ist das System mit ahnlichen Systemen zu vergleichen. Ein zweites, vor der Erprobung neu entwickeltes Programm auf Basis des Proxy realisierte Zugriskontrolle in einer Arztpraxis. Daruber hinaus kam die mittlerweile fertig gestellte Lernsoftware Pattern Park zum Einsatz, um dynamische Aspekte der Zugriskontrolle in einer Animation und zwei Ubungen mit Sequenzdiagrammen zu erm oglichen. F ur den zweiten Schwerpunkt, die Zust ande, wurde das Modul zum Zustandsmuster aus der Lernsoftware Pattern Park zur Einf uhrung genutzt. Anschlieend konnte ein vorbereitetes Programm eingesetzt werden, dass eine Erweiterung des Programms der Zugriskontrolle in der Arztpraxis um das Zustandsmuster darstellte, d. h. Zustandsmuster und Proxymuster wurden kombiniert. Bei der Arztpraxissoftware sind unterschiedliche Zust ande zu erkennen, die durch bestimmte Eingaben ver andert werden und zu Systemausgaben und geandertem Systemverhalten f uhren. Eine Woche vor Beginn der Unterrichtserprobung hospitierten die Lehramtsstudierenden und der Autor in einer Doppelstunde des entsprechenden Kurses. Darin wurde best atigt, dass die Sch uler Klassendiagramme nutzen konnten, um die innere Struktur von Informatiksystemen objektorientiert darzustellen. Schwierigkeit schien jedoch die Unterscheidung zwischen der Manipulation von Daten und der Manipulation einer Darstellung der Daten in der GUI zu sein. 8.3.2 Br ucke zwischen Verhalten und innerer Struktur durch Erkundung von Informatiksystemen Unter der Pr amisse, dass ein Zugang zu Informatiksystemen uber das nach auen sichtbare Verhalten zu w ahlen ist, wurde die Strukturierung der Basiskompetenzen verfeinert (Abschnitt 7.2). Die systematische Erkundung des nach auen sichtbaren Verhaltens der lernf orderlichen Software erh alt hinsichtlich der Strukturierung der Basiskompetenzen die Einordnung SA, wobei das Informatiksystem zun achst als Black-Box systematisch analysiert wird. Anschlieend werden Bez uge zur inneren Struktur und zu ausgew ahlten Implementierungsaspekten betrachtet, um das zugrunde liegende Strukturmodell zu verstehen. Zur Kombination des nach auen sichtbaren Verhaltens mit der inneren Struktur ( SAB) wurden Sequenzdiagramme als formale Darstellung genutzt, die z. B. durch die Lernsoftware Pattern Park (Stechert 2006c) im Kontext von vernetzten fundamentalen Ideen und Entwurfsmustern erlernt werden k onnen. Mit ihnen konnen Objekte, die aus dem Verhalten des Systems abgeleitet und auf der Benutzungsoberache identiziert wurden, beschrieben werden. Das Analysieren der Systemkomponenten kann beispielsweise zum Testen und Modizieren ( SAC) einzelner Komponenten f uhren. Im Zusammenhang mit der Kombination der Perspektiven des nach auen sichtbaren Verhaltens und der inneren Struktur steht, dass den Sch ulern in der ersten Unterrichtserprobung Erfahrung mit systematischen Erkundungen des Verhaltens von Informatiksystemen fehlte. Die systematische Erkundung von Informatiksystemen wurde im Vorfeld des zweiten Unterrichtsprojektes analysiert, um kognitive Barrieren aufzudecken, z. B. bez uglich der gew ahlten Fachsprache (Abschnitt 7.4). Die handlungsorientierte Vorgehensweise zur systematischen Erkundung von Informatiksystemen bildete in dieser Unterrichtserprobung den ersten Schwerpunkt, um den vorher festgestellten Mangel an Vorerfahrungen mit systematischen Erkundungen von Informatiksystemen zu beheben. Daf ur wurde zu Beginn die Wichtigkeit der Hypothesenbildung der Sch uler zur Analyse des nach auen sichtbaren Verhaltens thematisiert. Es wurde die Schrittfolge der systematischen Erkundung von Sch ulern und Lehrperson gemeinsam im Plenum durchgef uhrt. Anschlieend erkundeten die Sch uler wie im ersten Unterrichtsprojekt die lernf orderliche Software zur Zugriskontrolle ( SA;1) mit den Rollen Administrator, Benutzer und Gast (Abbildung 6.2). Bei der Beschreibung der Benutzungsober ache sind zwei Vorgehensweisen der Sch uler oensichtlich geworden: Eine Sch ulergruppe hat die grasche Benutzungsober ache in Bl ocke mit Sinnzusammenhang hinsichtlich unterschiedlicher Teilnehmer (-objekte) mit unterschiedlichen Zugrisrechten unterteilt und diese in Leserichtung von links nach rechts beschrieben. Eine210 8. Zweite exemplarische Erprobung des Unterrichtsmodells zweite Gruppe hat die Ober achenelemente nach bekannten Programmiersprachenkonstrukten sortiert, n amlich nach Labels, Buttons und Textfeldern. Beim Experimentieren mit Sonderf allen vermutete eine Sch ulergruppe allein durch das nach auen sichtbare Verhalten des Programms eine Realisierung der Zugriskontrolle uber Case-Anweisungen. Diese nicht mit der objektorientierten Denkweise konforme Vorstellung konnte analog zur ersten Unterrichtserprobung durch Identizieren von Klassen uberwunden werden, die zeigen, wie ein Stellvertreter durch Vererbung das gleiche Erscheinungsbild bzw. die gleiche Schnittstelle wie das Original haben kann. Durch die aufeinander aufbauenden Schritte zur systematischen Erkundung des Informatiksystems stellte die begleitende Anfertigung eines Klassendiagramms zur Dokumentation und Formalisierung keine un uberwindbare H urde dar. Interessant ist, dass eine Sch ulerin bei der Beschreibung der Beziehungen zwischen den Ober achenelementen nachfragte:"Ab wann d urfen wir ausprobieren?". Wenngleich die Frage darauf abzielte, eine Versuch-Irrtum-Vorgehensweise anzuwenden, so zeigte der Vergleich der Sch ulerlosungen durch Nennung unterschiedlicher, auch verworfener Hypothesen, dass Hypothesenbildung erfolgte. Die Wiederholbarkeit als Kriterium f ur Experimente zeigte sich dadurch, dass in beiden Erprobungen ahnliche Ergebnisse zu beobachten waren, die in der zweiten durch gezielte Vorbereitung verst andiger diskutiert wurden. Um der fehlenden Erfahrung der Sch uler mit der systematischen Erkundung von Informatiksystemen zu begegnen, konnte eine weitere, auf dem Entwurfsmuster Proxy als Wissensrepr asentation basierende lernf orderliche Software eingesetzt werden. Dabei unterst utzte der Ansatz der auf dem Proxymuster basierenden Software die Erstellung einer in der Struktur unver anderten Software mit einem anderen Kontext. Es handelte sich um eine Arztpraxissoftware, die von den Sch ulern systematisch erkundet, und in der Zugriskontrolle auf Patienten (-daten) durch eine Arzthelferin realisiert wurde ( !Kriterium 2: Zweck und Einsatzgebiet; S. 123). Das in der Klassikation der Entwurfsmuster genannte Kriterium der Komplexit at (!Kriterium 5: Komplexit at; S. 123) liefert dabei Hinweise auf Variationen des Proxymusters, so dass z. B. Schwerpunktverlagerungen auf weitere fundamentale Ideen im Proxymuster ( !Kriterium 3: Vernetzte fundamentale Ideen der Informatik; S. 123) vorgenommen werden k onnen (Stechert 2006c) oder die Anzahl der Zugrie durch den Stellvertreter gez ahlt werden kann. Das wieder kehrende Schema des Proxy unterst utzte den Lernprozess, da ein Transfer zu einer weiteren Situation vorgenommen wurde. Dadurch bietet sich die Gelegenheit, andere Schwerpunkte zu setzen, denn die Betrachtung des Schnittstellenverhaltens l asst die weiteren in den Entwurfsmustern vorkommenden vernetzten fundamentalen Ideen hervortreten, z. B. Schnittstelle, Parametrisierung und dynamisches Binden. Den Bedarf an Aufgaben, die den Transfer unterst utzen, zeigte die Lernerfolgskontrolle in der ersten Unterrichtserprobung (Abschnitt 6.5.1). Bezuglich eines Spiralcurriculums ist nun zu fragen, wie sich die systematische Erkundung in einem vertikalen, also mit der Zeit vertiefenden Charakter wiederkehrend ins unterrichtliche Geschehen integrieren l asst. Neben der Vielzahl m oglicher Fehlersituationen und unerwarteten Systemreaktionen liegt der Schl ussel in komplexeren Anwendungskontexten und speziell dem Erkennen st arker werdender Beziehungen zwischen vernetzten fundamentalen Ideen. Da dynamische Aspekte essentiell f ur Informatiksysteme sind, wurden Sequenzdiagramme eingefuhrt. In einem ersten Schritt mussten die Sch uler alle an der Situation beteiligten Objekte identizieren. Danach konnten sie vorgegebenen Quelltext identizieren, der den entsprechenden Objekten entsprach. Dabei wurde besonders auf Hypothesen uber die notwendige Objektkommunikation geachtet, d. h. den Austausch von Nachrichten ( SAC;1). Mit Hilfe der ersten einfachen Sequenzdiagramme waren die Sch uler in der Lage, dynamisches Verhalten in der inneren Struktur und ggf. mit Einuss auf das nach auen sichtbare Verhalten zu modellieren. Dabei unterst utzte die Lernsoftware Pattern Park die ersten Schritte zu Sequenzdiagrammen ( SAB;1undSB;1) 8.3.3 Vernetzung mit dem Zustandskonzept Ein wichtiger Vorteil von Entwurfsmustern wurde bislang nicht aufgegrien: ihre Kombinierbarkeit mit weiteren Entwurfsmustern ( !Kriterium 4: Zusammenh ange mit anderen Struktur-8.3. Beschreibung und Durchf uhrung der Erprobung 211 modellen; S. 123). Da dies kein Selbstzweck ist, wurde f ur eine Fortsetzung im Unterricht ein Beitrag zur Erkl arung des nach auen sichtbaren Verhaltens durch das Zustandskonzept analysiert, denn die Folge der Zust ande beschreibt das Verhalten des Systems (Goos und Zimmermann 2006, S. 18). Zust ande lassen sich in der Klassikation der Unterrichtsinhalte nach Hubwieser und Broy als charakteristisch f ur alle Informatiksysteme klassizieren und ihre Anwendung ist auch auerhalb von Informatiksystemen m oglich (Hubwieser 2007a, S. 83). Abbildung 8.2: Klassendiagramm der Arztpraxis mit den Entwurfsmustern Proxy und Zustand Automatenmodelle betonen die Zust ande und Zustands uberg ange, also dynamische Aspekte. Dies erm oglicht eine Beschreibung von Systemzust anden und Ereignisketten. Dabei ist jedoch darauf hinzuweisen, dass es sich um eine theoretische Betrachtung des Systemverhaltens handelt, die nicht ohne Schwierigkeiten mit dem nach auen sichtbaren Verhalten eines Systems gleichzu-setzen ist. Dadurch ist eine Bildungsherausforderung beschrieben, die f ur Sch uler das Potential bietet, mittels Zustandsautomaten eine Br ucke vom nach auen sichtbaren Verhalten zur inneren Struktur des Informatiksystems zu schlagen. Zustandsautomaten stellen im Unterrichtneben den Sequenzdiagrammen eine weitere Sicht auf Abl aufe dar, um die kognitive H urde der Formalisierung zur Dokumentation zu uberwinden. Deshalb wurde eine Erweiterung der Arztpraxissoftware um das Zustandsmuster vorgenommen und im Unterricht eingesetzt. Abbildung 8.2 zeigt die Kombination von Proxyund Zustandsmuster in der Arztpraxis. Es wurde eine stark kontextualisierte Variante der systematischen Erkundung verwendet (S A;2; Abbildung 8.3). Zust ande des Programms sind abh angig von Gesundheitszust anden der Patienten. Streng genommen muss zwischen Systemzust anden und Zust anden der Patienten unterschieden werden. F ur Sch uler ist die im Informatiksystem vorhandene Zugriskontrolle dahingehend ein Unterscheidungsmerkmal. Die Sch uler erstellten anhand des Verhaltens des Programms Zustandsdiagramme in Abh angigkeit der Zugriskontrolle ( !Kriterium 3: Vernetzte fundamentale Ideen der Informatik; S. 123). Somit erfolgte eine weitere Vernetzung. Bei der systematischen Erkundung erleichtert der Lebensweltbezug die Hypothesenbildung (! Kriterium 6: Lebensweltbezug; S. 123). Die Sch uler mussten in der Rolle des Arztes dem Patienten die richtige Medikamentendosis in Abh angigkeit von deren Gesundheitszustand geben. Interessant f ur das Thema Informatiksysteme und Gesellschaft war die Diskussion der Sch uler, in der sie hinterfragten, inwieweit eine durch ein Programm vorgegebene Vereinfachung der Lebenswelt hinzunehmen sei. Damit wurde ein wichtiges Ziel bez uglich des Einsatzes von Informatiksystemen erreicht. Direkt zusammen h angt damit die Erkenntnis, dass ein Informatiksystem nur einen Teil der Realit at abbildet, also ein Modell darstellt. Informatiksysteme sind blind bez uglich solcher Probleme, die bei ihrer Entwicklung nicht bedacht wurden, d. h. ein Ereignis wie eine Eingabe resultiert in einem nicht angemessenen Systemzustand und ggf. in einem Fehlerzustand ((Winograd und Flores 1988, S. 166f), (Hubwieser 2007a, S. 47)). In Vertiefungenin weiteren Unterrichtserprobungen k onnten ahnliche Programme freiere Eingaben erm oglichen,212 8. Zweite exemplarische Erprobung des Unterrichtsmodells 1. Wie lautet der Name des Systems? (Erinnern; Faktenwissen) 2. Beschreiben Sie die Benutzungsober ache. Gehen Sie dabei nur auf die Ver anderungen zu der Arztpraxis V1.0 ein. (Verstehen; Faktenwissen) 3. Was sind die wesentlichen Unterschiede zu dem Programm Arztpraxis V1.0? (Verstehen; Faktenwissen) 4. Heilen Sie einen Patienten, der im Zustand"krank" ist. Hinweis: Eine Krankenschwester ist nicht anwesend. Dokumentieren Sie Ihre Schritte und die Zust ande des Patienten. (Anwenden; Verfahrensorientiertes Wissen) 5. In welchen Zust anden kann ein Patient zum Arzt kommen? (Analysieren; Begriiches Wissen) 6. Ist es m oglich einen Patienten im Zustand"krank" sofort zu heilen? Wie viele Schritte sind mindestens bis zur Genesung des Patienten n otig? (Analysieren; Begriiches Wissen) 7. Ein Patient, der"schwer krank"ist, kommt in Ihre Praxis. Was m ussen Sie als Arzt tun, damit er schnellstens wieder gesund wird? (Analysieren; Begriiches Wissen) 8. In welchem Zustand bendet sich ein"kranker" Patient, wenn Sie ihm eine zu hohe Dosis geben? Hat sich ein Zustand verbessert oder verschlechtert? Retten Sie Ihren Ruf als Arzt und heilen den Patienten anschlieend vollst andig. Dokumentieren Sie Ihre gesamten Aktionen. (Analysieren; Begriiches Wissen) 9. Versuchen Sie die folgende Darstellung nachzumachen. Dokumentieren Sie Ihre Schritte. Hinweis: Eine Krankenschwester ist nicht anwesend. 10. Erstellen Sie eine eigene solche Zustandsdarstellung (Zustandsdiagramm) f ur eine Krankheitsgeschichte eines Patienten. Hinweis: Eine Krankenschwester ist nicht anwesend. (Erstellen; Begriiches Wissen) Abbildung 8.3: Benutzungsober ache und Aufgabe zur Erkundung des Programms Arztpraxis V2.0 zu Zugriskontrolle und Systemzust anden mit kognitivem Prozess und Wissensart gem a Lernzieltaxonomie (Anderson und Krathwohl 2001) deren Interpretation durch das Programm weitere nicht bedachte Aspekte oen legt. N achster Schritt war eine Modellierung der inneren Struktur durch Zustandsdiagramme ( SB;2), um Quelltext mit dem Zustandsdiagramm in Verbindung zu bringen ( SAC;2). Bewusst wurde dazu ein Zugang uber die Analyse des Systemverhaltens gew ahlt, statt anhand der Klassen, Operationen und Attribute. 8.3.4 Rolle der Lernsoftware In dieser Unterrichtserprobung wurden drei unterschiedliche Arten von Software eingesetzt. Hauptanteil nahmen die kleinen Programme ein, die durch ein bis zwei Entwurfsmuster mit einer graschen Benutzungsober ache erstellt wurden. Diese waren die Zugriskontrolle anhand unterschiedlicher Zugrisrechte, Arztpraxis V1.0 zur Zugriskontrolle in einer Arztpraxis und die Arztpraxis V2.0, in der das Proxymuster mit dem Zustandsmuster kombiniert wurde. Vorteil dieser kleinen Programme ist, dass sie nur aus wenigen Klassen aufgebaut sind und ihre innere Struktur sowie ihr nach auen sichtbares Verhalten fast ausschlielich durch die Entwurfsmuster und die in ihnen vorhandenen fundamentalen Ideen der Informatik bestimmt ist. Die zweite eingesetzte Software war die Lernsoftware Pattern Park. Diese will Kompetenzentwicklung mit Informatiksystemen dadurch f ordern, dass sie fundamentale Ideen anhand von Entwurfsmustern erkl art und dabei insbesondere unterschiedliche Sichten anbietet, die an die8.4. Evaluation 213 Sichten auf Informatiksysteme angelehnt sind. Die beiden eingesetzten Module aus Pattern Park zur Zugriskontrolle und zu den Zust anden bestehen aus Lebensweltdarstellungen (Geldentnahme an einem Geldautomaten im Freizeitpark bzw. Steuerung eines Achterbahnverkehrssystems), die durch Animationen und einfache Ubungen mit Objekten der Lebenswelt durchgef uhrt werden konnen. Dar uber hinaus gibt es Aufgaben mit der UML, die sowohl Klassenund Sequenzdiagramme zur Zugriskontrolle als auch Zustandsdiagramme umfassen. Die Sch uler nahmen es positiv auf, dass Zugriskontrolle und Zust ande im Pattern Park uber das gemeinsame Szenario eines Freizeitparks erkl art wurde. Dritte eingesetzte Software war ein Werkzeug zur Erstellung und Simulation von Zustandsdiagrammen. Der Einsatz dieser Software war f ur die Sch uler nicht verpichtend, aber dennoch nutzen fast alle sie, da mit ihr die Ergebnisse uber den Projektor pr asentiert werden konnten. Die Simulationsfunktion verdeutlichte die Dynamik des Modells. 8.4 Evaluation 8.4.1 Auswertung der Lernerfolgskontrolle Die Entwicklung der abschlieenden schriftlichen Ubung verdeutlichte wiederum das Dilemma zwischen m oglichst objektiven Ergebnissen, die durch Multiple-Choice-Fragen erreicht werden konnen (Abschnitt 1.2.2) und dem Bedarf an komplexen Anforderungssituationen, die f ur Kompetenzen kennzeichnend sind. Da schriftliche Ubungen in dem Gymnasium nicht mehr als 30 Minuten umfassen durften, wurde der uberwiegende Anteil der Lernerfolgskontrolle in Form von Multiple-Choice-Aufgaben gestaltet. Als Stimulus wurde beispielsweise ein Sequenzdiagramm verwendet. Abschlieende Aufgaben waren das Modizieren des Klassendiagramms des Proxymusters und die Erstellung eines Zustandsdiagramms bei gegebener textueller Beschreibung der Situation. Inhaltlich umfasst die Lernerfolgskontrolle die Schritte der systematischen Erkundung, statische und dynamische Aspekte der Modellierung sowie Zusammenh ange zwischen den unterschiedlichen Sichten auf Informatiksysteme. Auerdem wurden f ur die Lernerfolgskontrolle zwei Varianten A und B der schriftlichen Ubung angefertigt. Insgesamt nahmen zehn Sch uler an der Lernerfolgskontrolle teil. Ergebnisse lagen zwischen 90% und 62% der maximal erreichbaren Punktzahl. Mittelwert lag bei etwa 79% und der Median bei etwa 80%. Wie vorab erwartet lagen die Schwierigkeiten der Sch uler vor allem beim Modizieren und Erstellen des Klassenund Zustandsdiagramms. Oenbar gelingt es vielen Sch ulern nicht, von einer informellen Situationsbeschreibung zu einer formalen Darstellung in einem Diagramm zu kommen. Nach Auswertung der Lernerfolgskontrolle bleibt es wie auch nach der ersten Unterrichtserprobung schwierig, Fehlern der Sch uler eindeutig Fehlvorstellungen zuzuordnen. Beispielsweise ist wieder die Vererbung zur Realisierung der Zugriskontrolle im Proxy ein Fehlerschwerpunkt, Vererbung selbst aber auch eine bekannte Lernschwierigkeit bei der Objektorientierung. Zuletzt ist anzumerken, dass fast alle Sch uler die Aufgaben zur systematischen Erkundung korrekt l osten. Dennoch muss sie in ein komplexes Szenario integriert werden, um zu sehen, ob die Sch uler die systematische Erkundung selbst anwenden k onnen, und ob sie dadurch Vorteile bei einer nachfolgenden intensiveren Betrachtung des Verhaltens oder aber der inneren Struktur eines Informatiksystems haben. Von den beiden Lehramtsstudierenden, die unterrichteten, wurden im Rahmen ihres fachdidaktischen Praktikums in Zusammenarbeit mit dem Autor Vorschl age f ur zwei komplexere Aufgaben erarbeitet, die beispielsweise in einer Klausur gestellt werden k onnen (siehe CD-ROM; Anhang A.3). Schwierigkeit bei Lernerfolgskontrolle und Klausur hinsichtlich einer Kompetenz uberpr ufung war, dass sie gem a der schulischen Rahmenbedingungen ohne Rechnereinsatz stattnden mussten, wodurch die beschriebenen Anforderungssituationen von den Sch ulern vorstellungsm aig nachzuvollziehen, aber nicht erlebbar waren.214 8. Zweite exemplarische Erprobung des Unterrichtsmodells 8.4.2 Schriftliche Akzeptanzbefragung der Sch uler Auswertung der Akzeptanzbefragung Zur Akzeptanzbefragung kam der Fragebogen zum Einsatz, der bereits zur ersten Unterrichtserprobung entworfen wurde (Abschnitt 6.5.1). Allein die wenigen Fragen, die die Selbsteinschatzung des Lernfortschritts zum Thema Iteration mit dem Iteratormuster betrafen, wurden analog f ur das Thema Zust ande gestellt. Nach der schriftlichen Ubung wurde die Akzeptanzbefragung erg anzend vorgenommen, vor allem um motivationale Aspekte, die f ur die Kompetenzentwicklung notwendig sind, zu erkennen. Auerdem k onnen insbesondere durch die Akzeptanzbefragung R uckschl usse darauf gezogen werden, inwieweit die Entwurfsmuster geeignet sind, konsistent unterschiedliche Sichten auf Informatiksysteme zur erm oglichen. Die Befragung erlaubt Schlussfolgerungen, ob Sch uler den Zusammenhang zwischen der fundamentalen Idee Zugriskontrolle und dem Proxymuster sehen bzw. ob der Zusammenhang nicht wahrgenommen wurde. So m ussen die Sch uler ihren Lernfortschritt bez uglich Proxymuster und Zugriskontrolle jeweils getrennt einsch atzen. Wieder wurde der Akzeptanzfragebogen anonym ausgef ullt. Durch Angabe der Initialen der Eltern kann jedoch in etwaigen sp ateren Befragungen eine Zuordnung zur gleichen Person vorgenommen werden. Die Abstufung der Zustimmung zu den Aussagen auf den Frageb ogen reicht von"trit v ollig zu", uber"trit eher zu" und"trit eher nicht zu" bis "trit nicht zu". Im nachfolgenden Text werden die Stufen zu"Zustimmung" und"Ablehnung" vereinfachend subsumiert und mit dem Ergebnis der ersten Erprobung verglichen (Ergebnis der zweiten Erprobung in Prozent / Ergebnis der ersten Erprobung in Prozent). Die Fragen und Ergebnisse benden sich im Anhang A.2. Neun Sch uler gaben an, dass der Schwierigkeitsgrad angemessen war (69% / 70%) und drei Schuler (23% / 0%) meinten, er sei zu gering. Im Gegensatz dazu wurde bei der ersten Erprobung von 17% der Sch uler angegeben, dass der Schwierigkeitsgrad zu hoch war. Der Stoumfang wurde von neun Sch ulern (69% / 70%) als angemessen und von einem Sch uler (8% / 26%) als hoch eingesch atzt. In der ersten Erprobung wurde jedoch von zehn Sch ulern aus der 23 Sch uler umfassenden Klasse in schriftlichen Kommentaren angegeben, dass sie nicht ausreichend Zeit gehabt h atten, die gestellten Aufgaben zu l osen. Die R uckmeldungen aus der zweiten Erprobung sind daher bez uglich des Ziels, Stoumfang und Schwierigkeitsgrad im Vergleich zur ersten Erprobung zu verringern, als positiv einzusch atzen. In der Selbsteinsch atzung des eigenen Lernfortschritts denken zw olf Sch uler (92% / 70%), dass sie Fortschritte bez uglich des Analysierens von Informatiksystemen, elf (85% / 70%) gaben an, dass sie Fortschritte bez uglich der Prozesse in der inneren Struktur von Informatiksystemen und zehn (77% / 70%), dass sie Fortschritte bez uglich des Aufbaus von Informatiksystemen gemacht hatten. Zwolf Sch uler (92% / {) stimmten zu, dass sie nun um Zust ande von Informatiksystemen wissen, und die gleiche Anzahl sagte, sie h atte das Proxymuster verstanden (92% / 100%). Elf Sch uler (85% / 70%) sind der Meinung, den Zusammenhang zwischen den beiden Sichten, nach auen sichtbares Verhalten und innere Struktur, zu verstehen. Da dieses Resultat sehr wichtig f ur die Frage ist, ob Entwurfsmuster geeignet sind, unterschiedliche Perspektiven auf Informatiksysteme zu kombinieren, seien an dieser Stelle auch die ablehnenden Stimmen betrachtet: Ein Sch uler (8% / 22%) stimmt der Aussage eher nicht zu und ein Sch uler gibt an wegen sechs vers aumter Stunden die Aussage nicht beurteilen zu k onnen (8% / 0%). Kein Sch uler lehnt die Aussage vollig ab. Der Aussage, dass Lernmaterialen und Lernsoftware ausreichend und in guter Qualit at vorliegen, wurde von elf Sch ulern unterst utzt (85% / 74%). Dies liegt sicherlich auch an den uberarbeiteten Programmen zur Zugriskontrolle und zu Zust anden, die auf Entwurfsmuster basieren, aber auch an der Lernsoftware Pattern Park. Letztere wurde in der ersten Unterrichtserprobung8.4. Evaluation 215 noch anhand von prototypischen Modulen im Unterricht erprobt, w ahrend bei der zweiten Unterrichtsintervention bereits die vollst andige Software vorlag, in deren weitere Entwicklung die Ergebnisse der ersten Erprobung eingeossen sind. InUbereinstimmung damit, dass es kein Lernziel war, gaben zehn Sch uler (77% / 69%) an, dass sie nichts oder nicht viel zur Delphi-Programmierung hinzugelernt h atten. Neun Sch uler (69% / 70%) sind der Meinung, f ur sich etwas dazugelernt zu haben, und zehn Sch uler (77% / 69%) vermuten, dass die gelernten Inhalte f ur den Umgang mit Informatiksystemen n utzlich sind. Im Gegensatz dazu denken nur f unf Sch uler (38% / 43%), dass die bearbeiteten Aufgaben in der Unterrichtssequenz ihnen auch im t aglichen Leben helfen werden. Neun Sch uler (69% / 65%) stimmten der Aussage zu, dass ihnen die Konzentration auf die Aufgaben leicht el. Dieses Ergebnis ist insofern positiv zu bewerten, als dass die Angaben der Sch uler aus der ersten Unterrichtserprobung nicht wesentlich davon abweichen, so dass die kleinere Sch ulerzahl w ahrend der zweiten Unterrichtserprobung nicht zu groen Einuss auf das Lernverhalten hatte. Zehn Schuler (77% / 39%) sagten dar uber hinaus, dass sie Spa daran fanden, ihr Wissen uber Informatiksysteme zu vertiefen. Somit ist es oenbar gelungen, die motivationalen Aspekte st arker zu fordern, was f ur die Kompetenzentwicklung unabdingbar ist. Dennoch bleibt es eine weitere Herausforderung, Anforderungssituationen mit st arkerem Bezug zur Lebenswelt der Sch uler zu integrieren. 8.4.3 Auswertung des Interviews mit der Informatiklehrperson Die verantwortliche Informatiklehrperson, die in allen Unterrichtsstunden der Erprobung anwesend war, stand abschlieend f ur ein Leitfrageninterview zur Verf ugung. Ihrer Meinung nach war der Schwierigkeitsgrad der Sequenz angemessen. Die Notwendigkeit wiederholter Sichtenwechsel zwischen systematischer Erkundung des Informatiksystems und der Modellierung der inneren Struktur wurde von ihr unterst utzt. Insbesondere merkte sie an, dass die Sch uler davon protierten, mit der Erkundung der Informatiksysteme zu starten, da diese die enaktive Repr asentationsebene adressiert. Als Verbesserungen schlug sie vor, komplexere Aufgaben zu formulieren, die Sch uleraktivit aten weiter in den Vordergrund zu stellen und den Theorieanteil etwas zu reduzieren. Die Unterrichtsmethodik bez uglich der oft eingesetzten Partnerund Gruppenarbeit wurde bef urwortet. Abschlieend verglich sie ihren Kurs mit dem des Parallelkurses in dem keine Unterrichtsintervention stattfand. Sie zeigte sich erfreut dar uber, dass die Sch uler durch die Intervention zur Kompetenzentwicklung mit Informatiksystemen die Informatik als ein sehr facettenreiches Fach kennen gelernt haben, das mehr ist als nur programmieren. Gerade die Analyse bestehender Informatiksysteme gekoppelt mit Fragen der Modellierung seien wichtig, denn Informatik sei nicht nur Modellierung und Programmerstellung. In einem Beitrag f ur das Kolloquium des Teilprojektes A8 {"Informatikunterricht und ELearning zur aktiven Mitwirkung am digitalen Medienumbruch" im DFG Sonderforschungsbereich / Forschungskolleg 615"Medienumbr uche" reektiert die Informatiklehrperson die Unterrichtserprobung aus ihrer Sicht. Der Artikel ist gemeinsam verfasst mit einem zweiten Informatiklehrer der Kooperationsschule, der sowohl die Vorbereitungen f ur die erste als auch f ur die zweite Erprobung mitgestaltete. Darin werden folgende Kritikpunkte genannt: "Das Abstraktionsniveau war bei der Aufbereitung der beiden Themen zu hoch und der theoretische Anteil zu gro. Am Anfang der Unterrichtsreihe stand das selbst andige Handeln der Sch ulerinnen und Sch uler zu wenig im Mittelpunkt. Das verhinderte anfangs ein wirkliches Verstehen des neuen Begris Entwurfsmuster. Die kritischen Aspekte wurden in zahlreichen Nachbesprechungen mit den Lehramtsstudierenden und dem Koordinator erl autert. Die Kritik wurde positiv aufgenommen, so dass sich der frontal gerichtete Unterricht zugunsten eines handlungsorientierten Unterrichts entwickelte" (Ganea und Koch 2008, S. 119).216 8. Zweite exemplarische Erprobung des Unterrichtsmodells Die beiden Informatiklehrpersonen schlieen damit, dass sich durch die drei an der Schule durchgefuhrten Unterrichtsreihen, zwei zum Unterrichtsmodell"Kompetenzentwicklung mit Informatiksystemen" und eine zu Internetworking (Freischlad 2007), nach ihren Beobachtungen eine veranderte Wahrnehmung der Informatik bei den Sch ulern feststellen l asst: In den ersten drei Halbjahren des Informatikstudiums [Informatikunterricht an der Schule; Anm. d. V] verengte sich das Bild uber die Informatik sehr auf Programmiertechniken und Modellierung. Die im Rahmen des Forschungsprojektes durchgef uhrten Unterrichtsreihen ver anderten dieses Bild. Die Sch ulerinnen und Sch uler haben die Erfahrung gemacht, dass Informatik mehr ist als nur programmieren. Das systematische Erkunden von Informatiksystemen, das im zweiten Halbjahr der Jgst. 12 und in der Jgst. 13 weiter vertieft wird, erm oglicht ein besseres Verst andnis f ur die Vernetzung der zahlreichen Bereiche der Informatik und somit der Wahrnehmung der Informatik als ,Wissenschaft von Entwurf und Gestaltung von Informatiksystemen' (Claus und Schwill 2006, S. 314)" (Ganea und Koch 2008, S. 119). Die Kooperation zwischen Schule und Universit at zur F orderung der Kompetenzentwicklung mit Informatiksystemen wurde im Herbst 2008 fortgesetzt (Abschnitt 9.3). 8.5 Zusammenfassung und Diskussion der Ergebnisse der zweiten Unterrichtserprobung 8.5.1 Zusammenfassung der zweiten Unterrichtserprobung In dem vorgestellten Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen werden Verhalten, innere Struktur und Implementierungsaspekte als Perspektiven auf Informatiksysteme genutzt, um die Systeme in Form lernf orderlicher Software planvoll und handlungsorientiert zu erkunden. Eine Schl usselrolle nehmen Strukturmodelle, z. B. Entwurfsmuster, ein (Stechert und Schubert 2007). Die lernf orderliche Software zur Zugriskontrolle hat diesbez uglich exemplarischen Charakter, da sie auf dem Proxymuster basiert, und die Dualit at von Verhalten und Struktur eine systematische Erkundung unterst utzt. In den Unterrichtsprojekten wurde die lernf orderliche Software genutzt, um Problemstellen zu bew altigen. Diese waren (1) die Br ucke zwischen der Perspektive des nach auen sichtbaren Verhaltens und der inneren Struktur, (2) fehlende Erfahrung der Sch uler mit systematischen Erkundungen des Systemverhaltens, (3) mehrfacher Einsatz (von Variationen) eines Entwurfmusters in unterschiedlichen Programmen und Kontexten zur F orderung des Transfers und (4) die Vernetzung fundamentaler Ideen und Entwurfsmuster. Zu (1) erwies sich die verfeinerte Strukturierung der Basiskompetenzen zu Informatiksystemen als geeignet, um bei der systematischen Erkundung der Software das Systemverhalten mit Aspekten ihrer inneren Struktur zu verbinden. Die gezielte Auswahl und der Einsatz von Aufgaben, die die Sichten zu Systemverhalten und innerer Struktur bzw. Systemverhalten und Implementierungsaspekten kombinierten, erforderte den Sichtenwechsel der Sch uler bei gleichbleibendem Untersuchungsgegenstand, d. h. die Sichten waren aufeinander abgestimmt. Der fehlenden Erfahrung der Sch uler mit einer systematischen Vorgehensweise zur Erkundung des Systemverhaltens (2) konnte durch explizite Thematisierung der Hypothesenbildung und -pr ufung im Unterricht begegnet werden. Dabei unterst utzte der Ansatz der auf dem Entwurfsmuster Proxy aufbauenden lernf orderlichen Software den Wissenstransfer der Sch uler: Eine strukturell unver anderte Software mit einem anderen Kontext, z. B. die Arztpraxis, konnte im Unterricht ohne groen Aufwand f ur die Lehrperson eingesetzt werden (3). Die Vernetzung fundamentaler Ideen (4) konnte einerseits durch den Einsatz solcher Variationen der im Kern unver anderten Software mit anderer Schwerpunktsetzung im Unterricht erfolgen. Andererseits ist es m oglich, durch Kombination mit weiteren Entwurfsmustern, z. B. Zustandsmuster, eine f ur Kompetenzentwicklung mit Informatiksystemen f orderliche Software zu gestalten. Bei einer Erkundung des Verhaltens des erweiterten Systems k onnen die Sch uler auf vorherige Erkenntnisse aufbauen.8.5. Zusammenfassung und Diskussion der Ergebnisse der zweiten Unterrichtserprobung 217 Daruber hinaus wurde versucht, auf die motivationalen Kompetenzaspekte weiter einzugehen. Die Akzeptanzbefragung l asst im Vergleich mit der ersten Unterrichtserprobung Fortschritte bezuglich der Sch ulermotivation erkennen, dennoch scheint es noch nicht gelungen zu sein, den Bezug zur Lebenswelt der Sch uler st arker herzustellen. M oglicherweise m ussen daf ur insbesondere mehr typische Repr asentanten von Informatiksystemen thematisiert werden. Fazit ist, dass sich die Software auf Grundlage von Entwurfsmustern, speziell das Proxymuster, in Kombination mit einer systematischen Vorgehensweise zur Erkundung von Informatiksystemen im Informatikunterricht bew ahrt hat. Uber das Proxymuster kann die lernf orderliche Software sowohl auf ihr nach auen sichtbares Verhalten als auch auf ihre f ur die informatische Bildung angemessene innere Struktur uberpr uft werden. Die Unterrichtsprojekte zeigten, dass Sch uler einen experimentierenden Zugang uber die lernf orderliche Software annehmen und die darin enthaltene Vernetzung fundamentaler Ideen der Informatik entdecken. 8.5.2 Informatiksysteme und Kompetenzentwicklung in der zweiten Unterrichtserprobung Im Folgenden wird kurz res umiert, wie die zweite Unterrichtserprobung die Kompetenzentwicklung mit Informatiksystemen unterst utzt hat. Analog zur ersten Erprobung war die systematische Erkundung eines Informatiksystems eine typische Sch ulertatigkeit. Neben der Zugriskontrolle wurden Systemzust ande besonders betont. Letztere sind f ur die Hauptfunktion"Coordination" nach (Denning 2007) hilfreich, denn mit Ihnen lassen sich das Eingabeund Ausgabeverhalten von Systemen hinsichtlich der Arbeitsprozesse beschreiben, z. B. in der Arztpraxis. Wie in der ersten Erprobung war die Sicht"Design" durch Analyse der Entwurfsmusterstrukturen ein Schwerpunkt. Das gleiche gilt f ur"Automation" durch Fragen zu den Grenzen der Automatisierung w ahrend der systematischen Erkundung von Informatiksystemen. Zugriskontrolle ist besonders f ur die Perspektiven"Coordination" und"Communication" relevant. Hinsichtlich der von der UNESCO denierten Literacys ist wiederum ein Beitrag zur ICT Literacy und speziell zur Software Literacy zu erwarten (UNESCO 2008), denn Systemzust ande lassen sich im Verhalten aller Informatiksysteme identizieren. Die Verkn upfung von Zugriskontrolle durch das Proxymuster mit dem Zustandsmuster l asst die Sch uler unterschiedliche Systemzust ande entsprechend der Zugrisrechte von Anwendern erkennen. Insbesondere durch Klassikation der Eingabenund Ausgaben ist ein Zustandsmodell hilfreich, das Verhalten des Systems zu analysieren. Als Lernsoftware wurde neben Pattern Park und den Programmen, die auf Proxyund Zustandsmuster bzw. deren Kombination basieren, eine Simulationssoftware genutzt, mit der Zustandsdiagramme erstellt und Zustandswechsel simuliert werden konnten. Damit ist wiederum ein Beitrag zur Media Literacy zu erwarten. Durch oben genannte Betrachtung der Grenzen der eingesetzten Programme in hypothetischen, komplexeren Situationen, wurde das kritische Denken der Sch uler unterst utzt. Das Klassizieren des Systemverhaltens durch Zust ande f ordert die Schl usselkompetenz"Interaktive Anwendung von Technologien" (DeSeCo: 1c). Die Sch uler mussten in der systematischen Erkundung unterschiedliche Zust ande, die durch den Kontext des Programms bestimmt sind, z. B. Gesundheitszust ande von Patienten, auf ihre Umsetzung im Informatiksystem analysieren. Dies ist eine wichtige Voraussetzung, um Information im System zu lokalisieren (DeSeCo: 1c). Neben der F orderung des eigenst andigen Agierens (DeSeCo: 3) durch die systematische Erkundung { wie bereits bei der ersten Erprobung {, erm oglicht ein Zustandsmodell die Kommunikation uber das System mit anderen und damit das Interagieren in heterogenen Gruppen (DeSeCo: 2b). Die Antizipation von Systemzust anden verringert Stress in individuellen Projekten der Sch uler, so dass deren eigenst andiges Handeln (DeSeCo: 3b) unterst utzt wird. Die Einordnung des Unterrichtsmodells in den Europ aischen Qualikationsrahmen wurde in Abschnitt 5.7 vorgenommen. Hinsichtlich der erreichten Niveaustufen der Sch uler ist, wie in Abschnitt 6.6.2 begr undet, keine fundierte Aussage m oglich, da entsprechende qualitative und quantitative Messverfahren f ur den Informatikunterricht fehlen (Abschnitt 9.3).218 8. Zweite exemplarische Erprobung des Unterrichtsmodells9. Zusammenfassung, Fazit und Ausblick 9.1 Zusammenfassung In der vorliegenden Arbeit wurde ein Unterrichtsmodell zur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II vorgestellt. Der Bedarf wurde u. a. damit begr undet, dass Informatiksysteme zu Beginn des 21. Jahrhunderts allgegenw artig sind (Kapitel 1). F ur die Kompetenzentwicklung sind Informatiksysteme in ihrer Einheit aus Hardware, Software und Vernetzung anhand ihres nach auen sichtbaren Verhaltens, der inneren Struktur und Implementierungsaspekten zu analysieren. Ausgehend vom Kompetenzbegri (Kapitel 2) und dem Informatiksystembegri (Kapitel 3) erfolgte eine Analyse des fachdidaktischen Forschungsstandes zur Kompetenzentwicklung mit Informatiksystemen. Die Ergebnisse lassen sich in die Bereiche (1) Bildungsziele zu Informatiksystemen, (2) Unterrichtsinhalte, (3) Lehr-Lernmethodik und (4) Lehr-Lernmedien aufteilen (Kapitel 4). In Kapitel 5 wurde die Unterrichtsmodellentwicklung beschrieben. Ziel war es, ein fachdidaktisch begrundetes Konzept zu konstruieren, das Erkenntnisse aus der Lehr-Lerntheorie, der Fachwissenschaft, der Erziehungswissenschaft und anderen Fachdidaktiken aufgreift und mit informatikdidaktischen Konzepten zur Vernetzung der Grundbegrie und Wirkprinzipien sowie zur fachdidaktischen Kommunikation (Wissensrepr asentation f ur vernetzte fundamentale Ideen), zur Kategorisierung von Bildungszielen und -inhalten (Perspektiven auf Informatiksysteme; Strategie zur Strukturierung) und zur Umsetzung im unterrichtlichen Geschehen (Gestaltung von lernf orderlicher Software und Sch ulervorgehensweisen mit Handreichungen zu Motivation und Durchf uhrung von Experimenten) verkn upft. Den Zugang zu Informatiksystemen bildet in der vorliegenden Dissertationsschrift das nach auen sichtbare Verhalten. Es erfolgte eine Fokussierung auf vernetzte fundamentale Ideen der Informatik und Strukturmodelle von Informatiksystemen als Unterrichtsinhalte. Es wurde begrundet, dass ausgew ahlte objektorientierte Entwurfsmuster vernetzte fundamentale Ideen reprasentieren. In Abschnitt 5.4 wurden dementsprechend Entwurfsmuster als Wissensrepr asentation f ur vernetzte fundamentale Ideen klassiziert. Das systematische Erkunden des Verhaltens von Informatiksystemen wird im Informatikunterricht bisher kaum thematisiert. Deshalb wurden220 9. Zusammenfassung, Fazit und Ausblick Schulertatigkeiten in Anlehnung an Unterrichtsexperimente hergeleitet, die Sch uler unterst utzen, Informatiksysteme bewusst anzuwenden (Abschnitt 5.5). Durch diese Lehr-Lernmethodik werden das nach auen sichtbare Verhalten von Informatiksystemen, im Sinne einer Black-Box, und das Wechselspiel von Verhalten und Struktur bei vorliegender Implementierung des Systems als White-Box analysiert. Die Adressierung schrittweise h oherer kognitiver Niveaustufen wurde in die Konzeption einbezogen. Unterst utzend wurde f ur das Unterrichtsmodell lernf orderliche Software gestaltet, die vernetzte fundamentale Ideen in Entwurfsmustern und das Experimentieren aufgreift (Abschnitt 5.6). Schwerpunkte bilden im Unterrichtsmodell zwei Arten von lernf orderlicher Software: (1) Die Lernsoftware Pattern Park wurde von einer studentischen Projektgruppe entwickelt. In ihr k onnen in Entwurfsmustern enthaltene fundamentale Ideen der Informatik uber ihren Lebensweltbezug im Szenario eines Freizeitparks erschlossen werden. (2) Als weitere Art Lernsoftware wurden kleine Programme eingesetzt, deren innere Struktur durch ausgew ahlte Entwurfsmuster gebildet und deren Verhalten direkt durch die darin enthaltenen fundamentalen Ideen bestimmt wird. Diese Programme k onnen durch die Experimente im Unterricht systematisch untersucht werden. Mit dem Ziel, die normative Perspektive um R uckkopplung mit der Praxis zu erg anzen, wurden zwei Erprobungen im Informatikunterricht vorgenommen. Diese lieferten Erkenntnisse zur Machbarkeit des Unterrichtsmodells und dessen Akzeptanz durch die Sch uler (Kapitel 6 und 8). Exemplarisch umgesetzt wurden die Themen Zugriskontrolle mit dem Proxymuster, Iteration mit dem Iteratormuster und Systemzust ande mit dem Zustandsmuster. Der intensive Austausch mit Informatiklehrpersonen in der Kooperationsschule uber Informatiksysteme und Kompetenzentwicklung sowie die Durchf uhrung von zwei Lehrerfortbildungen erg anzen die Beobachtungen im unterrichtlichen Geschehen (vgl. (Schubert et al. 2007), (Freischlad und Stechert 2008)). Die erste Unterrichtserprobung resultierte in einer Weiterentwicklung des Unterrichtsmodells zu Informatiksystemen und Kompetenzentwicklung (Kapitel 7). Darin erfolgte eine Fokussierung auf das nach auen sichtbare Verhalten von Informatiksystemen und eine Verfeinerung der Perspektiven auf innere Struktur und ausgew ahlte Implementierungsaspekte. Anschlieend wurde die zweite Unterrichtserprobung durchgef uhrt und evaluiert (Kapitel 8). Am Schluss der Forschungsarbeit steht ein in empirischen Phasen erprobtes Unterrichtsmodell. Abbildung 9.1 fasst das Unterrichtsmodell schematisch zusammen. 9.2 Fazit Das Erreichte ist mit den Forschungszielen und wissenschaftlichen Fragestellungen zu vergleichen. Die Fragestellungen lauteten (Abschnitt 4.4.6): 1. Wie ist ein Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen gem a der Ergebnisse der Analyse des fachdidaktischen Forschungsstandes zu gestalten? 2. Wie kann das Unterrichtsmodell im Informatikunterricht der Sekundarstufe II exemplarisch erprobt werden? Zu (1): Ausgehend von den in der Literatur dokumentierten fachlichen Aspekten zu Informatiksystemen und den fachdidaktisch formulierten Bildungszielen, -inhalten, -methoden und -medien zur Kompetenzentwicklung mit Informatiksystemen wurde ein Unterrichtsmodell entwickelt. Zur Fokussierung des Unterrichts auf Informatiksysteme wurden der Blick auf das System und der Blick auf die innere Struktur des Systems als Perspektiven gew ahlt. Der besondere Beitrag der Arbeit wird in der Vernetzung fundamentaler Ideen der Informatik gesehen. Die Begr undung ausgew ahlter Entwurfsmuster als Wissensrepr asentation vernetzter fundamentaler Ideen liefert zum einen eine Vorgehensweise zur Analyse potentieller weiterer Wissensrepr asentationen. Zum9.2. Fazit 221 Kompetenz   kognitive Fähigkeiten und Fertigkeiten   motivationale und sozial-kommunikative Aspekte   Schlüsselkompetenzen (DeSeCo)   ICT Literacy   Europäischer Qualifikationsrahmen Erfahrungswissen der  Fachdidaktik2. Erprobung: Informatikunterricht in Jgst. 12 1. Erprobung: Informatikunterricht in Jgst. 12 Systematische E rkundung  v on InformatiksystemenE ntwurfsmuster als  Wissenrepräsentation von fundamentalen Ideen Klassifikationskriterien: 1. Abstraktion 2. Zweck 3. Vernetzte fund. Ideen 4. Zusammenhänge 5. Komplexität 6. Lebensweltbezug 7. ParameterLernsoftware a) Entwurfsmuster als       strukturelle Grundlage b) PatternPark zu  fundamentalen      Ideen der Informatik Nach außen sichtbares Verhalten 1. Name des Systems 2. Benutzungsoberfläche 3. Funktionalität 4. Beziehung zwischen Elementen 5. Informatische Konzepte 6. Mit Sonderfällen ex perimentieren 7. Auswertung von Fehlern 8. Hypothetischer EinsatzInnere Struktur 1. Name des Projektes 2. Identifikation der Klassen 3. Operationen und Attribute 4. Klassendiagramm erstellen 5. Informatische Konzepte 6. Behandlung von Sonderfällen 7. Fehlerursachen 8. Bewertung des Systems 9. Modifikation des SystemsUnterrichtsmodel zu Informatiksystemen und Kompetenzentwicklung  Zielsetzung und Definition  Strategien zur Strukturierung E xperimenteInformatiksysteme  Definition: Hardware, Software und    Vernetzung zur Lösung eines     Anwendungsproblems  nach außen sichtbares Verhalten  innere Struktur  Implementierungsaspekte  • nationaler und      internationaler Stand der     Forschung   normative Bestimmung       von:  Bildungszielen  Unterrichtsinhalten  Lehr-Lernmethoden  Lehr-LernmedienEmpirische Erprobungen zur Kompetenzentwicklung mit Informatiksystemen Normative Einflüsse auf Kompetenzentwicklung mit Informatiksystemen Vernetzte fundamentale Ideen Strukturmodelle Abbildung 9.1: Schematische Darstellung der normativen und empirischen Ein usse auf das Unterrichtsmodell zur Kompetenzentwicklung mit Informatiksystemen anderen werden als Nebeneekt ausgew ahlte Entwurfsmuster f ur die allgemein bildende Schulinformatik einsetzbar ohne die problematische Begr undung uber deren N utzlichkeit im Softwareentwicklungsprozess. Ein weiterer Beitrag der Arbeit zur Fachdidaktikforschung wird in der Verkn upfung der Unterrichtsexperimente als zentrale Sch ulertatigkeit mit lernf orderlicher Software gesehen, die Entwurfsmuster als strukturelle Grundlage enthalten und vernetzte fundamentale Ideen repr asentieren. Deren Beitrag zur F orderung der Kompetenzentwicklung mit Informatiksystemen wurde dargestellt. Bei der Entwicklung des Unterrichtsmodells wurde auf Stimmigkeit der Inhalte, Realisierbarkeit im unterrichtlichen Geschehen und fortw ahrend auf den Beitrag zur Kompetenzentwicklung (Kapitel 2) und den in Kapitel 3 analysierten Eigenschaften von Informatiksystemen geachtet. Andere vorhandene Unterrichtsreihen, z. B. zu Internet und Datenbanksystemen, k onnen anhand der in dem vorliegenden Unterrichtsmodell entwickelten Aspekte analysiert werden. Gleichzeitig sind von diesen Spezialisierungen m ogliche Erg anzungen und Verfeinerungen des Unterrichtsmodells zu erwarten, z. B. zum Thema Internetworking (vgl. Freischlad und Schubert 2007). Zu (2): F ur die exemplarische Erprobung des Unterrichtsmodells wurden die Themen Zugriskontrolle mit dem Proxymuster, Iteration mit dem Iteratormuster und Systemzust ande mit dem Zustandsmuster ausgew ahlt. Die Kombination der Sicht auf das System mit der Sicht in das System wurde betrachtet. Damit konnte die Verbindung der Unterrichtsexperimente mit lernf orderlicher Software exemplarisch umgesetzt werden. Die vernetzten fundamentalen Ideen wiesen einen starken Bezug zu Informatiksystemen auf. Dazu war es notwendig, sie in Bezug zu den Erkenntnissen zum Informatiksystembegri zu setzen: F ur Zugriskontrolle konnte mit ihrer Relevanz in mehreren Kategorien der Informatik bzw. im Sinne von Hauptfunktionen von Informatiksystemen argumentiert werden (Kapitel 3), z. B. Zugri auf Daten (Recollection). Hinsichtlich der Klassikation von Unterrichtsinhalten nach ihrer Allgemeing ultigkeit (Hubwieser 2007a, S. 83)222 9. Zusammenfassung, Fazit und Ausblick kann Zugriskontrolle als charakteristisch f ur viele Informatiksysteme eingestuft werden, z. B. Mehrbenutzersysteme. Die Ergebnisse der Erprobungen wurden dokumentiert. R uckmeldungen von Informatiklehrern in zwei Workshops erg anzten die Resultate. Die umfangreiche Analyse des fachdidaktischen Forschungsstandes zur Kompetenzentwicklung mit Informatiksystemen (Kapitel 4) dient als eine Grundlage bei der Entwicklung eines Kompetenzmodells f ur die Sekundarstufe II (Abschnitt 9.3). Die Forderung nach empirisch uberpr uften Kompetenzmodellen (Abschnitt 2.1) oenbart, dass die Entwicklung eines Unterrichtsmodells nicht bei einer theoretischen Fundierung durch Erfahrungswissen der Didaktik der Informatik stehen bleiben kann, um Sch ulerleistungen realistisch einsch atzen zu k onnen. Die vorliegende Arbeit bereitet den Weg f ur ein Kompetenzmodell zu Informatiksystemen durch Angabe eines theoretisch begr undeten, durch normative Analyse des Forschungsstands praxisrelevanten Unterrichtsmodells, das exemplarisch gestaltet und im Unterricht erprobt wurde. 9.3 Ausblick Das Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II ist entstanden, w ahrend Bildungsstandards f ur die Sekundarstufe I entwickelt wurden. Da Bildungsstandards f ur die Sekundarstufe II sich erst in Planung benden, erhot der Autor deren positive Beeinussung durch die vorliegende Arbeit. In ihr ist die F orderung der Kompetenzentwicklung mit Informatiksystemen als eine zentrale Aufgabe des Informatikunterrichts der Sekundarstufe dargestellt. Es fehlen jedoch Instrumentarien zur Kompetenzmessung in der Informatik und ein entsprechendes Kompetenzmodell, das an repr asentativen Stichproben evaluiert wurde. Dazu bedarf es der Kooperation von Psychologen und Informatikern. Die Deutsche Forschungsgemeinschaft f ordert von 2008 bis 2010 an den Universit aten Paderborn und Siegen das Projekt"Entwicklung von qualitativen und quantitativen Messverfahren zu LehrLern-Prozessen f ur Modellierung und Systemverst andnis in der Informatik", an dem der Autor mitwirkt ((Schubert 2008), (Kollee et al. 2009)). Neben den Professuren f ur Didaktik der Informatik an beiden Hochschulen ist die Professur f ur Arbeitsund Organisationspsychologie der Universit at Paderborn beteiligt. Das Projekt wurde vom Gutachtergremium der Ingenieurwissenschaften, einschlielich Informatik, bef urwortet. Partnerschule der Universit at Siegen ist das Gymnasium, mit dem bereits eine erfolgreiche Kooperationsbeziehung besteht, die durch die in der vorliegenden Dissertationsschrift beschriebenen Unterrichtserprobungen belegt ist. Im Siegener Teilprojekt werden Unterrichtsprojekte zur Kompetenzentwicklung mit Informatiksystemen in der Sekundarstufe II angestrebt, die acht Wochen mit je drei Wochenstunden dauern (Stechert et al. 2009). Neben fundamentalen Ideen der Informatik sind weitere Strukturmodelle Schwerpunkte der Untersuchung, denn die vorliegende Dissertationsschrift zeigt, dass der Einsatz von Strukturmodellen einen wesentlichen Beitrag zu einer Kompetenzentwicklung mit Informatiksystemen liefern kann (Stechert und Schubert 2007). Ziel ist, das Zusammenwirken von Hardware, Systemund Anwendungssoftware mit Netzverbindungen uber Strukturmodelle miteinander in Beziehung zu setzen. Eingesetzt wird das Blockmodell des Von-Neumann-Rechners, das eine Synthese aus mathematisch-logischer Beschreibung und der technischen Umsetzung von Informatiksystemen repr asentiert. Es beschreibt jedoch nur die Vernetzung von Komponenten eines isolierten Einzelplatzrechners. Zur Erg anzung wird ein Ebenenmodell des Rechners genutzt, um die hierarchische Strukturierung von Systemkomponenten darzustellen und Komponenten zu gruppieren (Tanenbaum und Goodman 2001). Die zus atzlich eingesetzte 4-Schichtenarchitektur des Internets beschreibt die Kommunikationsaufgaben in Netzen anhand funktionaler Ebenen, denen die Netzwerkprotokolle zugeordnet sind (Peterson und Davie 2003). Inhaltliche Bruchstellen werden vermieden, da das Ebenenmodell als Begr undung eines Bottom-up-Zugangs, von der Hardware zu den Anwendungen, oder eines Top-down-Zugangs genutzt werden kann. Dabei konnen die Sch uler Erkenntnisse vom Von-Neumann-Blockmodell f ur einen Sichtenwechsel auf Schichtenmodelle nutzen und Strukturmodelle anwenden, um das nach auen sichtbare Verhalten von Informatiksystemen zu erkl aren.9.3. Ausblick 223 Ein aktuelles Forschungsfeld bilden eingebettete Mikrosysteme, so dass sich die Frage ergibt, wie das Unterrichtsmodell zur F orderung der Kompetenzentwicklung mit Informatiksystemen erweitert werden kann und muss, um diesen hybriden Systemen (Claus und Schwill 2006, S. 677) gerecht zu werden: Mobile Kommunikationssysteme verf ugen uber einen zunehmenden Funktionsumfang, der durch das Zusammenspiel von Berechnungseinheiten mit Sensoren und Aktoren bereitgestellt wird. Das heit, die Wandlung von digitalen Signalen in analoge Signale und umgekehrt beeinusst das Systemverhalten mageblich ((Schubert und Stechert 2008), (Schwidrowski et al. 2008)). Ein entsprechendes Forschungsvorhaben wurde im Februar 2009 bei der Begehung des DFG Sonderforschungsbereich / Forschungskolleg 615"Medienumbr uche" im Teilprojekt A8 "Informatikunterricht und E-Learning zur aktiven Mitwirkung am digitalen Medienumbruch"f ur die F orderperiode 2009-2013 positiv begutachtet.224 9. Zusammenfassung, Fazit und AusblickA. Anhang226 A. Anhang A.1 Akzeptanzfragebogen der ersten Unterrichtserprobung Im Folgenden sind die Ergebnisse der schriftlichen Befragung nach der zweiten Unterrichtserprobung zusammen gefasst (Kapitel 6). Befragt wurden 23 Sch uler. Anmerkung: Halbe Punkte sind dann vergeben worden, wenn ein Sch uler einen nicht vorhandenen Zwischenwert angekreuzt hat, gleichzeitig aber die Zuordnung der Aussage eindeutig war. Tabelle A.1: Befragung zum Informatikunterricht allgemein Befragung zum Informatikunterricht allgemein trit v ollig zutrit eher zutrit eher nicht zutrit nicht zukann ich nicht beurteilen 1 Informatikunterricht macht mir Spa.2 14 2 5 0 2 Ich verstehe den Unterrichtssto im Fach Informatik.2 11 9 1 0 3 Im Informatikunterricht geht es darum, Programme zu erstellen.3 16,5 2,5 0 1 4 Im Informatikunterricht geht es darum, Problemstellungen zu modellieren.8 9,5 3,5 0 2 5 Ich nde die Inhalte im Informatikunterricht interessant.0 8 12 3 0 6 Ich beteilige mich am Unterricht. 2 8 9 2 2 7 Ich bin im Unterricht abgelenkt. 2 7 8,5 4,5 1 Tabelle A.2: Befragung zu Schwierigkeit, Stoumfang und eigenem Lernen Wie sch atzen Sie den Schwierigkeitsgrad des vorgestellten Lernstos ein? hoch angemessen niedrig fehlende Angabe 8 Der Schwierigkeitsgrad war . . . 4 17 2 viel angemessen wenig 9 Der Stoumfang war . . . 6 16 1 10 Ich habe im Unterricht gelernt . . . 0 20 3A.1. Akzeptanzfragebogen der ersten Unterrichtserprobung 227 Tabelle A.3: Befragung zum konkreten Informatikunterricht Geben Sie bitte an, in welchem Mae Sie den vorgegebenen Aussagen zustimmen. ich stimme uberhaupt nicht zuich stimme nicht zuich stimme etwas zuich stimme voll zukann ich nicht beurteilen 11 Darstellung und Veranschaulichung der Lerninhalte waren verst andlich.0 3 15 5 0 12 Das praktische Uben war ausreichend1 3 10,5 8,5 0 13 Die gestellten Aufgaben waren l osbar.0 1 12 9 1 14 Die Inhalte sind vermutlich f ur den Umgang mit Informatiksystemen sehr n utzlich.0 3 12 7 1 15 Die Verwendbarkeit und der Nutzen des behandelten Stoes wurden deutlich.1 3 10,5 8,5 0 16 Die Hilfsmittel zur Unterst utzung des Lernens (z. B. Arbeitsbl atter, Software) sind ausreichend und in guter Qualit at vorhanden.1 5 7 10 0 Tabelle A.4: Befragung zum Einuss der Unterrichtsthemen auf motivationale und volitionale Bereitschaften sowie Einstellungen (eine fehlende Angabe in Zeile 22) Befragung zum Unterrichtsthema trit v ollig zutrit eher zutrit eher nicht zutrit nicht zukann ich nicht beurteilen 17 Der Unterricht besch aftigte sich mit Aufgaben, die mir im t aglichen Leben begegnen.0 10 8 5 0 18 Ich konnte im Unterricht etwas Neues entdecken.5 8 7 3 0 19 Einige Themen haben mich besonders interessiert.2 5 12 4 0 20 Ich habe auch auerhalb des Unterrichts uber die Aufgaben nachgedacht.1 0 10 12 0 21 Ich konnte mich leicht auf die Sache konzentrieren.4 11 5 3 0 22 Ich habe das Gef uhl, f ur mich etwas dazugelernt zu haben.1 15 4 2 0 23 Ich kann mir vorstellen, dass ich das erworbene Wissen in Zukunft gebrauchen kann.0 11 6 5 1 24 Es hat mir Spa gemacht, mein Verst andnis f ur dieses Thema zu vertiefen.1 8 11 3 0228 A. Anhang Tabelle A.5: Befragung zur Einsch atzung des eigenen Lernfortschritts Wie sch atzen Sie selbst Ihren Lernfortschritt in den einzelnen Lernbereichen ein? Ich konnte viel dazulernenIch konnte einiges dazulernenIch konnte nicht viel dazulernenDie Inhalte brachten mir keine neuen Erkenntnisse 25 (a) Analyse von Informatiksystemen5 11 6 1 26 (b) Beschreibung von Abl aufen in einem Informatiksystem2 17 4 0 27 (c) Beschreibung des Aufbaus eines Informatiksystems3 13 7 0 28 (d) Bausteine der Softwareentwicklung (Entwurfsmuster)5 12 5 1 29 (e) Zugriskontrolle 5 13 3 2 30 (f) Durchlaufen einer Schlange 5 12 6 0 31 (g) Delphi-Programmierung 1 6 11 5 Tabelle A.6: Befragung zur Einsch atzung des eigenen Lernens Geben Sie bitte an, in welchem Mae Sie den vorgegebenen Aussagen zustimmen. trit v ollig zutrit eher zutrit eher nicht zutrit nicht zukann ich nicht beurteilen 32 Ich habe verstanden, wie man das nach auen sichtbare Verhalten von Informatiksystemen systematisch erkundet.11 8 4 0 0 33 Ich habe verstanden, wie man die innere Struktur von Informatiksystemen.6 11 5 1 0 34 Ich wei, wie innere Struktur und Verhalten eines Informatiksystems zusammenh angen.4 14 5 0 0 35 Ich habe verstanden, was ein Iterator ist.14 8 1 0 0 36 Ich habe verstanden, was ein Proxy ist.15,5 7,5 0 0 0A.2. Akzeptanzfragebogen der zweiten Unterrichtserprobung 229 A.2 Akzeptanzfragebogen der zweiten Unterrichtserprobung Im Folgenden werden die Ergebnisse der schriftlichen Befragung nach der zweiten Unterrichtserprobung oen gelegt (Kapitel 8). Befragt wurden 13 Sch uler. Tabelle A.7: Befragung zum Informatikunterricht allgemein Befragung zum Informatikunterricht allgemein trit v ollig zutrit eher zutrit eher nicht zutrit nicht zukann ich nicht beurteilen 1 Informatikunterricht macht mir Spa.1 8 4 0 0 2 Ich verstehe den Unterrichtssto im Fach Informatik.4 7 2 0 0 3 Im Informatikunterricht geht es darum, Programme zu erstellen.4 4 5 0 0 4 Im Informatikunterricht geht es darum, Problemstellungen zu modellieren.6 4 2 0 1 5 Ich nde die Inhalte im Informatikunterricht interessant.2 5 4 2 0 6 Ich beteilige mich am Unterricht. 4 4 5 0 0 7 Ich bin im Unterricht abgelenkt. 0 2 4 7 0 Tabelle A.8: Befragung zu Schwierigkeit, Stoumfang und eigenem Lernen Wie sch atzen Sie den Schwierigkeitsgrad des vorgestellten Lernstos ein? hoch angemessen niedrig fehlende Angabe 8 Der Schwierigkeitsgrad war . . . 0 9 3 1 viel angemessen wenig 0 9 Der Stoumfang war . . . 1 9 2 1 10 Ich habe im Unterricht gelernt . . . 4 8 0 1 Tabelle A.9: Befragung zum konkreten Informatikunterricht Geben Sie bitte an, in welchem Mae Sie den vorgegebenen Aussagen zustimmen. ich stimme uberhaupt nicht zuich stimme nicht zuich stimme etwas zuich stimme voll zukann ich nicht beurteilen 11 Darstellung und Veranschaulichung der Lerninhalte waren verst andlich.0 1 3 8 1 12 Das praktische Uben war ausreichend0 1 11 0 1 13 Die gestellten Aufgaben waren l osbar.0 1 3 8 1 14 Die Inhalte sind vermutlich f ur den Umgang mit Informatiksystemen sehr n utzlich.0 2 1 9 1 15 Die Verwendbarkeit und der Nutzen des behandelten Stoes wurden deutlich.0 1 7 4 1 16 Die Hilfsmittel zur Unterst utzung des Lernens (z. B. Arbeitsbl atter, Software) sind ausreichend und in guter Qualit at vorhanden.0 2 5 6 0230 A. Anhang Tabelle A.10: Befragung zum Einuss der Unterrichtsthemen auf motivationale und volitionale Bereitschaften sowie Einstellungen Befragung zum Unterrichtsthema trit v ollig zutrit eher zutrit eher nicht zutrit nicht zukann ich nicht beurteilen 17 Der Unterricht besch aftigte sich mit Aufgaben, die mir im t aglichen Leben begegnen.1 4 3 4 1 18 Ich konnte im Unterricht etwas Neues entdecken.5 6 2 0 0 19 Einige Themen haben mich besonders interessiert.3 5 4 0 1 20 Ich habe auch auerhalb des Unterrichts uber die Aufgaben nachgedacht.1 4 3 4 1 21 Ich konnte mich leicht auf die Sache konzentrieren.2 7 0 1 3 22 Ich habe das Gef uhl, f ur mich etwas dazugelernt zu haben.2 7 3 0 1 23 Ich kann mir vorstellen, dass ich das erworbene Wissen in Zukunft gebrauchen kann.2 4 4 2 1 24 Es hat mir Spa gemacht, mein Verst andnis f ur dieses Thema zu vertiefen.2 8 2 0 1 Tabelle A.11: Befragung zur Einsch atzung des eigenen Lernfortschritts Wie sch atzen Sie selbst Ihren Lernfortschritt in den einzelnen Lernbereichen ein? Ich konnte viel dazulernenIch konnte einiges dazulernenIch konnte nicht viel dazulernenDie Inhalte brachten mir keine neuen Erkenntnisse 25 (a) Analyse von Informatiksystemen4 8 1 0 26 (b) Beschreibung von Abl aufen in einem Informatiksystem4 7 2 0 27 (c) Beschreibung des Aufbaus eines Informatiksystems5 5 3 0 28 (d) Bausteine der Softwareentwicklung (Entwurfsmuster)3 8 2 0 29 (e) Zugriskontrolle 3 6 3 1 30 (f) Zust ande von Informatiksystemen4 8 1 0 31 (g) Delphi-Programmierung 0 3 6 4A.2. Akzeptanzfragebogen der zweiten Unterrichtserprobung 231 Tabelle A.12: Befragung zur Einsch atzung des eigenen Lernens Geben Sie bitte an, in welchem Mae Sie den vorgegebenen Aussagen zustimmen. trit v ollig zutrit eher zutrit eher nicht zutrit nicht zukann ich nicht beurteilen 32 Ich habe verstanden, wie man das nach auen sichtbare Verhalten von Informatiksystemen systematisch erkundet.8 4 0 0 1 33 Ich habe verstanden, wie man die innere Struktur von Informatiksystemen.2 8 2 0 1 34 Ich wei, wie innere Struktur und Verhalten eines Informatiksystems zusammenh angen.2 9 1 0 1 35 Ich habe verstanden, was ein Zustand eines Informatiksystems ist.6 6 0 0 1 36 Ich habe verstanden, was ein Proxy ist.7 5 0 0 1232 A. Anhang A.3 Inhalt der CD-ROM Um den Umfang der vorliegenden Dissertationsschrift einzuschr anken, ist ihr eine CD-ROM mit Unterrichtsmaterialien und Stundenbeschreibungen der Unterrichtserprobungen beigef ugt, deren Inhalt an dieser Stelle kurz beschrieben werden soll. Die folgenden Materialien und Dokumente benden sich auf der CD-ROM: Materialien der ersten und zweiten exemplarischen Unterrichtserprobung mit jeweils {acht Unterrichtsbeschreibungen inklusive Aufgabenstellungen, {Akzeptanzfragebogen, {Varianten A und B der Lernerfolgskontrolle sowie L osungen, {Interviewfragen; Lernsoftware Pattern Park; ausgew ahlte schriftliche Arbeiten von Studierenden: {Diplomarbeit von Ufer inklusive Programme zu Architekturmustern (Ufer 2007), {Diplomarbeit von Weyer (Weyer 2007b), {Hauptseminararbeiten (Weyer 2007a), (S ulz 2007), (Stupperich und Warkentin 2007), (Graf 2008), (Gerding 2008), (Dittich 2008); Lernf orderliche Software zu den Entwurfsmustern Proxy, Iterator und Zustand; Publikationen des Autors. Des Weiteren bendet sich im Hauptverzeichnis die Dissertationsschrift als PDF-Dokument.Literatur 233 Literatur ACM 1993 ACM :Model High School Computer Science Curriculum . New York : ACM (Association for Computing Machinery), 1993. { ISBN 0{89791{607{7 ACM 2006 ACM ;Tucker , Allen (Hrsg.): A Model Curriculum for K-12 Computer Science: Final Report of the ACM K12 Task Force Curriculum Committee . 2nd Edition. New York : Association for Computing Machinery (ACM), 2006. { ISBN 59593{596{7. { http://www.csta.acm.org/Curriculum/sub/CurrFiles/K-12ModelCurr2ndEd. pdf { gepr uft: 22. Februar 2009 Aebli 1980 Aebli , Hans (Hrsg.): Denken: Das Ordnen des Tuns. Band 1. Kognitive Aspekte der Handlungstheorie . 1. Au. Klett-Cotta, Stuttgart, 1980. { ISBN 3{12{930120{8 Aiken und Sand as 2001 Aiken, Robert M. ; Sandas, Cheryl: A Lifelong Learning Courses Based on Learning Objectives. In: (Watson und Andersen 2002) , S. 533{540 Alexander et al. 1977 Alexander , Christopher ; Ishikawa , Sara ; Silverstein , Murray: A Pattern Language: Towns, Buildings, Construction . First Edition. New York : Oxford University Press, 1977 Amdahl et al. 1964 Amdahl, Gene M. ; Blaauw , Gerrit A. ; Jr., Frederick P. B.: Architecture of the IBM System/360. In: IBM Journal of Research and Development 8 (1964), Nr. 2. { Reprinted in Vol. 44, No. 1/2, 2000 Anderson 1987 Anderson, John R.: Skill acquisition: Compilation of weak-method problem solutions. In: Psychological Review 94 (1987), Nr. 2, S. 192{210 Anderson 2001 Anderson, John R.: Kognitive Psychologie . 3. Au. Heidelberg, Berlin : Spektrum Akademischer Verlag, 2001. { ISBN 3{8274{1024{X Anderson und Krathwohl 2001 Anderson, Lorin W. (Hrsg.) ; Krathwohl, David A. (Hrsg.): A Taxonomy for Learning, Teaching, and Assessing: A Revision of Bloom's Taxonomy of Educational Objectives . New York : Longman, 2001 Antonitsch 2005 Antonitsch, Peter K.: Standard Software as Microworld? In: (Mittermeir 2005), S. 189{197 Antonitsch 2007 Antonitsch, Peter K.: Datenbanken { (etwas) anders gesehen. In: (Schubert 2007), S. 229{240 Appelrath et al. 2002 Appelrath , Hans-J urgen ; Boles , Dietrich ; Claus , Volker: Starthilfe Informatik . B.G. Teubner Verlag, 2002. { ISBN 3519102412 Appelrath und Ludewig 2000 Appelrath , Hans-J urgen ; Ludewig, Jochen: Skriptum Informatik { eine konventionelle Einf uhrung. 5. Aul. Stuttgart. Leipzig : B. G. Teubner, 2000. { ISBN 3{519{42153{4 Arestova et al. 2000 Arestova, Olga N. ; Babanin , Leonid N. ; Voiskounsky , Alexander E.: The Internet User Motivation. In:Alexander E. Voiskounsky (Hrsg.): Research on the Internet: Humanitarian and Social Aspects. Moscow (2000), S. 55{76 Arnold 2007 Arnold , Ruedi: Interactive Learning Environments for Mathematical Topics , ETH Z urich, Dissertation, November 2007. { http://people.inf.ethz.ch/rarnold/publications/2007 Dissertation-Ruedi-Arnold.pdf { gepruft: 22. Februar 2009 Arnold und Hartmann 2007 Arnold , Ruedi ; Hartmann , Werner: Pragmatische Empfehlungen zur Entwicklung von interaktiven Lernumgebungen. In: (Schubert 2007), S. 171{182234 A. Anhang Arnold et al. 2005 Arnold , Ruedi ; Hartmann , Werner ; Reichert , Raimond: Entdeckendes Lernen im Informatik-Unterricht. In:(Friedrich 2005), S. 197{205 Astrachan 2001 Astrachan , Owen: OO Overkill: When Simple is Better than Not. In: SIGCSE ACM 2001 (2001), S. 302{306 Atteslander et al. 2006 Atteslander, Peter ; Cromm , Jurgen ; Grabow , Busso: Methoden der empirischen Sozialforschung . 11. neu bearbeitete und erweiterte Au. Berlin : de Gruyter, 2006. { ISBN 978{3503097401 Balzert 1999 Balzert, Heide: Lehrbuch der Objektmodellierung: Analyse und Entwurf . Heidelberg : Spektrum Akademischer Verlag, 1999 (Lehrb ucher der Informatik). { ISBN 3{8274{0285{9 Balzert 2005 Balzert, Heide: UML 2 in 5 Tagen. Der schnelle Einstieg in die Objektorientierung . Herdecke, Bochum : W3L-Verlag, 2005. { ISBN 3{937137{61{0 Balzert 2000 Balzert, Helmut: Lehrbuch der Software-Technik. Software-Entwicklung . 2. Au. Heidelberg : Spektrum Akademischer Verlag, 2000 (Lehrb ucher der Informatik). { ISBN 3{8274{0480{0 Barron et al. 2005 Barron , Brigid J. ; Martin , Caitlin K. ; Robert, Eric S.: Designing a Computer Science Curriculum for Bermuda's Public Schools. In: (Samways 2005). { 076.pdf Bartke und Maurer 2000 Bartke , Peter ; Maurer , Christian: Thesen zum Informatikunterricht der Oberstufe. (2000). { http: //lwb.mi.fu-berlin.de/inf/mix/thesen.html { gepr uft: 22. Februar 2009 Bassey 1999 Bassey, Michael (Hrsg.): Case study research in educational settings . UK : Open University Press, 1999. { ISBN 978{0335199846 Bauer und Goos 2004 Bauer, Friedrich L. ; Goos , Gerhard: Informatik 1. Eine einf uhrende Ubersicht. 4. Au. Berlin. Heidelberg : Springer, 2004 Baumann 1990 Baumann, R udeger: Didaktik der Informatik . 1. Au. Stuttgart : Klett-Schulbuchverlag, 1990 Baumann 1993 Baumann, R udeger: Ziele und Inhalte des Informatikunterrichts. In: Zentralblatt f ur Didaktik der Mathematik (1993), S. 9{19 Baumann 1996 Baumann, R udeger: Didaktik der Informatik . 2. vollst andig neu bearbeitete Au. Stuttgart : Ernst Klett Verlag, 1996. { ISBN 3{12{985010{4 Baumann 1998 Baumann, R udeger: Fundamentale Ideen der Informatik { gibt es das? In: Koerber , Bernhard (Hrsg.) ; Peters , Ingo-R udiger (Hrsg.): Informatische Bildung in Deutschland. Perspektiven f ur das 21. Jahrhundert . Berlin : LOG IN Verlag, 1998, S. 89{107 Budding 2007 Budding, Hendrik: Mobiles Lernen unter Verwendung von Handheld Computern im Bereich der Schulinformatik. In: (Stechert 2007a) , S. 7{15 Bell et al. 2002 Bell , Tim (Hrsg.) ; Witten, Ian H. (Hrsg.) ; Fellows, Mike (Hrsg.): Computer Science Unplugged. An enrichment and extension programme for primary-aged children . NZ : Computer Science Unplugged Project, 2002. { http://csunplugged.org/index.php/de/06-searching-algorithms-activitiesmenu-112 { gepr uft 22. Februar 2009Literatur 235 Benzie und Iding 2007 Benzie , David (Hrsg.) ; Iding , Marie (Hrsg.): Informatics, Mathematics and ICT: A golden triangle (IMICT2007) . Northeastern University. Boston. MA, 2007 . { ISBN 978{0{615{14623{2. { http: //www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Boston-CD.zip { gepr uft: 22. Februar 2009 Biundo et al. 2006 Biundo , Susanne ; Claus , Volker ; Mayr , Heinrich C. ; Gesellschaft f ur Informatik e. V. (GI) (Hrsg.): Was ist Informatik? Langfassung vom Mai 2006. Bonn : Gesellschaft f ur Informatik e.V., 2006. { http: //www.gi-ev.de/leadmin/redaktion/Download/was-ist-informatik-lang.pdf { gepr uft: 22. Februar 2009 Bluhm et al. 2004 Bluhm , Hartmut ; Fricke , Uwe ; Otto , Torsten ; Ricklefs , Tammo ; Seiffert, Monika ; Siegel, Christian ; Renz , Werner (Hrsg.) ; Seiffert, Monika (Hrsg.): Rahmenplan Informatik. Bildungsplan gymnasiale Oberstufe. Hamburg : Freie und Hansestadt Hamburg { Beh orde f ur Bildung und Sport { Amt f ur Bildung { B 22, 2004. { http://www.mint-hamburg.de/rahmenplaene/RPGyOInf.pdf { gepr uft: 22. Februar 2009 Borchel et al. 2005 Borchel, Christiane ; Humbert, Ludger ; Reinertz, Martin: Design of an Informatics System to Bridge the Gap Between Using and Understanding in Informatics. In: (Micheuz et al. 2005) , S. 53{63 Bortz und D oring 2002 Bortz, J urgen ; Doring , Nicola: Forschungsmethoden und Evaluation f ur Sozialwissenschaftler . 3. Au. Berlin : Springer, 2002. { ISBN 3{540{41940{3 Bosse et al. 1986 Bosse , Johanna ; Fleischhut, Jens ; Arlt , Wolfgang: Informatik. Unterrichtsmaterialien f ur die 10. Jahrgangsstufe. Datenerhebung. Datenverarbeitung. Datenschutz . Berlin : Senator f ur Schulwesen, Berufsausbildung und Sport, 1986 Bransford et al. 1990 Bransford , John D. ; Sherwood , Robert D. ; Hasselbring, Ted S. ; Kinzer, Charles K. ; Williams , Susan M.: Anchored Instructions: Why we need it and how technology can help. In: Nix, Don (Hrsg.) ; Spiro , Rand J. (Hrsg.): Cognition, Education and Multimedia: Exploring ideas in high technology . Hillsdale, NJ : Erlbaum, 1990, S. 163{205 Brauer 1990 Brauer , Wilfried: Trends der Informatik-Ausbildung. In: Reuter, Andreas (Hrsg.): GI Jahrestagung (1) Bd. 257, Springer, 1990 (Informatik-Fachberichte). { ISBN 3{540{53212{9, S. 456{464 Brauer 2001 Brauer , Wilfried: Informatikbetrachtungen. In: Desel, J org (Hrsg.): Das ist Informatik . Springer, 2001. { ISBN 3{540{41091{0, S. 23{32 Brauer und Brauer 1992 Brauer , Wilfried ; Brauer , Ute: Wissenschaftliche Herausforderungen f ur die Informatik: Anderungen von Forschungszielen und Denkgewohnheiten. In: Langenheder, Werner (Hrsg.) ; Muller, G unter (Hrsg.) ; Schinzel , Britta (Hrsg.): Informatik cui bono? , Springer, 1992 (Informatik Aktuell). { ISBN 3{540{55957{4, S. 11{19 Brauer und Brauer 1995 Brauer , Wilfried ; Brauer , Ute: Informatik das neue Paradigma. Anderungen von Forschungszielen und Denkgewohnheiten der Informatik. In: LOG IN (1995), Nr. 4, S. 25{29 Brauer et al. 1976 Brauer , Wilfried ; Claus , Volker ; Deussen, Peter ; Jurgen Eickel ;Haacke , Wolfhart ; Hosseus , Winfried ; Koster , Cornelis H. A. ; Ollesky , Dieter ; Weinhart, Karl ; Gesellschaft f ur Informatik e. V. : Zielsetzungen und Inhalte des Informatikunterrichts. In: ZDM 8 (1976), Nr. 1, S. 35{43. { ISSN 0044{4103. { ZDM { Zentralblatt f ur Didaktik der Mathematik Brauer und M unch 1996 Brauer , Wilfried ; Munch, Siegfried: Studienund Forschungsf uhrer Informatik . 3. v ollig neu bearbeitete Au. Berlin : Springer-Verlag GmbH, 1996. { ISBN 3{540{60417{0 Breier und Hubwieser 2002 Breier, Norbert ; Hubwieser, Peter: An information-oriented approach to informatical education. In: Informatics in education 1 (2002), Nr. 1, S. 31{42. { ISSN 1648{5831236 A. Anhang Brugge 2000 Brugge , Bernd: Einfuhrung in die Informatik I. Informatik-Systeme. Skriptum zur Vorlesung im Wintersemester 2000/2001 . Oktober 2000. { http://wwwbruegge.in.tum.de/teaching/ws00/Info1/vorlesung/folien/ 02Informatiksysteme.pdf { gepr uft: 22. Februar 2009 Brinda 2004a Brinda, Torsten: Didaktisches System f ur objektorientiertes Modellieren im Informatikunterricht der Sekundarstufe II , Universit at Siegen, Didaktik der Informatik und E-Learning, Dissertation, M arz 2004. { http://www.ub.uni-siegen.de/pub/diss/fb12/2004/brinda/brinda.pdf { gepr uft: 22. Februar 2009 Brinda 2004b Brinda, Torsten: Integration of new exercise classes into the Informatics education in the eld of objectoriented modelling. In: Education and Information Technologies 9 (2004), Nr. 2, S. 117{130 Brinda 2007 Brinda, Torsten: Development of the exercise culture in informatics. In: (Benzie und Iding 2007) . { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Boston-CD.zip { gepr uft: 22. Februar 2009 Brinda und Schubert 2001 Brinda, Torsten ; Schubert, Sigrid: Didactic System for Object-oriented Modelling. In: (Watson und Andersen 2002), S. 473{482 Brooks und Danserau 1983 Brooks , Larry W. ; Danserau , Donald F.: Eects of structural schema training and text organisation on expository prose processing. In: Journal of Educational Psychology 75 (1983), Nr. 6, S. 811{820 Broy und Rumpe 2007 Broy, Manfred ; Rumpe , Bernhard: Modulare hierarchische Modellierung als Grundlage der Softwareund Systementwicklung. In: Informatik Spektrum 30 (2007), Nr. 1, S. 3{18 Broy und Steinbr uggen 2004 Broy, Manfred ; Steinbr uggen, Ralf: Modellbildung in der Informatik . 1. Au. Berlin. Heidelberg : Springer. Xpert.press, 2004 Borstler 2007 Borstler, J urgen: Objektorientiertes Programmieren { Machen wir irgendwas falsch? In: (Schubert 2007) , S. 9{20 Bruidegom und Koolen-Wijkstra 2007 Bruidegom , Ben ; Koolen-Wijkstra , Wouter: SIM-PL: Software for teaching computer hardware at secondary schools in the Netherlands. In: (Benzie und Iding 2007). { http://www.die.informatik.uni-siegen. de/ip-wg31/Proceedings/Boston-CD.zip { gepr uft: 22. Februar 2009 Bruner 1960 Bruner , Jerome S.: The Process of Education . Harvard University Press, Cambridge, 1960 Bruner 1966 Bruner , Jerome S.: Toward a theory of instruction . Harvard University Press, Cambridge, 1966 Brunnstein 2001 Brunnstein , Klaus: Mit IT-Risiken umgehen lernen: Uber Probleme der Beherrschbarkeit komplexer Informatiksysteme. In: (Keil-Slawik und Magenheim 2001) , S. 9{12 Boszormenyi 2001 Boszormenyi , Laszlo: Java f ur Anf anger? In: LOG IN 21 (2001), Nr. 1, S. 14{19 Bunge 1967 Bunge , Mario A.: Scientic Research, Vol. II. Berlin : Springer, 1967 Burkert 1994a Burkert, J urgen: Umorientierung des Informatikunterrichts. In: LOG IN 14 (1994), Nr. 4, S. 55{58 Burkert 1994b Burkert, J urgen: Umorientierung des Informatikunterrichts (Teil 2). In: LOG IN 14 (1994), Nr. 5/6, S. 86{89 Burkert 1995 Burkert, J urgen: Informatikunterricht { Quo vadis? In: (Schubert 1995), S. 49{52Literatur 237 Burkhardt und Schoenfeld 2003 Burkhardt , Hugh ; Schoenfeld , Alan H.: Improving Educational Research: Toward a More Useful, More Inuential, and Better-Funded Enterprise. In: Educational Researcher 32 (2003), Nr. 9, S. 3{ 14. { http://www-gse.berkeley.edu/faculty/AHSchoenfeld/Schoenfeld BurkhardtEdResearch.pdf { gepr uft: 22. Februar 2009 Buschmann et al. 1996 Buschmann, Frank ; Meunier , Regine ; Rohnert, Hans ; Sommerlad, Peter ; Stal , Michael: PatternOriented Software Architecture. A System of Patterns. Volume 1. Wiley & Sons, 1996. { ISBN 978{ 0471958697 Bussmann und Heymann 1987 Bussmann , Hans ; Heymann , Hans-Werner: Computer und Allgemeinbildung. In: Neue Sammlung 1 (1987), S. 2{39 Callegarin und Cortesi 2001 Callegarin , Giuseppe ; Cortesi, Agostino: An Italian National Curriculum on ICT for Schools. In: (Watson und Andersen 2002) , S. 767{776 Carpenter und Gorg 2000 Carpenter, Jean (Hrsg.) ; Gorg, Sheila (Hrsg.): Principles and Standards for School Mathematics . Reston : National Council of Teachers of Mathematics (NCTM), 2000. { ISBN 0{87353{480{8. { http://standards. nctm.org/ { gepr uft: 22. Februar 2009 Cassel et al. 1995 Cassel, Lillian N. ; Beck , Robert E. ; Hardt, Daniel: Computing and the understanding of text. In: (Tinsley und Weert 1995), S. 669{677 Chikofsky und Cross 1990 Chikofsky , Elliot J. ; Cross , James H.: Reverse Engineering and Design Recovery: A Taxonomy. In: IEEE Software 7(1) (1990), S. 13{18 Clancy und Linn 1999 Clancy , Michael J. ; Linn , Marcia C.: Patterns and Pedagogy. In: SIGCSE ACM 1999 (1999), S. 37{42 Claus und Schwill 1997 Claus , Volker ; Schwill, Andreas: Schulerduden Informatik. Ein Lexikon zum Informatikunterricht . Mannheim : Dudenverlag, 1997 Claus und Schwill 2006 Claus , Volker ; Schwill, Andreas: Duden Informatik { A-Z. Fachlexikon f ur Studium, Ausbildung und Beruf. Mannheim : Dudenverlag, 2006 Cyranek 1990 Cyranek , Gunther: Lehrerausbildung Informatik. In: Cyranek , Gunther (Hrsg.) ; Forneck , Hermann J. (Hrsg.) ; Goorhuis , Henk (Hrsg.): Beitr age zur Didaktik der Informatik . Frankfurt, Aarau : Verlag Moritz Diesterweg. Verlag Sauerl ander, 1990. { ISBN 3{425{05309{4, S. 1{9 Czischke et al. 1999 Czischke , Jurgen ; Dick , Georg ; Hildebrecht, Horst ; Humbert, Ludger ; Ueding, Werner ; Wallos , Klaus ; Landesinstitut f ur Schule und Weiterbildung (Hrsg.): Von Stiften und M ausen. 1. Au. Bonen : DruckVerlag Kettler GmbH, 1999. { ISBN 3{8165{4165{8 Dagiene 1999 Dagiene, Valentina: Programming-Based Solutions of Problems In Informatics Curricula. In: (Downes und Watson 1999), S. 88{94 Denning 2003 Denning , Peter J.: Great principles of computing. In: Commun. ACM 46 (2003), Nr. 11, S. 15{20. { ISSN 0001{0782. { http://doi.acm.org/10.1145/948383.948400 { gepr uft: 22. Februar 2009 Denning 2007 Denning , Peter J.: Computing is a natural science. In: Commun. ACM 50 (2007), Nr. 7, S. 13{18. { ISSN 0001{0782. { http://doi.acm.org/10.1145/1272516.1272529 { gepr uft: 22. Februar 2009 DeRemer und Kron 1975 DeRemer , Frank ; Kron, Hans: Programming-in-the large versus programming-in-the-small. In: Proceedings of the international conference on Reliable software . New York, NY, USA : ACM Press, 1975, S. 114{121238 A. Anhang Diethelm 2007 Diethelm, Ira:"Strictly models and objects rst" { Unterrichtskonzept und -methodik f ur objektorientierte Modellierung im Informatikunterricht , Universit at Kassel, Dissertation, 2007. { http://kobra.bibliothek. uni-kassel.de/bitstream/urn:nbn:de:hebis:34-2007101119340/1/DissIraDruckfassungA5.1.pdf { gepr uft: 22. Februar 2009 Dittich 2008 Dittich , Carsten ; Stechert , Peer (Hrsg.) ; Schubert, Sigrid (Hrsg.): Einsatz von Datenbanksystemen als typische Repr asentanten von Informatiksystemen im Rahmen des Unterrichtsmodells f ur das Verstehen von Informatiksystemen. Hauptseminararbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2008. { http://www.die.informatik.uni-siegen.de/lehrstuhl/stechert/informatics-systems/ seminararbeiten/2008 repraesentanten.pdf { gepr uft: 22. Februar 2009 Doebeli Honegger 2007 Doebeli Honegger , Beat: Wiki und die fundamentalen Ideen der Informatik. In: (Schubert 2007) , S. 207{216 Downes und Watson 1999 Downes , Toni (Hrsg.) ; Watson , Deryn (Hrsg.): Communications and Networking in Education: Learning in a Networked Society. IFIP WG 3.1 and 3.5 (in co-operation with 3.6) Open Conference. AulankoHameenlinna. Finland, 1999 . { ISBN 951{45{8627{1 Dreier und Hartmann 2005 Dreier, Matthias ; Hartmann , Werner: Suchmaschinen verstehen. Einsatz einer didaktischen Suchmaschine im Unterricht. In: (Micheuz et al. 2005) , S. 151{152 Dorner und Schaub 1994 Dorner, Dietrich ; Schaub , Harald: Errors in Planning und Decision Making and the Nature of Human Information Processing. In: Applied Psychology. Volume 43 Issue 4. An International Review , 1994, S. 433{ 453 Drosdowski et al. 2001 Drosdowski, G unther (Hrsg.) ; Scholze-Stubenrecht , Werner (Hrsg.) ; Wermke , Matthias (Hrsg.): Duden 5. Das Fremdw orterbuch . 7. Au. Dudenverlag. Mannheim, 2001 Duell et al. 1998 Duell, Michael ; Rising , Linda ; Sommerlad, Peter ; Stall, Michael: Examples to Accompany: PatternOriented Software Architecture. In: Conference on Object Oriented Programming Systems Languages and Applications. (1998). { http://www.cs.uni.edu/~wallingf/teaching/062/sessions/support/pattern-examples. pdf { gepr uft: 22. Februar 2009 Dutke 1994 Dutke , Stephan: Mentale Modelle: Konstrukte des Wissens und Verstehens. Kognitionspsychologische Grundlagen f ur die Software-Ergonomie . Gottingen : Verlag f ur Angewandte Psychologie, 1994 (Reihe: Arbeit und Technik { Band 4). { ISBN 978{3{87844{111{3 Eberle 1996 Eberle , Franz ; Wettstein , Emil (Hrsg.) ; Weibel , Walter (Hrsg.) ; Gonon, Philipp (Hrsg.): Didaktik der Informatik bzw. einer informationsund kommunikationstechnologischen Bildung auf der Sekundarstufe II { Ziele und Inhalte, Bezug zu anderen F achern sowie unterrichspraktische Handlungsempfehlungen . 1. Au. Aarau : Verlag Sauerl ander, 1996 (P adagogik bei Sauerl ander: Dokumentation und Materialien 24). { ISBN 3{7941{4157{1 Eckerdal et al. 2006 Eckerdal , Anna ; McCartney, Robert ; Mostr om, Jan E. ; Ratcliffe , Mark ; Sanders , Kate ; Zander , Carol: Putting threshold concepts into context in computer science education. In: ITICSE '06: Proceedings of the 11th annual SIGCSE conference on Innovation and technology in computer science education . New York, NY, USA : ACM, 2006. { ISBN 1{59593{055{8, S. 103{107 Edelmann 1986 Edelmann, Walter (Hrsg.): Lernpsychologie { Eine Einf uhrung. M unchen, Weinheim : Psychologie-VerlagsUnion, 1986 Engbring 1995 Engbring , Dieter: Kulturund technikgeschichtlich begr undete Bildungswerte der Informatik. In: (Schubert 1995) , S. 68{77Literatur 239 Engbring 2004 Engbring , Dieter: Informatik im Herstellungsund Nutzungskontext. Ein technikbezogener Zugang zur fachubergreifenden Lehre, Universit at Paderborn { Fakult at fur Elektrotechnik, Informatik und Mathematik { Arbeitsgruppe Informatik und Gesellschaft, Dissertation, November 2004. { http://ubdata.uni-paderborn. de/ediss/17/2004/engbring/disserta.pdf { gepr uft: 22. Februar 2009 Ershov 1981 Ershov, Andrei: Programming, the second literacy. In: 3. IFIP World Conference on Computers in Education (WCCE), Lausanne (1981), S. 146{161 EU 2008 EU;Europ aische Gemeinschaften (Hrsg.): Der Europ aische Qualikationsrahmen f ur lebenslanges Lernen (EQR) . Belgium : EU, 2008. { http://ec.europa.eu/education/policies/educ/eqf/eqf08 de.pdf { gepr uft 22. Februar 2009 Fincher und Petre 2004 Fincher , Sally (Hrsg.) ; Petre , Marian (Hrsg.): Computer Science Education Research . Routledge Falmer, 2004. { 239 S. { ISBN 90 265 1969 9 Foegen 1996 Foegen, Malte: Entwurf eines didaktischen Konzepts der Informatik . Diplomarbeit. Technische Hochschule Darmstadt : FB Informatik. FG Praktische Informatik, 1996 Forneck 1990 Forneck , Hermann J.: Entwicklungstendenzen und Problemlinien der Didaktik der Informatik. In: Cyranek, Gunther (Hrsg.) ; Forneck , Hermann J. (Hrsg.) ; Goorhuis , Henk (Hrsg.): Beitr age zur Didaktik der Informatik . Frankfurt, Aarau : Verlag Moritz Diesterweg. Verlag Sauerl ander, 1990. { ISBN 3{425{05309{4 Forneck 1997 Forneck , Hermann J.: Eine neue Konzeption informationstechnischer Allgemeinbildung. In: LOG IN 17 (1997), Nr. 6, S. 24{28 Franke et al. 2007 Franke , Demian ; Freischlad, Stefan ; Friedrich, Lars ; Haug , Florian ; Klein , Benjamin ; Koslowski, Rudolf ; Stechert, Peer ; Ufer , Jonathan ; Stechert, Peer (Hrsg.) ; Freischlad, Stefan (Hrsg.): Abschlussbericht der Projektgruppe Entwurfsmuster im Informatikunterricht des Fachbereichs Elektrotechnik und Informatik der Universit at Siegen { Lernsoftware Pattern Park. Siegen : Lehrstuhl f ur Didaktik der Informatik und E-Learning, 2007. { http://www.die.informatik.uni-siegen.de/pgpatternpark/ { gepr uft: 22. Februar 2009 Freeman et al. 2005 Freeman , Eric ; Freeman , Elisabeth ; Sierra , Kathy: Entwurfsmuster von Kopf bis Fu . First edition. O'Reilly, 2005. { ISBN 3897214210 Freischlad 2006 Freischlad, Stefan: Beitrag des Informatikunterrichts zur Entwicklung von Medienkompetenzen. In: (Schwill et al. 2006) , S. 29{38 Freischlad 2007 Freischlad, Stefan: Anwenden und Verstehen des Internets { eine Erprobung im Informatikunterricht. In: (Schubert 2007), S. 195{206 Freischlad 2008 Freischlad, Stefan: Zur theoretischen Fundierung von Wissensstrukturen am Beispiel"Internetworking". In:Brinda, Torsten (Hrsg.) ; Fothe , Michael (Hrsg.) ; Hubwieser , Peter (Hrsg.) ; Schluter, Kirsten (Hrsg.): Didaktik der Informatik { Aktuelle Forschungsergebnisse. 5. Workshop der GI-Fachgruppe"Didaktik der Informatik" . Bonn : K ollen, 2008 (Lecture Notes in Informatics (LNI) 135). { ISBN 978{3{88579{229{1, S. 45{54 Freischlad und Schubert 2006 Freischlad, Stefan ; Schubert, Sigrid: Media Upheaval and Standards of Informatics. In: (Watson und Benzie 2006). { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Alesund-CD.zip { gepruft: 22. Februar 2009 Freischlad und Schubert 2007 Freischlad, Stefan ; Schubert, Sigrid: Towards high quality exercise classes for Internetworking. In: (Benzie und Iding 2007). { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Boston-CD. zip { gepr uft: 22. Februar 2009240 A. Anhang Freischlad und Stechert 2008 Freischlad, Stefan ; Stechert, Peer: Discovery Learning about Informatics Systems. In: (Wheeler et al. 2008). { http://cs.anu.edu.au/iojs/index.php/ip/issue/view/41 { gepr uft: 22. Februar 2009 Frey 2003 Frey, Elke: Informatik in der Jahrgangsstufe 6 { ein Bericht aus der Praxis. In: (Hubwieser 2003) , S. 33 Fruhauf et al. 1997 Fruhauf , Karol ; Ludewig, Jochen ; Sandmayr , Helmut: Software-Pr ufung: eine Anleitung zum Test und zur Inspektion . 3., durchgesehene Au. Z urich : VDF, Hochschulverlag an der ETH Z urich, Lehrbuch Informatik, 1997. { ISBN 3{7281{2353{6 Friedrich 1995a Friedrich, Steen: Grundpositionen eines Schulfaches. In: LOG IN 15 (1995), Nr. 5/6, S. 30{34 Friedrich 1995b Friedrich, Steen: Informatik-Didaktik { ein Fachgebiet im Aufbruch. In: (Schubert 1995), S. 33{39 Friedrich 2003 Friedrich, Steen: Informatik und PISA { vom Wehe zum Wohl der Schulinformatik. In: (Hubwieser 2003), S. 133{144 Friedrich 2005 Friedrich, Steen (Hrsg.): Unterrichtskonzepte f ur informatische Bildung, INFOS 2005, 11. GI-Fachtagung Informatik und Schule, 28.-30. September 2005 an der TU Dresden . Bd. 60. GI, 2005 (LNI). { ISBN 3{88579{389{X Friedrich et al. 1996 Friedrich, Steen ; Schubert, Sigrid E. ; Schwill, Andreas: Informatik in der Schule { ein Fach im Wandel. In: LOG IN 16 (1996), Nr. 2, S. 29{33 Fuller et al. 2007 Fuller , Ursula ; Johnson , Colin G. ; Ahoniemi, Tuukka ; Cukierman , Diana ; Hern an-Losada, Isidoro ; Jackova, Jana ; Lahtinen , Essi ; Lewis , Tracy L. ; Thompson , Donna M. ; Riedesel, Charles ; Thompson, Errol: Developing a computer science-specic learning taxonomy. In: ITiCSE-WGR '07: Working group reports on ITiCSE on Innovation and technology in computer science education . New York, NY, USA : ACM, 2007, S. 152{170 Gamma et al. 1995 Gamma, Erich ; Helm , Richard ; Johnson , Ralph ; Vlissides , John: Design Patterns: Elements of Resusable Object-Oriented Software. In: Addison-Wesley, Reading, MA 1995 (1995) Ganea und Koch 2008 Ganea, Milena ; Koch, Hartmud: Kooperation zwischen dem F urst-Johann-Moritz-Gymnasium und dem Institut"Didaktik der Informatik und E-Learning" an der Universit at Siegen. In: (Schubert und Stechert 2008), S. 115{120 Gasper et al. 1992 Gasper , Friedrich ; Lei , Ina ; Spengler , Mario ; Stimm , Hermann: Technische und theoretische Informatik . Munchen : Bayerischer Schulbuch-Verlag, 1992. { ISBN 3{7627{3701{0 Gerding 2008 Gerding , Thomas ; Stechert, Peer (Hrsg.) ; Schubert, Sigrid (Hrsg.): Unterrichtsvarianten zur systematischen Erkundung von Informatiksystemen mit dem Schwerpunkt Beobachtungsaufgaben, Lehrerund Sch ulerexperiment. Hauptseminararbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2008. { http://www.die.informatik.uni-siegen.de/lehrstuhl/stechert/informatics-systems/seminararbeiten/ unterrichtsvarianten.pdf { gepr uft: 22. Februar 2009 GI 2000 GI: Empfehlungen f ur ein Gesamtkonzept zur informatischen Bildung an allgemein bildenden Schulen der Gesellschaft f ur Informatik e. V. In: Informatik Spektrum 23 (2000), Nr. 6, S. 378{382 GI 2008 GI: Grunds atze und Standards f ur die Informatik in der Schule { Bildungsstandards Informatik f ur die Sekundarstufe 1. Beschluss des Pr asidiums der Gesellschaft f ur Informatik e. V. vom 24. Januar 2008. In: LOG IN 28 (2008), Nr. 150/151. { (Beilage zum Heft; 72 Seiten)Literatur 241 Goos und Zimmermann 2006 Goos , Gerhard ; Zimmermann , Wolf: Vorlesungen uber Informatik. Band 1: Grundlagen und funktionales Programmieren. Springer, 2006. { ISBN 978{3{540{24405{9 Graf 2008 Graf , Daniel ; Stechert, Peer (Hrsg.) ; Schubert, Sigrid (Hrsg.): Konzeption von Aufgaben f ur ein Unterrichtsprojekt mit dem Schwerpunkt Verstehen von Informatiksystemen. Unterrichtsaufgaben zu den Themenbereichen Zustand und Beobachter . Hauptseminararbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2008 Guzdial 1995 Guzdial , Mark: Centralized Mindset: A Student Problem with Object-Oriented Programming. In: SIGCSE ACM 1995 (1995), S. 182{185 Hacker und Skell 1993 Hacker, Winfried ; Skell , Wolfgang: Lernen in der Arbeit . Berlin, Bonn : Bundesinstitut f ur Berufsbildung, 1993. { ISBN 3{88555{525{5 Hadar und Hazzan 2004 Hadar , Irit ; Hazzan , Orit: On the Contribution of UML Diagrams to Software System Comprehension. In:Journal of Object Technology 3 (2004), Nr. 1, S. 143{156. { http://www.jot.fm/issues/issue 2004 01/ article3.pdf { gepr uft: 22. Februar 2009 Hampel et al. 1999 Hampel, Thorsten ; Magenheim , Johannes ; Schulte , Carsten: Dekonstruktion von Informatiksystemen als Unterrichtsmethode { Zugang zu objektorientierten Sichtweisen im Informatikunterricht. In: (Schwill 1999), S. 149{164 Harrer und Schneider 2002 Harrer , Andreas ; Schneider, Markus: Didaktische Betrachtung zur Unterrichtung von Software-Mustern im Hochschulbereich. In: (Schubert et al. 2002), S. 67{76 Hartmann et al. 2006 Hartmann , Werner ; Naf, Michael ; Reichert, Raimond: Informatikunterricht planen und durchf uhren. 1. Au. Berlin : Springer, 2006. { ISBN 978{3540344841 Hartmann und Nievergelt 2002 Hartmann , Werner ; Nievergelt , Jurg: Informatik und Bildung zwischen Wandel und Best andigkeit. In: Informatik Spektrum 25 (2002), Nr. 6, S. 465{476 Heimann 1976 Heimann , Paul: Didaktik als Theorie und Lehre. In: Reich , Kersten (Hrsg.) ; Thomas , Helga (Hrsg.): Didaktik als Unterrichtswissenschaft , Klett: Stuttgart, 1976, S. 142{167 Hermes 2003 Hermes , Alfred: Werkstatt: Entwurfsmuster f ur grasche Benutzerober achen. Modell { Darstellung { Steuerung in JAVA. In: LOG IN 23 (2003), Nr. 124, S. 57{63 Herper und Hinz 2005 Herper, Henry ; Hinz , Volkmar: Analyse eines Informatiksystems durch unterschiedliche Modellierungsansatze. In: (Friedrich 2005), S. 253{262 Hertwig und Br uck 2000 Hertwig, Andr e ; Bruck, Rainer: Entwurf digitaler Systeme . Munchen : Carl Hanser Verlag, 2000 Hesse et al. 1994 Hesse , Wolfgang ; Barkow , Georg ; Braun, Hubert von ; Kittlaus , Hans-Bernd ; Scheschonk, Gert: Terminologie der Softwaretechnik, Ein Begrissystem f ur die Analyse und Modellierung von Anwendungssystemen, Teil 2: T atigkeitsund ergebnisbezogene Elemente. In: Informatik Spektrum 17 (1994), Nr. 2, S. 96{105 Heymann 2004 Heymann , Hans W.: Besserer Unterricht durch Sicherung von"Standards"? In: Padagogik. Beltz-Verlag 56 (2004), Nr. 6, S. 6{9. { http://www.beltz.de/paedagogik/heft200406/n 0202.html { gepr uft 22. Februar 2009242 A. Anhang Hinkelmann et al. 2007 Hinkelmann, Markus ; Jakoby , Andreas ; Stechert , Peer: t-Private and Secure Auctions. In: Cai, Jin-yi (Hrsg.) ; Cooper, S. B. (Hrsg.) ; Zhu, Hong (Hrsg.): TAMC Bd. 4484, Springer, 2007 (Lecture Notes in Computer Science). { ISBN 978{3{540{72503{9, S. 486{498 Hinkelmann et al. 2008 Hinkelmann, Markus ; Jakoby , Andreas ; Stechert, Peer: t-Private and t-Secure Auctions. In: Journal of Computer Science and Technology 23 (2008), Nr. 5, S. 694{710. { http://jcst.ict.ac.cn/paper/8501.pdf { gepruft: 22. Februar 2009 Hirsch et al. 2000 Hirsch, Michael ; Magenheim , Johannes ; Reinsch, Thorsten: Zug ange zur Informatik mit Mindstorms (Teil 1). In: LOG IN 20 (2000), Nr. 2, S. 34{46 Hodnigg 2005 Hodnigg, Karin: A Pragmatic Approach to Spreadsheet Training Based Upon the "Projection-Screen"Model. In:(Mittermeir 2005), S. 116{129 Holl 2003 Holl , Berit: Entwicklung und Evaluation eines Unterrichtskonzeptes f ur computergest utztes kooperatives Lernen. Computer Supported Cooperative Learning (CSCL) am beruichen Gymnasium f ur Informationsund Kommunikationstechnologie, Technische Universit at Chemnitz, Philosophische Fakult at, Dissertation, Dezember 2003. { http://archiv.tu-chemnitz.de/pub/2004/0021/data/Dissertation Holl.pdf { gepr uft: 22. Februar 2009 Hoppe und Luther 1997 Hoppe , Heinz U. (Hrsg.) ; Luther, Wolfram (Hrsg.): Informatik und Lernen in der Informationsgesellschaft, 7. GI-Fachtagung Informatik und Schule, INFOS'97, Duisburg, 15.-18. September 1997 . Springer, 1997 (Informatik Aktuell). { ISBN 3{540{63432{0 Hubwieser 1999 Hubwieser, Peter: Informatik als Pichtfach an bayerischen Gymnasien. In: (Schwill 1999), S. 165{174 Hubwieser 2003 Hubwieser, Peter (Hrsg.): Informatische Fachkonzepte im Unterricht, INFOS 2003, 10. GI-Fachtagung Informatik und Schule, 17.-19. September 2003 in Garching bei M unchen. Bd. 32. GI, 2003 (LNI). { ISBN 3{88579{361{X Hubwieser 2005 Hubwieser, Peter: Von der Funktion zum Objekt { Informatik f ur die Sekundarstufe I. In: (Friedrich 2005), S. 27{41 Hubwieser 2007a Hubwieser, Peter: Didaktik der Informatik . 3. Au. Berlin : Springer examen.press, 2007. { ISBN 13{978{ 3{540{72477{3 Hubwieser 2007b Hubwieser, Peter: A smooth way towards object oriented programming in secondary schools. In: (Benzie und Iding 2007). { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Boston-CD.zip { gepruft: 22. Februar 2009 Hubwieser und Broy 1997a Hubwieser, Peter ; Broy, Manfred: Grundlegende Konzepte von Informationsund Kommunikationssystemen f ur den Informatikunterricht. In: (Hoppe und Luther 1997) , S. 40{50 Hubwieser und Broy 1997b Hubwieser, Peter ; Broy, Manfred: Ein neuer Ansatz f ur den Informatikunterricht am Gymnasium. In: LOG IN 17 (1997), Nr. 3/4, S. 42{47 Hubwieser und Broy 1999 Hubwieser, Peter ; Broy, Manfred: Educating Surfers Or Craftsmen: Introducing An ICT Curriculum For The 21st Century. In: (Downes und Watson 1999) , S. 163{177 Hubwieser et al. 2001 Hubwieser, Peter ; Humbert, Ludger ; Schubert, Sigrid: Evaluation von Informatikunterricht. In: (KeilSlawik und Magenheim 2001) , S. 213{215Literatur 243 Humbert 2001 Humbert, Ludger: Informatik lehren { zeitgem ae Ans atze zur nachhaltigen Qualikation aller Sch ulerinnen. In:(Keil-Slawik und Magenheim 2001) , S. 121{132 Humbert 2003 Humbert, Ludger: Zur wissenschaftlichen Fundierung der Schulinformatik. Witten : pad-Verlag, 2003. { ISBN 3{88515{214{2. { Dissertation an der Universit at Siegen http://www.ub.uni-siegen.de/pub/diss/fb12/ 2003/humbert/humbert.pdf { gepr uft: 22. Februar 2009 Humbert et al. 2005 Humbert, Ludger ; Eickhoff , Patrick ; Figgen, Bernd ; Hammersen , Thomas ; Pommerenke , Dirk ; Richter, Detlef ; Striewe , Jorg: Informatik innovative Konzepte zur Gestaltung einer oenen Anfangssequenz mit vielf altigen Erweiterungen. In: (Friedrich 2005), S. 263{274 Humbert und Puhlmann 2004 Humbert, Ludger ; Puhlmann , Hermann: Essential Ingredients of Literacy in Informatics. In: (Magenheim und Schubert 2004) , S. 65{76 Iding 2007 Iding , Marie: Critical information literacy: students' determinations of web site credibility. In: (Benzie und Iding 2007) . { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Boston-CD.zip { gepr uft: 22. Februar 2009 IEEE Standards Department 1990 Norm ANSI/IEEE Std 610.12 1990. IEEE Standard Glossary of Software Engineering Terminology ISO 1989 Norm ISO 7498-2. 1989. Information processing systems { Open Systems Interconnection { Basic Reference Model { Part 2: Security Architecture. International Organization for Standardization. ISO 1996 Norm ISO 9241-10. 1996. Ergonomische Anforderungen f ur B urotatigkeiten mit Bildschirmger aten Teil 10: Grunds atze der Dialoggestaltung. International Organization for Standardization. ISTE 1998 ISTE :National Educational Technology Standards (NETS) Project: Technology Foundation Standards for all Students . International Society for Technology in Education (ISTE), 1998. { http://cnets.iste.org { gepr uft: 22. Februar 2009 ISTE 2007 ISTE :The ISTE National Educational Technology Standards (NETS-S) and Performance Indicators for Students . International Society for Technology in Education (ISTE), 2007. { http://www.iste.org/Content/ NavigationMenu/NETS/ForStudents/2007Standards/NETS forStudents 2007 Standards.pdf { gepr uft: 22. Februar 2009 Jank und Meyer 2002 Jank , Werner ; Meyer, Hilbert: Didaktische Modelle. 5. vollst. uberarb. Au. Berlin : Cornelsen Scriptor, 2002. { ISBN 3{589{21566{6. { erste Au. 1991 Jih und Reeves 1992 Jih, Hueyching J. ; Reeves , Thomas C.: Mental models: a research focus for interactive learning systems. In:Educational Technology Research and Development 40 (1992), Nr. 3, S. 39{53 Kalkbrenner 2007 Kalkbrenner, Gerrit: Gibt es einen mobilkommunikationszentrierten Ansatz f ur die Schulinformatik? In: (Schubert 2007), S. 265{271 Karahasanovic und Holmboe 2006 Karahasanovic , Amela ; Holmboe , Christian: In: Fjuk, A. (Hrsg.); Karahasanovic, A. (Hrsg.); Kaasboell, Jens (Hrsg.): Challenges of learning object-oriented analysis and design through a modeling-rst approach. In:Comprehensive Object-Oriented Learning: The Learners Perspective , 2006, S. 49{66 Keil-Slawik 1992 Keil-Slawik, Reinhard: Konstruktives Design. Ein okologischer Ansatz. In: LOG IN 12 (1992), Nr. 5/6, S. 18{27244 A. Anhang Keil-Slawik und Magenheim 2001 Keil-Slawik, Reinhard (Hrsg.) ; Magenheim , Johannes (Hrsg.): Informatikunterricht und Medienbildung, INFOS 2001, 9. GI-Fachtagung Informatik und Schule, 17.-20. September 2001 in Paderborn . Bd. 8. GI, 2001 (LNI). { ISBN 3{88579{334{2 Keller 1987 Keller, John M.: Strategies for Stimulating the Motivation to Learn. In: Performance and Instruction 26 (1987), Nr. 8, S. 1{7 Kennewell 1995 Kennewell , Steve: Information technology capability { how does it develop? In: (Tinsley und Weert 1995), S. 419{427 Klafki 1996 Klafki, Wolfgang: Neue Studien zur Bildungstheorie und Didaktik, zeitgem ae Allgemeinbildung und kritisch-konstruktive Didaktik. 5. Aul. Beltz Verlag. Weinheim, 1996 Klieme 2004 Klieme , Eckhard: Was sind Kompetenzen und wie lassen sie sich messen? In: Padagogik 56 (2004), Nr. 6, S. 10{13 Klieme et al. 2007 Klieme , Eckhard ; Avenarius , Hermann ; Blum , Werner ; Dobrich , Peter ; Gruber, Hans ; Prenzel, Manfred ; Reiss , Kristina ; Riquarts , Kurt ; Rost , Jurgen ; Tenorth, Heinz-Elmar ; Vollmer, Helmut J.: Zur Entwicklung nationaler Bildungsstandards. Bildungsreform Band 1. Expertise. unver anderte Au. Bundesministerium f ur Bildung und Forschung (BMBF) Referat Publikationen; Internetredaktion. Bonn. Berlin, 2007. { http://www.bmbf.de/pub/zur entwicklung nationaler bildungsstandards.pdf { gepr uft: 22. Februar 2009 KMK 2004 KMK (Hrsg.): Einheitliche Pr ufungsanforderungen in der Abiturpr ufung"Informatik\ . Bonn : KMK, 2004. { KMK { St andige Konferenz der Kultusminister der L ander in der Bundesrepublik Deutschland http: //www.kmk.org/leadmin/veroeentlichungen beschluesse/1989/1989 1201EPA Informatik.pdf { gepr uft: 22. Februar 2009 Koerber 1978 Koerber , Bernhard: Informatik im Unterricht. In: Arlt , Wolfgang (Hrsg.): EDV-Einsatz in Schule und Ausbildung. Modelle und Erfahrungen . Munchen : Oldenbourg Verlag, 1978. { ISBN 3{486{22021{7, S. 6{12 Koerber et al. 1989 Koerber , Bernhard ; Peters , Ingo-R udiger ; Arlt , Wolfgang: Informatik. Unterrichtsmaterialien f ur die 9. Jahrgangsstufe. Einf uhrung in die Informatik. 2. Au. Berlin : Senator f ur Schule, Berufsbildung und Sport, 1989 Koerber und Peters 1993 Koerber , Bernhard ; Peters , Ingo-R udiger: Informatikunterricht und informationstechnische Grundbildung { ausgrenzen, abgrenzen oder integrieren? In: (Troitzsch 1993), S. 108{115 Koerber et al. 1981 Koerber , Bernhard ; Sack, Lothar ; Schulz-Zander , Renate: Prinzipien des Informatikunterrichts. In: Arlt , Wolfgang (Hrsg.): Informatik als Schulfach. Didaktische Handreichungen f ur das Schulfach Informatik . Munchen : Oldenbourg Verlag, 1981. { ISBN 3{486{24301{2, S. 28{35 Kollee et al. 2009 Kollee , Christian ; Magenheim , Johannes ; Nelles , Wolfgang ; Rhode , Thomas ; Schaper, Niclas ; Schubert, Sigrid ; Stechert, Peer: Computer Science Education and Key Competencies. Fostering Key Competencies in Secondary Education by achieving Modeling Competencies and System Comprehension in Informatics. In: Rsvik , Sindre (Hrsg.): 9th IFIP World Conference on Computers in Education { WCCE 2009, 2009. { (im Druck) Kopp und Mandl 2006 Kopp , Birgitta ; Mandl, Heinz: Wissensschemata. In: Mandl, Heinz (Hrsg.) ; Friedrich, Helmut F. (Hrsg.): Handbuch Lernstrategien. Analyse und Intervention . Gottingen : Hogrefe-Verlag, 2006. { ISBN 3{8017{1813{1, S. 127{134 Koubek 2005 Koubek , Jochen: Informatische Allgemeinbildung. In: (Friedrich 2005), S. 57{66Literatur 245 Kramer 1997 Kramer, Sybille: Werkzeug-Denkzeug-Spielzeug. Zehn Thesen uber unseren Umgang mit Computern. In: (Hoppe und Luther 1997) , S. 7{13 Kuhn 1969 Kuhn, Thomas S.: Die Struktur wissenschaftlicher Revolutionen. 15. Au. Reinbek : Rowohlt, 1969 Lehmann 1993 Lehmann, Eberhard: Software-Wartung. Ein neuartiger Einstieg in den Informatik-Anfangsunterricht. In: (Troitzsch 1993), S. 134{140 Lehmann 1995 Lehmann, Eberhard: Komplexe Systeme { Eine fundamentale Idee im Informatikunterricht. In: LOG IN 15 (1995), Nr. 1, S. 29{37 Lothe et al. 1986 Lothe , Herbert ; Claus , Volker ; Gunzenh auser , Rul ; Hosseus ;Keidel ;Loos ;Lubbers ;Peters ; Pulver ;Schruff ;Spengler , Mario: Rahmenempfehlungen f ur die Informatik im Unterricht der Sekundarstufe I. In: Informatik Spektrum Bd. 9. Berlin : Springer, 1986, S. 143{146. { Erarbeitet vom GI-Arbeitskreis 7.3.4"Informatik in der Sekundarstufe I" der Gesellschaft f ur Informatik e.V. Erg anzt um Zusammenfassung durch K. Haefner. Luft und K otter 1994 Luft , Alfred L. (Hrsg.) ; Kotter, Rudolf (Hrsg.): Informatik { eine moderne Wissenstechnik . Mannheim : BI-Wissenschaftsverlag, 1994 Magenheim 2001 Magenheim , Johannes: Informatiksystem und Dekonstruktion als didaktische Kategorien { Theoretische Aspekte und unterrichtspraktische Implikationen einer systemorientierten Didaktik der Informatik. (2001) Magenheim 2003 Magenheim , Johannes: Informatik Lernlabor Systemorientierte Didaktik in der Praxis. In: (Hubwieser 2003), S. 13{31 Magenheim 2005 Magenheim , Johannes: Towards a Competence Model for Educational Standards of Informatics. In: (Samways 2005). { 452.pdf Magenheim und Schubert 2004 Magenheim , Johannes (Hrsg.) ; Schubert, Sigrid (Hrsg.): Informatics and Student Assessment . Bd. 1. GI, 2004 (LNI Seminars). { ISBN 3{88579{435{7 Magenheim und Schulte 2006 Magenheim , Johannes ; Schulte , Carsten: Social, ethical and technical issues in informatics { An integrated approach. In: Education and Information Technologies 11 (2006), Nr. 3-4, S. 319{339. { ISSN 1360{2357. { http://dx.doi.org/10.1007/s10639-006-9012-6 { gepr uft: 22. Februar 2009 Mandl und Fischer 2000 Mandl , Heinz ; Fischer, Frank: Mapping-Techniken und Begrisnetze in Lernund Kooperationsprozessen. In: Mandl , Heinz (Hrsg.) ; Fischer, Frank (Hrsg.): Wissen sichtbar machen. Wissensmanagement mit Mapping-Techniken . Gottingen : Hogrefe-Verlag, 2000. { ISBN 3{8017{1337{7, S. 3{10 McCracken 2004 McCracken , W. M.: Research on Learning to Design Software. In: (Fincher und Petre 2004) , S. 155{174 Meier 1990 Meier, Markus W.: Anforderungen an die Informatikausbildung in den neunziger Jahren aus Sicht der Wirtschaft. In: Cyranek , Gunther (Hrsg.) ; Forneck , Hermann J. (Hrsg.) ; Goorhuis , Henk (Hrsg.): Beitr age zur Didaktik der Informatik . Frankfurt, Aarau : Verlag Moritz Diesterweg u. Verlag Sauerl ander, 1990. { ISBN 3{425{05309{4 Meiner 1971 Meiner, Hartwig: Datenverarbeitung und Informatik . Munchen : Ehrenwirth, 1971 (Unterrichtswerk der Mathematik). { ISBN 3{431{01441{0246 A. Anhang Merrienboer und Sweller 2005 Merrienboer , Jeroen ; Sweller, John: Cognitive Load Theory and Complex Learning: Recent Developments and Future Directions. In: Educational Psychology Review 17 (2005), June, Nr. 2, S. 147-177. http://dx.doi.org/10.1007/s10648-005-3951-0. { ISSN 1040{726X Meyer 2005 Meyer, Hilbert: Unterrichtsmethoden . Bd. I: Theorieband. 12. Au. Berlin : Cornelsen Scriptor, 2005. { ISBN 3{589{20850{3. { erste Au. 1987 Meyer 2006 Meyer, Hilbert: Unterrichtsmethoden . Bd. II: Praxisband. 13. Au. Berlin : Cornelsen Scriptor, 2006. { ISBN 3{589{20851{1. { erste Au. 1987 Micheuz et al. 2005 Micheuz, Peter (Hrsg.) ; Antonitsch, Peter (Hrsg.) ; Mittermeir, Roland (Hrsg.): Innovative Concepts for Teaching Informatics. Informatics in Secondary Schools: Evolution and Perspectives { Klagenfurt, 30th March to 1st April 2005 . Wien : Ueberreuter Verlag, 2005 . { ISBN 3{8000{5167{2 Micheuz et al. 2007 Micheuz, Peter ; Fuchs , Karl J. ; Landerer , Claudio: Mission possible { computers in "Anyschool". In: (Benzie und Iding 2007). { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Boston-CD. zip { gepr uft: 22. Februar 2009 Mittermeir 2005 Mittermeir, Roland (Hrsg.): From Computer Literacy to Informatics Fundamentals, International Conference on Informatics in Secondary Schools Evolution and Perspectives, ISSEP 2005, Klagenfurt, Austria, March 30 April 1, 2005, Proceedings . Bd. 3422. Springer, 2005 (Lecture Notes in Computer Science). { ISBN 3{540{25336{X Mittermeir 2006 Mittermeir, Roland (Hrsg.): Informatics Education The Bridge between Using and Understanding Computers, International Conference in Informatics in Secondary Schools Evolution and Perspectives, ISSEP 2006, Vilnius, Lithuania, November 7-11, 2006, Proceedings . Bd. 4226. Springer, 2006 (Lecture Notes in Computer Science). { ISBN 3{540{48218{0 Modrow 1991 Modrow , Eckart: Zur Didaktik des Informatik-Unterrichts, Band 1: Ziele und Inhalte. Anfangsunterricht. Beispiele und Anwendungen . Bonn : D ummler, 1991. { ISBN 3{427{46791{0 Modrow 1992 Modrow , Eckart: Zur Didaktik des Informatik-Unterrichts, Band 2: Gesellschaftliche Auswirkungen. Fachunterricht. Abitur. Bonn : D ummler, 1992. { ISBN 3{427{46801{1 Modrow 2002 Modrow , Eckart: Pragmatischer Konstruktivismus und fundamentale Ideen als Leitlinien der Curriculumentwicklung { am Beispiel der theoretischen und technischen Informatik , Martin-Luther-Universit at Halle-Wittenberg { Mathematisch-Naturwissenschaftlich-Technische Fakult at, Dissertation, Oktober 2002. { http://ddi.cs.uni-potsdam.de/Examensarbeiten/Modrow2003.pdf { gepr uft: 22. Februar 2009 Modrow 2004 Modrow , Eckart: The Contribution of Computer Science to Technical Literacy. In: (Magenheim und Schubert 2004) , S. 103{110 MSWWF 1999 MSWWF (Hrsg.): Richtlinien und Lehrpl ane f ur die Sekundarstufe II { Gymnasium/Gesamtschule in Nordrhein-Westfalen { Informatik . 1. Au. Frechen : Ritterbach Verlag, 1999 (Schriftenreihe Schule in NRW 4725). { MSWWF (Ministerium f ur Schule und Weiterbildung, Wissenschaft und Forschung des Landes Nordrhein-Westfalen) Muhlhauser 2002 Muhlhauser , Max: Verteilte Systeme (Distributed Systems). In: Informatik-Handbuch, 3. v ollig neu bearbeitete Au. (2002), S. 673{708. { Hanser, M unchen Nake 1998 Nake , Frieder: Was heit und zu welchem Ende studiert man Informatik? Ein akademischer Diskursbeitrag nebst Anwendung. In: Claus , Volker (Hrsg.): Informatik und Ausbildung , Springer, 1998 (Informatik Aktuell). { ISBN 3{540{64178{5, S. 1{13Literatur 247 Neupert und Friedrich 1997 Neupert, Heiko ; Friedrich, Steen: Lernen mit Netzen { Lernen uber Netze. In: LOG IN 17 (1997), Nr. 6, S. 18{23 Nievergelt 1995 Nievergelt , Jurg: Welchen Wert haben theoretische Grundlagen f ur die Berufspraxis? Gedanken zum Fundament des Informatikturms. In: Informatik Spektrum 18 (1995), Nr. 6, S. 342{344 Nievergelt und Ventura 1983 Nievergelt , Jurg (Hrsg.) ; Ventura, Andrea (Hrsg.): Die Gestaltung interaktiver Programme. Mit Anwendungsbeispielen f ur den Unterricht . Stuttgart : Teubner B.G. GmbH, 1983. { ISBN 3519025094 NRCCITL 1999 NRCCITL ;National Research Council Committee on Information Technology Literacy (Hrsg.): Being Fluent with Information Technology . Washington, D.C : National Academy Press, 1999. { ISBN 978{ 0309063999. { http://www.nap.edu/openbook.php?record id=6482 { gepr uft: 22. Februar 2009 OECD 2000 OECD ;Deutsches PISA-Konsortium (Hrsg.): Schulerleistungen im internationalen Vergleich. Eine neue Rahmenkonzeption f ur die Erfassung von Wissen und F ahigkeiten . Berlin : OECD PISA Deutschland, 2000. { ISBN 3{87985{078{X. { http://www.mpib-berlin.mpg.de/en/Pisa/pdfs/Rahmenkonzeptiondt.pdf { gepr uft 22. Februar 2009 OECD 2005 OECD ;OECD. Directorate for Education (Hrsg.): Denition und Auswahl von Schl usselkompetenzen. Zusammenfassung . Paris : OECD, 2005. { http://www.oecd.org/dataoecd/36/56/35693281.pdf { gepr uft 22. Februar 2009 Ossimitz 2000 Ossimitz , Gunther: Zur Entwicklung systemischen Denkens. In: Habilitationsschrift. Universit at Klagenfurt. (2000). { http://wwwu.uni-klu.ac.at/gossimit/pap/kap1 2.PDF { gepr uft: 22. Februar 2009 Ossimitz 2002 Ossimitz , Gunther: Systemisches Denken braucht systemische Darstellungsformen. In: Milling , Peter (Hrsg.): Entscheiden in komplexen Systemen. Wissenschaftliche Jahrestagung der Gesellschaft f ur Wirtschaftsund Sozialkybernetik vom 29. und 30. September 2000 in Mannheim. Wirtschaftskybernetik und Systemanalyse. Band 20 . Berlin : Duncker und Humblot, 2002. { ISBN 3{428{10638{0, S. 161{174. { http://wwwu.uni-klu.ac.at/gossimit/pap/sysdd.pdf { gepr uft: 22. Februar 2009 Paul 1994 Paul , Hansj urgen: Exploratives Agieren. Berlin : Peter Lang GmbH, 1994. { ISBN 3{631{48060{1 Peschke 1990 Peschke , Rudolf: Grundideen des Informatikunterrichts. In: LOG IN 10 (1990), Nr. 6, S. 25{33 Peschke 1991 Peschke , Rudolf: Neue Allgemeinbildung { Bietet die Informationstechnik eine Chance? In: Cyranek , Gunther (Hrsg.): Computerkultur im Umbruch? Neue Technologien und die Zukunft f ur Schule und beruiche Bildung , Diesterweg. Sauerl ander. Frankfurt am Main, Aarau, 1991. { ISBN 3{425{05330{2, S. 131{169 Peterson und Davie 2003 Peterson, Larry ; Davie, Bruce: Computernetze. Eine systemorientierte Einf uhrung. Heidelberg : dpunktVerlag, 2003. { 3. Au. Picot und Rohrbach 1995 Picot, Arnold ; Rohrbach, Peter: Organisatorische Einsatzm oglichkeiten von Workow-ManagementSystemen. In: DIN-Mitteilungen + elektronorm 74 (1995), Nr. 4, S. 230{236 Porter und Calder 2003 Porter , Ron ; Calder, Paul: A Pattern-Based Problem-Solving Process for Novice Programmers. In: ACE 2003 (2003), S. 231{238 Proulx 1995 Proulx , Viera K.: Computer science / informatics: the study of the Information World. In: (Tinsley und Weert 1995), S. 495{503248 A. Anhang Proulx 2000 Proulx , Viera K.: Programming Patterns and Design Patterns in the Introductory Computer Science Course. In:SIGCSE ACM 2000 (2000), Nr. 3, S. 80{84 Puhlmann 2005 Puhlmann , Hermann: Bildungsstandards Informatik zwischen Vision und Leistungstests. In: (Friedrich 2005), S. 79{89 Ramsky und Rezina 2005 Ramsky , Yuri ; Rezina, Olga: Study of Information Search Systems of the Internet. In: (Mittermeir 2005), S. 84{91 Rehm Rehm , Markus: Das empirische Forschungsinstrument"Phanomenprotokoll". In: Hottecke , Dietmar (Hrsg.): Jahrestagung der Gesellschaft f ur Didaktik der Chemie und Physik, Bern Rehm 2006 Rehm , Markus: Allgemeine naturwissenschaftliche Bildung { Entwicklung eines vom Begri"Verstehen" ausgehenden Kompetenzmodells, 2006, S. 45{66 Reinmann 2006 Reinmann, Gabi: Nur"Forschung danach"? Vom faktischen und potentiellen Beitrag der Forschung zu alltagstauglichen Innovationen beim E-Learning. Arbeitsbericht Universit at Augsburg, Nr. 14, 2006. { http: //www.imb-uni-augsburg.de/les/Arbeitsbericht14.pdf { gepr uft: 22. Februar 2009 Reischuk 1999 Reischuk , Karl R.: Komplexit atstheorie Bd. 1: Grundlagen . 2. Au. Stuttgart, Leipzig : Teubner Verlag, 1999 (Leitf aden u. Monographien der Informatik). { ISBN 978{3519122753 Renkl und N uckles 2006 Renkl, Alexander ; Nuckles , Matthias: Lernstrategien der externen Visualisierung. In: Mandl , Heinz (Hrsg.) ; Friedrich, Helmut F. (Hrsg.): Handbuch Lernstrategien. Analyse und Intervention . Gottingen : Hogrefe-Verlag, 2006. { ISBN 3{8017{1813{1, S. 135{147 Resnick 1992 Resnick , Mitchel: Beyond the centralized mindset: explorations in massively-parallel microworlds . Cambridge, MA, USA, Dissertation, 1992 Rincon et al. 2005 Rincon , Fernando ; Moya, Francisco ; Barba , Jesus ; Lopez, Juan C.: Model Reuse through Hardware Design Patterns. In: DATE '05: Proceedings of the conference on Design, Automation and Test in Europe . Washington, DC, USA : IEEE Computer Society, 2005. { ISBN 0{7695{2288{2, S. 324{329 Romeike 2007 Romeike , Ralf: Three drivers for creativity in computer science education. In: (Benzie und Iding 2007) . { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Boston-CD.zip { gepr uft: 22. Februar 2009 Ropohl 1991 Ropohl , Gunter: Technologische Aufkl arung. Beitr age zur Technikphilosophie. 1. Au. Frankfurt am Main : Suhrkamp, 1991 Rumbaugh et al. 2005 Rumbaugh , James ; Jacobson , Ivar ; Booch, Grady: The Unied Modeling Language Reference Manual. Boston : Addison-Wesley, 2005. { ISBN 3{431{02616{8 Samways 2005 Samways , Brian (Hrsg.): 35 Years of Computers in Education: What Works?, Proceedings of IFIP 8th World Conference on Computers in Education WCCE 2005, July 4-7, 2005, University of Stellenbosch, Western Cape, South Africa . Document Transformation Technologies cc, 2005 Schefe 1999 Schefe , Peter: Softwaretechnik und Erkenntnistheorie. In: Informatik Spektrum 22 (1999), Nr. 2, S. 122{135 Schneider 2003 Schneider, Markus: Design Pattern, a topic of the new mandatory subject informatics? In: Weert , Tom J. (Hrsg.) ; Munro , Robert K. (Hrsg.) ; IFIP TC 3 (Veranst.): Informatics and the Digital Society { Social, Ethical and Cognitive Issues . Norwell, Massachusetts : Kluwer Academic Publishers, April 2003. { ISBN 1{4020{7363{1, S. 157{171Literatur 249 Schneider 2005 Schneider, Markus: A Strategy to Introduce Functional Data Modeling at School Informatics. In: (Mittermeir 2005), S. 130{144 Schobel und Holdt 2004 Schobel , K. (Hrsg.) ; Holdt , U. (Hrsg.): Entwicklung und Erprobung eines integrierten Leistungspunktsystems in der Weiterentwicklung modularisierter Studienangebote am Beispiel der Ingenieurwissenschaften. Verikation von Qualikation in einem Leistungspunktsystem. Abschlussbericht. Hannover : Universit at Hannover, 2004. { http://www4.tu-ilmenau.de/lps/hannover/Abschlussbericht Hannover.pdf { gepr uft 22. Februar 2009 Schreiber 1983 Schreiber, Alfred: Bemerkungen zur Rolle universeller Ideen im mathematischen Denken. In: mathematica didactica 6 (1983), S. 65{76 Schubert 1991 Schubert, Sigrid: Fachdidaktische Fragen der Schulinformatik und (un)m ogliche Antworten. In: Gorny, Peter (Hrsg.): INFOS Bd. 292, Springer, 1991 (Informatik-Fachberichte). { ISBN 3{540{54619{7, S. 27{33 Schubert 1995 Schubert, Sigrid (Hrsg.): Innovative Konzepte f ur die Ausbildung, 7. GI-Fachtagung Informatik und Schule, INFOS'95, Chemnitz, 25.-28. September 1995 . Springer, 1995 (Informatik Aktuell). { ISBN 3{540{60245{3 Schubert 2005 Schubert, Sigrid: From Didactic Systems to Educational Standards. (Samways 2005). { 397.pdf Schubert 2007 Schubert, Sigrid (Hrsg.): Didaktik der Informatik in Theorie und Praxis, INFOS 2007, 12. GI-Fachtagung Informatik und Schule, 19.-21. September 2007 an der Universit at Siegen . Bd. 112. GI, 2007 (LNI). { ISBN 978{3{88579{206{2 Schubert 2008 Schubert, Sigrid: Forschungsbeispiele zur Didaktik der Informatik. In: (Schubert und Stechert 2008) , S. 7{32 Schubert et al. 2007 Schubert, Sigrid ; Freischlad, Stefan ; Stechert, Peer ; Kempf , Wolfgang ; Koch, Hartmud: Internetworking und Verstehen von Informatiksystemen. In: (Stechert 2007a) , S. 65{74 Schubert et al. 2002 Schubert, Sigrid (Hrsg.) ; Magenheim , Johannes (Hrsg.) ; Hubwieser , Peter (Hrsg.) ; Brinda, Torsten (Hrsg.): Forschungsbeitr age zur Didaktik der Informatik { Theorie, Praxis, Evaluation, Tagungsband des 1. Workshops der GI-Fachgruppe"Didaktik der Informatik" (DDI'02), Schwerpunkt: Modellierung in der informatischen Bildung, 10.-11. Oktober 2002, Witten-Bommerholz . Bd. 22. GI, 2002 (LNI). { ISBN 3{ 88579{351{2 Schubert und Schwill 2004 Schubert, Sigrid ; Schwill, Andreas: Didaktik der Informatik . 1. Au. Heidelberg, Berlin : Spektrum Akademischer Verlag, 2004. { ISBN 978{3{8274{1382{6 Schubert und Stechert 2008 Schubert, Sigrid (Hrsg.) ; Stechert, Peer (Hrsg.): Bildungskonzepte f ur Internetworking und eingebettete Mikrosysteme. Didaktik der Informatik f ur E-Learning, Schule und Hochschule. Kolloquium des Teilprojektes A8"Informatikunterricht und E-Learning zur aktiven Mitwirkung am digitalen Medienumbruch" im DFG SFB/FK 615"Medienumbr uche" . Bd. 8. Universit atsverlag Siegen { universi, 2008 (Reihe Medienwissenschaften). { ISBN 978{3{936533{28{6 Schubert et al. 2005a Schubert, Sigrid ; Stechert, Peer ; Freischlad, Stefan: Digitaler Medienumbruch. In: LOG IN 25 (2005), Nr. 135, S. 7{8 Schubert et al. 2005b Schubert, Sigrid ; Stechert, Peer ; Freischlad, Stefan: Die Phisher im Internet { Ein Beitrag zu Standards der informatischen Bildung. In: LOG IN 25 (2005), Nr. 135, S. 66{68250 A. Anhang Schubert et al. 2009 Schubert, Sigrid ; Stechert, Peer ; Freischlad, Stefan: ICT Learning Aids for Informatics. In: McDougall, Anne (Hrsg.): Researching IT in Education: Theory, Practice and Future Directions , Routledge, 2009. { (im Druck) Schulmeister 2002 Schulmeister, Rolf: Taxonomie der Interaktivit at von Multimedia { Ein Beitrag zur aktuellen MetadatenDiskussion. In: it + ti { Informationstechnik und Technische Informatik 44 (2002), S. 193{199 Schulte 2001 Schulte , Carsten: Vom Modellieren zum Gestalten { Objektorientierung als Impuls f ur einen neuen Informatikunterricht? In: informatica didactica (2001), Juli, Nr. 3. { Ausgew ahlte Beitr age der Tagung "IAB2000 { Informatik und Ausbildung"; http://didaktik.cs.uni-potsdam.de/InformaticaDidactica/Issue3 { gepruft 22. Februar 2009 Schulte 2004 Schulte , Carsten: LehrLernprozesse im Informatik-Anfangsunterricht: theoriegeleitete Entwicklung und Evaluation eines Unterrichtskonzepts zur Objektorientierung in der Sekundarstufe II , Universit at Paderborn, Didaktik der Informatik, Fakult at fur Elektrotechnik, Informatik und Mathematik, Dissertation, M arz 2004. { http://ubdata.uni-paderborn.de/ediss/17/2003/schulte/disserta.pdf { gepr uft: 22. Februar 2009 Schulte 2008 Schulte , Carsten: Duality Reconstruction { Teaching Digital Artifacts from a Socio-technical Perspective. In:Mittermeir, Roland T. (Hrsg.) ; Syslo, Maciej M. (Hrsg.): ISSEP Bd. 5090, Springer, 2008 (Lecture Notes in Computer Science). { ISBN 978{3{540{69923{1, S. 110{121 Schulte und Block 2002 Schulte , Carsten ; Block , Ulrich: Das Sieben-Schritte-Schema zur Dekonstruktion objektorientierter Software. In: (Schubert et al. 2002) , S. 3{12 Schulz-Zander et al. 1993 Schulz-Zander , Renate ; Brauer , W. ; Burkert, J. ; Heinrichs , U. ; Hilty, L. ; Holz, I. ; Keidel, K. ;Klages , A. ; Koerber , B. ; Meyer, M. ; Peschke , R. ; Pfluger, J. ; Reineke , V. ; Schubert, S.: Ver anderte Sichtweisen f ur den Informatikunterricht: Empfehlungen f ur das Fach Informatik in der Sekundarstufe II allgemeinbildender Schulen der Gesellschaft f ur Informatik e. V. In: (Troitzsch 1993), S. 205{218 Schweiger 1982 Schweiger, Fritz: Fundamentale Ideen der Analysis und handlungsorientierter Unterricht. In: Beitr age zum Mathematikunterricht (1982), S. 103{111 Schwidrowski 2007 Schwidrowski, Kirstin: Introducing Internetworking in Vocational Training. In: Abbott, Chris (Hrsg.) ; Lustigova, Zdena (Hrsg.): Information Technologies for Education and Training: iTET 2007. IFIP WG 3.6 and 3.4 Joint Working Conference. Prag, Czech Republic, 26th-28th September 2007 , ETIC Prague, 2007. { ISBN 978{80{254{0391{4, S. 154{161 Schwidrowski et al. 2008 Schwidrowski, Kirstin ; Schmidt, Thilo ; Bruck, Rainer ; Freischlad, Stefan ; Schubert, Sigrid ; Stechert, Peer: Mikrosystemverst andnis im Hochschulstudium { Ein praktikumsorientierter Ansatz. In: 3. GI-Fachtagung"Hochschuldidaktik Informatik" (HDI). 4.-5. Dezember 2008, Universit at Potsdam. , 2008. { (im Druck) Schwill 1993a Schwill, Andreas: Fundamentale Ideen der Informatik. In: Zentralblatt f ur Didaktik der Mathematik 1 (1993), S. 20{31 Schwill 1993b Schwill, Andreas: Verikation { zu schwierig f ur die Schule? { Drei Gegenbeispiele! Teil 1. In: LOG IN 13 (1993), Nr. 6, S. 45{48 Schwill 1994 Schwill, Andreas: Verikation { zu schwierig f ur die Schule? { Drei Gegenbeispiele! Teil 2. In: LOG IN 14 (1994), Nr. 1, S. 37{43Literatur 251 Schwill 1999 Schwill, Andreas (Hrsg.): Informatik und Schule, Fachspezische und fach ubergreifende didaktische Konzepte, 8. GI-Fachtagung Informatik und Schule, INFOS99, Potsdam, 22.-25. September 1999 . Springer, 1999 (Informatik Aktuell). { ISBN 3{540{66300{2 Schwill et al. 2006 Schwill, Andreas (Hrsg.) ; Schulte , Carsten (Hrsg.) ; Thomas , Marco (Hrsg.): Didaktik der Informatik, Tagungsband des 3. Workshops der GI-Fachgruppe"Didaktik der Informatik" (DDI'06), 19.-20. Juni 2006, Potsdam . Bd. 99. GI, 2006 (LNI). { ISBN 978{3{88579{193{5 Seiert 1989 Seiffert, Helmut ; Seiffert, Helmut (Hrsg.) ; Radnitzky , Gerard (Hrsg.): Handlexikon zur Wissenschaftstheorie . Munchen : Ehrenwirth Verlag, 1989. { ISBN 3{431{02616{8 Senkbeil und Drechsel 2004 Senkbeil , Martin ; Drechsel, Barbara: Vertrautheit mit dem Computer. In: Prenzel, Manfred (Hrsg.) ; Baumert, J urgen (Hrsg.) ; Blum , Werner (Hrsg.) ; Lehmann, Rainer (Hrsg.) ; Leutner , Detlev (Hrsg.) ; Neubrand , Michael (Hrsg.) ; Pekrun , Reinhard (Hrsg.) ; Rost , Jurgen (Hrsg.) ; Schiefele , Ulrich (Hrsg.): PISA 2003 { Der Bildungsstand der Jugendlichen in Deutschland { Ergebnisse des zweiten internationalen Vergleichs , 2004, S. 177{190 Shalloway und Trott 2002 Shalloway, Alan ; Trott, James R.: Design patterns explained: a new perspective on object-oriented design . Boston, MA, USA : Addison-Wesley Longman Publishing Co., Inc., 2002. { ISBN 0{201{71594{5 Sulz 2007 Sulz, Daniel ; Stechert , Peer (Hrsg.) ; Schubert, Sigrid (Hrsg.): Zuverl assigkeit und Kompatibilit at von Informatiksystemen: Unterrichtsbeispiele zur F orderung des Informatiksystemverst andnisses . Hauptseminararbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2007 Stachowiak 1973 Stachowiak, Herbert: Allgemeine Modelltheorie. Springer, Wien, 1973 Stechert 2006a Stechert, Peer: Informatics System Comprehension { A learner-centred cognitive approach to networked thinking. In: (Watson und Benzie 2006). { http://www.die.informatik.uni-siegen.de/ip-wg31/ Proceedings/Alesund-CD.zip { gepr uft: 22. Februar 2009 Stechert 2006b Stechert, Peer: Informatics system comprehension: A learner-centred cognitive approach to networked thinking. In: Education and Information Technologies 11 (2006), Nr. 3-4, S. 305{318. { ISSN 1360{2357. { http://dx.doi.org/10.1007/s10639-006-9014-4 { gepr uft: 22. Februar 2009 Stechert 2006c Stechert, Peer: Unterrichtsmodellentwicklung zur F orderung des Informatiksystemverst andnisses mit Entwurfsmustern. In: (Schwill et al. 2006) , S. 89{98 Stechert 2007a Stechert, Peer (Hrsg.): Informatische Bildung in der Wissensgesellschaft. Praxisband der 12. GI-Fachtagung Informatik und Schule, 19.-21. September 2007 an der Universit at Siegen . Bd. 6. Universit atsverlag Siegen { universi, 2007 (Reihe Medienwissenschaften). { ISBN 978{3{936533{23{1 Stechert 2007b Stechert, Peer: Understanding of Informatics Systems { A theoretical framework implying levels of competence. In: Berglund , Anders (Hrsg.) ; Wiggberg, Mattias (Hrsg.): 6th Baltic Sea Conference on Computing Education Koli Calling 2006. New York, NY, USA : ACM, 2007, S. 128{131. { http: //doi.acm.org/10.1145/1315803.1315827 { gepr uft: 22. Februar 2009 Stechert 2007c Stechert, Peer: Von vernetzten fundamentalen Ideen zum Verstehen von Informatiksystemen { Eine Unterrichtserprobung in der Sekundarstufe II. In: (Schubert 2007), S. 183{194 Stechert 2008a Stechert, Peer: Combining Dierent Perspectives on Informatics Systems { A Case Study at Upper Secondary Level. In: (Wheeler et al. 2008). { http://cs.anu.edu.au/iojs/index.php/ip/issue/view/41 { gepr uft: 22. Februar 2009252 A. Anhang Stechert 2008b Stechert, Peer: Exemplarische Betrachtungen zu lernf orderlicher Software mit Entwurfsmustern f ur Informatiksystemverst andnis. In: Brinda, Torsten (Hrsg.) ; Fothe , Michael (Hrsg.) ; Hubwieser, Peter (Hrsg.) ;Schluter, Kirsten (Hrsg.): Didaktik der Informatik { Aktuelle Forschungsergebnisse. 5. Workshop der GIFachgruppe"Didaktik der Informatik" . Bonn : K ollen, 2008 (Lecture Notes in Informatics (LNI) 135). { ISBN 978{3{88579{229{1, S. 55{64 Stechert 2008c Stechert, Peer: Systematic Exploration of Informatics Systems. In: Kendall , Mike (Hrsg.) ; Samways , Brian (Hrsg.): Learning to Live in the Knowledge Society Bd. 281, Springer, 2008 (IFIP). { ISBN 978{0{ 387{09728{2, S. 359{360 Stechert et al. 2009 Stechert, Peer ; Kollee , Christian ; Schubert, Sigrid: Classroom Practice Project "UNIS Understanding of Informatics Systems". In: Rsvik , Sindre (Hrsg.): 9th IFIP World Conference on Computers in Education { WCCE 2009 , 2009. { (im Druck) Stechert und Schubert 2007 Stechert, Peer ; Schubert, Sigrid E.: A Strategy to Structure the Learning Process Towards Understanding of Informatics Systems. In: (Benzie und Iding 2007). { http://www.die.informatik.uni-siegen.de/ ip-wg31/Proceedings/Boston-CD.zip { gepr uft: 22. Februar 2009 Steinbock 1993 Steinbock , Hans-Joachim: Unternehmerische Potentiale der Informationstechnik in den neunziger Jahren, Universit at St. Gallen, Dissertation, 1993 Steinert 2007 Steinert, Markus: Lernzielgraphen und Lernzielerfolgsanalyse. In: (Schubert 2007), S. 147{158 Steinkamp 1999 Steinkamp , Dirk: Informatikexperimente im Schullabor . Diplomarbeit. Universit at Dortmund : Fachbereich Informatik, 1999. { http://www.die.informatik.uni-siegen.de/forschung/steinkamp { gepr uft 22. Februar 2009 Stone, Harold S. 1975 Stone, Harold S. (Hrsg.): Introduction to Computer Architecture . . Chicago : Science Research Associates Inc., 1975 Stupperich und Warkentin 2007 Stupperich , Pamina ; Warkentin , Swetlana ; Stechert, Peer (Hrsg.) ; Schubert, Sigrid (Hrsg.):"LautDenken" f ur die Didaktik der Informatik am Beispiel von Vorgehensweisen f ur das Verstehen von Informatiksystemen. Hauptseminararbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2007 Tanenbaum und Goodman 2001 Tanenbaum, Andrew ; Goodman , James: Computerachitektur . Prentice Hall, 2001 Tao 2000 Tao, Yongiel: Teaching Software Tools via Design Patterns. In: Australasian Conference on Computing Education 2000 (2000), Nr. 262, S. 248{252 Tedre et al. 2006 Tedre , Matti ; Sutinen, Erkki ; Kahkonen, Esko ; Kommers , Piet: Ethnocomputing: ICT in cultural and social context. New York, NY, USA : ACM, 2006. { ISSN 0001{0782, S. 126{130 Tergan und Keller 2005 Tergan , Sigmar-Olaf ; Keller, Tanja: Digital Concept Mapping in Learning Contexts: Integrating Knowledge, Arguments and Information Resources. In: Proceedings of the Ninth International Conference on Information Visualisation (IV'05). IEEE. (2005). { http://ieeexplore.ieee.org/iel5/10086/32319/01509103.pdf { gepr uft: 22. Februar 2009 Thaller 1994 Thaller, Georg E.: Verikation und Validation: Software-Test f ur Studenten und Praktiker . Braunschweig; Wiesbaden : Vieweg, 1994. { ISBN 3{528{05442{5 Thomas 2001 Thomas , Marco: Die Vielfalt der Modelle in der Informatik. In: (Keil-Slawik und Magenheim 2001) , S. 173{186Literatur 253 Thomas 2002 Thomas , Marco: Informatische Modellbildung { Modellieren von Modellen als ein zentrales Element der Informatik f ur den allgemeinbildenden Schulunterricht, Universit at Potsdam Didaktik der Informatik, Dissertation, Juli 2002. { http://ddi.cs.uni-potsdam.de/Personen/marco/Informatische Modellbildung Thomas 2002.pdf { gepr uft: 22. Februar 2009 Thomas 2003 Thomas , Marco: Informatische Modelle zur Strukturierung von Anfangsunterricht. In: (Hubwieser 2003) , S. 155{164 Thurber und Stratton 1995 Thurber, Barton D. ; Stratton, Jerry: Computers, telecommunications and Western culture. In: (Tinsley und Weert 1995), S. 871{878 Tichy 1997 Tichy, Walter F.: A Catalogue of General-Purpose Software Design Patterns. In: TOOLS '97: Proceedings of the Tools-23"Technology of Object-Oriented Languages and Systems" . Washington, DC, USA : IEEE Computer Society, 1997. { ISBN 0{8186{8383{X, S. 330{339 Tinsley und Weert 1995 Tinsley, David (Hrsg.) ; Weert , Tom J. v. (Hrsg.): Liberating the Learner, IFIP TC3 Sixth IFIP World Conference on Computers in Education, WCCE 1995, 1995, Birmingham, United Kingdom . Chapman & Hall, 1995 (IFIP Conference Proceedings). { ISBN 0{412{62670{5 Tort und Blondel 2007 Tort, Fran coise ; Blondel , Fran cois-Marie: Uses of spreadsheets and assessment of competencies of high school students. In: (Benzie und Iding 2007). { http://www.die.informatik.uni-siegen.de/ip-wg31/ Proceedings/Boston-CD.zip { gepr uft: 22. Februar 2009 Troitzsch 1993 Troitzsch, Klaus G. (Hrsg.): Informatik als Schl ussel zur Qualikation, GI-Fachtagung Informatik und Schule 1993, Koblenz, 11.-13. Oktober 1993 . Springer, 1993 (Informatik Aktuell). { ISBN 3{540{57256{2 Tulodziecki und Herzig 1998 Tulodziecki, Gerhard ; Herzig , Bardo: Praxisund theorieorientierte Entwicklung und Evaluation von Konzepten f ur padagogisches Handeln, 1998. { Universit at Paderborn, Institut f ur Erziehungswissenschaft Ruhr-Universit at Bochum, Institut f ur P adagogik. http://www.bardo-herzig.de/blog/media/theorie.pdf { gepruft: 22. Februar 2009 Ufer 2007 Ufer , Jonathan: Architekturmuster als Beitrag zum Informatiksystemverst andnis . Diplomarbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2007. { http://www.die.informatik. uni-siegen.de/forschung/Ufer/Architekturmuster.pdf { gepr uft: 22. Februar 2009 Ullenboom 2005 Ullenboom , Christian: Vermittlung von Entwurfsmustern in der informatischen Ausbildung am Beispiel eines Media Players. Diplomarbeit. Arbeitsgruppe Didaktik der Informatik der Universit at Paderborn . 2005 Ulrich und Probst 1988 Ulrich, Hans ; Probst , Gilbert J.: Anleitung zum ganzheitlichen Denken und Handeln. Ein Brevier f ur Fuhrungskr afte. Bern : Paul Haupt Verlag, 1988. { ISBN 978{3258051826 UNESCO 1994 UNESCO ;Weert , Tom van (Hrsg.) ; Tinsley, David (Hrsg.): INFORMATICS FOR SECONDARY EDUCATION { A Curriculum for Schools . Original 1994. Paris : UNESCO. Produced by working party of the IFIP under auspices of UNESCO. Paris, 1994. { http://wwwedu.ge.ch/cptic/prospective/projets/unesco/ 1994/en/welcome.html { gepr uft: 22. Februar 2009 UNESCO 2002 UNESCO ;Weert , Tom J. v. (Hrsg.): Information and Communication Technology in Education { A Curriculum for Schools and Programme of Teacher Development . Paris : UNESCO, 2002. { http://unesdoc. unesco.org/images/0012/001295/129538e.pdf { gepr uft: 22. Februar 2009 UNESCO 2005 UNESCO (Hrsg.): Towards knowledge societies: UNESCO world report . UNESCO Publishing. Paris, 2005. { ISBN 92{3{104000{6. { http://unesdoc.unesco.org/images/0014/001418/141843e.pdf { gepr uft 22. Februar 2009254 A. Anhang UNESCO 2008 UNESCO ;Forest Woody Horton , Jr. (Hrsg.): Understanding Information Literacy: A Primer . Paris : UNESCO, 2008. { http://unesdoc.unesco.org/images/0015/001570/157020e.pdf { gepr uft 22. Februar 2009 Unger-Lamprecht 2001 Unger-Lamprecht , Barbara: Experimentelle Bewertung der Auswirkungen von Entwurfsmustern , Universitat Karlsruhe, Dissertation, Januar 2001. { ISBN 3935363117 Verhoe 2006 Verhoeff , Tom: A Master Class Software Engineering for Secondary Education. In: (Mittermeir 2006), S. 150{158 Vester 1988 Vester , Frederic: Leitmotiv vernetztes Denken . Munchen : Heyne Verlag, 1988. { ISBN 3{453{02865{1 Vo 2006 Vo , Siglinde: Modellierung von Standardsoftwaresystemen aus didaktischer Sicht , Technische Universit at Munchen, Institut f ur Informatik, Dissertation, 2006 Vo 2005a Vo , Siglinde: Informatic Models in Vocational Training for Teaching Standard Software. In: (Mittermeir 2005), S. 145{155 Vo 2005b Vo , Siglinde: Informatische Bildung in Anwenderschulungen. In: (Friedrich 2005), S. 285{296 Wagenschein 1991 Wagenschein , Martin: Verstehen lehren. genetisch { sokratisch { exemplarisch . Weinheim, Basel : Beltz, 1991. { ISBN 3{407{29001{2. { 9. Au. Wallingford 1996 Wallingford, Eugene: Toward a First Course Based on Object-Oriented Patterns. In: SIGCSE ACM 1996 (1996), Nr. 2, S. 27{31 Watson und Andersen 2002 Watson , Deryn (Hrsg.) ; Andersen , Jane (Hrsg.): Networking the Learner: Computers in Education, IFIP TC3 Seventh IFIP World Conference on Computers in Education, WCCE 2001, July 29 August 3, 2001, Copenhagen, Denmark . Bd. 217. Kluwer, 2002 (IFIP Conference Proceedings). { ISBN 1{4020{7133{7 Watson und Benzie 2006 Watson , Deryn (Hrsg.) ; Benzie , David (Hrsg.): Imagining the future for ICT and Education . Hogskolen Alesund, 2006 . { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/Alesund-CD.zip { gepruft: 22. Februar 2009 Wedekind et al. 1998 Wedekind, Hartmut ; Gorz, G unther ; Kotter, Rudolf ; Inhetveen, R udiger: Modellierung, Simulation, Visualisierung: Zu aktuellen Aufgaben der Informatik (Zur Diskussion gestellt). In: Informatik Spektrum 21 (1998), Nr. 5, S. 265{272 Wedekind et al. 2004 Wedekind, Hartmut ; Ortner, Erich ; Inhetveen, R udiger: Informatik als Grundbildung. In: Informatik Spektrum 27 (2004), Nr. 2, S. 172{180 Weert 1984 Weert , Tom J. v.: A model syllabus for literacy in information technology for all teachers. Bruxelles : Association for Teacher Education in Europe, 1984. { ISBN 2{87125{014{6 Weert 1993 Weert , Tom J. v.: Informatik als Teil der Allgemeinbildung. In: (Troitzsch 1993), S. 11{19 Weert 1995 Weert , Tom J. v.: IFIP Working Group 3.1: towards integration of computers into education. In: (Tinsley und Weert 1995), S. 3{12 Weert und Kendall 2005 Weert , Tom v. ; Kendall , Mike: Growing Importance of Lifelong Learning with ICT. In: (Samways 2005). { 408.pdfLiteratur 255 Wegner 1997 Wegner, Peter: Why interaction is more powerful than algorithms. In: Commun. ACM 40 (1997), Nr. 5, S. 80{91. { ISSN 0001{0782. { http://doi.acm.org/10.1145/253769.253801 { gepr uft 22. Februar 2009 Weigend 2006 Weigend, Michael: Experimental Programming. In: (Watson und Benzie 2006). { http://www.die. informatik.uni-siegen.de/ip-wg31/Proceedings/Alesund-CD.zip { gepr uft: 22. Februar 2009 Weigend 2007 Weigend, Michael: Origins of action { protagonists in drama-like interpretations of computer programmes. In: (Benzie und Iding 2007) . { http://www.die.informatik.uni-siegen.de/ip-wg31/Proceedings/ Boston-CD.zip { gepr uft: 22. Februar 2009 Weinert 2001 Weinert, Franz E.: Vergleichende Leistungsmessung in Schulen { eine umstrittene Selbstverst andlichkeit. In: Weinert, Franz E. (Hrsg.): Leistungsmessungen in Schulen . Weinheim : Beltz, 2001. { ISBN 3{407{25256{0, S. 17{31. { 2. Au. Wende 2002 Wende , Ingo: Normen und Spezikationen der Informationstechnik. In: Rechenberg, Peter (Hrsg.) ; Pomberger, Gustav (Hrsg.): Informatikhandbuch . Munchen : Hanser Fachbuch, 2002, S. 1113{1132 Weyer 2007a Weyer , Michell ; Stechert, Peer (Hrsg.) ; Schubert, Sigrid (Hrsg.): Konzeption und Evaluation des Unterrichtsprojekts an einem Siegener Gymnasium mit dem Schwerpunkt Verstehen von Informatiksystemen. Hauptseminararbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2007. { http://www.die.informatik.uni-siegen.de/gruppe/stechert/informatics-systems/seminararbeiten/ unterrichtsprojekt.pdf { gepr uft: 22. Februar 2009 Weyer 2007b Weyer , Michell: Systemorientierte Klassikation von Entwurfsmustern und Erarbeitung des Entwurfs einer Lernsoftware . Diplomarbeit. Lehrstuhl f ur Didaktik der Informatik und E-Learning. Universit at Siegen, 2007. { http://www.die.informatik.uni-siegen.de/forschung/Weyer/Entwurfsmusterklassikation weyer.pdf { gepr uft: 22. Februar 2009 Wheeler et al. 2008 Wheeler, Steve (Hrsg.) ; Brown , Doug (Hrsg.) ; Kassam , Alnaaz (Hrsg.): ICT and Learning for the Net Generation . Open University Malaysia, 2008 . { ISBN 978{3{901882{29{6. { http://cs.anu.edu.au/iojs/ index.php/ip/issue/view/41 { gepr uft: 22. Februar 2009 Wiesner und Brinda 2007 Wiesner , Bernhard ; Brinda, Torsten: Erfahrungen bei der Vermittlung algorithmischer Grundstrukturen im Informatikunterricht der Realschule mit einem Robotersystem. In: (Schubert 2007), S. 113{124 Winograd und Flores 1988 Winograd , Terry (Hrsg.) ; Flores , Fernando (Hrsg.): Understanding Computers and Cognition. A New Foundation for Design. Reading, MA. : Addison Wesley, 1988. { ISBN 0{201{11297{3. { 3. Au. Witten und Penon 1997 Witten, Helmut ; Penon , Johann: Internet und Informatik {"Runderneuerung" f ur den Unterricht? In: LOG IN 17 (1997), Nr. 6, S. 10{17 Wittmann 1981 Wittmann , Erich: Grundfragen des Mathematikunterrichts . 6. Au. Braunschweig : Vieweg Verlag, 1981 Wursthorn 2006 Wursthorn , Birgit: Informatische Grundkonzepte in Klasse 5 der Realschule { Entwurf und Evaluation von facher ubergreifendem Unterricht. Ludwigsburg, P adagogische Hochschule Ludwigsburg, Dissertation, 2006 Zammit und Downes 2001 Zammit, Katina ; Downes , Toni: Tracking Technology and Literacy Practices. In: (Watson und Andersen 2002), S. 189{198 Zimmer 1995 Zimmer, Walter: Relationships Between Design Patterns. In: Coplien, James O. (Hrsg.) ; Schmidt, Douglas C. (Hrsg.): Pattern Languages of Program Design . Amsterdam : Addison Wesley, 1995, S. 345{364256 A. Anhang