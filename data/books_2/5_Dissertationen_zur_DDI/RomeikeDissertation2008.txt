Institut für Informatik  Didaktik der Informatik           Kreativität im Informatikunterricht              Dissertation  zur Erlangung des akademischen Grades  "doctor rerum naturalium"  (Dr. rer. nat.)  in der Wissenschaftsdisziplin "Didaktik der Informatik"                  eingereicht an der  Mathematisch-Naturwissenschaftlichen Fakultät  der Universität Potsdam        von  Ralf Romeike      Potsdam, den 28. August 2008   Gliederung  Kapitel 1: Einleitung  Kapitel 2: Kreativität  (1) Eine Leistung ist als kreativ zu bezeichnen, wenn sie zu persönlich neuen un d verwendbaren Ideen,  Lösungen oder Erkenntnissen führt.  (2) Die Befähigung zu kreativem Handeln kann als höchstes Lernziel verstanden werden.  (3) Kreativität und intrinsische Motivation stehen in einem wechselseitigen Verhältnis; dies kann im  Unterricht als Chance aufgefasst werden.  Kapitel 3: Kreativität in der Informatik  (1) Informatik verkörpert Kreativität in verschiedenen Perspektiven: insbesondere in Fach-, Mensch-,  Kunst-, Technologie-Perspektiv e und artifizieller Kreativität.  (2) Jede Perspektive impliziert methodische oder thematische Anknü pfungspunkte für einen kreativen  Informatikunterricht.  Kapitel 4: Kreativität in der informatischen Bildung  (1) Kreativität kann in der informatischen Bildung zur Verbesserung von Motivation und Leistung instrumentalisiert werden.  (2) Eine zu eng ausgelegte Problemorientierung in der Praxis des Informatikunterrichts beschneidet  diesen um seine kreativen Möglichkeiten.  Kapitel 5: Faktorenmodell kreativen Lernens im Informatikunterricht  (1) Charakteristische Einflussfaktoren kreativen Lernens im Informatikunterricht können durch ein  Faktorenmodell beschrieben werden.  (2) Kreative informatische Prozesse stellen das zentrale Element in einem kreativen Informatikunterricht dar.  (3) Schüler, Fach sowie Informationsund Kommunikationstechnologien stellen vernetzte Faktoren  dar, die Kreativität im Informatikunterricht fördern.   Kapitel 6: Untersuchungen zum Faktorenmodell  (1) Die Faktoren des vorgeschlagenen Modells lassen sich in Biographien von Studienanfängern der  Informatik nachweisen.  (2) Faktoren und Zusammenhänge des Modells werden in den Sichtweisen eines kreativen Schülers  deutlich.  (3) Zukünftige Informatiklehrer wertschätzen Kreativ ität, haben allerdings unkonkrete Vorstellungen  von der Umsetzung im Informatikunterricht.   Kapitel 7: Kriterien kreativen Informatikunterrichts  (1) Die aus dem Faktorenmodell resultierenden Anforderungen an einen kreativen Informatikunterricht  werden durch Kriterien operationalisiert.  (2) Die Anwendung der Kriterien bei der Evaluation pu blizierter Unterrichtsvorschläge verdeutlicht  den bisher geringen Stellenwert von Kreativität im Informatikunterricht.   Kapitel 8: Anwendung in einem Unterrichtsbeispiel  (1) Ein Unterrichtsbeispiel zur Einführung in die Programmierung verdeutlicht exemplarisch die Umsetzung eines kreativen Informatikunterrichts.  Kapitel 9: Evaluation des Unterrichtsbeispiels  (1) Die Durchführung und Evaluation des Unterrichtsbeispiels zeigt eine Steigerung von Motivation,  Interesse und Leistungen und eine positive Veränd erung des Informatikbilds im Pre-Post-Vergleich  und im Vergleich mit dem Kontrollkurs.   (2) Die Schüler beschreiben Informatik nun als Fach, in dem Kreativität benötigt wird und das Kreativität ermöglicht.   Kapitel 10: Zusammenfassung, Diskussion und Ausblick     Inhaltsverzeichnis  1 Einleitung ..................................................................................................................... ..................1   1.1 Ausgangslage............................................................................................................... .......1  1.2 Stellenwert der Kreativität in der Informatikdidaktik ........................................................1  1.3 Ziele...................................................................................................................... ..............4  1.4 Struktur der Arbeit........................................................................................................ ......4  2 Kreativität .................................................................................................................... ..................6   2.1 Wissenschaftliche Forsc hungsansätze zur Kreativität........................................................6  2.1.1 Entwicklung .............................................................................................................. .....6  2.1.2 Das 4-P-Modell........................................................................................................... ...7  2.1.3 Ursprungsorientierte Sichtweisen ................................................................................11 2.1.4 Unterscheidung verschiedene r Ausprägungen von Kreativität....................................12  2.2 Motivation und Kreativität ...............................................................................................13   2.3 Begriffsbestimmung ......................................................................................................... 15  2.4 Kreativitä tsförderung...................................................................................................... ..17  2.5 Kreativität in der Lernwissenschaft..................................................................................18  2.6 Schule und Kreativität ..................................................................................................... .19  2.7 Kreativität in naturwissenscha ftlichen Unterrichtsfächern...............................................20  2.7.1 Mathematik ............................................................................................................... ...20  2.7.2 Physik................................................................................................................... ........22  2.7.3 Chemie ................................................................................................................... ......22  2.7.4 Science Education........................................................................................................ 23  2.8 Zusammenfassung und Bewertung...................................................................................23  3 Kreativität in der Informatik .................................................................................................. ...25  3.1 Fach-Per spektive ........................................................................................................... ...25  3.1.1 Standpunkte zur Kreativität in der Informatik .............................................................26  3.1.2 Kreative Persönlichkeiten der Informatik ....................................................................28 3.1.3 Kreativität in der Softwareentwicklung .......................................................................29 3.1.4 Das Bausteinprinzip in der Inform atik als Katalysator für Kreativität ........................33  3.1.5 Innovationen der Informatik ........................................................................................34  3.2 Mensch-Perspektive ......................................................................................................... 35  3.3 Kunst-Perspektive .......................................................................................................... ..36  3.3.1 Informatiker als Künstler .............................................................................................37 3.3.2 Künstler als Informatiker .............................................................................................40 3.3.3 Symbiose von Informatik und Kunst ...........................................................................42 3.3.4 Kritik ................................................................................................................... .........42  3.4 Technologie-Perspektive ..................................................................................................43   3.5 Artifizielle Kreativität ................................................................................................... ...45  3.6 Situierung der Sichtweisen im Informatikunterricht ........................................................46       4 Kreativität in der informatischen Bildung ............................................................................... 48   4.1 Zur Wahrnehmung von Kreativität in der Informatik durch Schüler .............................. 48  4.2 Kreativität in der Forschung zur informatischen Bildung ............................................... 49 4.3 Verwandte Ansätze und Projekte kreativen Lernens....................................................... 52 4.4 Herausforderungen als kreativer Zugang zu Problemen.................................................. 54 4.4.1 Informatik-Lernen hat sich verändert.......................................................................... 54  4.4.2 Probleme des Problemlöseansatzes in der Praxis........................................................ 55  4.4.3 Ansätze zur Bewältigung der Probleme des Problemlösens ....................................... 56 4.4.4 Der Challenge-Cycle ................................................................................................... 57 4.4.5 Schlussfolgerungen ..................................................................................................... 59   5 Faktorenmodell kreativen Lernen s im Informatikunterricht ................................................ 60   5.1 Faktoren aus der Perspek tive der Kreativitätsforschung ................................................. 60  5.2 Faktoren aus der Pers pektive der Informatik................................................................... 61  5.3 Entwicklung des Faktorenmodells................................................................................... 62 5.4 Fazit ...................................................................................................................... ........... 64  6 Untersuchungen zum Faktorenmodell...................................................................................... 66   6.1 Kreativität in Biographien von Studienanfängern der Informatik ................................... 66 6.1.1 Biographien der Computernutzung ............................................................................. 66  6.1.2 Forschungsfragen der Untersuchung........................................................................... 67 6.1.3 Analysev erfahren ........................................................................................................ 6 7  6.1.4 Ergebnisse ............................................................................................................... .... 69  6.1.5 Schlussfolgerungen ..................................................................................................... 71   6.2 Kreativitätsverständnis und Erfa hrungen von Informatikstudenten ................................ 72  6.3 Kreativität in der Schulinformatik aus Schülersicht ........................................................ 73 6.3.1 Ziel der Untersuchung................................................................................................. 73 6.3.2 Methode.................................................................................................................. ..... 74  6.3.3 Ergebnisse ............................................................................................................... .... 74  6.3.4 Fazit.................................................................................................................... ......... 76  6.4 Sichtweisen und Erfahrungen von Refe rendaren und Lehramtsstudierenden ................. 76  6.4.1 Ergebnisse ............................................................................................................... .... 77  6.4.2 Diskussion ............................................................................................................... .... 78  6.5 Fazit der Untersuchung des Faktorenmodells.................................................................. 79  7 Kriterien kreativen In formatikunterrichts .............................................................................. 80   7.1 Berücksichtigung der Fach-Dimension ........................................................................... 80  7.2 Berücksichtigung der Schüler-Dimension....................................................................... 82 7.3 Anforderungen an die Unterrichtsumgebung .................................................................. 82 7.4 Kreativität in Unterrichtsbeispielen der Informatik......................................................... 83 7.4.1 Zum Vorgehen............................................................................................................. 83  7.4.2 Kriterien der Fach-Dimension..................................................................................... 84  7.4.3 Kriterien der Schüler-Dimension ................................................................................ 84 7.4.4 Kriterien der Unterrichtsumgebung............................................................................. 85 7.4.5 Fazit.................................................................................................................... ......... 85     8 Anwendung in einem Un terrichtsbeispiel .................................................................................86   8.1 Überlegungen zur Einführung in die Programmierung ....................................................86  8.2 Ein kreativer Einstieg in die Programmierung .................................................................87  9 Evaluation des Unterrichtsbeispiels...........................................................................................8 9  9.1 Auswertung der Unterrichtssequenz.................................................................................89  9.1.1 Zum Vorgehen ............................................................................................................. 89  9.1.2 Datenerhebung ............................................................................................................ .89  9.1.3 Ergebnisse ............................................................................................................... .....90  9.1.4 Kritische Betrachtung ..................................................................................................94   9.2 Untersuchung zum Verständnis von Kreativität in der Informatik ..................................94  9.2.1 Datenerhebung und Analyse ........................................................................................95  9.2.2 Ergebnisse ............................................................................................................... .....96  9.2.3 Diskussion............................................................................................................... .....98  9.3 Fazit...................................................................................................................... ............98  10 Zusammenfassung, Diskussion und Ausblick.........................................................................100   10.1 Zusammenfassung..........................................................................................................1 00  10.2 Diskussion ................................................................................................................ ......101  10.3 Ausblick .................................................................................................................. .......103  10.4 Fazit..................................................................................................................... ...........104  A Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung....................................105   B Fragebogen zur Unterrichtserprobung ...................................................................................118   C Lernerfolgskontrolle: Algorit hmen und Programmierung ...................................................120   D Arbeitsblatt zur Untersuchung des Verständnisses von Kreativität ....................................123   E Bildungsstandards kreativ erreichen – ein Un terrichtskonzept für die Sekundarstufe I...125   F Student Teachers’ Beliefs  about Creativity.............................................................................127   Literaturverzeichnis........................................................................................................... ................136   Abbildungsverzeichnis.......................................................................................................... .............153      Einleitung 1    1 Einleitung   1.1 Ausgangslage  Die Vorstellung ist nicht neu, dass wir unsere Schül er auf das Leben in einer sich verändernden  Gesellschaft vorbereiten müssen, die immer mehr durch Informationsund Kommunikationstech-nologien (IKT) beeinflusst wird und in der d as verfügbare Wissen explodiert. Seit den 1990er  Jahren wird diese neue Gesellschaft auch als Wi ssensgesellschaft bezeichnet. Vor diesem Hintergrund etablierte sich eine neue Vorstellung vom Lernen: das lebenslange Lernen. Viele Wissenschaftler setzen sich inzwisch en damit auseinander und publizieren Ideen, wie die Schule diesen  geänderten Anforderungen gerecht werden kann.  Kreativität scheint in der Diskussion eine  Schlüsselrolle zuzukommen. So verdeutlicht Resn ick (2007b), dass Erfolg heutzutage nicht nur  davon abhängt, was oder wie viel jemand weiß, sonde rn vor allem davon, ob er  in der Lage ist,  kreativ zu denken und zu handeln. Vor diesem Hint ergrund nennt er die heutige Gesellschaft eine  Creative Society.   Auch von deutschen Bildungspolitikern und Vertre tern der Wirtschaft wird seit vielen Jahren  gefordert, Schüler in allgemeinbildenden Schul en kreativer auszubilden; ein vorherrschender,  zumeist auf konvergente Lösungsstrategien ausgeric hteter Unterricht bereite die Schüler nicht  ausreichend auf die späteren Anforderungen vor (vgl. Geser 1999).   Mit der Informatik existiert ein Unterrichtsf ach, dem kreative Prozesse immanent sind und welches nicht nur durch die Anwendung von, sondern insbesondere durch die Auseinandersetzung mit kreativen Prozessen, z. B. Modellierungstäti gkeiten, die Anwendung von Kreativität notwendig  macht und fördert. Der besondere Beitrag der Info rmatik liegt hierbei nicht in einer weiteren  kreativitätsfördernden Maßnahme, sondern in de r spezifischen Ausprägung, in welcher kreative  Handlungsformen in Denkprozesse integriert werd en und somit von Schülern in ihren Handlungsweisen zu eigen gemacht werden können. Darübe r hinaus eröffnen die Werkzeuge und Methoden  der Informatik nicht nur Spezialisten der Informa tik, sondern auch Laien vielfältige Möglichkeiten  der kreativen Betätigung. Die kreative Beschäftigung m it Informatik an sich scheint nach eigenen  Beobachtungen ein Grund für viele Schüler zu sei n, sich überhaupt der Informatik zuzuwenden.  Leider spiegelt sich diese Sichtweise der Informa tik bisher in der Didaktik der Informatik kaum  wider und wird damit vielen Schülern im Inform atikunterricht kaum deutlich. So reflektieren  Informatikcurricula und die Wahrnehmung von Inform atik in der Öffentlichkeit eher selten das  kreative Potential der Informatik. Stattdessen wird  sie häufig als technisch, unkommunikativ und  unkreativ angesehen.  Auch zu selten scheinen sich Informatiker und In formatiklehrer darüber Gedanken zu machen, was  Kreativität in der Informatik eigentlich bedeutet und ausmacht. Fehlendes Wissen darüber, welche  Entscheidungen und Methoden Schüler motivieren und befähigen, kreativ zu sein, kann aber  Unsicherheit oder gar das Gegenteil von Kreativität bewirken.   1.2 Stellenwert der Kreativität in der Informatikdidaktik  Betrachtet man die Veröffentlichungen und Themen de r deutschen Fachdidaktik, scheint Kreativität keinen besonderen Stellenwert zu besitzen – es existieren bis dato nahezu keine Veröffentlichungen im Themenbereich. Vor dem Hint ergrund des populären Gebrauchs des Wortes Kreativität und dem Stellenwert als übergeordnetes Lernzi el in der Schule wird Kreativität allerdings  gelegentlich erwähnt – meist im Zusammenhang mit Wünschen oder Forderungen. Eine systematische Betrachtung existiert jedoch nicht.  Dennoch können in verschieden Arbeiten auch Aussagen zur Kreativität gefunden werden. Es  bleibt allerdings zu beachten, dass, wenn au f Kreativität Bezug genommen wird, dies häufig  oberflächlich und ohne Berücksichtigung der psychologisch-didaktischen Hintergründe geschieht.  Schubert und Schwill (2004) unter streichen die Notwendigkeit v on Kreativität beim informatischen Modellieren: 2  Einleitung    Es bestehen Missverständnisse über die kreativen Anforderungen, die der Mensch beim informatischen Modellieren und bei der rechnerverarbeitbaren Darste llung solcher Modelle erfüllen muss. Man nahm an, der kreative Spielraum des Menschen würde du rch die Informatik  stark eingeschränkt. Gezeigt hat sich, dass d er Entwurf von Algorithmen und Datenstrukturen  eine anspruchsvolle geistige Tätigkeit ist. (S. 108)  Kreatives Denken wird als Teil der kognitiven Leis tungen im informatischen Problemlöseprozess  beschrieben; auf die erwähnten kreativen Anforderungen  wird allerdings nicht weiter eingegangen.  Darüber hinaus wird Kreativität an verschiedene n Stellen erwähnt, aber nicht weiter erläutert:  Mit [der Top-Down-Methode] folgt man den kognitiven Empfehlungen für das Problemlösen  und entwickelt persönliche Kreativität. (S. 109)  Der Zusammenhang mit Kreativität wird an dieser Stelle nicht deutlich, zumal kreative Ansätze  auch häufig induktiven bzw. Bottom-Up-Ansätzen folgen.  Schwer nachvollziehbar ist, wie die „ Reduzierung der Planungsentscheidung durch Empfehlung  einer Verfahrensheuristik“  mit „Kreativität und Disziplin“ in Einklang zu bringen sind (S.113).  Die Beschreibung ist auch insofern  problematisch, als Kreativität und Disziplin in verschiedenen  Auffassungen von Kreativität eine Dichotomie darste llen, die nicht trivial aufzulösen ist (vgl.  Glass 2006).  Im Weiteren betonen Schu bert und Schwill die motivierende Wirkung kreativer Tätigkeiten im  Informatikunterricht:  Das konstruktive Element der Informatiklös ung bringt stark motivierende Wirkung in den  Lernprozess. Die Schüler besitzen fast g renzenlose Modellierungsmöglichkeiten. [...]  Die Tatsache, dass stets mehrere originelle und korrekte Lösungen gefunden werden können,  die nicht mit der des Lehrers übereinstimmen mü ssen, erhöht bei kreativen Schülern die Freude am Experimentieren. (S. 114)   Hubwieser (2000) zählt die Förderung von Kreativitä t sogar zu den „wichtigsten Zielen“ des  Informatikunterrichts. Dennoch findet sich nur wenig Substanz in der Verwendung des Kreativitätsbegriffs. So wird Kreativität zwar häufig er wähnt, führt aber vor dem Hintergrund nicht näher  erklärter Annahmen zu fragwürdigen Schlussfolge rungen, welche vor alle m in den „Praxistipps“  deutlich werden (S. 18):   „Förderung von Kreativität heißt vor allem Förderung von Aktivität.“  Diese Annahme ist trügerisch. Aktivität ist zwar ei ne notwendige, aber nich t hinreichende Bedingung kreativen Lernens. Ein Blick in verschie dene Lehrbücher und Unterrichtssequenzen zeigt,  wie diese Auffassung häufig falsch verstanden wi rd. So führen das Handeln nach vorgegebenen  Mustern oder das Lösen von Problemen in eng vor gegebenen Kontexten und Verfahren nicht zu  mehr Kreativität, sondern häufig zum Gegenteil.  „Kreativität kann in einer fest vorgeplanten  Umgebung nicht gedeihen, ein gewisser chaotischer Bereich ist unabdingbar (partielle Ordnungsstrukturen).“  Dieses Argument wird leider häufig als Ent schuldigung gebraucht, warum im regulären Unterrichtskontext Kreativität nicht berücksichtigt wird . Dabei ist auch in einem vorgeplanten unterrichtlichen Rahmen Kreativität möglich, ja das Einplanen kreativer Phasen durch die Lehrperson  sogar angebracht, wünschenswert und kann durch  die Gestaltung einer kreativitätsfördernden  Umgebung unterstützt werden. Ebenso muss Se lbstbestimmung in der Arbeit der Schüler  (= eigenes Organisieren) nicht organisatorisches Chaos bedeuten. Im Gegenteil, Studien weisen  darauf hin, dass geordnete, aber anregende und tolerante Umgebungen Kreativität begünstigen  (vgl. Starko 2001).  „Indirekter Lehrereinfluss fördert die Kreativität.“  Dieser Praxistipp ist insofern richtig, als direkter Lehrereinfluss für kreatives Denken und Arbeiten  hinderlich ist. Dies kann allerdings auch für indire kten Lehrereinfluss zutreffen. Lässt der Lehrer  Einleitung 3    Freiraum für freies Arbeiten, erwartet aber letz tendlich ein funktionales Ergebnis, wird indirekt  Druck oder Kontrolle ausgeübt und die Entf altung von Kreativität nur schwer gelingen.   „Stillarbeit, Schülervorträge oder Gruppe narbeit sind angemessene Arbeitsformen.“  Kreatives Arbeiten bedeutet Ideen zu kommunizier en, anzuwenden und zu reflektieren. Dabei ist  vor allem ein kommunikatives, nicht konkurrier endes, sondern gemeinsam anregendes Unterrichtsklima von Vorteil. Die klassische Stillarbe it, bei welcher der Lehrer anfangs Aufgaben  austeilt und anschließend kontrolliert, lässt dagege n nur bedingt Kreativität zu. Auch Schülervorträge können – inhaltlich – nur begrenzt kreativ sein, zumal hier meist vorgegebenes Wissen wiedergegeben wird.   Auch Schulte (2003) hält es für wichtig, Kreativ ität in den Unterrichtskontext einzubinden. Im  life 3-Unterrichtskonzept werden Projekte unter ande rem auch deshalb als bevorzugte Unterrichtsmethodik vorgeschlagen.  Projekte erlauben es, die Kreativität und Gestaltungsideen der Schülerinnen und Schüler einzubinden, sie eigene Gestaltungserfahrungen mach en zu lassen und deutlich werden zu lassen,  dass unterschiedliche Entwürfe de nkbar sind und je nach Ziel unterschiedliche Aspekte einer  Situation modelliert werden müssen.  (S. 53)   So wurde das life3-Phasenmodell u. a. mit dem Ziel entw ickelt, dass Softwareentwicklung, insbesondere informatisches Modellieren, Schül ern als kreativer Prozess deutlich wird:  Modellieren bedeutet mehr als das Notieren ei ner Lösung. Es gibt keine universell anwendbaren Idealrezepte, sondern situ ierte Lösungen und Heuristiken.  (S. 174)   Des Weiteren unterstreicht Schulte (2001) krea tive Problemfindungsprozesse in der objektorientierten Analyse als Chance der Objektorientier ung für einen besseren Informatikunterricht.   Laut Modrow (2002) herrscht „Einigkeit [...] weitgehend darüber, dass der Informatikunterricht  die Kreativität der Schülerinnen und Schüler stärken [...] soll.“  (S. 58)  Als Konsequenz dessen sollten die Schüler zu mindest phasenweise Probleme analysieren und  modellieren sowie die Modelle implementieren und testen.   Thomas (2002) erwähnt eine „Stärkung des ‚Schüler-Ichs’ du rch die kreative und stark selbstbestimmte Konstruktion von informatischen Produk ten, an denen sich Erfolg und Misserfolg unmittelbar erfahren lässt [...].“ (S. 6)  Weiterhin führt er aus, dass dieser Aspekt im  Rahmen der Allgemeinbildungsdiskussion zum  Informatikunterricht allerdings selten erwähnt wird . Schließlich stellt Thomas fest, dass informatisches Modellieren Schüler zu kreativ en Tätigkeiten befähigen kann:  Nicht zuletzt bietet das Modellieren von inform atischen Modellen dem Schüler die Möglichkeit  kreative Lösungen zu Problemen zu entwickel n, diese zu realisieren und zu überprüfen.  (S. 71)   Diethelm (2007) berichtet, dass bei der objektorientierten Modellierung eine „realitätsnahe  Herangehensweise [...] auf die Schüler extrem motivierend und Kreativität fördernd [wirkt].“   (S. 116)  Diese erreicht sie z. B. durch ein kleines I ndustriepraktikum mit Lego Mindstorms-Robotern. Aus  ihren Erfahrungen mit dem Tool Fujaba  berichtet Diethelm allerdings, dass dieses aufgrund  mangelnder Intuitivität die Schüler in ihrer Kreativ ität gehemmt hat. Sie regt an, Kriterien für  Lernumgebungen und IDEs zu entw ickeln, die gelten müssen, um die Kreativität der Schüler zu  fördern.   Immer wieder wurde Kreativ ität auch für den Informatikunterrich t gefordert. So empfahl Friedrich  (1995) schon vor 13 Jahren, Kreativität als Kriter ium für die Auswahl von Unterrichtsthemen zu  berücksichtigen, indem diese „Möglichkeiten zur selbständigen kreativ-forschenden Erarbeitung  der Problemlösung bieten.“    Auch die Gesellschaft für Informatik e.V. (GI) verweist bereits in frühen Empfehlungen für den  Informatikunterricht in der Sekundarstufe II auf d as Potential, das kreatives Gestalten in der 4  Einleitung    Informatik für die Förderung schöpferischen Denkens bietet (GI 1993). Beispielhaft werden  sprachliche und graphische Gesta ltung und Modellierung angegeben.  Vor diesem Hintergrund bleibt es erstaunlich, d ass es so wenige Publikationen im Bereich der  Didaktik der Informatik gibt, die sich mit Krea tivität im Informatikunterricht beschäftigen. Sucht  man nach einer expliziten Thematisierung von Krea tivität in der deutschen Fachzeitschrift zum  Ideenaustausch von Informatiklehrern LOG IN, finde t sich wenig. Allein in einem Heft aus dem  Jahr 1995 wurde Kreativität im Zusammenhang mit dem Computer als Werkzeug zur Musikoder  Textgenerierung thematisiert. Die informatikspezi fischen Möglichkeiten kr eativen Tuns wurden  dabei nicht berücksichtigt. Mangelndes Bewusstsei n für kreative Unterrichtsphasen spiegelt sich  auch in den in der LOG IN vorgeschlagenen Un terrichtssequenzen wider. Betrachtet man diese  unter dem Aspekt kreativer Schülertätigkeiten, rä umen nur wenige der vorgestellten Unterrichtsskizzen kreativen Handlungen explizit Raum ein. M itunter wird sogar gefürchtet, dass Schüler  „ihre Kreativität zu viel spielen lassen“  (Janneck 2006, S. 65). Tatsächlich sind unkreative  Schüler im Unterricht für den Lehr er „handlicher“ als kreative Sc hüler (vgl. Westby und Dawson  1995; Sternberg und Lubart 1991), so dass Kreativitä t mitunter im Unterricht sogar unerwünscht  ist.   1.3 Ziele   Die (leider noch zu selten geführte) Diskussion und Thematisierung von Kreativität in der Informatik und im Bezug auf den Informatikunterricht e rfolgt bisher in der Regel unscharf, vorurteilsbehaftet, unreflektiert und teilweise wissenschaft lich unkorrekt oder unbegründet. Ziel dieser  Arbeit ist es, die Diskussion auf eine wissenschaf tliche Grundlage zu stellen, d. h. das Phänomen1  der Kreativität im Informatikunterricht, und damit auch in der Informatik, zu konkretisieren, zu  systematisieren, Vorteile und el ementare Aspekte für den Inform atikunterricht sowie bestimmende  Merkmale herauszuarbeiten, zu opera tionalisieren sowie zu überprüfen.  Aus diesem Vorhaben ergeben si ch folgende zentrale Fragen:  1. Welches Verständnis von Kreativität sollte aus Si cht der Fachdidaktik Informatik verwendet werden?   2. Wie manifestiert sich Kreativität in der Info rmatik bzw. im Informatikunterricht und welche Chancen ergeben sich daraus?  3. Wie muss Informatikunterricht gestaltet werden , damit er das Potential, das Kreativität  zugesprochen wird, nutzt und fördert?  4. Welche Auswirkungen hat die explizite Berü cksichtigung von Kreativität im Informatikunterricht auf das Lernerlebnis und den Lernerfolg?   Ziele der Arbeit sind damit weniger inhaltliche Fragen  (die meiner Ansicht nach bereits an anderen  Stellen ausgiebig diskutiert werden), sondern Fragen der Methodik, Unterrichtsorganisation und  Thematik.  1.4 Struktur der Arbeit  Das komplexe Phänomen der Kreativität als Grundlage dieser Arbeit bedarf einer Aufarbeitung  der Erkenntnisse der Kreativitätsforschung, der Klärung des Begriffs Kreativität  und einer Einschätzung und Beurteilung aus informatikdidaktisch er Sicht. Diese Diskussion wird in Kapitel 2  geführt. Insbesondere werden hierbei die ver schiedenen Sichtweisen und Definitionsversuche  erörtert, da sie maßgeblich di e Vorstellungen von Kreativität präg en und für die Herausarbeitung  eines Kreativitätsverständnisses für den Informatikunterricht grundlegend sind. Des Weiteren  werden Forschungserkenntnisse zur Förderung und v on Einflussfaktoren von Kreativität betrachtet  sowie die Rolle von Kreativität in den Lernwissensc haften und in der Schule herausgearbeitet. Zur                                                         1 Vor dem Hintergrund, dass Kreativität im Informatikunterricht zwar au ftritt, allerdings bisher noch nicht charakterisiert  und hinterfragt wurde, kann von einem Phänomen gesprochen werden.   Einleitung 5    Orientierung erfolgt eine Aufarbeitung der Be mühungen anderer Fachdidaktiken, Kreativität in  den naturwissenschaftlichen Un terricht zu integrieren.  Kapitel 3 ordnet die Diskussion zur Kreativität i nnerhalb der Informatik und schafft mit Hilfe  verschiedener Sichtweisen eine Diskussionsgrundl age. Anhand der verschiedenen Verständnisse  von Kreativität in der Informatik wird die Bede utung von Kreativität in der Informatik verdeutlicht. Darüber hinaus wird auf die Frage eingega ngen, welches Potential Kreativität für die Informatik bietet und welche Konsequenzen für den Informatikunterricht daraus erwachsen.   Nach Klärung dieser Hintergründe erfolgt in Ka pitel 4 eine Betrachtung von Kreativität in der  informatischen Bildung, insbesondere der inte rnationalen Forschung zur Informatikdidaktik.  Hierbei soll geklärt werden, welche Lösungsansät ze es für die Integration von Kreativität in der  informatischen Bildung gibt und welche Erfa hrungen und Ergebnisse damit erzielt wurden. Das  Kapitel schließt mit einer Analyse der Frage, wa rum Kreativität bisher im Informatikunterricht,  v. a. beim Problemlösen, nur wenig Berücksi chtigung findet, und einem Vorschlag, wie dies  geändert werden könnte.  Vor dem Hintergrund der theoretischen Grundlagen  der Kreativitätsforschung, der Analyse der  Kreativität in der Informatik und der didaktischen  Forschung werden in Kapitel 5 die herausgearbeiteten Faktoren von Kreativität in der Informa tik in einem Faktorenmodell integriert, welches  das Phänomen der Kreativität im Informatikunte rricht zugänglich, greifbar und überprüfbar  machen soll sowie als Grundlage für die Planung und Durchführung von kreativem Informatikun-terricht dienen kann.  Eine Überprüfung des Faktorenmodells mittels verschiedener empirischer Studien erfolgt in  Kapitel 6. Untersucht werden Computernutz ungsbiographien von Studi enanfängern, Äußerungen  eines herausragend kreativen Informatikschüler s sowie die Vorstellungen und Erfahrungen von  Studienreferendaren und Lehram tsstudenten der Informatik hinsichtlich Kreativität.   In Kapitel 7 wird das Faktorenmodell durch Krite rien kreativen Informatikunterrichts operationalisiert. Die Kriterien werden anschließend herang ezogen, um in einer empirischen Untersuchung  den Stellenwert von Kreativität in publiziert en Unterrichtsvorschlägen festzustellen.  In den Kapiteln 8 und 9 wird zur Verdeutlichung d es Modells und der Kriterien ein Unterrichtsbeispiel vorgestellt, erprobt und dabei untersucht, wie sich eine kreative Unterrichtssequenz zur  Einführung in die Programmierung auf die Schül er, deren Bild von der Informatik und deren  Leistungen auswirkt.   In Kapitel 10 erfolgt eine abschließende Dis kussion und Bewertung der Ergebnisse, eine Einordnung in den aktuellen Forschungsstand sowie ein Ausblick. 6  Kreativität    2 Kreativität   Do something creative every day! 2    Kreativität ist vielleicht einer der am kontrover sesten diskutierten Unte rsuchungsgegenstände der  Psychologie und zugleich ein im allgemeinen Sp rachgebrauch häufig und recht unbekümmert  verwendeter Begriff.3 Die wissenschaftliche Untersuchung von Kreativität grenzt sich teilweise  deutlich vom alltäglichen Sprachgebrauch ab. In  diesem Kapitel werden die Entwicklung und der  aktuelle Stand der Kreativitätsforschung überblicks weise dargestellt. Hier zu werden zunächst  wissenschaftliche Ansätze der Kreativitätsforschung erörtert, verschiedene  Definitionsversuche  kontrastiert, eine eigene, für diese Arbeit zu ve rwendende Definition hera usgearbeitet sowie die  Rolle der Kreativität in den Lernwissenschaften und in der Schule betrachtet. Erste Implikationen  für den Informatikunterricht werden verdeutlicht.   2.1 Wissenschaftliche Forschungs ansätze zur K reativität   2.1.1 Entwicklung  Die wissenschaftliche Untersuchung de r Kreativität ist noch relativ jung.4 Dennoch hat sie eine  Vielzahl unterschiedlicher Ansätze und Sichtweisen hervorgebracht, aber auch viele Fragen noch  nicht klären können (vgl. Mumford 2003). Eine erste systematische Studie zur Kreativität wurde  von Galton (1869) im Rahmen seiner Untersuchunge n über Genies durchgeführt. Alsbald wendete  sich die psychologische Forschung allerdings überwiegend der Intelligenz als Gegenstand des  Forschungsinteresses zu; Kreativität wurde als Teil  intelligenten Denkens verstanden. Die frühe  Kreativitätsforschung Anfang des 20. Jh. kann gru ndsätzlich in vier verschiedene Traditionen  zusammengefasst werden (vgl. Craft 2001):  Die psychoanalytische Tradition:    Kreativität als Trieb und zentrales in trinsisches Element des Menschen.  Die behavioristische Tradition:   Kreatives Verhalten als Reaktion auf spezielle Stimuli.  Die humanistische Tradition:   Kreativität als Teil der Selbstverwirklichung des Me nschen mit dem Ziel, mit inneren Bedürfnissen und Potentialen im Einklang zu stehen.  Die kognitive Tradition:   Kreativität als Resultat assoziativ er Prozesse und divergentem Denken.  Im Wesentlichen war diese frühe Forschung von phi losophischer Spekulation geprägt; sie findet  sich aber partiell auch in modernen Sichtweisen wieder.  Einen deutlichen Schub erf uhr die Kreativitätsforschung5 in den 1950er Jahren. Joy Paul Guilford  forderte in seiner Antrittsrede als Präsident der American Psychological Association  eine verstärkte Betrachtung und Analyse divergenter Denkprozesse,  welche er erstmals als Kreativität bezeichnete (Guilford 1950). Vor dem Hintergrund des Sputnikschocks6 1957 wurden zahlreiche Förderprogramme aufgelegt und die Forschung zur Kreativität intensiviert.   Trotz dieser vorübergehenden Intensivierung der Kreativitätsforschung trat alsbald Ernüchterung  ein. So stellten die Forscher fest, dass die Vari ablen der Kreativität nur schwer zu fassen und nicht                                                         2 Werbeslogan eines Pa pier-/Bastelwaren-Kette in den USA, http://www.paper-source.com.  3 Nicht zuletzt kann Kreativität auch als Mode wort verstanden werden (vgl. Hentig 2000).  4 Die systematische Untersuchung be gann im Wesentlichen mit der 2. Hälfte des 20. Jahrhunderts.  5 Vor allem in den USA.  6 Durch den Start des ersten künstlichen Satelliten demonstrierte die Sowjetuni on ihre technologischen Fähigkeiten.  Kreativität 7    isoliert zu betrachten sind. Infolgedessen blie b Kreativität ein über lange Zeit ignoriertes Forschungsthema.7 Auch in Überblicksoder Einführungswe rken der Psychologie ist Kreativität nur  marginal beschrieben.8 Eine Ursache dafür könnte sein, dass Kreativität kaum in eine psychologische Tradition einzuordnen ist und verschiedene Teil gebiete der Psychologie, wie Persönlichkeits-,  Entwicklungs-, Sozialund Kognitive Psychologie, berührt. Vor dem Hintergrund eines unklaren und mehrdeutigen Kreativitätsbegriffs und untersch iedlichen Vorannahmen über kreatives Verhalten haben sich vielfältige Sichtweisen in der Kr eativitätsforschung herausgebildet, die sich in  unterschiedlichen Forschungsstrategien, Bezug ssystemen und Kommunikationsformen äußern.  Eine häufig angewandte Möglichkeit, die unter schiedlichen Forschungsan sätze zu charakterisieren, ist das 4-P-Modell, welches in Abschnitt 2.1. 2 dargestellt wird. Hier wird der Fokus auf die  unterschiedlichen Aspekte von Kreativität gelegt: die kreative Person, der kreative Prozess, das  kreative Produkt und das kreative Umfeld (engl.: Press). Andere Sichtweisen berücksichtigen den  Ursprung oder verschiedene Ausprägungen der Kr eativität. Diese Sichtweisen werden in den  Abschnitten 2.1.3 und 2.1.4 charakterisiert.   2.1.2 Das 4-P-Modell  Die Einteilung der Kreativitätsfaktoren hinsich tlich der „4 P“ wird Rhodes (1961) zugeschrieben  und stellt die vier Faktoren da, die Kreativität maßgeblich beeinflussen sollen.  Die kreative Persönlichkeit  Ziel dieses Strangs der Kreativitätsforschung ist es,  Persönlichkeitsmerkmale zu bestimmen, an  denen kreative Personen erkannt u nd damit auch gefördert werden  können. Darüber hinausgehende Überlegungen ziehen die allgemeine Förder ung dieser Persönlichkeitsmerkmale in Erwägung.  Trotz teilweise deutlich unterschiedlicher For schungsergebnisse aufgrund verschiedener Voraussetzungen, können einige Merkmale kreativer  Persönlichkeiten übere instimmend angegeben  werden:  Hohe Motivation, die Ausdauer und Bereitschaf t, Hindernisse zu überwinden, intellektuelle  Neugier und Offenheit für neue Erfahrungen, st arker Einsatz, Nonkonformismus, Unabhängigkeit  im Tun und Handeln, Toleranz fü r Unklarheiten, der Wille zu wachsen, Risikobereitschaft, der  Glaube an Überzeugungen, Selbstsicherheit sowie breit gefächerte Interessen (vgl. Craft 2001;  Sternberg und Lubart 1991; Funke 2000; Simonton 1999).  Kritisierend ist an diesen Ergebnissen zu erwä hnen, dass die Untersuchungen an geschichtlich  herausragend produktiven Persön lichkeiten vorgenommen wurden und damit nicht unmittelbar auf  „gewöhnliche“ Kreativität anwendbar sind (Craft 2001). Zudem liegt den Studien keine einheitliche Definition von Kreativität zugrunde. Nichtsde stotrotz können die identifizierten Persönlichkeitseigenschaften in einem kreativen Unterricht al s Orientierung dienen. Offenbar finden sich hier  auch Persönlichkeitsmerkmale wieder, die häufig Informatikern zugeschrieben werden, aber im  Schulkontext eher unerwünscht sind (z. B. Nonkonformismus).  Kreativitätsdiagnostik  „Vielleicht hat sich kein psychologisches Konzept al s so schwierig zu messen erwiesen, wie die  Kreativität“  (Krampen 1993). Guilford legte mit der Differenzierung des Denkprozesses in  konvergentes und divergentes Denken, wobei er le tzteres dem kreativen Denken zuordnete, die  Grundlage für eine empirische Kreativitätsfo rschung. Anhand einzelner und vergleichbarer  Faktoren von Kreativität entwickelte er ein Messi nstrument, mit welchem er kreative Leistungen                                                          7 Nur 0,5% aller Artikel, die zwischen 1975 und 1994 in psychologischen Fachzeitschriften veröffentlicht wurden,  behandeln das Thema (Sternberg, Pretz und Kaufman 2002).  8 So wird bspw. im fast 1000-seitigen Standartwerk der Psychologie von Zimbar do und Gerrig (2004) Kreativität nur auf  3 Seiten unter dem Oberthema „Intellige nz“ thematisiert, wobei Seiten 2 und 3 sich mit „außergewöhnlicher Kreativität und Wahnsinn“ beschäftigen. Selbst in verschiedenen Lehrbüchern zur Le rnpsychologie wird Kreativität kaum  berücksichtigt (z. B. Edelmann 1996; Lefrancois und Leppmann 1994). 8  Kreativität    von Personen zu erfassen versuchte. Ziel verschie dener Kreativitätstest ist es auch, das kreative  Potential von Personen zu bestimmen. Die Ar beiten von Guilford wurd en im Wesentlichen im  „Torrance Test of Creative Thinking“ (TTCT) weiterentwickelt (Torrance 1974). Kern des TTCT  ist das Messen unkonventioneller An tworten, also divergentem Denke n. Die Aufgaben bestehen in  der Regel aus der Beschreibung einfacher Situati onen und dem Auftrag, möglichst viele Ideen zu  äußern (siehe Abbildung 1).     Ungewöhnliche Verwendungen:  Liste möglichst viele intere ssante und ungewöhnliche Verwendungsmöglichkeiten für Pappkartons auf.  Stell dir vor , Wolken hätten Fäden angeheftet, die zu r Erde runterhängen. Was würde passieren?  Stelle so viele Ideen und Vermutungen auf, wie du kannst.  Verbesserung:  Lasse dir die cleversten, interessantesten  und ungewöhnlichsten Wege einfallen,  einen Plüsch-Spielzeugelefanten so zu verände rn, dass Kinder mehr Spaß beim Spielen damit  haben.  Abbildung 1: Aufgabenbeispiele aus dem TTCT  (Version kreatives Denken mit Worten).    Bestehend aus einem figuralen und einem verbalen  Test werden die zu testenden Personen mit  Aufgaben konfrontiert, in denen sie z. B. eine Geschichte weitererzählen, ein Spielzeug weiterentwickeln oder Figuren ergänzen sollen. Der Test  liefert Ergebnisse in de n Kategorien Flüssigkeit  (Anzahl der Antworten), Flexibilität (Anzahl der ve rschiedenen Antwortkate gorien) und Originalität (statistische Seltenheit der Antwort)9.   Validität und Reliabilität von Kreativitätstests sind allerdings umstritten (vgl. Baer 1994a, b;  Cropley 2000; Mumford 2003; Mumford, Marks et al. 1998; Seiffge-Krenke 1974). So werden zum einen auch Faktoren getestet, die eher auf die Intelligenz des Probanden zurückzuführen sind.  Zum anderen ist es generell fraglich, ob sich Kreativ ität mittels eines Tests erfassen lässt. Kreative  Leistungen sind, im Gegensatz zu anderen kogn itiven Leistungen, stark von Umgebungsfaktoren  abhängig. So können sich bspw. Stress und Zeitdruck in einer Testsituation negativ auf das  Testergebnis auswirken. Ein gutes Abschneiden in einem Kreativitätstest bedeutet in der Regel  eben nicht, dass auch außerhalb des Tests schöpferische Tätigkeiten ausgeführt werden.   Dennoch wird an neueren Testentwicklungen gearbe itet, welche Kreativität in einen größeren  Zusammenhang als nur kreatives Denken oder kreativ es Produzieren stellen,  weitere Persönlichkeitsmerkmale testen und damit vielversprechender erscheinen (vgl. Cropley 2000).   Der kreative Prozess  Eines der ersten und verbreitetsten Modelle d es kreativen Prozesses stammt von Wallas (1926).  Nach diesem Modell werden beim kreativen De nken vier Phasen durchlaufen: Vorbereitung,  Inkubation, Illumination (als zentrales Ereignis) und die Verifikation des Ergebnisses. 10 Im  Folgenden wurden verschiedenste  weitere Modelle vorgeschlagen, welche sich zwar grundsätzlich  ähneln, aber unterschiedliche Schwerpunkte setzen . So argumentiert Lubart (2000), dass das  klassische 4-Phasenmodell nicht ausreicht, um di e Komplexität des kreativen Prozesses abzubilden. Osborn (1953) identifiziert zu Beginn des kr eativen Prozesses eine Orientierungsphase, nach  der Vorbereitung eine Phase der Analyse sowie Ideation und das Generieren und Ausbreiten von  Alternativen. In der vorletzten Stufe erfolgt die Synthese der Lösung. Isaksen und Treffinger  (1985) legen ein Augenmerk bere its auf einen Schritt früher – das Finden eines Ziels oder Prob                                                       9 Hierzu enthalten die Auswertungsmaterialien Tabellen, in  welchen häufig genannte An tworten verzeichnet sind. Für  eine quantitative Testgesamt einschätzung enthält der Test eine Vergleichstabelle, welc he entsprechend einer empirisch bestimmten statistischen Einsch ätzung der Antworten im Verhältnis zu m Alter der Versuchsperson eine Art  „Kreativitätsquotienten“ ausgibt.  10 Vgl. auch Kapitel 2.1.3, die inspirationsorientierte Sichtweise.  Kreativität 9    lems. Koberg und Bagnall (1981) berücksichtigen zusät zlich die Situation, in welcher der kreative  Prozess stattfinden soll und machen deutlich, dass ein kreativer Prozess nur möglich ist, wenn sich  die Situation als herausfordernd darstellt.     Wallas Osborn Isaksen&Treffinger Koberg&Bagnall    Ziel finden     Fakten finden    Orientierung Problem finden Akzeptieren der Situation  Vorbereitung Vorbereitung     Analyse Ideen finden Analyse     Definition   Ideation  Ideation  Inkubation Inkubation Lösung finden   Illumination Illumination  Auswählen   Synthese  Implementation  Verifikation Evaluation  Evaluation    Akzeptanz finden   Abbildung 2: Modelle des kreati ven Prozesses im Vergleich.    Trotz der vielen verschiedenen Modelle für de n kreativen Prozess teilen diese eine Reihe von  Gemeinsamkeiten. Alle Modelle  berücksichtigen die Vorbereitung und Analyse von Umfeld und  Problem. Ein besonderes Augenmerk verdienen je ne Modelle, die über den Problemlöseprozess  hinausgehen. So berücksichtigen neuere Mode lle zunehmend ein syst ematisches Erzeugen von  Lösungsmöglichkeiten und ve rsuchen auch die Phase abzubilden, in welcher ein Ziel oder eine  Herausforderung gefunden wird. An ihnen wird deu tlich, dass das Finden eines interessanten Ziels,  welches sich als gewünschte Herausforderung da rstellt und somit auch die Motivation zur Bewältigung anregt, sowie das abschließende Vorste llen der Lösung wesentliche Bestandteile von  kreativen Prozessen sind.  Aus Sicht des Informatikunterrichts lassen sich  aus diesen Modellen wichtige Schlussfolgerungen  für das (kreative) Problemlösen in der Informatik ziehen. Hierauf wird in Kapitel 4 genauer  eingegangen.  Amabile (1996) berücksichtigt in ihrem Componential Model of Creativity  neben Motivation  weitere zusätzliche externe Einflüsse des kreativen  Prozess (vgl. Abbildung 3). Hierzu zählen die  soziale Umgebung, Fertigkeiten im Fachgebiet und kreativitätsrelevante Fertigkeiten. Dieses  Modell ist eines der wenigen empirisch überprüfte n Modelle (vgl. Conti, Coon und Amabile 1996)  und stellt damit eine gute Grundlage für die weitere  Betrachtung des kreativen Prozesses in dieser  Arbeit dar. Aus diesem Grund wird in Kapitel 3 Amabiles Modell bei der Betrachtung kreativer  Prozesse in der Softwareentwicklung zugrunde gelegt.  10  Kreativität     Abbildung 3: Amabiles Componential Model of  Creativity (zitiert nach Starko 2001).   Das kreative Produkt   Verschiedene Bemühungen in der Kreativitätsfo rschung legen ihren Schwerpunkt auf das Produkt  kreativer Prozesse. In der Regel kommt Kreativ ität erst an einem Produkt zur Geltung, welches  damit die Kreativität einer Pe rson Außenstehenden offenbart. Produkt  bezeichnet hierbei nicht nur  Artefakte, sondern auch Ideen, Lösungen, Theo rien und Leistungen. Der Vorteil dieser Betrachtungsweise für die Kreativitätsforschung liegt dari n, dass sich Produkte, insbesondere wenn sie als  Artefakte vorliegen, von mehreren Personen einsch ätzen und bewerten lass en. Da von einer Person  meist nicht nur ein Produkt existiert, können da mit auch unterschiedliche kreative Leistungen  charakterisiert werden. Zur Bewertung werden Neuheit, Qualität, Nütz lichkeit und ggf. Elaboration als Kriterien herangezogen. Dennoch ist es hins ichtlich dieser Kriterien schwierig, eine differenzierte oder gar quantitative  Wertung von Kreativität vorzunehmen, da das absolut Kreative  als  Bezugsmaß nicht existiert.  Sternberg, Pretz und Kaufman (2002) geben mit dem Propulsion Model of Creative Contributions   eine Taxonomie an, nach der sich kreative Produkt e bzgl. ihres Einflusses auf die Weiterentwicklung eines Fachgebiets einordnen lassen. Im Schulko ntext ist dieses Modell allerdings zu vernachlässigen, das hier keine Paradigma veränd ernden Innovationen zu erwarten sind.   Im TTCT wird die Originalität einer Antwort aufgru nd ihrer statistischen Seltenheit, aber nicht als  Ausmaß der Ungewöhnlichkeit, bewertet. Ein weiterer Gesichtspunkt, kreative Produkte zu  beurteilen, ist der Grad der Elabor ation. Allerdings fehlt auch hi er in der allgemeinen Betrachtung  ein Bezugsmaß.  Die Unterstützung von Originalität innerhalb einer Schulklasse (verschiedene Ideen) und elaborierten Lösungen (Detailgetreue) fördern einen kreativen Unterricht unter diesem Gesichtspunkt.  Das kreative Umfeld11   Nur einige Kreativitätsforscher berücksichtigen den Einfluss d es persönlichen oder soziokulturellen Umfelds auf Kreativität. Hier sind zwei Sich tweisen zu unterscheiden. Zum einen die Frage,  wann Kreativität erkannt und als solche attribui ert wird und welchen Restriktionen Kreativität                                                         11 Englisch: Press, auch Umwelt.  Kreativität 11    aufgrund gesellschaftlicher Vorstellungen und Normen  unterliegt (vgl. Sternberg 1988; Sternberg  und Lubart 1991; Csikszentmihalyi 1997). Auf diese situationsorientierte Sichtweise wird in  Abschnitt 2.1.3 eingegangen. Zum anderen inter essiert es vor allem Pädagogen, welche Anforderungen bei der Schaffung eines kreatvitätsförd ernden Umfelds zu beachten sind und welche  Einflussvariablen Kreativität unterstützen bzw. unterdrücken (vgl. Hennessey 2007; Greene 2002; Candy und Edmonds 2000). Da diese Variable n der Unterrichtsumge bung durch Lehrpersonen  gestaltbar sind, ist dieser Aspekt Inhalt der Be mühungen, Kreativität zu fördern, und wird in  diesem Zusammenhang erneut aufgegriffe n werden (vgl. Abschnitt 2.4).  2.1.3 Ursprungsorientierte Sichtweisen   Ist Kreativität ein Resultat des Zufalls, ein Produkt  harter Arbeit oder durch Umgebungsfaktoren  bedingt? Zur Beantwortung dieser Frage lassen  sich die Forschungsansätze hinsichtlich des  Ursprungs von Kreativität einordnen (vgl. Shneid erman 2000). Alle drei Sichtweisen stellen  grundlegende Aspekte von Kreativität dar, die gleichermaßen wichtig sind.   Inspirationsorientierte Sichtweise   Die inspirationsorientierte Sichtweise wird gut durch den Heureka!-Effekt 12 illustriert, bei welchem, scheinbar „aus heiterem Himme l“, ein großer Durchbruch gelingt, d. h. eine Lösung für ein  Problem gefunden wird. Kreativität ist demnach  das Ergebnis unbewusster Prozesse. Zu den  anekdotischen Belegen dieser Sichtweise wird u.  a. die Erfindung des Benzolrings durch Kekulé  angeführt. Nach eigenen Berichten sah Kekulé in einem Traum eine kreisförmig verwundene  Schlange, die ihn zur entscheidenden Idee führ te. Auch Poincaré berichtet von einem solchen  Moment bei der Erfindung der Fuchsschen Funktionen.  Nach langer, intensiver, aber erfolgloser  Arbeit an möglichen Lösungen kam ihm die entsch eidende Idee als er – vom Problem abgelenkt –  für eine Exkursion einen Bus bestieg. Solche Schilderungen sind es, die dem Begriff der Kreativität für Außenstehende das Mystische und Unerklär liche verleihen. Die beschriebene, plötzlich  einsetzende Erkenntnis wird als Illumination bezei chnet. Einig sind sich die meisten „Inspirationisten“, dass Vorbereitung für eine Inspiration essentiell ist. Wallas (1926) stellte die Illumination  als dritte Phase des kreativen Pro zesses dar, der eine intensive Vorbereitung (Präparation) und eine  Phase der Inkubation vorausgehen. Während der Präp aration wird ein zu lösendes Problem aktiv  im Bewusstsein erfasst und formuliert. In ei ner Inkubationsphase wird das Problem – vor allem  durch das Unterbewusstsein – weiter bearbeitet.  Nun kann es passieren, dass aus heiterem Himmel  die Erkenntnis zur Problemlösung eintritt, welc he anschließend nur noch ausgearbeitet werden  muss. Trotz der „magischen“ Komponente dieser Sich tweise sind sich Inspirationisten einig, dass  fast ausschließlich die Beschäftigung mit dem Probl em selbst für die Lösung verantwortlich ist.   Dieses Modell von Kreativität suggeriert, bei eine r Problembearbeitung aus bekannten Strukturen  auszubrechen, zwischendurch ganz andere Probl eme zu bearbeiten oder bspw. einen Spaziergang  zu machen. Kreativitätstechniken wie Brainstorming,  freies Assoziieren, divergentes und laterales  Denken (De Bono 1970) entstammen dieser Sichtweise.  Reicht es das Gehirn einfach „machen zu lassen “, ist es dann „am kreativsten“ (vgl. Spitzer 2008)?  Diese Annahme ist trügerisch. Das temporäre Abwe nden von einem Problem mag eine Illumination begünstigen, erzwingen lässt si e sich jedoch nicht. Eine der Grundvoraussetzungen bleibt die  intensive Beschäftigung mit dem Problem.  Strukturorientierte Sichtweise  Eine geordnete, strategische Herangehensweise an ein Problem kann ebenfalls zu kreativen  Leistungen führen. Grundlage ist das intensive Studium vorheriger Arbeiten zu einem Problem  sowie methodische Techniken, mit denen mögliche Lösungen systematisch und umfassend                                                         12 Entsprechend einer Anekdote soll Archimedes nach der zufälligen Entdeckung des Archimedischen Prinzips der  Hydrostatik laut „Heureka!“ rufe nd durch die Stadt gelaufen sein. 12  Kreativität    erkundet werden. Ein Modell zur systematisch en Lösung von Problemen stammt von Polya  (1945). Beim Lösen eines mathematischen Probl ems ist demnach vier Schritten zu folgen:   1. Verstehen des Problems  2. Erstellen eines Lösungsplans  3. Ausführen des Plans  4. Reflektieren des Ergebnisses und des Arbeitsprozesses   Hierbei können verschiedene Heuristiken verwe ndet werden, wie Analogienbildung, Generalisieren, Variieren und Spezialisiere n. Verschiedene Ansätze des Software Engineering können dieser  Sichtweise von Kreativität zugeordnet werden. Die Theorie des Erfinderischen Problemlösens (TRIZ) professionalisiert die systematische Hera ngehensweise an das Finden kreativer Problemlösungen mittels 40 innovativer Prinzipien (vgl. Orloff 2006). Es gibt Versuche, die TRIZ-Prinzipien  in der Informatik anzuwenden (Willms, Wentzlaff und Specker 2000).  Dem strukturorientierten Ansatz sind auch Weth s Kreativitätsroutinen zuzuordnen, mit denen  Schüler im Mathematikunterricht systematisch neuartige mathematische Begriffe schaffen und  erkunden (vgl. Weth 1999).  Situationsorientierte Sichtweise  Die situationsorientierte Sichtwiese berücksichtig t externe Einflussfaktoren kreativer Prozesse und  Leistungen. So stellen der soziale und intellekt uelle Kontext Schlüsselfaktoren im kreativen  Prozess dar (vgl. Csikszentmihalyi 1997). Kreativ ität ist damit variablen Standards unterworfen,  die durch Bezugspersonen und Gesellschaften besti mmt werden. Leistungen, die heute der Allgemeinheit oder Spezialisten nicht als kreativ erschei nen, können bereits eine Generation später als  hochkreativ empfunden werden – ein Schicksal, we lches einige Musiker, Maler und Wissenschaftler betraf. 13 Ebenso spielen Abhängigkeiten einen Roll e: So waren und sind sowohl Künstler und  Musiker als auch Wissenschaftler gewissen gesellschaftlichen Einschränkungen unterworfen,  wenn sie die Gewohnheiten ihres Publikums bzw. gesellschaftliche Normen und Vorstellungen nicht verletzen, sich und ihr Fachgebiet aber gleichzeitig weiterentwickeln wollen.  In der situationsorientierten Sich tweise spielt auch der Einfluss des unmittelbaren Umfelds  auf die  Entwicklung von Kreativität eine Rolle, wie Fami lie, Freunde oder Lehrer sowie persönliche  Herausforderungen, der Drang, sich schöpferisch zu betätigen, oder die Suche nach Anerkennung.   Unter Berücksichtigung dieses Ansatzes für einen krea tiven Informatikunterricht ist es wichtig, für  ein kreativitätsunterstützendes Umfeld zu sorg en, Offenheit für Neues zu demonstrieren und  willkommen zu heißen. Bestehen Informatiklehrer im Unterricht auf (ggf. überholten) Paradigmen,  überholten Programmiersprachen oder konventione llen Lösungen, können diese Kreativitätshemmer darstellen.  2.1.4 Unterscheidung verschiedener Au sprägungen von Kreativität  Lange Zeit standen ausschließlich außergewöhn lich kreative Leistunge n und Entdeckungen im  Zentrum wissenschaftlicher Untersuchungen zur Kr eativität. Im Schulkontext ist nicht zu erwarten, dass ein Schüler zu solch außergewöhnliche n Entdeckungen fähig ist (bzw. dass der Schüler  oder die Lehrperson in der Lage sind, diese zu  erkennen). Aus diesem Grund ist es notwendig,  verschiedene Ausprägungen von Kreativität zu unterscheiden.  Boden (1995) beschreibt zwei Bede utungen von Kreativität. Zum einen Historische Kreativität   (H-Kreativität), welche Ideen und Leistungen bezeichnet, die no ch nie da gewesen und damit  geschichtlich neu sind. Hierzu zählen bspw. neue wissenschaftliche En tdeckungen und Erfindun                                                        13 Van Gogh schuf hunderte Bilder, die während seiner Le bzeit als merkwürdig und exzentrisch empfunden wurden.  Auch die Werke des französischen Malers Édouard Mane t stießen zu Lebzeiten auf Ablehnung. Die Werke des  Komponisten Gustav Mahler waren bis weit nach seinem T od umstritten und fanden erst in der zweiten Hälfte des 20.  Jahrhunderts volle Anerkennung.   Kreativität 13    gen, neue Kunststile oder neue Musikrichtungen. Häufig wird H-Kreativität  gemeint, wenn in der  Kreativitätsforschung von Kreativität die Rede ist.   Im Gegensatz dazu steht P-Kreativität14, welche auf eine Person bez ogene neue Ideen bezeichnet.  Eine ähnliche Ausprägung bezeichnet Craft (2001) als „little c creativity“15 und unterstreicht mit  dieser Bezeichnung Kreativität, die in jedem Indi viduum gefördert werden kann, nicht nur bei  wenigen besonders begabten. Diese, auf das I ndividuum bezogene Kreativ ität ist wichtig beim  Lösen eigener Probleme, im täglichen Leben ode r im Beruf. Für die Schule steht damit die PKreativität im Zentrum des Interesses. Da PKreativität Voraussetzung für H-Kreativität ist,  verspricht die Förderung von P-Kreativität, auch  h-kreativen Leistungen den Weg zu bereiten.   Shneiderman (2000) unterscheidet Kreativität in dr ei Stufen. In der eingeschränktesten Bedeutung  von Kreativität werden nur Paradigma veränder nde Innovationen gezählt. Hierzu zählen große  Durchbrüche der Wissenschaft genauso wie die En twicklung eines neuen Stils in der Kunst oder  Musik. Eine lockerere Definition umfasst das, was als „normale Wissenschaft“ bezeichnet werden  kann; evolutionäre Beiträge in der Forschung, welche in der Regel durch Anwendung und Überarbeitung bekannter Paradigmen entstehen. Als Beis piele erwähnt Shneiderman selbst Diagnosestellungen von Ärzten und journalistisches Schreiben.  Persönliche oder Impromptu-Kreativität, als  dritte Bedeutung von Kreativität, ist sehr we it gefasst und umfasst spontane und persönliche  Aktivitäten, wie eine lebhafte Konversation ode r Kindererziehung. Sie hat nur auf wenige Menschen Einfluss und damit nur eine begrenzte Relevanz für die Kreativitätsforschung.   2.2 Motivation und Kreativität  Eine im Schulkontext zentrale Frage ist die, was Menschen überhaupt dazu veranlasst, kreativ zu  sein.16 Intrinsische Motivation17 wird inzwischen als Haupteinflu ssfaktor für kreative Leistungen  angesehen18 (vgl. Ruscio und Amabile 1996; Runco und Chand 1995). Extrinsische Motivation19  dagegen kann sich negativ auf Kreativität ausw irken. Teilweise wurde sogar davon ausgegangen,  dass extrinsische Motivatoren per se kreativitätshe mmend wirken. Ursache hierfür war u. a. eine  Studie von Lepper, Greene und Nisbett (1973), bei welcher Kinder im Vergleich zur Kontrollgruppe deutlich die Lust am we iteren Malen verloren, wenn ihnen für das Bild eine Belohnung  versprochen wurde. Dieser Unte rminierungseffekt konnte später ebenfalls bei Personen jeglichen  Alters nachgewiesen werden (Hennessey 2007). Mit weiterer Forschung wurde allerdings festgestellt, dass in Abhängigkeit des Gefühls der eige nen Kompetenz und Selbstbestimmtheit (vgl. Deci  und Ryan 1985), extrinsische Motivation auch kreativitätsfördernd wirken kann. Hierbei muss  zwischen informierenden und kontrollierenden Ei nwirkungen unterschieden werden. Informierende extrinsische Einwirkungen kön nen sich positiv auf Kreativität auswirken, z. B. durch Präzisierung der Anforderungen, Ermutigung zu besondere n oder außergewöhnlichen Arbeiten und ggf.  auch durch konstruktives Feedback20. Nach Collins und Amabile (1999) ist Einfluss durch extrinsische informierende Motivatoren für langfris tige Kreativität sogar una bdingbar. Kontrollierende                                                         14 Psychologische Kreativität.   15 Im Kontrast zu „big C Creativity“.  16 Ursprünglich wurde der Einfluss von Motivation auf kreat ive Leistungen im Zusammenha ng mit der Kreativitätsdiagnostik betrachtet. Motivationale Einflussfaktoren verfälschte n die Testergebnisse in er heblichen Maße, so dass man  versuchte, diese kontrollieren zu könne n. In der weiteren Entwicklung hat si ch ein eigener Forschungsschwerpunkt  herausgebildet, der sich mit de r Rolle von Motivation in kreativen  Prozessen auseinandersetzt.  17 Intrinsische Motivation bezeichnet Motivation „von innen heraus“ aufgrund ei nes inneren Antriebs und der Beschäftigung selbst, aber ohne externe Belohnung. Intrinsische Motiv ation führt zu besseren Ergebnissen beim Problemlösen  und zu einem besseren Vers tändnis beim Lernen.  18 Nach dem Intrinsic Motivation Principle of Creativity  sind Menschen dann am kreativsten, wenn sie durch ihr  Interesse, Vergnügen, Befriedung und di e Herausforderung (Challenge) durch eine Aufgabe/Arbeit motiviert sind  statt durch externen Druck oder Zw ang (vgl. Hennessey und Amabile 1987).  19 Extrinsische Motivation ist bedingt durch äußere Einf lüsse, wie Belohnungen oder Bestrafungen. Sie bewirkt nur  bessere Leistungen bei reiner Wiedergabe von auswendig gelerntem Wisse n, Präzisionsarbeiten unter Zeitdruck und  bei der Erfüllung bekannter Wiederholungsaufgaben.  20 Gemeint ist nicht „gut-gemeintes“ Feedback, welches „rechtzeitig“ auf Fehler hinweisen will. 14  Kreativität    Einwirkungen wirken sich dagegen negativ aus: De r Akteur bekommt hierdurch das Gefühl, nicht  seine eigenen Vorstellungen umset zen zu können, sondern von außen gelenkt zu werden. Problematisch ist, dass intrinsische Motivation schnell zerstört werden kann.  Unter bestimmten Umständen sind Synergieeffe kte extrinsischer und intrinsischer Motivation  möglich. So kann sich bestenfalls bei einer ur sprünglich extrinsisch mo tivierten Aufgabe auch  intrinsisches Interesse entwickeln. Bei langfristig en Aufgaben ergänzen sich extrinsische und  intrinsische Motivation unter Umständen in unterschiedlichen Phasen gegenseitig.  Die motivationale Orientierung für eine Aufgabe hat direkten Einfluss auf die Kreativität, mit  welcher eine Aufgabe gemeistert wird. Dabei hä ngt die motivationale Orientierung im Wesentlichen von der Umgebung ab, z. B. wie der Lehrer ein Projekt oder eine Aufgabe vorstellt (Hennessey 2007).   Wie kann intrinsische Motivation im Zusammenhang mit Kreativität im Informatikunterricht am  ehesten erreicht werden? Durch eine Unterrichtsat mosphäre, in welcher sich Schüler unabhängig,  selbstbestimmt und in Kontrolle ihres eigenen Le rnprozesses fühlen. Selbständige Informatikprojekte bieten sich dafür an. Extrin sisches Feedback sollte nur inform ellen, aber nicht kontrollierenden Charakter haben.   Während Motivation eine wichtige Bedingung für Kr eativität ist, kann kreatives Tun im Gegenzug  auch Motivation hervorrufen: Es macht Spaß, krea tiv zu sein. Im kreativen Tun findet der Mensch  Selbstbestätigung und Selbstverwirklichung. Csiksze ntmihalyi prägte für ein intensives Aufgehen  in einer kreativen Betätigung den Begriff Flow .  Kreativität erleben: Flow  Ein Zustand, in dem die Arbeit und die aktuelle Tätigkeit gut und erfolgreich läuft,  wird als Flow   bezeichnet (Csikszentmihalyi 1990). Hierbei st ehen die Anforderungen einer Aufgabe mit den  eigenen Fähigkeiten in einem optim alen Verhältnis. Die Arbeit ge ht leicht von der Hand, dabei  herrscht ein Gefühl der Kompetenz, Selbstbestim mung und Bestätigung, das eine Person ganz in  der Arbeit aufgehen lässt, so dass auch ä ußere Einwirkungen nebensächlich werden. Neben  intrinsischer Motivation, die eine Voraussetzung für Flow darstellt, identifiziert Csikszentmihalyi  (1997) neun Hauptelemente, die für dieses Erlebnis zuständig sind:   1. Jede Phase des Prozesses ist durch  klare Ziele gekennzeichnet  2. Man erhält ein unmittelbares Feedback für das eigene Handeln  3. Aufgaben und Fähigkeiten finden  sich im Gleichgewicht  4. Handeln und Bewusstsein bilden  eine Einheit  5. Ablenkungen werden vom Bewusstsein ausgeschlossen  6. Man hat keine Versagensängste  7. Selbstvergessenheit  8. Das Zeitgefühl ist aufgehoben  9. Die Aktivität wird autotelisch (Ziel  seiner selbst)  Viele Beispiele von Flowsituatione n beinhalten kreative Tätigkeiten;  ob Künstler beim Malen oder  Wissenschaftler, die von ihrer Arbeit gefesselt sind. Flow kann auch im Informatikunterricht  erreicht werden. Jeder Lehrer sollte die Momente kennen, in denen Schüler in sich selbst versunken an einer Aufgabe sitzen und sogar das Pause nklingeln überhören. Ein optimales Verhältnis  zwischen Fähigkeiten und Anforderungen sollte bei je der Aufgabe angestrebt werden. Trifft eine Hoch HochHerausforderung FähigkeitenNiedrigNiedrig„Flow “ LangeweileAngst ApathieHoch HochHerausforderung FähigkeitenNiedrigNiedrig„Flow “ LangeweileAngst Apathie Abbildung 4: Flow als opt imale Balance zwischen  Anforderungen und Fähigkeiten.   Kreativität 15    potentiell herausfordernde und kreative Aufgabe auf unzureichend entwickelte  Fertigkeiten ist mit  Frustration und Widerstand zu r echnen. Andererseits verhindern  zu geringe Herausforderungen,  dass sich intrinsisches Interess e an der Lösung der Aufgabe ei nstellt. Bei einer heterogenen  Schülerschaft ist eine Abstimmung auf die untersch iedlichen Fertigkeiten aber nur durch offene  Aufgaben und der Betonung von Se lbständigkeit zu erreichen.   2.3 Begriffsbestimmung  An den verschiedenen Forschungsansätzen wurd en die unterschiedlichen Verständnisse von  Kreativität deutlich. Diese setzen sich in den Definitionen der Kreativität fort. Im Folgenden  werden charakteristische Definitionsversuche dargestellt um einerseits, die Komplexität des  Begriffs zu verdeutlichen, und andererseits, die Grundlage für die Herausarbeitung einer im  Kontext dieser Arbeit zu verwe ndenden Definition zu legen.   Sternberg, Pretz und Kaufman (2002)  verstehen unter Kreativität   the ability to produce work that is novel (i.e. original, unexpected), high in quality, and appropriate (i.e. useful, meets task constraints). (zitiert nach Sternberg 2004, S. 4)   Nicht beantwortet wird in di eser Definition die Frage, was neu bedeutet und wie subjektive  Aussagen, wie hohe Qualität  und Nützlichkeit,  zu bewerten sind.   Auch Ruscio und Amabile (1996) beziehen sich in  ihrer Definition auf das Bearbeiten einer  (allerdings offenen) Aufgabe:  We define creativity in our research as a novel and appropriate response to an open-ended  task. The task has to be open-ended, rather than straightforward, in order to allow room for  creativity or flexibility.   In dieser Definition beziehen Ruscio und Amabile Umgebungsfaktoren mit ein, die für die Unterrichtsgestaltung wichtige Hinweise implizieren: Nur offene Aufgaben erlauben es den Schülern,  sich kreativ auszudrücken.   Die kreative Bearbeitung solch offener Aufgaben erfordert nach Boden (1990) systematisches und  strategisches Vorgehen. So charakterisiert sie schöpferisches Denken als   a matter of using one’s computational resource s to explore, and sometimes to break out of,  familiar conceptual spaces. (S. 108)  Der Unterschied zwischen einem außergewöhnlic h kreativen und einem weniger kreativen Menschen ist demnach „nicht irgendeine besondere Fähigkeit,  sondern größeres Wissen (in der Form  praktisch angewandter Kenntnisse) und der Wille , sich dieses anzueignen und es zu benutzen“   (Boden 1995, S.39).   Feldhusen und Goh (1995) verweisen auf die Komplexität der beeinflussenden Faktoren:  Within the individual, there is a complex system  of cognitive skills, abilities, personality factors and motivations as well as styles, strategi es, and metacognitive skills that work together  to produce adaptive or creative behaviours. Th e product or effects of creative activity ultimately define the success or failure of creative efforts. (S. 234)  Die Problematik des komplexen Kreativitätsbegriffes schlägt sich bei Häcker und Stapf (1998) in  einer sehr umfassenden Definition nieder: Kreativität wird hier definiert als   noch nicht genügend scharf umgrenzten Begriff fü r ein Gefüge intellektueller und nichtintellektueller (motivationaler, einstellungsund te mperamentsmäßiger) Persönlichkeitszüge, die  als Grundlage für produktive, originale, schöpf erische Leistungen angesehen werden (im Sinne von Prozessen des Umordnens, Planens, Entw erfens, Erfindens, Entdeckens). Kriterien solcher Leistungen findet man z. B. in der Orig inalität und Neuartigkeit der Problemlösung, der  Offenheit und Flüssigkeit des Produktionsprozesses . Vom stärker individualistischen Begriff  des Schöpferischen (etwa der Reformpädagogik) un terscheidet sich der Begriff der Kreativität  durch den soziokulturellen Bezugsrahmen (Krit erium: Nützlich für die Gesellschaft), sozial-16  Kreativität    psychologisch verweist er in seiner Bedeutung al s Fähigkeit und Bereitschaft zur Innovation  auf die Interdependenz von Kreativität und Gesellschaft. (S. 467)   Glass (1995) und Couger (1990) verwenden im Bezu g auf Kreativität in der Softwareentwicklung  eine pragmatische Definition von Kreativität:  To be creative, a solution must satisfy one or more of the following conditions:  1. The product of the thinking has novelty and value  2. The thinking is unconventional, in the sense that it requires modification or refection of  previously accepted ideas.  3. The thinking requires high motivation and persi stence, taking place over a considerable  span of time (continuously or in termittently) or at high intensity.  4. The problem as initially posed was vague and illdefined, so that part of the task was to  formulate the problem itself. (S. 117)   Glass und Couger kombinieren damit in ihrer De finition verschiedene Aspekte von Kreativität,  stellen Anforderungen nicht nur an das Produkt und  den Prozess, sondern auch an die ursprüngliche Aufgabe selbst.   Ansätze einer Definition sind offensichtlich über ve rschiedene Zugänge möglich: Durch Beschreibung einer kreativen Person, die Charakterisier ung eines Prozesses, die Evaluation eine Produkts  oder die Betrachtung der Umgebung. Da Ideen im Zentrum jeglicher Betrachtungsweise stehen,  soll sich die Definition von Kreativität in dieser  Arbeit auf Anforderungen an Ideen beziehen.   In den Definitionen finden sich drei Kernpunkte wieder:   1. Ideen müssen neu, anders, innovativ sein.  2. Sie müssen von hoher Qualität sein.  3. Sie müssen entsprechend einer Aufgabe angebracht und nützlich sein.  Eine Idee oder Reaktion auf ein Problem ist also kreativ wenn sie neu, gut und relevant ist.    Im Schulunterricht kann nicht erwartet werden, hi storisch kreative Leist ungen zu erreichen. Der  Fähigkeit, h-kreative Leistungen hervorzubringen, gehen Erfolgserlebnisse und Kompetenzen im  Hervorbringen p-kreativer Leistungen voraus. Aufg abe des Unterrichts muss es sein, Schüler zu  auf das Individuum bezogenen kreativen Leistungen zu befähigen und zu ermutigen. Eine Leistung  (dazu gehören Produkte, Denken und Prozesse) wird  entsprechend in dieser Arbeit kreativ genannt, wenn sie durch eine oder mehrere der folgenden Bedingungen charakterisiert ist:  1. Die Leistung ist für das Individuum neu und nützlich bzw. sinnhaft. 21   2. Die Leistung geht über bekannt e Verfahren und Ideen hinaus, z. B. durch Erweiterung,  Kombination, Variation oder Spezialisie rung bekannten Wissens und bekannter Verfahren.  3. Die Leistung basiert auf hoher Motivation, Ausdauer und Arbeitsintensität.  4. Das ursprüngliche Problem war unklar definiert bzw. wurde durch die Person im Fokus  selbst gestellt/aufgeworfen. Die Präzisierung der Aufgabe ist damit Teil des Prozesses.    Zusammenfassend soll eine Leistung als kreativ b ezeichnet werden, wenn sie zu persönlich neuen  und verwendbaren Ideen, Lösungen oder Erkenntnissen führt.                                                          21 In verschiedenen Zusammenhängen empfie hlt es sich, anstatt von Nützlichkeit  von Sinnhaftigkeit zu sprechen, um  bspw. Kunst nicht auszuschließen. Andere De finitionen sprechen auch von „angemessen“.  Kreativität 17    2.4 Kreativitätsförderung  Eines der ursprünglichen Ziele der Kreativitäts forschung war die Förderung von Kreativität,  welches die Annahme voraussetzt, dass Kreativität gefördert werden kann. Die bis hierher analysierten Modelle von Kreativität bieten verschiede ne Ansatzpunkte, um den kreativen Prozess oder  dessen Ergebnis zu verbessern. Einen wesentliche n Einfluss hat Motivation (vgl. Abschnitt 2.2),  welche u. a. durch ein geschickt gestaltetes Um feld angeregt werden kann (vgl. Feldhusen und  Treffinger 1985; Davis 1991). Sternberg und Lubart  (1991) identifizieren da rüber hinaus folgende  Einflussfaktoren von Kreativität: Intelligenz, Wi ssen, Denkstil und Persönl ichkeit. Allerdings  liegen diese, mit Ausnahme des Wissens, nich t im Einflussbereich eines Lehrers.   Amabile (1998) gibt folgende forschungsbasierte  Kategorien für die Förderung von Kreativität an,  die sich auch durch einen Lehrer im Unterricht be rücksichtigen lassen (vgl. auch James, Lederman  Gerard und Vagt-Traore 2004):  Herausforderung: Die wohl effektivste Methode,  Kreativität bei einem Schüler anzuregen, ist die, ihn  mit passenden Aufgaben zu betrauen. Wenn eine Aufgabe den Fähigkeiten entspricht und sich für den Schüler als interessant oder als Herausforderung herausstellt, wird intrinsische Motivation entfacht. Es darf dabei nicht zu wenig sein – sonst entsteht  Langeweile, ist die Herausforderung zu groß, droht  ein Kontrollverlust und Versagensangst. Für einen Lehrer besteht die Aufgabe demnach darin, Aufga-ben zu finden, in denen je der Schüler seine Herausforderung findet und die auf die Fähigkeiten aller  Schüler passt, z. B. indem die Aufgabe variabel  gestaltbar ist. Viele Forscher empfehlen deshalb, dass Schüler sich ihre Probleme selbst stellen (Problemfinden) oder dass unklar definierte Prob-leme gestellt werden (vgl. Sternberg und Lubart  1991; Fasko 2000; Treffinger 1980; Feldman 1988).   Freiheit: Das Gefühl, eigene Lösungswege einschlagen zu können, vermittelt Selbstkontrolle und Kreativität. Freiheit meint hierbei nicht Beliebigkeit des Ziels. Konkrete Vorstellungen von dem, wie ein Ziel aussehen soll, können Kreativität sogar begünstigen. Intrinsische Motivation entsteht durch eine  unabhängige Wahl von He rangehensweise und  Aktivitäten. Typische Schulund Arbeitssituationen bedeuten meist das Gegenteil von Freiheit. Durch eine geschickte Organisation kann aber auch diese  Hürde überwunden werden, im Informatikunterricht  z. B. durch Projekte.   Ressourcen: Ressourcen umfassen vor allem  Umgebungsvariablen, die den kreativen Prozess beeinflussen: Zeit, Platz, Materialien und Nach-schlagemöglichkeiten sollten vom Lehrer passend  gewählt und zur Verfügung gestellt werden.  Arbeitsgruppen: Durch eine heterogene Zusammensetzung in Arbeitsgruppen kommen mehr Ideen zum Vorschein. Bei Schülern mit ähnlicher Ar-beitsweise finden sich zwar schneller Lösungen und     Abbildung 5: 25 ways to  develop creativity  (Sternberg und Williams 1996, zitiert nach Fasko  2000). 18  Kreativität    Kompromisse, allerdings werden sie weniger unterschiedliche Lösungs wege und Ideen erkunden.   Ermutigende Betreuung:  Extrinsischer Einfluss kann sich negativ auf kreative Leistungen  auswirken. Einwirkungen, die das Gefühl der Se lbstkontrolle stärken, üben dagegen einen positiven Einfluss aus. Dieser kann im Unterricht ve rschiedene Formen annehmen: Ermutigung, angebotenes Feedback, Aufbau von Selbstvertrauen oder Hilfe bei der Strukturierung einer Aufgabe,  wenn sich ein Schüler überfordert fühlt. Eben falls dazu gehören die Förderung von Neugier,  Risikobereitschaft, Selbstvertrauen und exploratives Lernen.   Institutionsweite Unterstützung: Nach Möglichkeit sollte Krea tivität durch die ganze Schule  oder gar das ganze Schulsystem als Ziel verfolgt werden. Damit verliert kreatives Arbeiten das Ungewöhnliche in einem sonst restriktiven K ontext und kann zu einer Selbstverständlichkeit  werden. Sternberg und Williams (1996) geben da rüber hinaus 25 Tipps zur Anregung von Kreativität (vgl. Abbildung 5).  2.5 Kreativität in der Lernwissenschaft  Auch in der Lernwissenschaft erlangt Kreativitä t eine zunehmend größere  Bedeutung. Das wohl  am häufigsten zur Vorbereitung und Evaluierung von Unterricht eingesetzte Modell ist die Lernziel-Taxonomie von Bloom (1974). Auf höchster kognitiver Stufe wird dort die Evaluation über  das eigene Handeln beschrieben. Anderson und Krathwohl (2001) unterzogen Blooms Taxonomie  einer Überarbeitung nach lernpsychologischen Gesichtspunkten und empirischen Ergebnissen.  Diese Ergebnisse implizieren, dass nicht mehr die Evaluation an der komplexesten kognitiven  Stufe anzusiedeln ist, sondern das Kreieren.  Anderson und Krathwohl begründen diese Neuordnung mit der höheren Komplexität induktiver Pro zesse im Gegensatz zu deduktivem Vorgehen.  Während beim Evaluieren deduktiv ein Ganzes in  seine Teile zerlegt werden muss und diese bzgl.  gewisser Kriterien bewertet werden müssen, be inhalten das Hervorbringen und Gestalten ein  induktives Finden der richtigen und zusammenpasse nden Teile sowie das Bewerten und bestmögliche Zusammensetzen dieser vor dem Hintergrund der zu erfüllenden Anforderungen. Damit stellt  sich Induktion als komplexer dar als Deduktion. Ve rschiedene alternative Klassifikationssysteme  teilen diese Auffassung (vgl. Anderson und Krat hwohl 2001). Insbesondere die Klassifikationen  von Ausubel (1974) und Halady na (1997) fassen ebenfalls Kreativität als höchstes kognitives  Lernziel auf.   Moderne Lerntheorien scheinen sich allerdings nur schwer im Schulalltag durchsetzen zu können.  Fachunterricht folgt zu häufig noch dem Prinzip des Nürnberger Trichters. Bereits Piaget wies  darauf hin, dass Lernen ein aktiver Prozess ist, in  welchem der Lernende eine eigene Repräsentation der Welt vor dem Hintergrund seiner Erfahrun gen konstruiert. Die Theorie des situierten  Lernens empfiehlt den sozialen und physikalisch en Lernkontext zu berücksichtigen. Das darf  allerdings nicht dazu führen, dass Unterrichts inhalte in haarsträubende Kontexte eingebettet  werden, die für den einzelnen Schüler belanglos si nd. Lernen ist ein Prozess, in dem der Lernende  in ständiger wechselseitiger Beziehung mit seiner  Umgebung steht. Verschiedene Ansätze, z. B.  das Entdeckende Lernen, unterstreichen, dass vor  allem dann mit einer positiven Einstellung und  am besten gelernt wird, wenn eigene Fragen und Probleme im Lernprozess bewältigt werden.  Problematisch dagegen ist es, wenn sich das En tdecken alleinig auf d as Entdecken curricular  vorgegebener Routinen beschränkt.   Papert greift in seiner Lerntheorie des Konstruk tionismus das Prinzip des Lernens als Konstruktionsprozess auf, fügt aber die Idee hinzu, dass Le rnen durch das eigenhändige Konstruieren eines  Artefakts22 unterstützt wird (Papert und Harel 1991). Im Gegensatz zu Piaget hält Papert es für  wichtig, dass Lernende direkt in Situationen eint auchen, statt sie von außen zu betrachten. Hierzu  zählt auch die Verbundenheit mit dem Lerngegenstand: Der Schlüssel zum Lernen liegt im  Einswerden mit dem betrachteten Phänomen, was wiederum zu bedeutungsvollem Lernen führt.                                                         22 Bspw. die Konstruktion eines Hauses mit Bausteinen, die Entwicklung einer Theorie oder das Programmieren eines  Computers.  Kreativität 19    Vorteil des Schaffens eines realen Produkts ist die Möglichkeit, dieses auszuprobieren, zu zeigen,  zu diskutieren und zu bewundern  (Papert 1993). Konstruieren des Wissens bleibt damit nicht nur  eine versteckte Angelegenheit des Geistes, sonde rn wird durch „greifbare“ Artefakte unterstützt  und nachvollziehbar. Artefakte sc haffen Verständnis durch deren In terpretation; Verständnis kann  repräsentiert werden in der Konstruktion eines Artefakts. Durch dieses Wechselspiel von Repräsentation und Interpretation entwickeln sich Artefakte und Verständnis evolutionär, was die  Konstruktion des Wissens darstellt. Konkretes De nken ist nach Papert demnach keine Entwicklungsstufe, die bewältigt werden muss, sondern ei ne andere Repräsentation des Denkens, die ihre  Berechtigung und Anwendungen hat. Auch wenn das Schaffen von Artefakten und Verständnis im  Sinne des Konstruktionismus von Papert nicht expliz it als Kreativität bezeichnet wird, so stellt es  doch in dem herausgearbeiteten Verständnis von Kreativität zumindest eine Vorstufe zur Bewältigung kreativer Aufgaben dar und kann für die G estaltung eines kreativen Informatikunterrichts  wichtige Anhaltspunkte liefern. Kern der Inform atik ist die Schaffung künstlicher Artefakte.  Computertechnologie stellt eine fruchtbare Umge bung dar, um Ideen zu generieren und auszutesten (Papert 2000), da Artefakte auch Konstruk tionen der künstlichen Welt mit einschließen. Die  Konstruktion von Artefakten und ein Lernverständnis im Sinne des K onstruktionismus bieten sich  damit in der Informatik geradezu an und kö nnen ein bedeutungsvolles und kreatives Lernen  ermöglichen.  2.6 Schule und Kreativität  Grundsätzlich wird in Schulen Kreativität zu weni g berücksichtigt. Studien zeigen, dass Kreativität  bei Schulkindern mit jedem Schuljahr kontinuierlic h sinkt (Lepper, Corpus und Iyengar 2005). Ein  Grund hierfür könnte sein, dass Kreativität kaum von Intelligenz unterschieden wird oder dass  Lehrer nicht wissen, wie sie Kreativität unterrichte n sollen. Zusätzlich ist es grundsätzlich für den  Lehrer schwieriger, kreative Lö sungen – und damit viele verschie dene Lösungen – im Unterricht  zu berücksichtigen und zu bewerten. So kritisie rt Hentig (2000) die Lehrmethoden in der Schule  gar als kreativitätsfeindlich und bezweifelt, d ass die Förderung von Kreativität in der Schule  tatsächlich versucht wird:  Es läßt mich vermuten, daß uns an wirklicher Kreativität gar nicht so viel liegt. Sie bringt ja  so viel eigene Probleme, Schwierigkeiten, Unregelmäßigkeiten mit sich! (S. 70)  Kreative Schüler sind schwieriger im Unterricht zu  handhaben, passen sich ungern an und stören  auch mal den „geregelten Unterrichtsablauf“. Ni cht selten neigen Lehrer gar dazu, kreatives  Verhalten negativ zu beurteilen (Westby und Daws on 1995; Sternberg und Lubart 1991). Stattdessen dominieren in Schulen konvergente Aufgaben . Während Kreativität intrinsischer Motivation  entspringt, findet sich in der Schule ein Bewert ungssystem, welches auf ex trinsischer Motivation  basiert. Schüler neigen dann zu einem Problemvermeideverhalten, d. h. sie wählen sichere,  ausgetretene Wege, die risikoarm und erfolgvers prechend sind, aber für Kreativität nicht viel  Raum lassen (vgl. Sternberg und Lubart 1991) . Frühe Evaluation und Perfektionsstreben sind in  diesem Kontext als Kreativitätshemmer bekannt (vgl. Osborn 1953).   Wie empirische Studien zeigen, bemängeln auch heutige Berufstätige, d ass in ihrer Schulzeit  wichtige Sozialkompetenzen, insbesondere Kreativitä t, zu wenig gefördert wurden (vgl. Feller  1996). Aus der Wirtschaft wird ebenfalls mangel nde Kreativität bei Schul abgängern angemahnt  (vgl. Geser 1999). In der Schule scheint stattdess en ein besonderer Wert auf Gedächtnisleistungen  und analytische Fähigkeiten gelegt zu werden , wobei doch kreative und praktische Fähigkeiten  genauso wichtig für den Erfolg im Leben sind, vielleicht sogar wichtiger (vgl. Sternberg 2003).  Ein Unterrichtsstil, der Kreativität anregt und belohnt, kann darüber hinaus sogar schulische  Leistungen steigern (Sternberg 2003). Auch unt er den schultypischen formalen Voraussetzungen  sollte die Förderung intrinsischer Motivation und Kreativität möglich sein.  20  Kreativität    2.7 Kreativität in naturwissensch aftlichen Unterrichtsfächern  Um die Bedeutung von Kreativität im Informatikunte rricht im Vergleich mit anderen Unterrichtsfächern erfassen und ggf. auf deren Erfahrungen zurückgreifen zu können, werden in diesem  Abschnitt Ansätze zur Berücksichtigung von Krea tivität in anderen naturwissenschaftlichen  Fächern untersucht.   2.7.1 Mathematik  Erste Untersuchungen von Kreativität in der Math ematik stammen von Hada mard (1949), welcher  den kreativen Prozess vor dem Hinter grund des Kreativitätsmodells von Wallas23 analysiert. Für  den Mathematikunterricht ist dieses Modell allerdings  nicht zu verwenden, da sich eine Illumination nicht erzwingen lässt. Weth (1999) hat sich im Rahmen einer Habilitationsschrift mit den Möglichkeiten beschäftigt, die Mathematik bietet, Kreativität einzusetzen und zu fördern. Er stellt  fest, dass Mathematik sich bisher „auf das Beherrschen von Wissen und die Einübung von Verfahren“  beschränkt (Weth 1999, S.34). Insbesondere in  Konkurrenz mit anderen Unterrichtsfächern  schneidet Mathematikunterricht damit bisher sc hlecht ab. Mathematikunterricht ist noch nicht  kreativitätsfördernd, kann es nach Weths Meinung aber sein.   Weth verdeutlicht, dass Problemlösen nicht mit Kr eativität gleichzusetzen ist. In der Mathematik  bieten Knobelecken zwar Anknüpfungspunkte für krea tives Tun, allerdings handelt es sich dabei  immer um konvergente Aufgaben. Im Unterrichts kontext können sowohl Zeitdruck als auch die  mangelnde Aussicht, das einzig richtige Ergebnis zu finden, Schüler demotivieren. Des Weiteren  stellt Weth den positiven Einfluss von Werkzeuge n, insbesondere Computern, auf kreatives  Verhalten heraus.   Vollrath (1987) postulierte „Begriffsbildung al s schöpferisches Tun im Mathematikunterricht“.  Mathematik müsse sich vom ausschließlichen Problemlösen freimachen und stattdessen den  Schülern die Möglichkeit geben, ein eigenes Stück Mathematik zu „erfinden“. 24 Dies gelingt  besonders gut im selbständigen B ilden von Begriffen. Weth operati onalisiert Vollraths Vorschläge, indem er „Kreativitätsroutinen“ (Handlungsstra tegien) angibt, mit deren Hilfe Schüler geführt  eigene Begriffe erfinden und e rforschen können. Zu den Begriffschaffungsroutinen gehören:  • Spezialisieren  • Verallgemeinern  • Modifizieren  • Kombinieren  • Analogisieren  • Iterieren  • gezieltes und freies Experimentieren  Gehe von einer gegebenen Definiti on aus und ändere eine Bedingung ab.  Als Ausgangsbegriff wählen wir wieder die Definition des Quadrats:   Ein Quadrat ist ein Viereck mit vier glei chlangen Seiten und einem rechten Winkel.  Begriffsbildung: Ein Spezialfünfeck ist ein F ünfeck mit vier gleichlangen Seiten und einem  rechten Winkel.   Abbildung 6: Beispiel für di e Kreativitätsroutine „Modifizieren“ (Weth 1999, S. 70).                                                          23 Vgl. Abschnitt 2.1.2.  24 Auch in der Informatikdidaktik/im Informatikunterricht besteht die Tendenz , alleinig das Problemlösen in den  Vordergrund zu stellen. Das vielfältige Potential, was die Informatik bietet, zu verschiedenen Lösungen, Ideen und  Produkten zu kommen, wird durch konvergente Aufgabenstel lungen häufig unterdrückt. Genauer wird auf diesen  Punkt im Kapitel 4, Abschnitt 4.4 eingegangen.  Kreativität 21    Das Bilden eines mathematischen Begriffs umfasst   1. die Schaffung/Konstruktion des Begriffes und   2. die mathematische Durchdringung des Begr iffs, für welche „Entdeckungsund Erforschungsroutinen“ angegeben werden.    Eine natürliche Zahl heißt in der Mathema tik „vollkommen“, wenn sie gleich der Summe  ihrer echten Teiler ist; zum Beispiel 6 = 1+ 2+3. Erfinde und untersuche „arme“ (oder  „reiche“) Zahlen.   Abbildung 7: Beispiel: Erfinden mathema tischer Begriffe (Weth 2001, S. 65).  Weth stellt eine prototypische Unterrichtssequenz vor, welche in  der Lehrerausbildung erprobt  wurde. Die geschilderten Ergebnisse sind überwi egend positiv. Untersuchungen über den Einsatz  seiner Konzepte in der Unterrichtspraxis  sind allerdings nicht dokumentiert.  Das Verwenden von „Routinen“ und „Vorgehensweisen “ scheint auf den ersten Blick im Gegensatz zu Kreativität zu stehen. Tat sächlich spielen aber im kreativen Prozess gerade Heuristiken,  Erfahrung und Fachund Methodenkenntnis eine wichtige Rolle.  Weitere Vorschläge für einen kreativen Mathem atikunterricht macht Winter (1999), welcher ein  stärkeres Zusammenspiel von Gestalt und Zahl vor schlägt. Hiermit könne die heuristische Kompetenz der Schüler gestärkt und damit kreatives Denken angeregt werden.   Das Aufdecken von Wechselbeziehungen zwischen Gestalt und Zahl ist eine der kreativsten  Formen des Mathematikle rnens, weil dabei ästhetische Momente wirksam sind. (S. 19)   Winter stellt hiermit allerdings eine spezielle , ästhetisch-künstlerische Sichtweise von Kreativität  in den Mittelpunkt.  Auch Bruder (2001) geht der Frage nach, wie Math ematikunterricht (in der Oberstufe) gestaltet  sein muss, damit ein kreativer Umgang mit Mathem atik ermöglicht, von den Lernenden gewollt  und bewältigt werden kann. Ihrer Auffassung nach äußert sich Kreativität im Mathematikunterricht  • im Aufwerfen von Fragen und infrage Stelle n von Sachverhalten oder Darstellungen zu  mathematischen Themen;  • im Entdecken beziehungsweise Erfinden (subj ektiv neuer) math ematischer Zusammenhänge, Problemlösemethoden oder Anwendungen v on Mathematik – insbesondere auch im  Erkennen mathematischer Beschreibungsmög lichkeiten von Alltagszusammenhängen;  • im Finden und Ausprobieren eines subjektiv neuen oder nicht konventionellen Lösungsweges zu einer gegebenen Aufgabe;  • im Variieren und eigenen Erfinden von Aufgaben;  • beim (originellen) Präsentieren, Begr ünden und Werten von Arbeitsergebnissen. (S. 46)    Diese Tätigkeiten finden sich allesamt auch im Informatikunterricht wieder. Das Potential für  Kreativität im Informatikunterricht geht meiner Ansicht nach allerdings weit darüber hinaus.  Während kreatives Arbeiten im Mathematikunterri cht den Beschreibungen nach oft nur innerfachlich motiviert betrieben wird (z. B. beim Erfinde n eigener Definitionen), stehen im Informatikunterricht viel häufiger anwendungsrelevante und nu tzbare Produkte am Ende des kreativen Prozesses.   22  Kreativität    2.7.2 Physik  Jablko (1994) versteht Kreativität im Physikun terricht als das Erklären eines Phänomens oder  Sachverhalts. Das „Beschreiten neuer Wege“ durch die Schüler will er realisiert sehen indem die  Schüler  „die Gelegenheit haben, eigene Ge danken und Ideen auch einzubringen“  (S.328). Jablko  hält dafür einen problemorientierten Unterricht fü r geeignet, wobei er Erklärungsprobleme präferiert.  Beispiel: Den Schülern wird erläutert und demonstriert, dass in einen Standzylinder ein  brennbares Gas […] eingefüllt wurde und sich im  anderen Luft befindet. Dann werden die  beiden Gefäße übereinander gestellt, und es wird  die Trennscheibe vorsichtig entfernt.   Führen wir sofort danach in beiden Standzyli ndern eine Flammprobe durch, so findet – wie  wohl von allen erwartet – in ei nem keine Reaktion, im anderen ei ne Verpuffung statt. Nun wird  ein gleiches Gefäßpaar demonstriert, nur erfolgte hier die Füllung vor ca. einer Stunde. Zum  Erstaunen der Schüler ergibt hier die Flammprobe für beide Gefäße eine Verpuffung, in beiden Standzylinder befanden sich also wenigs tens Teile eines brennbaren Gases. In einem  nächsten Schritt ist das Problem bewusstsein durch die Herausarbeitung der Problemformulierung zu verstärken. Danach erfolgt das Erklären . Und nun wird den Schüler offenbart, was  der Erkenntnisstand der Physik besagt, oder die Si tuation wird mit komplexer Sicht auf die  Persönlichkeitsentwicklung der Schüler genutzt. (S. 329)  Stellt das (durch den Lehrer) gestellte Problem  auch verschiedene Lösungsmöglichkeiten in  Betracht, so gibt es bei Erklärungsproblemen meis t nur eine richtige Lösung, die durch geschicktes  Schlussfolgern und kreatives Experimentieren gefunden werden muss. Insbesondere weniger  interessierte Schüler werden bei solchen Aufg aben (die irgendwann vom Lehrer „aufgelöst  werden“) wenig Motivation zeigen, sich kr eativ mit der Lösungssuche zu beschäftigen.  Mackin (1996) beschreibt einen Ansatz, Konzepte de r Physik in Projekten so  zu unterrichten, dass  sie für die Schüler interessant und bedeutungsvoll si nd. Hierbei regt sie Kreativität an, indem sie  die Schüler physikalische Phänomene ihrer Le benswelt diskutieren und eigene Experimente  aufstellen lässt. Ziel der Projekte ist es, dass di e Schüler für sich selbst, aber auch für andere,  Physik erklären können, also ihr Wissen teilen. Der Abschluss der Projekte erfolgt mittels einer  Präsentation, die verschiedenartig gestaltet se in kann (Modell, Video, Audio, Song, Artikel,  Poster, Report etc.). Mackin berichtet, dass die Schüler nicht nur mit den aufgeworfenen Fragstellungen und Problemen, sondern auch in den B earbeitungen, Lösungen un d Präsentationen, viel  Kreativität einbrachten.   2.7.3 Chemie  Gärtner (1997) fasst zusammen, dass nur weni ge Chemie-Lehrpläne Kreativität explizit als  Lernziel ausweisen. Er begründet dies damit, dass das „über empirische Befunde abgesicherte  Wissen über Stoffe und stoffliche Veränderungen, [und] zum anderen der streng, durch Experimente geprägte Erkenntnisprozess“  für innovative und kreative Prozesse offenbar nur wenig  Raum lassen (S. 12). Dennoch fordert er, auch kr eative Zielsetzungen zu verfolgen und formuliert  Rahmenbedingungen und methodische Aspekt e, die hierfür einzuhalten sind.   So kann der Nachvollzug bereits bekannter Sach verhalte Möglichkeiten kreativen Schaffens  eröffnen, sofern auf Versuchsund Bauanleit ungen ganz oder teilweise verzichtet wird und die  Schülerinnen und Schüler somit Gelegenheit erhalte n, auch eigene Wege zu gehen. Gegenstand eines solchen nachmachenden Unterrichts kann zum Beispiel die Anfertigung von LowCost-Equipment sein, das im eigenen Unterricht verwandt werden soll [...] oder auch anderen  Zwecken dienlich ist. (S. 13)  Neben diesem „nachmachenden Unterricht“  schlägt Gärtner auch eine „nacherfindende“  Vorgehensweise für den Chemieunterricht vor, bei welche r die Schüler, ohne sich an einem Vorbild zu  orientieren, in eine Forscherrolle schl üpfen und versuchen, „Neues“ zu entdecken.  Als Drittes schlägt Gärtner für einen kreativen Chemieunterricht einen „forschend-entwickelnden  Unterricht“  (vgl. Schmidkunz, Lindemann und Schmidkunz  1976) als Unterrichtsmethode vor.  Kreativität 23    Vorteile dieser Methodik sieht Gärtner in ei nem tatsächlichen Forschungsprozess, der sich auf  jeden empirisch fassbaren Vorgang in der Lebens welt der Schüler anwenden lässt. Damit könnten  auch triviale Alltagsphänomene überraschend ne u betrachtet werden. „Trial-and-Error-Phasen“  werden dabei explizit in die Unterrichtsgestaltung im Rahmen  von „Problembausteinen“ mit  einbezogen.    Abbildung 8: Phasen der Problembaustein e (zitiert nach Gärtner 1997, S. 13).    Als geeigneten Rahmen für kreativen Unterricht empfiehlt Gärtner Projekte und Mini-Projekte,  deren kreativitätsfördernde Wirkung er als erwiesen sieht.   Auch Krämer (2007) berichtet von Problemen m it einem unkreativen Chemie unterricht, der u. a.  von vielen Formeln und Gleichungen als auch eine m späten Beginn des F achs im Unterrichtskanon herrühre. Als Lösung empfiehlt sie einen krea tiven Chemieunterricht, der an Alltagserfahrungen (Alltagschemie) angeknüpft, ex perimentiert und neue Erkenntnisse präsentiert. Inwieweit in  den Projekten allerdings fachliche Kreativität gefördert wird, ist nicht dokumentiert. Dennoch  berichtet Krämer von einer höheren Beliebthe it des Faches, einem besseren Verständnis und  höherer Motivation der Schüler aufgrund krea tiver Elemente im Chemieunterricht.   2.7.4 Science Education  Einige internationale Forscher haben sich m it der Rolle und Bedeutung von Kreativität in der  Science Education auseinandergesetzt. Die ausführliche Darstellung dieser Ansätze ist an dieser  Stelle aus Platzgründen nicht möglich. Ausführunge n hierzu sind z. B. bei Moravcsik (1981) und  überblicksweise bei Kind und Kind (2007) zu finden.   2.8 Zusammenfassung und Bewertung  Im Folgenden werden Faktoren, die sich in de r Diskussion von Kreativität als wesentlich gezeigt  haben und mögliche Implika tionen für den Informatikunterricht zusammengefasst.   Bei der wissenschaftlichen Untersuchung von Kreativ ität lassen sich vier Haupteinflussfaktoren  identifizieren: Die Betrachtung des Individuums, also menschlicher  Faktoren (Persönlichkeit,  Motivation), die Betrachtung des Umfelds  und der Einflussfaktoren von Kreativität, die Betrachtung kreativer Prozesse  sowie die Betrachtung kreativer Produkte . Alle Faktoren können sowohl  unter dem Aspekt der Bewertung als auch der Fö rderung von Kreativität betrachtet werden. Nicht  nur vor dem Hintergrund der Messbarkeitsprobl ematik und potentiellen Störfaktoren bei der  Diagnostik individueller Kreativität, sondern au ch vor dem Hintergrund der allgemeinen Förderung aller Schüler, soll der Aspekt  der Bewertung von Kreativität im Informatikunterricht für diese  Arbeit ausgeschlossen werden.25 In jedem Schüler steckt kreatives Potential.26 Aufgabe des                                                         25 Das bedeutet auch, dem Versuch des Bewertens und Klassifizierens von Kreativ ität („Wer ist am kreativsten?“ oder  „Ist dies kreativ?“) zu widerstehen.  26 Wie verschiedene Ansätze verdeutlichen, kann Kreativität auch als inhärentes Bedürfnis des Menschen verstanden  werden, z. B. um sich selbst zu verwirklic hen (vgl. Flaherty 2005; Conti und Amabile 1999). 24  Kreativität    Informatikunterrichts muss es sein, dieses Poten tial herauszufordern, zu fördern und für die  Unterrichtszwecke (nämlich Motivation, Interesse,  Lernen) zu nutzen. Letztendlich scheint vor  dem Aspekt der motivierenden Funktion von Kreativitä t das Gefühl kreativen Tuns wichtiger zu  sein, als tatsächliche große Entd eckungen zu erreichen. Nur so entw ickelt sich die Fähigkeit, sich  an tatsächliche Entwicklungen (z. B. mittel s evolutionärer Kreativität) heranzuwagen.  Intrinsische Motivation ist das Kernelement für Kr eativität. Kreativitätsorientiert zu unterrichten  heißt damit auch, aus den üblichen Bewertungsst rukturen der Schule auszubrechen, da übliche  Bewertungsverfahren intrinsische Motivation unterla ufen. Stattdessen müssen andere Formen der  Belohnung gefunden werden, wie z. B. durch be deutungsvolle Aufgaben und/oder durch Feedback, welches die Schüler durch die Präsentation ihrer kreativen Produkte erhalten. Aus Sicht der  Unterrichtsplanung stellt sich die Gestaltung ei ner kreativen Unterrichtsumgebung als wesentlich  dar, wobei neben offenen Aufgaben, dem Einr äumen von Freiheiten, Unterstützung und Ermutigung auch dem Stellen einer Herausforderung und der Ermöglichung eines Gefühls von Kompetenz und Selbstbestimmung wichtige Rollen zukommen.  Die Bemühungen in den naturwissensc haftlichen Unterrichtsfächern, Kreativität in den naturwissenschaftlichen Unterricht zu integrieren, teilen ein subjektives, schülerorientiertes Verständnis  von Kreativität, in welchem subjektiv neue En tdeckungen, Nacherfinden und Wiederentdecken  bekannter Zusammenhänge im Vorder grund stehen. Es wird für wichtig erachtet, in den jeweiligen  Fächern den Schüler Gelegenheite n zu geben, ihre Kreativität einzubringen, unabhängig von der  Altersstufe. Kreativität ist für jeden Schüler rea lisierbar. Auf fachspezifische Weise werden dabei  unterschiedliche Facetten von kreativen Ausdrucksm öglichkeiten deutlich. Ge rade in Chemie und  Physik wird weniger etwas „Schöpferisches“ unter  einer kreativen Schülertätigkeit verstanden,  sondern das Entdecken neuer Wege und Erkenntni sse im Experimentieren. Gemeinsam ist allen  dargestellten naturwissenschaftlichen Unterrichtsfäch ern, dass die Projektmethode als geeignetes  Mittel zur Kreativitätsentfaltung eingesetzt wird.   In der Mathematik wird vor allem eine struktur orientierte Sichtweise von Kreativität im Unterricht  angewandt; mit Hilfe von Strategi en, Werkzeugen und Methoden werd en systematisch neue Ideen  produziert. Diese Herangehensweise ist auch im Info rmatikunterricht vorstellbar, da in der Informatik das systematische Entwickeln von Lösu ngen einen zentralen Stellenwert besitzt.  Insgesamt existieren nur wenige Publikationen zu m Thema Kreativität in den einzelnen naturwissenschaftlichen Fachdidaktiken. Es ist erfreulich, dass in verschiedenen naturwissenschaftlichen  Fächern Anstrengungen unternommen werden, Kreativ ität einzusetzen und zu fördern. Mitunter  scheint dieser Versuch allerdings aufgesetzt, unna türlich oder entspricht nur einem nacherfindenden oder passiv-erklärenden Verständnis von Kreativ ität. Durch ihren aktiven gestaltenden Kern  hat die Informatik – und damit der Informatikunt erricht – durchaus bessere Möglichkeiten, Kreativität zu fördern.   Häufig wird Kreativität eingesetzt, um den Unterri cht interessanter zu gestalten und die Motivation  der Schüler zu steigern. Zusammenfassend lässt sich feststellen, dass Kreativität im Unterricht die  Chancen bietet, Schülermotivation zu steigern, Aufmerksamkeit, Neugier und Konzentration zu  verbessern und dadurch letztendlich einen besseren Lernerfolg zu erzielen.    Kreativität in der Informatik 25    3 Kreativität in der Informatik27  Is programming an art, a science, a tool, or a trade?  All those things. (Bob Frankston)28    In computer science, the limit is your imagination!   The more creative you are, the further you are going to get. (Gustavo Alonso)29    Die Frage nach Kreativität in der Informatik löst häufig Kontroversen aus. Zu unterschiedlich sind  die persönlichen Auffassungen von dem, was Krea tivität für den Einzelnen bedeutet, und zu  unterschiedlich ist das, was der Einzelne unter Informatik versteht. In diesem Abschnitt will ich  den Versuch wagen, vers chiedenste Betrachtungsmö glichkeiten von Kreativität in der Informatik  zusammenzutragen. Wie unt erschiedlich der Begriff Kreativität  gebraucht werden kann und  welche unterschiedlichen Aspekte man in diesem Spannungsfeld betrachten kann, wurde bereits  im Kapitel 2 verdeutlicht.   Auch eine Festlegung, was denn unter „Informatik“ zu verstehen sei, ist durchaus nicht einfach.  Einschlägige Publikationen (z. B. Rechenberg (2000): Was ist Informatik , Desel (2001):  Das ist  Informatik  oder das GI-Positionspapier „Was ist Informatik“ (GI 2006)) charakterisieren die  Wissenschaft Informatik häufig anhand ihrer Teilg ebiete: z. B. Technische, Praktische, Theoretische und Angewandte Informatik. Dieses Bild der Info rmatik vermag allerdi ngs nicht sonderlich,  Schüler und Studenten für die Informatik zu begeistern (vgl. auch Maass und Wiesner 2006).  Diese recht konservative Betrachtungsweise versch ließt die Augen gegenüber den vielfältigen  Lebensbereichen, in denen gera de die kreative Beschäftigung mit Informatik Einzug gehalten hat  und deren Bedeutung für den Einzelnen. Einen zentral en Bestandteil nimmt in der Informatik die  Softwareentwicklung ein, an welcher sich krea tive Prozesse besonders manifestieren. Auch  Schwill (1993) schreibt, dass sich Denkund Arbe itsweisen der Informatik vor allem am Softwareentwicklungsprozess konkretisieren. Vor diesem  Hintergrund werde ich mich im Folgenden  vor allem auf diese Tätigkeiten der Informatik b eziehen, die im Zusammenhang mit der Erstellung  von Software stehen. Tatsächlich werden Inform atik und Programmieren in der Betrachtung von  Kreativität häufig sogar fast synonym benutzt (z. B. in Leach und Ayers 2005). Dies bedeutet  nicht, dass in anderen Bereichen der Informatik Kreativität nicht existiert oder notwendig ist – im  Gegenteil, Kreativität ist nach meiner Auffass ung ein wichtiger Teil jeder Wissenschaft. In der  Informatik wird sie aber besonders an der En twicklung von Software bzw. am Programmieren  deutlich. Für die Schulinformatik ist dieser Aspe kt von Bedeutung, da Schül er hier selbst relativ  leicht innerhalb der Informatik  kreativ tätig werden können.  Unweigerlich betrachtet werden müssen in di esem Zusammenhang auch Aspekte der Kunst im  Verständnis der Informatik, deren Anwendung und Einfluss. Des Weiteren werde ich auf die  Bedeutung kreativen Tuns in der Informatik für di e Akteure, die Rolle von Informatiksystemen für  Kreativität sowie auf artifizielle Kreativität einge hen. Die Betrachtung erfolgt jeweils aus dem  Blickwinkel der entsprechenden Sichtweise, wobei die Perspektiven weder als vollständig noch als  disjunkt zu verstehen sind.   3.1 Fach-Perspektive  In Aufsätzen und Artikeln lassen sich verschiedens te Aussagen zur Kreativität in der Informatik  finden. Oftmals sind es Softwareentwickler, die üb er ihre Tätigkeit sprechen; gelegentlich wird                                                         27 Teile dieses Abschnitts wurden bereits zum Teil sinnge mäß und zum Teil wortwörtlich in (Romeike 2007c) und  (Romeike 2008d) veröffentlicht.  28 Zitiert nach Lammers (1986).  29 Zitiert nach (ETH-Zürich 2003). 26  Kreativität in der Informatik    Kreativität gefordert (z. B. Smith, Paradice und Sm ith 2000) und selten Kreativität in der Informatik umfassender betrachtet (z. B. Glass 2006). Im Folgenden werde ich wese ntliche Aussagen zur  Kreativität aus Sicht des Faches Informatik analysieren.   3.1.1 Standpunkte zur Kreativität in der Informatik  Computer science is the first engineering discipline ever in which the complexity  of the objects created is limited by the skill of the creator and not limited by the  strength of the raw materials. (Brian K. Reid in Frenkel 1987)    Die Informatik wird von praktizierenden Info rmatikern als kreatives Gebiet angesehen.30 „Die  Konstruktion des Produkts erfordert Ideen, viele kleine und manchmal auch einige größere. Jedes  Projekt ist ‚Neuland’ – denn sonst könn te man das System bereits kaufen“  (Eich-Soellner 2005).  Betont wird, dass – im Gegensatz zu anderen Disziplinen, wie z. B. der Chemie oder Physik – die  Realitäten nicht fest sind. An der ei genen Welt kann „mitgebaut“ werden.   Innerhalb der Informatik wird vor allem dem Gebiet der Softwareentwicklung und des Programmierens ein kreative Rolle zugeschrieben; bspw. äuße rn sich verschiedene Pioniere der Informatik  in diese Richtung (vgl. Lammers 1986; Littler 2005):  Ray Ozzie : Programmers are very creative, self-directing, self-motivating people.   Bill Gates : So much judgment and creativity goes into a programming project.   Guido van Rossum : To me, [programming] relates strongl y to creativity, which is very important to my line of work.   Aus gleichem Grund fordern Noble und Biddle (2002)  sogar, dass jeder Informatiker Programmiergrundkenntnisse besitzen sollte: “ It is there that the original source of creativity lies.”  Diese  Auffassung ist vergleichbar mit K ünstlern, die ihr Handwerk als „Urquell des schöpferischen  Gestaltens“  beherrschen sollten (vgl. Gropius 1918). M öglicherweise verändert sich aber diese  Bedingung mit dem Fortschritt der Informatik selbs t. Die Grundlagen, die notwendig sind, um  innerhalb der Informatik kreativ tä tig zu werden, vereinfachen sich  durch verständlichere Software  und intuitive Benutzerschnittstellen kontinuierlich. Selbst Kreativitätsforscher nennen Programmieren als kreative Tätigkeit in einem Zug mit Malen und Geschichten schreiben (vgl. Hennessey  2007, S. 38).  Auch junge Informatiker sehen ihr Betätigungsfeld als kreativ an. In einer informellen Umfrage  unter Studierenden und in einer Studie mit Lehr amtstudierenden und Refe rendaren (vgl. auch  Kapitel 6) wurden Kreativität in der Informatik bejaht und verschiedene Pe rspektiven verdeutlicht.  Unter anderem wurden folge nde Standpunkte vertreten:  1. Besonders Softwareentwicklung ist kreativ innerhalb der Informatik:  „Der Entwurf von Algorithmen ist unserer Me inung nach ein stark kreativer Prozess.“   „Nicht zuletzt ist die Software-Entwicklung eine schöpferische Tätigkeit, an deren Ende  meist ein individuelles, einzigartiges (Unika t) Werk (Programm, Algorithmus) geschaffen  wurde.“  2. Kreativität in der Informatik basiert auf dem Bausteinprinzip:  „Auch in der Informatik sind es Probleme, di e sich nur kreativ mit Klötzen aus dem Informatikbaukasten lösen lassen.“  3.  „Logische“ und „künstlerische“ Kreativität sind möglicherweise zu trennen.    Für Informatiker ist die Frage um Kreativität in ihrem Metier offenbar interessant. In kontroversen  Online-Diskussionen werden verschiedenste Aspe kte von der Kreativität in der Softwareentwicklung erörtert (siehe Abbildung 9). Auch hierbei wi rd deutlich, dass der Kreativitätsbegriff häufig                                                         30 Vgl. (Leach und Ayers 2005; Glass 2006; Saunder s und Thagard 2005; McBreen 2001) und Kapitel 3.1.2.  Kreativität in der Informatik 27    aus unterschiedlichen Verständnissen heraus verwe ndet wird, woraus sich zwangsläufig Kontroversen ergeben.    tomtiger:  Für mich ist Kreativität die Realisierung einer Idee. Mit einigen Zeilen Code ein effizientes  Programm zu erstellen, das ist kreativ. Analytisches Denken benötigt der Maler auch, er muss nicht nur  Farbmischungen etc. im Kopf haben und kombinieren können, er muss auch eine Vielzahl von Techniken  beherrschen und richtig einsetzen. Nicht mehr macht ein Programmierer, nur dass der eben ein größeres  Repertoire hat.    tomtiger:  Ein richtiger Informatiker ist anzusehen wi e ein Künstler, Programmierung und/oder Hardwareentwicklung, aber auch Administration ist äußerst kreativ, geradezu künstlerisch, ich benötige  beispielsweise Inspiration, um arbeiten zu können. So wie ein Maler oder Bildhauer in seine Arbeit  versunken ist, ist auch der Informatiker in seine Arbeit versunken, man lebt für sein Werk, Äußerlichkeiten sind wenig relevant.  wolllust:  Die eigentliche Schwierigkeit bei der Kunst des Programmierens ist ja außerdem gar nicht die  Beherrschung der Programmiersprache an sich, sondern die Kunst, Prob leme in kreativer und vor allem  effizienter Weise zu lösen. Was programmiertechnisch vielleicht gut ist, muss deswegen noch lange kein  guter Lösungsansatz für eine Problemstellung sein.   albundyfan:  Also ich bin ja selbst Programmierer, aber ich würde nie, wie einige Schreiberlinge hier,  behaupten, dass ich irgendetwas Kreatives vollbringe; auch wenn ich ein Problem löse, bin ich deshalb  noch lange nicht kreativ, sondern habe einfach ein anal ytisches Denken, das mir in der Problemstellung  hilft....  markinger:  Die großen Probleme liegen eher in der An alyse von komplexen Sa chverhalten und dann im  ingenieurmäßigen Entwurf und Umsetzung einer Lösung. Wichtiger als Kreativität ist dabei vor allem die  Nachvollziehbarkeit und Dokumentation der Lösung!   Abbildung 9: Ausschnitte einer Online-Forumsdiskussion zur Kreativität in der Informatik (fm4.orf.at 2004), Rechtschreibung korrigiert.   Die öffentliche Meinung zur Kreativität in der Informatik unterscheidet sich allerdings deutlich von der Meinung vieler Informatiker. Studien zeigen, dass Informatik eher als unkreativ,  unsozial und anwendungsfern eingeschätzt wird (Margolis und Fisher 2002; AAUW 2000; Rich, Perry und Guzdial 2004; Barker, Garvin-Doxas und Roberts 2005). Nach einer Studie  zum Image des Ingenieurberufs 31  bezeichnen drei Viertel der befragten Jungingenieure ihr Berufsfeld als kreativ, während diese Meinung nur von 27% der Öffentlichkeit in Deutsch-land geteilt wird ((VDE 2003), vgl.  Abbildung 10). In diesem Punkt tut  sich die größte Diskrepanz zwischen Eigenund Fremdwahrnehmung auf. Möglicherweise ist hier  auch ein Grund für die Rückläufigkeit intrinsisch  motivierter Studienanfänger zu suchen (vgl.  Romeike und Schwill 2006).  Während Befürworter eines kreativen Informa tikbilds vor allem den schöpferischen Aspekt  informatischer Tätigkeiten betonen, beziehen sich Kritiker v. a. auf Charaktermerkmale kreativer                                                          31 Die erwähnte Studie bezieht sich auf den Ingenieurber ufs insgesamt. Ein Großteil der Befragten Jungingenieure  stammt allerdings aus dem Bereich Elek tround Informationstec hnik/Informatik. Es ist zu  vermuten, dass das Bild  der Informatik in der Öffentlichkeit nicht wesentlich anders ist. Eine Studie hierzu ist mir nicht bekannt.    Abbildung 10: Image des Ingenieurberufs (VDE 2003). 28  Kreativität in der Informatik    Personen, wie Unangepasstheit und Eigensinn. So wird von Problemen berichtet, die „kreative“  Informatiker verursachen können, weil sie sich  nicht an Absprachen halten und eigenmächtig  „coole Features“ implementieren, die nicht gefragt  waren. Statt Kreativität wird die Wichtigkeit  von Disziplin und formalen Methoden unterstrichen. In seinem Weblog führt McIlree (2007) dazu aus:   The developer [...] spent most of his time implementing 'cool' features to an application that  the business stakeholders neith er asked for or wanted.  A couple of development teams using 'creative, ' let-it-all-hang-out-and-do-what-you-feel approaches to development had difficulty completi ng projects and getting them into production.  Andere befürchten, dass Kreativität in der prof essionellen Softwareentwicklung in Hinsicht auf  Entwicklungskosten, Qualität und langfristige Wart barkeit einen Kontrollverlust herbeiführen  könnte (Cusumano 1991). Glass (2006) und Kidder ( 2000) verdeutlichen dagegen, dass Disziplin  und formale Methoden Kreativität nicht ausschließen müssen und dass auch in der professionellen  Softwareentwicklung ein kreativer Ansatz erfolgve rsprechend sein kann. Ebenso wehrt sich Glass  gegen Feststellungen, dass in der Softwareentwic klung vor allem Routinearbeiten (clerical tasks)  zu absolvieren sind und dass Disziplin und fo rmale Methoden Flexibilität und Heuristiken ausschließen bzw. diesen überlegen sind. Nach sein er Feststellung sind in der Softwareentwicklung  vor allem kognitive Prozesse involviert, die fü r Kreativität charakteristisch sind.   Welches Bild von der Informatik haben Informatik schüler? Erfahrungen zeigen, dass viele Schüler  das gesellschaftliche Bild von der Informatik teilen.  Im späteren Teil dieser Arbeit werde ich diese  wichtige Frage 32 an verschiedenen Stellen erneut aufgreifen.      Abbildung 11: (Fehl-)Vorstellung von Kreativität in der Informatik (a us Küveler und Schwoch  2006, S. 42).  3.1.2 Kreative Persönlichkeiten der Informatik  Nicht selten sind es Personen, an denen Kreativ ität verdeutlicht wird. Wolfgang A. Mozart und  Albert Einstein werden bspw. unstrittig als kr eative Persönlichkeiten a ngesehen. Auch (oder  gerade) in der Informatik gibt es eine Vielzahl kreativer Persönlichkeiten, welche die Entwicklung  der Informatik vorangetrieben haben. Ebenso ve rmag das Fach kreative Personen herauszubilden.  Leach und Ayers (2005) untersuchten Aufsätze über und Interviews mit prominenten Informatikern mit dem Ziel, die Rolle von Kreativität in de ren Biographien zu ergründen. Übereinstimmend  finden sich bei nahezu allen Informatikern:  • frühe Begegnungen  mit Kreativität (z. B. im Elternhaus)  • ein frühes selbständiges Auseinandersetzen  mit algorithmischen oder mathematischen  Problemen, welche die Inform atiker herausforderten   • Situationen , die sich für sie als unbefriedigend oder herausfordernd darstellten und zur  weiteren Auseinandersetzung motivierten                                                          32 Diese Frage stellt sich nicht nur aus der schulischen Sicht für die Gewinnung und Motivierung von Informatikschülern  als wichtig dar, sondern z. B. auch vor dem Hintergr und, Schüler für ein Informat ikstudium zu begeistern.  Kreativität in der Informatik 29    • Stimuli , welche die Informatiker zu weiteren Ge danken inspirierten (andere Arbeiten, Hintergrundwissen, nahe stehende Personen, in teressante Uni-Kurse, provokante Fragen)  • Eine kreativitätsbegünstigende Umgebung  (die Möglichkeit, eigenen Fragestellungen  nachzugehen, diese zu explorieren und mit m öglichen Lösungen zu experimentieren)   Vergleichbare Aussagen finden sich bei Shasha und Lazere (1998) .   3.1.3 Kreativität in der Softwareentwicklung  Das Entwickeln von Software wird hinlänglich als kreative Tätigkeit bezeichnet. Während vergleichsweise allerdings beim Komponieren von Mu sik Kreativität generell nicht in Frage gestellt  wird, ist das bei der Softwareentwicklung anders , da Informatik von vielen Menschen grundsätzlich nicht als kreatives Fachgebiet angesehen wi rd. Um Gemeinsamkeiten zwischen den beiden  Tätigkeiten aufzuzeigen, werde ich im Folgende n Parallelen zwischen musikalischer Komposition  und Improvisation und dem Entwickeln von So ftware (Softwaredesign) darstellen34. Um die  Parallelen zum Softwaredesign  deutlicher zu machen, werde ich anstatt von musikalischer Komposition/Improvisation von Musikdesign35 sprechen.   Ein fachübergreifender Blick   Design bezeichnet nach dem Oxford English Dictionary (Oxford 2007) :  1. A plan or drawing produced to show the look and function or workings of something before it  is built or made.  2. The art or action of producing such a plan or drawing.  3. Underlying purpose or planning: the appearance of design in the universe.  Offensichtlich ist designen  eine urkreative Tätigkeit. Die Definitionen enthalten aber auch dreimal  die Aussage, dass Planen  am Design beteiligt ist. Spreche ich nun von Musikdesign mag sich z. B.  ein Jazzliebhaber darüber wundern. Basiert Jazzmus ik nicht auf Spontaneität? Kann das geplant  werden? Hört man von bekannten Jazzgrößen nicht im mer wieder Sätze wie „Ich spiele einfach  was ich fühle“? Die Antwort auf diese Fragen ergibt sich aus einer Aussage von Wynton Marsalis36:   Jazz is not just, ‘Well, man, this is what I feel  like playing.’ It's a very structured thing that  comes down from a tradition and requires a lot of thoughts and study.   (Marsalis, zitiert nach Berliner 1994)                                                         33 Erfinder des Planaren Testens, (plana ry testing), Anwenden von depth-first sear ch, efficient network flows, union find  und amortization.  34 Ein weitere interessante Betrachtung is t der Vergleich des Entwickelns von So ftware und kreativem Schreiben (vgl.  Ruete 1990).  35 Der Begriff Musikdesign  wird selten verwendet, da die Begriffe  Komposition oder musikalische Improvisation  intuitiver sind. Vor allem im Kontext moderner Musi k und der Entwicklung von Musik mit Hilfe von Computern  wird der Begriff „music design“ z unehmend auch für den Prozess des mu sikalischen Kreierens verwendet.  36 Wynton Marsalis ist einer der bedeut endsten Jazztrompeter der Gegenwart. “I was intrigued by the vision of a highly intellig ent, maybe super-intelligent artefact.” (Edward  A. Feigenbaum)   “All understanding begins with our not accepting the world as it appears.” (Alan C. Kay)     “A good idea has a way of becoming and solving problems other than for which it was intended.” (Robert E. Tarjan 33)  Abbildung 12: Aussagen kreativer Persön lichkeiten zu ausschlaggebenden Fakt oren ihrer Entwicklung (zitiert nach  Shasha und Lazere 1998). 30  Kreativität in der Informatik    Ein Jazzmusiker greift auf einen großen Vorrat an  Mustern, Modellen, Konzepten, Skalen, Harmoniewendungen und Outlines zurück  (vgl. Ligon 1996; Barrett 1998), die er im Moment der  Improvisation im Design seiner Musik37 anwendet und in Echtzeit aufführt.38 Auch ein Komponist  tut Ähnliches: Basierend auf einer beherrschten Fü lle an Wissen (einem Wissens-Pool an Fakten,  Konzepten etc.) entsteht das musikalische Desi gn seiner Komposition. Hierbei sind entsprechend  des Kulturkreises, der Hörgewohnheiten und pers önlicher Vorlieben gewisse Richtlinien und  Vorgaben wie Tonalität, Stil sowie harmonische und rhythmische Regeln einzuhalten.39 Voraussetzend, dass es in der Regel einen Grund für ein musikalisches Werk gibt,40 lassen sich die  genannten Faktoren in einem Modell des musika lischen Designprozesses abbilden (vgl. Abbildung  13). Dieses Blackbox-Modell stellt Schlüsselfaktoren  dar, die in der Musikausbildung gelehrt  werden41 (vgl. Scheuer 2003; Ligon 1996; Henze und Baisch 1998; LaMotte 1996).     Stimulus DesignSkalenMusterAkkorde KonzepteModelleHeuristiken KadenzenOutlines Restriktionen: Tonalität-S t i lMelodische und rhythmische Regeln-…Musikalisches WerkStimulus DesignSkalenMusterAkkorde KonzepteModelleHeuristiken KadenzenOutlines Restriktionen: Tonalität-S t i lMelodische und rhythmische Regeln-…Musikalisches Werk   Abbildung 13: Blackbox-Modell mit Faktoren , die den musikalischen Designprozess  beeinflussen.  Softwaredesign ist diesem Vorgehen in gewissem Sinn ähnlich. Betrachtet man die Einflussfaktoren im Blackboxmodell werden Paralle len deutlich: Auch beim Softwa redesign steht ein Stimulus  am Beginn des Prozesses. Oft wird dieser Problem , Aufgabe oder Anforderung genannt. Es kann  aber auch jede andere Motivation für jemanden sei n, eine Software zu entwickeln. Der Designprozess wird dabei stark von Bedingungen und Einsch ränkungen (Richtlinien, Vorgaben, Regeln)  beeinflusst, die vom Softwareentwickler beachte t werden müssen. Zu diesen gehören die Umstände wie, wo und von wem die Software benutzt we rden soll genauso wie die Grenzen der verwendeten Programmiersprache, verfügbare Ressour cen und vieles mehr. Während des Designprozesses verwendet der Programmierer einen Schatz  an Problemlösemethoden, Vorgehensweisen,                                                         37 Das ist es, was einen guten Jazzmusiker ausmacht: Hinter seiner Musik steckt ein durchdachtes Design.  38 Barrett (1998) nennt das Erlernen der Grundlage n und Regeln ”Preparing to be spontaneous“.   39 Auch hier zeigen sich unterschied liche Auffassungen von Kreativit ät. Möchte ein Musiker zu seiner Lebzeit als  kreativ gelten (und damit auch entsprechend entlohnt werden ), muss er sich vermutlich stärker an die Normen und  Geschmäcker seines Kulturkreises halte n. Große Komponisten wie bspw. Franz Schubert und Gustav Mahler werden  heutzutage rückblickend als sehr kreativ  eingeschätzt. Zu ihrer Lebzeit wurde allerdings ihr Schaffen, und damit ihre  Kreativität, nur bedingt anerkannt.  40 In der Regel steht vor dem Beginn ei ner musikalischen Kompositi on oder Improvisation ein Im puls, eine Impression  oder ein Auftrag.  41 Bemerkenswert ist an dieser Stelle allerdings, dass die Grundfertigkeiten in der Musik offenbar um ein Deutliches  komplexer sind als die für das Entwickeln von Software nötig en Grundlagen. Dies hat zur Folge, dass im schulischen  Musikunterricht wirklich kreative, also z. B. komponierende , Tätigkeiten kaum stattfinden. So stellt Scheuer (2003)  fest: „Allerdings lassen sich die vorlie genden Modelle des Komponierens mit La ien [...] nicht ohne weiteres auf die  Unterrichtssituation in der allgemeinbildenden Schule übertra gen, da sie sich vor alle m auf den Einzelunterricht  beziehen und nicht aus der schulpädagogis chen, sondern primär aus der Sicht des Komponisten und in der Tradition  von Satzlehren formuliert sind.“ Da s Erlernen der Grundlagen für Jazzim provisation (ohne Berücksichtigung des  Beherrschens eines Instruments) dauert  sogar mehrere Jahre (Barrett 1998).  Kreativität in der Informatik 31    Heuristiken und Erfahrungen und wendet diese zu r Findung und Realisierung einer Softwarelösung an. Auch dieser Prozess resultiert in einem Produkt.42   Bestätigt werden diese Faktoren durch eine Studie mit professionellen Softwaredesignern von  Guindon und Curtis (1988). In ihrer Untersuchung zum Designprozess spezifizierten und kategorisierten sie die Randbedingungen (z. B.  „design process constraints“, „problem domain constraints“  oder „functional constraints“) und die Wissensressourcen (z. B. Algorithmen, Designschemata,  Designmethoden).  Dieser Prozess kann kreativ genannt werden, so lange er auf ein neues Problem angewandt wird,  neue Software das Ziel ist und es kein bekanntes Lösungsmuster für die Au fgabe gibt. Kreativität  wird hierbei genauso verlangt wie sie in Jazzimprovisation oder musikalischer Komposition benötigt wird. 43 Offensichtlich werden unterschiedliche  Prozesse auch einen unterschiedlichen  Grad an Kreativität verlangen. Das Modell zeigt aber wichtige Faktoren auf, die den kreativen  Prozess beeinflussen: Ein umfangreicher Vorrat an Wissen, Konzepten und Erfahrungen sind die Basis für kreatives Design in der Softwareentwicklung. 44 Im Informatikunterricht wird bereits auf  die Vermittelung dieser Inhalte viel Wert gelegt. Darüber hinaus muss allerdings die Frage, wie  das erlangte Wissen im kreativen Designprozess a ngewandt werden kann, stärker berücksichtigt  werden.   Softwaredesign als kreativer Prozess  Auch wenn das Wissen um die Einflussfaktoren des kreativen Prozesses wichtig ist, sagt das  Blackbox-Modell nicht viel über den Designprozess selbst aus. In einer empirischen Studie zum Softwaredesignprozess identifizierten Curtis, Guindon et al. (1987) fünf Schritte:  1. Verstehen des Problems   2. Dekomposition des Problems in Ziele und Objekte  3. Auswählen und Erstellen von Plänen zur Problemlösung   4. Implementieren der Pläne  5. Reflektieren des Designproduktes und -prozesses   Diese Schritte beschreiben den Designprozess noch r echt allgemein. Für Lehrer implizieren sie die  unterschiedlichen Phasen, die beim Unterrichte n von Softwaredesign betont werden müssen.  Allerdings geben diese Schritte im Wesentlichen auch den generellen Problemlöseprozess wieder  und haben auch einiges mit dem Software-Life-Cy cle gemeinsam. Interessanter ist die genauere  Betrachtung des Schrittes „Auswählen und Erste llen von Plänen“ als Kern des Designprozesses.  Hier wurden die folgenden Teilschritte identifiziert:  3.1. Erzeugen ein mentales Modells einer möglichen Lösung für das Problem  3.2. Ausführen des Modells in Gedanken um zu prüfen, ob es das Problem tatsächlich löst  (Simulation)  3.3. Bei unkorrektem Ergebnis des Beispiels, Üb erarbeitung des Modells zur Behebung der  Mängel, anschließend erneute Prüfung des Beispiels  3.4. Bei schließlich korrektem Ergebnis werden ein weiteres Beispiel ausgewählt und die  Schritte zwei und drei wiederholt   3.5. Nachdem genügend Beispiele den Test in Schritt 4 bestanden haben, wird angenommen,  dass das Modell ein passendes Designmodell darstellt und die Repräsentation des Designs beginnt (vgl. Glass 2006, S. 339)                                                           42 Mitunter endet die Arbeit des Softwaredesigners mit dem Modell der Software und die Im plementation wird anderswo  übernommen. Dies wäre vergleichbar mit der schriftlichen Skizze einer musikalischen Komposition.  43 Nicht zuletzt wird auch behauptet, dass kreative Musi ker grundsätzlich auch gute Informatiker sein könnten  (Melymuka 1998).  44 Die Kreativitätsforschung gibt sogar an , dass wenigstens 10 Jahre Betätigung in einem Fachgebiet notwendig sind, um  h-kreative Leistungen hervorbringen zu können. 32  Kreativität in der Informatik    Diese Schritte machen den kognitiven und iterativen  Charakter des Software-Designs deutlich.  Offensichtlich sind auch Versuch und Irrtum und he uristische Herangehenswe isen natürlich und  wichtig im Software-Design. Dieser Aspekt wird  häufig übersehen, wenn Lehrende nur den TopDown-Modellierungsansatz unterstützen.   Die Feststellung, dass ein großer Teil des Prozesses kognitiver Art ist, wird von Goorhuis’ Theorie  der konstruktivistischen Modellb ildung in der Informatik geteilt (Goorhuis 1994). Goorhuis  beschreibt vorgenannte Schritte 1 und 2 des Soft waredesignprozesses als Kogitationsphase, welche  zu einem internalen Modell führt. Daran schließt sich, analog zu den Schritten 3.1. bis 3.5., eine  Konstruktionsphase mit einem zweiten internalen Modell als Ergebnis an, welches den Ausgangspunkt für die Realisierung des Modells darstellt. Weitere Belege für die Wichtigkeit kognitiver  Faktoren finden sich in Aussagen von Softwarepionieren (Lammers 1986).  Das Modell des kreativen Softwaredesignprozesses so ll vervollständigt werden, indem Parallelen  zu Amabiles Kreativitätsmodell gezogen werden (Amabile 1996). Das Modell basiert auf drei  Komponenten, die den kreativen Prozess beeinf lussen: Domainrelevantes Fachkönnen/Expertise  (der von mir genannte Wissens-Pool), Kreativitätsfe rtigkeiten (z. B. Erfahrung, Heuristiken und  Ideefindungstechniken) und Motivation für die Aufgabe.45 Auch in diesem Modell werden die  verschiedenen Phasen grob eingeteilt in Problemi dentifikation, Vorber eitung, Generierung von  Reaktionen, Überprüfung der Responses, Ko mmunikation und das Produkt zum Schluss.  Da ich, die bis hierher angeführte Argumentati on zugrunde legend, das Designen von Software als  kreativen Prozess betrachte, können die Erke nntnisse nun in einem Modell zusammengefasst  werden, welches den kreativen Software designprozess darstellt (vgl. Abbildung 14).  StimulusAlgorithmenMusterDesignschemata KonzepteModelle Heuristiken Methoden Restriktionen: Anforderungen-S y s t e mEffizienz -…Software (Modell)Fachkönnen + Kreativitätsrelevante Fertigkeiten Motivation PreparationAuswählenund Erstellen von PlänenValidierungund Implementation Design   Abbildung 14: Modell des kreati ven Softwaredesignprozesses.  Ein Anreiz, z. B. eine Idee, ein Problem oder ei ne Aufgabe, stellt den Beginn des Prozesses dar.  Ein fremdes gestelltes Problem regt weniger intr insisches Interesse an al s ein selbstgestelltes  Problem (vgl. Ruscio und Amabile 1996). In der zweiten Phase erfolgt eine Auseinandersetzung  mit dem Problem, dabei sind Fachkenntnisse ents cheidend und ermöglichen es, verschiedene  Möglichkeiten zielgerichtet auszuprobieren. Sowohl  Fachkenntnisse als auch kreativitätsrelevante  Fertigkeiten und Erfahrungen sowie Motivation spiele n eine wesentliche Rolle beim Explorieren,  Selektieren und Evaluieren möglicher Lösungen. Das Produkt des kreativen Prozesses wirkt sich  schließlich wieder auf die Motivation aus, ein neues Projekt in Angriff zu nehmen.                                                         45 Wie in Kapitel 2.2 gezeigt, Motivation ist essentiell für Kreativität.  Kreativität in der Informatik 33    Interessant ist die fachübergreifende Relevanz von Regeln für die Kreativität. Regeln sind besonders vordergründig in der Softwareentwicklung von Bedeutung und stehen traditionell im Gegensatz zur unbegrenzten Freiheit des kreativen Denke ns. Boden (1995) macht deutlich, dass diese  Beschränkungen des Denkens eben nicht im Wide rspruch zur Kreativität stehen, sondern diese  sogar erst möglich machen. Erst durch die vor handenen Beschränkungen wird ein Gebiet struktureller Möglichkeiten kartographiert, welches si ch anschließend erforsch en und zu etwas Neuem  verändern lässt.   Abschließend kann festgestellt werden, dass Kreativit ät als ein essentieller Teil in der Softwareentwicklung notwendig ist. Sinnvoll bleibt, das Entw ickeln von Software als Ganzes zu betrachten  und dabei auch persönliche Faktoren zu berücksich tigen. Mit Blick auf die Schulinformatik ist zu  beachten, dass Inhalte und Ziele eines allgemeinb ildenden Informatikunterrichts nicht eine professionelle Softwareentwicklung sein können, sondern der Einblick in die Methoden der Informatik  und ein Verständnis dieser. Eine Betonung der kr eativen Aspekte der Softwareentwicklung  verspricht, dieses zu erleichtern und zu motivieren.  3.1.4 Das Bausteinprinzip in der Informat ik als Katalysator für Kreativität  Ein solides Grundwissen im Fachgebiet ist eine notwendige Voraussetzung für kreative Prozesse.  Vorteilhaft für Kreativität in der Informatik ist,  dass die zugrunde liegenden Fakten und Konzepte  als Bausteine  aufgefasst werden können, welche wohl definiert und dokume ntiert und damit  einfach anzuwenden sind. Als Baukästen  können bspw. aufgefasst werden:  Datentypen, welche nach dem Baukastenpr inzip modelliert werden (vgl. Schubert und  Schwill 2004),  Programmierparadigmen mit ihren Baukastensystemen,  Designpatterns,  die Fundamentalen Ideen der Informatik, welc he die wichtigsten Konzepte und Strategien  der Informatik beschreiben (Schwill 1993).   Glass (2006) spricht bezüglich verinnerlichter Wissensbausteine von einem Satz von Primitiven,  die jeder Software-Designer und Programmierer b esitzt und welcher von Pers on zu Person variiert.  Eine Primitive bezeichnet danach den Punkt, an welchem der Designer mit dem „Designen“  aufhört und wo das Implementieren beginnen ka nn – ein Satz gut verstandener Elemente, die  keines weiteren Nachdenkens bedü rfen. Entsprechend wird beim Entwurf von Software auf eine  Anzahl an Primitiven zurückgegriffen, die wi e Bausteine zusammengefügt werden. Auch auf  abstrakterer Ebene kann Softwareentwicklung als das Komponieren von Softwarebausteinen  verstanden werden. So ve rdeutlicht Leon (1997):  Creativity in software development comes form  putting together established building blocks to  create real solutions to problems. […]  Creativity means not wasting the time and resources on a developing a function that can be  substituted by an existing and time-tested one. Whatever problem you are working on, there is  a high probability that, it or a similar one has  already been solved. Most software solutions  involve putting together common building blocks,  which have been used many, many times.  Viele Programmieransätze folgen diesem Prinzip, so z. B. das Kombinieren von Code in Prozeduren in der strukturierten Programmierung oder Kapselung in der Objektorientierung.  Ein Vorteil von Bausteinen für Kreativität wird  bei der Betrachtung spielender Kinder offensichtlich: Kinder spielen gern mit Bausteinen, weil diese eine begrenzte und handhabbare Anzahl von  Verwendungsmöglichkeiten haben, die Verwendungsmöglichkeiten sind verständlich und eine  nahezu unbegrenzte Anzahl an verschiedenen K onstruktionen kann mit ihnen erschaffen werden.  Beim Spiel mit solchen Baustein en entwickeln Kinder eine enor me Kreativität und lernen sowohl  über Strukturen als auch über Stabilität.   Bruce, Buckingham et al. (2004) verwenden den Begriff Bausteine  zur Beschreibung eines  Ansatzes, wie Lernende an das Programmieren herangehen. Hierbei ste llt Experimentieren und 34  Kreativität in der Informatik    Explorieren des vorhandenen Materials einen w esentlichen Teil des Lernprozesses dar. Auch  Programmierumgebungen, die speziell für das Er lernen der Programmierung konzipiert wurden,  machen von der Baustein-Metapher Gebrauch. Basi erend auf LOGO, welches bereits bausteinartige Anweisungen verwendet, wurde mit LOGO-Bloc ks das Bausteinkonzept erfolgreich visualisiert. Inzwischen existieren einige darauf aufbauende Entwicklungen. Programmierumgebungen  wie Scratch46 oder Alice47 lassen Programmieranfänger Software auf eine Art und Weise „bauen“,  als wenn sie mit Bausteinen spielen würden: Du rch Experimentieren, Lernen, Verstehen der  Konzepte und kreatives Spiel. Dieses Verständnis von Software scheint für kreative Ideen sehr  fruchtbar zu sein. Aus dieser Perspektive ist Kr eativität in der Informatik für jeden Schüler erreichbar; sie basiert auf dem Zusammensetzen von gut verstandenen Bauste inen um Lösungen für  bekannte und unbekannte Probleme zu finden und  dabei eigene Ideen umzusetzen. Für den  Informatikunterricht suggeriert diese Sichtweise, Ko nzepte der Informatik in einer Art und Weise  zu unterrichten, dass die zugrunde liegenden Ba usteine deutlich und unterscheidbar und zugleich  die Beziehungen der Bausteine zueinander bewusst werden.  3.1.5 Innovationen der Informatik  Innovation bezeichnet die Verwirklichung kreativen Denkens. Trotz der relativ jungen Geschichte  der Informatik ist aus ihr bereits eine Fülle  von Innovationen hervorgegangen. Damit hat die  Informatik – vielleicht wie keine andere Wissenschaft vor ihr – in kürzester Zeit die Gesellschaft verändert. Auch das Selbstverständnis der Informa-tik wird zunehmend von dem bestimmt, was sie geschaffen hat. So illustriert die Gesellschaft für  Informatik ihr Verständnis für Informatik auf einer  24-seitigen Darstellung von Innovationen durch  Informatik ((GI 2006), vgl. Abbildung 15).  Viele Innovationen zogen eine Reihe an (informatischen) Anwendungen nach sich und wirkten damit als Anlass für kreative Leistungen und  Produkte, welche zumeist im Bereich der Software  anzusiedeln sind. Eine Möglichkeit, Innovationen im  Unterricht herauszustellen, ist die historische  Betrachtung der Informatik (bspw. in Thomas 2005) , wie es auch in verschiedenen Schulbüchern  gemacht wird. 48 Viele dieser geschichtlichen Darstellungen haben allerdings ge meinsam, dass nur  die (hardware-) technische Seite der Entwicklung th ematisiert wird. Der Großteil heutiger Innovationen vollzieht sich allerdings softwareseitig. Ebenso ist es Schülern fast ausschließlich im  Bereich der Software möglich, eigenständig inform atisch kreativ tätig zu werden. Eine Betrachtung der Softwareinnovationen kann dies zusätzlich anregen. Eine ausführliche Darstellung dieser  findet sich bei Wheeler (2008).  Letztendlich beeinflussen Innovationen der Informa tik auch die Gesellschaft, welche darüber  hinaus dann wieder ihre Ansprüche und Einwirkun gen auf die Informatik ausübt, was allerdings  auch Probleme mit sich bringen kann (siehe Date nschutzproblematik oder Computerkriminalität).                                                          46 http://scratch.mit.edu.  47 http://www.alice.org.  48 Hierbei darf allerdings nicht vergessen werden, dass es sich bei vielen Innovati onen nur um Vorläufer der Informatik  handelt, nicht um Innovationen der Informatik selbst. Innovation durch Informatik...  … für die Wissenschaft … für die Wirtschaft … für die Technik  … auf dem Bildungssektor  … für die Kultur … für Individuum und Gesellschaft  Abbildung 15: Informatik als Darstellung anhand  ihrer Innovationen (GI 2006).  Kreativität in der Informatik 35    3.2 Mensch-Perspektive  Software Development is and always has been fun. (R. Glass)    In den Lebensläufen bedeutende r Informatiker wurde deutlich, dass Kreativität für viele von ihnen  eine wichtige Rolle spielt. Die Möglichkeit, sich kreativ ausdrücken zu können, kann eine wichtige  Motivation darstellen, sich mit Informatik zu beschäftigen. So übt Softwareentwicklung einen  faszinierenden Einfluss auf Programmierer aus. Open-Source-Programmierer verbringen oft sogar mehr als 20 Stunden ihrer wöchentlichen Freizeit m it dem Entwickeln für Software, für die sie  nicht einmal bezahlt werden. Diese Menschen treibt  offenbar eine starke intrinsische Motivation,  wie man es auch von Künstlern kennt, die sich intensiv ihrer Arbeit widmen (Moravcsik 1974).   Lakhani und Wolf (2005) und Luthiger Stoll ( 2006) untersuchten die Motivation von Softwareentwicklern in Open-Source-Projekten. Sie identif izierten auf Vergnügen basierende intrinsische  Motivation, die aus dem Gefühl, etwas Kreatives zu tun, heraustrat, als stärkste und verbreitetste  Triebkraft. Offensichtlich stehen auch hier Kr eativität und intrinsische Motivation in einem sich  wechselseitig bedingenden Verhältnis. Zudem fanden sie eine Reihe kreativitätsverwandter  Faktoren, die für die intrinsische Motivation un d folglich für die Beteiligung am Projekt verantwortlich waren. Dazu gehören:   Gebrauch:   Eine Software benutzen zu wollen war in der St udie von Lakhani und Wolf ein wichtiger Grund,  sich an Open-Source-Projekten zu beteiligen. Demn ach hat der spätere Entwickler als Nutzer ein  Problem, welches er mit der vorhandenen Software nicht lösen kann, so dass er sich entschließt,  eine Software selbst zu programmieren oder vorhandene Software en tsprechend anzupassen.  Saunders und Thagard (2005) prägen im gleich en Zusammenhang den Begriff „frustration-based  creativity“, welche den Drang zu  neuen Entwicklungen aufgrund ei ner fehlenden, aber benötigten  Funktionalität bezeichnet. Dies ist eine typische Quelle für Kreativität in der Informatik.   Reputation:  Eine der Maximen der Open-Source-Community ist die, dass die Beiträge der einzelnen Entwickler genau nachverfolgbar sind. Damit hat jeder ei nzelne die Möglichkeit, eine Reputation aufzubauen, die bei einer späteren Bewerbung hilfreic h sein kann. Auch lässt sich so das Ansehen  innerhalb der Community stärken.   Identifikation mit der Gruppe:  Die Einbindung einer Person in eine Gruppe kann zu  einer starken Identifizierung mit den Gruppenzielen führen.   Lernen:   Die Möglichkeit, in den Projekten etwas zu lernen, ist ebenfalls ein Grund für Open-SourceProgrammierer, sich an den Projekten zu beteilig en. Hier haben sie die Möglichkeit, Erfahrungen  zu sammeln und ihre Fertigkeiten zu verbessern.   Die hier dargestellten Eigenschaften lassen sich  darauf zurückführen, dass das Erstellen von  Software, welches nach vorgenannter Definition al s kreativ zu bezeichnen ist, Spaß macht. Ähnlich wie bei der Kunst oder andere n kreativen Tätigkeiten fühlen sich Programmierer wohl bei  dem, was sie tun, und haben Spaß, verbunden dam it, etwas Nützliches zu tun, ggf. sich einer  Gruppe zugehörig zu fühlen und sogar beim Lernen.   Wie Blum (1991) beschreibt, ist ein professioneller Softwareentwickler zwischen Spaß und  Eintönigkeit hin und her gerissen. Während im Softwa re-Life-Cycle einige Tätigkeiten, wie z. B.  Dokumentation, Organisation, Testen etc. eher eint önig sind, so sieht auch er Programmieren als  die Phase, die am meisten Spaß macht.    36  Kreativität in der Informatik    Luthiger Stoll (2006) stellt fest, dass kommerzie lle Softwareentwickler weniger Spaß an ihrem  Tun empfinden als Freizeitprogrammierer. Er f ührt das auf die unterschiedlichen Produktionsbedingungen, unter welchen Software-Entwickler arbeiten, zurück:  Diese Differenzen sind aber nicht durch den Dru ck von Abgabeterminen oder die Existenz von  formalen Hierarchien verursacht, […]. Der Gr und dafür, dass Programmieren im Kontext von  Open Source mehr Spaß macht, könnte vielmehr dar in liegen, dass die Software-Entwickler in  Open-Source-Projekten eine glaubwürdigere Proj ekt-Vision und vor allem eine ihren Bedürfnissen besser entsprechende Herausforderung vorfinden. (Luthiger Stoll 2006, S. 201)   Die Ergebnisse dieser Studie werfen die Frage auf, ob  sich aus den Umständen, welche Motivation  und Kreativität bei Open-Source-Programmierern er wecken, Implikationen für die Gestaltung des  Informatikunterrichts ableiten lassen. Auf mög liche Implikationen und die Berücksichtigung  persönlicher Herausforderungen in der Unterrichts gestaltung werde ich in Kapitel 4 eingehen.  3.3 Kunst-Perspektive  Programming is a creative process. […] You can take pride in your work. It’s construction; it’s art. Why does anybody like to build things, or draw things, or sculpt things? I  don’t know that I can verbalize it, but I’d say it’s a lot of fun. To me, it’s a very creative,  artistic medium. (Brian K. Reid, zitiert nach Frenkel 1987, S. 823)    Kunst, die schöpferische Tätigkeit des Menschen mit T önen, Sprache oder verschiedenen Materialien (Bertelsmann 2004) ist der Inbegriff von  Kreativität im traditionellen Sinn.49 Im vorherigen  Abschnitt habe ich bereits dargestellt, dass da s Entwickeln von Software mit künstlerischen  Prozessen, wie z. B. musikalischer Komposition, verglichen werden kann. So erstaunt es nicht,  dass einige Informatiker ihr  Tun als Kunst verstehen: Der Informatiker als Künstler. Hier  finden sich zwei verschiedene Sichtweisen. Zum einen richtet  sich die Aufmerksamkeit auf den Prozess selbst (meist Pro-grammieren); der Informatiker versteht  das, was er tut, als Kunst,  basierend auf Fertigkeiten, Wissen und Freude am Schaffen schöner Software (vgl. Knuth 1974). Diesem Verständnis  entspringt das ästhetische Empfinden für „schönen Code“ und  „ansprechenden“ Softwareentwu rf. Zum anderen wird weniger  der Prozess reflektiert, sondern der Informatiker (auch hier oftmals Programmierer) betätigt sich  als Künstler. In dieser  Sichtweise richtet sich die Aufmerksamkeit auf das kreative, künstlerische Produkt, ein meist programmiertes Kunstwerk,  welches Expertise, Eleganz, of t auch Effizienz und Kreativität  gleichermaßen ausdrückt. Fes tivals und eine aktive Community/Szene bieten diesen Programmierern ein Podium.  In einem anderen Zusammenhang steht Informatik mit Kunst  dort, wo sich Künstler  als Informatiker oder Programmierer betätigen. Diese haben die Methoden  der Informatik und die Möglichkeiten, die sich da raus ergeben, für sich entdeckt und wenden sie  zum Erschaffen von Kunstwerken an (vgl. M aeda 2004; Trogemann und Viehoff 2005). Im  Vordergrund stehen hierbei nicht Effizienz, El eganz oder Zuverlässigkeit der Software, sondern  die Weiterentwicklung von Ideen und das ästhetische Gelingen der Arbeit.   Einen zusätzlichen Beitrag für die Erschaffung von Kunstwerken und für die künstlerische Betätigung leistet die Informatik, indem sie Werkzeuge  bereitstellt, die künstlerisch genutzt werden                                                          49 Allerdings verhält es sich mit vielen Kunstwerken so , dass ein Kriterium der herausgearbeiteten Definition von  Kreativität verletzt wird: die Nützlichke it. Der Nutzen eines Kunstwerks liegt  oft in der subjektiven Betrachtung und  am Genuss des Kunstwerks per se, ohne  weiteren Nutzen darüber hinaus.    Abbildung 16: Knuth: The Art o f  Computer Programming.  Kreativität in der Informatik 37    können. Hierzu zählt unterschiedlichste Software für Bild-, Musikund Videoverarbeitung bis hin  zu interaktiven Komponenten für Live-Installa tionen. Mit diesen Hilfsmitteln gelingt es immer  mehr Menschen, sich künstlerisch kreativ zu betätigen.  Darüber hinaus arbeiten in ver schiedenen Projekten Künstler mit Informatikern gemeinsam, in  denen interdisziplinär beide Seiten profitieren. In der informatischen Bildung werden interdisziplinäre Projekte verwendet, um das Fach Informa tik interessanter zu gestalten, die Motivation der  Schüler und Studenten zu erhöhen und um das Fach  für Frauen interessanter zu gestalten (vgl.  Barker, Garvin-Doxas und Roberts 2005).  Tatsächlich wurden in den letzten Jahren soga r Auszeichnungen auf New-Media-Art-Festivals für  „artistic software“ eingeführt. Auch lassen si ch Museen mit Softwareausstellungen finden.  3.3.1 Informatiker als Künstler  Die Kunst des Programmierens   Programmieren wird von verschiedenen Informa tikern als Kunst angesehen (vgl. Pomberger und  Dobler 2008; Aupperle 2002; Graham 2004). Eine n wesentlichen Beitrag zu dieser Sichtweise  leistete Donald Knuth (1974) mit seinem Vo rtrag zur Verleihung des Turing Award. Wie Knuth  schrieb, stand diese Auffassung allerdings in stä ndiger Konkurrenz mit dem Bestreben der Informatik, als Wissenschaft angesehen zu werden. In diesem Kontext zitiert er aus den Communications of the ACM :   If computer programming is supposed to become  an important part of computer research and  development, a transition of programming from an art to a disciplined science must be effected. (Bauer, Juncosa und Perlis 1959; zitiert nach Knuth 1974, S. 667)    Offenbar beinhaltet die Betrachtung als Kunst etwa s Unerwünschtes, das für einige Wissenschaftler nicht zum Bild der Informatik passt. Dem tritt Knuth allerdings entschieden entgegen:  [...] Computer science is an art, because it app lies accumulated knowledge to the world, because it requires skill and ingenuity, and especially because it produces objects of beauty. A programmer who subconsciously views himself as  an artist will enjoy what he does and will do  it better. (Knuth 1974, S. 673)    Weiterhin führt Knuth aus, dass sich Kunst und Wissenschaft nicht gegenseitig ausschließen  müssen, sondern im Programmieren gut ergänzen.   Mit der Betrachtung von Programmieren als Kunst hat sich bei Programmierern ein ästhetisches  Empfinden dafür durchgesetzt, was „schöner Cod e“ und was ein „ansprechender“ Softwareentwurf  ist und was nicht (Bond 2005). Solche Programmi erästhetik bzw. solches Schönheitsempfinden  kann sich auf den Akt des Programmierens als auch  auf das Programm selbst beziehen. So berichtet Knuth (2001) über Programmtexte, welche Eleg anz oder sogar Witz besitzen und wiederum  von anderen, deren Lesbarkeit ein Graus ist.   Nach Bond (2005) gibt es eine Übereinstimmung zwischen Softwarepraktikern, dass sich die  Ästhetik eines Programms an folgenden, von K nuth 1974 postulierten Eigenschaften festmachen  lässt: Korrektheit, Wartbarkeit, Lesbarkeit, Übersichtlichkeit, Anmut der Nutzerinteraktion 50 und  Effizienz. Dieses Ergebnis von Knuths Überlegunge n zur Ästhetik von Programmen führte gar zur  Philosophie des „Literate Programming“, welch es eine gute Lesbarkeit für Programme fordert.  Gute Lesbarkeit als Teil eines guten Programmierstils  findet sich als Lernziel auch im Informatikunterricht wieder.   Nicht zu vernachlässigen ist der motivationale  Einfluss der künstlerischen Betätigung. Littler  (2005) befragte verschiedene erfahrene Programmi erer, inwieweit sie ihr Tun als Kunst bezeichnen würden und was diese Betrachtungsweise für sie bedeutet:                                                         50 Eng.: “grace of interaction with users”. 38  Kreativität in der Informatik    Rossum51 bejaht die Frage: „If there was no art in it, it wouldn't  be any fun, and then I wouldn't  still be doing it after 30 years.”  Stroustrup52 unterstreicht vor allem die Gemeinsamkeit von Kunst  und Handwerk, wobei er Programmieren eher als Handwerk auffasst. Graham53 betont, dass er auf  ähnliche Art und Weise Programme entwickelt, wie es Schriftsteller, Maler und Architekten tun:  indem sie zuerst ihr Werk skizzieren und dann nach und nach vervollständigen. Diesem Ansatz  folgte er von Anfang an bis heute, auch wenn es  nicht dem Vorgehen entspricht, wie er es im  College gelernt hat. Auch Stallman54 beschreibt Programmieren als Kunst, differenziert aber  zwischen Kunst, die allein Schönheit zum Ziel ha t, und Kunst, die nützlich ist. Programmieren  ordnet er – bis auf wenige Ausnahmen – letzterem zu.  Auch bei der Betrachtung von Programmieren al s Kunst spielt die persönliche Auffassung vom  dem, was man unter Kunst versteht – ähnlich wie bei der Auffassung zur Kreativität – eine wichtige Rolle. So erläutert Erik de Castro Lopo55, dass er unter Kunst das bewusste Brechen von Regeln  und Konventionen versteht, die dem Kunstwerk ein Element de r Überraschung verleihen. Da  Programmieren einer Menge Konventionen und St andards unterliegt, die eingehalten werden  müssen, erachtet er Programmieren nicht als Kunst.  Hunt und Thomas (2001) vergleiche n das Entwickeln von Software mit dem Malen eines Portraits  durch einen Künstler. In diesem Prozess stoßen Softwareentwickler genauso wie der Maler auf  vergleichbare Hürden: Wie fange ich an? Wann bi n ich fertig? Wie erfülle ich die Wünsche des  Auftraggebers? Durch ihre interdisziplinäre Be trachtungsweise empfehlen sie Lösungsmöglichkeiten, die der Kunst-Perspektive entstammen, ab er in der Softwareentwicklung hilfreich sein können.  Auch Brooks (1995) beschreibt Programmieren al s Kunst und zieht Parallelen zwischen Programmierern und Schriftstellern, wobei Software als ei nfach zu handhabendes Mate rial für den Künstler  beschrieben wird:  The programmer, like the poet, works only sligh tly removed from pure thought-stuff. He builds  his castles in the air, from air, creating by exertion of the imagination. Few media of creation  are so flexible, so easy to po lish and rework, so readily capable of realizing grand conceptual  structures. (Brooks 1995, S. 7)  Lippman (2006) vergleicht seine Programmiert ätigkeit mit seinem langjährigen Hobby des  Schreibens von Prosa. In Anlehnung an John Markoffs Feststellung56, dass das Ziel der ersten  Informatikvisionäre – eines Tages sollte jede Person einen Computer besitzen – inzwischen  erreicht sei, führt er aus, dass dies nicht genügen kann.   Das Ziel wurde nur halb erreicht. Was für eine n Nutzen hat all diese Leistungskraft von Computern für eine Person, wenn diese Person eine n Computer nicht selbst programmieren kann?  Der Traum ist noch nicht wahr geworden, weil wir noch nicht herausgefunden haben, wie wir  Programmieren zu einer Kunst machen k önnen, so dass alle daran teilhaben können.  (Lippman 2006)  Dies lässt sich auch als Aufforderung an die Informatikdidaktik verstehen.   Programmier-Kunst  Eine weitere Sichtweise, Programmieren als K unst zu betrachten, ist das Programmieren, um  Kunstwerke  zu erschaffen. Ziel solcher Kunstwerke is t es, vergleichbar z. B. mit Michelangelos  Sixtinischer Kapelle, eine künstlerische Herausfo rderung zu meistern (vgl. Knuth 2001). Bspw.                                                         51 Guido van Rossum ist Entwickler der Programmiersprache Python.  52 Bjarne Stroustrup ist Entwickler der Programmiersprache C++.  53 Paul Graham ist Lisp-Programmierer, Gründer vers chiedener Softwareunternehmen und Autor des LispStandardlehrwerks ANSI Common Lisp.  54 Richard Stallman ist Gründer des GNU Pr ojekts und der Free Software Foundation.  55 Erik de Castro Lopo ist unter anderem Coauthor des Buchs “C for Linux Programming in 21 Days” und Entwickler  der Linux Audio Library libsndfile.  56 Vgl. Markoff (2005).   Kreativität in der Informatik 39    gehören dazu das Programmieren von Progr amm-Einzeilern, das Entwerfen von DEMOs57 oder  der Versuch, Programme zu schreiben, die wiederum eine Kopie ihrer selbst erzeugen. Solche  Software hat in der Regel keinen bestimmten Zw eck (was Software normale rweise hat), außer den  des künstlerischen Ausdrucks  oder der Demonstration technischen  Könnens. Allerdings erfahren  solche Meisterwerke in der Re gel auch nur Anerkennung von Pe rsonen, die der entsprechenden  Szene nahe stehen.         Abbildung 17: Kunstwerke  aus der DEMO-Szene58.     Dass ein Programmtext auch durchaus poetisch sein kann, demonstriert ein syntaktisch korrektes  Perl-Programm, welches es durch seine Poesie sogar zu Anerkennung außerhalb der Fachwelt  geschafft hat (vgl. Abbildung 18).   Verschiedene Festivals bieten in zwischen Podien für Programmierkünstler, so z. B. die Transmediale Berlin oder das „Read_ME 1.2 international media art festival“.   Kreatives Tun geschieht nicht immer zweckgebunden, sondern kann auch allein aus der Freude an  der Betätigung motiviert sein. Ein Beispiel beschreiben Blackwell und Collins (2005): Live  Coding  – Programmieren von Laptopmusik als faszini erende Möglichkeit im end-user programming. Eine solche Änderung des Charakters de r Programmiertätigkeit und Programmierumgebung  werden als interessante kreative Perspe ktive für die Informatik beschrieben.                                                          57 Mit der DEMO-Szene hat sich eine interessante Programmierszene herausgebildet, die hochgradig spezielle Software  entwickelt, die den Namen Kunstwerk ve rdient. Ziel dieser Programmierer is t es, mit möglichst wenigen Ressourcen  beeindruckende Kunstwerke (Bilder, An imationen, Musik) zu erschaffen.  58 Links: Game Music IV on the Commodore 64 by Charles D eenen, Rechts: PC text mode demo: Bolognese von Alpha  Design. Quelle: http://en.wikipedia.org/wiki/Demoscene. 40  Kreativität in der Informatik      Abbildung 18: „Listen“ (Hopkins 1995; zitiert nach Bond 2005).   3.3.2 Künstler als Informatiker  In viel stärkerem Maß noch, als sich Programmi erer damit beschäftigen, Kunstwerke zu erschaffen, haben Künstler die Methoden und Werkzeuge der Informatik für sich entdeckt. Die kreative  Entwicklung von Kunst ist schon seit je her e ng verbunden mit den ve rfügbaren Werkzeugen und  Techniken. Neue Werkzeuge eröffnen dem kreativ en Künstler neue Möglichkeiten, sich auszudrücken oder gar neue Kunstformen zu erschaffen.  Ein typisches Beispiel aus der Musik ist die  Erfindung des Klaviers, welches durch Johann Seb astian Bach in seinem Werk „Das Wohltemperierte Klavier“ systematisch erforscht und m it seinen Besonderheiten und Neuheiten vorgestellt  wird. Ähnliche Beispiele sind auch in der Male rei und in anderen Künsten zu finden, wobei ein  Werkzeug auch im immateriellen Sinne als Idee oder Technik verstanden werden kann.   Die Informatik hat in ihrer kurzen Entwicklung szeit bereits eine beachtliche Menge an Werkzeugen und Techniken hervorgebracht, die Künstler nur  allzu gern aufgreifen und als künstlerisches  Mittel einsetzen. Mit der Einführung von 3D-Druck ern wird bald auch digitales Bildhauen möglich sein.  Beachtlich ist in diesem Zusamme nhang, dass die neuen, digitalen Werkzeuge nicht nur für  etablierte Künstler oder Informatiker ein neues Be tätigungsfeld darstellen. Darüber hinaus – ja  sogar in viel stärkerem Maße – wurde vielen ne uen Menschen eine Betätigung in den digitalen  Künsten ermöglicht, die nahezu alle etablierten Künste berührt und auch Amateuren neue Gebiete  eröffnet (vgl. Wands 2002). Hierzu gehören Digitale Fotokunst/Fotografie, Webdesign, Musik-Bearbeitung/Sampling/Mixing, das Entwerfen von Kleidung im Internet, Videoproduktion,  Audioproduktion, 2Dund 3D-Animation und Design und Typographie, um nur einige Beispiele  zu nennen.  Kreativität in der Informatik 41    Maeda (2004) sieht Computer und Computertechnologie  nicht nur als Werkzeug, sondern vielmehr als „neues Material“, welches künstlerisch verarb eitet werden kann. Dieses  „neue Material“ wird von Küns tlern und Designern begeistert aufgenommen und zur Sc haffung neuer und besonderer  Werke eingesetzt. Inzwischen hat sich in diesem Bereich  eine Vielzahl von Strömungen entwickelt, die unter Bezeichnungen wie Digitale oder Digitale Mediale Kunst vereint werden.   Neben den neuen Medien und We rkzeugen, die Künstlern –  dank Informatik – zur Verfügung stehen, bedienen Sie sich  auch verschiedener Techniken der Informatik (vgl. Maeda  2004; Trogemann und Viehoff 2005). Vor allem durch Programmiertechniken lassen sich in Kunst  und Musik Werke erschaffen, die sonst nicht denkba r wären. Dreifus (2002) beschreibt ein solches  Beispiel:  In another experiment, John opened up one of  his sugar packets and wrote a computer program that was able to count exactly how many crystals there were in one  sweet little sack. The  number was in the neighbourhood of 70,000, something he found “amazing.” After magnifying and arranging 70,000 sugar grains, Maeda crea ted “Tea for Two,” a piece that can’t be  termed “abstract,” because it is reality. (Dreifus 2002, S. 7)   Eine Kategorisierung von Digita ler Kunst ist schwierig, wenn nicht unmöglich. Vielmehr überschreiten Künstler oft mit ihren Arbeiten die Grenzen verschiedener Medien und Verbinden  unterschiedlichste Elemente miteinander (Pau l 2003; Klütsch 2007). Ein Versuch, dennoch  Kategorien zu bilden, die zudem einen interessante n Überblick über die vielfältigen Erscheinungsformen digitaler Kunst bieten, findet sich in de r deutschsprachigen Wikipedia. So ist demnach  innerhalb der Digitalen Kunst zu unterscheiden in Computergenerierte Digitale Kunst und Mediale  Digitale Kunst (vgl. Abbildung 20). Die Widersprüc hlichkeit des Versuchs zeigt sich allerdings an  der langen und kontrovers gef ührten Diskussion zum Artikel.    Computergenerierte   Digitale Kunst Mediale Digitale Kunst  • Bildkunst (z. B. Digitales  Malen, Fotomanipulation, 3D-Kunst, Mathematische Kunst)  • Grafik  • Poesie  • Musik • Netzkunst  • Softwarekunst  • Code Poetry/Net Poetry  • Interaktive Installationen   • Virtuelle Realität    Abbildung 20: Ausprägungen Digitaler Kunst laut Wikipedia (2008).  Vor allem der Bereich der Computergraphik ist ei n Themenbereich, der in der Schulinformatik  bereits häufig thematisiert wird, meist im Zu sammenhang mit Algorithmik. Ich denke, die inzwischen riesige Palette von Ideen und Betätigungs möglichkeiten in der Digitalen Kunst bietet  vielfältige motivierende Anknüpfungspunkte, um im  Zusammenhang mit Kompetenzen, die im  Informatikunterricht vermittelt werden sollen, thematisiert zu werden.   Abbildung 19: Interaktive Kunst nach  Pollock (vgl. Manetas 2003).  42  Kreativität in der Informatik    3.3.3 Symbiose von Informatik und Kunst  Zunehmend entdecken Kunsthochschulen, dass Methoden  und Kenntnisse der Informatik für Künstler nützlich, wenn nicht unabdingbar sind (vgl. Davis und Kundert-Gibbs 2006). Andererseits wird  der Aspekt der „künstlerisch-kreativen Informatik“ te ilweise auch in der informatischen Bildung genutzt, z. B. durch künstlerische Aufgaben oder das spezielle Einbeziehen von Kunst beim Programmieren (Ursyn und Sung 2007; Ursyn und Scott 2007). Ursyn und Scott (2007) integrierten Informatik und Kunst in einen Informatik-A nfangskurs, um sowohl das  Fachverständnis zum Programmieren als auch das Verständnis von Kunst zu verbessern. Schwerpunkte waren die Anwendung von Kunst im Programmierkurs und ein interdisziplinäres Arbeiten der Studenten. Das Ziel, ein besseres Verständnis für Programmieren durch die Beschäftigung mit Kunst und durch expressives Denken  zu erreichen, wurde in diesem Kurs erreicht. Zu den  Aufgaben des Kurses gehörten u. a. die Konzeption und Erstellung eines „Roboter Makers“, der nach veränderba-ren Variablen der Nutzer roboterartige Gebilde kon-struiert, und die künstlerische Visualisierung einer  abstrakten Klasse (siehe Abbildung 21).  Turner, Weakley et al. (2005) berichten von einer fruchtbaren Zusammenarbeit von Programmierern und Künst-lern bei der Erschaffung von Kunstwerken, in welcher  Programmierer die Schnittste lle zwischen Künstler und  Computer übernehmen. Sowohl Künstler als auch Programmierer profitierten von diesem Projekt gleichermaßen.  Im Kontext der Schulinformatik sind aus dieser Perspektive verschiedenste Projekte denkbar, die Informatik und  Kunst vereinen.  3.3.4 Kritik  Rechenberg schreibt: „Der Rechner ist ein viel zu kompliziertes Gebilde, der Zugang zu ihm ist  viel zu umständlich und indirekt, und er ist schließlic h bei aller Flexibilität viel zu starr, um als  Material für Kunstwerke dienen zu können“  (Rechenberg 2000, S. 287).  Personen, die den mystischen Charakter in ihrem Ku nstverständnis nachgeben, äußern sich kritisch  über den Beitrag von Informatik für die Kunst. „Es fehlt ihnen der Mensch, der dahinter steht, die  Schöpfungskraft des Künstlers, die uns ein Kuns twerk bewundern und immer wieder zu ihm  zurückkehren lässt, auf dass wir neue Kraft, Belehrung und Anregung zu eigenem Tun von ihm  empfangen“  (Rechenberg 2000, S. 287).  Gerade hierbei scheint uns die Entwicklung eines besseren zu belehren. Ist auch die Entwicklung  (noch? Vgl. Abschnitt 3.5) nicht so weit, selbs tändig kreative Leistungen hervorzubringen, so  können Informatiksysteme den Menschen in vielfä ltigster Weise bei kreativen Tätigkeiten unterstützen und dienen Künstlern durchaus als ergi ebiges Material. Diese Sichtweise auf Kreativität  und Informatik werde ich im Folgenden darstellen.     Abbildung 21: Visualisierung der Klasse  „Cow“ (Ursyn und Scott 2007).  Kreativität in der Informatik 43    3.4 Technologie-Perspektive59   Computer werden von Wissenschaftlern und Küns tlern zunehmend als we rtvolle Werkzeuge für  kreative Tätigkeiten angesehen. Auch ein große r Teil der Forschung im Spannungsbereich von  Kreativität und Informatik beschäftigt sich mi t den Möglichkeiten zur Förderung von Kreativität  durch IKT in professionellen Be reichen und Lernumgebungen (Shneid erman, Fischer et al. 2005).  Diese beschränken sich nicht allein auf Möglichke iten der Förderung von Kr eativität innerhalb der  Informatik, sondern erstrecken sich auf unzählige Gebiete, auf denen Software kreativitätsunterstützend eingesetzt werden kann. So sieht Tr ogemann (2001) die Aufgabe und Herausforderung  der Informatik insbesondere darin, neue Kreativ -Werkzeuge bereitzustellen. Shneiderman (2007)  prophezeit:   The current and forthcoming generations of progr amming, simulation, information visualization, and other tools are empowering engineers and scientists just as animation and music  composition tools have invigorated filmmakers and musicians. (S. 20)  Das impliziert eine steigende Bedeutung kreativ itätsunterstützender Software und bedeutet, dass  Erfindungen und Innovationen, angeregt durch kr eativitätsunterstützende Werkzeuge, in noch  größerem Maß als zuvor zunehmen werden. Sie er möglichen selbst Anfängern, wie Experten zu  arbeiten, und Experten, immer beeindruckendere Er gebnisse in vielfältigen Be reichen zu produzieren.   Shneiderman (2002) postuliert in einem Kreativitä tsframework vier Aktivitäten, die durch IKT  unterstützt werden können: das Sammeln und Darste llen von Information, das in Beziehung setzen  zu vorhandenem Wissen, z. B. durch Unte rstützung der Kommunikation, das Schaffen und  Evaluieren neuer Lösungen sowie das Verteile n der Ergebnisse (vgl. Abbildung 22). Während  diese Aktivitäten die potentiellen Möglichkeiten v on IKT noch relativ abstrakt beschreiben,  konkretisiert Shneiderman (2002) die Anforderunge n durch Kriterien für kreativitätsunterstützende  Softwarewerkzeuge.60   IT should support   • pain-free exploration and experimentation  • immediate and useful feedback for  one’s actions  • no big penalties for mistakes, meaningful reward for success  • easy way to undo and redo   • visualizing data processes  • searching for knowledge and inspiration  • composing a work step by step  • disseminating results to gain recognition.  Diese Anforderungen lassen sich direkt auf Softwa re beziehen, die in der Informatik eingesetzt  wird. Computerbasiertes Experimentieren und Ex plorieren kann zu neuen Ideen verhelfen und  sollte Designen, Simulation, auch Überrasc hungen und die Erzeugung von Artefakten ermöglichen  (Mitchell, Inouye et al. 2003). Programmierer nutzen diese Möglichkeiten des Experimentierens,  die ihnen Programmierumgebungen eröffnen, inde m sie Ideen und mögliche Lösungswege austesten. Nach Glass (2006) stellt das Anwenden von selektivem Trial und Error einen wesentlichen Teil der Softwareentwicklung dar. Solche „Was pa ssiert wenn“-Szenarien können schnell auspro                                                        59 Technologien meint in diesem Zusammenhang Informationsund Komm unikationstechnologien.  60 Vergleichbare Anforderungen stellen (Greene 2002; Re snick, Myers et al. 2005; Loveless 2007; Lubart 2005).    Abbildung 22: Vier Aktivitäten und Aufgaben im KreativitätsFramework (Shneiderman 2002). 44  Kreativität in der Informatik    biert und variiert werden und sind nur dur ch die Unterstützung der Entwicklungsumgebung  möglich. Programmierumgebungen für Programmieranfä nger, wie z. B. Scratch, machen Explorieren sogar noch leichter; Operationen können einfach  auf Objekten ausgeführt und das Ergebnis in  Echtzeit beobachtet werden. Offensichtlich be inhaltet auch das Programmieren-Lernen das  Erkunden der Programmierumgebung („Was sind mein e Möglichkeiten?“) und das Experimentieren mit den Objekten und Konstrukten, die an wendbar sind („Was passiert, wenn ich dieses so  verwende?“).  Ein sofortiges und nützliches Feedback auf ausgeführte Aktionen durch den Compiler oder  Interpreter unterstützt das Experimentieren und ist eine Besonderheit der Softwareentwicklung. In  anderen Bereichen geben die Werk zeuge, mit denen gearbeitet wird , entweder kein qualitatives  Feedback automatisch oder können nicht auf Fehler hinweisen.61 Bei vielen Schülern kann man  beobachten, wie solches handlungsbasiertes Feedback62 ein Gefühl von eigener Kontrolle und  selbstreguliertem Lernen ermöglicht.63  Die von Shneiderman geforderte „Straffreihe it“ wird in Softwareentwicklungsumgebungen  insofern realisiert, als dass das Fehlerfeedback  die größte „Strafe“ darstellt. Im Gegensatz zu  anderen Unterrichtsfächern, wo Feedback nur du rch den Lehrer oder durch andere Schüler möglich ist, wird dieses beim Programmieren durch eine  Maschine in einer nicht einschüchternden Art  und Weise übernommen. Ein funktionierendes Pr ogramm wartet als Belohnung für einen erfolgreichen Programmierversuch; in Scratch wäre dies bspw. eine Animation oder ein Spiel. Unterstützend wirkt sich beim Experimentieren die Sich erheit aus, dass nichts wirklich „kaputt“ gemacht werden kann. So ermöglicht Scratch auf ei nfachem Weg, letzte Ä nderungen rückgängig zu  machen oder wiederherzustellen. Während diese gena nnten Punkte kreativen Arbeitens in anderen  Fächern wenn dann nur an Simulationen möglich sind, wird beim Programmieren am Produkt  experimentiert.   Viele Programmier(lern)umgebungen erfüllen auch we itere von Shneidermans Kriterien, z. B. die  Visualisierung von Prozessen und Daten, welche dabe i hilft, Ideen und Fakten zu organisieren und  Beziehungen zu entdecken. Der Trend zu visuelle r Programmierung spiegelt diesen kreatvitätsrelevanten Aspekt wider. In Scratch werden Progr ammierkonstrukte (z. B. Schleifen, Operationen,  Botschaften) durch bunte Bausteine dargestellt, we lche die unterschiedliche n Bausteintypen durch  verschiedene Farben kategorisie ren. In modellierungsorientierten  Ansätzen werden Datenstrukturen und Prozesse als Diagramme mit ihren Bezi ehungen modelliert und können automatisch in  Programmtext übersetzt werden und vice versa (z. B.  mit Fujaba). Der Trend zu diesem visuellen,  abstrakteren Level der Programmierung verspricht , dass dies in Zukunft wichtiger, und damit auch  Kreativität noch besser unterstützt wird.  In einer kreativitätsunterstützenden Umgebung is t es wichtig, Wissen einfach zugänglich zu  machen und für Inspiration zu sorgen. Programmierumgebungen erm öglichen das Suchen in einem  Hilfesystem und beinhalten häufig eine Dokumen tation mit Kommentaren und Beispielen. Scratch  bringt zusätzlich inspirierende Beispielprogra mme mit, die von anderen Schülern programmiert  wurden, und zusätzliche Materialien, an welc hen Programmierkonstrukte erklärt und Experimentieren mit diesen Konstrukten angeregt werden.   Schrittweises Komponieren bedeutet ein langsam es Herangehen an ein Problem, während noch  viele Entscheidungen offen gelassen werden . Für kreatives Arbeiten ist diese Bottom-UpVorgehensweise wichtig, da ein Ergebnis häufig nicht klar von Anfang an bestimmt ist und sich erst später konkretisiert. In Scratch ist diese M öglichkeit gegeben, indem ein Programm zu jedem  Zeitpunkt ausgeführt und überprüft werden kann.   Ein Verbreiten der Ergebnisse kann sich positiv auf die Motivation und die eigene Reputation  auswirken. Ein Klassenraum bietet zwar nur we nige Möglichkeiten, eigene Leistungen zu präsen                                                        61 So müssen bspw. musikalische oder Kunstexperimente dur ch andere bewertet werden . Nicht-Softwarebasierte  Experimente in Physik oder Chemie  geben im Fall des Misserfolgs nicht an, wo die Probleme liegen.   62 Wie in Kapitel 2 festgestellt wurde, sollte Feedback nur informierenden, nicht kont rollierenden Charakter haben.  63 Programmieren wird häufig sogar autodidaktisch gelernt.   Kreativität in der Informatik 45    tieren, durch das Internet können diese aber eine m breiten Publikum vorgestellt werden. Scratch  besitzt eine Funktion, mit der Scratch-Progra mme einfach auf einen Internet-Server geladen  werden können. Dort können sie von anderen Le rnenden eingesehen und bewertet werden und  dienen ebenso zur Inspiration für andere.64   Abschließend betrachtet erfüllt Scratch, so wie viele andere Programmierlernumgebungen, Shneidermans Kriterien für kreativitä tsunterstützende Software.   Software kann durchaus auch unkreativ eingesetzt  werden, was bei der Betrachtung insbesondere  älterer „Lern-Software“, welche vor allem eine m Drill-and-Practice Ansatz folgte, deutlich wird.  So warnt Hartmann (2004), dass Computer und Inte rnet allein im Unterricht kaum zu mehr  Kreativität und Effizienz führen werden:   Gefragt ist eine effiziente und effektive Nutz ung dieser Werkzeuge, für eine kreative und inspirierende Schulumgebung bleiben aber weiterh in die Lehrpersonen verantwortlich.   IKT fördern Kreativität in der Informatik so, wie Musikinstrumente Kreativität in der Musik  beflügelt haben. Dabei sind IKT im Unterricht nicht als „Wundermittel“ zu verstehen, deren  alleinige Existenz für die Entwicklung von Kr eativität garantiert. Die sorgfältige Auswahl des  Werkzeugs und die passenden Aufgabenstellungen sind hierfür grundlegend. Dies gilt insbesondere für andere Unterrichtsfächer. Werden vom Info rmatiklehrer die kreativitätsrelevanten Anforderungen an die Werkzeuge berücksichtigt, können di ese allerdings gerade eine Teil der kreativen  und inspirierenden Schulumgebung ausmachen. Nicht zu letzt weil Computer einen festen Bestandteil der Lernumgebung von Informatikunterricht dars tellen, sollte auf einen kreativen Einsatz der  Technik geachtet werden.   3.5 Artifizielle Kreativität  Ziel verschiedener informatischer Bestrebungen is t es, Systeme zu konstruieren, welche Kreativität nachbilden. Die Vorstellung, dass Computer eigenständig etwas Schöpfer isches hervorbringen,  mag manchem absurd vorkommen: So kann ein Co mputer doch nur das hervorbringen, was ihm  zuvor einprogrammiert wurde. Es mag umstritte n sein, ob Computerleistungen als kreativ oder  schöpferisch zu bewerten sind. Zumindest können Computer Dinge tun, die schöpferisch wirken.65  Boden stellt in diesem Zusammenhang vier zen trale Fragen (vgl. Boden 1995, S. 18):  1. Können computerwissenschaf tliche Vorstellungen beim Verständnis menschlicher Kreativität helfen?  2. Können Computer jemals etwas zu tun, das schöpferisch wirkt ?  3. Kann ein Computer menschliche Kreativität erkennen ?  4. Kann ein Computer jemals tatsächlich kreativ  sein (im Gegensatz zu reiner Produktion  scheinbar kreativer Leistungen, deren Orig inalität ausschließlich auf den menschlichen  Programmierer zurückzuführen ist)?  Die ersten drei Fragen können inzw ischen sicherlich mit „ja“ beantw ortet werden, bleiben aber in  ihrer Bedeutung nicht ohne Brisanz. Für die Di skussion der vierten Frage können verschiedenartigste Projekte herangezogen werden. Eines der bekanntesten und erfolgreichsten Projekte im  Bereich artifizieller Kreativität ist das Progra mm Aaron (Cohen 1995). Die Software generiert  originäre komplexe Malereien und Zeichnungen, welche durchaus m it Werken versierter Künstler  vergleichbar und in verschiedenen Kunstausstellungen zu sehen sind. Dargestellt werden häufig  menschliche Figuren, die vor verschiedenen Hint ergründen bei Aktivitäten zu sehen sind. Hofstadter (1996) charakterisiert die Zeichnungen gar als „oftmals lustig und von einer bezaubernden                                                         64 So wie die einfache Verbreitungsmöglic hkeit von Amateur-Geschichten zu einer steigenden Anzahl kreativer Literatur  im Internet geführt hat, kann auch das Verbreiten von So ftware durch das Internet zu  kreativem Tun anregen.   65 Nach der Feststellung, dass es inzwischen Computer gi bt, die ihre eigenen Programmi erer in Schach oder Dame  schlagen können, resümieren Lefrancois und Leppmann (1994): „Es ist also möglich, Com puter kreativ zu programmieren“ (S. 142). Dass Computer etwas Neues schaffen und erfinden, bezeichnen  sie als Herausforderung der Künstlichen Intelligenz. 46  Kreativität in der Informatik    Naivität, die ein unverke nnbares Stilmerkmal darstellt“  (S. 522). Cohen selbst bezeichnet das  Programm allerdings nicht als kreativ, zumal er mit dem Wort sehr vorsichtig umgeht (vgl. Cohen  1999a, b).  Bringsjord und Ferrucci (1999) berichten über den Versuch, einen Computer in den urkreativen  Bereich menschlicher Kreativität vordringen zu l assen: dem Geschichtenschreiben, welches zu  einem gewissen Grad heute bereits  möglich ist. So hat das Comput erprogramm Racter (vgl. Racter  1984) bereits „eigene“ Bücher geschrieben, wobei einzuschränken ist, dass in nicht unerheblichem  Maße hierbei von Menschenhand „nachgeholfen“ wurde. In akademischen Kreisen wurde der  Paper-Generator populär, welche r eigenständig pseudowissenschaftliche Artikel generiert, von  denen nach Berichten sogar verschiedene Artikel  auf Konferenzen oder in Journals akzeptiert  wurden (vgl. Stribling, Krohn und Aguayo 200 5). Das Programm „AM-Automated Mathematician“ ist ein Beispiel für wissenschaftliche Entdec kungen, die durch Software geleistet wurden.66  Weitere Betrachtungen zur Entwicklung kreativer Sy steme finden sich u. a. bei VanLangen,  Wijngaards et al. (2004).  In der Schulinformatik eröffnet die Diskussion v on Bodens Fragen Anreize, über die Grenzen der  Computerisierung nachzudenken oder sogar Versuc he zu unternehmen, z. B. durch geschicktes  Einbinden von Zufallselementen, Ansätze artifizie ller Musik oder Malerei aktiv nachzuvollziehen.  Dies liefert zudem auch Anstöße, über die Str ukturen menschlicher Kreativität nachzudenken.  3.6 Situierung der Sichtweisen im Informatikunterricht  Die dargestellten Sichtweisen verdeutlichen, dass Kr eativität in der Informatik nicht nur existent,  sondern sogar für das Fachvers tändnis, für den Softwareentwic klungsprozess und für Informatiker  selbst bedeutsam ist. Darüber hinaus eröffnet di e Informatik durch ihre Methoden, Werkzeuge und  durch die aus ihr hervorgegangenen Produkte eine m breiten Spektrum an Anwendern kreative  Betätigungsmöglichkeiten.   Die Sichtweisen können helfen, die Diskussion um Kr eativität in der Informatik zu präzisieren und  damit produktiver zu gestalten. So können bspw . die Beiträge im LOG IN-Themenheft „Computer,  Kreativität und Ästhetik“ (LOG IN 1995) der Systematisierung entsprechend der KunstPerspektive zugeordnet werden.  Für einen kreativen Informatikunterricht besitzen  die Sichtweisen sowohl thematische als auch  inhaltliche Relevanz. Ziel kreativen Lernens im Informatikunterricht sollte es sein, Kreativität in  der Informatik aus der Fach-Perspektive inha ltlich zu verdeutlichen. Da mit erfolgt kreatives  Lernen im Informatikunterricht nicht nur nah am Fach, sondern nutzt auch die immanenten Kreativitätsfaktoren, welche die Informatik bietet . Zu prüfen ist, ob sich die in der MenschPerspektive dargestellten motivationalen Vorteile  ebenfalls bei Schülern erreichen lassen und ob  sich eine kreative Beschäftigung mit Informatik im Unterricht zusätzlich positiv auf ihr Bild von  der Informatik auswirkt.  Anwenden der in der Technologie-Perspektive ge nannten Aspekte ist eine methodische, Anwenden der Themen der Kunst-Perspektive und der Pe rspektive der artifiziellen Kreativität sind  thematische Möglichkeiten, sich der Fach-Persp ektive anzunähern. Gegenüber der systematischen,  theoretischen, technischen oder historischen Be trachtung ist die Beschäftigung mit den kreativen  Seiten der Informatik für die Schulinformatik ä ußerst attraktiv. Ausgehend vom Konsens, dass  Kreativität eine Eigenschaft ist, die im Informati kunterricht sowohl förderungswürdig ist als auch  die Attraktivität des Fachs erhöht, ergeben sich hieraus zahlreiche Anknüpfungsmöglichkeiten, anhand derer Unterrichtsinhalte thematisch vera nkert werden können und damit Kreativität in der  Informatik erfahrbar gemacht werden kann.   Die Charakterisierung erhebt keinen Anspruch auf Vollständigkeit – weitaus mehr Sichtweisen                                                          66 AM wieder-entdeckte di e Goldbachsche Vermutung.  Kreativität in der Informatik 47    können eingenommen werden, dieses spannende Intera ktionsfeld zu betrachten und anzuwenden.67  Für die weitere Diskussion um Kreativität in der Informatik können sie durchaus eine Grundlage  legen, die verschiedenen Verständnisse von Kreativ ität in Äußerungen und Argumenten einzuordnen und zu bewerten.  In dieser Arbeit wird Kreativität in der Inform atik im Folgenden von der Fach-Perspektive betrachtet.  Zusammenfassend bezeichnet Kreativität aus der Fach sicht der Informatik in dieser Arbeit damit  sich aus informatischen Prozessen  (wie Programmieren, Modellieren) ergebene  Leistungen, die zu  persönlich neuen und ve rwendbaren Ideen, Produkten, Lös ungen oder Erkenntnissen führen.                                                           67 Z. B. „Hacking“ als kreativer Umga ng mit Technik und Informatik  (vgl. Graham 2004; Schell und Martin 2006) oder  Creative Gaming. Selbst eine theologi sche Betrachtung von Informatik und Kreativität ist möglich (vgl. Garner 2005). 48  Kreativität in der informatischen Bildung    4 Kreativität in der i nformatischen Bildung  Während im vorherigen Kapitel ein auf die Fach -Perspektive bezogenes Kreativitätsverständnis  konkretisiert wurde, werden in diesem Kapitel die Chancen, die sich aus der Berücksichtigung  dieser Kreativität in der informatischen Bildung er geben, im Hinblick auf den Informatikunterricht  betrachtet. Während in Deutschland nur wenige Ar beiten der Fachdidaktik Kreativität thematisieren, verdeutlichen verschiedene Forschungserge bnisse der internationalen fachdidaktischen  Diskussion das Potential, das sich durch di e Berücksichtigung von Kreativität ergibt.   Als erstes wird die Problematik der Schülerwa hrnehmung von Kreativität im Fach Informatik  erörtert. Anschließend werden Aussagen und For schungsergebnisse der internationalen Forschung  sowie kreativitätsverwandte Projekte in der informatischen Bildung analysiert und vor dem  Hintergrund der bis hierher geführten Diskussion bewertet. Das Kapitel schließt mit Überlegungen  zu Ursachen der mangelnden Berücksichtigung von Kreativität im Informatikunterricht und einem  Vorschlag zur Lösung dieses Problems.   4.1 Zur Wahrnehmung von Kreativität in  der Informatik durch Schüler  Die Sichtweise auf ein Schulfach prägt die Erwa rtungen, den Anspruch, aber auch die Bemühungen, die einem Fach entgegengebracht werden. In formatik wird in der Öffentlichkeit nicht als  kreatives Fach wahrgenommen (vgl. Kapitel 3, Absc hnitt 3.1.1), und auch viele Schüler vertreten  die Auffassung, dass Informatik per se „nicht kreat iv“ sei (bspw. in Antonitsch, Kramer et al.  2007). Maaß und Wiesner (2006) stellen fest, dass sich Informatik für viele Schüler auf „Programmieren, Mathe und ein bisschen Hardware“ zu  beschränken scheint. Dabei wird dieses Bild  weder den kreativen Möglichkeite n der Informatik, dem Informat ikstudium noch den Tätigkeiten  eines Informatikers gerecht. Gefordert wird, ein facettenreiches Bild der In formatik zu vermitteln  (vgl. Hengl 2008).   Offensichtlich bleibt vielen Schülern, denen es ni cht vergönnt ist, Informatikunterricht zu besuchen, das kreative Potential der Informatik ver borgen. Bei Schülern, die Informatikunterricht  besuchen, ist die Wahrnehmung des Fachs offenbar recht unterschiedlich. Ermutigende Feststellungen machte Modrow (2002). In einer Umfrage ba t er die Informatikschüler, ihre eigene Kreativität in und außerhalb des Informatikunterrichts einzuschätzen.68 Im Vergleich mit den Sprachkursen schätzen die Informatikschüler sich selbst, ebenso wie die „Naturwissenschaftler“, als deutlich  weniger kreativ ein. Dieses Ergebnis kehrt sich a llerdings bei der Betrachtung der Kreativität im  Fach um. 81% der Schüler bezeichnen das, was sie im Fach Informatik tun, als kreativ. Offenbar  bietet Informatikunterricht Schülern, die sich sons t nicht als kreativ einschätzen, die Möglichkeit,  sich im Fach Informatik kreativ zu betätigen. Sollte dem so sein, wäre dies ein Beitrag, den  Informatikunterricht zur Kreativitätsförder ung liefern könnte (vgl. auch Kapitel 6).  Die Frage, welche Wahrnehmung Schüler von Kreativ ität im Informatikunterricht haben bzw. ob  und inwiefern sich diese durch einen kreativen Info rmatikunterricht beeinflussen lässt, werden in  den Kapiteln 6 und 9 als Gegenstand zweier empirischer Studien erneut aufgegriffen.                                                            68 Auch wenn es sich nicht um eine repräsentative Umfra ge handelt, stellt sie doch ein positives Beispiel für die  Wahrnehmung kreativen Tuns im Informatikunterricht dar.     Abbildung 23: Einschätzung eige ner Kreativität von Schülern (z itiert nach Modrow 2002, S.  111).  Kreativität in der informatischen Bildung 49    4.2 Kreativität in der Forschung zur informatischen Bildung   In der internationalen Forschung69 gibt es mehr oder weniger zaghafte Versuche, die Kreativität  von Schülern und Studenten zu instrumentalisiere n. Dennoch bleibt es erstaunlich, dass Kreativität  auch international bisher kaum reflektie rt ist. Sucht man nach dem Stichwort „creativity“  in der  ACM Digital Library  erhält man nur wenige Artikel mit Bezug zu Bildung und Didaktik. Diese  Artikel lassen sich wenigen Gruppen in den Be reichen Problemlösen und Problemfinden, Motivation und Verbesserung der Unterrichtsqualität sowi e der Untersuchung von Informatiksystemen  zur Unterstützung kreativen Arbeite ns zuordnen. Damit spiegeln die Gruppen die drei für die  informatische Bildung wesentlichen Perspektiven  von Kreativität wieder: Fach-, Menschund  Technologie-Perspektive.  Aussagen und Ergebnisse zur Fach-Perspektive  Scragg, Baldwin et al. (1994) argumentieren, dass Informatik grundsätzlich ein kreatives Unterfangen ist und Lernende demzufolge ermutigt werden  sollten, Einsichten in die kreativen Problemlöseprozesse der Informatik zu erhalten. Hill (19 98) beschreibt Problemlösen mit offenem Ende  und Designprozesse in der informatischen Bildung als kreative Prozesse, die Exploration erfordern. Sie empfiehlt die Entwicklung lebensweltnaher  Prototypen, statt auf der Modellebene stehen  zu bleiben. Diese Vorschläge stehen im Gege nsatz zu populären deutschen Ansätzen für die  Schulinformatik, in welchen explizit nur das Entw erfen von Modellen, aber nicht deren Implementierung vorgeschlagen wird (vgl. Hubwieser 2000).  Einige Autoren richten ihr Augenmerk auf das Ge biet des Problemfindens bzw. Identifizierens von  Problemen. Diese Tätigkeiten erfordern Kreativität und sind wichtig in der Informatik. Im Unterrichtskontext beschränkt sich das nicht auf das Finden komplett neuer Probleme, sondern beinhaltet auch das Umformulieren und Anpassen von gege benen Problemen (vgl. Lewis, Petrina und  Hile 1998; Kaasbøll 1998). Sutinen und Tarhio (2001) schlagen in diesem Zusammenhang vor,  besser von „Problem-Management“ statt von Prob lemlösen zu sprechen, da das Erkennen und  Formulieren von Problemen zu den grundlegende n Fertigkeiten in der Informatik zählen.  Gu und Tong (2004) fanden in einer empirischen Studie heraus, dass in Softwareentwicklungskursen Design und Programmiertätigkeiten von den St udenten als kreativ empfunden und diese  Phasen bevorzugt wurden. Aus vergleichbaren Gründen setzen einige Autoren Kreativität in  Informatikkursen bewusst als Mitte l ein, Motivation und Interesse zu  steigern. Dies wurde z. B.  erreicht  • durch eine Veränderung der Lernumgebung, so dass „hands-on-learning“ und Exploration  ermöglicht wurden (Lewandowsk i, Johnson und Goldweber 2005),  • indem die Studenten ihre eigenen Probleme auswählen und bearbeiten durften (Meisalo,  Sutinen und Tarhio 1997) und  • indem Programmieren als Mittel persönliche n kreativen Gestaltens vorgestellt und motiviert wurde (z. B. Peppler und Kafai 2005; Resnick 2002).  Einige Wissenschaftler berichten darüber hinaus  von positiven Auswirkunge n auf die Leistungen  von Lernenden, wenn Kreativitätstechniken in In formatikkursen angewandt wurden (Epstein  2006) oder wenn kreative Methoden beim Unterrich ten verwendet wurden (Chaytor und Leung  2003).70 So integriert Brunner (1991) kreativitätsunt erstützende Aktivitäten in einem Programmierkurs mit dem Ergebnis, dass sich Stolz auf die eigene Arbeit, Ausdauer und Fleiß verbesser-ten.                                                           69 Vor allem in der Forschung im Bereich c omputer science education .  70 Kreative Lehrmethoden impliz ieren nicht notwendigerweise  eine Berücksichtigung der Kreativität auf der Schülerseite. Wie auch Biggs (1996) in seiner Theorie des „Constructiv e alignment“ anschaulich erlä utert, hängt Lernerfolg vor  allem von den Aktivitäten der Lernenden ab. Entsprechen des gilt für Kreativität. Aus diesem Grund wird das kreative  Unterrichten  der Informatik hier nicht weiter über die Tats ache hinaus betrachtet, dass die Berücksichtigung und  Förderung von Kreativität beim Lehren auch als kr eatives Unterrichten verstanden werden kann.  50  Kreativität in der informatischen Bildung    Neben diesen Versuchen, in de nen Kreativität erfolgreich zur Verbesserung des Lernerfolgs  eingesetzt wurde, fordern einige Wissenschaftler me hr Kreativität in der informatischen Bildung,  da  • Absolventen häufig zu wenig Kreativität und Problemlösefähigkeiten besitzen (Mittermeir  2000),   • Kreativität im Curriculum unterrepräsentiert ist (Sweeney 2003),  • Frauen ihre Informatikausbildung abbrechen , weil sie in Informatikkursen nicht genug  Raum für individuelle Kreativität finden (Guzdial und Soloway 2002) und  • Kreativität als die höchste Form von Bildung angesehen wird, auch im Bezug auf Computer Literacy (Van Dyke 1987).  Aussagen und Ergebnisse zur Technologie-Perspektive  IKT werden als hilfreiche Werkzeuge zur Un terstützung von Kreativität angesehen. Viele wissenschaftliche Arbeiten beschäftigen sich entspreche nd damit, was IKT zur Unterstützung kreativen  Arbeitens leisten können.  Dennoch gibt es nur wenig Artikel, welche die Möglichkeiten von IKT  bezogen auf die Schulinformatik thematisieren. Wheeler, Waite et  al. (2002) untersuchten den  Einfluss von IKT auf kreatives Lernen in einer e nglischen Grundschule. Sie fanden heraus, dass  Lehrer durch die Einbeziehung von Computern im Unterricht mehr offene Aufgaben stellten und  diese variablere Lernstile zuließen. Ebenso konnt en unterschiedlichere Leistungsniveaus besser  berücksichtigt werden. Clements (1995b) unterst reicht, dass IKT zwar zunehmend als Kreativitätswerkzeuge erfolgreich eingesetzt werden, di ese aber genauso unkreative Lernansätze unterstützen können. Die Förderung von Kreativität hängt von der Art der eingesetzten Software und den  Rahmenbedingungen, z. B. dem Curriculum ab.  Ein Verständnis von Konzepten der Informatik ist grundlegend wich tig für eine kreative Nutzung  von IKT, auch in anderen Fächern (vgl. Comput er Science and Telecommunications Board 1999).  Im Bezug auf Programmierung und Kreativität wurd e mehrfach der Einsatz von LOGO untersucht.  Es konnte gezeigt werden, dass LOGO elementare  Prozesse kreativer Leistungen unterstützt  (Papert 1993; Clements 1995a).   Aussagen und Ergebnisse zur Mensch-Perspektive  In den Betrachtungen zu Kreativität und Informa tik konnte bereits fest gestellt werden, dass  intrinsische Motivation und Kreativität in einem sich  wechselseitig bedingenden Verhältnis stehen  und dass dies in Studien mit Programmierern best ätigt wurde. In einer Fallstudie zur Spieleprogrammierung in der informatischen Bildung wurde von Long (2007) die Motivation der  Lernenden untersucht. „Die Mög lichkeit, Probleme selbst zu lösen“ und „die Möglichkeit, kreativ  zu sein“ waren in dieser Studie die wichtigsten Faktoren, welche intrinsische Motivation beeinflussten. Dies kann als Anhaltspunkt dafür dienen, dass auch in der inform atischen Bildung das  Gefühl und die Möglichkeit von Kreativität intrinsische Motivation fördern.  Da Grundstudiumskurse der Informatik, zumeis t Einführungskurse in die Programmierung,  oftmals nur schlechte Ergebnisse liefern, wurden  bereits viele Untersuchungen durchgeführt,  welche die Gründe für das schlechte Abschneiden  der Studenten herauszufinden versuchten. Von  folgenden Ergebnissen wird bzgl. Motivation berichtet:  • Hoch-intrinsisch motivierte Studenten brachte n bessere Leistungen (Bergin und Reilly 2005)  • Viele Studenten waren an sich nicht grundsät zlich am Programmieren interessiert (Curzon und  Rix 1998; Mamone 1992)  • Motivation konnte durch die Verwendung von bede utsamen Aufgaben und Übungen gesteigert  werden (Rich, Perry und Guzdial 2004;  Tharp 1981; Feldgen und Clua 2003)  • Motivation konnte durch persönlich herausford ernde Aufgaben verbessert werden (Lawrence  2004)  Kreativität in der informatischen Bildung 51    Auch in deutschen Schulen wird Informatik oftm als als kompliziertes, technisches Fach aufgefasst.  Auch hier führt die Programmierung als Unterrich tsinhalt oftmals zu Desinteresse, Motivationsverlust und schlechten Schülerleistungen. Bisher  wurde offensichtlich noch nicht der optimale  Weg gefunden, Schüler und Studenten an die In formatik heranzuführen. Ein Teil des Schlüssels  zum Erfolg könnte Kreativität sein: Während im  Unterrichtszusammenhang Programmieren oft  nicht als motivierend und kreativ erlebt wird, l assen sich außerhalb des Unterrichts auch bei  Schülern interessante Beobachtungen machen: Das Entwickeln von Software kann auch auf  Informatikschüler bzw. -studenten einen faszini erenden Einfluss ausüben, ähnlich wie bei OpenSource-Programmierern (vgl. Kapitel 2, Abschnitt 2.3). Auch Schüler und Studenten investieren  mitunter einen enormen Teil ihrer Freizeit zum Entwickeln von Software und lernen Programmiersprachen sogar autodidaktisch. Die von Lakhani und Wolf (2005) festgestellten kreativitätsverwandten Faktoren, die für die intrinsische Motivation und folglich für die Beteiligung an Softwareprojekten verantwortlich waren (beabsichtigte r Gebrauch, Reputation, Identifizierung mit der  Gruppe, Lernen), lassen auch für die Förderung von  Motivation in der Schulinformatik Implikationen zu.   Berücksichtigung des Gebrauchs:   Ein offensichtlicher Grund, eine Software zu en twickeln, ist der Wunsch, diese später auch zu  verwenden. Wenn ein Schüler ein Problem hat, we lches er nicht mit verfügbarer Software lösen  kann, so muss er eine solche Software selbst entwickeln oder verfügbare  Software seinen Wünschen entsprechend anpassen. Für den Unterricht be deutet dies, dass Aufgaben für Schüler eine  Bedeutung besitzen und sinnvoll sein sollten, idealerweise so, dass ein Produkt später auch verwendet werden kann. Eine „Pseudo-Problem orientierung“, wie bspw. das Modellieren einer  Taschenlampe auf dem Computer, e rfüllt diese Anforderung nicht.   Breites Feedback ermöglichen:  Normalerweise erhalten Schüler Feedback nur dur ch den Lehrer. Motivation kann dadurch gesteigert werden, dass Schüler ihre Ergebnisse zum einen vor der Klasse präsentieren, zum anderen aber auch aus dem Klassenraum hinaustragen, z. B. durch Präsentation im Internet, wodurch auch  Eltern und Freunde erreicht werden.  Identifikation mit der Gruppe:  Gruppenprojekte gehören bereits zu den typischen Arbeitsformen im Informatikunterricht. Längerfristige Gruppenprojekte können zur Identifizier ung mit den Gruppenzielen führen und gemeinschaftliches kreatives Arbeiten anregen. Dieses Motiv kann bspw. in Gruppenprogrammierprojekten angewandt werden.  Sinnvolles Lernen:  Während sich Open-Source-Programmierer auch krea tiv betätigen, um dabei zu lernen, ist Lernen  im Schulkontext häufig vordergründig extrinsisch  motiviert. Schafft es ein Lehrer allerdings,  Schülern den Nutzen von Wissen und Konzepten zu vermitteln und finden die Schüler das Entwickeln von Software interessant, kann das Ziel , hierin besser zu werden, motivierend sein. 71    Alle diese Beiträge zeigen ein breites Spektrum an  Beispielen, bei welchen sich Kreativität positiv  ausgewirkt hat und wo Kreativität erfolgreich zu r Verbesserung des Lernerfolgs angewandt wurde.  Vor diesem Hintergrund ist es erstaunlich, dass die Möglichkeiten, die Kreativität bietet, nicht häufiger in der informatischen Bildung angewandt werden.                                                           71 Dies kann bei besonders motivierten  Informatikschülern beobachtet werden, die Programmieren als Hobby entdeckt  haben und den Lehrer nach weiteren In formationen, die we it über den Unterrichtsinhalt  hinausgehen, befragen.  52  Kreativität in der informatischen Bildung    4.3 Verwandte Ansätze und Proj ekte kreativen Lernens  Programmieren als Ausdrucksmöglichkeit persönlicher Ideen   Bereits 1977 prognostizierten Ka y und Goldberg (1977) eine nachhaltige Beeinflussung des  Lernens durch Multimedia. In ihren Erfahrungen mit dem Dynabook spielte die Möglichkeit,  selbst zu programmieren, für Kinder eine wesentliche Rolle:  […] the kids love it! The interactive nature of th e dialogue, the fact that they are in control,  the feeling that they are doing real things rather than playing with toys or working out “as-signed” problems, the pictorial and auditory natu re of their results, all contribute to a tremendous sense of accomplishment to their experien ce. Their attention spans are measured in  hours rather than minutes.   Erfahrungen zeigen, dass dies bei heutigen, an Medien gewöhnten Schülern nicht anders sein  muss. Aus eigenen Erfahrungen kann ich von Schülern berichten, die nach der Einführung in die  Programmierung begeistert feststellen: „Der Computer macht das erste mal genau das, was ich  will!“   Auch Peppler und Kafai (2005) sehen Programmi erkenntnisse als Voraussetzung, um sich in  digitalen Medien kreativ ausdrücken zu können und basieren ihre Aussage auf Erfahrungen in  einem Digital Design Studio. Dabei warnen sie a llerdings davor, Programmierprojekte im mathematischen oder wissenschaftlichen Zusammenhang anzusiedeln, sondern empfehlen Medien  einzusetzen, die sich als Hauptinteresse der Sc hüler herausgestellt haben: Grafik, Musik und  Video.   Kynigos (1995) beschreibt Programmieren als ei ne Möglichkeit für Kinder und Schüler, Ideen  auszudrücken und daran zu lernen. Programmierb arkeit identifiziert er als wichtiges Merkmal  explorativer Lernsoftware:  Programming thus allows a merging of intuitive a nd reflective thinking. Furthermore, just as  in language, programming allows the pupil to create, extend and enrich a domain-specific vocabulary […] and, unlike spoken and written language, it enables pupils to design and construct objects.   Diese Eigenschaft wurde von Papert und Harel (19 91) in der Lerntheorie des Konstruktionismus  verdeutlicht. Aufgrund der Relevanz für den In formatikunterricht soll hier das Konzept des  Konstruktionismus noch einmal aufgegriffen werden.  Kreatives Lernen als konstruktionistisches Lernen  Konstruktionismus teilt die Vorstellung des Konstr uktivismus, in welche m Lernen als aktiver  Prozess verstanden wird, bei dem Wissensstrukturen  konstruiert werden. Dem wird allerdings ein  Aspekt hinzugefügt:   [Learning] happens especially felicitously in a context where the learner is consciously engaged in constructing a public entity, whether it's a sand castle on the beach or a theory of the  universe. (Papert und Harel 1991)   Die Konstruktion geschieht damit nicht nur im K opf des Lernenden, sondern als Konstruktionsprozess in der realen oder virtuellen Welt. Ein solc hes Produkt kann ausprobiert, gezeigt, diskutiert  und analysiert und auch bewundert werden. Der Le rnende wird hierbei „eins“ mit dem Phänomen  das betrachtet werden soll, statt es nur „von außen“ zu betrachten.   Vor diesem Hintergrund stellt sich kreatives Lernen  im Informatikunterricht, welches immer das  Erschaffen eines Produkts oder Artefakts zum Ziel  hat, als konstruktionistisches Lernen dar.  Kreatives Lernen fügt dem den Aspekt des Pr oblemfindens und Situierens des zu erschaffenen  Produkts vor den Gegebenheiten und ei genen Möglichkeiten hinzu.   Kreativität in der informatischen Bildung 53    Kreatives Lernen für die kreative Gesellschaft  Resnick (2007b) unterstreicht die Rolle von IKT zur Vorbereitung der Schüler auf die Kreative  Gesellschaft72. Während IKT zum einen die Entwicklung in  allen Bereichen de s Lebens beschleunigen und damit kreatives Denke n erforderlich machen, können diese Technologien – wenn sie  entsprechend ausgewählt und eingesetzt werden – Schüler bei der Entwicklung zu kreativen  Denkern unterstützen. Seiner Meinung nach geschie ht dies am besten, wenn der Lernprozess einer  „creative thinking spiral“ folgt (vgl. Abbildung 24).   In this process, people imagine what they want to do, create a project based on their ideas,  play with their creations, share their ideas and creations with others, and reflect on their experiences—all of which leads them to imagine  new ideas and new projects. As students go  through this process, over and over, they learn to develop their own ideas, try them out, test  the boundaries, experiment with alternatives, ge t input from others, and generate new ideas  based on their experiences. (Resnick 2007b, S. 18)       Abbildung 24: Creative thinking spiral (nach Resnick 2007a).  Computer Club Houses  Resnick (2007a) berichtet darüber, wie in Co mputer-Clubhäusern eine kreative Verwendung von  Computern gelernt wird. Das Projekt der „Computer Clubhouses“ (vgl. Resnick und Rusk 1996)  verfolgt das Ziel, Schülern ein kreatives Lernen  mit Computern zu ermöglichen. Der Clubhouse  Lernansatz wurde 1993 in Zusammenarbeit mit de m MIT Medialab in den USA entwickelt und  expandiert mit Ablegern inzwischen weltweit. De m Lernansatz liegen vier Leitprinzipien zugrunde: Lernen durch Design, Folgen eigener Intere ssen, Bilden einer Gemeinschaft und eine Umgebung des Respekts und Vertrauens. Auch wenn info rmatische Bildung nicht das primäre Ziel des  Clubhouse-Lernansatzes ist, sondern vielmehr in terkulturelle Verständi gung und ein tolerantes  Miteinander angestrebt werden, so lernen die Teilnehmer hier quasi „nebenbei“ grundlegende  Verfahren, Konzepte und Anwendungen der Informatik.   Fazit  Die wissenschaftlichen Untersuchungen zur Kreativitä t in der informatischen Bildung lassen sich  drei Kreativitätsperspektiven zuordnen: Di e Bemühungen zur Steigerung von Motivation und  Interesse der Schüler und Studenten versuchen die Chancen der Mensch-Perspektive wahrzunehmen; Studien zu kreativem Problemfinden und Pr oblemlösen beziehen sich auf informatische                                                         72 Die Bezeichnung Kreative Gesellschaft  nutzt Resnick als logische Konsequenz  aus der Diskussion um die Informationsgesellschaft oder Wissensgesellschaft. Sein er Meinung nach befinden wir uns in einer Kreativen Gesellschaft , in  welcher sich kreative Denkfertigkeiten als ausschl aggebend für Erfolg und Zufriedenheit darstellen. 54  Kreativität in der informatischen Bildung    Prozesse, also die Fach-Perspektive; Untersuc hungen zu Informatiksystemen zur Förderung von  Kreativität sind der Technologie-Perspektive zuzuor dnen. Alle genannten Studien heben verschiedene Chancen hervor, die sich aus Kreativität er geben (z. B. Motivation, Interesse, Förderung  persönlicher Kreativität, Einblick in kreative Pr ozesse der Informatik) und verschiedene Instrumente, um diese zu erreichen (z. B. offene Aufgaben, Prototypen, Bearbeitung eigener und  herausfordernder Probleme).    Auf den Grundideen der dargestellten kreativitä tsverwandten Ansätze und Projekte basieren  verschiedene pädagogische Werkzeuge und Progra mmiersprachen, wie LOGO, Smalltalk, Squeak  und Scratch, welche im In formatikunterrichts bereits73 eingesetzt werden und in Zukunft vermutlich noch stärkeren Einfluss nehmen werden. Problematisch ist, wenn diese Entwicklungen von  den zugrunde liegenden Ideen iso liert verwendet werden. Dann würde nicht nur viel Potential  verschenkt; das Ignorieren oder gar Unterbinde n der kreativen Möglichkeiten dieser Werkzeuge  könnte gar bei den Schülern zur Frustration führ en. Insbesondere bei der Betrachtung von Resnicks „creative thinking spiral“ wird deutlich, dass sich Informatikunterricht bisher häufig nur auf  die Aspekte des „create“ (wenn überhaupt!) und „r eflect“ zu beschränken scheint. Ursachen und  eine mögliche Lösung für diese Problematik werden im folgenden Abschnitt diskutiert.  4.4 Herausforderungen als kreativer Zugang zu Problemen74   In der Praxis des Informatikunt errichts und der Informatikdidak tik haben sich verschiedene  Vorgehensweisen etabliert, die für kreatives Arbe iten problematisch sind. Im Folgenden sollen  diese vor dem Hintergrund kreativen Lernens problem atisiert werden und ein alternatives Vorgehensmodell für die Gestaltung kreativer Unte rrichtssequenzen vorgeschlagen und begründet  werden.   4.4.1 Informatik-Lernen hat sich verändert  Ein wesentlicher Teil des Erfolgs der dargestellten Projekte basiert auf der Berücksichtigung der  geänderten Umstände und Lernvor aussetzungen der Schüler. Diese wa chsen in einer technisierten  Welt auf und verstehen IKT zunehm end als Medien, die in der Freizeit verwendet werden, Spaß  machen und bei der Selbstverwirklichung helfen  können. Folgt man de r Begrifflichkeit der  Digital-Natives vs. Digital-Immigrants-Argumenta tion (vgl. Prensky 2001) wird gar die groteske  Situation deutlich, dass im Informatikunterricht DigitalNatives  von DigitalImmigrants  unterrichtet werden, was mitunter an überholten Unterrich tsgegenständen deutlicht wird. Vor dem Hintergrund der immer intuitiver werdenden Bedienbark eit von IKT und Benutzerschnittstellen hat sich  der Fokus des Informatikunterrichts weg von der Nutzungsschulung hin zu Kerninhalten der  Informatik entwickelt. Hierbei hat sich „Probl emlösen“ als zentraler Unterrichtsinhalt etabliert.  Fraglich ist, ob diese Beschäftigung mit „vorgesetzt en“ Problemen bei den heutigen Schülern die  richtige Motivation hervorruft oder ob sich ihre  Bedürfnisse nicht besser berücksichtigen lassen  (vgl. Guzdial und Soloway 2002).  Wie die Lernforschung zeigt, ist Lernen nicht nur  ein rationaler Akt, sondern passiert auch in  emotionalen Zusammenhängen (vgl. Lewis, Petrin a und Hile 1998; Hascher 2005). Das bedeutet,  dass nicht allein das Aneignen von Wissen ausreicht,  um ein guter Problemlöser zu werden. Es ist  genauso wichtig, wie ein Lernender über das, was gelernt werden soll, fühlt und welche Bedeutung  der Lerngegenstand für den Lerne nden hat. Für den Informatikunt erricht impliziert das, den  Computer nicht mehr nur als „Rechenmaschin e“ wahrzunehmen, sondern auch als Medium  persönlichen Ausdrucks.  Mit der Änderung der Sichtweise auf den Computer  ist auch eine Änderung der Unterrichtsmethodik für den Informatikunterricht notwenig. So is t in der Informatikdidaktik das Problem der                                                         73 Bzw. wie im Fall von LOGO sogar schon lange.  74 Dieser Abschnitts wurden bereits zum Teil sinngemäß und zu m Teil wortwörtlich in (Rom eike 2008f) veröffentlicht.  Kreativität in der informatischen Bildung 55    prozeduralen Unterrichtsmethodik seit langem be kannt: Statt schrittweiser Instruktion wird  postuliert, zugrunde liegende Konzepte zu betonen.  Dennoch scheint sich dies nur bedingt erfolgreich durchzusetzen. Ein Grund hierfür könnte sein, dass die Aufgaben gleich blieben und damit  auch der Ansatz des Unterrichts. Ist eine Ände rung der Methodik gewünscht, müssen neue Unterrichtskonzepte auch mit neuen Aufgaben realisiert  werden. Bisher wird häufig ein Problemlöseansatz verwendet, wie er im professionellen Informa tikbereich vermutet wird: Schüler erhalten den  Auftrag, Probleme eines „Kunden“ (d em Lehrer) zu lösen. Die Brisanz dieser Problematik wird im  Folgenden anhand verschiede ner Beispiele verdeutlicht.  4.4.2 Probleme des Problemlöseansatzes in der Praxis   Probleme sind oftmals nicht Probleme (sondern Aufgaben)   Ein Problem  kann definiert werden als ein Hindern is, das zwischen einer Person und einem  angestrebten Ziel steht (vgl. Häcker und Stapf 1998; Cambridge 2008; Wordsmyth 2007). Diese  Definition steht im Gegensatz zum Verständnis von „etwas, das getan werden muss“ , was eine  Aufgabe bezeichnet.75 Dieser Unterschied wird von Lehr ern häufig übersehen, so dass viele  „Probleme“ im Wesentlichen darin bestehen, das Rezept zur Lösung einer Aufgabe zu finden,  woraufhin das Problem trivial und in wenigen Schritten lösbar wird; im Programmierkontext  typischerweise durch Implementieren von Code. Schüler müssen in solchen Situationen ihr  Vorgehen nicht reflektieren und brauchen sich  über das Konzept hinter dem Problem keine  weiteren Gedanken machen. Stattdessen suchen sie nach einer Möglichkeit, wie sie schnellstmög-lich vom Ursprung des Problems zu seiner „Lösung“ kommen. 76  Ein Schulbuch-Beispiel illustriert dieses Problem77:   [Gegeben ist ein Programm, welches zwei  Zeiten (Minuten und Sekunden) addiert.]  Erweitern Sie das Programm so, dass auch Tage  eingegeben und verarbeitet werden können!  (Fothe 2002, S. 8)   Ein typischer Schüleransatz wäre, die dargeste llten Programmzeilen zu kopieren und den Umrechnungsfaktor anzupassen. Dies ist in der Tat eine Lösung für die gegebene Aufgabe. Das Lernergebnis bleibt allerdings fraglic h. Der Schüler hat sein mathematisches Wissen über die Umrechnung von Tagen in Stunden aufgefrischt, aber er  hat keine Informatikkonzepte gelernt oder  gefestigt. Dies führt zu einem weiteren Problem.  Probleme sind oft keine Informatikprobleme, sondern mathematische Probleme   Der Umstand, dass Computer (zu deutsch: Rechne r) ursprünglich vor allem für mathematische  Berechnungen verwendet wurden, scheint bis heute einen erstaunlichen Einfluss auf die informatische Bildung auszuüben: Viele Probleme entstammen der Mathematik. Fraglic h ist, ob Schüler im  Informatikunterricht nicht besser lernen sollte n, Probleme der Informatik mit Methoden der  Informatik zu lösen, da sich d as Fach sonst seiner Legitimation beraubt. Viele Beispiele illustrieren dieses Problem:   [Gegeben ist ein Python-Programm zum A ddieren zweier gemeiner Brüche.]   Erweitern Sie ihr Programm um das Subtrahi eren, Multiplizieren und Dividieren zweier gemeiner Brüche! (Fothe 2002, S. 15)                                                          75 Aufgabe lässt sich definieren als „Arbeit die zu erledige n ist“ oder als „geistige Anforderung, für deren Bewältigung  Methoden bekannt sind“ (Häcker und Stapf 1998; Oxford 2007).  76 Bereits Ausubel, Novak et al. (1982) stellen diesbezüglich fest: „Im mathematischen und naturwissenschaftlichen  Unterricht ist das Lösen von Standardproblemen meistens  kaum etwas anderes als m echanisches Memorieren und  mechanisches Anwenden von Formeln, mechanisches Manipulieren mit Symbol en und der Gebrauch von eigentlich  irrelevanten Schlüsseln für die Identifizierung von Problemen als Angehörige einer Klasse von Problemen“  (S. 652).  Informatiklehrer machen sich diesen Ansatz offensichtlich zu eigen.  77 Problematisch ist meiner Ansicht nach weniger das Verwenden einfacher Übungsaufgaben zur Verdeutlichung der  Lerninhalte als vielmehr die Bezeichnung solcher Aufgaben als „Problemlösen“, wodurch auch ein fragliches Verständnis von Problemlösen geprägt wird.  56  Kreativität in der informatischen Bildung    Weitere Beispiele finden sich z. B. in den populären Programmieraufgaben zum GGT.78 Diese  Beispiele haben gemeinsam, dass Schüler eine mathematische  Lösung für ein gegebenes Problem  finden, lösen und anschließend in Programmtext im plementieren sollen. In diesen Aufgaben ist  kein algorithmisches Problemlösen involviert.   Auch in der informatikdidaktischen Forschung set zt sich die Problematik fort, dass mathematisches Problemlösen mit algorithmischem Problemlösen gleichgesetzt wird. Im Artikel „Misleading  Intuition in Algorithmic Problem Solving“ (Ginat 2001) demonstriert der Autor, wie Intuition auf  der Suche nach einer Problemlösung eine Hürde darstellen kann.   A long railway is divided into many equal sections. The distance between every two adjacent  sections is 1. N wagons are placed in N diff erent sections which are not necessarily consecutive. How can the railroad workers move all the w agons to one of the sections such that the  sum of all movements is minimal?   Das Problem in dieser Aufgabenstellung (Mittelwer t oder Median?) ist allerdings mathematischen  Ursprungs und stammt nicht aus der Informatik. Wie berichtet, wählten die Studenten eine falsche  mathematische  Lösung, keinen falschen Algorithmus.   Zusätzlich kritisch bei der Anwe ndung mathematischer Probleme is t der motivationale Einfluss  dieses recht unpopulären Fachs für die Schüler.79  Probleme haben oft keinen Bezug zum Schüler  Die Lernforschung unterstreicht, dass Lernende bessere Leistungen bringen und dann motivierter  sind, wenn eine Aufgabe für sie eine Bedeutung b esitzt. Diese Sichtweise kann auf das Problemlösen übertragen werden. Ein Problem ist releva nt und bedeutungsvoll für einen Schüler, wenn es  Bezug zu seiner Lebenswelt aufweist, wenn er es wirklich als Hürde auffasst und wenn er das  angestrebte Ziel auch wirklich erreichen will.  Häcker und Stapf (1998) charakterisieren ein  Problem anhand zweier weiterer Komponenten : einem unerwünschten Ausgangszustand und  einem erwünschten Endzustand. Stellt ein Problem sich nicht als Problem für den Schüler dar,  z. B. weil es ihm nur vom Lehrer auferlegt wurde ode r es sich darüber hinaus nur um eine Aufgabe  handelt, zu welcher der Lehrer die Lösung bere its kennt, sind die Bedingungen an ein Problem in  diesem Verständnis nicht erfüllt – es fehlt die i nnere Motivation, das Problem zu lösen.   Diese Faktoren spielen typischerweise auch in den oben beschriebenen Szenarien eine Rolle.   4.4.3 Ansätze zur Bewältigung der Probleme des Problemlösens   Im Kontext des Problemlösens wird von einigen Forschern der Blick auf einen oft übersehenen  Aspekt des Problemlösens erweitert, welcher ab er in der Informatik und für Kreativität eine  wichtige Rolle spielt: das Erkennen von Problemen.80 In empirischen Studien zur informatischen  Bildung wirkte sich die Berücksichtigung dieses As pekts positiv auf die Motivation und Leistungen der Lernenden aus. Dazu gehört das Besti mmen eigener Aufgaben (vgl. Runco und Chand  1995; Fasko 2000), Lehren von Problemfindefer tigkeiten (Kaasbøll 1998; Eastman 2003 ) und  Verwenden „schlecht-definierter“ Probleme (Reed 2002).  Nach Meinung einiger Autoren ist die Entwickl ung von Fertigkeiten im Problemfinden offenbar  genauso wichtig, wie die Fähigkeit, Probleme zu lösen (vgl. Fasko 2000).   Im vorherigen Abschnitt wurde bereits auf die Notwendigkeit der Berücksichtigung persönlicher  Aspekte der Lernenden hingewiesen. Auch Kont extualisierung, Persona lisierung und Wahlmög                                                       78 Papert (2000) verwendet ein ähnliche s Beispiel zur Demonstration mangelnde r persönlicher Relevanz abstrakter  Unterrichtsinhalte:  “Learning how to find the common denominator of a bunch of fractions is boring for [the student]  because he is not able to use it in any exciting way. It  supports neither flights of th e mind nor “hands-on” projects”   (S. 722).  79 Durchaus haben mathematische Probleme den Vorteil, dass sie exakt definierbar sind. Dieses ist allerdings untypisch  für die Informatik und bringt zusätzlic h die Nachteile, dass nur eine richti ge Lösung möglich und das Problem meist  lebensweltfern ist.  80 Auch Problemfinden, Problemform ulieren oder Problemmanagement.  Kreativität in der informatischen Bildung 57    lichkeiten können sich positiv auf Motivation und Le istungen auswirken. Schüler sind Individuen  und bringen ihre eigenen Ideen, Wünsche und Bedürfnisse mit. Diese können angesprochen  werden, so dass die Schüler ermutigt werden, im Unterrichtskontext ihre eigenen Ziele zu entwickeln. Wenn sie daran arbeiten, diese Ziele zu rea lisieren, stoßen sie auf Probleme, denen sie gern  entgegentreten und dann motiviert lösen. Das impl iziert die Anforderung an Lehrer, Lernsituationen in einer Weise zu beeinflussen, dass die Schüler inspiriert werden, eigene Ideen zu entwickeln  und damit eigene Herausfo rderungen finden. So lösen sie Probleme, die für sie eine Bedeutung  besitzen. Für Kreativität ist eine solche He rausforderung eine wichtige Voraussetzung (vgl.  Kapitel 2).  Die Kernideen des situierten Le rnens, entdeckenden Lernens und Konstuktionismus unterstützen  diese Auffassungen und fügen zwei Aspekte hinz u: Demnach sind die Lernsituation und das  Generieren von Ideen im aktiven Lernprozess zu be rücksichtigen, im aktuellen Kontext offensichtlich schon ehe die Phasen des Problemfindens bz w. Problemlösens beginnen. Bereits bei der  Betrachtung verschiedener Modelle  des kreativen Prozesses konnte festgestellt werden, dass das  Finden eines Ziels, das sich als interessante  Herausforderung darstellt, und die Berücksichtigung  des Umfelds wesentliche Bestandteile von kreativ en Prozessen sind (vgl. Kapitel 2, Abschnitt  2.1.2), und dass deren Berücksichtigung zu de n wirksamsten Mitteln der Kreativitätsförderung  gehört (vgl. Kapitel 2, Abschnitt 2.4).    4.4.4 Der Challenge-Cycle   Die Ergebnisse der bisherigen Überlegungen finden integriert in einem Vorschlag für ein Unterrichtsframework Anwendung, welches für kreatives Lernen im Informatikunterricht eine methodische Grundlage bildet. In diesem Framework werd en „traditionelle“ Problemlöseaufgaben durch  Challenges81 ersetzt. Als Challenge wird im Folgenden ein Problem bezeichnet, das für den  Schüler relevant ist, ein meist offenes Erge bnis besitzt und welches vor zugsweise vom Schüler  selbst definiert wurde. Auf diese Weise werden Schüler ermutigt, kreativ zu sein, und lösen  Probleme, die für sie eine Bedeutung besitzen. Schüler folgen dann eigenen Interessen, werden  aber durch den Rahmen des Unterrichtskontexts geleitet. So lernen sie individuell an einem  Thema, welches sie selbst mitgeprägt haben. Lernen  nach diesen Prinzipien soll die Schlüsselfaktoren, die für das Interesse von Schülern verant wortlich gezeichnet werden, unterstützen: Motivation, bedeutungsvolle und persön lich herausfordernde Aufgaben, Relevanz, Kreativität, Anwendbarkeit, Beisteuerbarkeit von Ideen, Experime ntieren und die kreative Anwendung von IKT.   Die Phasen des Challenge-Cycles sind in Abbild ung 25 dargestellt und werden in einer Unterrichtssequenz mehrere Male iteriert. Ein Eintritt kann mit jeder Lernsituation  erfolgen, in welcher  neue Konzepte eingeführt werden. In einer Challenge-Phase  stellt der Lehrer sicher, dass alle für  die Challenge grundlegenden Wissens-Baustein e von den Schülern versta nden und/oder verfügbar  sind. Die Schüler werden nun vorbereitet und inspir iert, eigene Ideen zu entwickeln und eine  persönliche Challenge zu bestimmen. Anschließend wird die Challenge gelöst, implementiert und  präsentiert. Im Folgenden werden die einzelnen Ph asen in einem (idealisierten) Durchlauf näher  erläutert.  Challenge-Phase  Die Situation zum Zeitpunkt des Eintritts in den Challenge-Cycle wird maßgeblich durch individuelle Vorerfahrungen, Wissen, der Lernsituati on und der persönlichen Situation der Schüler  geprägt. Die Lernsituation stellt sich damit al s maßgebliche, durch den Lehrer beeinflussbare,  Variable des Lernprozesses und der Motivation der Sc hüler dar. Vom Lehrer ist sicherzustellen,  dass Wissen und Konzepte, die zur Bewältigung eine r bestimmten Herausforderung notwenig sind,  gut eingeführt wurden oder von den Schülern sel bst erarbeitet werden kö nnen. Des Weiteren sollte                                                         81 Eine Challenge (auch Herausforderung) bezeichnet ein „i nteressantes Problem oder ei ne schwierige Aufgabe“  (Wordsmyth 2007) und „etwas, das [...]  Anstrengung bedarf, um erfolgreich be wältigt zu werden“ (Cambridge 2008).  Wie in Kapitel 4.4.2 dargestellt, erfüllen Problemlöseaufg aben in der Informatik diese Anforderung häufig nicht. 58  Kreativität in der informatischen Bildung    zu Beginn einer Challenge der Betätigungsraum durch eine ungefä hre Zielvorgabe (offene Aufgabe) insofern eingeschränkt werden, dass die Schüler  sich nicht in der Beliebigkeit „verirren“ und  eine Herausforderung wählen, die in der zur Ve rfügung stehenden Zeit gelöst werden kann.   Entsprechend eigenen Beobachtungen entwickeln Schüler eine Menge Ideen, nachdem sie die  Möglichkeiten, die sich aus neuen Konzepten für sie ergeben, entdeckt haben. Aus diesen Ideen  heraus wählen sie eine Challenge, die sie realis ieren wollen. Das Finden der persönlichen Challenge beinhaltet auch das Evaluieren dieser bez üglich der zur Verfügung stehender Zeit, eigenem  Wissen, voraussichtlicher Schwierigkeit und, wenn nötig, ein Anpassen der gestellten Aufgabe.  Typische Merkmale solcher Challenges sind – im Gegensatz zu vielen Problemlöseaufgaben –  Offenheit in der möglichen Bearbe itungstiefe, Relevanz, Originalitä t sowie die Identifikation des  Schülers mit seiner  Herausforderung.    SituationSituation Ideen ChallengeChallenge LösungImplementierenImplementierenTestTest VerbesserungPräsentationPräsentation Evaluieren/Ändern Problemlösen/ managementIdeen zum Lösen der ChallengeIdeen zum Lösen der ChallengeImplementationsphaseChallengephase Problemmanagementphase  Abbildung 25: Challenge-Cycle.  Problemmanagementphase  Nachdem eine Challenge präzisiert wurde, be ginnt die Phase des Problemmanagements. Zu  Beginn dieser Phase werden Ideen generiert, um d as gestellte Ziel zu erreichen. Hier ist das  Beherrschen von Kreativitätstechniken, wie z. B. Br ainstorming, hilfreich. Diese Phase beinhaltet  Problemlösestrategien mit dem Zusatz, dass die Schüler sehr motiviert sind, ihre persönliche Challenge zu bewältigen.   Implementationsphase  Sobald eine Strategie und Lösung für die Cha llenge gefunden wurde, kann das Ergebnis implementiert und getestet werden. 82 Dadurch erhalten die Schüler die Möglichkeit, ihre Lösung auszu                                                       82 Problemmanagementund Implementati onsphase verschmelzen häufig bei der Entwicklung von Teillösungen und  Prototypen und werden mehrfach iteriert.   Kreativität in der informatischen Bildung 59    probieren. Oftmals findet sich Potential, das Pr odukt noch zu verbessern, was dann in der übrigen  Zeit getan werden kann. Das könne n zusätzliche Features sein, eine bessere Bedienbarkeit oder  eine schönere Gestaltung.  Nachdem die Schüler ihr (Mini-)Projekt beendet haben, bietet eine Präsentationsphase den Schülern die Möglichkeit, sich gegenseitig ihre  Ergebnisse vorzustellen. Fragen, Entdeckungen,  aufgekommene Probleme und deren Lösungen werden  mit allen Schülern besprochen und diskutiert. Durch den Lernerfolg beim selbständigen Lösen der Probleme und durch die Inspirationen,  welche die Schüler von einander erhalten haben, si nd die Schüler jetzt bereit, die Grundlagen für  weitere Herausforderungen zu lernen.   4.4.5 Schlussfolgerungen   IKT besitzen das Potential, als Werkzeuge für eine bessere Lebensqualität, zur eigenen Selbstdarstellung und kreativen Selbstverwirklichung geseh en zu werden. Da diese Werkzeuge sowohl  inhaltlich als auch in ihrer Anwendung den Inform atikunterricht prägen, kann diese Perspektive  dafür genutzt werden, dass Schüler die Motivation en twickeln und behalten, sich tiefgründiger mit  Informatik zu beschäftigen. Mit dieser neuen Si chtweise wird eine neue Unterrichtsmethodik  notwendig, wie bereits beim Versuch des Wech sels von softwarenutzungsorientiertem Unterrichten zum Lehren fundamentaler Konzepte festgest ellt werden konnte: Das Ziel wird nur schwer  erreicht werden, wenn die Methoden und Aufgaben  die gleichen bleiben. Der Challenge-Cycle  verspricht Potential zu haben, die traditionelle  Problemlösemethodik zu ersetzen. Er legt eine  methodische Grundlage für die Gestaltung kreativen Informatikunterrichts und wird im Kapitel 8 als Basis für die Entwicklung eines Unterrichtsbeis piels kreativen Informatikunterrichts dienen.  60  Faktorenmodell kreativen Lernens im Informatikunterricht    5 Faktorenmodell kreativen Lern ens im Informatikunterricht  Wie im vorherigen Kapitel verdeutlicht wurde, existieren verschiedenen Ansätze und Möglichkeiten, Kreativität in der informatischen Bildung zu berücksichtigen. Bisher g eschieht das allerdings  kaum. Um eine Grundlage für die Planung und Durc hführung kreativen Informatikunterrichts zu  legen, werden in diesem Kapitel die in der Betrachtung von Kreativität, Informatik und der  informatischen Bildung herausgearbeiteten Fakt oren informatikunterrichtsspezifisch in einem  Faktorenmodell expliziert. Mit diesem Modell wird das Ziel verfolgt, das Phänomen der Kreativität im Informatikunterricht zugä nglich, greifbar und überprüfbar83 zu machen. Das Faktorenmodell  wird darüber hinaus als Grundlage dienen, Kreat ivität im Informatikunterricht empirisch zu  untersuchen.   Zuerst werden die wesentlichen Faktoren, die in den Kapiteln 2 und 3 dargestellt wurden, zusammengefasst und in spezifischen Modellen abstrahi ert, um ausgehend von diesen Modellen, unter  Berücksichtigung der in Kapitel 4 dargestellte n Forschungserkenntnisse, ein Faktorenmodell  kreativen Lernens für den Informatikunterricht aufzustellen.  Wie in den bisherigen Darstellungen deutlich geword en ist, manifestiert sich Kreativität in der  Informatik besonders im Bereic h der Softwareentwicklung. Vergle ichbar mit der Orientierung der  Fundamentalen Ideen der Informatik am Soft wareentwicklungsprozess (vgl. Schwill 1993) soll die  Betrachtung von Kreativität im Informatikunterricht auch hier auf diesen Bereich der Informatik  beschränkt werden. Es ist zu vermuten, dass dies auch  der Bereich ist, der Schülern in erster Linie  als kreative Seite der Informatik bewusst wird. Weitere thematische Anknüpfungspunkte für  Kreativität in der Informatik wurden  im Kapitel 3 charakterisiert.  5.1 Faktoren aus der Perspektiv e der Kreativitätsforschung  In Kapitel 2 wurden im Bezug auf den Inform atikunterricht wesentliche Faktoren, die in der  Kreativitätsforschung diskutiert werden, hera usgearbeitet. Als grundlegende Aussage konnte  festgestellt werden, dass Kreativität im Bildungs kontext aus einer persönlichen Sichtweise (PKreativität) zu betrachten ist und dass eine Förderung von Kreativität möglich und damit eine  Berücksichtigung von Kreativität in der Schule sinnvoll ist.  Als wesentliche Faktoren stellen sich in  der Diskussion folgende Aspekte dar:  Die Betrachtung des Individuums (Mensch)  Hierzu zählen insbesondere motivationale Fa ktoren: Kreativität und intrinsische Motivation  bedingen sich gegenseitig. Die Untersuchung von Pers önlichkeitsmerkmalen sowie die Messung  von Kreativität haben in einer allgemeinbild enden Schule dagegen we niger Bedeutung. Wie  verschiedene Ansätze suggerieren, kann kreatives Tun auch als inhärentes Bedürfnis des Menschen, sich selbst zu verwirklichen, verstanden werden.  Die Betrachtung des Prozesses  Sowohl im Unterrichtskontext als auch hinsichtlic h informatischer Prozesse ist eine strukturorientierte Sichtweise des kreativen Prozesses opportun.  Auch wenn Illuminationen den kreativen  Prozess voranbringen, so lassen sie sich doch nicht erzwingen. Vor dem Hintergrund einer notwendigen Vorbereitung und Auseinandersetzung mit einem Problem entspricht die strukturorientierte Sichtweise besser den Möglichkeiten un d Vorgehensweisen der Informatik. Amabiles  Komponentenmodell (vgl. Abbildung 3) stellt wesentlic he Faktoren dar, die den kreativen Prozess  beeinflussen: Umfeld, Motivation, Wissen und Fertigkeiten.                                                         83 Überprüfbar im Sinne der Unterrichtsevaluation und Anal yse informatischer Lernprozesse, nicht zur Überprüfung von  Schülerleistungen.  Faktorenmodell kreativen Lernens im Informatikunterricht 61    Die Betrachtung des Umfelds  Die Gestaltung der Umgebungsfaktoren des kreativ en Prozesses hat einen erheblichen Einfluss auf  die Entfaltungsmöglichkeiten von Kreativität. Diese sind im Unterricht durch den Lehrer positiv  gestaltbar, z. B. durch das Stellen und Ermög lichen von Herausforderungen, Freiheit, Ressourcen,  Unterstützung und Ermutigung.   Die Betrachtung des Produkts  Während sich ein Teil der Kreativitätsforschung mit der Bestimmung gezeigter Kreativität und  von Kreativitätsmerkmalen anhand von Produkten besch äftigt, ist dies in einer allgemeinbildenden  Schule mit Blick auf die in der situationsorien tierten Sichtweise dargestellten Problematik nicht  empfehlenswert. Vielmehr sollten bei der Betrach tung des Produkts die motivationalen Vorteile  für den einzelnen Schüler sowie die Vorteile de s konkreten Lernens (Konstr uktionismus) durch die  Möglichkeit der Untersuchung von Produkten im  Informatikunterricht genutzt werden.    Die genannten Faktoren beeinflussen sich gege nseitig (vgl. Abbildung 26). Chancen, die sich  durch Kreativität ergeben, sind zum einen die Förderung intrinsischer Motivation durch die kreative Betätigung, zum anderen kann durch de n Wechsel von konkretem und abstraktem Denken  ein besseres Verständnis für die Lerninhalte erwa rtet werden. Nicht zuletzt wird hierdurch das  Erreichen der höchsten kognitiven Lernzielstufe (vgl. Kapitel 2, Abschnitt 2.5) angestrebt.     Mensch Produkt ProzessUmfeld   Abbildung 26: Modell der Einflussfaktoren von Kreativität.  5.2 Faktoren aus der Perspe ktive der Informatik   So, wie sich in der Betrachtung der Kreativitätsfo rschung unterschiedliche Sichtweisen herauskristallisiert haben, ist auch bei de r Betrachtung der Informatik das Einnehmen versch iedener Perspektiven notwendig, um die Facetten der Kreativität zu erfassen. Während die Betrachtungen zur  Mensch-Perspektive, Technologie-Perspektive und Fach-Perspektive unmittelbar für den Informatikunterricht relevant sind, stellen die Kunst-Pe rspektive und die Perspektive der artifiziellen  Kreativität vor allem thematische Zugänge zur Kreat ivität in der Informatik dar. Diese eignen sich  zwar für eine thematische Verankerung informa tischer Inhalte, werden aber aufgrund der mangelnden methodischen Relevanz im Folgenden vernachlässigt.   Ein zentraler Stellenwert wird entsprechend de r Grundannahme dem Softwareentwicklungsprozess  eingeräumt, wie auch am Modell des kreativen Softwareentwicklungspro zesses verdeutlicht wurde  (vgl. Abbildung 14).   Betrachtungen aus der Mensch-Perspektive  Das Gestalten von Softwareartefakten kann motivie ren und Spaß machen. Hierbei ist es vor allem  das Gefühl der kreativen Betätigung, welches einen maßgeblichen Einfluss auf die Motivation  ausübt. Ob ein Produkt nun tatsächlich eine krea tive Leistung nach den Kriterien der Kreativitätsdiagnostik darstellt, stellte sich in den im Ka pitel 3, Abschnitt 3.2 angegebenen Studien als 62  Faktorenmodell kreativen Lernens im Informatikunterricht    erstaunlich irrelevant heraus. Versucht man diese Eigenschaft der Softwareentwicklung im Informatikunterricht zu nutzen, impliziert diese Fest stellung, dass die Einschätzung oder Bewertung  eines kreativen Produkts unterbleiben sollte.84 Wie die Studien mit professionellen Softwareentwicklern zeigen, sind es vor allem die den eige nen Bedürfnissen entsprechenden Herausforderungen, die für den Spaß und die Motivation hierbe i sorgen. Offensichtlich lassen sich die in der  Kreativitätsforschung beschriebenen motivationa len Bestrebungen des Menschen, sich durch  Kreativität selbst zu verwirklichen, auch in der Informatik belegen. Die in Kapitel 4 zusammengefassten Studien legen einen vergleichbaren Effe kt in der informatischen Bildung nahe.   Betrachtungen aus der Fach-Perspektive  Softwareentwicklung stellt sich in der Informatik al s kreativer Prozess dar, der sich an der Erstellung eines (häufig kreativen) Produkts orientie rt und von Informatikern als kreativ empfunden  wird. Dies unterstreicht den zentralen Stellenwer t von Kreativität im Fach. Fachcharakteristika  vereinfachen kreatives Tun: Das Verständnis gr undlegender Informatikkonzepte als Bausteine,  deren gute Dokumentation und damit Verständlic hkeit und Anwendbarkeit. Die Relevanz der  Baustein-Metapher in der informatischen Bildung ist an verschiedenen Stellen dokumentiert (z. B.  Bruce, Buckingham et al. 2004; Duraes und Madeira 2006; Begel 1996).  Betrachtungen aus der Technologie-Perspektive  Das Umfeld informatischer Prozesse wird maßgeblich durch auf IKT basierende Werkzeuge  geprägt. Aus Sicht der Technologie-Perspektive st ellen sich verschiedene Faktoren als begünstigend für Kreativität dar. Zum einen bringt Inform atik IKT hervor, die Kr eativität unterstützen oder  in gewissen Bereichen oder für bestimmte Pe rsonengruppen erst ermöglichen. Zum anderen  werden in der Informatik selbst kr eativitätsunterstützende IKT angewandt.85 Dazu zählen viele  Entwicklungsumgebungen, Modellierungstools oder Visualisierungswerkzeuge. Des Weiteren  gehört die Erforschung und Ausreizung der Möglic hkeiten der vorhandenen Technologien zu den  wichtigsten Förderern von Kreativität in der Informatik.    MenschPerspektive Prozess FachPerspektiveTechnologiePerspektiveMenschPerspektive Prozess FachPerspektiveTechnologiePerspektive   Abbildung 27: Relevante Kreativitätspers pektiven aus Sicht der Informatik.  5.3 Entwicklung des Faktorenmodells   Die herausgearbeiteten Faktoren werden nun unter Berücksichtigung der Anforderungen des  Informatikunterrichts in einem Faktorenmode ll zusammengefasst, welc hes die für kreatives  Lernen im Informatikunterricht relevanten Faktor en darstellt. Im Folgenden werden die Entwicklung des Modells erläutert und die den einzel nen Faktorendimensione n zugrunde liegenden  Hypothesen herausgestellt.                                                          84 Im Gegensatz zur Ermutigung und Bel ohnung, wenn Schüler kreative Bemühungen tätigen, eigene Ideen einbringen  und eigene Wege gehen.   85 Wie in Kapitel 3.4 dargestellt, erfüllen viele Werkzeuge der Informatik zumindest einige der Kriterien für kreative  Softwaretools nach Shneiderman.  Faktorenmodell kreativen Lernens im Informatikunterricht 63    Die Grundlage für die Entwicklung des Faktorenmodells bilden die für den Informatikunterricht  relevanten Kreativitätsperspektiven  aus Sicht der Informatik (vgl. Abbildung 27), zu welchen die  Einflussfaktoren von Kreativität in Beziehung gesetzt  werden. Lernprozesse stellen sich in einem  kreativen Informatikunterricht als (kreative) informatische Prozesse dar und bilden vor dem  Hintergrund, dass kreatives Lernen immer auch kon struktionistisches Lernen bedeutet, das zentrale Element des Modells.     Die Mensch-Perspektive  berücksichtigt subjektbezogene Merkmale, von denen sich vor allem  Motivation und Interesse als Faktoren herausgest ellt haben und die im Faktorenmodell in der  Schüler-Dimension dargestellt werden.   Hypothese 1: Im Informatikunterricht stimuli ert kreatives Arbeiten Motivation und Interesse  der Schüler.     Die Fach-Perspektive  verdeutlicht Fachcharakteristika, die fü r die Kreativität in der Informatik als  ausschlaggebend angesehen werden können. Hierzu zählen die Produktorientierung  sowie das  Bausteinprinzip als Verständnis von Konzepten der Informatik.   Hypothese 2: Im Informatikunterricht wird Krea tivität aufgrund der kreativen Charakteristika  des Fachs Informatik gefördert.     Die Technologie-Perspektive  unterstreicht die kreativitätsfördernde Funktion von IKT, die, als  Besonderheit des Informatikunterrichts, maßgeblich das Umfeld prägen. Diese Dimension hebt das  Gestaltungsund Konstruktionspotential hervor, das IKT im Informatikunterricht zur Kreativitätsförderung bieten. Zusätzlich profitiert die An wendung von IKT im Informatikunterricht davon,  dass diese nicht nur Werkzeug, sondern zugleich auch Unterrichtsgegensta nd sind. Konzepte der  Informatik werden nicht nur an IKT verdeutlicht, sondern ein Konzeptverständnis ist auch elementar für deren adäquate und effiziente Nutzung.   Hypothese 3: IKT fördern Kreativität im Informatikunterricht.86    Kreativer  informatischer ProzessSchüler Informatik (Fach)Motivation InteresseKonstruktionspotential Informatikkonzepte Produkt Bausteinedurch durch alsIKT   Abbildung 28: Faktorenmodell eines kreativen Informatikunterrichts.                                                         86 Unter der Voraussetzung, dass bei der Au swahl der Werkzeuge Shneidermans Krite rien (vgl. Kapitel 3.4) berücksichtigt wurden. 64  Faktorenmodell kreativen Lernens im Informatikunterricht    Beschreibung des Modells  Die Faktoren des Modells stehen in einer unter einander vernetzten Beziehung (vgl. Abbildung 28).  Interesse  stimuliert Motivation  und vice versa; Gestaltungsprozesse sind prädestiniert, die Interessen der Schüler anzusprechen. Kreativität in der Informatik  wird vor allem an (Software-)Designprozessen deutlich, welche als Ergebni s des kreativen Prozesses zu einem Produkt  führen. Im  Informatikunterricht stellt ein solches Produkt d as Ziel eines konstruktionistischen Lernprozesses  dar. Das Produkt  selbst ist Resultat der Anwendung fach spezifischen Wissens respektive der  adäquaten Komposition der als Bausteine  auffassbaren Fachkonzepte. Die Aussicht auf ein  Produkt  als Umsetzung eigener Ideen erweckt potentielles Interesse  bei Schülern. Bausteine   repräsentieren Informatikkonzepte , die wiederum grundlegend für ein Verständnis und den adäquaten und effizienten Einsatz von IKT und das daraus resultierende Konstruktionspotential  sind. Das  Konstruktionspotential  von IKT als Möglichkeit kreativen Tuns motiviert  Schüler, sich auf informatische Prozesse einzulassen.   Zur Planung und Durchführung kreativen Informatik unterrichts sind die Faktoren in ihrer Gesamtheit zu berücksichtigen. Die alleinige Beachtung der Fach-Dimension spiegelt nur den traditionellen Unterricht wider. Die alleinige Berücksich tigung der IKT-Dimension spiegelt die (gescheiterten) Versuche der Informationstechnischen Gr undbildung wider. Die alleinige Betrachtung der  Schüler-Dimension reflektiert schülerorientierte Lerntheorien ohne Berück sichtigung des Fachs.  Abbildung 29 stellt die informatikspezifischen Im plikationen für die Gestaltung kreativen Informatikunterrichts im Bezug auf die Dime nsionen des Faktorenmodells dar.   5.4 Fazit  Die Anwendbarkeit des Faktorenmodells auf den Informatikunterricht wird aus folgenden Gründen erwartet:   1. Die Faktoren haben sich nicht nur im prof essionellen Umfeld, sondern auch in informatischen Bildungsprozessen als relevant erwiesen.   2. Vergleichbare Beobachtungen lassen sich teilw eise im Informatikunterricht und in Freizeitbeschäftigungen von Schülern machen.   Eine Überprüfung des Modells, die weitere Zu sammenhänge verdeutlicht, wird in Kapitel 6  vorgenommen. Hierzu werden die vorstehe nd aufgestellten Hypothesen herangezogen:  1. Im Informatikunterricht stimuliert kreatives Arbeiten Motivation und Interesse der Schüler.   2. Im Informatikunterricht wird Kreativität aufgru nd des kreativen Charakters des Fachs Informatik gefördert.   3. IKT fördern Kreativität im Informatikunterricht.    Dargestellt werden im Modell nur jene Faktoren, die für den Informatikunterricht markant sind.  Weitere Einflussfaktoren, insbesondere der kreativ en Umgebung (z. B. Zeit, Freiheit, Lehrerrolle)  und der Mensch-Dimension (z. B. Selbstsicher heit, Denkstil), werden nicht dargestellt.   Im Vergleich mit anderen Unterrichtsfächern sind die dargestellten Faktoren im Informatikunterricht etwas Besonderes, weil diese nur hier durch die Charakteristika des F achs vernetzt auftreten  und im Fachverständnis fest veranke rt sind. Letztendlich hat Inform atikunterricht im Vergleich mit  anderen Unterrichtsfächern den Vorteil, sich nicht auf „Nacherfinden“ und „Nachentdecken“  beschränken zu müssen (wie vorgeschlagen für di e Fächer Physik und Chemie, vgl. Kapitel 2,  Abschnitt 2.7.2 und 2.7.3) oder sich mit dem E rfinden gedanklicher Gebilde abfinden zu müssen  (vgl. Abschnitt 2.7.1). Stattdessen können Methoden und Konzepte der Informatik mit Hilfe von  IKT zum Erstellen von konkreten und bedeutungsvollen Softwarear tefakten angewendet werden.    Faktorenmodell kreativen Lernens im Informatikunterricht 65      Kreativer  informatischer ProzessSchüler Informatik (Fach)Motivation InteresseKonstruktionspotential Informatikkonzepte Produkt Bausteinedurch durch alsIKTOriginalität Herausforderung Inspiration IdentifikationRelevanzExplorationsmöglichkeitenFeedback Undo/Redo Visualisierung Wissensquelle SelbstbestimmungVerbreitung SchrittweisesEntwickeln Experimentier-Möglichkeiten Problemfinden Experimentieren Offene  ZielstellungenRestriktionen Konzeptwissen Konkretes LernenIdeeanregung Kreativer  informatischer ProzessSchüler Informatik (Fach)Motivation InteresseKonstruktionspotential Informatikkonzepte Produkt Bausteinedurch durch alsIKTOriginalität Herausforderung Inspiration IdentifikationRelevanzExplorationsmöglichkeitenFeedback Undo/Redo Visualisierung Wissensquelle SelbstbestimmungVerbreitung SchrittweisesEntwickeln Experimentier-Möglichkeiten Problemfinden Experimentieren Offene  ZielstellungenRestriktionen Konzeptwissen Konkretes LernenIdeeanregung   Abbildung 29: Implikationen für die Gest altung kreativen Unterrichts  im Bezug auf die Dimensionen des Faktorenmodells. 66  Untersuchungen zum Faktorenmodell    6 Untersuchungen zum Faktorenmodell  Die im Faktorenmodell dargestellten Dimensionen st ützen sich bisher auf theoriebasierte Überlegungen aus Kreativität, Informatik und Lerntheorien . In diesem Kapitel sollen das Faktorenmodell  und die aufgestellten Hypothesen überprüft werden.   Die Untersuchung des Faktorenmodells stützt sich  auf verschiedene qualitative Studien und eine  quantitative Studie, welche die Aussagen des Faktorenmodells hinsichtlich der aufgestellten  Hypothesen stärken oder einschränken könnten. Ein Vorteil qualitativer Studien ist es, dass (neben  der Überprüfung der Faktoren), die Faktoren durch  zusätzliche Aussagen (Erfahrungen, Beispiele,  Ansichten) untermauert werden können.  Der Versuch einer quantitativen em pirischen Überprüfung aller Fakt oren ist vor dem Hintergrund  der Kreativitätsdiagnostik-Probl ematik unangebracht und würde aufgrund des Umfangs der  Faktoren den Rahmen dieser Arbeit bei Weitem übersteigen.   Im Folgenden werden jeweils wesentliche As pekte der Untersuchungsan sätze dargestellt, die  Ergebnisse beschrieben und eine Einordnung der Ergebnisse vorgenommen.  Zur Überprüfung des Modells werden folgende Ansätze gewählt:  1. In einer Analyse retrospektiv geschriebener  Computernutzungsbiographien wird die Rolle  der Kreativität in den Biographien von Studi enanfängern der Informatik untersucht.   2. Informatikstudenten werden nach ihrem Verständnis von Kreativität und Erfahrungen mit  Kreativität im selbst erlebten Informatikunterricht befragt.  3. Ein Interview mit einem Informatikschüler, de r durch kreatives Arbeiten in außerhalb des  Informatikunterrichts auffiel, wird als Ein zelfallstudie ausgewertet. Hiervon erwarte ich  detaillierte Hinweise zu seinem Verständnis von Informatik und seiner Motivation, sich  kreativ mit Informatik zu beschäftigen.  4. Studienreferendare und Lehramtsstudenten der In formatik werden zu ihrer Sicht und ihren  Erfahrungen bezüglich des Potentials und de r Möglichkeiten, Kreativität im Informatikunterricht zu nutzen und zu fördern, befragt. Hi eraus erwarte ich praxisorientierte Aussagen  zum Faktorenmodell.  6.1 Kreativität in Biographien von Studienanfängern der Informatik87  Grundannahme dieser Studie ist es, dass sich die Faktoren des Kreativitäts modells in Biographien  von (ehemaligen) Schülern, die Informatikunterricht besuchten, widerspiegel n, falls Kreativität in  ihrer Entwicklung eine Rolle spielte. Knobelsdorf und Schulte versuchen,  anhand von Computerbiographen von Studienanfängern der Informatik he rauszufinden, wie Schüler Informatik lernen  und welches Verständnis sie von Informatik habe n (Knobelsdorf und Schulte 2005, 2007; Schulte  und Knobelsdorf 2007). Ziel dieses biographischen An satzes ist es, didaktische Interventionen für  den Informatikunterricht zu entwickeln. Eine Grundannahme des Ansatzes ist, dass Vorstellungen  von der Informatik durch die Interaktion mit Inform atikartefakten geprägt werden. In einer ersten  Analyse durch Knobelsdorf und Schulte wurde de utlich, dass Aspekte der Kreativität in den  Computerbiographien eine Rolle zu spielen scheinen.  Ziel dieser erneuten Analyse ist es herauszufinden, inwieweit sich die im Faktorenmodell ei nes kreativen Informatikunterrichts dargestellten  Faktoren in den Biographien widerspiegeln, d. h. welche Rolle Kreativität in der Entwicklung  zukünftiger Informatikstudenten spielt.  6.1.1 Biographien der Computernutzung  Eine Computerbiographie ist eine retrospektive Erzählung, in welcher ei ne Person ihre Erfahrungen und Erlebnisse mit Computern subjektiv darstellt.  Typischerweise enthält eine solche Erzäh                                                       87 Teile dieses Abschnitts wurden bereits zum Teil si nngemäß und zum Teil wortwörtlich in (Knobelsdorf und Romeike  2008) veröffentlicht.  Untersuchungen zum Faktorenmodell 67    lung nur jene Aspekte, die vom Autor für die Dars tellung „seiner“ Computergeschichte als wichtig  erachtet werden. Studienanfänger der Informatik bemühen sich bei dieser Aufgabe meist darum  darzustellen, wie sie zu dem Ents chluss gekommen sind, Informatik als Studienfach zu wählen. In  der Regel folgen die Texte einem typischen Mu ster und sind schlüssig aufgebaut. Dazwischen  lassen sich wichtige Erfahrungen finden, welche die Entwicklung des Studenten begünstigt oder  behindert haben. Da Computer nutzungserfahrungen und Informatik – insbesondere für Anfänger –  eng miteinander verbunden sind, offenbaren die Computerbiographien damit auch individuelle  Vorstellungen und Verständnisse der Informa tik (Knobelsdorf und Schulte 2007).   6.1.2 Forschungsfragen der Untersuchung   Die Bedeutung von Kreativität in Lernsituationen so wohl an Schulen als auch an Universitäten  wurde in Kapitel 4 aufgezeigt. Auch in Computernutzungsbiographien von Studienanfängern der  Informatik finden sich teilweise Lernprozess e und Motivationen wieder, die im Zusammenhang  mit kreativen Tätigkeiten stehen. Vor dem Hinter grund der Frage, ob Kreativität einen Zugang zur  Informatik darstellt und der Überprüfung der ein zelnen Aspekte des Faktorenmodells kreativen  Informatikunterrichts, werden die Forschungsfra gen für diese Untersuchung wie folgt detailliert  formuliert:  Zur Dimension Person88:  Steht die Motivation der Studenten, sich mit Informatik zu beschä ftigen, im Zusammenhang  mit Kreativität?  Zur Dimension Fach:  Fassen die Studenten Informatik, und damit di e Aktivitäten im Zusammenhang mit Informatik,  als ein kreatives Fachgebiet auf?  Zur Dimension IKT (Umfeld):   Wurde Kreativität durch IKT gefördert? Welche Faktoren haben darüber hinaus Einfluss auf  eine kreative Beschäftigung mit Informatik genommen?   Darüber hinaus soll herausgefunde n werden, inwieweit schulischer Informatikunterricht zu einem  kreativen Informatikbild beiträgt. Da Informati kunterricht inzwischen an der Mehrzahl der allgemeinbildenden Schulen angeboten wird, haben Schüler die Möglichke it, frühzeitig Informatik zu  belegen. Schüler, die bereits in ihrer Freizeit Erfahrungen mit Inform atik gemacht haben, sollten in  der Schulinformatik die Möglichkeit bekomme n, zusätzliche Anregungen und Wissen für den  kreativen Umgang mit Informatik zu erhalten.   6.1.3 Analyseverfahren  Analysiert wurden 135 Computernutzungsbiographi en von Studienanfängern der Informatik (72  Männer, 16 Frauen) und der Bioinformatik (25 Männer, 22 Frauen).   Die Auswertung der Biographien stützt sich methodisch auf die s trukturierende Qualitative  Inhaltsanalyse  nach Mayring (2007).  Strukturierende Inhaltsanalyse will bestimmte Aspekte aus dem Material herausfiltern, will  unter vorher festgelegten Ordnungskriterien eine n Querschnitt durch das Material legen oder  das Material unter bestimmten Kriterien einschätzen. (Flick, Kardorff und Steinke 2007,  S. 473)   Strukturierende Qualitative Inhaltsanalyse   Die strukturierende Qualitative Inhaltsanalyse unterte ilt sich in verschiedene aufeinander folgende  Schritte. Zuerst werden Strukturdimensionen in  Hinsicht auf die Forschungsfragen und den  theoretischen Hintergrund bestimmt. Die Struktur dimensionen werden in Kategorien eingeteilt,                                                         88 Die Dimension Person wurde im Faktorenmodell durch Schüler  konkretisiert. Während Person  sich ein Subjekt in der  informatischen Bildung bezieht, präzisiert Schüler  das Subjekt im Informatikunterricht.  68  Untersuchungen zum Faktorenmodell    welche, zusammen mit den Kodierungsregeln und charakterisierenden Textpassagen, ein Kategoriensystem bilden. Nach einem ersten Kodier prozess mit ca. 10-50% der Daten wird das Kategoriensystem überarbeitet. Dem schließt sich de r finale Kodierungsprozess an. Nachdem die Daten  genau strukturiert wurden, werden die Kodierre geln angewandt. Der letzte Schritt kann mit  verschiedenen Intentionen angewandt werden. In diesem Fall wurde eine Strukturierung  verwendet, welche typische Aspekte der Strukturdi mension beschreibt; in diesem Fall die Rolle von  Kreativität in den Computernutzungsbiographien.   Die Strukturdimensionen basieren auf dem theore tisch entwickelten Faktorenmodell des kreativen  Informatikunterrichts und unterteilen sich damit in  Person, Fach und IKT (Umfeld). Um die InterCoder-Reliabilität zu gewährleisten, wurde das Material in einem Peer-Coding-Prozess von zwei  Wissenschaftlern kodiert. Im Folgenden wird das Kategoriensystem detailliert beschrieben (vgl.  Abbildung 30).   Das Kategoriensystem unterteilt sich in drei  Hauptkategorien: Person , Fach  und IKT (Umfeld) . Im Folgenden werden die zugehörigen  Unterkategorien mit den korrespondierenden Codes erläutert.   Die Hauptkategorie Person  unterteilt sich in zwei  Subkategorien: Motivation und Verhaltensweisen 90. Motivation enthält dabei die folgenden  Codes (kursiv und fett), welche sich auf motivati-onale Aspekte der Studenten beziehen: Etwas tun,  weil es eine Herausforderung  darstellt, Spaß   macht und/oder interessant  ist; Schaffen zum  Gebrauch  (etwas tun, um es später zu benutzen);  Motivation durch die Identifizierung mit einer  Gruppe  oder mit einem Artefakt ; es kann motivieren etwas Originales  zu tun, eine Reputation   aufzubauen, etwas persönlich Relevantes  zu tun  oder anderen zu helfen ( Altruismus ).  Die Subkategorie Verhaltensweisen enthält die  folgenden Codes (kursiv und fett), welche sich auf Aspekte des Verhaltens beim kreativen Tun  beziehen: Kreatives Tun kann von kritischem  Denken  oder evaluativem Denken  ausgehen, der  Fähigkeit, Probleme aufzuspüren  oder dem  Bedürfnis zu handeln, die Lücke zwischen Wissen und Verstehen zu schließen und im  Sehen von Möglichkeiten , neue Produkte und  Verhaltensweisen zu entwickeln, Lern strategien beinhalten die Fähigkeit zu erforschen  und zu  experimentieren  und sich aktiv  innerhalb  und außerhalb  der Schule  zu betätigen.  Die Hauptkategorie Fach bezieht sich auf Kreativitätscharakte ristika der Informatik als Fach.  Hierzu gehören die folgenden Codes (kursiv und fett), welche diese Charakteristika aus der  Perspektive der Studenten beschreiben: Informatik ist ein kreatives Fach , es werden Sachen  gemacht, die mit Kunst  vergleichbar sind, 91 Problemlösen  erfordert Kreativität, Ziel einer kreativen Tätigkeit ist in der Regel ein Produkt , das Bausteinprinzip  der Informatik ist förderlich für                                                         89 Es bleibt zu beachten, dass der Forschungsansa tz keine quantitativen Rückschlüsse zulässt.  90 Verhaltensweisen bezieht sich auf Aktivitäten im kreativen Prozess.  91 Dieser Code gehört zwar nicht zur Fach-Perspektive von Krea tivität, da aber bei den Studenten nicht ein entsprechendes Kreativitätsverständnis vorausgesetzt  werden kann, wurden die Daten auch auf das Vorkommen kunstbezogener  Aussagen analysiert.  Codesystem (Ausschnitt) Codes Person Intrinsische Motivation 14 Ex trinsische M otv ation 3 Schaffen zum Gebrauch 23Herausforderung 6Spaß 19Interesse 45Reputation 9Relevanz 8Stolz 6 Umfeld Möglichkeiten 17 Kreativitätsunterstützung: Internet 11Bezugsperson 17 Fach kreative Natur 2 Kunstperspektive 1Problemlösen 4Produktorientierung 22Konzeptwissen 6Lsg. duch Exp. 4Lernstrategien: Erforschen 22   Abbildung 30: Hauptkategorie n der Strukturdimensionen und häufige identifizierte Codes.89  Untersuchungen zum Faktorenmodell 69    Kreativität und unterstützt kreatives Tun, kreativ e Prozesse in der Info rmatik folgen einem Anlass/Stimulus , basieren auf Konzeptwissen , müssen sich an Einschränkungen  halten und beinhalten Lösungen durch Experimentieren .   Die Hauptkategorie IKT (Umfeld)  bezieht sich auf die Frage, wie Computer als Arbeitsumgebung  gesehen werden. Die Kategorie wird durch folgende  Codes (kursiv und fett) beschrieben: Software  und Entwicklungsumgebungen eröffnen vielfältige Möglichkeiten  für eine kreative Betätigung,  ein Klima der Vielfalt  kann inspirierend sein (so ergibt sich z. B. in einem Computerclub die  Möglichkeit, Ideen auszutauschen und sich gegen seitig zu unterstützen), und Software kann auch  direkt Kreativität fördern  und unterstützen.   Die Anwendung des Kategoriensystem in der Kodierung erfolgte mit Hilfe der Kodierungssoftware MAXQDA (2008).   6.1.4 Ergebnisse  Die Studenten beschreiben generell eine starke  Faszination für die Beschäftigung mit dem Computer und ein großes Interesse am Erforschen und Lernen über Computer und Informatik, insbesondere im Zusammenhang mit der Er stellung von Software. Die genannten Charakteristika sind  typisch für kreative Prozesse. Im Folgenden we rden die Ergebnisse analog dem Analyseprozess  dargestellt. Hierzu werden zuerst die Ausprägunge n der Aspekte des Kategoriesystems dargestellt,  wie sie in den Biographien gefunden wurden. Anschließend werden die Ergebnisse im Bezug auf  die formulierten Forschungsfragen analysiert.  Steht die Motivation der Studenten, sich mit Informatik zu beschäftigen, im Zusammenhang  mit Kreativität?  Bezüglich der Hauptkategorie Pe rson bestand das Interesse darin, motivationale Aspekte und  Verhaltensweisen zu finden. In etwa einem Drittel der Biographien konnten Aussagen gefunden  werden, die für Kreativität charakteristische Mo tivationen und Verhaltensweisen beschreiben.   Das Interesse für Computer, das am meisten ge nannte motivationale Merkmal, erscheint in  verschiedenen Verbindungen: Faszination und Ne ugier für den Computer und seiner Funktionen  im weitesten Sinn und Spaß und Enthusiasm us für das Arbeiten mit dem Computer.   Dieser erste Personalcomputer lief noch nicht sonderlich schnell und auch nicht sehr stabil,  dennoch war ich damals schon von den schier e ndlosen Möglichkeiten dieser Apparate fasziniert und versuchte so viel es ging herauszufinden und auszuprobieren […]. [058I1987mU7] 92  Auch wenn es alleingenommen nicht direkt ei n Indikator für Kreativität ist, so steht Interesse  doch  wesentlich deutlicher in einer Beziehung zu Krea tivität, wenn man den Kontext der Aussagen mit  einbezieht. Interesse, Faszination und Spaß erscheinen immer wieder im Zusammenhang mit  Aktivitäten, die kreatives Arbeiten beinhalten, wi e Webseitenerstellung, B asteln mit Hardware und  Programmieren. Zusätzlich bietet Programmieren Möglichkeiten, Artefakte zu entwerfen, verschiedene Ideen zu explorieren und unabhängig zu arbeiten, wie im folgenden Beispiel beschrieben wird.  [Informatikunterricht] war ja auch etwas anderes.  Man musste nicht dasitzen und dem Lehrer  zuhören, aufschreiben usw. Man konnte sel ber tätig werden und Programme schreiben.  [127B1987wU7]  Alle Aussagen, die Interesse  verdeutlichen, beziehen sich auße rdem auch auf Lernen und Arbeitsweisen: Unabhängiges Arbeiten, eigenständig es Erschaffen eines Artefakts sowie aktives und  unabhängiges Explorieren sind die am häufigsten genannten Aspekte der Kategorie Verhaltensweisen.                                                         92 Der Code identifiziert eine Biographie. Die erste Nu mmer steht für die Nummer der Biographie, der Großbuchstabe  kennzeichnet die gewählte Studi enrichtung (B steht für Bioinformatik, I fü r Informatik), die zweite Nummer ist das  Geburtsjahr, der Kleinbuchstabe ke nnzeichnet das Geschlecht, U7 be zieht sich auf die Studie.  70  Untersuchungen zum Faktorenmodell    Auch wenn viele Studenten Interesse an Computern äußern, so wollten einige doch die Funktionalität von Computern aus einem bestimmten Grund verstehen, und zwar, um ein bestimmtes  Problem zu lösen. Entsprechend lassen sich zwei Gruppen identifizieren: Eine Gruppe interessiert sich für Computer und ist von den Möglichkeiten, die Computer bieten, fasziniert. Für sie sind  Originalität, Identifikation mit originalen Arbe iten und den geschaffenen Artefakten bedeutsam.  Diese Gruppe experimentiert gern und erforsch t den Computer unabhängig. Die andere Gruppe  interessiert sich ebenfalls für Computer, allerdi ngs vor allem, um damit bestimmte Aufgaben zu  erledigen. Für einige Studenten ist die Reputation, die sie durch die Anerkennung ihrer Arbeit und Expertise bei Freunden und Familie  erhalten haben, ein wichtiger Aspekt, was auch an einer Art  von Stolz deutlich wird.   Kritisches Denken, Evaluieren und Problemfinden werd en fast gar nicht erwähnt, dabei sind diese  auch wichtige Charakteristika von Kreativität. Die Ursache hierfür kann allerdings an der Form  der Datenerhebung liegen. Die Studenten wurden nicht explizit nach diesen Aspekten gefragt.   Alle negativen Kommentare oder Schilderungen von Enttäuschungen beziehen sich auf erlebten  Informatikunterricht, welcher in der Regel negativ  attribuiert wird. Studenten, die der zweiten  Gruppe zuzuordnen sind, kritisie ren überwiegend mangelndes Wissen  des Informatiklehrers und  Kommunikationsdefizite. Im Gegensatz dazu wu rde der Unterricht von Studenten der ersten  Gruppe positiv erwähnt, wenn der Lehrer selbst mo tiviert und engagiert war und für eine unabhängigkeitsunterstützende Unterrichtsatmosphäre sorgte.  Fassen die Studenten Informatik, und damit di e Aktivitäten im Zusammenhang mit Informatik, als ein kreatives Fachgebiet auf?  Die Aktivitäten der Studenten entwickeln sich  mit ihrer Biographie (Knobelsdorf und Schulte  2007). Diese Aktivitäten beginnen meist mit Spie len, gefolgt vom Er kunden von Anwendungsprogrammen und deren Möglichkeiten, Experimen tieren mit dem Computer, dem Sammeln von  Wissen und der Internetnutzung. Währenddessen entd ecken sie Programmieren, welches meist im  Kontext mit der Erstellung von Internetseiten ge schieht. Zu diesem Zeitpunkt belegen einige  Studenten Informatik als Schulfach, wo häufig ebenfalls Programmieren im Vordergrund steht.  Entsprechend enthalten viele Biographien einen erheblichen Teil einer Programmier-Biographie:  Als ich in der 11. Klasse Java programmieren lernte, kam die große Wende, weil ich jetzt Programme nach meinen Wünschen erstellen konnte[...]. [026I1986mU7]  Während die erstgenannten Aktivitäten sich kaum  auf Informatik beziehen, so gehört doch Programmieren zur Informatik dazu und beeinflusst  das studentische Bild von der Informatik. Entsprechend wurde das Produzieren von Produkten (Artefakten) sehr häufig erwähnt. Andere  kreativitätsrelevante Eigenschaften der Informatik, wie z. B. das Ba usteinprinzip, wurden dagegen  nicht erwähnt.   Problemlösen spielt in der Informatik eine zentral e Rolle und wird in der informatischen Bildung  in Schulen und Hochschulen regelmäßig betont. Eb enso ist Problemlösen ein wichtiger Aspekt der  Kreativität. Dennoch wurde dieser Aspekt in keiner Biographie explizit erwähnt 93. Implizit wurden  Problemlöseaktivitäten allerdings im Zusammenhang mit Programmiererfahrungen beschrieben.  Dabei werden Probleme als Herausforderungen besch rieben, die gemeistert werden müssen, um  ein bestimmtes Ziel zu erreichen. Diese Hera usforderungen sind für die Studenten sehr motivierend, im Gegensatz zu Problemen, die auf Verlangen des Lehrers gelöst werden müssen um gute Noten zu erhalten.   Informatikunterricht trifft die Erwartungen der Studenten, wenn der Unterricht Programmieren und  Projektarbeit beinhaltet. Unterricht, der sich allein auf die Anwendung von Computern bezieht,  wird dagegen sehr negativ beschrieben.                                                           93 Eine Möglichkeit hätte sein können: „W eil mir das Lösen von Problemen mit dem Co mputer so viel Spaß macht, habe  ich mich entschieden Informatik zu studieren.“  Untersuchungen zum Faktorenmodell 71    Wurde Kreativität durch IKT gefördert? Welche  Faktoren haben darüber hinaus Einfluss  auf eine kreative Beschäftigung mit Informatik genommen?  Einige Studenten stellen fest, dass sie mit ihrem ersten Computerzugang die Möglichkeit erhielten,  Dinge zu tun, zu denen sie vorher nicht in der Lage waren:  Die Möglichkeiten, die der PC anbietet , sind kaum zu umfassen. [092B1988mU7]  Mit diesem [Computer] machte ich meine e rsten Erfahrungen mit einer faszinierenden  elektronischen Welt. [...] [Es gab] eine schi er nie endende Anzahl von Möglichkeiten mit  diesem Gerät. [101B1986mU7]  Der Beginn einer „Karriere“ in der Informatik beginnt damit offensichtlich für viele mit dem  ersten Computerkontakt. Bald werden die M öglichkeiten des Computers erkundet und schließlich  wird er dazu genutzt, eigene Software zu erste llen. Zu diesem Zeitpunkt wird der Computer als ein  kreatives Werkzeug angesehen, wie von Shneiderman (2000) beschrieben: Er unterstützt den  Anwender bei der Beschaffung von relevantem Wiss en (immer wieder wurde in dieser Hinsicht  das Internet von den Studenten genannt), bildet eine Plattform zum Explorieren und Experimentieren, gibt sofortiges Feedback (dieser Aspekt b ezieht sich hauptsächlich auf Programmiersprachen  und/oder Webdesign) und erlaubt es, die Ergebnisse an andere zu verteilen, z. B. durch das  Publizieren einer Internetseite on line. Das Internet dient offenbar als Katalysator: Es ist Informationsquelle, sorgt für einen Anlass und Inspiration:   Mit meinem ersten Internetansch luss [...] konnte [ich] mein Wissen stetig erweitern und im  Basteln von Internetseiten unter Beweis stellen. [002I1985mU7]  Nur in wenigen Biographien wird eine Bezugspers on als relevant erwähnt: Ein Elternteil aus dem  Informatikfach, ein Freund mit gleichen Interessen oder ein inspirierender Lehrer.  6.1.5 Schlussfolgerungen  Die Ergebnisse dieser Untersuchung zeigen, dass sich in Computernutzungsbiographien von  Informatikstudienanfängern zahlreiche Charak teristika von Kreativität wiederfinden. Diese  Studenten beschreiben Informatik als etwas d as Spaß macht, kreativ ist und Unabhängigkeit  fördert. Dieses wird typischerweise im Kontext von Programmieren beschrieben.   Das Streben nach einer gut funktionierenden So ftware konnte als wichtigste Motivation für das  Beschäftigen mit der Programmierung identifiziert  werden. In den meisten der beschriebenen  Programmierprozesse werden Aufg aben beschrieben, die für die Studenten eine persönliche  Bedeutung besitzen, sich aber als überra schend irrelevant al s Produkt darstellen.94 In diesen  Prozessen ist die Aktivität (häufig Programmier en) am wichtigsten, was für kreative Prozesse  typisch und von Künstlern beka nnt ist. Diese Gruppe von Studenten ist fasziniert und interessiert  an den Möglichkeiten, die ihnen der Computer und die Informatik bieten. Sie drücken ein starkes  Verlangen nach weiterem Wissen, Exploration u nd Verständnis aus. Die Aktivitäten dieser Gruppe  können als hochkreativ bezeichnet werden.  Eine andere Gruppe von Studenten zeigt ebenfa lls Faszination und Interesse für den Computer,  aber auf eine pragmatische Art. Für diese Studenten  steht die effiziente Nutzung des Computers im  Mittelpunkt. Wissenserwerb wird als notwendig zur Computernutzung und zur effizienten Lösung  von Problemen verstanden. Währe nd dieser zweite Ansatz zu dem Ansatz passt, der häufig im  Informatikunterricht zu finden ist, beschreiben Studenten, die sich gern kreativ mit Computern  auseinandersetzen, ihren Unterricht als enttäuschend.  Offensichtlich ist ei ne stärkere Betonung von  Kreativität im Informatikunterricht notwendig, um  diese Studenten nicht zu verlieren. Möglicherweise lassen sich sogar mehr Studenten für die Informatik gewinnen, wenn sie die kreative Seite  der Informatik entdecken.                                                          94 Viele der beschriebenen Produkte sind al s kommerzielle oder professionell erste llte Produkte in überlegender Qualität  verfügbar (z. B. Spiele). 72  Untersuchungen zum Faktorenmodell    Sind die produzierten Softwareartefakte nützlic h, wie es die Definition von Kreativität verlangt?  Die Nützlichkeit muss hier ebenfalls von einer persönlichen Sichtweise betrachtet werden. Dennoch, auch wenn ein gewisser Nutzen für Spiele  und Internetseiten existiert, ist kommerzielle  Software in der Regel wesentlich ausgefeilter und umfangreicher. Dieser Aspekt scheint für die  Studenten allerdings nicht wichtig zu sein. Der Prozess, bedeutungsvolle Ar tefakte zu produzieren,  wird als kreativ aufgefasst. Es scheint mit dem Nu tzen von Software gleichwichtig zu sein, wenn  nicht sogar wichtiger. Die Motivation, Faszinati on, Ausdauer bei der Beschaffung von Wissen und  Fertigkeiten und der Enthusiasmus der Studenten im Bezug auf ih re kreativen Tätigkeiten sind  beeindruckend.   Zusammenfassend kann festgestellt werden, dass sich die Elemente des Faktorenmodells in  Computerbiographien von Studenten, deren Le rnund Entwicklungsprozess als kreativ zu bezeichnen ist, nachweisen lassen.   6.2 Kreativitätsverständnis und Erfa hrungen von Informatikstudenten  Die Frage nach dem Verständnis von Kreativität in  der Informatik und die Erfahrungen im selbst  erfahrenen Informatikunterricht waren Gegenstand einer Pilotstudie mit Studenten an der Universität Potsdam, die ich explizit aufforderte, Kreativ ität in ihrem erlebten Informatikunterricht zu  reflektieren. Aufgrund der expliziten Frageste llung geben die Antworten der Studenten einen  konkreteren Einblick in deren Kreativitätsverstä ndnis und Wertung von Kreativität im Informatikunterricht. Befragt wurden 13 Studenten des zwe iten und dritten Studienjahres in einer Hausaufgabe zur Vorlesung Didaktik der Informatik.   Die Fragestellung lautete:  Diskutieren Sie, ob und ggf. wie Informatikunt erricht Kreativität fördern kann. Als Einstieg  können Sie folgende Fragen be antworten: Empfanden Sie Ihren Informatikunterricht als kreativ? Erleben Sie Ihre Beschäftigung mit Informatik als kreativ?  Im Folgenden werden wesentliche Aussagen bz gl. dem Kreativitätsverständnis und den Erfahrungen der Studenten dargestellt. Die Auswertung de r Vorstellungen der Studenten, wie Informatikunterricht Kreativität fördern könne, unterbleibt an dieser Stelle, da diese Aussagen wenig fundiert  sein dürften.   Verständnis  Die Studenten geben ein Verständnis von Kreativitä t an, welches im Wesentlichen der herausgearbeiteten Definition von Kreativität und dem Faktoren modell entspricht. Ne ben wenigen Studenten,  die zwischen künstlerischer und logischer bzw. wi ssenschaftlicher Kreativität unterscheiden, sieht  die Mehrzahl der Studenten Kreativität in jedem Fachgebiet als möglich an. Kreativität wird  demnach gezeigt wenn   Wissen und/oder zur Verfügung stehende Möglic hkeiten neu kombiniert und angewendet werden, um etwas Neues bzw. Unbekanntes zu erschaffen. [Antwort 1]  Eine andere Definition stellt das Kombinie ren noch deutlicher in den Vordergrund:  Kreativität ist weitgehend die Fähigkeit, vor handene „Teile“ so zu kombinieren, dass etwas  Neues entsteht. Diese „Teile“ können Materia lien, Melodien, Farben, Worte, Bewegungen,  Wissenselemente oder Sonstiges sein. [Antwort 4]  Diese Auffassung spiegelt im Allgemeinbezug wider,  was im Faktorenmodell als Bausteinprinzip  bezeichnet wird.   Als Beispiele werden u. a. Algorithmenentwu rf, Problemlösen und Programmieren angegeben.  Offensichtlich sehen die Studenten damit In formatik als kreatives Fachgebiet an.   Erfahrungen  Die Studenten besuchten in den letzten drei bi s fünf Jahren ihrer Schulbildung Informatikunterricht. Die Hälfte der Studenten gibt an, dass sie ihren Informatikunterricht als kreativ erlebt hat,  Untersuchungen zum Faktorenmodell 73    während sich die andere Hälfte nicht an kreativ e Aktivitäten und Aufgaben im Unterricht erinnern  kann. Stattdessen berichten sie über Aufgaben, di e normalerweise das Lernen einer Programmiersprache und das Nachvollziehen von Lehrerbeispi elen umfassten. Problemlösungen wurden mit  der Aufgabenstellung im Detail besprochen und/ oder konnten durch Anwenden einfacher Muster  gefunden werden. Kreative Ideen und eigene An sätze für Problemlösungen wurden vom Lehrer  häufig als „falsch“ gestoppt; stattdessen wurde da rauf hingearbeitet, dass alle einen gleichen  Ansatz wählen. Die Anwendung von Software wurd e in der Regel in einem „How-to“-Stil unterrichtet, unterstützt durch konvergente Instruk tionen, wie einfache Aufgaben zu lösen sind.   Die Studenten, die einen kreativen Unterricht erle bten, berichten vom Gegenteil: Hier hatte jeder  Schüler die Möglichkeit, Probleme auf eine indi viduelle Art und Weise zu lösen und genügend  Zeit zum Experimentieren und Umsetzen eigener Id een. Diese Studenten geben an, dass es für sie  motivierend war, wenn sie ein einführendes Framework für eine Aufgabe erhielten. Kreatives  Arbeiten in Projekten machte den Studenten Spaß, war motivierend und interessant und erlaubte  selbstbestimmtes Arbeiten.   Ihre derzeitigen Lernaktivitäten in Informatikkursen an der Universität fassen die Studenten  einstimmig als nichtkreativ auf. Kreatives Arbeiten erfolgt derzeit nur in ihrer Freizeit in privaten  Projekten. Die Kurse werden als theoretisch empfunden und scheinen nur dem Zweck zu dienen,  sich Wissen und Fertigkeiten auf Vorrat anzueigne n, ohne Anforderungen oder Möglichkeiten,  diese kreativ anzuwenden. Hausaufg aben beziehen sich oft auf theoretische Probleme oder Beweise. Deshalb fühlen sich einige Studenten demotiv iert. Allerdings erwarten die meisten Studenten  auch, dass die Aufgaben in höheren Semestern kreat iver werden und sie dann das, was sie gelernt  haben, anwenden können. Die Möglichkeit, in der In formatik kreativ sein zu können, motiviert die  Studenten.   6.3 Kreativität in der Schulin formatik aus Schülersicht95  Die beiden Studien, welche retrospektive Betrach tungen informatischer Lernprozesse analysieren,  bestätigen die wesentlichen Faktoren des Modells aus Sicht des Subjekts. Zusätzlich verdeutlichen  sie, dass Defizite in der Unterrichtspraxis be i der Berücksichtigung von Kreativität auftreten.  Anhand der Aussagen wird offensichtlich, dass einige Schüler auch unabhängig von der Unterrichtsgestaltung eine kreative Herangehensweise an  Informatik entwickeln. Um einen detaillierten  Einblick in dieses Verständnis für Informatik und dort präferierte Herangehensweisen und Sichtweisen zu erhalten, wird eine Einzelfallstudie mit einem herausragend kreativen Informatikschüler  durchgeführt.96 Ein Vorteil der konkreten Befragung in ei nem Interview ist der, dass gezielt auf  Details eingegangen werden und bei offene n Fragen nachgehakt werden kann.   6.3.1 Ziel der Untersuchung  Eine zentrale Frage bei der Untersuchung des Fakt orenmodells ist die, ob die Faktoren vergleichbar im Erleben der Schüler reflektiert werden. Sichtweisen, Einstellungen und Arbeitsweisen von  Schülern, welche sich kreativ in der Informa tik engagieren, können Aufschluss darüber geben,  welche Aspekte der Informatik  sie ansprechen und wie ein möglicher kreativer Zugang zur  Informatik aussehen kann.  Zentrale Fragen dieser Untersuchung sind:  Welches Verständnis hat der Schüler von  Kreativität (in der Informatik)?  Welche Rolle spielt Kreativität für das eigene  Interesse/die Beschäftigung mit Informatik?  Welches Informatikbild entwickelt der kreative Schüler? Welche Methoden und Arbeitswe isen werden verwendet?                                                          95 Teile dieses Abschnitts wurden bereits zum Teil sinnge mäß und zum Teil wortwörtlich in (Romeike 2006) veröffentlicht.  96 Eine Hinzunahme weiterer durch Kreativität hervortret ender Schüler zur Untersuchung würde den Aussagen dieser  Studie möglicherweise mehr Gewicht verschaffen. Dies ist im Rahmen dieser Arbeit leider nicht zu bewältigen.  74  Untersuchungen zum Faktorenmodell    6.3.2 Methode  Um das Modell aus Schülersicht exemplarisch zu un tersuchen, wird in einer Einzelfallstudie ein  Interview mit einem Schüler analysiert, der dur ch besonders kreative informatische Leistungen  innerund außerhalb des Unterrichts aufgefallen ist. Anhand der Aussagen des Schülers kann das  Modell subjektiv untermauert bzw. widerlegt werden.97 Ggf. lassen sich hierdurch mögliche  Ausprägungen der Faktoren beispielhaft präzisieren und illustrieren.  In einer Einzelfallstudie wird eine einzelne  Untersuchungseinheit (Person [...]) genau erforscht und beschrieben, [...]. Die qualitative Ei nzelfallbeobachtung hilft dabei, Fragestellungen über individuelle Prozesse und Verläufe zu be antworten. [...] Im Unterschied zu breit angelegten Stichprobenuntersuchungen, die tendenziell viele Untersuchungsobjekte  ausschnitthaft betrachten (extensive Forschung), wird in der Einzelfallstudie die Komplexität  eines Falles möglichst umfassend und deta illiert erfasst (intensive Forschung).   (Bortz und Döring 2002, S. 323)  Für die Studie wurde ein Schüler aufgrund von Unterrichtsbeobachtungen ausgewählt. Das  Interview wurde in Form eines Leitfadeninterviews durchgeführt,  kurz nachdem der Schüler sein  Abitur beendet hatte.   Das Leitfadeninterview ist die gängigste Form qua litativer Befragungen. [...] Es [lässt] genügend Spielraum, spontan aus der Interviewsitua tion heraus neue Frage n und Themen einzubeziehen oder bei der Interviewauswertung auch Themen herauszufiltern, die bei der LeitfadenKonzeption nicht antizipiert wurden.  (Bortz und Döring 2002, S. 315)    Während des Interviews stellte si ch heraus, dass das Hauptinter esse des Schülers dem Entwickeln  von Software galt, weshalb dies das Ha uptthema des Interviews darstellte.   6.3.3 Ergebnisse  Interesse und Motivation  Vor allem wenn man etwas im Internet macht, kann man mit relativ wenig Aufwand viel erreichen. Das fand ich besonders interessant. [T1S1Z47] 98  Praktisches Arbeiten, insbesondere Programmieren , hat den Schüler am Informatikunterricht  besonders interessiert. Am praktischen Arbeiten gefällt ihm, dass er dabei kreativ sein kann und  mit wenig Aufwand viel erreicht:  Programmieren ist für mich auch eine kreative Aufgabe, es ist etwas wo man etwas schafft.  [T1S2Z35]  [Bei anderen Sachen] da fehlt mir so ein bisschen der kreative Aspekt. [T1S2Z31]  Dieses Schöpferische finde ich schon sehr wichtig  beim Programmieren, dass man eben was  schafft. Man bastelt irgendwas zusammen, und am Ende hat man ein Programm. [T1S2Z44]  Es ist wichtig für ihn, dass er am Ende etwas „in seiner Hand hält“. Die Hauptmotivation ist für  ihn die Möglichkeit, sich „ein bisschen selbst zu verwirklichen“. Dieses empfindet er als Kreativi-tät und endet immer in einem Produkt.   Verständnis von Kreativität in der Informatik  Für den Schüler ist Programmieren eine kreative Aufgabe. Kreativität beschreibt er als etwas  Individuelles.                                                          97 Das Interview wurde bereits durchgeführ t, als das Modell noch nicht feststand, weshalb in den Fragen nicht auf alle  Aspekte des Modells eingegangen wurde.  98 Der Code identifiziert ein Zitat. T bezieht sich auf die Nummer des Transkripts, S auf die Seite und Z auf die Zeile des  Zitas im Transkript des Interviews.  Untersuchungen zum Faktorenmodell 75    Für mich ist eigentlich alles kreativ, was um et was zu schöpfen seinen eigenen Weg geht. Also,  man hat eben dieses Ziel, und man überlegt sich, wie komm’ ich da hin, da man sich ja nicht,  um kreativ zu sein, das Endziel setzt. [T1S4Z43]  Dieses Verständnis korrespondiert mit der Defi nition von P-Kreativität und Problemlösen. Dem  Problemlösen fügt es den Aspekt hinzu, dass eine Idee bezügliche des Ziels zwar existiert, dies aber nur eine Richtungsvorgabe und unscharf definier t ist. Dieser kreative Prozess lässt sich nach  Erfahrung des Schülers unterteilen.  Man kann ja auch ein kleines Modul nehmen od er einen kleinen Teil, und am Ende muss dieser Teil das können. Und dann überlegt man sich eben, wie man das hinkriegen kann, und so  ist eigentlich jeder einzelne dieser kleinen Schritte schon ein kreativer Schritt. [T1S4Z47]  Kreativität ist seiner Auffassung nach  sehr wichtig in der Informatik. Im Vergleich zu anderen  Schulfächern führt er aus, dass Informatik vergleichb ar kreativ wie Musik oder Kunst ist, dies aber  nicht von der Mehrheit der Mitschüler so gesehen wird.  Ich [sehe] schon große Parallelen. Dass eben Le ute eher Informatik machen, weil sie dort irgendwie kreativ sein können, was sie einfach in  anderen Fächern so nicht sein können. Mir  z. B. fehlt so die musikalische Kreativität, Kuns t sowieso, das krieg ich nicht hin, aber um etwas zu schöpfen und auf die Reihe zu kriegen , das kann ich einfach im Informatikkurs.  [T1S7Z33]  Es ist natürlich kein musisches Fach in dem Si nne, es ist eine naturwissenschaftliche Kreativität, also es ist nicht dieser eng gefasste Kreativ itätsbegriff, dass man ein Lied schreibt oder ein  Bild malt, aber es ist eine andere Art von Kreativität. [T1S7Z42]  Es wird deutlich, dass er damit vom traditionellen kunstorientierten Begriff der Kreativität abrückt  und ein eigenes Verständnis entwickelt ha t, welches Informatik einschließt.  Konzepte und Strategien    Programmieren ist für mich auch eine kreative Au fgabe, es ist etwas wo man etwas schafft, wo  man etwas mit ein paar Bausteinen, die man hat , die man intelligent oder weniger intelligent  zusammen baut (...), dann kommt am Ende irgendwas  bei raus. Und es gibt eben nicht nur eine  Möglichkeit etwas zu implementieren, es gibt meistens hunderte Möglichkeiten; die einen machen das so, die anderen so, das eine ist eleganter, das andere ist eher schneller. [T1S2Z35]  Bei der Beschreibung von Kreativität in der Informa tik weist der Schüler auf das Bausteinprinzip  in der Informatik hin. Unter Bausteinen verste ht er die grundlegenden Modelle und Konzepte der  Informatik.  Wir haben ja mit Delphi programmiert, mit di esen verschiedenen Modellen, diese Schleifen,  die man benutzen kann, Variablen, diese ganzen Standarddatentypen, einfach, die Befehle auf  der einen Seite, die man hat und die Variablen und so auf der anderen Seite, den Input, der  dann eben verwendet wird. Und eben auch die Konzepte, die dahinter stehen, was man damit  machen kann, was so ´ne Schleife bewirkt, das  sind eben die Bausteine, mit denen man was  machen kann. [T1S3Z5]  Umgebungsfaktoren  Vor allem wenn man etwas im Internet macht, kann man mit relativ wenig Aufwand viel erreichen. [T1S1Z47]  Man kann sich da auch sehr viel selbst beibringen, […] allein durch die ganzen Informationen, die man im Internet findet, kann man eigentlich schon eine ganze Menge selbst auf die  Reihe kriegen. Ich bin der Meinung, dass man Programmieren sich auch selbst beibringen  kann, mehr oder weniger. [T1S2Z1]  Eine wichtige Rolle spielt für den Schüler di e Möglichkeit, Ideen und Lösungsansätze mit Hilfe  des Compilers ausprobieren zu können. 76  Untersuchungen zum Faktorenmodell    Oftmals ist es einfach nur Ausprobieren. Einfac h mal was hinschreiben, so einen Abschnitt,  einfach mal reintun und dann ausprobieren und dann gucken was hakt, [...]. [T1S3Z39]   Statt einem deduktiven strukturierten Vorgehen berichtet der Schüler, dass das Ausprobieren von  (Lösungs-)Ideen und anschließendes Nachvollziehe n von Debuggerinformati onen einen wichtigen  Teil seines Problemlösens ausmacht. Planen und strukturierteres Vorgehen findet er nur bei  größeren Projekten notwendig und sinnvoll.  Ausführlich äußert er sich über die Problema tik der begrenzten Zeit in der Schule:  Was ich allerdings ein bisschen störend finde ist, dass man in der Schule nur so kurze Zeitabstände hat. Also wenn ich programmiere, dann brau che ich einfach mehr Zeit. Weil so viele  Sachen (...), also wenn’s ein bisschen komplexer wird (...), die kann man einfach nicht in einer dreiviertel Stunde abarbeiten. Und dann, wenn man sich erst eine  Woche oder 4-5 Tage später  wieder ran setzt, dann hat man ziemlich viele Ideen oder Sachen wieder vergessen, man startet  also nicht direkt wieder da, wo man aufgehör t hat, sondern muss sich schon wieder einen Teil  aufarbeiten. Mir fällt das schwer. Ich finde es ei nfacher, wenn ich mich am Wochenende einfach mal ein paar Stunden am Stück an so ei n Programm setzen kann und dann auch irgendwas hinkriege. In der Schule kann man auch schon  viel schaffen, aber das ist doch störend.  Aber das lässt sich auch nicht anders machen. [T1S5Z23]  6.3.4 Fazit  Der Schüler bezeichnet seine Beschäftigung mit Informatik sowie Programmieren per se als  kreativ. Er unterstreicht hierbei, wie wichtig di es für ihn ist. Die Aussagen haben insbesondere vor  dem Hintergrund Gewicht, dass ihm weder die Inten tion des Interviews bekannt war, noch ist das  Wort „kreativ“ oder „schöpferisch“ vom Interviewer gefallen, ehe dieser Aspekt vom Schüler  erwähnt wurde. Ebenso wenig wurde Kreativitä t bis dato im Unterricht thematisiert.   Der Schüler unterstreicht den zentralen Stellenw ert von Produkten in seiner kreativen Tätigkeit  und den positiven Einfluss dieser auf seine Motiv ation. Beeindruckend ist die Detailgetreue, mit  welcher der Schüler die Aspekte von Kreativität in de r Informatik reflektiert . Offensichtlich ist es  möglich, dass diese Aspekte Schülern auch mehr oder weniger von allein be wusst werden können.   Bezüglich der Umgebungsfaktoren zeigen sich viele Gemeinsamkeiten zu den in der o. g. Studie  untersuchten Biographien: Das Internet als Wis sensressource und Computerfeedback ermöglichen  eigenständiges Entwickeln von Projekten; die Umstände in der Schule wirken sich dagegen  erstmal negativ auf die kreative Entfaltung aus. Auf diese Weise hat der Schüler in der selbständigen Beschäftigung mit Informatik die kreativen Seiten für sich entdeckt und schätzen gelernt.  Diese Sichtweise überträgt sich – abhängig vom Thema – auch auf den Informatikunterricht.  Tatsächlich lassen sich durch die Aussagen des Sc hülers alle Dimensionen des Faktorenmodells  belegen.  6.4 Sichtweisen und Erfahr ungen von Referendaren  und Lehramtsstudierenden99   Informatiklehrer haben eine besondere Sicht au f Kreativität und Informatik, erleben sie doch in  ihrer täglichen Praxis, wie Schüler möglicherwei se kreativ, aber auch unkreativ, mit Informatik  umgehen. Ziel dieser Studie ist es, die Vorste llungen von Referendaren und  Lehramtsstudierenden  der Informatik bezüglich Kreativität und verwandt er Faktoren zu untersuchen und sie zu ihren  Erfahrungen mit Kreativität, in der Rolle als Lehrer  und in ihrer eigenen Entwicklung, zu befragen.  Die Befragten stehen in ihrer Karriere zwisch en Studium und dem Begi nn der hauptberuflichen  Unterrichtstätigkeit. Durch das Studium sind sie mit einem Repertoire an Unterrichtsmethoden,  Ideen und Erfahrungen aus den Unterrichtspraktika ausgestattet. Zusätzlich haben sie in Schulpraktika oder im Referendariat Erfahrungen au s selbständiger Lehrtätigkeit sammeln können und                                                         99 Teile dieses Abschnitts wurden bereits zum Teil sinnge mäß und zum Teil wortwörtlich in (Romeike 2008e) veröffentlicht (Artikel im Anhang).  Untersuchungen zum Faktorenmodell 77    sind damit in der Lage, Theorie und Praxis zu verb inden. Ein Einblick in ihre Sicht von Kreativität  im Bezug auf Informatikunterricht verspricht , Möglichkeiten und Problematiken von Kreativität  im Unterricht aufzudecken und damit, Aussagen  des Faktorenmodells zu stärken oder einzuschränken. Zusätzlich erlauben sie einen punktue llen Einblick in die Unterrichtswirklichkeit und  den Stellenwert, den Kreativität in der Unterrichtspraxis besitzt.   Die Untersuchung stützt sich auf zwei Studien  zu Vorstellungen von Lehrern zur Kreativität.100 Im  Folgenden werden nur die im Bezug auf die Üb erprüfung des Faktorenmodells relevanten Ergebnisse der Untersuchung dargestellt und diskutiert. Di e Studie kann detailliert im Anhang nachgelesen werden. Der Fragebogen wurde von 13 a ngehenden Informatiklehrern ausgefüllt.  6.4.1 Ergebnisse  Die Mehrheit der Studenten/Referendare sieht Kr eativität eng verwandt mit der Fähigkeit, eigene  Ideen zu entwickeln und/oder zu realisieren ( 53.8%). In der Begründung der Antwort beziehen  sich die Befragten häufig auf kreative Ergebni sse und/oder Produkte im weitesten Sinn (46.2%).  Der kreative Prozess wird von der Mehrheit beschri eben als das Beschreiten eines persönlichen  neuen Wegs, um ein persönliches Ziel zu erreic hen. Diese Sichtweise ist mit der Beschreibung von  P-Kreativität vergleichbar, welche Kreativität in einem persönlichen Kontext beschreibt.  Umgebungsfaktoren wurden von den meisten Befragten als entscheidend für die Entwicklung von  Kreativität angesehen. Auch geben alle Befragten an, dass Kreativität durch den Lehrer gefördert  werden kann und dass dies bei jedem Schüler möglich ist.  61,6% sind der Meinung, dass sich kreatives De nken vom Denken, was beim schulischen Problemlösen verlangt wird, unterscheidet. Sie führen  weiterhin aus, dass Schüler häufig dazu angehalten werden, Methoden und Verfahren  anzuwenden, die durch den Lehrer demonstriert wurden, um  die gleichen Ergebnisse wie der Lehrer zu erreichen. Zu oft gibt es nur ein „richtig“ oder „falsch“.  Aus der Perspektive der Kreativität is t dies offensichtlich problematisch.  Kreativität und Informatik   Alle Befragten stimmen zu, dass Kreativität und Informatik gut „zusammenpassen“. 84,6%  stimmen zu, dass Kreativität in der Informatik  in verschiedenen Anwendungsgebieten benötigt  wird, 46,2% davon mit maximaler Zustimmung. Sie f ühren dazu aus, dass für eine Aufgabe in der  Informatik verschiedene Lösungen möglich sind , in informatischen Prozessen das Finden von  Analogien und Exploration beteiligt und Produkte der Informatik in der Regel die Ergebnisse  kreativer Prozesse sind. Beispielsweise wi rd das Entwerfen von Al gorithmen von 84,6% als  kreativ bezeichnet. Entsprechend geben 76,9% an , dass man in Informatik mindestens genauso  kreativ sein kann, wie in Kunst oder Musik. Die Antworten auf die Frage, welches der Fächer  Informatik oder Musik/Kunst mehr Raum für Kr eativität bietet, sind allerdings auf der ganzen  Antwortskala verteilt.   Interesse/Motivation:  Aktivitäten der Informatik, die Kreativität erforder n, wurden in einer Freitext-Frage wie folgt  benannt: Problemlösen (46,2%), Entwurf von Be nutzerschnittstellen/GUIs (38,5%), Programmieren (30,8%), Algorithmenentwurf (30,8%), Problemfinden (15,4%), Debugging (7,7%) und  Verbinden theoretischer Kon zepte mit der Wirklichkeit  (7,7%). Diese Aussagen werden durch  Unterrichtserfahrungen illustriert. Dabei berich ten die Studenten/Referendare davon, dass sie  durch kreative Aufgaben und/oder durch Raum für Kreativität erfolgreich das Interesse der  Schüler gewinnen konnten. Dennoch be richten auch einige, dass sie nur selten kreativen Unterricht  bei ihren Mentoren beobachten. Vergleichbare Au ssagen finden sich auch in Antworten auf die  Frage nach eigenen Erfahrungen mit kreativem Informatikunterricht:                                                          100 Fryer und Collings (1991) und Diakidoy und Kanari (1999). 78  Untersuchungen zum Faktorenmodell    Kreativer Informatikunterricht ist möglich, wird  aber wenig praktiziert von den Lehrern. Meiner Erfahrung nach sind Schüler erstmal überrascht  von den kreativen Ansätzen, lassen sich  aber sehr gern darauf ein und erzielen mitunter ganz tolle Ergebnisse, die auf herkömmlichem Wege nicht herausgekommen wären. [Referendar 1]  IKT/Umgebung  92,3% der Befragten stimmen dem zu, dass Unte rricht im Computerkabinett einen positiven  Einfluss auf die Kreativität der Schüler ausübt. Die Zustimmung ist allerdings nur schwach. Auf  einer Skala von 1 bis 6, mit 1 als stärkster Zust immung, lag der Durchsc hnitt der Antworten bei  2,77. Möglicherweise ziehen die Befragten auch die ablenkende Wirkung von IKT in Betracht.   6.4.2 Diskussion  Die Ergebnisse dieser Studie zeigen, dass Lehramt sstudenten und Studienreferendare der Informatik Kreativität sehr schätzen. Kreativität wird vor allem als eine generelle Fähigkeit gesehen, die  sich in unterschiedlichen Kontexten und mit ve rschiedenen Ausprägungen ä ußert. Außerdem wird  Kreativität als ein Weg gesehen, Schüler zum Le rnen zu motivieren und ihr Interesse für die  Informatik zu entfachen. In vielen Punkten unt erstützen diese Ergebnisse das Faktorenmodell für  kreativen Informatikunterricht. Dazu gehören Me rkmale, an denen man Kreativität identifizieren  kann und Umgebungsfaktoren, die Kreativität unterst ützen. Die meisten Lehrer beurteilen Kreativität von einem starken persönliche n Blickwinkel. Dies basiert ve rmutlich auf der Notwendigkeit  der Lehrer, Schüler bezüglich ihrer persönlic hen Entwicklung beurteilen zu müssen. Vor dem  Hintergrund der Förderung von Kreativität ist das ein wichtiger und förderlicher Aspekt. Die Art  und Weise, wie die zukünftigen Informatiklehrer Kreat ivität im Unterricht identifizieren, zeigt eine  Sichtweise, die möglicherweise aus der Informa tik stammt. Während sich ein großer Teil der  Kreativitätsforschung auf Merkmale kreativer Produkt e bezieht, betonen die Lehrer eher kreative  Prozesse. Typischerweise liegt im Informatikunt erricht ein Schwerpunkt auf Problemlöseprozessen. Nur ein kreativer Ansatz führt dabei zu einer besonderen Lösung.  Die Vorstellung von Informatik als kreatives Fach ist eine Voraussetzung für die Berücksichtigung  von Kreativität im Informatikunterricht. Alle Sä ulen des Faktorenmodells finden sich in den  Antworten, Begründungen, Ausführ ungen und Beispielen wieder. Ebenso geben die Lehrer im  Bezug auf ihre eigene Entwicklung an, dass Kreativität ein Grund dafür war, sich ursprünglich für  Informatik zu interessieren. Das könnte ein Grund dafür sein, warum sie nun Kreativität als einen Weg verwenden wollen, ihre Schüler für Informatik zu interessieren. Für einen Lehrer, der sich nie  kreativ mit Informatik beschäftigt hat, wäre so lch ein Transfer unmöglich. Vor dem Hintergrund  kreativitätsfeindlicher Eindrücke, von denen die Be fragten im Bezug auf ihr Studium berichten,  sollten Hochschullehrer ihr Bild von der Informatik , welches sie an Universitäten transferieren,  überdenken.   Die Vorstellungen der Befragten da von, wie Kreativität in der Informatik gefördert werden kann,  entsprechen weitgehend der Forschung. Keiner b eschränkt sich ausschließlich auf herausragend  kreative Schüler. Basierend auf der Annahme, dass  Kreativität bei jedem gefördert werden kann,  wurden Methoden genannt, die auf alle Schül er angewandt werden können. Dennoch sind die  genannten Methoden wenig differenziert. Die z ukünftigen Lehrer sind sich unsicher, wie sie  langfristig und strategisch Kreativität einsetzt en können und welchen Vorteil dies auch für den  Unterricht bringen kann. Hier ist didaktische Un terstützung notwendig und kann das Faktorenmodell ansetzen.  In den Antworten finden sich eine Vielzahl von Beispielen kreativer Erlebnisse mit Schülern und  kreativer Produkte. Alle Beispiele berichten glei chzeitig von einem Lernerfolg. Leider weisen die  Befragten auch daraufhin, dass Kreativität eher ein seltenes Phänomen ist und dass sie nur selten  Kreativität im Unterricht ihrer Mentoren beobachte n. Offensichtlich lassen die schulischen Rahmenbedingungen Kreativität nur sehr bedingt zu. Alle rdings ist es positiv, dass sich die Befragten  davon nicht entmutigen lassen.   Untersuchungen zum Faktorenmodell 79    Das Verständnis von Kreativität, welches die zukünfti gen Lehrer darstellen, ist sicher hinterfragbar  und trifft nur bedingt die herausgearbeitete Defi nition von Kreativität. Einige kreative Ergebnisse,  wie sie dargestellt wurden, sind evtl. besser als „p roduktiv“ zu bezeichnen, da ihnen der Aspekt  der Neuheit fehlt. Allerdings bietet dieses prag matische Verständnis von Kreativität eine niedrige  Schwelle und Motivation für Schüler, sich offene n und kreativen Aufgaben zu stellen und damit  die Angst vor eigenen neuen Hera ngehensweisen in der Schule und  anderswo zu verlieren.   6.5 Fazit der Untersuchung des Faktorenmodells  Basierend auf den Ergebnissen der Studien konnt en bereits verschiedene Aussagen getroffen  werden, die im Wesentlichen alle die im Faktor enmodell identifizierten Dimensionen und Faktoren stützen. Abschließend sollen die im Kapitel 5 aufgestellten Hypothesen diskutiert werden.  Hypothese 1: Im Informatikunterricht stimuliert  kreatives Arbeiten Motivation und Interesse der Schüler.   Alle vier Untersuchungen stützen diese Hypothese. Während kreative Aufgaben in und außerhalb  des Informatikunterrichts für Motivation und Inte resse bei den Schülern sorgten, wurde teilweise  sogar von einem demotivierenden Effekt ni chtkreativer Aufgaben berichtet.   Motivation und Interesse gehen im Informatikunt erricht in der Regel einher mit persönlichen  Herausforderungen, bedeutungsvo llen und relevanten Aufgaben, mit denen sich die Schüler  identifizieren können, und Originalitä t bei der Ausführung der Tätigkeiten.  Hypothese 2: Im Informatikunterricht wird Krea tivität aufgrund des kreativen Charakters  des Fachs Informatik gefördert.   Die Titulierung und Wahrnehmung von Informatik als kreatives Unterrichtsfach konnte in allen  Studien bestätigt werden. Hierbei sind es vor alle m informatische Prozesse, die Experimentieren,  Exploration und unabhängiges und selbständiges Ar beiten erlauben und ein Gefühl von Kreativität  vermitteln. Ebenso bestätigt sich die Betonung in formatischer Produkte als Ziel kreativer Prozesse  und deren positiver Einfluss auf Mo tivation und Interesse der Schül er. An verschiedenen Stellen  wurde verdeutlicht, dass Projekte als Unterri chtsmethode kreatives Arbeiten begünstigen. Der  Aspekt des Bausteinprinzips wurde nur im Sc hülerinterview explizit als kreativitätsförderndes  Element der Informatik erwähnt und die Vorteile fü r kreatives Arbeiten in der Informatik ausführlich beschriebenen. Dass dieser Aspekt in den ande ren Studien nicht sichtbar wurde, könnte darauf  zurückzuführen sein, dass in keiner der Studien explizit zu diesem Thema Daten erhoben wurden.   Hypothese 3: IKT fördern Kreativität im Informatikunterricht.  Als deutlichstes kreativitätsfördendes Medium stel lt sich das Internet dar. Für individuelles  zielstrebiges kreatives Arbeiten kommt dem Inte rnet als Wissensquelle eine zentrale Bedeutung  zu. Mehrfach erwähnen die Befragten das Intern et auch als willkommene Möglichkeit, ihre  Produkte zu präsentieren und von ande ren Personen Feedback zu erha lten. Darüber hinaus wurden  Programmierumgebungen/Compiler als Quelle von Feedback und damit als „Partner“ beim  Problemlösen charakterisiert. Diese ermögliche n den Schülern individuelles unabhängiges Experimentieren und ein schrittweises  Entwickeln von Lösungen.   Der schulische Informatikunterricht wurde in der Mehrzahl der Aussagen als ein Umfeld charakterisiert, welches kreatives Arbeiten nicht unterstüt zt. Einige Studenten und Referendare berichten  allerdings auch von positiven Erlebnissen, die für die Zukunft hoffen lassen.    Im folgenden Kapitel wird eine Operationalisie rung des Faktorenmodells vorgenommen, die dabei  helfen soll, Unterricht bzw. Un terrichtsphasen in einer Art und Weise zu gestalten, dass im  Informatikunterricht Kreativität angere gt, gefördert und gefordert wird.  80  Kriterien kreativen Informatikunterrichts    7 Kriterien kreativen Informatikunterrichts101  Bis hierher wurden die Faktoren, die Kreativität im Informatikunterricht maßgeblich beeinflussen,  herausgestellt, analysiert und anhand verschiedener Studien untermauert und illustriert. Für die  Umsetzung eines kreativen Informatikunterrichts und die Evaluation von Unterricht müssen diese  Faktoren nun konkretisiert werden. Im Folgen den werden auf dem Faktorenmodell basierende  Kriterien formuliert, die für einen kreativen In formatikunterricht maßgeblich sind. Die Kriterien  werden jeweils begründet und teilweise mit einem für das Kriterium spezifi schen Beispiel illustriert. Abschließend werden die Kriterien zu eine r Analyse von in der LOG IN veröffentlichten  Unterrichtsbeispielen hinsichtlich der Berück sichtigung und des Stelle nwerts von Kreativität  herangezogen.  7.1 Berücksichtigung de r Fach-Dimension  In dieser Dimension werden Kriterien aufgestellt, die sich aus den Möglichkeiten, die das Fach  Informatik für Kreativität bietet, ergeben.  Kreative Leistungen sind nur in eigenständiger Ar beit möglich, welche grundsätzlich durch die  zentrale Stellung von Projekten im Informatikunt erricht begünstigt wird. Da selbständige Arbeitsphasen im Unterrichtskontext durch den Unterrichts verlauf bzw. den Lehrer einen Rahmen in  Form von Themen und Aufgabenstellungen oder Ar beitsaufträgen bekommen, sind diese hinsichtlich ihres kreativen Potentials genauer zu analysieren.   Problemlösung oder Produkt  Im Mittelpunkt der Informatik steht der Prozes s der Softwareentwicklung und damit auch das  Erschaffen von Softwareprodukten. Natürlich kann si ch nicht der gesamte Informatikunterricht auf  Problemlösung und das Modelliere n von Software beschränken: Das Erwerben von Wissen, vor  allem von Konzeptwissen, bildet die Grundlage fü r jede kreative Tätigkeit. Als kreative Unterrichtsphase sollte das Gestalten eines Produkts oder einer Problemlösung allerdings explizit in der  Planung berücksichtigt werden, um dem gelernte n Wissen einen konkreten und kreativen Anwendungsbezug zu geben.   Subjektive Neuheit  Neuheit ist ein wichtiges Kriterium kreativer Leistu ngen. In der Schule dürfte allerdings nur selten  eine absolut neue Lösung von einem Schüler entwickelt werden. Dennoc h kann jeder Schüler für  sich neue (p-kreative) Produkte und Lösungen entw erfen, wenn ihm bezüg lich der Bearbeitung  einer Aufgabenstellung kein Lösungsweg oder Muster  bekannt ist oder vorliegt. Nicht erfüllt wird  dieses Kriterium von der Aufgabe (Negativbeispiel):  „Verschlüssele folgende Nachricht mit der  (bekannten) Caesar-Verschlüssel ung!“ Erfüllt wird dieses Kriterium durch die Aufgabenstellung  (Positivbeispiel): „Denke Dir ein eigenes Ve rfahren zum Verschlüsseln eines Textes aus!“  Offenheit  Charakteristisch für kreative Prozesse sind Best andteile des Problemfi ndens, Explorierens und  Entdeckens. So kann bei einer offenen Aufgaben stellung eine ungefähre Zielvorstellung vorhanden sein, die aber nicht klar definiert ist und erst im Prozess festgelegt wird. Stattdessen sind im  Informatikunterricht oft Rahmenbedingungen einz uhalten, welche die Richtung vorgeben und  durch den Lehrer oder die Aufgabenstellung bes timmt sind. Der Schüler muss sich dann seine  Möglichkeiten bewusst machen und sein Betätigungsfe ld abstecken. Die Möglichkeit, die Aufgabe  selbst mitzugestalten, wirkt zusätzlich motiviere nd. Positivbeispiel: „Wende deine Kenntnisse aus  der Kryptologie bei der Erstellung eines Informa tiksystems an!“ Zur Evaluation von Unterricht                                                         101 Dieses Kapitel wurde bereits veröffentli cht als Teil des Artikels (Romeike 2007b).  Kriterien kreativen Informatikunterrichts 81    oder wenn eine offene Zielstellung nicht möglich oder unpraktikabel ist, lassen sich hinsichtlich  der Offenheit Abstufungen bzgl. des Bear beitungswegs und des Ziels vornehmen.  Offene Ergebniserwartung  Auch bei festgelegtem Ziel ist es möglich, unterschiedliche Ergebnisse zu erhalten, wenn diese die  Anforderungen erfüllen (diverge nte Aufgaben). So kann bspw. den Schülern die Wahl gelassen  werden, verschiedene Parame ter begründet oder nach Beliebe n gegenüber einem empfohlenen  Lösungsweg auszuwählen oder zu variieren. Dieses Vo rgehen führt zu einer begrenzten Vielfalt an  Lösungen. Schülern bietet sich dadurch immerhin  die Möglichkeit, auch andere Lösungen herauszufinden und den Lösungsraum zu erkunden.  Offener Lösungs-/Bearbeitungsweg  Zum kreativen Prozess in der Informatik gehört das Auswählen aus verschiedenen Vorgehensweisen, das Anwenden von Algorithmen, Konzepten und Modellen und das bewusste Entscheiden,  wie eine Problemlösung/ein Produkt erarbeitet we rden soll – nur Aufgaben, die verschiedene  Wege zulassen, ermöglichen de n Schülern Gestaltungserfahrungen.102   Bearbeitungstiefe  Engagieren sich Schüler kreativ, arbeiten sie selbstgesteuert. Sie entscheiden, wie umfangreich,  wie lange und wie intensiv sie sich mit einem Gegenstand/einer Aufgabenstellung auseinandersetzen möchten und welche Qualität ihr Produkt besitzen soll.103 Dabei kann eine intensive Beschäftigung bis hin zum Forschen auftreten. Um diese s Engagement nicht zu unterbinden oder durch  mangelnde Vertiefungsmöglichkeite n abzuschneiden, sollte eine Au fgabe unterschiedliche Bearbeitungstiefen zulassen, z. B. indem das ange strebte Ziel Erweiterungen oder Veränderungen/Optimierungen zulässt. Bei Implementationen steigt die Bearbeitungstiefe z. B. mit der  Optimierung von Algorithmen, der Berücksichtigun g möglicher Fehleingabe n oder umfangreicheren Ausgaben. So lassen sich auch unterschiedliche Leist ungsniveaus berücksichtigen.   Konzeptwissen  Ein solides Grundwissen im Betätigungsgebiet ist Vo raussetzung für jeden kreativen Prozess, da  hierauf begründete Modellierungsund Problem löseentscheidungen basieren. Faktenwissen und  Produktwissen sind in dem Zusammenhang zwar ebenfalls notwendig, aber erst das Anwenden  von dahinter stehenden Zusammenhängen und Konzep ten ermöglicht ein problemübergreifendes  kreatives Denken. Folglich ist insbesondere Konz eptwissen zu vermitteln und den Schülern die  Möglichkeit zu bieten, dieses anzuwenden. Informat iktypisch und für Kreativität hilfreich ist das  Verwenden der Bausteinmetapher für die Darstellung vieler Kon zepte der Informatik. Bspw.  ermöglicht die Kenntnis von Substitution und  Transposition bei Verschlüsselungsverfahren  gegenüber alleinigem Anwendungs-/Al gorithmenwissen, die jeweiligen Eigenschaften geschickt  für ein eigenes Verfahren der Kryptographie anzuwenden und zu beurteilen.  Ideenanregung  Einer kreativen Leistung geht zumeist ein Stimul us voraus. Art, Inhalt, Formulierung und/oder  Hintergrund einer Aufgabenstellung können eine  solche Anregung darstellen. Die Bedeutung  hierfür wird recht schnell deutlich, wenn man z. B. Aussagen von Komponisten betrachtet: Hier ist  häufig ein Gefühl, eine Begegnung, ein Erle bnis oder ein Eindruck von außen ausschlaggebend für  die Inspiration. Auch im Informatikunterricht soll die Aufgabe dem Schüler reichlich Anstoß  geben, Ideen zu entwickeln, z. B. durch den K ontext, in den sie eingebettet ist oder durch das  Anknüpfen an die Erfahrungswelt der Schüler. Das be deutet, dass der Schüler sich vorstellen kann,                                                         102 Auch konvergente Aufgaben können hier hinzuzähle n, falls verschiedene Lö sungswege möglich sind.  103 “Creativity also involves quality of work” (Sternberg 2003, S. 336). 82  Kriterien kreativen Informatikunterrichts    wozu bspw. seine zu entwerfende Software ei ngesetzt werden kann und welche „größeren“  Probleme sie löst.  7.2 Berücksichtigung der Schüler-Dimension  Kreative Beschäftigung kann einen Menschen begeistern, an die Aufgabe fesseln und/oder in einen  Flow-Zustand (vgl. Kapitel 2, Abschnitt 2.2) ver setzen, in welchem er voll in seiner Betätigung  aufgeht. Ziel kreativer Unterrichtsphasen sollte es sein, einem solchen Empfinden oder einem  solchen Zustand möglichst nahe zu kommen. Hi erzu zählt auch, eine positive Einstellung zur  Kreativität zu etablieren, welche durch folgende  schülerorientierte Anforderungen begünstigt wird.  Relevanz  Eine zentrale Voraussetzung für einen kreativen Un terricht ist ein Unterrichtsgegenstand, der für  die Schüler relevant und interessant ist und ansp rechend motiviert wird. Interesse und besonders  intrinsische Motivation sind entscheidende Faktor en für kreative Leistungen. Es ist demnach  notwendig, dass die Schüler vom Thema, mit dem sie sich beschäftigen sollen, angesprochen  werden. Hierzu sollte das Thema aus der Lebenswe lt der Schüler stammen und/oder so aufbereitet  sein, dass der Schüler einen persönlichen Bezug dazu herstellen kann. Im Informatikunterricht  sollte das leicht sein, wenn ein Ausschnitt der R ealität modelliert wird. Möglichst konkret statt  abstrakt bedeutet dann auch, wenn möglich au f „Zahlenbeispiele“ zugunsten von „greifbaren“  Beispielen zu verzichten.  Identifikation  Um möglichst stark in seiner Arbeit aufzugehen, soll sich der Schüler mit seiner Beschäftigung  identifizieren können. Der Unterrich tsinhalt muss damit für den Schüler eine Bedeutung besitzen  oder zumindest eine Bedeutung erlangen können. Ve rantwortung für einen Teil eines Softwareprojekts übernehmen zu können, das Gefühl als Expe rte eingesetzt zu werden und die spätere Möglichkeit, seine Lösung auch präsentieren zu dürfen, können dies unterstützen.   Originalität  Jeder Schüler ist ein eigenes Individuum mit ei genen Ansprüchen, Vorstellungen und Vorlieben.  Originalität als Kriterium kreativer Leistungen be deutet in diesem Zusammenhang, dass sich ein  Schüler einen Originalitätsanspruch setzen und erfüllen kann, bspw. indem er seiner Lösung/Bearbeitung eine „eigene Note“ verleiht. Di ese kann ästhetische, funktionale, gewitzte oder  andere Besonderheiten ausmachen: z. B. durch  die Gestaltung einer GUI, einmalige Programmfunktionen oder spezielle Anwendungsgebiete.  7.3 Anforderungen an di e Unterrichtsumgebung104  Kreatives Arbeiten ist immer auch von der Umge bung abhängig. Ein negatives Unterrichtsklima  kann ein deutlicher Kreativitätshemme r sein. Entsprechend sollte der Lehrer (wie in jedem Unterricht) darauf achten, dass die Schüler sich akzep tiert und wohl fühlen. Eine Besonderheit stellen  hier die Informatikunterrichtslabore dar: Durc h die Arbeit am Computer mit Entwicklungsund  Simulationsumgebungen wird den Schülern Experi mentieren ermöglicht, sie erhalten direktes  (Compiler-)Feedback und können ihre Ergebnisse meis t direkt betrachten und analysieren. Darüber hinaus stellen kreative Unterrichtsphasen  weitere Anforderungen an die Umgebung, um  Kreativität zu stimulieren.                                                         104 Im Folgenden werden aufgrund der Praxisrelevanz auch  fachübergreifende Anforderungen mit einbezogen, die sich  aus der Kreativitätsforschung ergeben, aber nicht explizit im Faktorenm odell verdeutlicht sind.  Kriterien kreativen Informatikunterrichts 83    Experimentieren  Kreativ tätig sein bedeutet, mit Ideen zu expe rimentieren, Heuristiken anzuwenden und Lösungsmöglichkeiten zu testen. Ist das Lösungsfinden durch Versuch und Irrtum auch ein Vorgehen, das  methodisch im Informatikunterricht oft nicht präf eriert wird, so gehört es doch zum kreativen  Prozess dazu und ermöglicht gerade in der Soft wareentwicklung das Aufstellen und Testen von  Hypothesen für kleinere Probleme. Experime ntieren schließt hierbei nicht das „NachExperimentieren“ gemäß vorgege bener Versuchsanleitungen mit ei n, sondern meint das selbstständige Untersuchen und Prüf en von Ideen und Hypothesen.   Zeitlicher Raum  Kreativität ist unter Druck nur schwer realisierb ar. Zur Überprüfung und Realisierung von Ideen  sowie für die Illumination von Gedankenansätzen wird  Zeit benötigt. Da die Schüler in kreativen  Unterrichtsphasen selbstgesteuert arbeiten, teilen si e sich ihre Zeit auch selbst ein; Informatikprojekte begünstigen dieses Kriterium.   Unterrichtsklima der Vielfalt  So, wie zeitlicher Druck negative Einflüsse haben kann, sind auch Konf ormitätsdruck (Gruppendenken), erwartete Perfektion (Suche nach der er warteten Antwort), Hierarchien und frühe Evaluation Kreativitätshemmer. Stattdessen sollte der Unterricht gegenseitige Anregungen und Inspiration ermöglichen. Neue Ideen sollten willkommen sein, Misserfolge ermöglicht und vielfältige  Lösungen begrüßt und respektiert werden. In kaum  einem anderen Unterrich tsfach als Informatik  ist es möglich, so viele verschiedene Ergebni sse zu erhalten. Diese sind vorzustellen und zu  fördern, auch wenn eine Software am Ende nicht „läuft“.  Coaching  Während im traditionellen Unterricht der Lehrer den Unterricht leitet, Wissen vermittelt und die  Schüler korrigiert und bewertet, besteht in krea tiven Unterrichtsphasen seine Aufgabe im Coaching: Sollten Schüler ein nur schwer zu überwindendes Problem haben, nicht weiter wissen oder eine Inspiration benötigen, kann der Lehrer helfen , ansonsten hält er sich – vor allem auch mit  wertenden Äußerungen – zurück. Zuspruch und Mo tivation sind allerdings legitim und notwendig.  Damit sollte der Lehrer auch au sdrücken, dass er Kreativität begrüßt und wertschätzt. Er berät,  begleitet, informiert und unterstütz t wo erforderlich und erwünscht.  7.4 Kreativität in Unterrichtsbe ispielen der Informatik  Mit Hilfe der aufgestellten Kriterien kreativen Informatikunterrichts soll nun untersucht werden,  inwieweit Kreativität im Informatikunterricht bereits  in Unterrichtsbeispielen der LOG IN berücksichtigt wird. Da eine explizite Thematisierung von Kreativität in der LOG IN bisher noch nicht  erfolgte, wird im Folgenden untersucht, ob si ch kreative Aspekte des Informatikunterrichts  implizit hierin wiederfinden. Hierzu wurden 14 4 Unterrichtsvorschläge, die innerhalb der Jahre  1995-2006 vorgestellt wurden, auf Indizien analysiert.105   7.4.1 Zum Vorgehen  Die Unterrichtsbeispiele beinhalten meist eine inhaltliche und eine methodische Ebene. Für die  Untersuchung waren vor allem die methodischen Hi nweise, die Unterrichtsempfehlungen sowie –  wenn dargestellt – die (Teil-)Lernziele interes sant. Schüleraktivität wird in der Regel durch  Arbeitsaufträge oder Aufgaben gesteuert. Solc he durch Unterrichtsbeis piele suggerierte Schüleraufgaben wurden genauer betr achtet. Ein großer Teil der Unterrichtsskizzen bezog sich allerdings auf Inhalte und deren didaktische Aufbereitu ng. Bzgl. des Aufbaus de r Vorschläge stellten                                                         105 Die Untersuchung wurde mit Unterstützung einer Gruppe von Lehramtsstudenten des Ha uptstudiums durchgeführt,  nachdem die Kriterien ausgiebig besprochen wurden. 84  Kriterien kreativen Informatikunterrichts    sich folgende Fragen: Lässt die vorgeschlagene Vorgehensweise die Erfüllung der Kreativitätskriterien zu? Bleibt im Kontext des dargestellten Unterrichts Raum für kreative Phasen? Die Analyse  brachte folgende Ergebnisse.106  7.4.2 Kriterien der Fach-Dimension  Nur gut die Hälfte der Unterrichtsvorschläge  lässt den Schülern die Möglichkeit, selbst problemlösend oder gestaltend  tätig zu werden. Hier scheinen viele Lehrer v. a. dem Verstehen von Informatiksystemen und dem Aneignen von Wissen einen Vo rzug zu geben. Indikatoren für solche  Unterrichtsvorschläge sind formulierte rezeptive Lernziele der Art: „die SuS107 wissen, dass...“ ,  „die SuS erkennen, dass...“  oder „die SuS vollziehen nach, wie...“ . Erfüllt wurde dieses Kriterium  z. B. von Unterrichtsbeispielen zur Kryptologie oder zur Gestaltung von Internetpräsentationen.   Subjektiv neue  Aufgaben werden in 57% Prozent der Un terrichtsskizzen gestellt. Dieser Wert  korrespondiert mit der Art der Aufgabenstellunge n: Sollen die Schüler nicht problemlösend oder  gestaltend tätig werden, besteht ihre Aufgabe wohl darin, den Lernstoff an Aufgaben zu festigen,  die zu den behandelten analog sind, bzw. an ä hnlichen Aufgaben nachzuvollziehen. Mitunter  würden einfache Modifikationen reichen, um ei ner Aufgabenstellung Neuigkeitswert zu geben,  aber dennoch Gelerntes anwendbar zu machen: „Definiere ausgehend von der hier beschriebenen  Ameisenwelt eine Hamsterwelt ge mäß folgender Vorstellung [...]“  (Prätorius 2004). Immerhin  zwei Drittel der Unterrichtsskizzen zielen auf die Vermittlung und Anwendung von Konzeptwissen. Dies bedeutet bspw. die Vermittlung der Textve rarbeitungsdarstellungen „kursiv“ oder „fett“  als Attribute des Objekts „Zei chen“. Die Vermittlung einer Handl ungsfolge zum „Kursiv-machen“  eines markierten Wortes bewirkt dagegen proze durales Wissen. Gut die Hälfte der Unterrichtsskizzen lässt eine variable Bearbeitungstiefe  zu und immerhin die Hälfte regt die Schüler zum  Einbringen eigener Ideen an. So bietet eine Unte rrichtssequenz zu interaktiven Animationen eine  Bandbreite an Möglichkeiten, eigene Ideen einz ubringen, während „Beobachtungen an Bildschirmen“ wenig Einfluss zulassen.  Der Grad der Offenheit  einer Aufgabe ist ein entscheidender Anhaltspunkt dafür, wie viel Kreativität verlangt wird und eingebracht werden kann. Aufgaben mit offener Zielstellung und damit mit  Möglichkeiten des Problemfindens regen nur ein Fünftel der vorgestellten Unterrichtssequenzen  an (i. d. R. Aufgaben zum Modellieren oder Pr ogrammieren in einem bestimmten Themenbereich). Verschiedene Ergebnisse sind nur bei 44% der Aufgaben möglich, verschiedene Bearbeitungswege bei knapp der Hälfte. Vor dem Hinter grund, dass Modellieren und Problemlösen einen  zentralen Stellenwert in der Informatik besitzt und wohl jeder dieser Prozesse in seiner Durchführung variabel ist, scheint dieses Ergebnis unbefri edigend. Konvergente Aufgaben mit strikten  Lösungsmustern scheinen den Informatikunterricht zu dominieren.  7.4.3 Kriterien der Schüler-Dimension  Fast drei Viertel der Unterrichtsskizzen wählte n als Unterrichtsgegenstand Themen, die für die  Schüler relevant  sein dürften108 und motivierten diese ansprechend. Publizierende Lehrkräfte sind  sich offenbar dem wichtigen Einflussfaktor von Mo tivation auch auf den allgemeinen Unterricht  bewusst. Gezielt werden in vielen Beispielen  schülerrelevante Themen ausgewählt, die von  Gefahren im Internet bis hin zu gut motiviert en Graphenproblemen reichen. Dieses Kriterium  wurde z. B. nicht erfüllt von Unterrichtsvorschlä gen zur Turingmaschine, zu Teleheimarbeit oder  zur Datenmodellierung109.  Eine Auswertung des Kriteriums, ob sich ein Schüler mit einem Thema identifizieren  kann, ist  problematisch. Während der unterrichtende Lehrer ein Gefühl für die Interessen und Bedürfnisse                                                         106 Da es sich um eine indizienbezogene Auswertung handelt, werden die Anteilsan gaben nur grob dargestellt.  107 Schülerinnen und Schüler.  108 Die tatsächliche Relevanz ist natür lich vom Individuum abhängig. Bei der Be urteilung wurden die Fragestellungen zu  Grunde gelegt: Stammt das Thema aus der Lebenswelt eines Schülers? Ist das Thema schülerorientiert?  109 Was nicht bedeutet, dass es unmöglich ist, diese Themen entsprechend zu motivieren.  Kriterien kreativen Informatikunterrichts 85    seiner Schüler hat und diese bei der Berücksich tigung des Kriteriums in der Planung des Unterrichts einbeziehen kann, ist dies bei de r Auswertung von Unterrichtsvorschlägen  schülerunabhängig nur schwer durchzuführen. Di e zugrunde liegende Frage bei der Auswertung  war entsprechend: „Ist es grundsätzlich möglich,  sich mit dem Unterrichtgegenstand bzw. der  eigenen Tätigkeit im Rahmen dieses Unterrichts zu identifizieren?“ Offensichtlich ist das der Fall  bei Modellierungen, Proble mlösungen oder Themen, welche die Sc hüler direkt betreffen. Bei der  Behandlung von z. B. Protokollen ist das nicht ohne  weiteres möglich. 41% der ausgewerteten  Themen ließen in diesem Sinn eine Identifizierung zu. Das Einbringen einer „ eigenen Note “  ermöglichten 39% der Unterrichtsvorschläge, welc hes häufig durch das Gestalten einer GUI, einer  Präsentation o. ä. geschah.   7.4.4 Kriterien der Unterrichtsumgebung  Gut die Hälfte der Unterrichtsskizzen gibt den Schülern die Möglichkeit zu experimentieren  – hier  spiegelt sich die Durchführung des Informatikunte rrichts in Computerkabinetten wider, welche  softwarebasierte Experimentierund Simulations umgebungen bereitstellen. Entsprechend beziehen  sich auch einige Unterrichtsskizzen auf die Anwendung solcher Software. Ein gewisser zeitlicher  Freiraum  wird den Schülern in immerhin 41% der Unterrichtsskizzen zugestanden. Dieses geschieht meist durch das Einbinden von (Mini-) Pr ojekten oder längeren Sc hülerarbeitsphasen. Eine  Mehrzahl der Lehrer hält an der traditionellen Lehrerrolle  fest – in nur 38% gibt der Lehrer  phasenweise diese Rolle ab und tritt  in die Rolle des Coachs. Ein Unterrichtsklima der Vielfalt  ist  in nur einem Drittel der Unterrichtssequenzen vorste llbar. Möglicherweise offenbart sich hier ein  Bedürfnis der Lehrkräfte nach konvergenten, le icht zu überschauenden und zu bewertenden  Lösungen sowie einer möglichst homogenen Schüle rschaft, welche den Unterricht einfacher  machen.   7.4.5 Fazit  Insgesamt ist festzustellen, dass eine Mehrhe it der untersuchten Unterrichtsvorschläge einem  kreativen Informatikunterricht noch wenig Beachtung schenkt. Es spiegelt sich hierin allerdings  auch wider, dass Informatikunterricht einen Teil der Anforderungen für kreatives Arbeiten per se  schon anwendet, sei es durch das Arbeiten an Com putern, welche kreatives Arbeiten begünstigen,  oder durch den zentralen Stellenwert von Problemlö sen und Modellieren. In nicht wenigen Unterrichtsskizzen wäre allerdings durch eine Ände rung der Aufgabenstellung und durch die Berücksichtung der Kriterien ein stärkeres Einbinden kreativer Unterrichtsphasen möglich. 86  Anwendung in einem Unterrichtsbeispiel    8 Anwendung in einem U nterrichtsbeispiel   In den vorausgegangenen Kapiteln wurde ein au f theoretischen Erkenntnissen basierendes Modell  entwickelt und durch verschiedene Studien plausib ilisiert sowie durch Kriterien konkretisiert. Zur  Verdeutlichung des Faktorenmodells und der Anwen dung der Kriterien kreativen Informatikunterrichts wird in diesem Kapitel ein Unterrichtsbeis piel beschrieben, welches das Faktorenmodell und  die Kreativitätskriterien anwendet und zum Ziel hat, damit die Kreativität der Schüler in den  Unterrichtskontext einzubinden und zu nutzen. Das Un terrichtsbeispiel dient im Weiteren einer  empirischen Untersuchung der in Kapitel 5 aufgestellten Hypothesen in der Praxis.   8.1 Überlegungen zur Einführung in die Programmierung110  Programmierung ist ein problematisches Thema im Informatikunterricht. Die Vielzahl der Veröffentlichungen und unterschiedlichen Ansätze zur Vermittlung der Grundlagen der Programmierung verdeutlichen die Brisanz und Unsicherheit  des Themas, bei welchem Lernende häufig  Misserfolge einstecken müssen (vgl. auch Kapitel 4). Da Programmieren ein großes Potential zur  kreativen Entfaltung bietet, soll Kreativität in diesem Beispiel zur Einführung in die Programmie-rung von Anfang an mit einbezogen werden. Die in haltlichen Ziele der Unterrichtssequenz sind in  Abbildung 31 zusammengefasst.     Die Unterrichtssequenz verfolgt in Anlehnung an die Bildungsstandards Informatik die  Umsetzung der folgenden Lernziele und das He rausbilden folgender Kompetenzen der  Schülerinnen und Schüler:  1. Sie entwickeln ein grundlegendes Programmierverständnis  2. Sie beschreiben die Eigenschaften von Algorithmen, nennen Beispiele für erfüllte  und verletzte Eigenschaften und entscheiden, ob ein Problem algorithmisch lösbar ist.  3. Sie verwenden algorithmische Gr undbausteine zur Programmierung  o Sequenz, Schleife, Entscheidung , Variablen (lokale/globale)  o Eingabe und Ausgabe von Information  o Rechenoperationen und Ve rgleichsoperatoren   o Objekt, Botschaft, Attribut, Methode  4. Sie stellen Algorithmen dar  o mit Scratch-Bausteinen  5. Sie verstehen von Algorithmen und Programmtexte:  o Lesen und analysieren Programme  o Implementieren, modifizier en und erweitern Programme  6. Sie entwerfen, implementieren und testen Programme  7. Sie lösen Probleme selbstständig  8. Sie verwenden Hilfesysteme selbstständig    Darüber hinaus werden folgende Prozesskompetenzen angesprochen:  o Modellieren und implementieren  o Begründen und Bewerten  o Strukturieren und Vernetzen  o Kommunizieren und Kooperieren  o Darstellen und Interpretieren  Abbildung 31: Lernziele der Unterrichtssequenz.                                                         110 Zielgruppe dieses Beispiels ist ein Grundkurs Informatik der 11. Klasse eine Gymnasiums.   Anwendung in einem Unterrichtsbeispiel 87    Zur Auswahl des Unterrichtswerkzeugs   Als Programmiersprache und Tool zur Unterstütz ung von Kreativität wird die visuelle Programmiersprache Scratch (vgl. Maloney 2004) verwendet.  Wie bereits in Kapitel 3 verdeutlicht wurde,  erfüllt Scratch Shneidermans Kriterien für kreativ e Softwaretools und ist damit für den genannten  Zweck bestens geeignet.  8.2 Ein kreativer Einstieg in die Programmierung   Die Umsetzung der Kriterien kreativen Informa tikunterrichts und der Anforderungen des Challenge-Cycles wird durch Berücksichtigung folgender Aspekte erreicht.   Motivation  Das Motivieren der Schüler ist ein wesentliche r Teil des Unterrichtens und Grundvoraussetzung  für kreatives Lernen. Die Aufmerksamkeit der Schüler und die Förderung der Schülermotivation  sollen angesprochen werden, indem die Rele vanz und Anwendbarkeit der zugrunde liegenden  Konzepte verdeutlicht werden und durch die Au swahl von Themen, zu denen die Schüler einen  Bezug aufbauen können, z. B. durch das Animie ren einer Geschichte aus ihrem Leben oder durch  das Entwickeln auf eigenen Ideen basierender Spiele.  Betonung von Konzepten  Neue Konzepte und Inhalte werden eingeführt und veranschaulicht mit Hilfe der BausteinMetapher. Eigenschaften, Anwendungen und Ve rnetzungen der grundleg enden Programmierkonzepte werden im Vorhinein durch den Lehrer erklärt, von den Schülern selbst erarbeitet oder von  den Schülern in der praktischen Auseinanderset zung mit der Programmierung selbst entdeckt.  Hilfreich ist hierbei die visuelle  Darstellung von Programmierkonzep ten in Scratch als Bausteine,  die nur in syntaktisch richtiger Verwendung kombiniert werden können. Methodisch werden die Konzepte entweder im Unterrichtsgespräch, durch  Arbeitsblätter oder innerhalb der Schülerpräsentationen eingeführt.  Inspiration  Grundlegend für kreativen Unterricht ist es, Schüler zu inspirieren. Dies geschieht vor allem durch  Beispiele und Brainstorming über die vorhandenen Möglichkeiten. Hierdurch wird die Kreativität  der Schüler angeregt. Zusätzlich lernen sie abzu wägen zwischen dem, was sie erreichen wollen  und dem, was sie mit den gelernten Konzepten und den Möglichkeiten der Programmiersprache  erreichen können.  Challenge  Das Finden einer eigenen Challenge wird den Schülern ermöglicht, indem offene Aufgaben  gestellt werden, die sich variabel komplex bear beiten lassen. Aufträge geben grundsätzlich eine  Richtung und einen generellen Rahmen von dem vor , was geschaffen werden soll. Damit müssen  die Schüler Probleme lösen, die sie sich zuvor präzisieren und definieren („Was will ich tun?“).  Für Aufträge gibt es keine „richtige“ Lösung (Offenheit) und Lösungen können im Rahmen der  Unterrichtszeit – oder darüber hinaus – von den Schülern entsprechend dem eigenen Können und  Interesse optimiert und erweitert werden, bspw.:  Animiere deinen Namen, indem die Buchst aben auf Mausbewegungen und/oder Mausklicks  reagieren.  Hierdurch können sich die Schüler mit den neu ge lernten Konzepten vertraut machen, die Programmierumgebung weiter erkunden, Lösungen für ihre Ideen finden, diese umsetzen und auspro-bieren/testen.  88  Anwendung in einem Unterrichtsbeispiel    Präsentation und Reflexion  Die (Mini-)Projekte werden mit dem Upload de r Programme auf einen Internetserver (ScratchWebpage) und der Vorstellung eini ger Ergebnisse im Kurs zu Beginn der jeweils nächsten Unterrichtsphase abgeschlossen. Bei den Präsentationen we rden jeweils Ideen, Probleme und Strategien  vorgestellt und diskutiert. Wenn Schüler in ihre n Lösungen neue Konzepte entdecken und anwenden, werden diese dem restlichen Kurs am Beispiel verdeutlicht.     Aus Platzgründen wird auf die weitere Darstell ung des Unterrichtsbeispiels an dieser Stelle  verzichtet. Die gesamte Unterrichtssequenz un d die Erfahrungen einer Erprobung können im  Anhang nachgelesen werden.   Evaluation des Unterrichtsbeispiels 89    9 Evaluation des Unterrichtsbeispiels   Zur Überprüfung der Durchführbarkeit eines kreativ en Informatikunterrichts  wurde das beschriebene Unterrichtsbeispiel in einem Grundkurs Info rmatik der 11. Klasse eines Gymnasiums erprobt.  Die Evaluation der Erprobung folgte zwei Ziel en: Der Evaluation der Unterrichtssequenz und der  Überprüfung der in Kapitel 5 aufgestellten Hypothesen in der Praxis.   Darüber hinaus soll das Bild, das die Schüler von der Informatik hinsichtlich der Rolle von  Kreativität in der Informatik entwickeln, nach  Abschluss der Unterrichtssequenz genauer untersucht werden.   9.1 Auswertung der Unterrichtssequenz111  Die Auswertung der Unterrichtssequenz konkretisie rt sich an folgenden zu beantwortenden  Fragen:   1. Wie wirkt sich der kreativitätsorientierte Un terricht auf die Motivation und das Interesse  der Schüler aus?  2. Wie wirkt sich der kreativitätsorientierte Unte rricht auf das Verständnis der thematisierten  Inhalte (und damit auf die Leistungen) aus?  9.1.1 Zum Vorgehen  Um vergleichende Ergebnisse zu erhalten, wurd e die Einführung in die Programmierung parallel  in zwei Grundkursen Informatik (11. Klasse) de r gleichen Schule durchgeführt. Parallel zur  Durchführung der in Kapitel 8 beschriebenen krea tivitätsorientierten Unterrichtssequenz, die durch  mich durchgeführt wurde, unterrichtete eine erfahrene Kollegin den Parallelkurs nach einem  „traditionellen“112 Ansatz, der das Lösen von gegebenen Problemen in den Vordergrund stellt. In  diesem Kurs wurde das Werkzeug „Roboter-Karol “ verwendet sowie dazugehörige empfohlene  Lernaufgaben eines Schulbuchs für de n Informatikunterricht (Engelmann 2004).  Der untersuchte Kurs bestand aus 21 Schülern zwischen 15 und 17 Jahren, davon 38% Mädchen.  Die Kontrollgruppe bestand aus 23 Schülern glei chen Alters mit 61% Mädchen. Die Vorerfahrungen beider Kurse in Informatik sind vergleichbar. So waren die Unterrichtsinhalte beider Kurse bis  hierher themengleich. Keiner der Schüler hatte  Vorerfahrungen im Programmieren. In beiden  Kursen wurde in der vorhergehenden Unterrich tssequenz das Thema „Datenbanken“ gemäß dem  Brandenburger Rahmenlehrplan (vgl. MBJS Brandenburg 2006) behandelt.   9.1.2 Datenerhebung   Als Forschungsinstrument wurde zur Beantwortung der ersten Frage ein Fragebogen verwendet.  Zur Beantwortung der zweiten Frage wurden die Du rchschnittsnoten der Schüler vor und nach der  Unterrichtssequenz sowie die Ergebnisse eines T ests zum Ende der Unterrichtssequenz herangezogen.   Der Fragebogen113 (siehe Anhang) war wie folgt strukturiert:  1. Skalenbasierte Fragen zu Aussag en über Informatikunterricht allgemein, z. B. „Informatikunterricht macht mir Spaß.“                                                         111 Teile dieses Abschnitts wurden bereits zum Teil si nngemäß und zum Teil wortwörtlich in (Romeike 2008a) veröffentlicht.  112 Als “traditionellen” Ansatz  des Problemlösens bezeichne ich die Met hodik, die von vielen Lehrern bei der Einführung in die Programmierung gewählt wird: durch Thema tisierung der Konzepte und einer Sequenz konvergenter  Problemlöseaufgaben mit steigender  Komplexität und Schwierigkeit.   113 Der Fragebogen wurde basierend auf Fragebögen der Fachbere iche Didaktik der Informatik  der Universitäten Siegen  und Paderborn entwickelt.  90  Evaluation des Unterrichtsbeispiels    2. Fragen zur letzten Unterric htssequenz: Empfundene Schwierigkeit, Stoffumfang und Angemessenheit.  3. Bewertung der Lehrtechniken,  -methoden und Werkzeuge.  4. Skalenbasierte Fragen zu den Unterrichtsthemen , z. B. „Ich konnte im Unterricht etwas Neues  entdecken.“  5. Fragen zum empfundenen eigenen Lernerfolg und zu den empfundenen Lernerfolgen des  Kurses.  Der Fragebogen wurde von den Schülern vor und nach  der Unterrichtssequenz zur Einführung in  die Programmierung beantwortet. Die Unterrichtsse quenz umfasste insgesamt 11 Unterrichtsstunden a 45 Minuten, welche sich auf vier Wochen verteilten.   Die abschließende Lernerfolgskontrolle (s iehe Anhang) beinhaltete zwei Teile:  1. Theorie  • Angabe der Definition und Eigenschaften von Algorithmen  • Beschreibung der Konzepte der Progra mmierung und Angabe von Beispielen  2. Praxis  • Erklären der Funktion und Optimierung zweier Programme auf Papier  • Implementieren eines Programms zu einem gegebenen Problem  • Implementieren eines Programms, welches eine  selbst gestellte Aufgabe löst und dabei  alle im Unterricht thematisierten  Konzepte verwendet/demonstriert.  Aufgrund der unterschiedlichen Werkzeuge wurden  die Aufgaben der Kontrollgruppe entsprechend angepasst.   9.1.3 Ergebnisse  Im Folgenden werden zuerst die Ergebnisse des Kurses im Pre-Post-Vergleich dargestellt. Anschließend werden die Ergebnisse mit den Erge bnissen der Kontrollgruppe verglichen.   Motivation, Interesse, Bild der Informatik  Es ist anzunehmen, dass sich das Bild, welches Schüler vom Unterrichtsfach Informatik haben,  auch auf ihr Verständnis von der (Wissenschaft) In formatik auswirkt. Humbert (2003) untersuchte  in seiner Dissertation u. a. die Vorstellungen, di e Schüler von der Informatik haben und resümierte, dass Informatik als eine Art „Wissenschaft vom Computer und der Anwendung von Compu-tern“ gesehen wurde. Die Möglichkeiten des Gestaltens und Anpassens von Softwaresystemen  wurde kaum reflektiert. Ebenso wirkte sich ein Jahr Informatikunterricht nur unwesentlich auf eine  Änderung dieser Sichtweise aus.   -30%-20%-10%0%10%20%30%40%50%60%70% Spaß Verständnis Interesse Kreativität Beeindrucken Verschiedene Lösungen Experimentieren BeteiligungAbgelenkt   Abbildung 32: Zustimmungsänderung im Vergle ich zur vorherigen Unterrichtssequenz.  Evaluation des Unterrichtsbeispiels 91    Die kreativitätsorientierte Unterrichtsseque nz änderte das Bild von der Informatik114 in positiver  Weise (vgl. Abbildung 32). Spaß und Interess e am Fach steigerten sich erheblich:    „Informatikunterricht macht mir Spaß“  Zustimmung vorher:  71%    Zustimmung nachher:  93%   „Ich finde die Inhalte im Informatikunte rricht interessant“  Zustimmung vorher:  29%   Zustimmung nachher: 93%  Diese Faktoren haben einen großen Einfluss auf die Motivation der Schüler und können dazu  dienen, das Interesse an der Info rmatik aufrecht zu erhalten: Programmieren war für die Schüler  sehr motivierend – im Gegensatz zu vielen E rfahrungen im Informatikunterricht und in Einführungskursen an Universitäten, wo Progra mmierung oft ein Grund für Misserfolg ist.   Übereinstimmend mit dem Unterrichtskonzept gab es eine deutliche Änderung in der Bewertung  von Kreativität. 93% der Schüler geben nun an, da ss sie im Informatikunterricht kreativ sein  können, im Gegensatz zu 36% vorher.   Informatik ist grundsätzlich ein Fach, in welc hem für eine Aufgabe verschiedene Lösungen  möglich sind und wo Verständnis für schwierig e Beziehungen auch durch Experimentieren  erreicht wird. Experimentieren spielt in der Prax is eine immer wichtigere Rolle, z. B. bei der  Analyse des Verhaltens von Software (vgl. Reed  2002). In der Schulinformatik werden diese  Aspekte allerdings oft nicht deutlich, insbesonde re wenn Lehrer „effektive“ Wege des Unterrichtens wählen, wie z. B. Frontalunterricht m it konvergenten Problemlöseaufgaben, um den Unterrichtsstoff innerhalb kürzester Zeit „zu schaffen“. Vo r der kreativen Unterrichtssequenz ist sich die  Mehrheit der Schüler dieser Aspekte nicht bewusst . Nach der kreativitätsorientierten Unterrichtssequenz stimmen die meisten Schüler den folgenden Aussagen zu    „Im Informatikunterricht sind für eine Aufgabe Zustimmung vorher: 43%   verschiedene Lösungswege  und Lösungen möglich“  Zustimmung nachher: 86%   „Im Informatikunterricht wird viel experimentiert“  Zustimmung vorher: 14%   Zustimmung nachher:  73% Diese Steigerung ist auch vor dem Hintergrund inte ressant, dass die Schüler in der vorherigen  Unterrichtssequenz Datenbanken untersuchten, entw arfen und damit experime ntierten. Offensichtlich trifft das eigenständige Entwerfen und Ände rn von Software durch kreatives Programmieren  besser das Verständnis der Schüler von „Experimentie ren“ als das Untersuchen der Eigenschaften  eines gegebenen „festen“ Systems, wie der Date nbanken, mit konvergenten Problemlöseaufgaben.   Das Erstellen von präsentierbaren Produkten (Progra mmen) kann sich auch auf das Informatikbild  von Freunden und Familie auswirken. Nach anfangs fast keinem Schüler (7%) stimmen später  immerhin 40% der Schüler der Aussage zu, dass sie mit Ergebnissen aus dem Informatikunterricht  zu Hause oder bei Freunden beeindrucken können.   Verständnis und Leistung  Der eigene Lernerfolg wird von den Schüler n als hoch eingeschätzt. Diese Frage wird vom  gesamten Kurs nahezu übereinstimmend beantw ortet, welches im Gegensatz zum wahrgenommenen Lernerfolg der vorherigen Unte rrichtssequenz steht. Hier streuen sich die Antworten merklich  und verdeutlichen Probleme in etwa der Hälfte der Antworten. Diese Sichtweise wird auch in der  Einschätzung des Lernerfolges des gesamten Kurses durch die einzelnen Schüler deutlich. 87%  geben für die Unterrichtssequenz zur Programmier ung an, dass alle oder die meisten Schüler des  Kurses die Inhalte gut verstanden haben. Für die Unterrichtssequenz vorher gibt die Mehrheit der  Schüler dagegen an, dass ihre Mitschüler beim Lernen Probleme hatten. Interessant hierbei ist,  dass die Einschätzung des eigenen Lernerfolgs be im Thema Datenbanken im Allgemeinen besser  war als der eingeschätzte Lernerfolg des restliche n Kurses. Auch wenn mehr als die Hälfte der                                                          114 „Bild von der Informatik“ bezieht sich hier auf Charakteristika des Unterrichtsfachs wie Experimentieren,  verschiedene Lösungen möglich  und kreativ  sowie subjektive Zuschreibungen wie Spaß , interessant  oder verständlich . 92  Evaluation des Unterrichtsbeispiels    Schüler die Lerninhalte verstande n, lernte der Kurs in einem Klima von Problemen und Nichtverstehen. Bei der Programmierung dagegen wurde durch die vielen Möglichkeiten, Ergebnisse und  Schülerleistungen vorzustellen, ein positiveres Unterrichtsklima erreicht. Dieses wirkte sich  motivierend auf die Ausdauer der Schüler und ihr Stre ben aus, schwierige Sa chverhalte zu verstehen, wenn Probleme auftraten.   Die tatsächlichen Lernerfolge wurd en durch eine schriftliche Lern erfolgskontrolle zum Abschluss  der Unterrichtssequenz festgestellt. Diese wurd e von 94% der teilnehmende n Schüler erfolgreich  absolviert. Der Kursdurchschnitt des Tests ist 0, 2 Zensureneinheiten besser als die Kursdurchschnittsnote in der ersten Hälfte des Schulhalbja hres und im Durchschnitt eine ganze Zensur besser  gegenüber dem Abschlusstest der vorherigen Un terrichtssequenz. Die Leistungen der Schüler  lassen sich in zwei Gruppen aufteilen: 69% e rreichten die Benotung „gut“ und „sehr gut“, 25%  erreichten „befriedigend“ und „ausreichend“. Eine Betrachtung der Ergebnisse getrennt nach  Geschlechtern zeigt, dass alle Mädchen „gut“ und besser abschnitten, während die Ergebnisse der  Jungs über die ganze Notenskala verteilt liegt. Vo r dem Hintergrund, dass viele Informatikund  Programmierkurse Probleme mit den Leistungen von Mädchen haben, überrascht dieses Ergebnis  positiv.  Unterrichtsmethodik  Schüler sind es häufig nicht gew ohnt, eigenständig und mit eigenen Zielen zu arbeiten. Auch wenn  seit langem andere Unterrichtsmethoden aus Sicht der Pädagogik angestrebt werden, überwiegt in  der Praxis immer noch Frontalunterricht als am häufigsten angewandte Unterrichtsmethodik. Das  Anwenden einer neuen Unterrichtstechnik kann sich  vor diesem Hintergrund als problematisch für  alle Beteiligten herausstellen; die Schüler wissen  nicht genau, was von ihnen erwartet wird und  können keinem vertrauten Schema folgen. Entspr echend kann es aufschlussreich sein, die Wahrnehmungen und Einstellungen der Schüler für die neue Unterrichtsmethodik zu untersuchen. Die  Antworten der Schüler zur Unterrichtsmethodik, den Aufgaben und den Unterrichtsstunden werden in Abbildung 33 dargestellt.    0%10%20%30%40%50%60%70%80%90%100% Darstellung verständlich Üben ausreichend Aufgaben lösbar Ideen einbringen und umsetzen Inhalte nützlich Nutzen wurde deutlich Hilfsmittel ausreichend   Abbildung 33: Einschätzung der Unte rrichtsmethodik durch die Schüler.  Alle Schüler bezeichnen die Darstellung der Unte rrichtsinhalte als verständlich. Dieses Ergebnis  wurde angestrebt, ist allerdings aus zwei Gr ünden erstaunlich: Zum einen wurden durch die  Lehrperson nur wenig Anstrengunge n unternommen, die Programmierkonzepte einzuführen und  zu erklären. Mehr oder weniger alle Lernkompe tenzen wurden durch aktive Auseinandersetzung  mit den Programmierkonzepten erreicht. Inhalte wurden kurz präsentiert oder gemeinsam zusammengetragen und sofort angewandt. Zum anderen is t Programmieren als schwieriges Unterrichtsthema im Informatikunterricht bekannt. Die Schül er bezeichnen hier den Schwierigkeitsgrad als  angemessen und bewerten auch ihren Lernerfolg als angemessen oder hoch. Auf die Frage nach  Evaluation des Unterrichtsbeispiels 93    der Schwierigkeit des Themas antwortet die Hälfte der Schüler mit „mal leicht, mal schwer“, die  andere Hälfte mit „eher leicht“.   Die Übungszeit wurde als angemessen empfunden,  auch wenn die Umstände der Unterrichtssequenz für einen gewissen Zeitdruck sorgten. Die Schüler geben an, dass sie eigene Ideen einbringen konnten, und bezeichnen die gestellten Aufgaben als lösbar.   Die Rolle des Lehrers wird in Antworten auf die Frage, wodurch die Schüler am meisten lernten,  reflektiert: Durch Projektarbeit (60%) und Besch äftigung mit den Aufgaben (60%) im Gegensatz  zu Erklärungen des Lehrers (13%). Es ist überra schend, dass Programmieren, zumindest auf dieser  einführenden Stufe, so intuitiv gelernt werden kann.  Fragen zum Unterrichtsthema   Die Antworten zur Relevanz des Unterrichtsthe mas sind etwas ambivalent vor dem Hintergrund,  dass die Schüler in einer technologiereichen Um gebung aufwachsen. Jeder Schüler des Kurses hat  einen Computer zu Hause. Dennoch meinen weniger als ein Drittel der Schüler, dass das Unter-richtsthema etwas mit dem täglichen Leben zu t un hat und nur 43% der Schüler glauben, dass sie  das Gelernte in Zukunft gebrauchen können. Di ese Zustimmungen sind sogar weniger als in der  Unterrichtssequenz davor. Im Unterricht wurden  die Relevanz von Programmierkonzepten und die  Bedeutung im täglichen Leben nich t explizit durch die Lehrperson be tont. Bezüglich der Relevanz  im täglichen Leben als wichtige Motivationsquelle  ließe sich vermuten, dass die Schüler kaum  Motivation für den Unterricht entwickelten. Erst aunlicherweise geben 80% der Schüler an, dass  einige Unterrichtsinhalte für sie besonders intere ssant waren, 87% geben an, dass sie etwas gelernt  haben und 73% finden, dass ihnen das Thema Spaß  gemacht hat. Auch wenn die Schüler nicht  durch die lebensweltliche Relevanz motiviert wu rden, waren die Aufgaben und das kreative Tun  offenbar motivierend genug, dass die Schül er lernten und dabei sogar Spaß hatten.  Vergleich mit der Kontrollgruppe: Betrachtung der Fragebögen  Vor der Einführung in die Programmierung wurden in  beiden Kursen die gleichen Informatikinhalte behandelt. Auch die Schulnoten de r beiden Kurse waren vergleichbar.   Der Vergleich der Antworten der beiden Kurse bezüglich der Einschätzung der Informatik vor  Einführung in die Programmierung zeigt überwiegend Gemeinsamkeiten. Kurs B 115 stimmte etwas  mehr zu bei der Frage nach „Spaß“ und stimmt e deutlich mehr zu bei der Frage nach dem Verständnis der Inhalte. Die weitere n Antworten sind vergleichbar.    0%10%20%30%40%50%60%70%80%90%100% Spaß Verständnis Interesse Kreativität Beeindrucken Verschiedene Lösungen ExperimentierenBeteiligung AbgelenktA  B   Abbildung 34: Zustimmung im Ve rgleich zur Kontrollgruppe.                                                         115 Im Folgenden wird der Kurs, der eine kreative Einführ ung in die Programmierung erle bte, mit A be zeichnet, der  Kurs, in welchem ein Problöseansatz verfolgt wurde wird mit B bezeichnet.  94  Evaluation des Unterrichtsbeispiels    Dies ändert sich deutlich, wenn man die Antwor ten nach der Einführung in die Programmierung  vergleicht. Spaß nimmt in A um 22% zu, während er in B um 32% zurückgeht. Nur gut die Hälfte  der Schüler der Kontrollgruppe empfindet Inform atik nach der Unterrichtssequenz zur Programmierung als ein Fach, das Spaß macht. Während Programmieren einen deutlichen Einfluss auf das  Interesse der Schüler im Kurs A ausübt, bleibt d as Fach für 75% der Schüler in B uninteressant.   In Kurs B steigt ebenfalls die Zustimmung auf die Frage nach Kreativität (+18%). Dies ist ein  interessantes Ergebnis, welches zeigt, dass au ch im problemlösenden Unterrichtsansatz die  Kreativität der Schüler angesprochen wird und dies auch den Schülern deutlich wird. Nicht für alle  Schüler in B wird deutlich, dass für ein Probl em verschiedene Lös ungen möglich sind. Die  Zustimmung zu dieser Aussage steigt in B auf 63% , während in A 86% der Schüler zustimmen.  Die Zustimmungen im Vergleich mit der Kontro llgruppe werden in Abbildung 34 dargestellt.  Vergleich der Leistungen  Die Unterrichtssequenz wurde in beiden Kursen mit den gleichen Lernzielen begonnen. Leider  konnten in Kurs B nicht alle Lernziele erreic ht werden. Variablen sind im dort verwendeten  Werkzeug nicht implementiert. Ebenso wurden die Eigenschaften von Algorithmen vom Lehrer  dieses Kurses aus Zeitmangel nicht thematisiert.    Beide Kurse machen im Fragebogen Angaben zu ihrem Lernerfolg. Während in A alle Schüler  den Lernerfolg als angemessen oder hoch bezeichne n, waren dies in B nur zwei Drittel der Schüler. Die Ergebnisse des abschließenden Tests waren allerdings vergleichbar.  Die Schwierigkeit und  Komplexität der Unterrichtssequenz bezeichnen beide Kurse gleichermaßen als angemessen oder  hoch.   Im Vergleich der Zensuren mit der vorausgehenden Unterrichtsse quenz zeigt sich, dass Kurs A  sich deutlich verbesserte, während Kurs B im Durc hschnitt bei gleichen Leistungen blieb. Unterteilt man die Zensuren allerdings nach Geschlechtern  wird deutlich, dass in Kurs B sich die Jungen  verbesserten, während sich die Mädchen verschlechterten. Im Gegensatz dazu stehen die Leistun-gen des Kurses A. Hier verbesserten sich die Mä dchen deutlich stärker als die Jungen. Vor der  Einführung in die Programmierung war das Leist ungsniveau beider Geschlechter vergleichbar.  9.1.4 Kritische Betrachtung  Die Studie unterlag aus organisatorischen Gründen zwei Schwachpunkten. Zum einen wurden die  Kurse von unterschiedlichen Lehrern unterrichtet.  Der Unterrichtsstil, die Lehrerpersönlichkeit  und die Art und Weise, wie die Schüler mit der Lehrperson zurecht kommen, kann einen deutlichen Einfluss auf den Lernerfolg und die Motivation der Schüler haben. Andererseits, wie aus den  Fragebögen deutlich wurde, welche die Schüler vor der untersuchten Unterrichtssequenz ausfüllten, waren Motivation und Leistungen in beiden  Kursen vergleichbar. Da die Aufgaben und  Übungen, die in der Kontrollgruppe verwendet wu rden, einem etablierten Schulbuch entstammen,  scheinen dieses Aufgaben für einen Kurs, der m it Problemlöseaufgaben in die Programmierung  einführt, typisch zu sein. Zum anderen wurden in den beiden Gruppen nicht nur unterschiedliche  Methoden, sondern auch unterschiedliche Soft warewerkzeuge verwendet. Dieser Fakt könnte  durchaus einen maßgeblichen Einfluss auf die Mo tivation und die empfundene Kreativität haben.  Eine grundlegende Aussage dieser Untersuchung blei bt auch vor diesem Hintergrund gleich: Eine  kreative Einführung in die Programmierung ist m öglich und kann erfolgre ich durchgeführt werden.   9.2 Untersuchung zum Verständnis vo n Kreativität in der Informatik116  Die Ergebnisse der Fragebogenuntersuchung zeigen, dass sich das Bild von der Informatik durch  die kreative Unterrichtssequenz verbessert hat. F ast alle Schüler geben nun an, dass sie im Infor                                                       116 Teile dieses Abschnitts wurden bereits zum Teil si nngemäß und zum Teil wortwörtlich in (Romeike 2008c) veröffentlicht.  Evaluation des Unterrichtsbeispiels 95    matikunterricht kreativ sein können. Ungeklärt bleibt bisher die Frage, was sich die Schüler  konkret unter Kreativität in der Informatik vorstelle n und inwieweit sich ein kreatives Bild von der  Informatik als attraktiv darstellt. Der Unterrich tsversuch hat bei den Schülern viel Kreativität  ermöglicht und gefordert, bis dahin aber nich t explizit Kreativität thematisiert, was in einer  qualitativen Untersuchung im Anschluss an die Un terrichtssequenz mit dem Ziel, Kreativität  besser in den Lernprozess einzubinden, getan wurde.  9.2.1 Datenerhebung und Analyse  Die Frage nach dem Verständnis von Kreativität in  der Informatik wird mittels eines qualitativen Forschungsansatzes adressiert. Die Unters uchung mit Hilfe detailliert er Fragebögen in der  Evaluation des Unterrichtsversuchs ermöglicht bereits einen abstrakten Überblick über den  Erfolg der kreativen Unterrichtssequenz sowi e über die Änderungen der Vorstellungen der  Schüler vom Fach Informatik. Demnach denken f ast alle Schüler nach der kreativen Programmierung, dass sie im Informatikunterricht kreativ sein können. Ein qualitativer Ansatz ermög-licht es, über vorgegebene Fragen hinaus, die Vorstellungen der Schüler zu erfassen. Zwei  verschiedene Arten von Da ten wurden erhoben:   1. Bearbeitungen einer BrainstormingAufgabe mit den Stichwörtern Kreativität  und Informatik  und der Frage: „Was fällt dir ein zum Thema Kreativität und Informatik?“  (vgl. Abbildung 35)   Die Schüler bearbeiteten diese Aufgabe etwa 10 Minuten.  2. Ausführungen zu einer Erläuterungsaufgabe:    „Fasse nun das, was dir zu Kreativität im Zusammenhang mit Informatik einfällt in  Worte. Dazu kannst du deine Ergebnisse des Brainstormings verwenden und erläutern  oder andere Aussagen beschreiben. Verwende ggf. Beispiele, um deine Erklärungen zu  illustrieren. Fange damit an zu beschreiben , was du unter Kreativität verstehst.”    Die Schüler arbeiteten etwa 20 Minuten an dieser Aufgabe.      Abbildung 35: Brainstorming zu Kreativitä t und Informatik (S chülerbeispiel).  In der Auswertung wurden zuerst die Brainstorm ing-Skizzen analysiert und kategorisiert. Als  nächstes wurden die verschiede nen Ideen des Brainstormings den gefundenen Ka tegorien zugeordnet. Die Erläuterungen der Schüler wurden an alysiert und bezüglich der Kernaussagen systematisiert. 96  Evaluation des Unterrichtsbeispiels    9.2.2 Ergebnisse  Analyse der Brainstorming-Skizzen   Die Ergebnisse des Brainstormings können drei Ka tegorien zugeschrieben werden: Stichwörter,  die sich auf Kreativität beziehen, Stichwörter, die sich auf Informatik bezi ehen und Stichwörter,  die sich zwischen diesen beiden Bereichen al s verbindende Elemente befinden. Während die  meisten Schüler die verbindenden El emente visuell darstellen, betrachten zwei Schüler die beiden  Bereiche separat. In den Erklärungen der zweite n Aufgabe werden allerdings auch von diesen  Schülern verbindende Elemente beschrieben. Die häufigsten genannten Antworten sind in  Abbildung 36 dargestellt.      Kunst 9  Programmieren 9  Computer 10  Eigene Ideen haben 5  Scratch 6  Daten 3  Ideen umsetzen 5  Homepageerstellung 4  Logik 3  Erschaffen, Schöpfen 4  Photoshop/Fotobearbeitung 3  Programmieren 3  Basteln 3  Musik bearbeiten/erstellen 3  Schulunterricht 2  Malen/Zeichnen 3  kreatives Schreiben (Word) 3  Internet/-anwendungen 2  Freie Möglichkeiten 3  Computerspiele 3  Informationen 1  einfallsreich 2  Ideen 3  Hacker 1  menschl. Fähigkeit 2  Internet 2  Algorithmus 1Kreativität Verbindende Elemente Informatik   Abbildung 36: Häufige Schülerantworten des Brai nstormings zu Kreativ ität und Informatik.  Die Analyse der Brainstormingskizzen erlaubt einen generellen Einblic k in die Erfahrungen und  Vorstellungen der Schüler. Die am häufigsten gena nnten Stichwörter für Kreativität und auch für  Informatik entsprechen gängigen Stereotypen: Die Hälfte der Schüler nennt „Kunst“ als repräsen-tativ für Kreativität und ebenso nennt etwa die Hälfte der Schüler „Computer“ als typisch für  Informatik. Als verbindendes Element zwischen Kreativität und Informatik wird von der Hälfte  der Schüler „Programmieren“ genannt. Die zweit populärste Antwort in dieser Kategorie ist die  Programmiersprache Scratch. Des Weiteren wurd en verschiedene Möglichkeiten des praktischen  Arbeitens mit dem Computer als verbindendes El ement genannt. Damit spiegeln die genannten  verbindenden Elemente zwei Dimensionen des Fa ktorenmodells wider: Kreativität aus der Informatik-Fachsicht sowie IKT als kreativitäts fördernde Werkzeuge der Informatik.  Analyse der Erläuterungen   Alle Schüler beschreiben Elemente und Aktivitäte n, die Kreativität mit Informatik verbinden.  Während die Analyse der Brainstorming-Stichwör ter allerdings ein recht homogenes Bild mit  verschiedenen Antworten innerhalb der drei Kate gorien zeigt, offenbart die Analyse der einzelnen  Begründungen und Meinungen versch iedene Sichtweisen, wie Kreativ ität im Bezug auf Informatik  von Schülern aufgefasst werden kann. Die Aussagen  der Schüler bzgl. der Fragestellung, welche  Zusammenhänge es zwischen den beiden Disziplinen  gibt, können fünf verschiedenen Kategorien  zugeordnet werden:   Informatik ist von Natur aus kreativ  Viele Schüler erklären, dass ihrer Meinung n ach Kreativität eine Grundvoraussetzung in der  Informatik ist, z. B. weil Progr ammieren Kreativität erfordert:   Mir sind im Zusammenhang der beiden Themen sofort Programmiersoftware wie Scratch oder  Delphi eingefallen. Man kann dabei seine eige nen Ideen in die Projektarbeit einbeziehen.  [FB3T6] 117                                                         117 Der Code identifiziert die Fragebögen und Schüler (FB3 steht für den Fragebogen, T X für den Teilnehmer).   Evaluation des Unterrichtsbeispiels 97    In einer ähnlichen Sichtweise beschreiben die Schüler Informatik als eine Art angewandter  Kreativität, welche sich scheinbar von der Produktor ientierung der Informatik ableitet. Hierbei  wird mitunter auch der persönliche Standpunkt hervorgehoben, indem Kreativität als Möglichkeit  der Umsetzung eigener Ideen empfunden wird. Die Sc hüler beziehen sich in ihren Erklärungen auf  die Sichtweise von P-Kreativität.  Informatik unterstützt Kreativität   Informatik ist für mich insofern  kreativitätsfördernd, als dass si e einem nicht nur eine, sondern  mehrere Türen öffnet, in verschiedenste Bereiche. Jeder kann et was damit anfangen.  [FB3T12]  Die Schüler sind sich der kreativitätsunterstütze nden Eigenschaften von Informationsund Kommunikationstechnologien (IKT) bewusst. Diese Si chtweise dehnen sie auf die Strategien und  Konzepte der Informatik aus, die sie im Inform atikunterricht kennen gelern t haben und welche es  ihnen erleichtern, IKT effizient und kreativ einzusetzen. Diese Sichtweise beinhaltet auch die Anwendung verschiedener Werkzeuge , durch die sie sich kreativ ausdrücken können:   Außerdem ist auch das E-Mail schreiben eine Sac he bei der oftmals das kreative Vermögen  eine wichtige Rolle spielt, wenn man einer Pers on beispielsweise eine Liebeserklärung in einer E-Mail verschicken will und di ese etwas Besonderes darstellen soll, ist Kreativität sehr  gefragt. [FB3T5]  Kunst-Sichtweise von Informatik  In dieser Sichtweise beschreiben die Schüler Täti gkeiten innerhalb der Informatik, die mit Kunst  vergleichbar sind, z. B. bei der visuellen Informationsdarstellung:  Um Probleme und Beziehungen besser darzustellen (z . B. Bilder, Diagramme) braucht man in  der Informatik Kreativität. [FB3T18]  Diese Sichtweise findet auch in verschiedenen verbindenden Themenbere ichen ihre Anwendung,  wie z. B. Media-Design oder Computergraphik, wo beides, Informatikwissen und künstlerischer  Ausdruck, kreativ kombiniert werden.  Holistische Sichtweise  In dieser Sichtweise wird der Einfluss der Inform atik und von Produkten der Informatik auf die  Gesellschaft betrachtet. Dabei spielt die eigene Beschäftigung mit Informa tik eine untergeordnete  Rolle. Stattdessen wird die gesellschaf tliche Gesamtentwicklung analysiert:  In der heutigen Industrie ist die Informatik nicht mehr wegzunehmen, alles wird von Nullen  und Einsen gelenkt, ob Autos, Flugzeuge, Le bensmittelherstellung, Buchhaltung allgemein,  Ingenieurwesen, Architektur oder sonstiges, üb erall findet sie sich wieder und erleichtert vieles. [FB3T12]  Informatik ist heutzutage überall. Sie ist so einflussreich, das bezeichne ich als kreativ.  [FB3T7]  Kreativität in der Informatik ist verantwortlic h für den technischen Fortschritt. [FB3T20]  Auch in Hinsicht auf kreativen  Missbrauch von Technik (z. B. durch Hacking) und die kritische  Betrachtung des technischen Fortschritts sind dies wichtige Aspekte, die von Informatiklehrern im  Unterricht berücksichtigt werden können, um die Schüler zum kritischen  Denken zu ermutigen.  Herausstellung des Unterschieds  Für einige Schüler war es wichtig, den Untersch ied zwischen Kreativität und Informatik herauszustellen. Diese Schüler sehen Kreativität als überra gende menschliche Eigenschaft an, die sie nicht  zu eng an die Informatik gebunden sehen möchten:  98  Evaluation des Unterrichtsbeispiels    Programmieren fördert die Kreativität des Programmierers und Kreativität ist notwendig  beim Programmieren. Informatik braucht Krea tivität, aber Kreativität braucht nicht Informatik! [FB3T13]  Besonders interessant sind jene Schülerantworten, in welchen di e Auseinandersetzung mit Stereotypen deutlich wird:  Grundlegend gehorchen Informatik und Kreativ ität unterschiedlichen Gesetzen. Die Informatik braucht Logik und mathematische Strukturen  wohingegen die Kreativität meist aus solchen  ausbricht. Die Kreativität sprengt Gesetze und Algor ithmen während die Informatik durch diese beherrscht wird. Dennoch funktioniert die Info rmatik nicht ohne Kreativität. Um neue Programme und Quelltexte zu schreiben braucht man einen kreativen Geist. [FB3T19]  9.2.3 Diskussion  Die Schülerantworten zeigen verschiedene Sichtw eisen von Kreativität und Informatik. Ihre eigene  Beschäftigung mit Informatik wird dabei in der Regel als kreativ bezeichnet – innerhalb und  außerhalb des Unterrichts. Vor dem Hintergrund, dass die kreative Beschäftigung mit Informatik  als motivierend empfunden wird, kann diese Eigens chaft als Möglichkeit gesehen werden, Motivation und Interesse für die Informatik zu steigern.   Zu berücksichtigen bleibt, dass Kreativität im In formatikunterricht für die Schüler auch durchaus  unerwartet und verwirrend sein kann, wenn sie nicht da ran gewöhnt sind. So klagte eine Schülerin  während der Unterrichtssequenz darüber, dass dies ja „so kreativ“  sei und damit doch nicht in den  Informatikunterricht gehöre. In der Umfrage nach  der Unterrichtssequenz erläuterte sie ihren  Standpunkt. Ihr gefiel nicht, dass   1. der Lehrer Anweisungen so ungenau gibt, dass man Ideen haben muss (z. B. welches Spiel  entwickle ich?),  2. man darüber nachdenken muss, wie man diese Ideen umsetzt,  3. jeder andere Ergebnisse hat.  Mit diesen Punkten beschrieb die Schülerin eini ge Kernpunkte, auf denen die Unterrichtssequenz  aufbaut. Ihre Unsicherheit basierte  augenscheinlich auf der für sie neuen Situation, in welcher ihr  nicht genau gesagt wurde, was sie zu tun hat sowie auf mangelnden Ideen. Während die meisten  anderen Schüler kein Problem hatten, Ideen zu en twickeln, konnte sich diese Schülerin nur schwer  in das selbständige Arbeiten einfinden. Vor de r nächsten Unterrichtssequenz zum Thema Computergrafik wurden verschiedene Kreativitätstechni ken besprochen und geübt mit dem Resultat, dass  die Bearbeitung offener Aufgaben bei allen Schülern gut gelang.   9.3 Fazit  Ziele der Unterrichtssequenz waren zum einen, di e Lernziele zu erreichen, und zum anderen, die  Schüler mittels kreativer Aufg aben für die Programmierung zu motivieren. Wie verdeutlicht,  konnten beide Ziele erreicht werden. Weiterhin ist festzustellen, dass sich das Bild vom Informatikunterricht in eine positive Richtung verändert hat. Informatikunterricht wird häufig als ein  Unterrichtsfach aufgefasst, in we lchem gelehrt wird, Computer, das Internet und Software wie  Word und Excel zu bedienen. Die Schüler in di esem Unterrichtsversuch ka men der kreativen Seite  der Informatik näher: Informatik hat viel zu  tun mit dem Entwerfen und Ändern von Informatiksystemen, Experimentieren und dem Finden einer guten Lösung bei vielen möglichen Lösungen.  Diese Sichtweise wurde nun auch in den Schüleran tworten nach der Unterrichtssequenz deutlich.  Außerdem konnte festgestellt werden, dass sich Kreat ivität im Informatikunterricht für die Schüler  als attraktiv darstellt. Dabei bleibt allerdings zu  beachten, dass die Schüler hiermit nicht überfordert und allein gelassen werden dürfen.   Die aufgestellten Hypothesen können vor dem E rfahrungshintergrund dieses Unterrichtsbeispiels  bestätigt werden: Motivation und Interesse der Sc hüler wurden durch die kreative Programmierung  deutlich gestärkt. Programmieren wurde den Sc hülern als kreativer Prozess deutlich und ermög- Evaluation des Unterrichtsbeispiels 99    lichte ihnen die Gestaltung vieler kreativer Proj ekte. Der Einsatz der kreativitätsunterstützenden  Programmiersprache Scratch ermöglichte den Sc hülern eine kreative Auseinandersetzung mit den  Aufgaben.   Neben der Berücksichtigung der im Faktorenmodell  kreativen Informatikunterrichts dargestellten  Aspekte wirkte sich die Anwendung des Challenge-Cycles  in der Gestaltung der einzelnen Unterrichtsphasen positiv auf die Entwicklung von Krea tivität aus. So wurde der Challenge-Cycle mit  jeder Einführung neuer Konzepte neu betreten und jeweils durch die Vo rstellung verschiedener  Ergebnisse der (Mini-)Projekte beendet. Durch die passende Gestaltung der Lernsituation und  Aufbereitung der jeweiligen Grundlagen im Zusammenhang mit der Darstellung der Programmierkonzepte in der eingesetzten Programmier sprache wurde ein überwiegend selbständiges  Lernen und praktisch kreatives Erarbeiten der Un terrichtsinhalte erreicht. Die Möglichkeit der  Schüler, sich eigene Challenges zu bestimmen, führ te darüber hinaus zu einer große Bandbreite an  verschiedenen Projekten.  100  Zusammenfassung, Diskussion und Ausblick    10 Zusammenfassung, Diskussion und Ausblick  10.1 Zusammenfassung   Den Ausgangspunkt dieser Arbeit bildeten die Feststellungen  1. Kreativität soll in der Schulinformatik nach einhelliger Meinung vieler Fachdidaktiker gefördert werden.  2. Die Förderung von Kreativität in der Informa tik, insbesondere in der Modellierung, wird  für möglich und angebracht gehalten.  3. Bisher nimmt Kreativität augenscheinlich nur einen unzureichenden St ellenwert im Informatikunterricht ein.  Darüber hinaus wurde – eigene Erfahrungen zugr unde legend – vermutet, dass Informatikunterricht nicht nur Kreativität fördern, sondern das Potential, welches sich aus Kreativität für den  Lernprozess ergibt, hinsichtlich eines besseren Lernerfolgs nutzen kann.   Als Ziel dieser Arbeit wurde die Entwicklung ei ner fundierten theoretischen Grundlage für die  Anwendung und Förderung von Kreativität im  Informatikunterricht angegeben.  Dazu gehörten  • die Herausarbeitung eines für den Informati kunterricht relevanten Kreativitätsverständnisses   • die Feststellung der Charakteristika von Kreativität im Informatikunterricht   • die Bestimmung der Chancen, die sich aus Kr eativität im Informatikunterricht ergeben  • die Entwicklung eines theoretischen Konzepts  für die Gestaltung kreativen Informatikunterrichts  • die Untersuchung der Auswirkungen krea tiven Informatikunterrichts   Zur Realisierung dieser Ziele wurde, ausgehend von Betrachtungen zur Kreativität und Informatik,  ein Faktorenmodell kreativen Lernens im Informa tikunterricht entwickelt, überprüft und erprobt.  Ergebnisse der Kreativitätsforschung implizieren ve rschiedene Faktizitäten für die Gestaltung  eines kreativen Informatikunterrichts. Aufgrund de s zentralen Stellenwerts  des systematischen  Entwickelns von Lösungen in der Informatik wird ei ne strukturorientierte Sichtweise sowie die auf  eine Person bezogene Ausprägung von Kreativität als adäquat betrachtet.  Motivation und Kreativität stehen in einem wechsel seitigen Verhältnis. Intr insische Motivation ist  eine Grundvoraussetzung für kreatives Tun, gleichwohl kann kreatives Tun auch intrinsische Motivation hervorrufen. In verschiedenen Le rnzieltaxonomien wird Kreativität als höchstes  kognitives Lernziel beschrieben. Als Chancen, die sich durch Kreativität im Unterricht ergeben,  werden gesteigerte Schülermotivation, höhere Au fmerksamkeit, Konzentration, Neugier und ein  daraus resultierender verbesserter Lernerfolg angegeben.   Zur Betrachtung von Kreativität in der Informatik ist die Differenzierung heterogener Sichtweisen  erforderlich. Die Betrachtung aus der Fach-Perspektive  verdeutlicht die subjektive kreative  Wahrnehmung sowie kreative Fachcharakteristika der Disziplin. Die Mensch-Perspektive verdeutlicht einen positiven Einfluss kreativer informat ischer Prozesse auf die Motivation. Aus der KunstPerspektive ergeben sich zahlreiche thematische Anknüpfungspunkte, Informatikinhalte zu  transportieren. Die Entwicklung und Anwendung von Informatiksystemen als Werkzeuge für die  Förderung kreativen Arbeitens in und auße rhalb der Informatik wird in der TechnologiePerspektive  beschrieben. Die Perspektive der artifizie llen Kreativität greift Bestrebungen in der  Informatik auf, Systeme zu konstruieren, die Krea tivität nachzubilden vers uchen. Die Sichtweisen  unterstreichen den zentralen Stellenwert von Kreativ ität in der Informatik. Ziele kreativen Informatikunterrichts sind die Anwendung und ein Verstä ndnis von Kreativität bezogen auf die Fach- Zusammenfassung, Diskussion und Ausblick 101    Perspektive: sich aus informatis chen Prozessen ergebende Leistunge n, die zu persönlich neuen und  verwendbaren Ideen, Produkten, Lös ungen oder Erkenntnissen führen.   Informatik wird von Schülern bisher nur partie ll als kreatives Unterrichtsfach wahrgenommen. Es  konnte auf Projekte verwiesen werden, in dene n Kreativität erfolgreich zur Steigerung von Motivation und Interesse instrumentalisiert wurde. Da rüber hinaus stellt sich kreatives Lernen als  adäquat für das Lernen informa tischer Konzepte mit IKT unter Berücksichtigung der Bedürfnisse  und Interessen der Lernenden dar. Vor dem Hint ergrund eines sich ändernden Verständnisses von  Computern sollte in einem kreativen Informatikunte rricht auf eine eng ausgelegte Problemorientierung zugunsten von Herausforderungen verzichtet werden. Hierzu wurde der Challenge-Cycle als  Framework für kreatives Lernen im Informatikunterricht vorgeschlagen.  Basierend auf den Erkenntnissen der zugrunde  liegenden Wissenschaftsbereiche wurde ein  Faktorenmodell kreativen Lernens für den Inform atikunterricht entwickelt. Im Faktorenmodell  stellen kreative informatische Pr ozesse das zentrale Element in ei nem kreativen Informatikunterricht dar; Schüler , Fach  und Informationsund Kommunikationstechnologien  als Umgebungsmerkmale stellen vernetzte Faktoren dar, die Kreativität im Informatikunterricht fördern.   In der Überprüfung des Faktorenmodells konnten in Computernutzungsbiographien von Studienanfängern der Informatik die drei Dimensione n des Faktorenmodells nachgewiesen werden. In  einem Interview mit einem herausragend kreativ en Schülers wurden Faktoren und Zusammenhänge des Faktorenmodells aus subjektiver Schülersi cht verdeutlicht. In einer Studie mit zukünftigen  Informatiklehrern wurde festgestellt, dass dies e Kreativität wertschätzen, allerdings unkonkrete  Vorstellungen von der Umsetzung im Informatikunterricht haben.   Das Modell wurde durch Kriterien kreativen Info rmatikunterrichts konkretisiert. Die Anwendung  dieser bei der Evaluation publizierter Unterrichts vorschläge bestätigt den bisher geringen Stellenwert von Kreativität im Informatikunterricht.   In einem Unterrichtsbeispiel zur Einführun g in die Programmierung wurde eine Umsetzung  kreativen Informatikunterrichts exemplari sch verdeutlicht. Die Anwendung von Kreativität im  Unterrichtsbeispiel erfüllte die Erwartungen: Die Schüler hatten Spaß am Unterricht, die Zielkompetenzen wurden erreicht und die Schüler verbesserten ihr Bild von der Informatik.   Die aus dem Faktorenmodell abgeleiteten Hypothesen   1. Im Informatikunterricht stimuliert kreatives Arbeiten Motivation und Interesse der Schüler.   2. Im Informatikunterricht wird Kreativität aufgru nd des kreativen Charakters des Fachs Informatik gefördert.   3. IKT fördern Kreativität im Informatikunterricht.  konnten in der Überprüfung des Faktorenmodells und der Erprobung kreativen Unterrichts erhärtet  werden.   10.2 Diskussion  Die in der Einleitung der Arbeit aufgeworfenen Fragen können nun hinsichtlich der Forschungsergebnisse wie folgt zusammenfassend beantwortet werden.  Welches Verständnis von Kreativität sollte aus Si cht der Fachdidaktik Informatik verwendet  werden?   Es wurde eine allgemeine Definition von Kreativ ität herausgearbeitet, die vor dem Hintergrund der  verschiedenen Betrachtungsmöglichkeiten von Krea tivität vor allem dazu dient, eine Grundvorstellung von dem zu legen, was in dieser Arbeit unter Kreativität verstande n wird. Ein vergleichbares Verständnis von Kreativität wird intuitiv von praktizierenden Informatikern verwendet, die  dabei die Bedeutung von Kreativität in ihrem Leben und für die Inform atik unterstreichen. Auch in  den Studien zum Faktorenmodell wurde ein personenbezogenes pragmatisches Verständnis von  Kreativität deutlich.  102  Zusammenfassung, Diskussion und Ausblick    Eine Definition verleitet dazu, Prozesse, Leis tungen und Produkte hinsichtlich der Definition  einzuordnen bzw. zu bewerten. In den verschiedene n Studien hat sich allerdings gezeigt, dass auch  das Gefühl, etwas Kreatives zu tun, ausschlagge bend für positive Effekte beim Lernen sein kann.  Dieses steht im engen Zusammenhang mit weiteren, fü r die Kreativität relevanten Faktoren, z. B.  Selbstbestimmung. Zur thematischen Einbeziehung von Kreativität bieten sich alle im Kapitel 3  vorgestellten Perspektiven an. Diese können auch dazu dienen, Schüler an die Fachsicht von  Kreativität heranzuführen. So sollte es das Ziel eines kreativen Informatikunterrichts vor allem  sein, Kreativität aus der Fach-Perspektive zu verd eutlichen. Das bedeutet, die Schüler zu Leistungen zu befähigen, die sich aus informatisch en Prozessen (wie Programmieren, Modellieren)  ergeben und zu persönlich neue n und verwendbaren Ideen, Produkt en, Lösungen oder Erkenntnissen führen.  Wie manifestiert sich Kreativität in der Informatik bzw. im Informatikunterricht?  Das Faktorenmodell verdeutlicht die wesentlichen Va riablen, die Kreativität im Informatikunterricht aus der Fach-Perspektive ch arakterisieren und unterstützen. D azu zählt der zentrale Stellenwert kreativer informatischer Prozesse, der zentr ale Stellenwert von Kreativität im Fach selbst und  eine durch IKT geprägte Unterrichtsumgebung,  welche Kreativität potentiell begünstigt.   Wie muss Informatikunterricht gestaltet werden , damit er das Potential, das Kreativität  bietet, nutzt und fördert?  Die Kriterien kreativen Informatikunterrichts gemeinsam mit dem Challe nge-Cycle geben konkrete Gestaltungshinweise für die Planung und Durchführung kreativer Unterrichtsphasen.   Welche Auswirkungen hat die explizite Berück sichtigung von Kreativität im Informatikunterricht auf das Lernerlebnis und den Lernerfolg?   Die Evaluation der Unterrichtssequenz zeigt er höhte Motivation, Interesse, Leistungen und ein  verbessertes Informatikbild der Schüler nach de r kreativen Unterrichtssequenz im Pre-PostVergleich sowie im Vergleich mit dem Kontrollkurs. Diese Ergebnisse stehen im Einklang mit Studien in Hochschulen, in welchen sich di e Berücksichtigung von Kreativität positiv auf die  Motivation und den Lernerfolg auswirkte. In dieser Unterrichtssequenz arbeiteten die Schüler  konzentriert und intrinsisch motiviert und ließen sich häufig selbst durch das Stundenklingeln  nicht unterbrechen. Die Präsentationen und Verö ffentlichung der Arbeitsergebnisse motivierten  die Schüler für Folgeprojekte in den nächsten Unterrichtsstunden. Vor de m theoretischen Hintergrund konnte dies erwartet werden; die Anlage  der Untersuchung lässt dennoch keine Verallgemeinerung zu. Hier sind weite re Untersuchungen notwendig.  Die Schüler beschreiben Informatik nun als Fach , in dem Kreativität benötigt wird und das ihnen  Kreativität ermöglicht. Offenbar ist es gelungen, durch das Einbinden der Kreativität der Schüler,  das Interesse der Schüler zu gewinnen; insbesonde re auch der Mädchen des Kurses, deren Ergebnisse sich sogar von denen der Jungs abheben.  Das aus der kreativen Auseinandersetzung mit Info rmatik resultierende Bild von der Informatik  stellt sich für das Fach als sehr attraktiv dar. Es  ist eine Wahrnehmung von Informatik, welche die  Schüler motiviert, sich mit den Möglichkeiten ausei nanderzusetzen, die ihnen Informatik für die  kreative Nutzung von IKT bietet. Durch die kreativ e Auseinandersetzung mit Informatik erwerben  die Schüler „digital literacy“ und Fertigkeiten, die für die Beteiligung an der „Kreativen Gesellschaft“ essentiell sind. Sollte ein Transfer eines kreativen, und damit für viele sicherlich attraktiven Informatikbildes auf Eltern und Freunde geli ngen, könnte sich allmählic h das gesellschaftliche  Bild von der Informatik ändern und Informatik wieder zu einem attraktivem Studienfach werden.  Informatiker und Informatiklehrer sollten für sich  selbst überprüfen, ob das hier gezeichnete  kreative Bild von der Informatik zur ihrer Vorste llung der Disziplin passt. Basierend auf bisheri- Zusammenfassung, Diskussion und Ausblick 103    gen Veröffentlichungen118 zur Kreativität in der Informatik und der Anschaulichkeit stützt sich die  Entwicklung des Faktorenmodells vor allem auf di e Möglichkeiten, welche die Softwareentwicklung bietet. Gleichwohl kann das Faktorenmodell auch auf andere Aspekte des informatischen  Modellierens angewandt werden, wobei der Begriff Softwareentw icklung allerdings bewusst die  Entwicklung eines Produktes in die Begrifflichkeit einschließt. Der Kreativitätsbegriff ist soweit  gefasst, dass hier auch Ideen und Lösungen, welche  nicht implementiert werden, inbegriffen sind,  sei es das Erfinden eines eigenen kryptographi schen Chiffrierverfahrens, der Entwurf eines  Automatenmodells für ein Verhalten aus der Le benswelt der Schüler oder das Erstellen einer  Prognose, wie Computer in 20 Jahren aussehen könnten. Dennoch ist zu vermuten, dass den  Schülern der kreative Charakter der Informatik vor allem anhand der Entwicklung von Software  deutlich wird.  Das Faktorenmodell stellt die grundlegenden Aspe kte für die Planung kreativer Unterrichtsphasen  dar, ist aber nicht als Unterrichtsmethode zu vers tehen, welche jeglichem Unterricht zugrunde zu  legen ist. Hier halte ich eine n gesunden Mix verschiedener adä quater, der Lerngruppe und den  Lerninhalten entsprechender Unterrichtsmethoden unter Beibehaltung regelmäßiger kreativer  Unterrichtsphasen für sinnvoll. Wie die Lernfor schung verdeutlicht, ist die Förderung von Kreativität auch eine langfristige Aufgabe.  Nicht erst seit Veröffentlichung der Bildungssta ndards Informatik nimmt die Wichtigkeit von  Vergleichbarkeit und Prüfbarkeit erreichter Kompetenzen der Schüler zu. Der Ruf nach mehr  Kreativität und Freiraum für die Schüler mag in diesem Zusammenhang als deplaziert aufgefasst werden. Wie im Unterrichtsbeispiel demonstriert wurde, muss ein kreativer Ansatz nicht zu schlechteren Leistungen führen, sondern kann s ogar ein besseres Verständnis und tiefgründigeres  Lernen bei den Schülern erreichen.   Die kreative Nutzung der Informatik und der Inform atiksysteme sind als neue Kompetenzen in der  Schulinformatik meiner Meinung nach zwingend notwendig. Aktuelle Bemühungen, Schülern ein  Informatiksystemverständnis zu vermitteln, können de mnach immer nur erste Schritte sein, welche  erst in der kreativen Anwendung ihre Bedeutung er halten. Betrachtet man Kreativität als Beitrag  der Informatik zur Allgemeinbildung, eröffnet und vereinfacht Informatikunterricht zahlreiche  Betätigungsfelder, die nicht nur dabei helfen, in einer kreativen Wissensges ellschaft zurecht zu  kommen, sondern auch noch Spaß machen.  10.3 Ausblick  Die Auswertung der Unterrichtssequenz verdeutlicht , dass in besonderem Maße die Interessen der  Mädchen angesprochen wurden. Dagegen ist Informat ik häufig ein Fach, das sich für Mädchen als  uninteressant darstellt. Vor dem Hintergrund der Be mühungen, mehr Mädchen für die Informatik  zu begeistern, ist das Einbinden der Schülerkr eativität in den Unterricht und die Verdeutlichung  der Kreativität der Informatik ein Ansatz, der sich  lohnt, auch in dieser Hinsicht genauer untersucht zu werden. Nicht zuletzt wurde durch St udien bereits verdeutlicht, dass Mädchen deshalb  seltener Informatik in Schulen und Universitäte n belegen, weil sie in dem Fach mangelnde Möglichkeiten zur kreativen Entfaltung vermuten (vgl. Rich, Perry und Guzdial 2004; Guzdial und  Soloway 2002). Verschiedene Studien in Hochsc hulen deuten darauf hin, dass mit Hilfe von  Kreativität das Interesse von Frauen für die Info rmatik gewonnen werden kann (vgl. Margolis,  Fisher und Miller 2000; AAUW 2000; Robe rts, Kassianidou und Irani 2002).  Nach dieser ersten Betrachtung von Kreativität im Informatikunterricht empfiehlt es sich, einzelne  Faktoren der Kreativität isoliert in ihrer Wi rkung im Unterricht zu untersuchen. Des Weiteren  bleibt die Frage ungeklärt, ob die positiven Er gebnisse der Erprobung nicht auch dem Werkzeug  oder anderen Umständen zuzuschreiben sind. Hier empfiehlt sich ein empirischer Vergleich zweier  Klassen, die mit dem gleichen Werkzeug, aber unterschiedlicher Methodik lernen.                                                         118 Fast die gesamte Literatur zur Kreativit ät in der informatischen Bildung scheint sich auf diesen Bereich zu beschränken. 104  Zusammenfassung, Diskussion und Ausblick    Zur Unterstützung bei der Auswahl geeigneter Werk zeuge ist eine Evaluation und Kategorisierung  von im Informatikunterricht ve rwendeten Werkzeugen opportun. Hierzu können Shneidermans  Kriterien für kreativitätsunterstützende Softwarewe rkzeuge (vgl. Kapitel 3, Abschnitt 3.4) herangezogen werden, die ggf. informatikunterri chtsspezifisch ergänzt werden sollten.  Um eine Etablierung kreativen Informatikunterrich ts in der Unterrichtwirklichkeit tatsächlich zu  erreichen, ist meiner Ansicht nach eine Vielzah l erprobter und gut beschriebener Beispiele notwendig.119 Eine Ausarbeitung weiterer Beispiele ist geplant.  Weitere systematische Untersuchungen sind notwendi g, um festzustellen, inwieweit sich in  weiteren Inhaltsbereichen (z. B. theoretischer und technischer Informatik) ein kreativer Informatikunterricht umsetzen lässt. Ebenso fehlen noch publizierte Beispiele zur expliziten Einbeziehung  von Kreativität in fortgeschrittenen Stufen mit komplexeren Konzepten (z. B. objektorientierte  Modellierung oder deklarativ e Programmierung mit Prolog).  Mit dem Schuljahr 2008/09 wird die kontinuierliche Gestaltung kreativen Informatikunterrichts in  einem Informatikkurs der Sekundarstufe I durchge führt und untersucht. Hierzu wurde ein Unterrichtskonzept „Mediengestaltung Informatik“ mit de m Ziel entwickelt, durch kreatives Lernen die  Mindestanforderungen der Bildungsstandards Inform atik zu erfüllen, dabei aber weit darüber  hinaus bei den Schülern Interess e und Begeisterung für die Informatik zu wecken. Eine Beschreibung des Vorhabens kann im Anhang nachgelesen werden.   10.4 Fazit  Der Informatikunterricht steht seit jeher vor de r Herausforderung, dass sich die dem Unterricht  zugrunde liegenden Paradigmen, Verständnisse und Werkzeuge häufig  ändern (z. B. Programmierparadigmen). Zudem sind viele Grundlagen, die wir gegenwärtig noch für essentiell erachten, in wenigen Jahren vielleicht schon obsolet. 120   Meiner Ansicht nach kann sich der Informati kunterricht dem nur entziehen, wenn die kreativen  Möglichkeiten, die sich aus den grundlegenden Kon zepten der Informatik ergeben, in den Vordergrund gestellt werden und damit vor allem Neugi er und Spaß, aber auch kritisches Denken im  Umgang mit Informationsund Kommunikationstec hnologien, für die Schüler erlebbar werden.                                                          119 Offenbar nehmen Lehrer solche Beispiele gern an: Die Internetpublikation zum kreativen Einstieg in die Programmierung wurde bisher über 5000 mal aufgerufen. Ebenso erreicht  mich regelmäßig positives Feedback von Lehrern, die  diese Unterrichtssequenz einsetze n oder planen einzusetzen.   120 Wie man bspw. an verschiedenen Bemühungen, den Schülern ein Systemve rständnis für Informatiksysteme zu  vermitteln, erkennen kann: Wurde vor Kurzem noch ein Ve rständnis für die E-Mail-Protokolle POP3 und SMTP als  wichtig erachtet, spielen di ese inzwischen aufgrund der Verwendung von We bmailern für immer weniger Nutzer eine  Rolle.  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung 105  A Unterrichtsbeispiel: Ein kreativ er Einstieg in die Programmierung121  Einleitung  Wie sollte Programmieren eingeführt werden? Diese Fragestellung wird im Zusammenhang mit  der Softwareentwicklung als zentralem Inhalt der Informatik immer wieder aufgeworfen. Nicht  nur Schulen, auch Universitäten tun sich teilwei se schwer daran, Schülerinnen und Schülern und  Studentinnen und Studenten diesen Einstieg in die Informatik zu ebenen. Oftmals sind es gerade  diese Kurse und Unterrichtsinhalte, die Informatik als schwer, techniklastig oder gar uninteressant  und demotivierend erscheinen lassen. Dabei muss di es nicht so sein: Die Möglichkeit, in einer  Programmiersprache eigene Software entwickeln  zu können, kann sehr schön verdeutlichen, dass  Informatiksysteme gestaltbar sind.   Zur Realisierung eines Unterrichtsbeispiels, welches die Schüler motiviert und gleichzeitig  informatiknah lernen lässt, wurden Kriterien krea tiven Informatikunterrichts (vgl. auch Romeike  2007b) herangezogen und berücksichtigt.        Didaktische Richtlinien  Kriterien kreativen Informatikunterrichts  Vor dem Hintergrund, dass Informatikunterricht ei n großes Potential hat, Kreativität zu fördern  und dieses sich positiv auf die Schülermotivation und den Lernerfolg auswirken kann, wurden Kriterien formuliert, die für einen kreativen In formatikunterricht zu beachten sind. Diese wurden  der Planung dieser Unterricht ssequenz zugrunde gelegt.    Die Kriterien umfassen: Anforderungen an den Unterrichtsgegenstand:   • Relevanz   • Problemlösung oder Erstellen eines Produkts                                                           121 Dieser Teil wurde veröffentlicht in (Romeike 2007a).  106  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung    Anforderungen an die Aufgabenstellungen:   • Subjektive Neuheit   • Offenheit in Ergebniserwartung und Lösungs-/Bearbeitungsweg  • Variable Bearbeitungstiefe   • Anwenden von Konzeptwissen  • Ideenanregung    Schülerorientierte Anforderungen:   Ermöglichen von   • Identifikation mit dem Unterrichtsgegenstand  • Originalität    Anforderungen an die Unterrichtsumgebung   • Experimentieren   • Zeitlicher Raum  • Unterrichtsklima der Vielfalt  • Lehrerrolle – Lehrer als Coach    Weitere didaktische Grundlagen:   Entdeckendes Lernen, Experimentelles Lernen, L earning by Design, Konstruktionismus (Papert)    Unterrichtsbegleitende Hinweise:   • Immer neue Anweisungsblöcke im  Heft mit Funktion notieren.  • nach jedem Projekt Vorstelle n der verschiedenen Ergebnisse  • Online-Upload aller Programme auf die Scratch-Homepage   Objektorientierung ja/nein?   „Objects first“ oder „Objects last“ ist eine Dis kussion, die schon eine Weile auch für die Schulinformatik geführt wird. In mehreren Dissertatione n wurde ein objektorientierter Ansatz für den  Schulunterricht empfohlen. Dieser findet sich auch  in vielen neuen Rahmenlehrplänen wieder.  Dennoch ist das Verständnis für die Konzepte der Ob jektorientierung (OO) bei vielen Informatiklehrerinnen und Lehrern noch vage (vgl. Kohl und Romeike 2006), oftmals wird bei der Einführung in die Programmierung ein Weg gegangen, der sich an der strukturierten, imperativen Programmierung orientiert. Das hier vorgestellte Vorgeh en lässt beide Wege offen – in Scratch finden  sich wesentliche Aspekte der imperativen Pr ogrammierung wieder. Dennoch baut Scratch auf  grundlegenden OO-Konzepten auf: Programme (Skr ipte/Methoden) werden für Objekte geschrieben, diese basieren im Wesentlichen auf der Mani pulation ihrer Attribute, zur Steuerung werden  Botschaften verwendet, die an alle Objekte gesendet werden. Die Entwicklungsumgebung basiert  auf Squeak (Small talk) und verfolgt damit das obj ektorientiert Paradigma, welches aber nicht  aufdringlich, sondern vielmehr intuitiv deutlich wi rd. Vielmehr helfen die Konzepte der OO, die  Funktion von Objekten in Scratc h spielerisch zu verstehen.  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung 107  Scratch  Scratch ist eine neue Entwic klungsumgebung, die das kreative Erlernen der Programmierung  unterstützt. Entwickelt durch die Lifelong Kinde rgarten Group am MIT Media Lab findet Scratch  bereits seit einigen Jahren Anwe ndung in sogenannten Computer Club Houses in den USA, in  welchen Kinder freiwillig nachmittags zusammenk ommen, um spielerisch Programmieren zu  lernen.   Interessant ist an Scratch die visuelle Dars tellung der Anweisungen und Kontrollstrukturen als  bunte Bausteine, die in einem Skripteditor zusa mmengestellt werden. Ziel ist es, verschiedene  Objekte (Sprites) in einem Fenster (Stage) zu  animieren und damit Animationen und Programme  jeglicher Art zu erstellen.  Scratch basiert auf Squeak (und damit Smalltalk),  unterstützt eine objektorientierte Sichtweise,  aber auch das Ausblenden dieses Konzepts und ei ne weitgehend imperative Herangehensweise ist  möglich.        Zu dieser Unterrichtssequenz  Publizierte Unterrichtssequenzen können verschiedene Ziele verfolgen:   • Die Beispiele sollen den Lehrerinnen und Le hrern inhaltliche Anleitung geben den Unterricht zu einem bestimmten Thema durchzuführen  • Es soll ein besonderer methodischer Weg aufgezeigt werden, wie ein Unterrichtsthema  vermittelt werden kann   • Es soll ein (neues) Werkzeug für den In formatikunterricht vorgestellt werden  • Erfahrungen sollen geschildert werden   Mit der vorliegenden Unterrichtssequenz werden vor  allem die letzten drei Punkte angesprochen:  Zur Programmierung, ob „Objects first“ oder „Objects last“, sind genügend Publikationen erschienen und die Leserin und der Leser sind vermutlich mehr als genug mit den Inhalten der Programmierung vertraut.  108  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung    Hier soll vielmehr ein Weg aufgezeigt werden, wie die Schülerinnen und Schüler unter Berücksichtigung der Kriterien kreativen Informatikunte rrichts entdeckend und mit viel Freude an der  Sache in die Programmierung eingeführt werden . Denn eins steht im Mittelpunkt: „Informatik  macht Spaß!“. So wurde diese Unterrichtssequenz, di e in einer elften Klasse erprobt und evaluiert  wurde, auch von den Schülern aufgenommen.  Lernziele und Kompetenzen:  Die Unterrichtssequenz verfolgt in Anlehnung an die Bildungsstandards Informatik die Umsetzung  der folgenden Lernziele und das Herausbilden folgender Kompetenzen der Schülerinnen und  Schüler:  1. Sie entwickeln ein grundlegendes Programmierverständnis  2. Sie beschreiben die Eigenschaften von Algorith men, nennen Beispiele für erfüllte und verletzte Eigenschaften und entscheiden, ob ein Problem algorithmisch lösbar ist.  3. Sie verwenden algorithmische Gr undbausteine zur Programmierung  o Sequenz, Schleife, Entscheidung , Variablen (lokale/globale)  o Eingabe und Ausgabe von Information  o Rechenoperationen und Ve rgleichsoperatoren   o Objekt, Botschaft, Attribut, Methode  4. Sie stellen Algorithmen dar  o mit Scratch-Bausteinen  5. Sie verstehen von Algorithmen und Programmtexte:  o Lesen und analysieren Programme  o Implementieren, modifizier en und erweitern Programme  6. Sie entwerfen, implementieren und testen Programme  7. Sie lösen Probleme selbstständig  8. Sie verwenden Hilfesysteme selbstständig   Darüber hinaus werden Prozesskompetenzen angesprochen, die das Folgende umfassen:  9. Modellieren und implementieren  10. Begründen und Bewerten  11. Strukturieren und Vernetzen  12. Kommunizieren und Kooperieren  13. Darstellen und Interpretieren  Zielgruppe:  Die primäre Zielgruppe der Entwickler waren vor allem Grundschüler. Dessen ungeachtet wird  Scratch wegen seiner Unterstützung einer intuitiven  Herangehensweise auch in den Sekundarstufen I und II, ja sogar in Einführungskur sen an der Universität verwendet.  Nicht nur vor diesem Hintergrund, sondern au ch von der Offenheit in Bearbeitungstiefe und  Zeitplanung kann diese Unterrichtssequenz sowohl in  der Sekundarstufe I als auch einführend in  der Sekundarstufe II verwendet werden. Nicht zu letzt kann ein Unterrichtsvorschlag immer nur  Ideen liefern, die an die jeweilige Lerngruppe  und –situation angepasst werden sollten.  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung 109  Ein kreativer Einstieg in die Programmierung mit Scratch  Im Folgenden werden jeweils zuerst die Pla nungen der einzelnen Unterrichtsphasen skizziert,  anschließend werden die Unterrichtserfahrunge n geschildert und Schülerergebnisse gezeigt.    Einführung in die Oberfläche, grundlegende Funktionen und Hilfefunktion  1. Einführungstutorial gemeinsam mit den Schülern:   2. Verwenden und Bewegen von Objekten.   3. Bausteine: Vorwärts, SpieleSchlag zeug, Sage, Denke und Background   4. Beschränkung auf Kategorien Bewegung,  Kontrolle, Aussehen, Klang  5. Zeigen eines kleines Beispiels für einen Animationsfilm   6. Aufgabe : „Erstelle einen kurzen Animationsfilm, ve rwende Bausteine aus o.g. Kategorien.“  7. Vorstellen verschiedener Filme, Schüler erkl ären verwendete Baussteine und Strategien      Verbleibende Zeit für den Beginn einer neuen UE und die Einführung in Scratch: Eine Stunde. Die  Schüler haben vorher das Thema Datenbanken abg eschlossen, einen Test geschrieben und gemeinsam ausgewertet.  Die Stimmung wird merklich gut, als wir „endlic h“ zum „Kern“ der Informatik kommen – zum  eigenen Entwickeln von Programmen.  Mit der Schritt-für-Schritt-Einführung werden di e Schülerinnen und Schüler mit den Grundlagen  von Scratch vertraut gemacht. Dabei werden w esentliche Funktionen, die Hilfe, Sprites sowie  deren Attribute im Klassendiagramm dargestellt.  Als Kontrollstuktur wird die Seque nz eingeführt und als Beispiel ei ne einfache Animation gezeigt.  Die Aufgabe ist nun: Erstellte einen Kurzfilm. Nach etwa 20 min hat jede Schülergr uppe einen kleinen Kurzfilm erstellt.   Anschließend wird demonstriert, wie ein ScratchProjekt online gestellt werden kann. Einige  Schüler stellen ihr Unterrichtserge bnis schon auf die Scratch-Website.  Eine knappe Woche später stelle ich erstaunt fest, dass Schüler eines Parallel(Leistungs-!)  Kurses mit dem, von einem meiner Schüler erstellte n, Spiel online spielen. Dieser Schüler wurde  nun gebeten, den Schülerinnen und Schülern d es Leistungskurses sein Programm und Scratch  vorzustellen – der LK schwenkt um auf Scratch!   110  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung    Wiederholungen (Schleifen), Erstellen von Animationen/ Filmen  1. Objekte   2. Sequenzen mit Grundbausteinen, Wiederholungen (Schleifen)  3. Storyboard  4. Erstellen eines eigenen Animationsfilms  5. Upload des Films auf Scratch-Website   6. Algorithmen und deren Eigenschaften    Gemeinsam an der Tafel entwickeln:   Objekte (Sprites) besitzen Attribute und Methoden (Anschreiben des  Klassendiagramms für Sprites).  Gemeinsame Attribute sind: x, y, Richtung, aktuellesKostüm, Größe in  Prozent (ggf. Rotationstyp (in IDE festzulegen))  Methoden werden als Skripte in der Scripts Area aus Bausteinen zusammengefügt.   Das Ausführen von mehreren Bauste inen (Anweisungen) nacheinander  nennt man Sequenz.  Mitunter möchte man mehrfach einen Baustein oder eine Sequenz ausführ en: Hierfür verwendet  man Wiederholungen (Schleifen) (Demonstrieren).    Aufgabe des Tages : Entwerfen und Erstellen ein es längeren Animationsfilms.  Als Beispiel wird der Film „Polarbear School“ gezeigt.  Gemeinsam mit den Schülern werden anhand des Be ispielfilms folgende Feststellungen gemacht:   • Es werden verschiedene Sprites verwendet.  • Handlungsabläufe geschehen mittels Pausenplanung.    Zum Entwurf eines Films eignet es sich die Handlungen der einzelnen Akteure (Objekte/Sprites)  in einem Storyboard festzuhalten  Ein Storyboard bildet die Inhalte und H andlungsverläufe eines Drehbuchs visuell ab  und dient so als Vorlage für die Erstellung eines Films. Die Handlungen aller Akteure  werden hierbei auf einem Zeitstrahl dargestellt.    Gemeinsam wird nun der Beginn des Storyboards für den Beispielfilm an der Tafel erarbeitet.   Anschließend erhalten die Schüler  folgenden Arbeitsauftrag:   Entwerfe und realisiere einen eigenen Anim ationsfilm zu einem Thema deiner Wahl.  Überlege dir zuerst, welche Objekte (Sprites)  in dem Film vorkommen sollen und welche Haupthandlungen dargestellt werde sollen.  Schreibe ein Storyboard für den Film und realisiere diesen anschließend mit Scratch.   Wenn du fertig bist, verwende den „Share“ Bu tton um das Programm online zu stellen.   Mögliche Ideen für das Thema des Films k önnen eine Szene aus deinem Lieblingsfilm,  dein Schultag oder ein Besuch im Zoo sei n. Du kannst aber auch andere Themen darstellen.  In den letzten 20 Minuten wird der Begriff des Algorithmus mit seinen Eigenschaften eingeführt.  Die Schüler sollen feststellen, ob es sich bei ihre m Animationsfilm um einen Algorithmus handelt. SPRITE  x-Position   y-Position   Richtung  Größe   aktuellesKostüm  Skript 1  Skript 2   Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung 111              Nach der Vorstellung einiger Schülerergebnisse wollen alle Schülerinnen und Schüler mit Scratch  loslegen bzw. weiterarbeiten. Vorher wiederholen wir allerdings  wesentliche Konzepte (einige  Schüler fehlten in der letzten Stunde): Sprites al s Objekte und die Kontrollstruktur Sequenz. Als  neue Kontrollstruktur wird die (inzwischen sc hon von einigen Schülern verwendete) Wiederholung  eingeführt.  Nun soll es um die Erstellung eines längeren Animationsfilms gehen. Als Grundlage für die  Erstellung des Animationsfilms wird die Methode des Storyboards eingeführ t – eine Skizze des  Films, die die Handlungen der Akteure auf eine m Zeitstrahl darstellt. Zur Motivation wird ein  Beispielprojekt („Polarbear School“) gezeigt, we lches verschiedene Möglic hkeiten mit Objekten  und Bühnen umzugehen, demonstriert.  Zu guter Letzt wird wiederholt, wie die Schül erinnen und Schüler sich registrieren und ihre  Projekte auf die Scratch-Website laden können. Nun wollen sie aber auch loslegen.   Da die Schülerinnen und Schüler einige Zeit fü r das Ausprobieren und das Kennenlernen der  Entwicklungsumgebung benötigten, musste bis zum Ende der 3 Stunden Zeit gelassen werden.  Schülerinnen und Schüler, die es nicht schafften, ihren  Film in dieser Zeit zu Ende zu bringen,  wollten das unbedingt zu Hause weitermachen – in der nächsten Woche werden die Ergebnisse  gesammelt und der Klasse vorgestellt. Mal seh en, wie die Projekte geworden sind.   In der letzten halben Stunde sollte das Thema „Al gorithmen“ besprochen werden. Dazu kam es  aus o. g. Grund nicht mehr. Die Schülerinnen und Schüler erhielten stattdessen die Hausaufgabe,  sich die Eigenschaften von Algorithmen an eine m Arbeitsblatt zu erarbeiten, ihr Projekt anhand  der Eigenschaften zu prüfen und zu entschei den, ob es sich um einen Algorithmus handelt.   112  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung      Algorithmen und das Reagieren auf Ereignisse: Entscheidungen  1. Vorstellen der Filme der Schülerinnen und Schüler unter Nutzung der Uploads auf die  Scratch-Website  2. Thematisierung der Eigenschaften von Algor ithmen Überprüfung dieser an einem (von  einem Schüler erstellten) Animationsfilm.  Erkenntnis: Ein Film ist kein Algorithmus: denn ein Algorithmus löst eine Klasse von Problemen.  Andere Eigenschaften von Algorithmen sind erfü llt: Eindeutigkeit: Aus jedem Schritt ist klar  welcher Schritt danach gemacht wird, Endlichke it (begrenzte Anzahl an Anweisungen), Ausführbarkeit (Skript wird ausgeführt)  1. Einführen des Bausteins „Wenn“   2. Zeichnen eines Sprites „Ball“, Endlose Vorw ärtsschritte, wenn „edge-wird berührt“ dann  Bausteine „Abdrehen wenn Kante berührt“   3. Hinweis: Hier handelt es sich zwar um eine  doppelte Abfrage – der Baustein kann auch  ohne „Wenn“ verwendet werden. Das Vorgehen er weist sich aber in diesem Beispiel für das  Verständnis der Entscheidung als pragmatisch..   4. Zu Beginn wird die Richtung per Zufall bestimmt  5. Arbeitsauftrag: Füge weitere Bälle oder andere  Objekte hinzu, die sich bewegen und aneinander abprallen!  Interaktivität: Reagieren auf Benutzereingaben  Mini-Projekt: Animieren von Namen.  Frage: Wer hat schon Möglichkeiten entdeckt, wie man Einfluss auf die Programme nehmen  kann? Welche Möglichkeiten für Einund Ausgaben gibt es?   Eine Schülerin oder ein Schüler stellt das folgende  vor (es ist zu erwarten, dass einige Schülerinnen und Schüler schon mehr Ba usteine ausprobiert haben)  Eingaben:   o Wenn Taste x – gedrückt tue – Starten verschiedener Skripte, Reagieren auf eingaben  o Wenn Maustaste gedrückt – Star ten verschiedener Skripte,  Reagieren auf Eingaben  o x und yWerte der Maus  Ausgaben:   o Darstellungen auf dem Bildschirm mit Sprites  o Sagen   o Denken  o Sound  Nun werden verschiedene Beispiele zu Name nsanimationen vorgestellt und anschließend folgender Arbeitsauftrag  gegeben:   Animiere deinen Namen, indem die Buchst aben auf Mausbewegungen und/oder Mausklicks  reagieren.   HA: Überlege dir je fünf Beispiele für Abläuf e aus dem täglichen Leben, die durch einen Algorithmus gelöst werden können (Beispiel: Addieren  zweier Zahlen) bzw. die nicht durch einen  Algorithmus beschrieben werden können (Bei spiel: Schreiben eines Bewerbungsbriefs).    Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung 113      Einige Schülerinnen und Schüler haben sich S cratch inzwischen zu Hause installiert.  Während die Schülerinnen und Schü ler anfangs noch zögern, ihre Animationsfilme vorzustellen,  sollen später sogar noch mehr Filme gezeigt werden.   Das Erstellen der Springbälle klappt gut – alle Schülerinnen und Schüler bewältigen diese Aufgabe gut, wer schneller ist, implementiert drei und mehr Bälle. Parallel werden die Projekte auf die  Scratch-Website hochgeladen.                 Die Möglichkeiten der Internaktion wurden  durch die Schülerinnen und Schüler gemeinsam  zusammengetragen und die Bausteine exemplarisch vorgestellt..  Das Vorstellen der Namensanimationen brachte eb enfalls interessante Ideen und Anregungen für  alle. Auch wenn viele Schülerinnen und Schüler di e Namensanimationen gut umsetzten, fehlte bei  einigen allerdings die Interaktivität – es handelte sich wieder nur um Filme. Hier musste nochmals  auf das Reagieren auf Ereignisse eingegangen werden.  Zeitlich waren 20 bis 30 Minuten für das Animieren der Bälle ausreichend. Für das Animieren des  Namens (45 min) hätte etwas mehr  Zeit sein können. Allerdings ha tte der straffe Zeitplan bis dahin  einen Vorteil: Die Schülerinnen und Schüler wa ren an den neuen Ideen immer noch sehr interessiert und arbeiteten ausnahmslos an den Mini-P rojekten gut mit und ließen sich gute Ideen  einfallen. Dabei wurden gestalterische Freihe iten als auch algorithmische Kreationen ausgelebt.                     Die Inhalte der folgenden beiden Unterrichtsph asen werden den Schülerinnen und Schülern als  Arbeitsblätter ausgehändigt. Sie haben nun fast drei  Unterrichtsstunden Zeit, sich die Konzepte an  den Beispielen und eigenen Progra mmen zu verdeutlichen und umzusetzen.   114  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung        Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung 115    Variablen: Platzhalter für Werte.   116  Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung    Der Unterricht wird diesmal mit einer mündliche n Leistungskontrolle zu Algorithmen, den kennengelernten Kontrollstrukturen und den Hausaufgaben begonnen. Die Klasse ist relativ ungeduldig und möchte mit Scratch weiterarbeiten.  Vorneweg werden weitere Ergebnisse aus der letz ten Woche gezeigt. Nach jedem Programm gibt  es sogar einen kleinen Applaus für die Progra mmierer. Anschließend wird das Vorhaben für den  Tag und die nächste Woche mitgeteilt: Zwei Ar beitsblätter mit neuen Konzepten, Erklärungen  dazu und Aufgaben sowie ein eigenes Spiele-Projekt . Mit Austeilen der Arbeitsblätter legen die  Schülerinnen und Schüler auch schon los.  Das Verwenden der Botschaften funktioniert ohne  größere Probleme. Wo Schwierigkeiten auftauchen, helfen sich die Schülerinnen und Schüler meis t gegenseitig oder schauen selbst im Hilfesystem von Scratch nach. Einige Schülerinnen und Schüler haben bereits vorher Botschaften und  Variablen eingesetzt. Bei der Aufgabenstellung, ei ne Tanzgruppe zu animieren, entstehen wieder  vielfältige Umsetzungen. Teilweise gestalten di e Schülerinnen und Schüler die Tanzgruppe interaktiv, so dass bspw. auf Mausklick Botschafte n versandt und damit Aktionen gestartet werden.  Teilweise geschehen die Methodenaufrufe vom „Tr ainersprite“ aus, so dass keine Interaktionen  möglich sind. In diesen Fällen bespreche ich mit diesen Schülerinnen und Schülern kurz das  Programm und wie sie Interaktionen einbauen könnte n (was sie aber nicht müssen) und stelle so  sicher, dass das Prinzip von Algorithmen (nicht  immer der gleiche Ablauf) verstanden wurde.  Auch das Verwenden von Variablen macht keine  Probleme, so dass die meisten Schülerinnen und  Schüler in der dritten Stunde bereits mit dem eigenen Projekt anfangen.  Dabei fiel mir im Übrigen ein weiterer Effekt  der eigenständigen kreativen Projektarbeit im  Unterricht auf: Als ich die letzte der drei St unden beendete und es zur großen Pause klingelte,  stürmten die Schülerinnen und Schüler nicht – wie häufig – schnell nach draußen. Als wäre nichts  gewesen, blieben die meisten sitzen, brachten noch das Umsetzen ihrer Ideen zu Ende und verließen dann erst nach und nach den Raum. Das Int eresse scheint geweckt und beständig zu sein.    Projekt:  Bis hierher wurden elementare Konzepte der Programmierung vermittelt. Von nun an sollen die  Schülerinnen und Schüler ihr erlerntes Wissen in  einem eigenen kleinen Projekt anwenden:    Aufgabe:   Entwickle ein eigenes Spiel in Scratch, in we lchem du alle bisher kennengelernten Konzepte  verwendest (verschiedene Sprites, Botschaften,  Schleifen, Entscheidungen und Variablen, …).    Ideen können bspw. solchen Spielen wie Mario Br others, Pong, Moorhuhn, Autorennen, Memory  usw. entstammen.      Den Auftakt der letzten drei Unterrichtstunden bildete wieder das Präsentieren von Ergebnissen  aus der letzten Woche durch die Schülerinnen und Schüler. Nachdem sie si ch über einige Ideen  und Vorgehensweisen ausgetauscht hatten, wollte n sie nun an ihrem Projekt weiterarbeiten.  Leider konnte es nur ein kleines Projekt werden , da nur 1,5 Stunden Zeit übrig blieb – in der  letzten Stunde sollte eine Leis tungskontrolle zu Algorithmen und Programmierung geschrieben  werden. Jeder Schüler bzw. jede Schülergruppe scha ffte es aber, vorher ein kl eines Spiel fertig zu  stellen.   Unterrichtsbeispiel: Ein kreativer Einstieg in die Programmierung 117    Die 45-minütige Leistungskontrolle umfasste eine n theoretischen und einen praktischen Teil –  wobei der praktische Teil aus einer Problemlöseund einer freien kreativen Aufgabe bestand. Diese wurde von der Mehrheit der Schülerinnen un d Schüler gut bis sehr gut bewältigt. Bisher  habe ich bei der Einführung in die Programmi erung noch mit keinem Kurs so schnell so gute  Ergebnisse erzielt.                       Möglicher weiterer Unterrichtsverlauf:  Mit Sicherheit kann die weitere Arbeit mit den Sc hülerinnen und Schülern auf das bisher Erreichte  aufbauen. Insoweit könnten weitere Projekt-Id een und Unterrichtsinhalte angepackt werden,  beispielsweise:  – Interaktive Musik  – Algorithmische Computergrafik   – Simulationen    Ebenso können weitere Arbeitst echniken bei den Schülerinnen und Schülern entwickelt werden,  zum Beispiel   Problemfindung und Problemlösung  mit Scratch:   Stelle einem Tauschpartner eine Aufgabe, die er mit Scratch lösen soll.   Formuliere diese Aufgabe schriftlich.   Erstelle selbst eine Lösung für diese Aufgabe mit Scratch, aber zeige sie deinem Tauschpartner  nicht. Tauscht nun eure Aufgaben und versucht  jeweils die Aufgabe d es anderen zu lösen.   Wenn dein Tauschpartner deine Aufgabe gelöst ha t, stellt euch gegenseitig die Lösungen vor und  vergleicht sie hinsichtlich de r fehlerfreien Lösung der Aufgab e, der Benutzerfreundlichkeit, der  Effizienz und der Eleganz der Scripte.     Scratch bietet einen motivierende n Einstieg in die Programmier ung mit geringen Einstiegshürden.  Gleichwohl können aber auch viele anspru chsvolle Projekte umgesetzt werden.   Auf Scratch aufbauend könnte es sich anbieten m it Squeak weiterzuarbeiten. Squeak unterstützt  dann auch den Textmodus und weitere, in  Scratch nicht vorhandene, Konzepte.   118  Fragebogen zur Unterrichtserprobung    B Fragebogen zur Unterrichtserprobung           Fragebogen zur Unterrichtserprobung 119              120  Lernerfolgskontrolle: Algorithmen und Programmierung    C Lernerfolgskontrolle: Algorithmen und Programmierung    1. Was ist ein Algorithmus?   a) Beschreiben Sie, was Sie unter dem Begriff verstehen.     b) Geben Sie die 4 Eigenschaften von Algorithmen an und erläutern Sie jede kurz (1-2 Sätze).      c) Entscheiden Sie, welche der Prozesse dur ch Algorithmen beschrieben werden können!   Prozess Ja Nein Begründung  Lösen einer Quadratischen Gleichung der  Form ax2 + bx + c = 0     Schreiben eines Liebesbriefes       Ordnen von 1000 gebrochenen Zahlen  nach ihrer Größe     Ermitteln der Häufigkeit eines Wortes in  einem Text     Leiten einer Diskussion       Konstruieren eines Kreises durch drei  nicht auf einer Gerade liegenden Punkte     Schießen eines Tores beim Handball         2. Nennen und erläutern Sie kurz 3 Kontrollstrukt uren, die bei der Beschreibung von Algorithmen  verwendet werden können. Geben Sie jeweils ein kleines Beispiel an, welches genau illustriert,  warum die jeweilige Kontrollstruktur verwendet werden muss.  Kontrollstruktur Funktion Beispiel  1.         2.        3.          Lernerfolgskontrolle: Algorithmen und Programmierung 121  3. Geben seien die folgenden Programme.   a) Beschreiben Sie die Funktion des Programms  kurz mit eigenen Worten. (Was macht das  Sprite?)   b) Gibt es eine Möglichkeit, das Programm zu verbessern (So dass es kürzer/ effizienter/ besser ist?). Wenn ja, geben Sie die Möglichke it an, wenn nein, begründen Sie warum nicht!    Beispiel 1:  Beispiel 2:                         Bei beiden Programmen verwendetes Sprite:  122  Lernerfolgskontrolle: Algorithmen und Programmierung      4. Erstellen Sie ein Programm in Scratch, in welc hem die Katze bis zum Baum läuft, dort umdreht  und dann bis zum Ende des linken Bild schirms läuft (siehe Bilder).  Verwenden Sie die Vorlage: Aufgabe_4.sb. Speichern Sie Ihr Ergebnis im Testate-Ordner unter dem Namen A4 IhrName .sb.    Anfangssituation: Ende                      5. Erstellen Sie ein kleines Programm in Scratch,  in welchem Sie die 3 kennen gelernten Kontrollstrukturen sowie Botschaf ten und Variablen verwenden.   Beschreiben Sie in einem Satz, was Ihr Programm leistet (Funktion). Speichern Sie Ihr Ergebnis im Testate-Ordner unter dem Namen A5 IhrName .sb.   Arbeitsblatt zur Untersuchung des Verständnisses von Kreativität 123  D Arbeitsblatt zur Untersuchung des Verständnisses von Kreativität    124  Arbeitsblatt zur Untersuchung des Verständnisses von Kreativität            Bildungsstandards kreativ erreichen – ei n Unterrichtskonzept für die Sekundarstufe I 125  E Bildungsstandards kreativ erreichen – ein Unterrichtskonzept für die  Sekundarstufe I122    Mit dem neuen Schuljahr besteht die Möglichke it, an einer neu gegründeten Schule bei der  Gestaltung eines Konzeptes der in formatischen Bildung von Anfang an mitzuwirken. Ziel ist es,  einen Unterrichtsvorschlag für die Sek. I zu erhalte n, der basierend auf neuesten informatikdidaktischen wissenschaftlichen Erkenntnissen die Mind estanforderungen der Bildungsstandards erfüllt,  dabei aber weit darüber hinaus bei den Schülern Interesse und Be geisterung für die Informatik  weckt. Mit dem Ziel, dass die Schüler lernen, d ass die sie umgebenden Medien gestaltbar sind und  die Informatik hierfür wichtige Grundlagen liefert , nennt sich der Kurs Mediengestaltung Informatik. Hier sollen die Schüler mit Hilfe neuer Medien  ihre eigenen Ideen erforschen und umsetzen,  grundlegende Fähigund Fertigkeiten in der In formatik erwerben sowie Selbstvertrauen und  Verantwortungsbewusstsein im Umgang mit In formationsund Kommunikationstechnolgien  (IKT) entwickeln.    Die Konstruktion von Softwareartefakten in ei ner technologieunterstützten Unterrichtsumgebung  steht im Zentrum des Informatikunterrichts. Da IK T eine kreativitätsfördernde Rolle zugesprochen  wird, ist die Schulinformatik in einer glücklic hen Position: Computertechnologie, Software und  ausgebildete Lehrer bilden einen Schwerpunkt de r Unterrichtsumgebung. Zudem werden viele der  Anforderungen an kreativitätsunterstützende Soft waretools von im Informatikunterricht verwendeten Softwarewerkzeugen erfüllt. Außerdem si nd Grundlagen, die notwendig sind, um IKT zu  verstehen und kreativ einzusetzen, Inhalte des In formatikunterrichts. Die Möglichkeiten, welche  die Informatik damit bietet, um kreativ zu ar beiten, können einen starken Einfluss auf Motivation  und Interesse der Schüler ausüben. Damit stützt si ch kreatives Lernen im Informatikunterricht auf  drei Säulen (Romeike 2007c): Die kreative Pers on, Informatik als Fach, welches Kreativität  erfordert und fördert, sowie eine kreativitätsunter stützende Umgebung, die im  Informatikunterricht  durch die verfügbare Computertechnologie unterstüt zt wird. Eine Möglichkeit, Kreativität in der  Schulinformatik zu erreichen, ist durch die Berü cksichtigung der Kriterien kreativen Informatikunterrichts (Romeike 2007b). Hierdurch können sowohl  hohe Lernmotivation als auch ein tiefes  Verständnis erreicht werden (Romeike 2008a).    Als Ideengeber für das Konzept des Kurses Mediengestaltung Informatik dienen die „Computer  Clubhouses“ (Resnick und Rusk 1996), welche das Ziel  verfolgen, Schülern ein kreatives Lernen  mit Computern zu ermöglichen. Quasi „nebenbei“  lernen die Schüler dort grundlegende Verfahren, Konzepte und Anwendungen der Informatik. Dem Lernansatz liegen vier Leitprinzipien  zugrunde: Lernen durch Design, folgen eigener In teressen, bilden einer Gemeinschaft und eine  Umgebung des Respekts und Vertrauens. Lässt sich  das Konzept des freiwilligen Lernens in der  Freizeit mit dem formalen Rahmen der Schule verbin den; lässt sich intrinsisch motivierte Kreativität in einem (Wahl-)Pflichtkurs realisieren? In de m geplanten Kurs soll der Spagat gewagt werden,  indem versucht wird, aus dem starren lernziel geleiteten Unterrichtsgefüge auszubrechen. Unterrichtsinhalte sollen auf den Ideen der Schüler basi erend induktiv erarbeitet werden. Hierzu ist es  notwendig, eine Unterrichtsatmosphäre zu schaffe n, die Ideen begrüßt und anregt, insbesondere  durch strikte Befolgung der „Kriterien kreativen Informatikunterrichts“ (Romeike 2007b). Darüber  hinaus werden verschiedene Softwarewerkzeuge  eingesetzt, um Schülerideen auszuprobieren und  umzusetzen. Durch regelmäßige Präsentationen v on Schülerprojekten wird eine gegenseitige  Ideenanregung zwischen den Schülern initiiert. Dami t folgt jeder Unterrichtszyklus dem Challenge-Cycle (Romeike 2008f), nach welchem selb ständiges Finden von pers önlichen Herausforderungen, Problemmanagement, Produktverbessern und die Präsentation des Ergebnisses folgen.                                                           122 Dieser Artikel wurde veröff entlicht in (Romeike 2008b). 126  Bildungsstandards kreativ erreichen – ein Unterrichtskonzept für die Sekundarstufe I    Im Groben sind mindestens folgende Themen in den ersten zwei Jahren geplant:   • Informatik und ich – Grundlagen und Inhalte der Informatik,   • Grafik und Bildbearbeitung, Animationen und Spie le gestalten: Ein kreativer Einstieg in  die Programmierung,  • Informatik und Kunst,   • Poster, Präsentationen, Schülerzeitung: Me diengestaltung mit Standardsoftware,   • Gestaltung von Onlinemedien,   • Musikverarbeitung/Computermusik.   Parallel zum Kurs soll eine Dokumentation und wissenschaftliche Begleitung des Kurses erfolgen,  in welchen die Erfahrungen ausgewertet werden.   Student Teachers’ Beliefs about Creativity 127          F Student Teachers’ Beliefs about Creativity    F   Student Teachers’ Beliefs about Creativity in        Com puter Science 128  Student Teachers’ Beliefs about Creativity    Literature aus dem Artikel:  (Kendall, Samways und Wibe 2002). (Anders on und Weert 2002) (Resnick 2007b) (Resnick  2007b) (Romeike 2008c)) (Janneck 200 6). (Diakidoy und Kanari 1999).   (Runco 2007) (Boden 1990)  (Romeike 2007c) (Gu und Tong 2004; Romeike 2006) (Long 2007; Lewandowski, Johnson und Goldwebe r 2005; Resnick 2002; Peppler und Kafai 2005;  Romeike 2008a)  (Clements 1995b; Shneiderman 2000; Thomas, Lee und Danis 2002) (Romeike 2007b) (Knobelsdorf und Romeike 2008) (Fryer und Collings 1991) (Diakidoy und  Kanari 1999) (Fryer 2006) (Diakidoy und Kanari 1999).    Student Teachers’ Beliefs about Creativity 129  130  Student Teachers’ Beliefs about Creativity     Student Teachers’ Beliefs about Creativity 131  132  Student Teachers’ Beliefs about Creativity     Student Teachers’ Beliefs about Creativity 133  134  Student Teachers’ Beliefs about Creativity      Student Teachers’ Beliefs about Creativity 135                                      Literaturverzeichnis  136  Literaturverzeichnis    AAUW, American Association of University Wome n (2000): Tech-Savvy: Educating Girls in the  New Computer Age. American Association of University Women, Washington, DC.  Amabile, T. M. (1996): Creativity in context: upda te to the social psychology of creativity.  Westview Press, Boulder, Colorado [u.a.].  Amabile, T. M. (1998): How to kill creativit y. Harvard Business Review, 76 (5), 76-87.  Anderson, J. und Weert, T. v. (2002): UNESCO/IFIP Curriculum Information and Communication Technology in Secondary Education    http://wwwedu.ge.ch/cptic/prospective/projet s/unesco/en/curriculum2000.pdf, (8.8.2008).  Anderson, L. W. und Krathwohl, D. R. (2001): A taxonomy for learning, teaching, and assessing:  a revision of Bloom's taxonomy of educati onal objectives. Longman, New York [u.a.].  Antonitsch, P., Kramer, L., Lerchster, R. und Ukowitz, M. (2007): IT-Frust statt Lust? Zur Studienwahl von Jugendlichen aus Sicht von Schül erinnen, Eltern, Lehrenden und Praktikern.  In: Information und Gesellschaft: Technologien einer sozialen Beziehung, Greif, H., Mitrea, O. und Werner, M. (Hrsg.), VS Verlag für Sozialwissenschaften.  Aupperle, M. (2002): Die fortgeschrittene Kunst der Programmierung mit C++. Vieweg und  Teubner, Wiesbaden.  Ausubel, D. P. (1974): Psychologie des Unterrichts. Beltz, Weinheim.  Ausubel, D. P., Novak, J. und Hanesian, H. ( 1982): Psychologie des Unterrichts Beltz, Weinheim.  Barker, L. J., Garvin-Doxas, K. und Roberts, E. (2005): What can computer science learn from a  fine arts approach to teaching? SIGCSE Bull., 37 (1), 421-425.  Barrett, F. J. (1998): Coda: Creativity and Impr ovisation in Jazz and Organizations: Implications  for Organizational Learning. Organization Science, 9 (5), 605-622.  Bauer, W. F., Juncosa, M. L. und Perlis, A. J. (1959): ACM Publication Policies and Plans.  Journal of the ACM (JACM), 6 (2), 121-122.  Begel (1996): LogoBlocks: A Graphical Programmi ng Language for Interacting with the World.  Unpublished Advanced Undergradua te Project, MIT Media Lab.  Bergin, S. und Reilly, R. (2005): The Influence of Motivation and Comfort-Level on Learning to  Program. In: Proceedings of the PPIG 17, Univ ersity of Sussex, Brighton UK, In P. Romero, J. G., E. Acosta Chaparro & S. Bryant (Hrsg.), 293-304.  Literaturverzeichnis 137  Berliner, P. F. (1994): Thinking in jazz: the infinite art of improvisation. University of Chicago  Press, Chicago.  Bertelsmann (2004): Bertelsma nn Wörterbuch der deutschen Sprache. Wissen Media Verlag,  Gütersloh/München.  Biggs, J. (1996): Enhancing Teach ing through Constructive Alignmen t. Higher Education, 32 (3),  347-64.  Blackwell, A. und Collins, N. (2005): The programming language as a musical instrument. In:  Proceedings of the PPIG05 (Psychology of Programming Interest Group), University of Sussex, Brighton UK., 120-130.  Bloom, B. S. (1974): Taxonomie von Lernzielen  im kognitiven Bereic h. Beltz, Weinheim.  Blum, B. I. (1991): Torn between Fun and Tedium. In: Software Creativity, Glass, R. L. (Hrsg.),  Prentice Hall PTR, Englewood Cliffs, NJ.  Boden, M. A. (1990): The creative mind: myths & mechanisms. Basic Books, London.  Boden, M. A. (1995): Die Flügel des Geistes: Kreativität und künstliche Intelligenz. Dt. Taschenbuch-Verl., München.  Bond, G. W. (2005): Software as art. Comm unnications of the ACM, 48 (8), 118-124.  Bortz, J. und Döring, N. (2002): Forschungsmethoden und Evaluation für Human-und Sozialwissenschaftler. (3. überarbeitete Aufl age). Springer, Berlin u. a.  Bringsjord, S. und Ferrucci, D. A. (1999): Artific ial Intelligence and Literary Creativity: Inside the  Mind of Brutus, a Storytelling Machine. Lawrence Erlbaum Associates.  Brooks, F. P. (1995): The mythical man-month. Addison-Wesley Longman Publishing Co., Inc.  Bruce, C., Buckingham, L., Hynd, J., McMahon,  C., Roggenkamp, M. und Stoodley, I. (2004):  Ways of experiencing the act of learning to program: A phenomenographic study of introductory programming students at university. Journal of Information Technology Education, 3, 143-160.  Bruder, R. (2001): Kreativ sein wollen, dürfen und können. Kreativität, mathematik lehren, 106,  46-50.  Brunner, R. B. (1991): Creative Computer Scie nce Teaching Techniques. Computer Science  Education, 2 (3), 187-195.  Cambridge (2008): Cambridge Dictionary of American English Online.  http://dictionary.cambridge.org/Default.asp?dict=A, (14 Dec 2007). 138  Literaturverzeichnis    Chaytor, L. und Leung, S. (2003): How to creatively communicate Microsoft.NET technologies in  the IT curriculum. In: Proceedings of the 4th conference on Information technology curriculum, ACM Press, Lafayette, Indiana, USA, 168-173.  Clements, D. H. (1995a): Playing with computer s, playing with ideas. Educational Psychology  Review, V7 (2), 203-207.  Clements, D. H. (1995b): Teaching Creativity with  Computers. Educational Psychology Review, 7  (2), 141-161.  Cohen, H. (1995): The further exploits of Aaron,  painter. Stanford Hum. Rev., 4 (2), 141-158.  Cohen, H. (1999a): Colouring Without Seeing: a Problem in Machine Creativity. In: "Department  of Visual Arts". University of California, San Diego.  Cohen, H. (1999b): A self-defining game for one player. In: Proceedings of the 3rd conference on  creativity & cognition, Loughborough, United Kingdom, ACM.  Collins, M. A. und Amabile, T. M. (1999): Motiv ation and Creativity. In: Handbook of Creativity,  Sternberg, R. J. (Hrsg.), Cambridge University Press, Cambridge, 297-312.  Computer Science and Telecommunications Board, N. R. C. (1999): Being Fluent with Information Technology. National Academic Press, Washington, D.C.  Conti, R. und Amabile, T. (1999): Motivation/Drive. In: Encyclopedia of Creativity, Runco, M. A.  und Pritzker, S. R. (Hrsg.) 2, Academic  Press, San Diego, Calif. [u.a.] 251-260.  Conti, R., Coon, H. und Amabile, T. M. (1996): Evidence to Support the Componential Model of  Creativity: Secondary Analyses of Three Studies. Creativity Research Journal, 9 (4), 385-389.  Couger, J. D. (1990): Ensuring Creative Approaches  in Information System Design. Managerial  and Decision Economics, 11 (5), 281-295.  Craft, A. (2001): An analysis of research and lite rature on creativity in education. Report prepared  for the qualification and curriculum authority.    http://www.ncaction.org.uk/creativity/c reativity_report.pdf (10.06.2008).  Cropley, A. J. (2000): Defining and Measuring Creativity: Are Creativity Tests Worth Using?  Roeper Review, 23 (2), 72-79.  Csikszentmihalyi, M. (1990): Flow : The psycholog y of optimal experience. Harper [and] Row,  New York u.a.  Csikszentmihalyi, M. (1997): Kreativität: wie Si e das Unmögliche schaffen und Ihre Grenzen  überwinden. Klett-Cotta, Stuttgart.  Literaturverzeichnis 139  Curtis, B., Guindon, R., Krasner, H., Walz, D., El am, J. und Iscoe, N. (1987): Empirical Studies of  the Design Process. In: Proceedings of the Second Workshop on Empirical Studies of Programmers.  Curzon, P. und Rix, J. (1998): Why do Student s take Programming Modules? In: Proceedings of  the 6th annual conference on the teaching a nd computing and the 3rd annual conference  on integrating technology into CSE: Changing the delivery of Computer Science Educa-tion. ITICSE ’98, Dublin, Ireland, 59-63.  Cusumano, M. A. (1991): Japan's software factor ies: a challenge to U.S. management. Oxford  University Press, Inc.  Davis, G. A. (1991): Teaching creativity thinking.  In: Handbook of gifted education, Colangelo&,  N. und Davis, G. A. (Hrsg.) 236–244, Allyn & Bacon, Boston:.  Davis, T. A. und Kundert-Gibbs, J. (2006): The role  of computer science in digital production arts.  In: "Proceedings of the 11th annual SIGC SE conference on Innovation and technology in  computer science education". ACM, Bologna, Italy.  De Bono, E. (1970): Lateral Thinking: Creativity Step by Step. Harper & Row.  Deci, E. L. und Ryan, R. M. (1985): Intrinsic mo tivation and self-determination in human behavior. Springer, New York.  Desel, J. (2001): Das ist Informatik. Springer, Berlin [u.a.].  Diakidoy, I.-A. N. und Kanari, E. (1999): Student Teachers' Beliefs about Creativity. British  Educational Research Journal, 25 (2), 225-43.  Diethelm, I. (2007): Strictly models and obj ects first Unterrichtskonzept und -methodik für  objektorientierte Modellierung im Informati kunterricht. Universität Kassel, Kassel.  Dreifus, C. (2002): Getting it about John Maeda. http://www.maedastudio.com/catalog_lores.pdf,  (10.06.2008).  Duraes, J. A. und Madeira, H. S. (2006): Emulati on of Software Faults: A Field Data Study and a  Practical Approach. IEEE Trans. Softw. Eng., 32 (11), 849-867.  Eastman, E. G. (2003 ): Fact-based problem identification precedes problem solving J. Comput.  Small Coll. , 19 (2 ), 18-29   Edelmann, W. (1996): Lernpsychologie. Beltz, Weinheim. Eich-Soellner, E. (2005): Informationen zum Fac hbereich Informatik, Math ematik an der Fachhochschule München (FHM). http://www. cs.fhm.edu/broschuere/ (2.9.2006).  Engelmann, L. (2004): Informati sche Grundbildung. Paetec, Altenburg. 140  Literaturverzeichnis    Epstein, R. G. (2006): An ethics and security course for students in computer science and information technology. In: Proceedings of the 37th SIGCSE technical symposium on Computer  science education, ACM Press, Houston, Texas, USA, 535-537.  ETH-Zürich (2003): Interview with Prof. Gustavo Alonso.   http://www.inf.ethz.ch/news/foc us/edu_focus/alonso (2.9.2006).  Fasko, D. (2000): Education and creativity. Cr eativity Research Journal, 13 (3-4), 317-327.  Feldgen, M. und Clua, O. (2003): New motivati ons are required for freshman introductory programming. In: Proceedings of the 33rd ASSE/ IEEE Frontiers in Education Conference,  Boulder, Vol. 1, T3C-T24.  Feldhusen, J. F. und Goh, B. E. (1995): Ass essing and Accessing Creativity an Integrative  Review of Theory, Research, and Developmen t. Creativity Research Journal, 8 (3), 231247.  Feldhusen, J. F. und Treffinger, D. J. (1985): Creative thinking and problem solving in gifted  education. Kendall-Hunt, Dubuque, Iowa.  Feldman, D. H. (1988): Creativity: Dreams, insi ghts, and transformations. In: The nature of  creativity, Sternberg, R. J. (Hrsg.), Cambridge University Press, New York.  Feller, G. (1996): Defizite der Ausbildung Er fordernisse der Weiterbildung? Ergebnisse und  Betrachtungen an der Schnittstelle Lehrabsch luß aus der Sicht von Auszubildenden. In:  Berufliche Ausund Weiterbildung., Die pold, P. (Hrsg.), Nürnberg, 251-260.  Flaherty, A. W. (2005): Frontotemporal and dopami nergic control of idea generation and creative  drive. The Journal of Comparative Neurology, 493 (1), 147-153.  fm4.orf.at (2004): Nerd's not dead. Internetdiskussion zu Nerd, Kreativität und Informatik.  http://fm4.orf.at/janis/187570/main, (24.4.2008).  Fothe, M. (2002): Problemlösen mit Python. ThILLM, Bad Berka.  Frenkel, K. A. (1987): Profiles in computing: Bria n K. Reid: a graphics tale  of a hacker tracker.  Commun. ACM, 30 (10), 820-823.  Friedrich, S. (1995): Grundpositionen eines Sc hulfaches. Ergebnisse des 2. Fachdidaktischen  Gespächs zur Informatik an der Technisch en Universität Dresden. LOG IN, 15 (5/6).  Fryer, M. (2006): Facilitating Creativity in Highe r Education: The Views of National Teaching  Fellows. Higher Education Academy.  Fryer, M. und Collings, J. A. (1991): Teachers' views about creativity. British Journal of Educational Psychology, 61 (2), 207-219.  Literaturverzeichnis 141  Galton, F. (1869): Hereditary Genius. An Inquiry  into Its Laws and Consequences. Macmillan &  Co, London and New York.  Garner, S. R. (2005): Hacking with the Divi ne: A Metaphor for Theology-Technology Engagement. Colloquium, 37 (2), 181-195.  Gärtner, H.-J. (1997): Kreativität im Chemieun terricht. Naturwissenschaften im Unterricht.  Chemie, 8 (42), 12-16.  Geser, H. (1999): Mängel der Schulausbildung aus Arbeitgebersicht. In: Wa ndel der Arbeitswelt,  Online Publications, Zürich, http://geser .net/work/geser/05.pdf  (2.9.2006).  GI (1993): GI-Empfehlungen für das Fach Informat ik in der Sekundarstufe II allgemeinbildender  Schulen. Beilage zu LOG IN 13 (1993), Nr. 3.  GI (2006): Was ist Informatik? Gesellsch aft für Informatik e.V. (GI), Bonn.  Ginat, D. (2001): Misleading intuition in algorithmic problem solving. In: Proceedings of the 32nd  SIGCSE technical symposium on Computer Scie nce Education, Charlotte, North Carolina,  United States, ACM Press, 21-25.  Glass, R. L. (1995): Software creativity. Prentice Hall PTR, Englewood Cliffs, NJ.  Glass, R. L. (2006): Software creativity 2.0. developer .* Books, Atlanta.  Goorhuis, H. (1994): Konstruktivistische Modellbildung in der Informatik.  Graham, P. (2004): Hackers and Painters: Big Id eas from the Computer Ag e. O'Reilly Associates  Inc.  Gropius, W. (1918): Manifest. http://www .bauhaus.de/bauhaus1919/manifest1919.htm,  (26.5.2008).  Gu, M. und Tong, X. (2004): Towards Hypotheses on Creativity in Software Development.  Lecture Notes in Computer Science, 3009, 47-61.  Guilford, J. P. (1950): Creativity. American Psychologist, 5, 444-454.  Guindon, R. und Curtis, B. (1988): Control of cogni tive processes during software design: what  tools are needed? In: Proceedings of the SIGCHI conference on Human factors in comput-ing systems, Washington, D.C., United States, ACM Press, 263-268.  Guzdial, M. und Soloway, E. (2002): Teaching the Nintendo generation to program. Commun.  ACM, 45 (4), 17-21. 142  Literaturverzeichnis    Häcker, H. und Stapf, K. H. (1998): Dorsch Psychologisches Wörterbuch (13. überarbeitete und  erweiterte Auflage). Huber, Bern.  Hadamard, J. S. (1949): The psychology of invention in the mathematical field. Princeton, NJ:  Princeton University Press.  Haladyna, T. M. (1997): Writing Test Items To Evaluate Higher Order Thinking. Allyn & Bacon,  Boston.  Hartmann, W. (2004): Computer und Internet im  Unterricht: Zu hohe Erwartungen! Gymnasium  Helveticum 1/04, 1 (44-45).  Hascher, T. (2005): Emotions in Everyday School -Life: Effects and forms of regulation (In  German). Zeitschrift für Pädagogik, 51 (5), 610-625.  Hengl, H.-T. (2008): Informatiker müssen Bandbre ite ihres Fachs besser darstellen. Computer  Zeitung, 39 (32-33), 21.  Hennessey, B. A. (2007): Creativity and Motivation in the Classroom: A Social Psychological and  Multi-Cultural Perspective. In: Creativity: A Handbook for Teachers, Tan, A.-G. (Hrsg.),  World Scientific, Singapore.  Hennessey, B. A. und Amabile, T. M. (1987): Creativity and Learning: What Research Says to the  Teacher. National Education Association, Washington D.C.  Hentig, H. v. (2000): Kreativität : hohe Erwartunge n an einen schwachen Begriff. Beltz, Weinheim [u.a.].  Hill, A. M. (1998): Problem solving in real-life contexts: An alternative for design in technology  education. International Journal of Tech nology and Design Education, 5 (3), 1-18.  Hofstadter, D. R. (1996): Die FARGonauten. Üb er Analogie und Kreativität. Stuttgart: KlettCotta.  Hopkins, S. (1995): Listen. The Economist.  Hubwieser, P. (2000): Didaktik der Informatik : Grundlagen, Konzepte, Beispiele. Springer, Berlin  [u.a.].  Humbert, L. (2003): Zur wissenschaftlichen Fundie rung der Schulinformatik. Pad-Verl., Witten.  Hunt, A. und Thomas, D. (2001): The Art in Computer Programming. The Pragmatic Programmers, LLC. September.  Isaksen, S. G. und Treffinger, D. J. (1985): Creativ e problem solving: the basic course. New York:  Bearly Limited.  Literaturverzeichnis 143  Jablko, L. (1994): Zur Entwicklung von Kreativität im Physikunterricht. In: Zur Didaktik der  Physik und Chemie; Probleme und Perspektiven , Behrendt, H. (Hrsg.) 15, LeuchtturmVerlag Alsbach, 328-331.  James, V., Lederman Gerard, R. und Vagt-Traor e, B. (2004): Enhancing creativity in the classroom. http://projects.coe.uga.edu/epltt/, (02.06.2008).  Janneck, M. (2006): Partizipative Systementw icklung im Informatikunterricht. LOG IN,   (138/139), 60-66.  Kaasbøll, J. J. (1998): Teaching critical thinki ng and problem defining skills. Education and  Information Technologies, 3 (2), 101-117.  Kay, A. und Goldberg, A. (1977): Personal Dynamic Media. Computer, 10 (3), 31-41.  Kendall, M., Samways, B. und Wibe, J. (2002): Position Paper Lifelong Learning (LLL) Version  1. International Federation for Information Processing (IFIP), Laxenburg.  Kidder, T. (2000): The Soul Of A New Machine. Back Bay Books.  Kind, P. M. und Kind, V. (2007): Creativity in Sc ience Education: Perspectives and Challenges for  Developing School Science. Studies in Science Education 43, 1-37.  Klütsch, C. (2007): Computergrafik: Ästhetisch e Experimente zwischen zwei Kulturen. Die  Anfänge der Computerkunst in den 1960er Jahren. Springer, Wien, New York.  Knobelsdorf, M. und Romeike, R. (2008): Creativ ity as a Pathway to Computer Science. In:  Proceedings of the 13th Annual Conference on Innovation and Technology in Computer Science Education (ITICSE 2008), Madrid, ACM Press.  Knobelsdorf, M. und Schulte, C. (2005): Computer Biographies A Biographical Research  Perspective on Computer Usage and Attitudes To ward Informatics. In: Proceedings of the  5th Annual Finnish / Baltic Sea Conference on Computer Science Education, Koli.  Knobelsdorf, M. und Schulte, C. (2007): Computer Science in Context Pathways to Computer  Science. In: Proceedings of the 7th Baltic Sea Conference on Computing Education Research ( Koli Calling 2007), Koli National Park, Finnland, Lister, R. und Simon (Hrsg.), Conferences in Research and Practice in Information Technology, Vol. 88.  Knuth, D. E. (1974): Computer Programming as an Art. Communications of the ACM, 17 (12),  667 673.  Knuth, D. E. (2001): Things a computer scientist rarely talks about. CSLI Publications, Stanford,  CA.  Koberg, D. und Bagnall, J. (1981): The All New Universal Traveler: A Soft-Systems Guide to  Creativity, Problem-Solving, and the Process of Reaching Goals. William Kaufmann Inc. 144  Literaturverzeichnis    Kohl, L. und Romeike, R. (2006): Aktueller Stand der Objektorientierung bei  Informatiklehrerinnen und -lehrern. In: Proceedings of the HDI 2006 2. GI-Fachtagung "Hochschuldidaktik  der Informatik", München, Forbrig, P., Siegel , G. und Schneider, M. (Hrsg.), LNI, Vol. P100, 63-75.  Krämer, S. (2007): Chemie, die begeistert. http://www.partner-fuer-schule.nrw.de/wirwollen  /download/f1_jundykraemer.pdf, (25.3.2008).  Krampen, G. (1993): Diagnostik der Kreativität. In: Tests und Trends 10: Jahrbuch der pädagogischen Diagnostik, Trost, I., Jäger (Hrs g.), Beltz, Weinheim, Basel, 11-34.  Küveler, G. und Schwoch, D. (2006): Informat ik für Ingenieure und Naturwissenschaftler.  Vieweg+Teubner.  Kynigos, C. (1995): Programming as a means of expressing and exploring ideas: Three case  studies situated in a directive educational sy stem. In A. diSessa, C. Hoyles and R. Noss  (eds.), Computers and Exploratory Learning, Springer Verlag NATO ASI Series, Berlin,  399-420.  Lakhani, K. und Wolf, R. (2005): Why Hackers Do What They Do: Understanding Motivation  Effort in Free/Open Source Software Project s. In: Perspectives on Free and Open Source  Software, Feller, J., Fitzgerald, B., et al. (Hrsg.), MIT Press, 3-22.  Lammers, S. (1986): Programmers at work: interviews. Microsoft, Redmond, Wash.  Lawrence, R. (2004): Teaching data structures using competitive games. IEEE Transactions on  Education, 47 (4), 459466.  Leach, R. J. und Ayers, C. A. (2005): The Psychology of Invention in Computer Science. In:  Proceedings of the 17th Annual Workshop of the PPIG, University of Sussex, Brighton UK.  Lefrancois, G. R. und Leppmann, P. K. (1994): Ps ychologie des Lernens. Springer, Berlin [u.a.].  Leon, A. (1997): Being ‘Creative’  in Software Development.   http://www.alexisleon.com/art/1997/08/06/crea tivity-in-software.html, (19.04.2008).  Lepper, M., Greene, D. und Nisbett, R. (1973): Undermining children's intrinsic interest with  extrinsic rewards: A test over the "overjustifi cation" hypothesis. Journal of Personality and  Social Psychology, 28, 129-137.  Lepper, M. R., Corpus, J. H. und Iyengar, S. S. (2005): Intrinsic and Extrinsic Motivational  Orientations in the Classroom: Age Differences and Academic Correlates. Journal of Edu-cational Psychology, 97 (2), 184-196.  Lewandowski, G., Johnson, E. und Goldweber, M. (2005): Fostering a Creative Interest in Computer Science. In: Proceedings of  the SIGCSE '05, St. Louis, MO.  Literaturverzeichnis 145  Lewis, T., Petrina, S. und Hile, A. M. (1998): Problem Posing-Adding a Creative Increment to  Technological Problem Solving. Journal of I ndustrial Teacher Education, 36 (1), 5-35.  Ligon, B. (1996): Connecting chords with linear harmony. Hal Leonard Publishing Corporation.  Lippman, S. B. (2006): Ist Programmieren ei ne Kunst? http://msdn2.microsoft.com/dede/library/bb979378.aspx, (28.04.2008).  Littler, J. (2005): Art and Computer Programming.   http://www.onlamp.com/pub/a/onlamp/2005/06/30/artofprog.html, (28.04.2008).  LOG IN (1995): Themenheft Computer, Kreativitä t und Ästhetik. In: LOG IN 15 (4), LOG IN  Verlag Berlin.  Long, J. (2007): Just For Fun: Using Programming Games in Software Programming Training and  Education A Field Study of IBM Robocode Community. Journal of Information Tech-nology Education, 6, 279-290.  Lubart, T. I. (2000): Models of the creative pr ocess: Past, present and future. Creativity Research  Journal, 13 (3-4), 295-308.  Luthiger Stoll, B. (2006): Spass und Software -Entwicklung: Zur Motivation von Open-SourceProgrammierern. Dissertation. Universität Zürich, Zürich.  Maaß, S. und Wiesner, H. (2006): Programmieren , Mathe und ein bisschen Hardware... Wen lockt  dies Bild der Informatik? Informatik-Spektrum, 29 (2), 125-132.  Maass, S. und Wiesner, H. (2006): Programmieren , Mathe und ein bisschen Hardware... Wen lockt  dies Bild der Informatik? Informatik-Spektrum, 29 (2), 125-132.  Mackin, J. (1996): A creative approach to physi cs teaching. Physics Education, 31 (4), 199-202.  Maeda, J. (2004): Creative code. Thames & Hudson London, New York.  Maloney, B., Kafai, Rusk, Silverman, Resnick (2004): Scratch: A Sneak Preview. IEEE Computer  Society, 104 109.  Mamone, S. (1992): Empirical Study of Motivati on in an Entry Level Programming Course. ACM  SIGPLAN Notices, 27 (3), 54-60.  Manetas, M. (2003): Jackson Pollock.org. h ttp://www.jacksonpollock.org/, (27.05.2008).  Margolis, J., Fisher, A. und Miller, F. (2000): Th e Anatomy of Interest: Women in Undergraduate  Computer Science. Women's Studies Quarterly, 28, 104-127. 146  Literaturverzeichnis    Markoff, J. (2005): What the Dormouse Said: Ho w the 60s Counterculture Shaped the Personal  Computer. Viking Adult.  MAXQDA (2008): MAXQDA. The Ar t of Text Analysis.   http://www.maxqda.de/produkte/maxqda, (17.06.2008).  Mayring, P. (2007): Qualitative Inhalt sanalyse. Beltz, Weinheim & Basel.  MBJS Brandenburg (2006): Rahmenlehrplan Inform atik für den Unterricht in der gymnasialen  Oberstufe im Land Brandenburg. Verlag Wissenschaft und Technik Berlin, Berlin.  McIlree, R. (2007): Yet Another "Creativity" Rant Emerges.   http://enterprisearchitect.typepad.com/ea/2007/ 01/yet_another_cre.html, (25.04.2008).  Meisalo, V., Sutinen, E. und Tarhio, J. (1997): CL AP: teaching data structures in a creative way.  In: Proceedings of the Proceedings of the 2nd conference on Integra ting technology into  computer science education, Uppsala, Sweden, 117-119.  Melymuka, K. (1998): Why musicians may make the best tech workers.    http://www.cnn.com/TECH/computing/9807/31/musicians.idg/, (19.04.2008).  Mitchell, W. J., Inouye, A. S., Blumenthal, M. S., (U.S.), N. R. C. und Creativity, C. o. I. T. a.  (2003): Beyond productivity: information technol ogy, innovation, and creativity. National  Academies Press, Washington, DC.  Mittermeir, R. (2000): Informatik-Unterricht: Bast el-Unterricht, eine intellektuelle Herausforderung oder "Preparation for the information-age". Medienimpulse, 9/33, 4-11.  Modrow, E. (2002): Pragmatischer Konstruktiv ismus und fundamentale Ideen als Leitlinien der  Curriculumentwicklung am Beispiel der theo retischen und technischen Informatik. Martin-Luther-Universitat Halle-Wittenberg.  Moravcsik, M. J. (1974): Scientists and Artis ts: Motivations, Aspirations, Approaches and Accomplishments. Leonardo, 7 (3), 255.  Moravcsik, M. J. (1981): Creativity in Scien ce Education. Science Education, 65 (2), 221-27.  Mumford, M. D. (2003): Where have we been, where are we going? Taking stock in creativity  research. Creativity Research Journal, 15 (2-3), 107-120.  Noble, J. und Biddle, R. (2002): Notes on Postmodern Programming. In: Proceedings of the ACM  conference on Object-Oriented Programming, Systems, Languages and Applications (OOPSLA), 49-71.  Orloff, M. A. (2006): Grundlagen der klassischen TRIZ : ein praktisches Lehrbuch des erfinderischen Denkens für Ingenieure . Springer, Berlin [u.a.].  Literaturverzeichnis 147  Osborn, A. F. (1953): Applied im agination. Scribner, New York.  Oxford (2007): Compact Oxford  English Dictionary. http://www.askoxford.com, (14.12. 2007).  Papert, S. (1993): The children's machine: rethi nking school in the age of the computer. BasicBooks, New York.  Papert, S. (2000): What's the big idea? Toward a pedagogy of idea power. IBM Systems Journal,  39 (3), 720-729.  Papert, S. und Harel, I. (1991): Situating Cons tructionism. In: Constructionism, Papert, S. und  Harel, I. (Hrsg.), Ablex Publishing, Norwood, N.J.  Paul, C. (2003): Digital art. Thames & Hudson New York.  Peppler, K. A. und Kafai, Y. B. (2005): Crea tive Coding: Programming for Personal Expression.  Polya, G. (1945): How to Solve It. Princeton University Press, Princeton.  Pomberger, G. und Dobler, H. (2008): Algor ithmen und Datenstrukturen. Pearson Studium,  München.  Prätorius, P. (2004): Virtuelle Ameisenwelt Di gitale Ameisen und Term iten als Modelle künstlichen Lebens in JAVA (Teil 2). LOG IN,  (131/132), 81-89.  Prensky, M. (2001): Digital natives, digital immigrants. On the Horizon, 9 (5), 1-6.  Racter (1984): The Policeman's Beard Is Half Constructed. Warner Software/Warner Books.  Rechenberg, P. (2000): Was ist Informatik? Eine  allgemeinverständliche Einführung. Hanser,  München.  Reed, D. (2002): The use of ill-defined problems  for developing problem-solving and empirical  skills in CS1. J. Comput. Sm all Coll., 18 (1), 121-133.  Resnick, M. (2002): Rethinking Learning in the Digital Age. In: The Global Information Technology Report: Readiness for the Networked World, Kirkman, G. (Hrsg.), Oxford University  Press, Oxford, 32-37.  Resnick, M. (2007a): All I really need to know (about creative thinking) I learned (by studying  how children learn) in kindergarten. In: Proceedings of the 6th ACM SIGCHI conference on Creativity & cognition, ACM Press, Washington, DC, USA, 1-6.  Resnick, M. (2007b): Sowing the Seeds for a Mo re Creative Society. In: Proceedings of the  Learning & Leading with Technology, International Society for Technology in Education (ISTE). 148  Literaturverzeichnis    Resnick, M. und Rusk, N. (1996): The Computer Clubhouse: Preparing for life in a digital world.  IBM Systems Journal, 35, 431 439.  Rhodes, M. (1961): An analysis of creativity. Phi Delta Kappan, 42 (7), 305-310.  Rich, L., Perry, H. und Guzdial, M. (2004): A CS1 course designed to address interests of women.  In: Proceedings of the 35th SIGCSE technical symposium on Computer science education, ACM Press, Norfolk, Virginia, USA, 190-194.  Roberts, E. S., Kassianidou, M. und Irani, L. (2002): Encouraging Women in Computer Science.  SIGCSE Bulletin., 34, 84-88.  Romeike, R. (2006): Creative Students What Can We Learn From Them for Teaching Computer  Science? In: Proceedings of the 6th Baltic Sea Conference on Computing Education Research, Koli Calling, Berglund, A. und Wiggberg, M. (Hrsg.), Uppsala University, Uppsala, Sweden.  Romeike, R. (2007a): Animationen und Spiele gest alten. Ein kreativer Einstieg in die Programmierung. LOG IN, 146/147, 36-44.  Romeike, R. (2007b): Kriterien kreativen Informat ikunterrichts. In: Proceedings of the 12. GIFachtagung "Informatik und Schule INFOS 2007", Siegen, Germany, Schubert, S.  (Hrsg.), Köllen, Vol. LNI 112.  Romeike, R. (2007c): Three Drivers for Creativity  in Computer Science Education,. In: Proceedings of the IFIP-Conference on "Informatics,  Mathematics and ICT: a golden triangle",  Boston, USA.  Romeike, R. (2008a): Applying Creativity in CS High School Education Criteria, Teaching  Example and Evaluation. In: Proceedings of the 7th Baltic Sea Conference on Computing  Education Research ( Koli Calling 2007), Koli National Park, Finnla nd, Lister, R. und  Simon (Hrsg.), Conferences in Research and Practice in Information Technology, Vol. 88.  Romeike, R. (2008b): Bildungsstandards kreativ erreichen ein Unterrichtskonzept für die Sekundarstufe I. In: Didaktik der Informatik Aktuelle Forschungsergebnisse. Didaktik der Informatik Aktuelle Forschungsergebnisse. 5. Workshop der GI-Fachgruppe "Didaktik der  Informatik", Erlangen, Brinda, T., Fothe, M.  und Hubwieser, P. (Hrsg.), Köllen (Lecture  Notes in Informatics (LNI) Bd. LNI-P, Nr. 135), Bonn.  Romeike, R. (2008c): The Contribution of Computer Science Education in a Creative Society. In:  Proceedings of the IFIP World Computer Congress WCC2008 "TC3 Stream Learning to  live in the Knowledge Society", Milan, Italien.  Romeike, R. (2008d): Sichtweisen einer kreativen  Informatik. In: Didaktik der Informatik  Aktuelle Forschungsergebnisse. Didaktik der Informatik Aktuelle Forschungsergebnisse.  5. Workshop der GI-Fachgruppe "Didaktik der Informatik", Erlangen, Brinda, T., Fothe,  M. und Hubwieser, P. (Hrsg.), Köllen (Lectur e Notes in Informatics (LNI) Bd. LNI-P, Nr.  135), Bonn.  Literaturverzeichnis 149  Romeike, R. (2008e): Student Teachers' Beliefs about Creativity in Computer Science. In: Proceedings of the IFIP WG 3.1, 3.2 & 3.6 Join t Conference "ICT and Learning for Youths",  Kuala Lumpur, Malaysia.  Romeike, R. (2008f): Where's my Challenge? The Forgotten Part of Problem Solving in Computer  Science Education. In: Proceedings of the 3r d ISSEP Intern. Conf. on Informatics in Secondary Schools Evolution and perspectives, Torun, Polen 2008.  Romeike, R. und Schwill, A. (2006): "Das Studium könnte zu schwierig für mich sein" Zwischenergebnisse einer Langzeitbefragung zur Studi enwahl Informatik. In: Proceedings of  the HDI 2006: Hochschuldidaktik der Informa tik, München, Forbig, P., Siegel, G. und  Schneider, M. (Hrsg.), Lecture Notes in Informatics, Vol. P-100, 37-49.  Ruete, E. S. (1990): Response to J. Grudin: Th e Case against user interface Consistency. ACM  Forum: Letter to the editor. Communications of the ACM, 33 (8), 15-16.  Runco, M. A. (2007): Creativity: Theories and Themes; Research, Development, and Practice.  Elsevier, Amsterdam.  Ruscio, J. und Amabile, T. M. (1996): How does creativity happen? In: Talent Development,  Colangelo, N. und Assouline, S. G. (Hrsg. ) 3, Ohio Psychology Press, Dayton, OH.  Saunders, D. und Thagard, P. (2005): Creativity in Computer Science. In: Creativity across  domains: Faces of the muse, Kaufman, J. C. und Baer, J. (Hrsg.), Lawrence Erlbaum Associates, Mahwah, NJ.  Schell, B. und Martin, C. (2006): Webster's New World Hacker Dictionary (Webster's New  World).  Scheuer, W. (2003): Komponieren im Musikunterricht.   http://www.musiceducation.de/html/komponieren.html, (22.04.2008).  Schmidkunz, H., Lindemann, H. und Schmidkunz, L.  (1976): Das forschend-entwickelnde Unterrichtsverfahren : Problemlösen im naturwissen schaftlichen Unterricht. List, München.  Schubert, S. und Schwill, A. (2004): Didaktik der Informatik. Spektrum Akad. Verl, Heidelberg  [u.a.].  Schulte, C. (2001): Vom Modellieren zum Gestal ten–Objektorientierung als Impuls für einen  neuen Informatikunterricht? informatica didactica, 3.  Schulte, C. (2003): Lehr-Lernprozesse im Informatik -Anfangsunterricht: theoriegeleitete Entwicklung und Evaluation eines Unterrichtskonzepts zur Objektorientierung in der Sekundarstufe II.  Schulte, C. und Knobelsdorf, M. (2007): Attitu des towards Computer Science Computing  Experiences as a Starting Point and Barrier to Computer Science. In: Proceedings of the 3 rd International Computing Education R esearch Workshop, New York, USA, 27-38. 150  Literaturverzeichnis    Schwill, A. (1993): Fundamentale Ideen der Informa tik. Zentralblatt für Dida ktik der Mathematik,  25 (1), 20-31.  Scragg, G., Baldwin, D. und Koomen, H. (1994): Computer science needs an insight-based  curriculum. In: Proceedings of the twenty -fifth SIGCSE symposium on Computer science  education, ACM Press, Phoenix, Arizona, United States, 150-154.  Shasha, D. E. und Lazere, C. A. (1998): Out of Their Minds: The Lives and Discoveries of 15  Great Computer Scientists. Springer, Berlin.  Shneiderman, B. (2000): Creating Creativity: User Interfaces for Supporting Innovation. ACM  Transactions on Computer-Human Interaction, 7 (1), 114–138.  Shneiderman, B. (2002): Creativity support tools. Commun. ACM, 45 (10), 116-120.  Shneiderman, B. (2007): Creativity support tool s: accelerating discovery and innovation. Commun. ACM, 50 (12), 20-32.  Shneiderman, B., Fischer, G., Czerwinski, M., Myers, B. und Resnick, M. (2005): Creativity  Support Tools. Workshop Report on Creativity  Support Tools. National Science Foundation, Washington, DC.  Smith, D. K., Paradice, D. B. und Smith, S. M.  (2000): Prepare Your Mind for Creativity. Communications of the ACM, 43 (7), 110-116.  Spitzer, M. (2008): Unbewusste Kreativität. Vide o aus der BR-alpha-Reihe Geist und Gehirn.  http://www.br-online.de/cgibin/ravi?verzeichnis=alpha/geistundgehirn/v /&file=spitzer_83.rm&g2=1, (1.06.2008).  Starko, A. J. (2001): Creativity in the classroom : schools of curious delight. Erlbaum, Mahwah,  NJ [u.a.].  Sternberg, R. J. (2003): Creative Thinking in the Classroom. Scandinavian Journal of Educational  Research, 47 (3), 325-338.  Sternberg, R. J. (2004): Creativity : from potential to realization. American Psychological Assoc.,  Washington, DC.  Sternberg, R. J. und Lubart, T. I. (1991): Crea ting Creative Minds. Phi Delta Kappan, 72 (8), 608614.  Sternberg, R. J., Pretz, J. E. und Kaufman, J. C. (2002): The Creativity Conundrum: A Propulsion  Model of Kinds of Creative Contributions. Psychology Press, New York.  Sternberg, R. J. und Williams, W. M. (1996): How to Develop Student Creativity. ASCD, Alexandria, VA.  Literaturverzeichnis 151  Stribling, J., Krohn, M. und Aguayo, D. (2005): SCIgen An Automatic CS Paper Generator.  http://pdos.csail.mit.edu/scigen/, (22.05.2008).  Sutinen, E. und Tarhio, J. (2001): Teaching to identi fy problems in a creative way. In: Proceedings  of the 31st Frontiers in Education Conference, IEEE Computer Society, Vol. 1.  Sweeney, R. B. (2003): Creativity in the Information Technology Curriculum Proposal. In:  Proceedings of the 4th conference on Informa tion technology curriculum, Lafayette, Indiana, USA, 139-141.  Tharp, A. L. (1981): Getting more oomph from programming exercises. SIGCSE Bull., 13 (1), 9195.  Thomas, M. (2002): Informatische Modellbild ung: Modellieren von Modellen als zentrales  Element der Informatik für den allgemeinbild enden Schulunterricht. Universität Potsdam,  Potsdam.  Thomas, M. (2005): Geschichten aus der Gesch ichte der Informatik. LOG IN, 136/137, 41-46.  Torrance, E. P. (1974): Torrance Test of Creativ e Thinking. Scholastic Testing service, Bensenville, IL.  Treffinger, D. J. (1980): Encouraging creative lear ning for the gifted and talented. Ventura County  Schools/LTI, Ventura, CA.  Trogemann, G. (2001): Computer und Kreativität. In : Proceedings of the „Mensch und Computer",  Stuttgart, Oberquelle, H., Oppermann, R. und Krause, J. (Hrsg.), Teubner.  Trogemann, G. und Viehoff, J. (2005): Code@ Art,  Eine elementare Einführung in die Programmierung als künstlerische Praktik. Springer-Verlag, Wien, New York.  Turner, G., Weakley, A., Zhang, Y. und Edmonds , E. (2005): Attuning: A Social and Technical  Study of Artist–Programmer Collabora tions. 106 119. Sussex University.  Ursyn, A. und Scott, T. (2007): Web with art and computer science. In: "ACM SIGGRAPH 2007  educators program". ACM, San Diego, California.  Ursyn, A. und Sung, R. (2007): Learning science with art. In: "ACM SIGGRAPH 2007 educators  program". ACM, San Diego, California.  Van Dyke, C. (1987): Taking “computer literacy” literally. Communications of the ACM, 30 (5),  366-374.  VanLangen, P. H. G., Wijngaards, N. J. E. und Brazier, F. M. T. (2004): Towards Designing  Creative Artificial Systems. 152  Literaturverzeichnis    VDE (2003): VDE Studie "Young Professionals". VDE Verband der Elektrotechnik Elektronik  Informationstechnik e.V., Frankfurt am Main.  Vollrath, H.-J. (1987): Begriffsbildung als schöpf erisches Tun im Mathematikunterricht. Zentralblatt für Didaktik der Mathematik, 123-127.  Wallas, G. (1926): The Art of Thought. Harcourt Brace, New York.  Wands, B. (2002): Digital Creativity: Techniques fo r Digital Media and the Internet. Wiley, New  York.  Westby, E. L. und Dawson, V. L. (1995): Creativity : Asset or Burden in the Classroom? Creativity  Research Journal, 8 (1), 1-10.  Weth, T. (1999): Kreativität im Mathematikunte rricht: Begriffsbildung als kreatives Tun. Franzbecker, Hildesheim [u.a.].  Weth, T. (2001): Kreative Produkte. Kreativität, mathematik lehren, 106, 42-45.  Wheeler, D. A. (2008): The most important software innovations.   http://www.dwheeler.com/innovation/innovation.html, (15.04.2008).  Wheeler, S., Waite, S. J. und Bromfield, C. (2002): Promoting creative thinking through the use of  ICT. Journal of Computer Assisted Learning, 18 (3), 367-378.  Wikipedia (2008): Digitale Kunst. http://de.wiki pedia.org/wiki/Digitale_Kunst, (30.05.2008).  Willms, J., Wentzlaff, I. und Specker, M. (2000) : Kreativität in der Informatik: Anwendungsbeispiele der innovativen Prinzipien aus TRIZ. In : Proceedings of the Informatik 2000, Neue  Horizonte im neuen Jahrhundert, 30. Jahresta gung der Gesellschaft für Informatik, Berlin,  Mehldorn, K. und G.Snelting (Hrsg.), Springer-Verlag.  Winter, H. (1999): Gestalt und Zahl Perspektiven  eines kreativen Mathematikunterrichts in der  Schule. In: Proceedings of the Kreatives Denken und Innovationen in  mathematischen  Wissenschaften Jena, Zimmermann, B., David, G ., et al. (Hrsg.), Univ. Jena, Vol. 99/29,  213–225.  Wordsmyth (2007): Wordsmyth Educational Dictionary-Thesaurus. http://www.wordsmyth.net/,  (14 Dec 2007).  Zimbardo, P. G. und Gerrig, R. J. (2004): Psychologie. Pearson Studium, München.      Abbildungsverzeichnis 153  Abbildungsverzeichnis    Abbildung 1: Aufgabenbeispiele aus dem TTC T (Version kreatives Denken mit Worten) ............. 8   Abbildung 2: Modelle des kreativ en Prozesses im Vergleich........................................................... 9   Abbildung 3: Amabiles Componential Model of Creativity ........................................................... 10   Abbildung 4: Flow als optimale Balance zwischen Anforderungen und Fähigkeiten .................... 14   Abbildung 5: 25 ways to develop creativity.................................................................................... 1 7  Abbildung 6: Beispiel für die Kr eativitätsroutine „Modifizieren“.................................................. 20   Abbildung 7: Beispiel: Erfinde n mathematischer Begriffe ............................................................. 21   Abbildung 8: Phasen de r Problembausteine.................................................................................... 23   Abbildung 9: Ausschnitte einer Online-Forumsdi skussion zur Kreativität in der Informatik ........ 27   Abbildung 10: Image des Ingenieurberufs ...................................................................................... 27   Abbildung 11: (Fehl-)Vorstellung v on Kreativität in der Informatik.............................................. 28   Abbildung 12: Aussagen kreativer Persönlic hkeiten zu ausschlaggebenden Faktoren ihrer   Entwicklung ............................................................................................................ 29   Abbildung 13: Blackbox-Modell des musikalischen Designprozesses........................................... 30   Abbildung 14: Modell des kreativen Softwaredesignprozesses ...................................................... 32   Abbildung 15: Informatik als Dars tellung anhand ihre r Innovationen............................................ 34   Abbildung 16: Knuth: The Art of Computer Programming ............................................................ 36   Abbildung 17: Kunstwerke  aus der DEMO-Szene.......................................................................... 39   Abbildung 18: „Listen“ (Hopkins) ............................................................................................... ... 40  Abbildung 19: Interaktive Kunst nach Pollock ............................................................................... 41   Abbildung 20: Ausprägungen Digita ler Kunst laut Wikipedia ....................................................... 41   Abbildung 21: Visualisierung der Klasse „Cow“............................................................................ 42   Abbildung 22: Vier Aktivitäten und Aufg aben im Kreativitäts-Framework................................... 43   Abbildung 23: Einschätzung eige ner Kreativität von Schülern ...................................................... 48   Abbildung 24: Creative thinking spiral ......................................................................................... .. 53  Abbildung 25: Challenge-Cycle.................................................................................................. .... 58   Abbildung 26: Modell der Einf lussfaktoren von Kreativität........................................................... 61   Abbildung 27: Relevante Kreativitätspers pektiven aus Sicht der Informatik ................................. 62   Abbildung 28: Faktorenmodell eines kreativen Informatikunterrichts ........................................... 63   Abbildung 29: Implikationen für die Gestaltung kreativen Unterrichts.......................................... 65   Abbildung 30: Hauptkategorien de r Strukturdimensionen und häuf ige identifizierte Codes ......... 68   Abbildung 31: Lernziele der Unterrichtssequenz............................................................................ 86   Abbildung 32: Zustimmungsänderung im Verg leich zur vorherigen Unterrichtssequenz.............. 90   Abbildung 33: Einschätzung der Unterrichtsmethodik durch die Schüler ...................................... 92   Abbildung 34: Zustimmung im Vergleich zur Kontrollgruppe....................................................... 93   Abbildung 35: Brainstorming zu Kreativitä t und Informatik (Schülerbeispiel).............................. 95   Abbildung 36: Häufige Schülerantworten des Br ainstormings zu Kreativität und Informatik ....... 96    