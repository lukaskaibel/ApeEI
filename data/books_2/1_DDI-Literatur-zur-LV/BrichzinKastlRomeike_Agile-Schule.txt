 1 Agile Methoden in Theorie und Praxis 1876.2 Agile Schule über den Informatikunterricht hinaus  193 Glossar 201Einleitung Schule entwickelt sich weiter1 Schule entwickelt sich weiter9Schule prägt einen der wichtigsten Lebensabschnitte der Menschen. Von der Grundschule bis zum Abitur sammeln Schülerinnen und Schüler wichtige Er -fahrungen, die sie für den Rest ihres Lebens prägen. Damit geht es in der Schule um mehr als nur um die Vermittlung von Wissen. Neben fachbezogenen Inhal-ten kommt auch allgemeinen Kompetenzen eine zunehmend größere Bedeutung zu, wie sich auch in Bildungsstandards und kompetenzorientierten Lehrplänen zeigt. Dazu gehören beispielsweise die Fähigkeiten, effektiv zu kommunizieren und zu kooperieren sowie Lern- und Problemlösestrategien zielgerichtet ein -zusetzen.Projektunterricht als wichtige UnterrichtsmethodeProjektunterricht gilt als besonders dazu geeignet, das selbstgesteuerte, selbst-organisierte und kooperative Lernen der Schülerinnen und Schüler zu fördern. Hierbei wird typischerweise in für die Lernenden relevanten Kontexten die An-wendung fachbezogener und verschiedener allgemeiner Kompetenzen geför -dert, bspw. Teamarbeit und die Planung selbstorganisierter Unterrichtsphasen. Im Informatikunterricht haben Projekte darüber hinaus eine besondere Be -deutung, da sie hier nicht nur als Unterrichtsmethode fungieren, sondern zu -gleich auch einen Einblick in die meist in Projekten organisierte Berufsrealität der Softwareentwicklung ermöglichen. Der klassische Projektunterricht ist in der Regel klar sequenziell strukturiert. Zunächst wird ein umfangreicher Plan aufgestellt, dann wird er realisiert. In der Praxis haben sich allerdings in den letzten 15 Jahren rasch agile Methoden, verbreitet, und zwar in kleinen wie großen Softwareunternehmen. Oft sind agile Teams besonders motiviert, sie arbeiten fokussiert, pflegen einen wertschätzen-den Umgang unter den Mitgliedern und sehen Fehler als eine wichtige Möglich -keit, etwas zu lernen. Sie bestimmen ihren Weg zum Ziel selbst, reflektieren die -sen regelmäßig und begreifen Veränderung als Chance. Die meisten Teams und Kunden, die einmal agile Luft geschnuppert haben, wollen nicht mehr zurück, weil sie nun flexibel auf Anforderungsänderungen und andere sich im Prozess ergebende Herausforderungen reagieren können. So verändern agiles Denken und Handeln die Unternehmenskultur, da mit ihnen eine Reihe zentraler Werte, wie offene Kommunikation auf Augenhöhe und Selbstverantwortung im Team, verbunden sind.Betrachtet man als Lehrkraft die agilen Methoden etwas genauer, offen -bart sich ihr didaktisch-pädagogisches Potenzial für die Unterrichtsgestaltung schnell: Die Praktiken und Techniken fördern und fordern Kommunikation im Team, unterstützen die Strukturierung der inhaltlichen Arbeit in gut bearbeit-Einleitung 10bare Teilziele und erleichtern die Mitgestaltung des Lernprozesses durch die Schülerinnen und Schüler. Kurze Zyklen sorgen schnell für erste Erlebnisse, die motivieren, regen aber auch zum Innehalten und Nachdenken über das Produkt und die Zusammenarbeit an: Was haben wir bis jetzt erreicht? Sind wir damit auf dem richtigen Weg? Was sind unsere nächsten Schritte? Was lief gut? Was wollen wir im nächsten Zyklus besser machen? Hierdurch wird Lernen auch zu einem wichtigen Prozessbestandteil.Unser ErfahrungshorizontIn unserem Buch «Agile Schule» greifen wir das Potenzial der Agilen Werte, Praktiken und Techniken auf und machen sie für die Schule nutzbar. Das tun wir weder, weil es gerade angesagt ist, noch, um ein Agiles Coaching zu ver -kaufen oder die nächste Zertifizierung zu bewerben. Uns geht es darum, eine Begeisterung weiterzugeben, die uns selbst in unserer Arbeit mit agilen Me -thoden gepackt hat. Wir wollen zeigen, welchen Wert agile Methoden für den Unterricht haben können, denn mit unserer Begeisterung sind wir nicht allein. Das Buch basiert auf Erfahrungen und der langjährigen Begleitforschung zum Einsatz agiler Projekte in unterschiedlichen Schulen in ganz Deutschland. Mit den beteiligten Lehrkräften haben wir uns mehrmals im Jahr getroffen, um gemeinsam die Methoden weiterzuentwickeln und für die Schule hinsichtlich ihres didaktischen Mehrwerts anzupassen. Die so entstandene Agile Schule ist keine Blaupause, die als festgelegtes Projektmodell im Unterricht Schritt für Schritt befolgt werden muss. Vielmehr stellt sie einen Rahmen an Möglichkei-ten dar, verschiedene Praktiken und Techniken den Unterrichtsanforderungen entsprechend zu verwenden und anzupassen. Der erste eigene Versuch ist sel-ten perfekt und selbst wenn, so wird im Laufe der Jahre immer auch mal eine Schülergruppe ihr Ziel nicht erreichen. Wichtig ist es, sich in regelmäßigen Ab -ständen die Frage zu stellen, was warum gut oder ungünstig verlaufen ist, und entsprechende Anpassungen vorzunehmen. Auch wenn es sich bei den meisten Beispielen um Erfahrungen aus dem Informatikunterricht handelt, beschränkt sich die Agile Schule nicht darauf. Es zeigt sich zunehmend, dass die Agile Schule auch in anderen Fächern oder Kontexten eine Bereicherung darstellen kann.Zum Aufbau des BuchsIm auf die Einleitung folgenden Kapitel 2 stellen wir die wesentlichen Hinter -gründe agiler Methoden dar und geben einen Einblick, wie unterschiedlich der Weg zum Einsatz agiler Methoden in Unternehmen gestaltet werden kann. Die Schule entwickelt sich weiter11in diesem Kapitel präsentierten Agilen Werte werden in den folgenden Kapiteln immer wieder aufgegriffen. In Kapitel 3 wird ein Best-Practice-Beispiel vorgestellt, welches kompakt die Kernideen agiler Projekte illustriert. Im Folgenden berichten Lehrkräfte von ihren Motivationen und Umsetzungen agiler Projekte in unterschiedlichen Kontexten. Die Berichte zeigen, wie flexibel sich die Methoden, Techniken und Praktiken an die individuelle Unterrichtsgestaltung anpassen und neben fach-lichen auch pädagogische Ziele umsetzen lassen. Kapitel 4 enthält einen Methodenkoffer mit acht grundlegenden Praktiken und Techniken, ihrer theoretischen Fundierung, Varianten der schulischen Um -setzung, Stolpersteinen sowie Tipps und Tricks. Diese acht Methoden sind ein guter Einstieg in erste agile Projekte. Kapitel 5 umfasst weitere acht Praktiken und Techniken. Sie dienen der me -thodischen Vertiefung. In Kapitel 6 reflektieren wir die gewonnenen Erfahrungen aus wissenschaft -licher Sicht und skizzieren Möglichkeiten für den Einsatz agiler Methoden au-ßerhalb des Informatikunterrichts.Die Pfeile im Fließtext verweisen auf Methodenbausteine (bei ihrer Erstnen-nung), die weiterführende Informationen beinhalten. Das Glossar erklärt Begrif -fe aus der agilen Welt, die im didaktischen Kontext nur am Rande vorkommen. Weiter beschreibt es die wichtigsten Methoden.Zum Einsatz dieses BuchsSie können dieses Buch zusammenhängend von vorn nach hinten lesen, aber auch als Nachschlagewerk für Agile Werte, Praktiken und Techniken in der Schu -le nutzen. Wenn Sie sich vor allem für konkrete Umsetzungsbeispiele interes -sieren, können Sie direkt mit den Praxisberichten in Kapitel 3 einsteigen. Sie beginnen alle mit einem Überblick über den Kontext, die Zielrichtung und den zeitlichen Ablauf des Unterrichtsprojekts. Sollten Sie nicht Informatik unter -richten, mag für Sie Kapitel 6.2 ein guter Start sein, da dort Unterrichtsbeispiele außerhalb der Informatik vorgestellt werden. Sie können Ihre Aufmerksamkeit auch erst den Agilen Werten widmen, da sie die Basis agilen Handelns und Denkens sind, und dann direkt zu den Methodenbausteinen springen. Den Bau -stein ↑ Iterationen – der agile Prozess empfehlen wir Ihnen, wenn Sie zunächst einen Überblick gewinnen möchten. Seien Sie sich beim Lesen aber bewusst, dass der agile Prozess nur als Ausgangspunkt für Ihren eigenen, auf den indi -viduellen Kontext zugeschnittenen Prozess dienen soll. Es geht weniger um die perfekte Umsetzung des agilen Prozesses und der damit verbundenen Techniken Einleitung 12und Praktiken als um die Schülerinnen und Schüler, die sich selbst organisieren, effektiv kollaborativ arbeiten und dabei wichtige projektbezogene Kompetenzen erwerben; die Lernenden stehen im Zentrum.DankEin Buch wie «Agile Schule» kann nicht ohne die Mitarbeit und Unterstützung zahlreicher Kolleginnen und Kollegen entstehen. Wir danken insbesondere den Lehrerinnen und Lehrern, die durch ihre Erfahrungen und Beobachtungen die Grundlage für die Praxisberichte geschaffen haben: Andreas, Lennard, Leo und Uli. Des Weiteren danken wir den Teilnehmerinnen und Teilnehmern der Work -shops, die an den Grundlagen für die Methodenkoffer mitgearbeitet haben: Andreas, Christian, Conny, Dorothea, Julia, Lennard, Leo, Mareen, Matthias, Melanie, Mike, Sebastian, Thomas, Timo, Tobias und Uli. Darüber hinaus danken wir der Sybit GmbH, insbesondere Johannes, Tho -mas, Fritz und Stephan, die uns auf der «Agile Bodensee» einen Einblick in die agile Welt der Profis und die Realisation unseres Workshops in Radolfszell er -möglicht haben. Unser Dank gilt außerdem Gerald von der Lenovate GmbH für die engagierte Bereicherung unseres Workshops in Kloster Zinna, insbesondere für das Spiel «Kekse backen» und die markanten Sprüche zu Agilen Werten. Weiterhin ge -bührt unser Dank Bernd (stellvertretend für die ganze QAware GmbH), der ei-nem der Autoren für ein Jahr die Mitarbeit im Unternehmen ermöglicht und ihm damit zu einem vertieften Einblick in die agilen Praktiken, Techniken und Werte von Profis verholfen hat. Im Rahmen der Königsteiner fachdidaktischen Gespräche haben viele Kol -leginnen und Kollegen mit uns an den Methodenbausteinen weitergearbeitet; auch ihnen gebührt unser Dank. Schließlich bedanken wir uns bei der Google-CS4HS-Initiative für die finan -zielle Beteiligung an den Workshops sowie an den Druckkosten dieses Buches.HintergrundAgile Kultur in Unternehmen und Schulen2 Kommunikation Einfachheit Feedback Selbst- Transparenz organisation  Mut Commitment  (Zusage) RespektZielstrebigkeit/FokussierungAgile WerteAgile Methoden einzusetzen bedeutet auch zu verstehen, wo sie herkom­men, welche Werte mit ihnen verbunden sind und wie diese in der Praxis zum Tragen kommen. In diesem Kapitel werden zunächst die wich­tigsten Entwicklungsschritte und Vorgehensmodelle agiler Methoden beschrieben. Anschließend werden Agile Werte als ideelles Fundament und ihre Bedeutung für Unterrichtsprojekte dargestellt. Unterschiedli­che Beweggründe und Erfahrungen bei der Einführung agiler Methoden werden schließlich durch Schilderungen aus der Praxis dreier Unter­nehmen skizziert.Geschichte und Entwicklung152.1 Geschichte und EntwicklungSoftwareentwicklung wird TeamarbeitAllein entwickelte Software ist typischerweise nicht sehr komplex, wird von wenigen genutzt oder hat eine kurze Lebenszeit. Anders ist es mit großen Soft-waresystemen: Sie werden von vielen für viele geschrieben und meist über Jahr -zehnte genutzt und weiterentwickelt. Die Entwicklung solcher Softwaresysteme begann Mitte des letzten Jahrhun -derts mit Steuerelementen für Raumfahrt und militärische Streitkräfte. An -fangs wurde im Großen ebenso «intuitiv» wie im Kleinen entwickelt. In den folgenden Jahrzehnten beauftragten Banken, Telefon- und Transportgesell -schaften, Unternehmen für Medizintechnik und viele weitere Branchen zuneh-mend umfangreichere Softwarelösungen, die nur noch von Teams entwickelt werden konnten. Rasch wurde klar: Das Risiko zu scheitern war ohne ein struk -turiertes Vorgehen groß. Dass es damals, als sich die Informatik als Wissen -schaft erst entwickelte, noch kaum systematisch ausgebildete Informatiker, aber viele Ingenieure in der Softwareentwicklung gab, mag erklären, weshalb man in den 1960er-Jahren bewährte Vorgehensweisen aus Bau- und Produktionspro -zessen übernahm und sie für die Softwareentwicklung anpasste. So entstand ein wasserfallähnlicher Verlauf in Phasen, der einen Schwerpunkt auf die sehr präzise Analyse und Definition der Anforderungen legte, um dadurch, analog zum Bauwesen, teure oder gar unmögliche spätere Änderungen zu vermeiden. Anschließend wurde gemäß den Anforderungen ein detaillierter Plan ausgear-beitet und im Folgenden genau umgesetzt. Kommuniziert wurde dabei im We -sentlichen durch das Weiterreichen der umfangreichen Dokumentation. Diese heute als klassisch bezeichneten Vorgehensweisen brachten Struktur in den Prozess, aber auch neue Probleme. Planungsfehler wurden beispielsweise oft erst am Ende des Projekts erkannt und waren zu diesem Zeitpunkt nur mit er-heblichem Zusatzaufwand meist in Form von Überstunden behebbar. Außerdem beschrieben die verschriftlichten Wünsche des Kunden aufgrund von Kommu-nikationsschwierigkeiten oder unzureichender Kenntnisse oft nicht das, was eigentlich gebraucht wurde, sodass die Arbeit von Monaten oder Jahren «um -Hintergrund16sonst» war. Nach Abschluss einer klassischen Planung eingebrachte Wünsche durften nicht mehr berücksichtigt werden, auch wenn eine Planänderung aus Sicht des Entwicklerteams möglich und sinnvoll gewesen wäre. Die Praxis der Softwareentwicklung zeigte Ende des 20. Jahrhunderts immer deutlicher, dass langfristige Pläne oft nur für kurze Zeit gute Pläne sind, insbesondere in einer Welt, deren Anforderungen und Einsatzszenarien immer volatiler, komplexer, unsicherer und mehrdeutiger werden.Abbildung 2.1: Probleme bei klassischem Vorgehen: Was der Kunde beschreibt, was er anfangs wollte, was umgesetzt wird, was noch gerettet werden kann und was er tatsäch-lich gebraucht hätteAuf dem Weg zu mehr FlexibilitätVor dem Hintergrund dieser auch für die Softwareentwickler oftmals frustrie -renden Erfahrungen diskutierten in den 1990er-Jahren immer mehr Informa-tikerinnen und Informatiker darüber, welche neuen Wege beschritten werden könnten, um Software für alle Beteiligten besser zu entwickeln. Hierbei entstan -den Vorgehensmodelle wie Extreme Programming, Scrum und Feature Driven Development, die zunächst unter das Prädikat «leichtgewichtig» fielen. Die Ideen für Veränderungen waren nun da, aber noch fehlte eine positive charakteristi-sche Bezeichnung, die, vergleichbar mit einem Siegel, die verknüpften Werte bündelte, ihnen eine unverkennbare Identität gab und beim Kunden Neugier und Vertrauen für das damit verbundene Versprechen, besser zu sein, weckte. Das änderte sich, als 17 erfahrene Softwareentwickler mit sehr unterschied-lichem Hintergrund im Jahr 2001 in den schneebedeckten Rocky Mountains zusammenkamen, um eine gemeinsame Basis und einen Begriff für die neuen Herangehensweisen zu finden. Nachdem ein Teilnehmer vorgeschlagen hatte, das, was man in der praktischen Arbeit mehr schätzen gelernt hat, dem gegen-überzustellen, was traditionell wichtig war, ging es sehr schnell. Dann standen vier Sätze, aus denen das Agile Manifest wurde, an der Wandtafel.Geschichte und Entwicklung17Das Agile ManifestIndividuen und Interaktionen sind wichtiger  als Prozesse und Werkzeuge.Funktionierende Software ist wichtiger  als umfassende Dokumentation.Zusammenarbeit mit den Kunden ist wichtiger  als Vertragsverhandlung.Reagieren auf Veränderung ist wichtiger  als das Befolgen eines Plans.Abbildung 2.2: Das 2001 formulierte Manifest für Agile SoftwareentwicklungDer Moment wird von Teilnehmern später als überwältigend beschrieben. Es gab keine Gegenargumente, es bedurfte keiner Abstimmung. Alle sahen die Sätze und sagten: «Ja, das ist es!» Am zweiten Tag wählte die Gruppe das Wort «agil», das mit «beweglich», «flink» oder «wendig» ins Deutsche übersetzt werden kann, als positiv besetzten Begriff für das nun zum Ausdruck gebrachte gemeinsame Wertesystem und die daraus abgeleiteten Prinzipien. Die neuen Vorgehensmo -delle, die sich darauf stützen, wurden von nun an als agile Methoden bezeichnet. Da sich der Begriff «Methode» sowohl auf Vorgehensmodelle als auch auf hierin verwendete Techniken, Praktiken und Hilfsmittel beziehen kann, verwenden wir im Folgenden den weiteren Methodenbegriff, der auch gut zum Verständnis von Methoden im Unterricht passt.Zehn Jahre Agiles Manifest – eine ZwischenbilanzWas agile Methoden in den folgenden Jahren verändern sollten, damit hatte 2001 niemand gerechnet, sagten die Teilnehmer übereinstimmend anlässlich des zehnten Jahrestags. Denn im Gegensatz zu vielen anderen Bewegungen, die verebbten, wuchs in der Praxis die Zahl der agil arbeitenden Teams und Unter-nehmen unaufhaltsam und immer schneller, insbesondere im IT-Bereich. Oft Hintergrund18begann ein Team damit, es «mal auszuprobieren», und erlebte dabei, wie Kolle -ginnen und Kollegen neugierig wurden und fragten: «Was macht ihr denn da, warum seid ihr so gut drauf?» So sprang die Idee von einem Team zum nächsten und veränderte nicht nur deren Stimmung, sondern auch die Qualität der Pro -dukte, die Effektivität, die Motivation der Projektbeteiligten und letztlich die gesamte Unternehmenskultur. In agilen Unternehmen geht man beispielsweise davon aus, dass man die besten Ergebnisse erhält, wenn man kleinen, sich selbst organisierenden Teams statt einer klaren Arbeitsanweisung ein inhaltliches Ziel gibt. Es liegt dann in der Verantwortung und der Freiheit des Teams, den für sich besten Weg zum Ziel zu bestimmen. Die in den Vorgehensmodellen beschrie -benen Techniken und Praktiken unterstützen sie dabei. Agile Werte haben im Bereich der Kooperation und Teamarbeit, aber auch weit darüber hinaus viel bewegt, lautet die Bilanz nach zehn Jahren, auch wenn der Wandel noch lange nicht abgeschlossen ist: Agil sein bedeutet, sich ständig zu bewegen, zu verän-dern und neuen Umgebungen anzupassen, sodass die Weiterentwicklung des agilen Ansatzes wohl auch nie abgeschlossen sein wird.Agile Vorgehensmodelle aus der SoftwaretechnikKleinster gemeinsamer Nenner der agilen Vorgehensmodelle sind die im Agilen Manifest ausgedrückten Leitgedanken und Werte. Gemeinsam ist ihnen darüber hinaus, dass sie alle empirisch sind, also auf möglichst systematischem und datengestütztem Lernen aus Erfahrungen basieren, und dass damit iterativ, also in kleinen Zeitintervallen Inkremente entwickelt werden, die das Produkt um etwas für den Kunden Nützliches erweitern. ScrumDer Begriff «Scrum» steht symbolisch für das Gedränge im Rugby als Analo -gie für sich in komplexen Situationen erfolgreich selbst organisierende (Pro -duktentwicklungs-)Teams. Besondere Rollen nehmen in Scrum der Product Owner, der im Sinne des Kunden und mit dem Ziel der Wertschöpfungsmaxi -mierung entscheidet, was gemacht wird, und ein Scrum Master, der das Team wo nötig unterstützt, ein. Darüber hinaus beschreibt Scrum eine Reihe von Mee -tings und Praktiken. Die Selbstverpflichtung des Teams, seine Fokussiertheit so -wie Offenheit, Respekt und Mut sind Werte, die besonders betont werden. Scrum stammt aus der Softwaretechnik, wird aber inzwischen auch in anderen Berei-chen erfolgreich als Vorgehensmodell für das Projektmanagement verwendet.Geschichte und Entwicklung19Extreme Programming (XP)XP hat viele Ähnlichkeiten zu Scrum, stellt aber neben Mut und Respekt direk -te Kommunikation und Feedback ins Zentrum sowie Einfachheit, welche die Denkweise und den Codierstil der Entwicklerinnen und Entwickler prägt. Von den vielen XP-Praktiken ist Pair-Programming wohl die bekannteste. Feature Driven Development (FDD)Die Organisation der Produktentwicklung erfolgt bei FDD dem Namen entspre -chend anhand einer Liste von Funktionalitäten, die nach und nach umgesetzt werden. FDD harmoniert, anders als Scrum oder XP, gut mit existierenden klas -sisch hierarchischen Projektstrukturen. Es erfordert keinen kulturellen Wandel der Unternehmen, hat insgesamt eine deutlich andere Ausprägung, kann aber bei agilen Vorgehensweisen verortet werden.Verwandte VorgehensmodelleKanban, Lean Management und Design Thinking bringen Ideen aus anderen produzierenden Bereichen, wie etwa der Autoindustrie, in die IT:KanbanZiel des Kanban-Vorgehensmodells ist es, die Wertschöpfungskette eines mehrstufigen Prozesses kostenoptimal mittels Hol-Prinzip (Pull-Prinzip) ohne schwerfällige zentrale Planung zu steuern. Der Prozess wird dazu mithilfe eines Project-Boards und Karten, auf denen die zu erledigenden Aufgaben stehen, visualisiert. Da jeder Wechsel zwischen unterschiedlichen Aufgaben, die ein Mitarbeiter oder eine Mitarbeiterin quasi parallel bearbeitet, Zeit kostet, legt das Team eine maximale Zahl an Arbeiten fest, die jeder und jede gleichzeitig bearbeiten darf. Bis zu dieser Zahl können die Mitarbeitenden Aufgaben auf dem Board in die Spalte «In Bearbeitung» verschieben. Für Probleme wie beispiels -weise Flaschenhälse im Prozess, die so sichtbar werden, überlegt sich das Team Maßnahmen, die es ergreifen will. Lean ManagementDie Methoden des Lean Managements zielen darauf ab, die Prozessorganisatio -nen und das Qualitätsniveau zu verbessern, und sind heute weltweit verbreitet. Im Kern stellt Lean Management eine Unternehmenskultur dar, in der sich alle Tätigkeiten auf den Kunden ausrichten, in der die Teams im Rahmen dieses Unternehmensleitbildes eigenverantwortlich und autonom arbeiten und in der Hintergrund20großer Wert auf offene Informations- und Feedbackprozesse gelegt wird, die die Basis kontinuierlicher Verbesserung sind.Design ThinkingDesign Thinking ist ein Ansatz für praktisches und kreatives Problemlösen, der in Projekten und anderen Kontexten, in denen es um Innovation geht, genutzt werden kann. Er stellt eine breite Palette an Methoden zur Verfügung, die sich durch Benutzerorientierung, Visualisierung, Simulation sowie durch iteratives und oft auch durch forschendes Vorgehen auszeichnen.Wohin geht der Weg?Während um das Jahr 2000 herum die Mehrheit der agil arbeitenden Teams in der Softwareentwicklung angaben, dass sie sich an Extreme Programming orientieren, war 2017 Scrum die meistgenutzte agile Methode. Je nach Umfrage arbeiten 85 Prozent oder mehr aller befragten Teams in der IT mit «Scrum», wobei jedes Team mit der Zeit sein eigenes Scrum entwickelt. Wie viel Software in den vergangenen Jahren prozentual mit klassischen bzw. mit agilen Vorge -hensmodellen entwickelt wurde, ist schwer zu sagen. Ein Trend zeichnet sich jedoch klar ab: In der Softwareentwicklung gibt es kaum noch ein Unterneh -men, in dem nicht zumindest einzelne Teams «agile Luft» schnuppern. Laut dem Unternehmen VersionOne, das seit 2006 jährlich eine Umfrage zum Stand agiler Softwareentwicklung durchführt, setzten im Jahr 2018 bereits 97 Prozent aller Unternehmen in der Softwareentwicklung agile Methoden ein. Die meisten amerikanischen IT-Riesen arbeiten agil, aber auch namhafte europäische und deutsche Unternehmen vergeben IT-Aufträge inzwischen bevorzugt an agile Teams und arbeiten selbst daran, agil zu werden. Über die Erfahrungen auf dem Weg dorthin gibt es bis heute einen regen Austausch auf Konferenzen und an «agilen Stammtischen», um auch Neulinge auf dem Weg zum agilen Denken und Handeln zu unterstützen. Für viele gilt in Anlehnung an die als Sprint bezeich-neten Iterationen: «Wir sind einfach losgesprintet – und es hat gut geklappt.»Wie verändert agiles Denken die Arbeit?Sicherlich kann man hier aus heutiger Sicht viele Auswirkungen beschreiben, die auf die Verbreitung agiler Methoden zurückzuführen sind, und sie lassen sich je nach Fokus unterschiedlich gewichten. Im Folgenden werden deshalb nur exemplarisch zwei ganz unterschiedliche Aspekte aufgegriffen:Geschichte und Entwicklung21Agile Methoden haben sich in der zunehmend komplexen Welt, in der sich die Softwareentwicklung heute bewegt, bewährt. Selbst «einfache» Suchmaschinen sind inzwischen so komplex, dass auch Experten oft nicht mehr vorhersagen können, wie sich eine Änderung im Algorithmus auswirkt. Also formuliert man im Laufe der (Weiter-)Entwicklung Hypothesen, stellt die veränderte Suchma-schine für kurze Zeit online und wertet die Ergebnisse anschließend aus. Vali-diertes Lernen aus Experimenten ist eine unverzichtbare Methode moderner Softwareentwicklung geworden, die in klassischen Vorgehensmodellen kaum Platz findet. In agilen Methoden stellt die Freiheit zum Experimentieren hin -gegen einen Wert dar. Validiertes Lernen fügt sich auf natürliche Weise in die iterativ inkrementelle Entwicklung von Produkten mit regelmäßigen Feedback -schleifen ein, in welcher Kunde und Nutzer eine zentrale Rolle einnehmen.Agile Methoden stoßen in IT-Unternehmen einen kulturellen Wandel an. Die -ser Wandel hat in der Softwareentwicklung sichtbar positive Wirkungen gezeigt, sodass sich die Ideen inzwischen (obwohl Lean Management sie bereits Mitte des letzten Jahrhunderts aufgegriffen hat) auch im modernen Management und außerhalb der IT-Branche wiederfinden. Bildlich gesprochen: Schwerfällige Tan -ker, in denen oben auf der Brücke getrommelt und unten gerudert wird, sind in bewegter See zu träge. Stattdessen setzt man auf viele kleine, autonome Teams in Kanus, die eigenverantwortlich rudern. Die Klammer, die diese Kanus «lose zusammenhält» und Richtung Ziel lenkt, ist die Kommunikation. Statt als feste Rolle wird Führung als temporäre und «dienende» Aktivität gesehen, die jeder und jede von Zeit zu Zeit ergreift. Agile Unternehmen schätzen ihre Mitarbeite -rinnen und Mitarbeiter, sie vertrauen ihren Fähigkeiten und ihrem Engagement, setzen auf ihre Motivation und sorgen für ein Klima, in dem offen, respektvoll und transparent kommuniziert wird und Erfolge auch gefeiert werden. So macht Arbeit einfach mehr Spaß!Hintergrund222.2 Agiles Arbeiten – ein Zusammenspiel aus Werten und PraktikenAgile WerteAgile Projekte zeichnen sich nicht nur durch den Einsatz verschiedener agiler Methoden aus, auch wenn diese am sichtbarsten sind, wie etwa die vielen bunten Klebezettel an einem Board. Vielmehr basieren agile Projekte auf einer Reihe von Werten, welche die grundlegende Orientierungs- und Entscheidungshilfe für agile Teams auf ihrem selbstgestalteten Weg zum gesetzten Ziel bilden. In Form von konkreten und erprobten Techniken werden die Werte umgesetzt und die agilen Teams bei ihrer Selbstorganisation ideal unterstützt.Unter Werten werden grundlegende erstrebenswerte Merkmale und Eigen-schaften agiler Projekte subsumiert. Typisch positive personenbezogene We -sensmerkmale wie Eigenverantwortung, Zielstrebigkeit, Offenheit und Respekt sind damit korreliert und tragen zu einer positiven Unternehmens- bzw. Schul -kultur bei. Als die beiden zentralen Werte agiler Methoden gelten Kommunika-tion und Einfachheit. Gemeinsam mit den Werten Feedback, Selbstorganisation und Transparenz werden sie nicht nur in der Softwarepraxis gelebt, sondern bilden auch die Basis für die Agile Schule. Darüber hinaus können in agilen Pro -jekten je nach Schwerpunktsetzung auch andere Werte wie bspw. Commitment, Mut oder Fokus wichtig werden. Agiles Arbeiten – ein Zusammenspiel aus Werten und Praktiken23Werte in agilen ProjektenKommunikationTeile dich mit und tausche dich regelmä -ßig mit allen Projektbeteiligten aus. Das betrifft die Anforderungen, Umsetzungs -möglichkeiten und Quelltexte, aber auch das Miteinander im Team. Einfachheit Wähle die einfachste technische Lö -sung, um den größtmöglichen Projekt -fortschritt zu erhalten, und verwende organisatorisch nur Methoden mit ei -nem unmittelbaren Mehrwert. Oder noch knapper formuliert, handle nach dem KISS-Prinzip.Feedback Zeige Zwischenergebnisse früh und oft und hole dir dazu Rückmeldungen ein. Reflektiere die Rückmeldungen und passe selbstkritisch inhaltliche Zie -le und Prozessabläufe an, das wird dir dabei helfen, das Produkt und deine Ar -beitstechniken zu verbessern.Selbstorganisation Organisiere mit deinen Teamkollegen euren Arbeits pro zess so, dass ihr best -möglich eure Ziele erreicht. Besprechun -gen helfen dabei. Hole dir aktiv Aufgaben vom Project-Board, die du gut bewälti -gen kannst.TransparenzKommuniziere offen und ehrlich, liefere alle Informationen über deine Aktivitäten im Team zeitnah und transparent. Ein aktiver Informationsaustausch ist ent -scheidend für den Erfolg kooperativen Lernens und Arbeitens.Commitment (Zusage)Sei bereit, mit deinem Team Verantwor -tung sowohl für eine Produktentwicklung als auch für den Lernfortschritt zu über -nehmen. Dazu gehören das Gestalten von Freiheiten, das gemeinsame Festle-gen von Zielen mit einem «Ja, wir wollen das!» sowie das bestmögliche Engage -ment für die verabredeten Ziele. MutSei mutig, auch mal Fehler zu machen, denn jeder Fehler bietet die Chance, etwas zu lernen. Sei mutig, Fragen zu stellen, Verantwortung zu übernehmen, Entscheidungen zu treffen und auch ehr -lich über Misserfolge und Hindernisse zu sprechen. RespektHöre deinen Teamkollegen zu und ver -suche sie zu verstehen. Berücksichtige ihren Erfahrungshintergrund, wenn du Feed back gibst und ihre Ergebnisse und ihr Verhalten bewertest. In agilen Projek -ten arbeiten alle Beteiligten auf Augenhö -he miteinander, jeder wird sich entspre -chend seiner Möglichkeiten einbringen.Zielstrebigkeit/FokussierungWidme deine Aufmerksamkeit ungeteilt einer konkreten Aufgabe. Fokussiere dazu all deine Bemühungen und Fähig -keiten darauf, um im vorgegebenen Zeit -fenster das zugesagte Ziel zu erreichen.Abbildung 2.3:  Werte, auf die sich die Prinzipien und Methoden der agilen Projektarbeit beziehenHintergrund24Im Folgenden werden die wichtigsten Werte der Agilen Schule genauer charak -terisiert:Kommunikation Kommunikation ist die Grundlage für gemeinsames Arbeiten und Lernen. In agilen Projekten ist sie die Voraussetzung dafür, dass Wissen regelmäßig und bestmöglich ausgetauscht und innerhalb des Teams verteilt wird. Bei der Übernahme klassischer Vorgehensmodelle wird mitunter auch in Schulen ver-sucht, durch die fließbandartige Abarbeitung von Dokumenten wie Lasten- und Pflichtenheft, Modellen, Klassendokumentationen und Anderem die zwischen-menschliche Kommunikation zu ersetzen. Für agiles Vorgehen ist dagegen die direkte Kommunikation aller Beteiligten zentral. Sie sollte regelmäßig, zielori-entiert, offen, ehrlich, und respektvoll erfolgen. Das betrifft auch die Absprachen über (Zwischen-)Ziele und Machbarkeiten im Projekt sowie den Austausch über Einschätzungen, Lösungswege, Entscheidungen und Probleme mit den Team-mitgliedern. EinfachheitUm Ziele zu erreichen, ist Einfachheit sowohl bei der inhaltlichen Arbeit als auch bei der organisatorischen Durchführung eines agilen Projekts zentral. Dabei ist die Leitfrage des KISS-Prinzips («Keep it small and simple») hilfreich für die Fokussierung auf das Wesentliche: Kann ich es sinnvoll einfacher gestalten? Konkret soll in der inhaltlichen Umsetzung nur das implementiert werden, was für die unmittelbare Zielstellung benötigt wird. Unnötige Details hingegen ge -fährden den Projektfortschritt. Gibt es mehrere Lösungswege, so ist der einfa-chere zu bevorzugen; er ist leichter nachzuvollziehen und zu verstehen. Dadurch werden später auch die Fehlersuche, das Erweitern und die Pflege erleichtert. Auch zur Projektorganisation werden nur diejenigen Techniken und Praktiken herangezogen, die einen Mehrwert bieten. Welche das sind, muss abhängig vom konkreten Projekt entschieden werden bzw. kann nach Reflexionsphasen ange -passt werden. Beispielsweise kann in der Schule auf Rollen, wie sie in Scrum existieren, weitestgehend verzichtet werden. FeedbackFeedback ist eine der konstruktivsten Formen der Kommunikation und grundle -gend für individuelle und gemeinsame Lern- und Weiterentwicklungsprozesse. In sequenziell verlaufenden Projekten erhalten die Teams erst beim Abschluss ein Feedback. Stärken und Schwächen bei der Planung etwa werden so zwar benannt, aber die Gelegenheit, daraus Gelerntes unmittelbar anzuwenden, wur -Agiles Arbeiten – ein Zusammenspiel aus Werten und Praktiken25de verpasst. In agilen Projekten werden die Phasen zyklisch in ↑ Iterationen durchlaufen, um das Zwischenprodukt (↑ Prototyp) schrittweise zu erweitern, woraus sich eine regelmäßige Rückkopplung ergibt. Unmittelbare Bedeutung für die Schülerinnen und Schüler hat die frühe Rückmeldung auf der Ebene der umgesetzten Lösungen, die sie in agilen Projekten in der Beurteilung der Zwischenprodukte im Review (↑ Reflexion) erhalten. Feedback auf (Selbst-)Steuerungsebene bezieht sich auf die Selbstorganisation und Selbstreflexion des Teams und des Einzelnen und kann ebenso wie Feedback auf der Personalebene in den Retrospektiven (↑ Reflexion) gegeben werden. SelbstorganisationIn klassischen professionellen Projekten, die in Phasen verlaufen, gibt es Taktge -ber: Das Entwicklerteam trifft kaum organisatorische Entscheidungen, sondern setzt lediglich von Vorgesetzten genehmigte Pläne in vorgegebenen Zeiträumen um, weshalb Selbstorganisation nur in begrenztem Umfang erforderlich ist. In Schulprojekten hingegen sind Selbstorganisation und Eigenverantwortung zwar seit jeher gewünscht, in der Umsetzung aber nur schwer zu erreichen, da kon-krete, unterstützende Methoden fehlen. Agile Methoden beheben diesen Mangel. Sie helfen den Teams, in einem vorgegebenen Rahmen selbst zu entscheiden, welche Ziele sie sich setzen und wie sie ihre (Lern-)Arbeit inhaltlich und zeitlich gestalten und strukturieren. Da das Vorgehen in agilen Projekten transparent ist, erkennt auch der Agile Coach bzw. die Lehrkraft, welche Art der Unterstüt-zung das jeweilige Team (noch) benötigt, bis die Selbstorganisation tatsächlich gelingt.TransparenzKlarheit über die Aktivitäten im Team, offene Kommunikation und aktiver In-formationsaustausch sind entscheidend für den Erfolg kollaborativer Arbeit und kooperativen Lernens. Klassische, in Phasen ablaufende Projektarbeit ist vergleichbar mit einem U-Boot, das regelmäßig für längere Zeit abtaucht. Was in dieser Zeit passiert, ist von außen nicht einsehbar. In agilen Projekten hingegen sind Strukturen und Prozesse transparent, für die Teams (von innen) und die Lehrkraft/Projektleiter/Kunden (von außen). Jeder kann die Ziele und Abläufe sehen, da der Projektstand und die aktuellen Tätigkeiten visualisiert werden und so jederzeit auf einen Blick erfassbar ist, wer wann woran arbeitet, was noch zu tun ist und was bereits erledigt wurde. Probleme werden offen angesprochen, Entscheidungen gemeinsam getroffen und Wissen und Informationen werden aktiv untereinander geteilt. Dieses Hineinsehen und Verstehen ist für Schüle -rinnen und Schüler eine wesentliche Voraussetzung zur Partizipation, und für Hintergrund26Lehrkräfte ist es die Basis, auf der sie entscheiden, welche Rolle für sie gerade passend ist: die eines Trainers, eines Coaches oder eines Beobachters. Insbeson -dere als Beobachter kann die Lehrkraft dank der Transparenz die Kompetenz -entwicklung der Schülerinnen und Schüler verfolgen und somit ein fundiertes Feedback geben. Agile Werte durch Praktiken und Techniken zum Leben erweckenDer agile Prozess gibt einen Rahmen vor, in dem Projekte so strukturiert werden, dass zu jedem Zeitpunkt das Richtige richtig getan wird. Insbesondere mittels verschiedener Praktiken und Techniken zum Visualisieren, Austauschen und Nachdenken werden dabei die Agilen Werte zur Basis des Handelns gemacht.VisualisierenEine zentrale Rolle spielen Praktiken und Techniken, die den Stand und die Auf -gaben des gesamten Projekts und insbesondere des aktuellen Zyklus auf einen Blick erfassbar und damit für alle transparent machen. Das Visualisieren erfolgt in der Agilen Schule ebenso wie in professionellen Projekten durch das ↑ Pro -ject-Board mit seinen drei Spalten für geplante, in Arbeit befindliche und er -ledigte Aufgaben sowie durch priorisierte ↑ User-Storys und die Beschreibung damit verbundener Aufgabenpakete in Form von ↑ Tasks, für die Einzelne für alle sichtbar die Verantwortung übernehmen. Die Visualisierung unterstützt die Selbstorganisation, zeigt das Commitment des Teams bzw. der einzelnen Teammitglieder, fordert Einfachheit bei der Planung ein und sorgt für ein fo -kussiertes Arbeiten.AustauschenEbenso wesentlich ist eine Reihe von Techniken und Praktiken, die den Aus -tausch von Informationen und Wissen unterstützen, wobei sie jeweils nicht nur einen Anlass zur Kommunikation bieten, sondern diese auch strukturieren. So erfolgt der Austausch in der Agilen Schule analog zu professionellen agilen Projekten bspw. vor dem Hintergrund der täglichen Absprachen (↑ Stand-up-Meeting), zum Besprechen des Vorgehens bei der Projektumsetzung im Pla -nungsmeeting (↑ Stand-up-Meeting und andere Besprechungsformen), beim Beschreiben und Diskutieren konkreter Umsetzungen (↑ Pair-Programming), beim Nutzen ↑ kollaborativer Werkzeuge, bei der Beurteilung des entwickel -ten (Zwischen-)Produkts im Review (↑ Reflexion) sowie bei der Reflexion des Arbeitsablaufs, der Zusammenarbeit und des Umgangs miteinander in der Re -trospektive. Jede der Praktiken setzt auf Offenheit und Respekt im Gespräch, Agiles Arbeiten – ein Zusammenspiel aus Werten und Praktiken27aber auch auf den Mut, beispielsweise Fehler anzusprechen und Wünsche zu artikulieren, sowie auf Fokussierung. Die Kommunikation sorgt für Transparenz und Feedback, da Informationen ausgetauscht, Entscheidungen gemeinsam ge -troffen und fachliche Probleme ebenso wie Stärken und Schwächen des Teams angesprochen werden.NachdenkenDer dritte zentrale Aspekt, das Nachdenken, löst insbesondere durch den ↑ ite -rativen Prozess regelmäßig ein «Inspizieren und Adaptieren» aus. Dieses macht das Team und seine Arbeit agil, indem es ein Lernen aus Fehlern und Erfahrun -gen unterstützt, ein Verbessern in kleinen Schritten ermöglicht und die Umset -zung von Änderungen begünstigt. Neben den kommunikativen Praktiken (↑ Re -flexion in Review und Retrospektive) gehören dazu weitere wie ein konkretes Prüfen und Korrigieren der erreichten Ergebnisse bezüglich der geplanten Ziele (↑ Testen) vor einem Review, ein Überarbeiten der Struktur des Zwischenpro -dukts (↑ Refactoring), ein Beschreiben des Erreichten (↑ Dokumentation) und ein Überdenken und Ergänzen noch offener Aufgaben und ihrer Priorität.Die agile Szene drückt das, was für sie Agile Werte und agiles Handeln bedeuten, gern auch in markanten Sprüchen aus (Abbildung 2.4).Abbildung 2.4: Markante Sprüche aus einem Alltag mit Agilen WertenHintergrund28Das Agile SchulmanifestDas Agile Manifest von 2001 gilt als Start für einen Kulturwandel in der Soft -wareentwicklung. In der Agilen Schule sind Agile Werte essenziell für das Ge -lingen der Projekte sowie für die individuelle Entwicklung und den Lernprozess der Schülerinnen und Schüler.Auf Grund unserer Erfahrungen auf dem Weg zu besseren Projekten haben wir ein Agiles Schulmanifest formuliert (Abbildung 2.5). Es soll dazu anregen, den Wandel auch in der Schule einzuleiten:Das Agile SchulmanifestSelbstverantwortliche Schülerinnen und Schüler  und ihre Interaktionen sind wichtiger als das klein-schrittige Befolgen einer Instruktion.Lernen aus Erfahrung und schnelle Erfolge sind  wichtiger als Vorabfundierung bis ins letzte Detail.Erkunden und Ausgestalten eines gemeinsamen Zielssind wichtiger als das penible Einhalten von Vorgaben.Kreativität und Reagieren auf Gelerntes sind wichtiger als das Befolgen eines starren Plans.Abbildung 2.5:  Manifest für einen agilen Wandel in der SchuleUnternehmen werden agil – Beweggründe und Erfahrungen292.3 Unternehmen werden agil – Beweggründe und ErfahrungenWarum werden immer mehr Unternehmen – nicht nur solche aus dem IT-Be -reich – agil? Was bedeutet «agil werden» und «agil sein» für sie? Wie gehen sie vor, welche Hürden gilt es zu überwinden und welche Erfahrungen machen sie? Wir, die Autoren, haben nicht die Erfahrung Agiler Coaches, die unterschied -lichste Teams dabei begleitet haben, agiles Denken und Handeln zu lernen, und deshalb aus dem Nähkästchen plaudern können. Wir haben auch nicht erlebt, wie es sich anfühlt, aus einem klassischen Prozess in einen agilen zu wechseln. Aber wir haben Kontakt gesucht zu Profis aus der Praxis und haben insbeson-dere auf der «Agile Bodensee», der Konferenz für agile Softwareentwickler und Projektentwickler im Bodenseeraum, über mehrere Jahre Einsicht gewonnen in die agile Bewegung. Wir fühlten die Begeisterung und die Lust der Vortra -genden, andere Teams zu unterstützen und etwas zu bewegen, indem sie ihre eigenen Erfahrungen teilten, und wir saßen mit Teams am Mittagstisch, die erst noch agil werden wollten und viele Fragen hatten. Die folgenden Ausschnitte aus Berichten von Praktikerinnen und Praktikern illustrieren die Erfahrungen.«Einfach losgesprintet» – im agilen TestprojektStefan Kirch und Henning Pautsch berichteten auf der Agile Bodensee 2014 vom Umstieg auf agile Methoden bei der Bauer+Kirch GmbH in Aachen:Ausgangspunkt des Ausprobierens agiler Methoden war, dass die Erfahrungen im Unternehmen zunehmend eine Ahnung bestärkten, dass die klassische Art, Software zu entwickeln, auf Dauer in eine Sackgasse führen würde. Ein idealer Zeitpunkt, um ein agiles Vorgehen zu erproben, war gekommen, als ein hausinternes Werkzeug neu entwickelt werden musste. Unglücklicherweise erkrankte gerade zu diesem Zeit -punkt der Agile Coach, der das Entwicklerteam begleiten sollte. Was also tun? Zwar finden sich in Büchern und Blogs viele Informationen zum methodischen Vorgehen, aber sie können keine Erfahrungen ersetzen. Um die Gelegenheit nicht verstreichen zu lassen, wollte man es dennoch wagen, und obwohl das Team keinen Coach haben würde, wurde es auf den Weg geschickt. Bald mussten die ersten Entscheidungen Hintergrund30getroffen werden: Wie lang sollte ein Sprint (↑ Iteration) dauern, also die Entwicklung von jeweils einem weiteren Inkrement der Software? Eine Woche erschien dem Team zu kurz, vier Wochen zu lang, also entschied es sich kurzerhand für zwei Wochen. Das grundsätzliche Ziel wiederum war klar und einiges ergab sich im Verlauf des Pro -jekts, etwa wie viel das Team in zwei Wochen schafft. Die Anforderungen in Form von   ↑ User-Storys wurden elektronisch erstellt, aber das Team wollte sie auch ausge -druckt als Zettel an einem großen, übersichtlichen ↑ Project-Board an einer Wand im Büro haben. Die detaillierten Teilaufgaben (↑ Tasks) wurden der Einfachheit halber nur am  Project-Board verwaltet. Dort traf sich das Team auch jeden Morgen für 10 Minuten zum ↑ Stand-up-Meeting, um sich gegenseitig zu informieren.Bereits nach den ersten Sprints war sich das Team einig: Über die anstehenden User-Storys zu sprechen und die Tasks gemeinsam zu planen, bringt alle fachlich voran und liefert qualitativ bessere Entwürfe. Die Besprechungen des jeweiligen Zwischenprodukts (↑ Prototyp) mit dem hausinternen Kunden motivieren: Rückmel -dungen wie «Ja, genau so wollte ich das haben» spornen an. Es wurden auch Fehler gemacht, diese waren aber stets mit einem Lerneffekt verbunden. Insgesamt ver -lief das agile Testprojekt erfreulich erfolgreich, was unmittelbare Auswirkungen auf weitere Projekte nach sich zog. Nicht nur die Entwicklerinnen und Entwickler dieses Teams sprachen sich in neuen Projekten sofort für ein agiles Vorgehen aus, auch an -dere Kolleginnen und Kollegen äußerten sich interessiert, wenn sie am Project-Board vorbeigingen oder das Team bei der Arbeit erlebten. Ohne genau zu wissen, was da gemacht wurde, sahen sie, dass die Beteiligten eine ganz andere Motivation hatten, und meinten: «Das wollen wir auch!»Deshalb ist das Fazit von Kirch und Pautsch: «Sprinten Sie einfach los! Sprinten Sie los, wenn Sie motiviert sind und wissen, dass nicht alles von Anfang an perfekt sein wird. Schauen Sie sich an, was Sie falsch gemacht haben und versuchen Sie es beim nächsten Mal besser zu machen – das ist erstaunlich einfach. Sprinten Sie los! Sie werden feststellen, dass Ihr Team mit einer ganz anderen Motivation, mit einer ganz anderen Identifikation an die Sache herangeht!»«Können wir das auch umsetzen?» – Wie die agile Denkweise alle anstecktRobert Misch von gutefrage.net und Sascha Rehbock berichteten auf der Agile Bo-densee 2014 über den agilen Wandel im ganzen Unternehmen:Es begann damit, dass die IT-Abteilung agile Methoden einführte. Schnell wurde das auch für Kolleginnen und Kollegen aus anderen Abteilungen sichtbar: An den  Project-Boards mit den bunten Zetteln, an den täglichen Stand-up-Meetings sowie generell an der gesteigerten Motivation. Klar, dass diese Änderungen ihre Neugier weckten. Sie stellten Fragen – und wollten einen ähnlichen Prozess auch für sich einführen. Deshalb organisierten die Agilen Coaches der IT-Abteilung bald auch für Unternehmen werden agil – Beweggründe und Erfahrungen31andere Abteilungen Workshops, sodass sich die agile Arbeitsweise erst langsam und dann immer schneller im Unternehmen ausbreitete: vom Community-Management über Marketing, Sales und Finances sogar bis in die juristische Abteilung der Unter -nehmensgruppe. Deren Leiter hatte zwar zunächst noch keine Vorstellung davon, wie agiles Vorgehen in der Rechtsabteilung der Holding aussehen könnte, aber er glaubte daran.Alle angepassten Prozesse bei gutefrage.net wurden nun iterativ aufgebaut und ins -besondere drei agile Praktiken etablierten sich überall: Das Project-Board visuali -siert die Arbeit im Team und schafft Transparenz. Damit kann fokussiert gearbeitet werden, es lassen sich wiederkehrende Probleme im Arbeitsablauf identifizieren, Veränderungen planen und deren Wirksamkeit prüfen. In einem täglichen Stand-up-Meeting werden Informationen ausgetauscht und der Tag geplant, und nach jeder Iteration werden Prozesse, Ergebnisse und die Zusammenarbeit in der ↑ Reflexion bewertet und wo nötig Verbesserungen initiiert.Als wesentlicher Faktor für das Gelingen der agilen Transformation erwies sich, dass alle im Team nicht nur etwas über agile Praktiken erfuhren, sondern verstanden, wel -che Denkweise dahintersteckt. Da Agile Werte die gesamte Arbeitskultur verändern, war es wichtig, den Teams genügend Zeit für die Umstellung zu lassen. Zuerst wurde eine kleine Änderung eingeführt und begleitet. Daraus entwickelten sich adaptierte Praktiken und die Teams verbesserten sich stetig. Was die Mitarbeiterinnen und Mitarbeiter nach der agilen Transformation besonders zu schätzen gelernt haben, ist unterschiedlich: Das Marketing-Team beispielsweise schätzt die durch das Project-Board gewonnene Transparenz und insbesondere die Priorisierung von Arbeiten: «Wir fangen weniger an, aber dafür wird mehr fertig. Das hilft, sich auf Resultate zu fokussieren.»Die juristische Abteilung hat das Arbeiten in Paaren eingeführt. Nun ist nicht mehr nur eine einzelne Person als Experte oder Expertin für einen Bereich verantwortlich. Verträge werden nun zu zweit entworfen und gegenseitig begutachtet. «Wenn ich jetzt krank werde oder in den Urlaub gehe», berichtete eine Juristin, «bin ich dank der neuen Arbeitsweise entspannter, weil das Projekt trotzdem weitergeht.» Auch in der Unternehmensgruppe ist die Erfahrung mit der neuen juristischen Abteilung sehr positiv: Anfragen werden nun effizienter und besser bearbeitet. Die Managerinnen und Manager begrüßten zwar die Motivation in agilen Teams, stellten sich aber bald die Frage «Welche Aufgaben bleiben uns denn nun? Braucht es überhaupt noch eine Kontrolle der Arbeitsprozesse?» Es ist verständlich, dass die Idee von selbstorga -nisierten Teams sie zunächst verunsicherte. Ein Workshop zu «Management 3.0» inspirierte sie jedoch und weckte die Experimentierfreude. Beispielsweise wurde ein sogenanntes Delegation-Board installiert, auf dem alle sehen können, wer wel -che anstehenden Entscheidungen treffen darf. Für die Teams ist diese Klarheit eine große Hilfe.Hintergrund32«Entscheidend ist der Kulturwandel» – Organisationsentwicklung  durch agile Transformation Stefano Trentini, Leiter des Bereichs Software Engineering bei den Schweizerischen Bundesbahnen (SBB) und Mischa Ramseyer, Agiler Coach bei pragmatic solutions, berichteten auf der Agile Bodensee 2016 über den Beginn einer «agilen Transforma -tion» bei den SBB:Wie kommt ein konservatives Traditionsunternehmen wie die SBB dazu, in seinem IT-Bereich flächendeckend Agilität einführen zu wollen? Der Handlungsbedarf ent-stand, weil andere IT-Unternehmen zunehmend kundennäher arbeiten und ihre Pro-dukte immer schneller, kostengünstiger, aber mit konstanter Qualität auf den Markt bringen. Die einzige Möglichkeit, als unternehmensinterner Anbieter von IT-Lösungen in diesem Umfeld konkurrenzfähig zu bleiben, war es, einen Paradigmenwechsel einzuleiten. Entscheidend schien dabei nicht die Wahl eines bestimmten agilen Frame  works, sondern vielmehr ein Kulturwandel. Dieser lässt sich nicht vorschrei-ben, vielmehr müssen die Beschäftigten mitgenommen werden. Das wurde erreicht, indem dieser Kulturwandel bei den SBB anhand von fünf werteorientierten Prinzipien beschrieben, kommuniziert und zunehmend umgesetzt wurde:Schaffe Wert und Nutzen! Bei den SBB wurde sehr langfristig und detailliert geplant und jeder Bereich hielt sich stark an seine Pläne. Von dieser planorientierten Steue -rung galt es nun zu einer Steuerung zu kommen, die stets dem jeweiligen Projektziel dient und sich am Schaffen von Wert und Nutzen orientiert.Übernimm Verantwortung! Bisher trafen die Vorgesetzten die Entscheidungen und übernahmen die Verantwortung, weshalb sich die Beschäftigten kaum innovativ einbringen konnten. Als neues Ziel sollen die Mitarbeitenden mit der Zeit befähigt werden, sich auf ihrem Fachgebiet mehr zu trauen und zu lernen, mit Verantwortung umzugehen und vor allem Fehler offen zuzugeben.Unterstütze Veränderung!  Bei den SBB wird ein freundlicher und netter Umgang gepflegt. Das führte in der Vergangenheit aber auch dazu, dass jemand, ehe er Kritik an anderen übte, nach Behelfslösungen suchte. Um Veränderung zukünftig als positiv wahrzunehmen und zu unterstützen, soll sich nun jeder und jede kritisch mit den Ergebnissen der Arbeit auseinandersetzen und somit besser aus Erfahrungen lernen.Macht’s zusammen! Bisher hatte jede Person eine klar definierte Rolle, die ihre Tä-tigkeit festlegt und eingrenzt. Zukünftig sollen nun Aufgaben zusammen im Team erledigt werden, ohne Rollen, und die Verantwortung soll dabei gemeinsam getragen werden. Das bedeutet, dass die Teams eine funktionierende Form der Kooperation entwickeln sollen.Mach’s einfach! Aus der Tradition heraus gab es bei den SBB seit jeher viele Regu-larien, Abläufe waren relativ kompliziert. Dinge einfach zu machen bedeutet, diese Regularien sinnvoll abzubauen und es zu wagen, Entscheidungen mit dem gesunden Menschenverstand zu treffen.Unternehmen werden agil – Beweggründe und Erfahrungen33Nach der Einigung auf diese Prinzipien als Grundlage für den Wandel begann die Umsetzung, wobei – wie im agilen Umfeld üblich – in kleinen Schritten, also iterativ vorgegangen wurde. In jedem Quartal wurden Teilziele entsprechend der Priorisie -rung mit Feature-Teams an einem Nachmittag geplant und während des Quartals ausgearbeitet. Am Ende jeder Iteration wurden die Resultate präsentiert. So ist un-ter anderem ein Vorgehensmodell der SBB entstanden, das den werteorientierten Rahmen vorgibt. Nun kann jedes Team, das in ein neues Projekt startet, für sich selbst entscheiden, ob es sich an Scrum, Kanban oder einem anderen agilen Vorge-hensmodell orientiert, denn jedes passt in den vorgegebenen Rahmen und erlaubt es beispielsweise, während der Produktentwicklung regelmäßig zu prüfen, ob Wert und Nutzen geschaffen werden. Zudem wurde Raum für Vernetzung und Dialog in der Organisation geschaffen, damit jeder den Zielen Sinn geben und eigene Ideen entwi -ckeln kann, unabhängig von seiner Aufgabe und Position im Unternehmen. Der Stand der agilen Transformation wurde von Beginn an anhand von Kriterien gemessen. Die -se Daten wurden um eine Selbsteinschätzung der Teams ergänzt und es zeigt sich inzwischen: «Agilität ist bei den Mitarbeiterinnen und Mitarbeitern angekommen. Agilität gilt als erstrebenswert.» Viel Zeit und Reflexion, laufende Anpassungen und eine Begleitung waren dabei wichtige Faktoren.Im Unterrichts-einsatzErfahrungen mit agilen  Schulprojekten3 Im ersten Teil dieses Kapitels wird ein mehrfach erprobtes Beispiel vor­gestellt, das die wesentlichen Kernideen agiler Projekte verdeutlicht. Daran schließen Erfahrungsberichte agiler Schulprojekte an, die illus ­trieren, wie agile Methoden bei unterschiedlichen Lerngruppen, fach­lichen Vorkenntnissen und Zielsetzungen flexibel und gewinnbringend eingesetzt werden können. Ziel dieser Berichte ist es, den Leserinnen und Lesern Anregung zu geben, die Unterrichtsprojekte ihrer Schülerin­nen und Schüler durch Auswahl und Anpassung agiler Praktiken indivi­duell zu gestalten.3.1 Best Practice – das Spiel «Pengu»373.1 Best Practice – das Spiel «Pengu»Ein lohnenswertes Projektziel ist für viele Schülerinnen und Schüler die Konzeption und Implementierung eines Computerspiels. Sehr gut eig -net sich das Jump-’n’-Run-Spiel «Pengu», bei dem eine Spielfigur auf ei -ner bewegten Wolke über einen Abgrund gesteuert werden muss. Umge -setzt wird dieses Szenario in diesem Beispiel mit Greenfoot. Greenfoot stellt auf der Programmiersprache Java basierende Miniwelten zur Verfügung, die insbesondere für zweidimensionale Spiele und Simulationen geeig -net sind. Greenfoot ermöglicht es Programmieranfängern somit, die ob -jektorientierte Programmierung auf interaktive Weise kennenzulernen.  Im Folgenden soll nun die Spielidee konkret mit Hilfe agiler Techniken und Praktiken umgesetzt werden. Hierzu wird das Szenario zuerst in ↑ User-Storys festgehalten und in ↑ Tasks aufgeteilt. Anschließend wird das weitere Projekt-vorgehen beschrieben. Abbildung 3.1:  Das Pengu-SpielIm Unterrichts einsatz38Funktionalitäten in User-Storys festhaltenUser-Storys beschreiben in kurzer Form Funktionalitäten der zu entwickelnden Software, die dem Nutzer zur Verfügung stehen sollen. Jede User-Story soll sich dazu auf eine konkrete Aktivität beschränken und wird aus Sicht des Kunden beschrieben. Typischerweise erfolgt die Erstellung der User-Storys unter Ein -beziehung des Auftraggebers und erfordert domänenspezifisches Wissen aus dem Kontext der zu erstellenden Software. In diesem Beispiel übernehmen die Schülerinnen und Schüler selbst die Kundenrolle, um zu entscheiden, wie das Spiel ausgestaltet werden soll. Deshalb ist es erforderlich, dass das Team eine Vorstellung vom Spielfluss und den Möglichkeiten solcher Jump-‘n’-Run-Spiele besitzt, um die Anforderungen klar aufzustellen und auch eigene Ideen mit ein -zubringen. User-Storys helfen nun, das umfangreiche Spiel in kleine und damit gut umsetzbare Teile zu gliedern. Als Grundsatz sollte für jede Aktivität einer Figur (hier z.B. «Pinguin kann sich bewegen», «Wolke bewegt sich zwischen den Klippen») eine eigene User-Story erstellt werden. Anhand der User-Storys kann dann auch überprüft werden, ob etwas Wichtiges vergessen wurde.Abbildung 3.2:  Die ersten User-Storys zum Pengu-SpielTitel:  SpielflächeBeschreibung:  Ein Pinguin steht auf einer Klippe, die durch einen Abgrund von einer zweiten Klippe getrennt ist. Zwischen den Klippen ist eine Wolke.Priorität:  10Titel:  Pinguin bewegenBeschreibung:  Der Spieler kann den Pin -guin nach rechts und links bewegen. Der Pinguin blickt dabei immer in Laufrich -tung.Priorität:  20Titel:  Pinguin fälltBeschreibung:  Wenn der Pinguin über den Abgrund kommt, fällt er hinunter und das Spiel ist zu Ende.Priorität:  303.1 Best Practice – das Spiel «Pengu»39Die ersten drei User-Storys dienen in unserem Beispiel der Grundfunktio -nalität des Spiels: «Spielfläche», «Pinguin bewegen» und «Pinguin fällt». Weitere User-Storys beinhalten die nächsten Spielfunktionen sowie weitere Ausbaumög -lichkeiten. Die Zettel zeigen die entsprechenden Beschreibungen der User-Sto -rys sowie deren Prioritäten, welche die Bearbeitungsreihenfolge vorgeben. Da alle drei User-Storys für das Spiel grundlegend sind, wurden sehr hohe Prioritä -ten festgelegt (je kleiner die Zahl, umso höher die Priorität). Aus den Prioritäten können auch implizite Abhängigkeiten ersichtlich werden (bspw. nur wenn das Szenario erstellt ist, ergibt eine dazu implementierte Aktivität Sinn). Die erste Iteration planen und Tasks erstellenNach der Priorisierung der User-Storys wird im Team festgelegt, wie viele User-Storys in der ersten ↑ Iteration umgesetzt werden sollen. Da die Schüle -rinnen und Schüler zunächst noch wenig Erfahrung haben, den Arbeitsaufwand für die Umsetzung der User-Storys einzuschätzen, erfolgt hier die erste Auswahl «nach Gefühl». Hilfreich ist dabei, wenn die User-Storys anfangs sehr klein sind. Wir wählen entsprechend die drei User-Storys mit der höchsten Priorität aus. Nun werden diese User-Storys in Tasks gegliedert. Ein Task ist eine grobe Be -schreibung eines überschaubaren Arbeitspakets, die auf einem eigenen Klebe -zettel (Post-it) steht. Während User-Storys die Ziele des Pengu-Spiels aus Sicht des Kunden beschreiben, müssen die Schülerinnen und Schüler nun ihre Pers -pektive ändern und die Teilziele aus Sicht eines Softwareentwicklers betrachten. Dabei sind bereits verschiedene Designentscheidungen zu treffen. Die resultie -renden Tasks der drei User-Storys der ersten Iteration von Pengu sind in der folgenden Abbildung dargestellt. Titel:  SpielflächeWelt hat beim  Starten Himmel als Hintergrund ➜ Klas-senbild ändern.SZwei Felsen, links und rechts, getrennt von einem Abgrund als neue 0bjekte einfügen.MIm Unterrichts einsatz40Abbildung 3.3:  Tasks als Planungsergebnis für die erste Iteration des Pengu-SpielsTitel:  Pinguin bewegenIst die rechte Pfeil -taste gedrückt, so bewegt sich Pengu nach rechts.SIst die rechte Pfeil -taste gedrückt, schaut Pengu nach rechts.SIst die linke Pfeil­taste gedrückt, schaut Pengu nach links.SIst die linke Pfeil­taste gedrückt, so bewegt sich Pengu nach links. STitel:  Pinguin fälltIn der Klasse «Pinguin» wird ein Attribut «fällt» definiert und im Konstruktor mit «false» initialisiert.SWenn der Pinguin keine Klippe berührt, wird das Attribut «fällt» auf «true» gesetzt und der Pinguin bewegt sich  automatisch  nach unten. MDer Pinguin verschwin -det am unteren Spiel -feldrand ➜ Objekt löschen. Das Spiel ist zu Ende.LWenn der Pinguin im Fallen eine Klippe berührt, prallt er ab.M3.1 Best Practice – das Spiel «Pengu»41Es wird deutlich, dass Tasks auch konkrete, technische Begriffe oder kurze Quell -codehinweise enthalten dürfen. Soll auch die Zeitplanung im Projekt berücksich -tigt werden, wird zusätzlich eine ↑ Aufwandsabschätzung auf dem Task-Zettel festgehalten. Im Beispiel wird eine relative Schätzung des Aufwands in Form von den T-Shirt-Größen S, M und L vorgenommen. Die User-Storys und Tasks der ersten Iteration werden nun auf die linke Seite des Project-Boards gehängt.Alles im Blick: Project-Board und Stand-up-MeetingsDas ↑ Project-Board dient als zentraler Informations- und Organisationsort des Projekts. Es visualisiert die Ziele und den Status der aktuellen Iteration und unterstützt zielgerichtete Diskussionen anhand der angebrachten User-Storys und Tasks. Zu Beginn einer Iteration befinden sich alle Karten auf der linken Seite. Sobald ein Schülerpaar mit einer Aufgabe beginnt, wird ein Klebezettel mit dem entsprechenden Task aus der To-do-Spalte genommen, mit Namens -kürzel versehen (sodass alle Beteiligten genau sehen können, wer welche Tasks übernommen hat) und in die Spalte «In Progress» gehängt. Sobald der Task be -arbeitet wurde, wird der Klebezettel nach rechts auf «Done» verschoben. Das Project-Board macht den Stand des Projektes sichtbar:Abbildung 3.4: Project-Board in einer IterationVor dem Project-Board finden auch die regelmäßigen ↑ Stand-up-Meetings statt, in denen zu Beginn einer Unterrichtsstunde organisatorische Aspekte der Projektdurchführung besprochen werden. Sie stellen eine geschickte Möglich-keit dar, den Stand des Projekts, das Geleistete der letzten Unterrichtsstunde und Probleme, aber auch die Ziele des Tages zu besprechen. In der Regel sind diese Meetings so kurz, dass es sich gar nicht lohnt, sich erst hinzusetzen. Durch das Stehen bemüht sich auch jeder, sich kurz zu fassen und sich auf das Wesent -Im Unterrichts einsatz42liche zu beschränken. Reihum beantwortet hier jede Schülerin und jeder Schüler die Fragen: Was habe ich seit dem letzten Mal getan? Was werde ich heute in Angriff nehmen? Welche Probleme hatte ich oder sehe ich auf mich zukommen und welche Hilfe brauche ich?Schritt für Schritt vom Basic Pengu zum Advanced PenguNachdem die Planungsphase der ersten Iteration abgeschlossen und das Pro -ject-Board eingerichtet wurden, beginnt nun die arbeitsteilige Implementie -rung, bei der die Schülerinnen und Schüler immer paarweise (↑ Pair-Program -ming) an einem selbst gewählten Task arbeiten. Während ein Schüler oder eine Schülerin die aktiv programmierende Rolle übernimmt und dabei das Vorgehen und die Arbeitsschritte erläutert, behält der oder die andere das große Ganze im Blick und stellt ggf. Fragen, sodass fortwährend kommuniziert wird. Alle 15 Mi-nuten werden die Rollen getauscht. Bevor ein Task als erledigt gekennzeichnet werden darf, wird der resultierende Quelltext getestet. Am Ende der Implemen -tierungsphase wird der neue Quelltext in die bestehende Codebasis integriert. Eine Viertelstunde vor Ende der Doppelstunde sind alle drei User-Storys fertig umgesetzt und integriert, sodass das Team auch das Ergebnis ausgiebig testen kann. Sind alle Tests erfolgreich bestanden, ist der erste ↑ Prototyp des Pen -gu-Spiels fertig und die somit vollständig bearbeiteten User-Storys können am Project-Board in die Spalte «Done» gehängt werden.Ein Vorteil der iterativen Entwicklung ist es, dass die Schülerinnen und Schüler die Möglichkeit bekommen, Prototypen des Spiels in verschiedenen Entwicklungsphasen zu erstellen, auszuprobieren und dabei zu überprüfen, ob die Teilziele erreicht wurden. Im «Pengu»-Beispiel wird die erste Iteration be -stimmt durch die Herstellung der Grundfunktionalitäten des Spiels. Der Vorteil der iterativen Vorgehensweise wird unmittelbar deutlich: Bereits so früh im Projekt ist das Spiel «spielbar», der erste Erfolg kann bereits getestet und gegen -über Mitschülerinnen und Mitschülern und der Lehrkraft demonstriert werden. Sogar das Hinzufügen weiterer Spielideen (Features) oder ein Umpriorisieren ist vor einer Iteration noch möglich, was bei linearen Vorgehensmodellen nahezu ausgeschlossen wäre. Zum Abschluss jeder Iteration kann und sollte reflektiert werden, wie gut der Prozess bis dahin gelaufen ist und ob sich das Team auf dem richtigen Weg befindet (↑ Reflexion).In den weiteren Iterationen kommen nun nach und nach, der zuvor be -stimmten Priorität entsprechend, die weiteren in den User-Storys festgehalte -nen Funktionalitäten hinzu: das Bewegen der Wolke, Überqueren des Abgrunds und Springen in Iteration 2, Punktezähler, Sternenhimmel und Sternesammeln 3.1 Best Practice – das Spiel «Pengu»43in Iteration 3 sowie das Berücksichtigen verschiedener Leben und das Gewinnen in Iteration 4. Erweiterungen des Spiels wie beispielsweise die Eiszapfen (Ab -bildung 3.5) können als niedrig priorisierte User-Story je nach Zeitvorrat gegen Projektende umgesetzt werden oder fallen weg. Abbildung 3.5:  Aufteilen einer umfangreichen User-Story in TasksIn der Umsetzung des Spiels werden innerhalb jeder Iteration jeweils alle Pha-sen des klassischen Softwareentwicklungsprozesses (Anforderungsanalyse, Entwurf, Implementieren, Integrieren und Testen) einmal durchlaufen. Die Aus der Sicht des Kunden:Titel:  EiszapfentrefferBeschreibung:  Eiszapfen fallen zufällig nach unten und verschwinden, wenn sie die Klippe oder den Boden erreichen. Trifft ein Eiszapfen den Pinguin, so ist der Pinguin für zwei Sekunden bewusstlos.Priorität:  120Implementiere das Fallen der Eiszapfen. Lösche Eiszapfenobjekte, die die Klippe oder den unteren Spielfeldrand erreichen.MErzeuge fortlaufend an zufälliger Stelle am oberen Spielfeld -rand Eiszapfen­objekte.MErzeuge die Klasse  E i s z a p f e n .   SImplementiere zu einem Treffer wäh -rend des Sprungs eine verzögerte Re -aktion nach dem Sprung. LVerhindere die Re -aktion, wenn die Attribute «faellt» oder «springt» des Pinguins «true» sind. SImplementiere Reaktion des Pinguins auf einen Eiszap-fentreffer. Der Pinguin kippt um und reagiert ca. 2 Sek. nicht. Das Attribut «ist bewusstlos» wird auf «true» gesetzt. LAus der Sicht des Entwicklers:Im Unterrichts einsatz44Schülerinnen und Schüler erhalten entsprechend die Gelegenheit, diesen Pro -zess mehrfach in einem Projekt zu bestreiten und aus Erfahrungen zu lernen.PraxiserfahrungenDas beschriebene Spiel wurde inzwischen an verschiedenen Schulen in der Un-terrichtspraxis, aber auch in Lehrerfortbildungen eingesetzt. Dabei war das Spiel als Unterrichtsgegenstand sehr motivierend und die Methoden erwiesen sich als sehr flexibel und für Projekte unterschiedlichster Ausprägungen geeignet. So können sowohl die Lerngruppen, Vorkenntnisse als auch die zeitlichen Ge -gebenheiten ganz unterschiedlich sein, weshalb in diesem Beispiel auf die Kon-kretisierung der Rahmenbedingungen verzichtet wurde. Schwierigkeiten erga-ben sich mitunter aus der Notwendigkeit, die agilen Praktiken zuerst selbst erfassen zu müssen, z.B. wie User-Storys formuliert sein sollen und wie man diese in Tasks überführt. Mit diesem Beispiel ist nun eine Vorlage gegeben, die zur Orientierung für das Erlernen agiler Techniken und Praktiken und die Durchführung agiler Softwareentwicklungsprojekte im Informatikunterricht dienen kann.Titel:  Spielfläche (10)Titel:  Pinguin bewegen (20)Titel:  Pinguin fällt (30)Titel:  Pinguin überquert AbgrundBeschreibung:  Der Pinguin kann auf der Wolke stehen und bewegt sich mit ihr mit. Der Spieler kann ihn auf der Wolke wie auf den Klippen nach rechts und links bewegen.Priorität:  50Titel:  Wolke, die sich bewegtBeschreibung:  Eine Wolke bewegt sich automatisch zwischen den Klippen hin und her.Priorität:  40Titel:  Pinguin springtBeschreibung:  Der Spieler kann den Pin -guin springen lassen. Wenn der Pinguin fällt, reagiert er nicht.Priorität:  603.1 Best Practice – das Spiel «Pengu»45Abbildung 3.6:  Weitere User-Storys zum Pengu-SpielTitel:  PunktezählerBeschreibung:  Das Spiel hat einen  Punktezähler.Priorität:  70Titel:  SternenhimmelBeschreibung:  Es erscheinen Sterne am Himmel, die dort unterschiedlich lange stehen und dann wieder verschwinden.Priorität:  80Titel:  Sterne sammelnBeschreibung:  Der Pinguin kann Sterne einsammeln und erhält dafür Punkte. Dazu kann er jetzt höher springen.Priorität:  90Eiszapfentreffer (120)Titel:  Pengu hat drei LebenBeschreibung:  Der Pinguin hat drei Leben. Wenn er von der Klippe fällt, verliert er ein Leben und beginnt wieder oben auf der Klippe. Hat er kein Leben mehr, ist das Spiel zu Ende.Priorität:  100Titel:  Pengu gewinntBeschreibung:  Sobald der Spieler mehr als 15 Punkte hat, erscheint auf der rechten Klippe eine Tür. Erreicht der Pinguin die Tür, ertönt eine Fanfare und der Spieler hat gewonnen.Priorität:  110Im Unterrichts einsatz463.2 Im Anfangsunterricht durch Gestaltungs-freiräume begeistern Ein Unterrichtsprojekt von Andreas GrammSteckbriefKlassenstufe: 9 (Gymnasium, Wahlpflichtkurs)Klassenstärke: 20 Schülerinnen und SchülerThema: Jump-’n’-Run-SpielBesonderheiten: Kollaboration lernen, «geplant-unfertiges» Produkt,  Berufsbild Informatiker/Informatikerin Agile Praktiken: Project-Board, User-Storys, Prototypen, Stand-up-Meeting, Pair-Programming, ReflexionProgrammiersprache/Entwicklungsumgebung: ScratchDauer und Frequenz: sechs Wochen mit einer Doppelstunde pro WocheZeitlicher Ablauf:   Im Anfangsunterricht durch Gestaltungsfreiräume begeistern 47Gerade im Anfangsunterricht geht es mir darum, erlebbar zu machen, dass im Beruf der Informatikerin/des Informatikers das Gestalten von Produkten und das Arbeiten im Team im Vordergrund stehen. Dabei ist es wichtig, sich gut zu organisieren, um gemeinsam zu einem tollen Ergebnis zu kommen. Ziel und Mo -tivation war es, den Schülerinnen und Schülern früh im Lernprozess zu zeigen, wie sie mit ihrem Wissen schon selbst etwas schaffen können, und sie so für das Fach zu begeistern und ihnen ein inspirierendes Berufsbild zu vermitteln.Ausgangspunkt meiner Projektgestaltung war die Frage, wie ich im ge -gebenen zeitlichen Rahmen Vorgehensweisen bei der Entwicklung größerer Softwaresysteme für Lernende auf motivierende Art und Weise umsetzen und erlebbar machen kann. Ein typisches Problem, das ich in meinen bisherigen plangetriebenen, wasserfallähnlichen Projekten beobachtet habe, ist, dass Schü -lerinnen und Schüler mit ihrer Erfahrung kaum Anforderungen sinnvoll analy -sieren und Software entsprechend entwerfen konnten. Bis sie über die Voraus -setzungen verfügen, um solche Projekte anzugehen, ist bei vielen das Interesse für das Fach schon der Auffassung gewichen, dass Informatik viel zu schwer sei. Unzufrieden war ich auch damit, dass Tests aus Zeitgründen zurückgestellt werden mussten und für eine Reflexion trotzdem viel zu wenig Zeit blieb.Deshalb fand ich ein iteratives Vorgehen sehr verlockend. Man hat hierbei kurze Zyklen, sodass die Schülerinnen und Schüler in der ersten ↑ Iteration, den agilen Prozess und die agilen Praktiken kennenlernen und das erste interessante Zahnrädchen einer größeren Lösung entwickeln können. In den nächsten Itera -tionen kommen Schritt für Schritt weitere Zahnrädchen dazu. Dieses iterative Vorgehen ist mehr als die Aneinanderreihung von Umsetzungen kleiner, unab -hängiger Probleme, denn die Teile fügen sich zu etwas Größerem zusammen. Wenn dabei sechs Schülerinnen und Schüler in Kooperation arbeiten, entsteht schnell etwas Spannendes. Das Endprodukt muss nicht perfekt sein, es muss nicht jede Idee umgesetzt sein. Trotzdem haben die Schülerinnen und Schüler einen lauffähigen ↑ Prototyp, den sie selbst gemeinsam entwickelt haben, und sie wissen, dass und wie es weitergehen könnte. ProjektvorbereitungRahmenbedingungenFür die Schülerinnen und Schüler war es ihr erstes Schuljahr mit Informatikun -terricht. Das Projekt wurde in der frühen Phase des Kurses mit Scratch durch-geführt und es sollten exemplarische Komponenten eines Jump-’n’-Run-Spiels entwickelt werden. Entgegen der Planung musste das Projekt zweimal für einen längeren Zeitraum unterbrochen werden. So fanden je eine Doppelstunde für Im Unterrichts einsatz48Vorübungen im Herbst und für die Formulierung der User-Storys im Januar statt sowie vier Doppelstunden für die Realisierung im Frühjahr.Agile Praktiken in der VorbereitungVor dem Projekt hatten die Schülerinnen und Schüler grundlegende Program-mierkenntnisse mit Scratch erworben und mit Kollisionen und Variablen wich -tige Konzepte für das Spiel kennengelernt. Sie konnten auch Zustände und Ab -standsveränderungen (z.B. die Anzahl der «Leben» einer Spielfigur) speichern und wussten, wie eine Kollision als Ereignis erfasst werden kann. Auf dazu -gehörige Arbeitsblätter mit erklärenden Beispielen konnten sie im Projekt zu-rückgreifen. Außerdem wurde vorbereitend auf das Projekt geübt, wie der Code einzelner Figuren (Sprites) in Scratch exportiert und importiert wird, wobei deutlich wurde, dass eine Quelltextintegration relativ einfach abläuft, solange man nicht in gleichen Figuren arbeitet. Diese Übung haben die Schülerinnen und Schüler im ↑ Pair-Programming durchgeführt und damit diese Praktik bereits vorbereitend geübt.Warm-up-SpielAls Einstieg wurde mit allen 20 Schülerinnen und Schülern gemeinsam das Ball-Point-Game (↑ agile Spiele) gespielt, bei dem sie einen Heidenspaß hatten und eine deutlich sichtbare Optimierung erzielten. Es war eine gelungene Mo -tivation, die zeigte, wie wichtig Absprachen für eine erfolgreiche Kooperation sind und wie man einen iterativen Prozess durch stringentes Planen, Handeln und Reflektieren optimieren kann.ProjektdurchführungThemenwahl und TeamsDer Kurs wurde nun in drei etwa gleich große Gruppen geteilt, wobei die Schü-lerinnen und Schüler selbst die Teamzusammensetzung wählten. Sie waren von Anfang an interessiert und konnten ihre Erfahrung mit Computerspielen beim Sammeln und Diskutieren erster Ideen für ihr Jump-’n’-Run-Spiel einbringen. Anschließend formulierten sie erste User-Storys, die sie in einer weiteren Dop -Im Anfangsunterricht durch Gestaltungsfreiräume begeistern 49pelstunde konkretisierten, um weitere ergänzten und am ↑ Project-Board be -festigten. Auf eine Unterscheidung zwischen ↑ User-Storys und ↑ Tasks wurde in diesem Projekt verzichtet, da sich in Scratch die Beschreibung aus Kunden- und Entwicklersicht wenig unterscheidet. Zusätzlich wurde darauf geachtet, dass die User-Storys klein waren, also nur wenige, einfache Aufgaben umfass -ten. Eine ↑ Aufwandsabschätzung erfolgte relativ über die T-Shirt-Größen S, M, L: Abbildung 3.7:  Aufwandseinschätzung mit Hilfe von den T-Shirt-Größen S (small), M (middle) und L (large)Eine logische Bearbeitungsreihenfolge ergab sich im Verlauf von selbst, d. h. auf ein Priorisieren vorab konnte verzichtet werden, wodurch die Vorarbeiten weiter verkürzt wurden.Stand-up-Meetings und PlanungDie Umsetzung erfolgte in zwei Iterationen von jeweils zwei Doppelstunden. Die zu Beginn jeder Doppelstunde stattfindenden ↑ Stand-up-Meetings gaben den Lernenden eine Struktur vor, in der sie den Stand ihrer Arbeit selbstständig rekapitulieren konnten. Anschließend planten sie für die kommende Doppel -stunde, sodass es entsprechend zwei Planungen pro Iteration gab. Dieser Ablauf mit zwei Planungen verhinderte, dass sich die Schülerinnen und Schüler Teile ihrer Planung bis zur nächsten Doppelstunde merken mussten, und ermöglichte gleichzeitig, nur jede zweite Doppelstunde zu integrieren und einen lauffähigen Prototyp zu erzeugen. In den Planungen konnten weitere User-Storys ergänzt werden, soweit dies die Umsetzung der Spielidee erforderlich machte. Falls am Ende einer Doppelstunde nicht alle ausgewählten User-Storys umgesetzt wa -ren, wurden sie in die Folgestunde geschoben, auch wenn sie so nicht mehr Teil des jeweiligen Prototyps waren. Genauso gut konnten Programming-Pairs auch nicht ausgewählte User-Storys vorziehen, wenn zu wenig Aufgaben geplant waren. Titel:  SpielendeBeschreibung:  Wenn die Figur ihr letztes Leben verliert, fragt diese: «Wie heißt du?». (Dann kommt der eingegebene Name in die Highscore ­Liste.)Aufwand:  MIm Unterrichts einsatz50Fragen und Probleme, die sich während der Umsetzung ergaben, konnten von den Teams in zusätzlichen Spontan-Meetings vor dem Board gelöst wer -den. Zwei oder drei Mal traten im Projektverlauf organisatorische bzw. fachliche Probleme auf, die entweder alle hatten oder auf die sie in Kürze stoßen würden. In diesen Situationen habe ich das Thema, beispielsweise das Abspeichern der Dateien in einem für alle zugänglichen Netzlaufwerk, zu Beginn der folgenden Doppelstunde kurz im Plenum aufgegriffen und, wenn es sich anbot, von einzel -nen Teams erarbeitete Lösungen für das Problem dem gesamten Kurs vorstellen lassen.Pair-Programming und Einzelarbeit zu HauseDie konkrete Umsetzung mit Scratch erfolgte im Pair-Programming, wobei der Navigator aufgrund der wenigen Konzepte und Datenstrukturen, die bekannt waren, weniger auf alternative Umsetzungsmöglichkeiten der konkreten Sto -ry, sondern mehr auf das Zusammenspiel der unterschiedlichen arbeitsteilig umgesetzten Spielereignisse achten musste. Wichtig war auch, dass der Dri -ver stets seine Ideen bei der Umsetzung ausdrückte und die Schülerinnen und Schüler so lernten, ihr Vorgehen beim Programmieren mit Worten zu beschrei-ben und kritisch zu hinterfragen. Wenn sie wollten, konnten die Schülerinnen und Schüler sich ihr Projekt auf einen USB-Stick kopieren und daran zu Hause weiterarbeiten. Die dabei umgesetzten Funktionalitäten mussten in der folgen -den Doppelstunde dem Team im Stand-up-Meeting vorgestellt werden, ehe das Team entschied, ob sie in das Projekt integriert werden durften.Teamarbeit und TransparenzFast alle Schülerinnen und Schüler haben sich für ihr Projekt mitverantwortlich gefühlt. Einzelne, die sich herausnehmen, gibt es wahrscheinlich immer, aber hier ist ein solches Verhalten deutlich aufgefallen und es war für diejenigen unangenehmer als gewöhnlich. ReflexionZum Abschluss des Projekts wurden die letzten Prototypen der drei Teams, die, wie von mir zum Projektstart angekündigt, keine komplette Umsetzung des jeweiligen Spiels waren, im Plenum vorgestellt, zusammen mit einer zu Hau-se vorbereiteten individuellen ↑ Reflexion des Projekts. Dabei berichteten alle Schülerinnen und Schüler, viel über Softwareentwicklung und Kooperation im Team gelernt zu haben. Letzteres wurde übereinstimmend wie folgt zusammen-gefasst: Absprachen treffen ist wichtig, aber mühsam und teilweise schwierig. Aber ohne Absprachen kann eine produktive Zusammenarbeit nicht funktionie -Im Anfangsunterricht durch Gestaltungsfreiräume begeistern 51ren. Neben dieser Erfahrung war die Präsentation der Arbeitsergebnisse aber vor allem von Stolz auf das Erreichte geprägt.Bewertung der kooperativen Projektarbeit Eine Herausforderung stellt die ↑ Bewertung von Leistungen dar, die von der Gruppe bzw. individuell in einem Projekt erbracht werden, da zwei unterschied -liche Interessen kollidieren: Zum einen will ich die Schülerinnen und Schüler befähigen, etwas zu tun, und gleichzeitig messe ich, was sie tun. Ein weiterer Punkt ist die Frage, welchen Wert eine individuelle Idee hat und welcher Wert der Fähigkeit der Gruppe, sie erfolgreich umzusetzen, zukommt. Nachdem die Schülerinnen und Schüler ihre Projekte bereits weitgehend selbstorganisiert durchgeführt hatten, war es mir wichtig, sie auch in den Prozess der Bewertung einzubeziehen. Gemäß dem Prinzip einer Poolnote bekam jede Gruppe von mir entsprechend ihrer Gesamtleistung eine Anzahl von Punkten. Die Aufgabe der Gruppe bestand nun darin, sich auf eine Verteilung der Punkte auf die Grup -penmitglieder zu einigen und sich so mit der Frage auseinandersetzen, welche Fähigkeiten und Fertigkeiten jedes einzelnen Mitgliedes die Gruppe im Projekt besonders gut vorangebracht haben und welche eher hemmend waren. Die so erzielte Note umfasste sowohl die Leistung bezüglich des Produkts als auch den Beitrag zur Zusammenarbeit.Zwei Gruppen haben sich sehr schnell geeinigt, die Punkte gleich aufzuteilen. An dieser Stelle war es mir nicht wichtig, einzugreifen oder mir die Überle -gungen darlegen zu lassen, da sich meiner Beobachtung nach alle für ein gu -tes Arbeitsergebnis engagiert hatten. Interessant war eine Gruppe, in der es Spannungen gegeben hatte: Eine leistungsstärkere Schülerin meinte, dass ihr Beitrag mehr Anerkennung finden müsste, die anderen Gruppenmitglieder betonten dagegen, dass erst die Tatsache, dass sie der Gruppe eine Überarbei -tung zugesagt, das aber nicht eingehalten hat, ein besseres Gruppenergebnis verhindert hat. Nach langer Diskussion mit wenig Verständnis für die jeweils andere Position haben sie sich als Kompromiss auf die gleiche Punktzahl für alle Gruppenmitglieder geeinigt. Die Schülerinnen und Schüler haben damit eine sehr ambivalente Situation bewältigt, die ihnen auch im späteren Leben begegnen wird. Beobachtungen und Erfahrungen Durch die agile Herangehensweise gelang es meinen Schülerinnen und Schü -lern tatsächlich, bereits früh im Lernprozess gemeinsam, mit Begeisterung und Spaß etwas Tolles zu schaffen. Da sich im Projekt der Ablauf einer Iteration Im Unterrichts einsatz52wiederholte und eine klare Struktur hatte, musste ich nicht wie früher in was -serfallähnlichen Projekten moderieren und den nächsten Schritt vorgeben. Die Schülerinnen und Schüler arbeiteten eigenständiger und zunehmend selbst -bewusster. Die positive Bestärkung der Selbstwirksamkeit durch die iterative Vorgehensweise und die früh und regelmäßig in den Prototypen sichtbaren Arbeitsergebnisse sehe ich sehr positiv. Die regelmäßigen und häufigen Anläs -se zur Kommunikation in der agilen Arbeitsform boten den Schülerinnen und Schülern, die zum größten Teil nicht deutscher Herkunftssprache waren, zudem Gelegenheit zur Verbesserung ihrer Sprachkompetenz im Sinne einer Sprach -bildung im Fachunterricht.Was mir gefehlt hat, war, dass die Schülerinnen und Schüler während des Projekts in fachlicher Hinsicht nicht nur bekannte Fähigkeiten ausbauen und vertiefen, sondern sich im Rahmen des Projekts auch neue Konzepte erarbeiten. Im nächsten Projekt werde ich daher Anregungen bereitstellen, die die Erarbei -tung neuer Fachkonzepte initiieren.Für mich sehr entlastend war, dass von Anfang an klar kommuniziert war: Wir werden nur ein Stück des Spiels implementieren, es wird funktionieren, aber nicht ausgereift sein. Es bestanden weder Anspruch noch Notwendigkeit, in der gegebenen Zeit alle Funktionalitäten umzusetzen, um ein sinnvolles Produkt zu haben. Auch wenn so nur kleine Funktionen entstanden sind: Die Schüle -rinnen und Schüler haben erfahren, dass und wie sie gemeinsam selbst Infor-matiksysteme erschaffen und nach ihren eigenen Wünschen und Interessen gestalten können, und waren nun hoch motiviert, weitere Themengebiete der Informatik zu erarbeiten. Insofern ist die Entscheidung, derartige Projekte früh im Schuljahr durchzuführen, sehr gut, weil es bei den Lernenden eine positive Einstellung zum Fach erzeugt. Die agilen Methoden, mit denen ich dieses Ziel tatsächlich erreichen konnte, sind für mich deshalb eine wirkliche Bereicherung. In der Oberstufe komplexe Anwendungssoftware agil entwickeln533.3 In der Oberstufe komplexe Anwendungs-software agil entwickelnEin Unterrichtsprojekt von Peter BrichzinSteckbriefKlassenstufe: 11 (Gymnasium, Wahlpflichtunterricht)Klassenstärke: 20−25 Schülerinnen und SchülerThema: Entwicklung einer Anwendungssoftware mit grafischer Benutzer -oberfläche, persistenter Datenspeicherung und dynamischer DatenstrukturBesonderheiten: hohe Komplexität, stark leistungsinhomogene Schülergrup-pen, thematische Freiheit, methodische Varianten: Student-Story, Model -ling-Story, digitales Project-Board Agile Praktiken: Iterationen, Project-Board, User-Storys, Tasks, Prototypen, Stand-up-Meeting, Pair-Programming, Repository, Testen, Timeboxing, Refle-xion, RefactoringProgrammiersprache/Entwicklungsumgebung: Java/BlueJ, Java Editor, IntelliJ oder EclipseDauer und Frequenz: acht Wochen mit drei Stunden pro WocheZeitlicher Ablauf:   Software (nach dem Wasserfallmodell) vollständig zu planen, dann einzelne Komponenten umzusetzen, diese zusammenzuführen und zu testen, ist eine sehr anspruchsvolle Aufgabe, die viel Erfahrung voraussetzt. Schülerinnen und Schüler machen diese Erfahrung nur sehr selten: Selbst den Leistungsstärksten Im Unterrichts einsatz54bereitet der Entwurf erhebliche Schwierigkeiten und die anderen können sich nur wenig einbringen. Deshalb verpufft leicht die Begeisterung für die Entwick -lung einer eigenen Software, wenn am Anfang erst zwei bis drei Wochen geplant wird. Daneben gibt es noch eine weitere kritische Stelle: das Zusammensetzen typischer Komponenten wie Logik, grafischer Benutzeroberfläche und Daten -haltung. Egal wie oft man als Lehrkraft die Wichtigkeit guter Schnittstellen -absprachen und eines rechtzeitigen Zusammensetzens betont, tendieren die Schülerinnen und Schüler dazu, das Zusammensetzen zu verschieben, weil sie mit ihren Komponenten noch nicht zufrieden sind. So musste ich mehrfach miterleben, wie durch das späte Erkennen von unzureichenden Schnittstellen-beschreibungen aufwendige Korrekturen notwendig wurden und die verbleiben -de Zeit (bis zum Schuljahresschluss) nicht reichte, um darauf zu reagieren. Das resultierende unfertige Ergebnis, eine nur in Teilen laufende Software, ist nicht nur für die Schülerinnen und Schüler unbefriedigend, sondern natürlich frage ich mich als Lehrer auch, wie ich den Rahmen verbessern kann. Eine stärkere Steuerung und Führung von meiner Seite aus ist keine Option, denn wesentliche Ziele einer Projektarbeit sind sich selbst zu organisieren, eigene Entscheidungen zu treffen und Verantwortung zu übernehmen. Das oben geschilderte Scheitern beinhaltet eine oft (schmerzhafte) Erfahrung, die im Lernprozess aber sehr hilf -reich sein kann. Damit jedoch am Ende ein Erfolg und damit Begeisterung für das Erstellen einer Software im Team steht, sollten (unvermeidbare) Irrwege und ihre Reflexion möglichst früh im Projektverlauf stattfinden. Genau dies ist einer der Vorteile eines iterativen Vorgehens agiler Projekte mit einem schritt-weisen Planen, einer frühen Integration und dem Lernen aus Fehlern. Weitere Vorteile sind eine höhere Transparenz des Projektstands und Erfolgserlebnisse durch funktionsfähige Prototypen.ProjektvorbereitungRahmenbedingungenMittlerweile zum dritten Mal habe ich ein Softwareprojekt in der Oberstufe agil angeleitet. Die Schülerinnen und Schüler bringen als Vorwissen einerseits aus Jahrgangsstufe 10 Grundlagen zur objektorientierten Modellierung und Pro -grammierung mit, andererseits aus Jahrgangsstufe 11 praktische und theore -tische Kenntnisse zu den Datenstrukturen Liste, Baum und Graph. Der mit 26 Stunden ausgewiesene abschließende Lehrplanpunkt «Softwaretechnik» ermög -licht eine ca. achtwöchige reine Projektphase bei drei Stunden Unterricht pro Woche. Die Leistungsstärken der Schülerinnen und Schüler waren immer sehr heterogen. Einige brachten bereits Erfahrungen, z.B. in der Programmierung In der Oberstufe komplexe Anwendungssoftware agil entwickeln55grafischer Benutzeroberflächen und der Verwendung professioneller Entwick -lungsumgebungen, ein, für andere war es bereits eine Herausforderung, auch kleine Teilaufgaben innerhalb des Teams selbstständig zu lösen. Auf Eigen-initiative der Leistungsstärkeren nutzt ein zunehmender Teil der Schülerinnen und Schüler im Projekt auch IntelliJ oder Eclipse, weil dort die automatische Codegenerierung, die Einbindung von Bibliotheken und das Refactoring leichter sind als in den sonst im Unterricht verwendeten didaktischen Entwicklungsum -gebungen BlueJ und JavaEditor.Agile Praktiken in der Vorbereitung In der Mittelstufe werden (bisher) bei uns Projekte nicht agil durchgeführt, entsprechend sind agile Praktiken und Techniken für die Lernenden neu. Ein wesentlicher Schlüssel für einen Projekterfolg ist meiner Meinung nach das Kennenlernen und Einführen einzelner Techniken bereits im Vorfeld. Dies ist im regulären Unterricht ohne Projektkontext für die Bausteine ↑ User-Sto -rys, ↑ Tasks, ↑ Prototypen, ↑ Pair-Programming, ↑ Testen und ↑ Repositorys sehr gut möglich.User-Storys: Bei jeder anwendungsbezogenen Aufgabe im regulären Unterricht können zu Beginn eine Kundensicht eingenommen und Anforderungen in All-tagssprache formuliert werden.Tasks: Teilaufgaben aus Entwicklersicht ergeben sich automatisch bei der Im -plementierung von User-Storys.Pair-Programming: Peer-to-Peer-Wissenstransfer, indem für einzelne Stunden Leistungsstärkere mit Leistungsschwächeren ein Paar bilden und dabei der Leis -tungsschwächere zur Rolle des Drivers verpflichtet wird.Prototyping: Im folgenden Kasten wird ein exemplarisches Prototyping prä -sentiert, das im Unterricht (passend zum für mich gültigen Lehrplan) neue informatische Inhalte im Anwendungskontext einer Patientenverwaltung für ein Wartezimmer vergegenständlicht. Parallel zu den Lerninhalten wird über mehrere Wochen im Kurs sukzessive eine einfache Software entwickelt.Im Unterrichts einsatz56Beispiel eines Prototypings Prototyp 1: Speicherung von Patientendaten in einem statischen Array mit den Zu-griffsmöglichkeiten, vorne einen Patienten aus der Warteschlange zu entnehmen und hinten einen neuen einzufügen.Prototyp 2: Eine dynamische Warteschlange, in der Objekte der Klasse PATIENT je-weils eine Referenz auf den nachfolgenden Patienten haben.Prototyp 3: Durch die Einführung einer Klasse KNOTEN wird die Struktur (Warte -schlange) vom Inhalt (Patient) entkoppelt.Prototyp 4: Anforderungen, z.B. zum Einfügen von Notfallpatienten, führen zu neuen Methoden und der Verallgemeinerung der Datenstruktur zu einer Liste.Prototyp 5: Umsetzung der Datenstruktur Liste mit dem Entwurfsmuster Kompo -situm.Hinweis : Aus Sicht der Softwareentwicklung ist der Prototyp 5 eher ein ↑ Refactoring.Abbildung 3.8:  Prototyping für eine PatientenverwaltungTesten: Die Qualitätskontrolle gehört bei Lehrplaneinheiten mit Programmieren zum Informatikunterricht dazu. In der Oberstufe bietet es sich beispielsweise an, dass die Lehrkraft Testklassen verteilt und Schülerinnen und Schüler durch das Ausführen von Testfällen die Qualität ihrer Programme selbst überprüfen können. Sukzessive können die Schülerinnen und Schüler auch eigene Testklas -sen schreiben. Auch der Einsatz eines Debuggers ist zu empfehlen, weil er ein Verständnis für den dynamischen Ablauf eines Programms schafft und bei der Fehlersuche hilfreich ist.Repositorys: Versionskontrollsysteme können im Unterricht bereits zur Ver -teilung von Programmgerüsten und Musterlösungen verwendet werden. Au -ßerdem lässt sich durch die Vorgabe einer abstrakten Oberklasse der Vorteil verteilten Arbeitens sehr schön demonstrieren: Wenn in einer Klasse mit 20 Schülerinnen und Schülern jede und jeder 15 Minuten für das Schreiben einer Unterklasse benötigt, dann hat man nach den 15 Minuten nicht nur eine, son-dern 20 verschiedene Unterklassen. Wenn diese gesammelt und für alle sichtbar vorliegen, ist das beeindruckend.Für ein Vertiefen dieser agilen Techniken und Praktiken fehlt meist die Zeit, aber bereits dieser erste Einstieg ermöglicht zu Projektbeginn eine höhere Konzen-tration auf Inhaltliches.In der Oberstufe komplexe Anwendungssoftware agil entwickeln57Warm-upDie Schülerinnen und Schüler erhielten zwei methodisch unterschiedliche Ein -führungen in die agile Projektorganisation. Zunächst gab ein Kurzvortrag von knapp 20 Minuten einen Überblick über die iterativ-inkrementelle Vorgehens -weise als zentralen Prozessgedanken, die Planung von ↑ Iterationen mithilfe von User-Storys und Tasks, Prototypen als Ergebnisse sowie die Methodenbau-steine ↑ Timeboxing und Reflexionstreffen (↑ Reflexion). Als zweiten Impuls wählte ich ein praktisches agiles Arbeiten. Dafür eignen sich ↑ agile Spiele: Mehrfach habe ich die Marshmallow Challenge durchgeführt, um das Prototyping begreifbar zu machen. Beim letzten Kurs bin ich aber dazu übergegangen, den Schülerinnen und Schülern stattdessen eine konkrete Auf -gabe zu geben, an der sie in sehr kurzer Zeit (75 Minuten) den agilen Prozess kennenlernen können. Jedes Team sollte ein eigenes Backlog mit priorisierten User-Storys für eine Lernkarten-Software erstellen. Zur ersten User-Story soll-ten Tasks skizziert und ggf. sogar die ersten Quelltextzeilen programmiert wer -den. Die Teams wurden zufällig zusammengestellt, um eingespielte Banknach-barn zu trennen. Ziel war es, mit einer anschließend stattfindenden Reflexion (20 Minuten) alle wesentlichen Bestandteile einer Iteration zu durchlaufen: eigenständige Planung in unterschiedlichen Detailgraden, Implementierung (war kein Schwerpunkt, weil die Schülerinnen und Schüler diese aus dem Un -terricht kennen) und eine Prozessreflexion. Trotz der extrem kurzen Zeit gab es gute inhaltliche Ergebnisse, wie die folgende Abbildung zeigt. Titel:  Karten erstellenBeschreibung:  Der Nutzer kann neue Lernkarten erstellen, indem er eine Frage und die zugehörige Antwort eingibt.Priorität:  10Titel:  Karten speichernBeschreibung:  Die Lernkarten werden dauerhaft gespeichert.Priorität:  15Titel:  Abfrage durchführenBeschreibung:  Bei einer Abfrage werden die Fragen in zufälliger Reihenfolge ge -stellt. Die eingegebene Antwort wird mit der Lösung verglichen.Priorität:  20Titel:  Gruppieren von KartenBeschreibung:  Jede Karte kann einem thematischen Bereich, z.B. Geschichte,  Jgst. 10, DDR zugeordnet werden.Priorität:  30Im Unterrichts einsatz58Abbildung 3.9:  Knapp formulierte User-Storys für eine Lernkarten-SoftwareDie Reflexion brachte die folgenden wichtigen Punkte hervor. Teilweise sind sie allgemeiner Art, teilweise als individuelle Anliegen meiner Schülerinnen und Schüler zu verstehen.• Bei der Formulierung von User-Storys sind Stichworte zu wenig.• Die aktive Beteiligung aller Teammitglieder ist wichtig. (Einige äußerten im Vorfeld die Sorge von Trittbrettfahrern im Projekt.)• Das unerklärte Einbringen von Konzepten, die über den bisherigen Unter -richt hinausgehen, grenzt Schülerinnen und Schüler mit weniger Program-miererfahrung aus. Das KISS-Prinzip ist eine mögliche Lösung für dieses Problem.• Mehrere Schülerinnen und Schüler äußerten den Wunsch, ein digitales Pro -ject-Board führen zu dürfen, um auch von zu Hause darauf Zugriff zu haben.• Die knappe Zeitvorgabe macht es notwendig, sich für einzelne Aufgaben Zeitrahmen zu setzen (↑ Timeboxing), um fokussierter zu arbeiten und «sich im Kreis drehende» Diskussionen zu beenden.• Zentrale Werte wie Respekt, Mut, Zielstrebigkeit, Einfachheit und Feedback werden angesprochen.Gegenüber einem agilen Spiel bestand der Vorteil diese Warm-ups darin, das bereits eine ganze Iteration inklusive Reflexion durchlaufen wurde. Zudem er-hielten die Schülerinnen und Schüler eine Vorstellung, wie die Arbeit in zufällig ausgewählten Teams mit unterschiedlichen Leistungsniveaus funktioniert. Im Gegensatz dazu stellt ein Einstieg durch ein agiles Spiel das Soziale und Emo -tionale stärker in den Vordergrund. Ich wähle den Einstieg inzwischen immer möglichst passend zu den Stärken und Schwächen der Schülerinnen und Schüler des jeweiligen Kurses.Titel:  Statistik ausgebenBeschreibung:  Am Ende einer Abfrage -runde wird eine Statistik des Ergebnisses ausgegeben.Priorität:  40Titel:  Karten bearbeiten und löschenBeschreibung:  Die Lernkarten können nachträglich bearbeitet bzw. gelöscht  werden.Priorität:  50In der Oberstufe komplexe Anwendungssoftware agil entwickeln59Projektdurchführung Themenwahl und TeamsDie Schülerinnen und Schüler waren frei in der Themenwahl. Einzige fachli -che Vorgaben waren, dass eine grafische Benutzeroberfläche, persistente Da -tenspeicherung und dynamische Datenstrukturen Bestandteile der Software sein müssen. Um die Themenwahl zu fokussieren, hatten vor Projektbeginn alle Schülerinnen und Schüler den Arbeitsauftrag, über einen Forumseintrag in der Lernplattform des Kurses ein Thema für das Projekt vorzuschlagen, was u.a. zu folgenden Themenvorschlägen führte: Spiele: Black Jack, Poker, Schach, Arcade-Game, Brettspiel TAC, Jump-’n’-Run, Rubiks-Cube-LöserAnwendungssoftware: individualisierte Anzeige des Vertretungsplanes auf dem Handy/Computer, digitales Hausaufgabenheft, Kassensystem für Pausenver -kauf, Wettprogramm für die Fußball-WM, Kochbuch, Reiseführer, Führerschein -training, Nachhilfevermittlung, eine Software für die Lehrmittelbibliothek und ein Vokabeltrainer mit einem Beispielsatz zu jeder Vokabel.Ich stellte die eingebrachten Vorschläge vor, kommentierte diese (beispielsweise sind reale Kunden wie bei der Bibliothekssoftware motivierend; eine Nachhilfe -vermittlung ist nur sinnvoll als Webservice, der aber erst im Lehrplan der Jahr-gangsstufe 12 Thema ist) und jedes Team konnte sich dann ein Thema wählen.Bei einer Teamgröße von sechs bis acht Mitgliedern musste ich pro Kurs drei Themen betreuen. Zur Gruppeneinteilung habe ich abhängig von der jeweiligen Lerngruppe folgende Verfahren erprobt, die jeweils unterschiedliche Vor- und Nachteile haben:• Gruppeneinteilung nach Themenwunsch, mit dem Vorteil, dass damit stark auf die Schülerwünsche eingegangen wird.• Leistungshomogene Gruppeneinteilung, bei der sich jeder in der Gruppe fachlich gleichermaßen einbringen kann und die Gefahr der Überforderung Einzelner durch technisch anspruchsvolle Lösungsansätze anderer gering ist; nach der Einteilung wählt die Gruppe ein Thema für sich aus.• Leistungsinhomogene Gruppeneinteilung, sodass pro Gruppe in etwa ein gleiches Verhältnis von Leistungsstarken und -schwachen vorhanden ist. Diese Variante hat den Vorteil des Wissenstransfers innerhalb der Gruppe, sowie eine höhere Erfolgsquote für ein lauffähiges Endprodukt bei allen Gruppen.Im Unterrichts einsatz60Nachdem nun die Teams und Themen stehen, kann das Projekt beginnen. Da Ziele und Umsetzung einzelner Methoden in den Kapiteln 4 und 5 ausführlich beschrieben werden, gehe ich im Folgenden nur auf Besonderheiten ein.User-Story und die Varianten Modeling-Story und Student-Story Der Beginn mit der (Grob-)Planung auf Ebene von User-Storys funktioniert sehr gut, weil sich alle unabhängig von ihrer Programmiererfahrung gut einbringen und die ersten Implementierungsschritte spätestens nach drei Schulstunden beginnen können. Jedoch ist bei zunehmender Prototyp-Größe die Zahl der Klas -sen nicht mehr so einfach zu überblicken bzw. kann es notwendig sein, dass eine sehr zentrale Klasse zeitgleich von mehreren Paaren verändert werden muss. Hieraus entsteht im Entwicklungsverlauf der Bedarf, einen Überblick über die Klassen, deren Schnittstellen und ihre Beziehungen zu bekommen. An diesem Punkt ist es sinnvoll, ein Klassendiagramm zu erstellen, welches die Grundlage für weitere Überlegungen und Besprechungen ist. In der Regel muss ich den Anstoß dazu geben. Passend zum agilen Projektablauf schlage ich dazu in einem Planungsmeeting vor, eine von mir als Modeling-Story bezeichnete besondere User-Story aufzunehmen. Im Nachgang zur Modellierung ist häufig ein Refac -toring nötig. Modellieren und Refactoring brauchen zwar Zeit, sodass in dieser Iteration weniger Funktionalitäten umgesetzt werden. Da das verteilte Arbeiten danach aber wieder leichter geht, weil die Aufgaben und Schnittstellen klarer sind, sehen die Schülerinnen und Schüler auch den Mehrwert.Ebenso ermuntere ich dazu, Student-Storys – spezielle User-Storys, in denen Wissen aufgebaut wird – über das Project-Board einzupriorisieren. Deren In -halte können Einarbeitung in neue Themen wie eine Datenbankanbindung sein oder aber auch der Wissenstransfer von Leistungsstärkeren zu -schwächeren. Da diese Lernprozesse Zeit benötigen, ist es wichtig, sie über das Project-Board transparent zu machen und dann auch nach Beendigung mit einem Setzen auf «Done» zu feiern.Iterationen und Prototypen lösen die SchnittstellenproblematikAls Iterationsintervall haben sich zwei Wochen (sechs Schulstunden) bewährt. Damit sind vier Iterationen möglich. Weniger Iterationen sind ungünstig, da die Teams bereits zwei Iterationen benötigen, um richtig produktiv zu werden (bspw. für die Teamentwicklung und Schwerpunktsetzungen der einzelnen Mit -glieder: Wer kann sich in welchem Bereich am besten einbringen?). Spätestens beim Prototyp nach der zweiten Iteration muss entsprechend der oben beschrie -benen Schnittstellenproblematik ein Zusammenführen der einzelnen Schichten erfolgen (Abbildung 3.10), da nur so ungenaue Schnittstellenabsprachen zwi -In der Oberstufe komplexe Anwendungssoftware agil entwickeln61schen Teilgruppen des Teams frühzeitig erkannt und korrigiert werden können. Das ist eine harte Vorgabe, die ich regelmäßig kommuniziere. Erstaunlicherwei -se wird sie von den Schülerinnen und Schülern besser angenommen, als es bis -her im wasserfallartigen Prozess der Fall war. Eventuell ist die Ursache der hö -heren Erfolgsquote auch die strukturell vereinfachte Selbstorganisation, die den Leistungsstärkeren Freiraum verschafft, um die Integration voranzutreiben. Abbildung 3.10: Inkrementelle Softwareentwicklung über mehrere SchichtenVom erweiterten zum digitalen Project-Board In meinen Projekten hat sich eine zusätzliche Spalte beim Project-Board be -währt, in der zu Beginn jeder Iteration ihr Ende eingetragen wird und dieses dadurch transparent dargestellt ist (↑ Timeboxing). Weiterhin gibt es einen Platz, in dem Fragen und Probleme (an die Lehrkraft) kommuniziert sowie Ide -en festgehalten werden können, die noch nicht über User-Storys einpriorisiert sind (Abbildung 3.11). Während das Board am Anfang meist sorgfältig aktualisiert wird, lässt dies im zunehmenden Verlauf oder bei Hektik nach. Hierauf muss die Lehrkraft ein Auge haben.Abbildung 3.11:  Modifiziertes Project-BoardIm Unterrichts einsatz62Zunehmend äußerten Schülerinnen und Schülern den Wunsch, ein digitales Project-Board zu führen. Von entsprechenden professionellen Werkzeugen rate ich ab, da sie eine Einarbeitungszeit erfordern und teilweise einen sehr starren Prozessablauf fest vorgeben. Mit kostenlosen Werkzeugen wie Trello oder den Zusatzfunktionalitäten zur Projektabwicklung in github habe ich dagegen be -reits positive Erfahrungen gesammelt. Als Lehrer kann ich die Schülerinnen und Schüler dahingehend beraten, dass den Vorteilen eines häuslichen Zugriffs und von elektronischen Klebezetteln, die nicht herunterfallen oder verloren ge -hen können, die Nachteile des reduzierten Erlebens des Umhängens und ggf. weniger Übersicht beim Stand-up-Meeting gegenüberstehen. Aus Lehrersicht schätze ich digitale Project-Boards sehr: Die Transparenz, wie aktiv ein Team oder einzelne Teammitglieder sind und an welchen Inhalten aktuell gearbeitet wird, bietet mir sehr konkrete Ansatzpunkte für Feedbackgespräche. Letztend-lich sollte in der Oberstufe das Team aber selbst über die Ausgestaltung des Boards entscheiden. Mit Meetings unterschiedliche Reflexionsprozesse initiierenBei den Meetings orientiere ich mich an der Praxis in Unternehmen: Im Stand-up-Meeting zu Beginn einer Unterrichtsstunde kommuniziert jedes Teammit-glied bzw. jedes Paar knapp und präzise, welche Aufgaben es bearbeitet hat und was es als Nächstes plant. Hier wird auch deutlich sichtbar, wer sich wie stark engagiert, ebenso zeigen sich unterschiedliche gruppendynamische Prozesse. Gegebenenfalls werden kurze Hinweise zum Lösungsweg ausgetauscht (insbe -sondere, wenn Schnittstellen betroffen sind). Aber ich achte stark darauf, dass eine maximale Dauer von 10 Minuten eingehalten wird.Davon abzugrenzen sind der zweiwöchentliche Rückblick auf die inhaltliche Arbeit im Review mit der Vorstellung des Prototyps sowie die prozessbezogene Retrospektive (↑ Reflexion in Review und Retrospektive) und auch die Iterati-onsplanung. Zeitlich müssen die Teams ein gutes Aufwand-Nutzen-Verhältnis finden: Wenn es im Team rumort, dann sind 20 Minuten Retrospektive sehr wertvoll, wenn es läuft, ist diese Zeit besser beim Implementieren aufgehoben. Abhängig von meinen Beobachtungen steuere ich einen Aspekt für die Retros -pektive bei, z.B. «Sind alle unabhängig von ihren Implementierungserfahrungen im Projekt angekommen und integriert?» oder «Wurde auf Zeitrahmen geachtet, um fokussiert einzelne Arbeitspakete mit Blick auf den Prototyp zu bearbeiten?»Mit Repositorys kollaborativ an komplexen Projekten arbeitenIn dem ersten von mir betreuten Oberstufenprojekt war es keine Seltenheit, dass ein gesamtes Team blockiert wurde, weil ein einzelnes Mitglied krank war oder In der Oberstufe komplexe Anwendungssoftware agil entwickeln63seinen USB-Stick mit der neuesten Version zu Hause vergessen hatte. Auch emp -fand ich es als Nachteil, dass am Ende einer Iteration oft leistungsstarke Schü-lerinnen und Schüler für längere Zeit damit beschäftigt waren, alle Quelltextbe -standteile des Teams zusammenzufügen, insbesondere weil die Integration eine wichtige informatische Kompetenz ist und jedes Paar hier (auch aus Fehlern) sehr viel lernen kann. ↑ Repositorys lösen diese Probleme und sind daher gerade bei umfangreicheren Softwareprojekten in einer größeren Gruppe ein wichtiges Werkzeug, um kollaboratives Arbeiten zu unterstützen. Da mittlerweile Versi -onsverwaltung auch direkt über typische schulische Entwicklungsumgebungen wie BlueJ und den JavaEditor möglich ist, nutze ich diese Technik. Sie erleichtert nicht nur die Arbeit der Schülerinnen und Schüler, sondern gibt mir auch jeder -zeit einen Einblick in den Aktivitätsgrad und in den aktuellen Stand. Beobachtungen und ErfahrungenLehrerrolle und Agile WerteDie verstärkte Selbstorganisation der Schülerinnen und Schüler ermöglicht mir als Lehrer einen Rollenwechsel. Als Beobachter kann ich gerade auch kommu-nikative und gruppendynamische Aspekte im Auge behalten, in einer Art Kun-denrolle Anforderungen und Hilfen über Student-Storys und Modelling-Storys einfließen lassen oder einfache technische Probleme aus dem Weg räumen. In der Anfangsphase ist es wichtig, (zu) hohe Ansprüche der Schülerinnen und Schüler an ihre Software ins Verhältnis zur Zeit von acht Wochen zu setzen. Zu den Hilfen gehört auch, immer wieder an Agile Werte zu erinnern, wie z.B. Einfachheit, Fokussiertheit, Mut, Dinge auszuprobieren, Fehler zu machen und Fragen zu stellen, sowie an den regelmäßigen Rollenwechsel beim Pair-Pro -gramming. Die Übersicht aus Abbildung 2.3 hängt bei uns an exponierter Stel-le im Computerraum. Bei recht unterschiedlichem Engagement der einzelnen Mitglieder eines Teams – diesbezüglich unterscheidet sich der Projektunterricht nicht vom normalen Unterricht – kann der Lehrer neben eigenen Rückmeldun-gen auch ein ↑ Feedback auf Teamebene initiieren. Die interne Organisation konnte jedes Team für sich frei gestalten. Bis auf wenige Ausnahmefälle, in denen sich Einzelne ausklinkten, weil sie das Fach nicht weiter belegen, übernahmen die Schülerinnen und Schüler recht selbstver -ständlich diese Verantwortung, beispielsweise die Gesprächsleitung, gegenseiti -ge Unterstützung, Aufgabenverteilung und Paarauswahl. Ein sehr positives Bei-spiel für eine solche individuelle Gestaltung war eine Gruppe, die durch selbst initiierte Teambesprechungen einen Wissenstransfer von einzelnen Paaren zu den anderen Gruppenmitgliedern bewirkte. Im Unterrichts einsatz64Projektergebnis und LernprozessDas Oberstufenprojekt habe ich bereits mehrfach durchgeführt, und da jedes Team anders arbeitet, sind meine Erfahrungen vielfältig. Agile Methoden sind kein Garant für ein Gelingen. So gab es eine Gruppe, die an mangelhafter Kommunikation und häufigen Absenzen der implemen -tierungsstarken Schülerinnen und Schüler, ohne den aktuellen Stand des Quelltextes weiterzugeben, scheiterte. In einem anderen Fall hatte ein zu en-gagiertes Teammitglied die Implementierung ohne Absprache mit dem Team in Einzelarbeit vorangebracht. Als Ergebnis war dann zwar ein Prototyp lauf -fähig, allerdings wurden damit verschiedene Beiträge anderer Teamkollegen ersetzt, die infolgedessen in den Papierkorb wanderten. Aufgrund des nur mit den Änderungen funktionierenden Prototyps fehlte den Teammitgliedern der Mut, entschieden ein Veto zu ergreifen. In diesem Fall kam leider die Retros -pektive zu spät, die Motivation im Team sank in den Keller. Als Lehrer habe ich Abbildung 3.12:  Ausschnitt des Klassendiagramms zum digitalen Hausaufgabenheft<<abstract>>TaskString descriptionCalendar deadlineint priorityLessonint lengthSubject subjectSubjectArrayList<Homework> homeworkArrayList<Grade> gradesString nameString shortName+ void addNewGrade(grade)+ float calculateAverage()ScheduleSchoolDay- Lesson[] lessons+Lesson getLesson(index)+ void setLesson(index, lesson)Reminder HomeworkIn der Oberstufe komplexe Anwendungssoftware agil entwickeln65die hohe Bedeutung der regelmäßigen Retrospektive mitgenommen und werde in zukünftigen Projekten auch einen ausreichenden Zeitraum dafür einplanen. Im letzten Oberstufenkurs gab es ein Team mit einem ebenfalls in Softwareent -wicklung sehr erfahrenen Schüler. Dieser bestand darauf, vor der Implemen -tierung mit einem ausführlichen Entwurf in Form eines Klassendiagramms zu beginnen. Dabei schaffte er es aber, durch viele Erklärungen auch leistungs -schwächere Teammitglieder ins Boot zu holen. Diese lobten das Vorgehen in der abschließenden Retrospektive, weil sie durch das gemeinsame Entwickeln des Klassendiagramms (Abbildung 3.12) viele Zusammenhänge verstanden haben.Trotz dieser Herausforderungen ist insgesamt ein höherer Erfolg bei der agi -len Vorgehensweise deutlich sichtbar. Messbar ist dieser an der entwickelten Software, die in am Wasserfallmodell orientierten Projekten nie über eine Al -pha-Version hinauskam, neuerdings jedoch regelmäßig ein Release-Niveau er-reicht. Die Schulbibliothekssoftware (Abbildung 3.13) wurde sogar unmittelbar nach Projektende von der Lehrmittelbücherei eingesetzt. Zentrale Gründe für den Erfolg sind aus meiner Sicht einerseits das Proto -typing, das die Schnittstellenprobleme deutlich reduziert, sowie eine Unterstüt -zung von eigenverantwortlichem und (dennoch) fokussiertem Arbeiten durch agile Praktiken. Das zeigt die positive Wirkung agiler Methoden beim kollabo -rativen Arbeiten in Projekten. Deshalb hoffe ich, dass diese in Zukunft häufiger in der Schule (und nicht nur im Informatikunterricht) eingesetzt werden.Abbildung 3.13:  Menüführung der Bibliothekssoftware: oben links: Auswahl Austeilen oder Einsammeln; rechts Auswahl des Schülers/der Schülerin – Anzeige entsprechend der Na -menseingabe; unten links: Eingabe der ISBN über das Textfeld oder einen Barcode-ScannerIm Unterrichts einsatz663.4 Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht Ein Unterrichtsprojekt von Ulrich KiesmüllerSteckbriefKassenstufe: 10 (naturwissenschaftlich-technischer Zweig eines Gymnasiums, Pflichtunterricht)Klassenstärke: 25–30 Schülerinnen und SchülerThemen: Spielautomat, Arcade-Game, AnimationenBesonderheiten: Selbstorganisiert Fach- und Sozialkompetenzen entwickeln, Kundengespräche, Truck-Factor-CheckAgile Praktiken: Project-Board, User-Storys, Tasks, Stand-up-Meeting,  Pair-ProgrammingProgrammiersprache/Entwicklungsumgebung: Java/BlueJDauer und Frequenz: Ganzjährig (inklusive Vorbereitungszeit), mit einer Doppel -stunde pro WocheZeitlicher Ablauf:            Nachdem sich die Schülerinnen und Schüler in der 10. Klasse mit den Grund -lagen der objektorientierten Modellierung und Programmierung beschäftigt haben, ist im Curriculum ein kleines Softwareprojekt vorgesehen. Es soll den Lernenden vermitteln, dass man umfangreiche Aufgaben nur mit sorgfältig ge -plantem, strukturiertem Vorgehen lösen kann. In der praktischen Umsetzung Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht 67erlebte ich allerdings wiederholt, dass Schülerinnen und Schüler in Projekten zwar sehr motiviert sind, aber in den zehn Unterrichtsstunden, die der Lehrplan vorsieht, keine brauchbaren oder gar spannenden Produkte umsetzen können. Deshalb habe ich in den letzten Jahren die Projektphase erheblich ausgedehnt. Ich begann nun früh im Lernjahr und unterbrach die Projektarbeit regelmäßig meist zu Beginn jeder Doppelstunde, um weitere Lerninhalte zu integrieren. Dabei habe ich mich an dem in mehreren Schulbüchern und didaktischen Lehr -büchern beschriebenen Vorgehen nach dem Wasserfallmodell orientiert, das auch der Oberstufenlehrplan in Bayern vorgibt. Das Projekt war entsprechend in Phasen unterteilt, deren Abfolge sich am Lebenszyklus von Software orien -tierte. Problematisch bei diesem Vorgehen war, dass die Lernenden zu Beginn des Projekts weder über die fachlichen und planerischen Fähigkeiten verfügten, die ein lineares Prozessmodell voraussetzt, noch in der Lage waren, selbststän-dig strukturiert vorzugehen. Deshalb waren sie immer stark auf Unterstützung angewiesen. Für mich als Lehrkraft bedeutete das einen enormen Betreuungs -aufwand, und entsprechend langsam war der beobachtbare Projektfortschritt. Am Ende des Schuljahres waren die Schülerinnen und Schüler zwar stolz auf ihr Produkt, bemängelten aber regelmäßig das lange Warten auf Unterstützung. Besonders unbefriedigend für mich war, dass ich trotz der langen Projektlaufzeit typische Ziele wie selbstständiges Arbeiten, Kreativität und kritische Reflexion wenig berücksichtigen und Fähigkeiten wie Entscheidungsfindung und einen konstruktiven Umgang mit Konflikten im Team kaum fördern konnte.Im Einsatz agiler Methoden sah ich die Möglichkeit, es den Lernenden durch iteratives Vorgehen zu ermöglichen, mit vorhandenen fachlichen, sozialen sowie organisatorischen Fähig- und Fertigkeiten, unterstützt durch ausgewählte agile Praktiken, selbstorganisiert loszulegen und ihre Kompetenzen in jeder Iteration auszubauen. ProjektvorbereitungRahmenbedingungenDas Projekt fand erstmals 2013 in zwei Klassen statt und wird seither jedes Jahr ähnlich durchgeführt. Die Computerräume sind mit 20 Einzelrechnern ausge -stattet und ihre Größe bietet jeder Gruppe Platz für ihr ↑ Project-Board sowie für die davor stattfindenden Diskussionen und Planungen, ohne dass sich die Schülergruppen dabei gegenseitig stören. Die Vorkenntnisse im Bereich der Objektorientierung aus der 6. Jahrgangsstufe und der Algorithmik aus der 7. Jahrgangsstufe sind bei den meisten Schülerinnen und Schülern gering. Zur Verfügung stehen den Lernenden eine vorgegebene Java-Klasse, die es erlaubt, Im Unterrichts einsatz68einfache geometrische Objekte in einigen wenigen Farben grafisch darzustellen, sowie das Buch «Java ist auch eine Insel» als weiteres Hilfsmittel.Agile Praktiken in der Vorbereitung des ProjektsVor dem Projektstart werden die grundlegenden Voraussetzungen bezüglich der objektorientierten Modellierung und Programmierung sowie des Einsatzes ge -eigneter Werkzeuge vermittelt. Parallel dazu werden erste agile Praktiken und Techniken angepasst in den Unterrichtsverlauf integriert. In den beiden folgen -den Abschnitten beschreibe ich das Vorgehen und dahinterstehende Intentionen exemplarisch. Kundenwünsche: Aspekte der Anforderungsanalyse Da die objektorientierte Modellierung dazu anhält, sich zunächst über die in einem Programm enthaltenen Klassen Gedanken zu machen, beginnen wir mit der Modellierung von einfachen Grafiken, deren Bestandteile über «ist-ein»-Be -ziehungen auf die Klassen «Kreis», «Rechteck» und «Dreieck» Bezug nehmen. Nach einem Theorie-Input zur Erstellung von Klassendiagrammen erhalten die Schülerinnen und Schüler eine einführende, explizit unkonkrete Aufgabe, die sie in drei Gruppen unabhängig voneinander kooperativ modellieren sollen. Eine beispielhafte Aufgabe lautet: «Baut mir ein Haus!» Sie ist bewusst offen formuliert, um alle erst einmal zum Arbeiten zu bringen und die Notwendig -keit der Präzisierung von Anforderungen zu verdeutlichen. Der Ablauf ist etwa so, dass die Teams zumeist viele Details wie einen Pool oder Balkon planen. Im Folgenden gibt es mehreren Feedback-Schleifen, in denen ich als Kunde das Ziel mit den jeweiligen Teams präzisiere. Dabei lenke ich die Schülerinnen und Schüler schrittweise dahin, ein «sehr einfaches» Modell zu erstellen, das so auch ein erstes Zwischenziel des späteren Projekts sein könnte. Das Ergebnis ist ein Klassendiagramm, das die Klassen «Kreis», «Rechteck» und «Dreieck» nutzt, um die verschiedenen Bestandteile des geplanten Hauses darzustellen.Die Planung der Aufgabe erfolgt in einem Planungsmeeting (↑ Stand-up-Meetings und andere Besprechungsformen). Die Lernenden üben dabei wesent -liche Aspekte der Anforderungsermittlung: Sie präzisieren Kundenwünsche, führen konzentrierte Diskussionen, holen sich von mir als Kunden in Kun -dengesprächen wiederholt Feedback und einigen sich auf einen gemeinsamen Plan. Das Planungsmeeting und die Kundengespräche finden im Stehen vor dem Project-Board der Gruppen statt, das hier noch eine freie Planungsfläche, aber zugleich bereits ein zentraler Arbeitsbereich ist. Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht 69User-Storys und Tasks: Von der Kundensicht zur Entwicklersicht Im weiteren Verlauf werden Grundlagen der objektorientierten Programmie -rung und der algorithmischen Grundstrukturen vermittelt. Die Arbeitsaufträge werden von mir in Form von Kundenwünschen (vergleichbar mit ↑ User-Storys) erteilt, die zunächst sehr klein sind. Die Schülerinnen und Schülern setzen sie in Paaren um (↑ Pair-Programming) und fassen so von Anfang an ihre Program-miertätigkeiten in Worte. Themen und Aufgabenstellungen der Arbeitsaufträge werden so gewählt, dass User-Storys, ↑ Tasks und erstellter Quelltext für das spätere Projekt angepasst und dort integriert werden können.Gegen Ende dieser Phase werden Kundenwünsche auch gezielt offener for-muliert (Abbildung 3.14), um Spielraum für eigene Interpretationen zu schaffen und um die Lernenden die Tasks selbstständig identifizieren und formulieren zu lassen. So führte ich sie schrittweise an den Perspektivwechsel von der Kun-den- zur Entwicklersicht heran.Abbildung 3.14: Verschiedene Schülerinterpretationen des Kundenwunsches «Ich möch-te, dass sich ein Kreis in einem Kreis bewegt»Die in dieser Phase gebildeten Gruppen haben stets wechselnde Zusammenset-zungen, damit sich keine eingespielten Rollenverteilungen herausbilden und die Schülerinnen und Schüler unterschiedliche Herausforderungen kooperativen Arbeitens bewältigen lernen.Warm-up-SpielUm den Schülerinnen und Schülern spielerisch eine Idee von agiler Projektar-beit zu vermitteln und ihnen Mut zu machen, wird vor dem Einstieg ins Projekt das Ball-Point-Game (↑ agile Spiele) durchgeführt. Hierbei erfahren sie die Bedeutung von gemeinsamen Absprachen, die Vorteile kurzer, iterativer Ent -wicklungsphasen (flexible Reaktion auf Änderungen, stete Verbesserung der Im Unterrichts einsatz70eigenen Performanz, Sinn einer Reflexion) und die motivierende Wirkung von Zielsetzungen, die in kurzer Zeit erreichbar sind. Stimmen aus dem Kreis der Lernenden nach der Durchführung waren unter anderem «Noch nie habe ich mich für etwas so reingehängt» und «Hätte ich nicht gedacht, dass wir uns so steigern können». In der nächsten Pause sprach mich die Schulleiterin an, was wir denn da in der Eiseskälte im Schulhof gemacht hätten. Auf meine Erklärung hin meinte sie: «Toll, da haben die ja was fürs Leben gelernt.»Projektdurchführung Themenwahl und TeamsFür die sich bis zum Schuljahresende erstreckende Projektarbeit dürfen sich die Schülerinnen und Schüler eigene Themen wählen. Abbildung 3.15:  Anreize zur Themenwahl Spielautomat, Arcade-Game, bewegte GrafikenDurch Präsentation einiger in der zur Verfügung stehenden Zeit umsetzbarer Projektbeispiele wird ihnen eine Entscheidungshilfe geboten. Nach der folgen-den geheimen Abstimmung bezüglich eines Wunschthemengebiets ließen sich die Klassen jeweils problemlos in drei etwa gleich große Interessengruppen tei -len. Die themengebundene Zusammensetzung der Projektgruppen führt dazu, dass in vielen Fällen nicht nur eingespielte Teams zusammenarbeiten und sich die Schülerinnen und Schüler mit für sie neuen Gesprächs- und Teampartnern zurechtfinden müssen.Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht 71PlanungsmeetingDie Teams treffen sich zu einer ersten Besprechung in einem Planungsmeeting an ihrem Project-Board, das ihnen bis zum Schuljahresende exklusiv zur Verfü-gung steht. Die Planungsmeetings finden im Stehen statt, weil die Schülerinnen und Schüler dann erfahrungsgemäß deutlich ergebnisorientiertere Diskussio -nen führen. Ich geselle mich abwechselnd zu jedem Team dazu, verfolge die Ge -spräche einige Zeit und schlüpfe dann in die Rolle des Kunden, um die Wünsche zu kanalisieren und als Berater erste erreichbare Ziele zu verdeutlichen. Da das Projekt über ca. acht Monate laufen wird, erstellen die Schülerinnen und Schüler User-Storys jeweils für Etappen von drei bis vier Wochen, also für die nächsten drei bis vier ↑ Iterationen. Dieses Vorgehen wiederholt sich im weiteren Pro -jektverlauf, wobei die Kontrolle über das Projekt sobald wie möglich vollständig den Gruppen überlassen wird. Anschließend greife ich nur noch dann ein, wenn die Schülerinnen und Schüler sich deutlich zu hohe Anforderungen stellen oder völlig falsche Wege bei der Implementierung beschreiten wollen. Project-BoardDie User-Storys der ersten Etappe werden nun in der Reihenfolge ihrer Priorität an das Project-Board geheftet. Dabei ergibt sich die Priorität entweder logisch aus den Funktionalitäten oder die Teammitglieder einigen sich darüber, was ihnen wichtiger und was weniger wichtig ist. Das Project-Board ist ab jetzt ein Board im engeren Sinn der Softwareentwicklung, mit drei Spalten, für User-Sto -rys und dazu geplanten Tasks links, für Tasks in Bearbeitung in der Mitte und für fertige Tasks und abgeschlossene User-Storys rechts und einem zusätzlichen Bereich für Probleme. Es bietet allen Beteiligten eine ständig aktuelle Übersicht über den Stand des Projektes.ProjektablaufBis zum Ende der drei bis vier Iterationen umfassenden ersten Etappe ist der Ablauf der jeweils einer Iteration entsprechenden Doppelstunden nun wie folgt:• 10 Minuten Stand-up und planen• 20 Minuten implementieren• 10 Minuten Stand-up und planen• 20 Minuten implementieren• 20 Minuten integrieren und testen10 Minuten PufferKundengespräche, Reflexion oder Input im Plenum erfolgen je nach Bedarf.Im Unterrichts einsatz72Stand-up-Meeting, planen und implementieren Die Teams führen zu Stundenbeginn ein sehr kurzes Stand-up-Meeting durch, in dem sie erledigte Aufgaben der letzten Stunde rekapitulieren und eventuelle Probleme ansprechen. Dem Stand-up-Meeting schließt sich nun jeweils eine Planungsphase von ca. fünf Minuten an. Die Teammitglieder wählen eine oder mehrere User-Storys unter Beachtung der Priorität aus, mit deren Umsetzung das Team ca. 20 Minuten beschäftigt ist, und formulieren dazu Tasks. Die ge -planten Tasks werden nun arbeitsteilig und im Pair-Programming implemen-tiert. Einen Task, den ein Pair in Bearbeitung nimmt, versieht es vor dem Um-hängen am Project-Board mit Namen, damit die Gruppenmitglieder sich bei Fragen gezielt an das Pair wenden können. Wenn einzelne Pairs in der arbeitstei -ligen Phase vor anderen ihre Aufgaben umgesetzt haben, es aber keine weiteren in der verbleibenden Zeit umsetzbaren Tasks gibt, verbessern die Betroffenen z.B. die Inline-Dokumentation oder testen einzelne Klassen oder das gesamte Projekt. Nach ca. 20 Minuten trifft sich das Team erneut am Project-Board. Die Teammitglieder informieren sich gegenseitig über ihre Tätigkeit in den letzten 20 Minuten und planen weitere 20 Minuten. Unabhängig davon, dass mit 20 Minuten ein für Neulinge im Bereich des Programmierens überschaubares Zeitfenster gewählt wurde, gelingt vielen Schülerinnen und Schülern eine zielorientierte und gründliche Planung und die Einschätzung, was sie in 20 Minuten schaffen können, anfangs nur mit Abstrichen. Bei kleineren Problemen behelfen sich die Teams meist mit selbst einberufenen, spontanen Stand-up-Meetings und lernen, teils auch noch mit meiner Unterstützung, innerhalb von ein bis zwei Doppelstunden, worauf es bei einer Planung ankommt. Auch ihre «Velocity», also wie viel sie in 20 Minuten schaffen, lernen sie recht rasch einzuschätzen.Integrieren und testenGegen Ende jeder Doppelstunde wird der Code eines Teams von zwei Teammit-gliedern zusammengeführt, vom Team getestet und falls nötig korrigiert. Ziel ist es, nach jeder Doppelstunde eine getestete und lauffähige Programmversion, also einen ↑ Prototyp, zu haben und damit die Iteration abzuschließen. Die In-tegration dauerte im Regelfall 10 bis 15 Minuten und nach einem ↑ Refactoring oder bei nicht eingehaltenen Absprachen bis zu 30 Minuten. Während der Code schrittweise zusammengeführt wird, unterstützen diejenigen Pairs, die ihren Code bereits «abgegeben» haben, andere Teammitglieder, insbesondere beim Lokalisieren und Korrigieren von Fehlern und beim Fertigstellen der Tasks. Teils testen sie auch Zwischenversionen, die das Integrationspair zur Verfügung Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht 73stellt, aktualisieren das Klassendiagramm oder identifizieren Lücken in der Do -kumentation sowie schlecht kommentierten Code.Die weiteren Etappen: Selbstständigkeit entwickelt sichDie folgenden Etappen verlaufen nun analog. Während sich aber zu Beginn der ersten Etappe die Erstellung kompakter User-Storys, die nur wenige Tasks um-fassen, ebenso wie die Planung von Tasks in der Regel noch schwierig gestalten und ich viel unterstützen muss, helfen die gewonnenen Erfahrungen den Schü -lerinnen und Schülern in den folgenden Etappen immer schneller, passende kleine User-Storys zu schreiben und diese dann aus Entwicklersicht zu planen. Auch wenn sie zunächst noch ungünstige Lösungen planen und entwerfen und deren Nachteile erst im Laufe der Zeit bemerken, eignen sie sich auf der Suche nach Alternativen neue fachliche Fähigkeiten an. Deshalb unterscheide ich ganz bewusst zwischen den weiter oben erwähnten völlig falschen Wegen, bei denen ich eingreife, und Umwegen, die durch ein Refactoring gut überarbeitet werden können. Wenn zeitversetzt nach etwa zwei Etappen (nach sechs bis acht Wochen) das Planning-Poker als Möglichkeit zur ↑ Aufwandsabschätzung vorgestellt wird, haben die Lernenden in meinen Projekten erfahrungsgemäß bereits ein gutes Gespür für die passende Größe von User-Storys und Tasks entwickelt. Die Tech -nik der Aufwandsabschätzung hat für sie keinen spürbaren Mehrwert, da sie inzwischen im Mittel immer die gleiche Anzahl User-Storys in einer Iteration umsetzen. Sie wird deshalb in der Regel von ihnen verworfen.Da sich die Schülerinnen und Schüler nach der ersten Etappe schon gut selbst organisieren, kann ich mich ab der zweiten Etappe verstärkt um (nichtfachliche) Probleme in den Teams kümmern. Ein leistungsstarker Schüler beispielsweise ging immer, wenn er um Hilfe gebeten wurde, zu seinen Teammitgliedern und programmierte schnell eine Lösung. Ich sprach ihn darauf an und er gab zu, dass dies für ihn sehr anstrengend sei. Wir besprachen alternative Möglichkeiten, die im Folgenden dazu führten, dass er stattdessen konstruktive Tipps gab. Die Teammitglieder begannen nun, zunehmend selbstständiger zu arbeiten, und er wurde immer weniger um Hilfe gebeten. Ein anderer sehr guter Programmierer reagierte schnell respektlos auf Fragen seiner Teammitglieder. Mir gegenüber sagte er: «Die verstehen einfach nicht, was ich ihnen sage.» Er lernte im Ver-lauf, sein Wissen so zu formulieren, dass das Team ihn besser verstehen konnte. Probleme wie die beschriebenen kommen erfahrungsgemäß in allen Projekten vor, sind aber in agilen Projekten wegen der Transparenz und der häufigen In-teraktion und Kommunikation leicht beobachtbar. Entsprechend kann ich gut und gezielt unterstützen. Im Unterrichts einsatz74Integration von LerninhaltenIn diesen beschriebenen Ablauf werden die Lerninhalte der 10. Jahrgangsstufe integriert. Dazu gibt es am Project-Board einen Bereich für Probleme, in dem Pairs Klebezettel mit schriftlich notierten Problemen fixieren können (Abbil -dung 3.16). Ich behalte den Problembereich aller Project-Boards im Blick und prüfe einzeln, ob die Lernenden das Problem selbst lösen können oder ob Hilfe von außen nötig ist. Im ersten Fall notiere ich einen Tipp zum Selbstlernen, der je nach Größe sogar ein eigener «Lern-Task» sein kann (z.B. Methoden mit Rückgabewert wiederholen). Im zweiten Fall melde ich schriftlich auf dem Zettel zurück, wann und wie eine Hilfestellung erfolgt. In den bisherigen Durchläufen Hintergrundmusik?Selber herausfindenViele Grashalm­objekte speichern?Input für alle am 18.3. ➜ Story kurz zurückstellenSchiefe RechteckeTipp: DreieckeAbbildung 3.16:  Pairs notieren Problemfelder – die Lehrkraft gibt LösungshinweiseAgile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht 75zeigte sich, dass die einzelnen Teams trotz unterschiedlicher Themen und indi -vidueller Arbeitstempi oft nahezu zeitgleich an bestimmte Problemstellungen gelangen, z.B. «Wir bräuchten etwas, um viele gleichartige Dinge auf einmal anzusprechen». In diesen Fällen bietet sich eine zentrale Theoriephase an – im genannten Fall zum Thema «(eindimensionale) Felder». So kann ich Input dann geben, wenn er tatsächlich gebraucht wird, und «Lernen auf Vorrat» vermeiden. Kommt eine Gruppe deutlich früher zu einer Problemstellung, wird ihr weiter-geholfen, um möglichst raschen Projektfortschritt zu gewährleisten. Themen, auf welche die Lernenden nicht von selbst stoßen, können in Kun-dengesprächen gezielt angeschnitten werden. Beispielsweise wird von schnel -len, leistungsstärkeren Teams ein Kundenwunsch nach einer GUI, also einfachen Buttons und Labeln, mit Begeisterung aufgenommen und mit Eifer angegangen. Hierzu vermittle ich dann dem Team die Theorie und stelle auch entsprechende Codefragmente zur Verfügung.Beobachtungen und ErfahrungenMeine Rolle als Lehrkraft wandelte sich vom «Fragenbeantworter» und «Fehler -sucher» im wasserfallähnlichen Projekt hin zu 50 Prozent Coach und 50 Prozent Beobachter im agilen Projekt. Grund dafür ist, dass die Schülerinnen und Schü -ler jetzt schon nach wenigen Iterationen ihr Projekt selbstständig organisieren. Von zu langen Phasen des Wartens auf Unterstützung ist nicht mehr die Rede. Obwohl ich kaum noch helfen muss, geben die Lernenden in der Rückmeldung regelmäßig an, dass sie sich gut betreut fühlen.Einige Tätigkeiten der Softwareentwicklung, deren Sinn ich in wasserfal -lähnlichen Projekten nur mit Mühe vermitteln konnte, werden von den Schüle -rinnen und Schülern bei der agilen Vorgehensweise als hilfreich erkannt: • Klassendiagramme erstellen die Teams relativ früh freiwillig und erweitern sie, weil sie ihnen bei der Planung späterer Iterationen, bei der Implemen -tierung sowie beim Testen helfen. • Kommentare im Quelltext ergänzen die Teams spätestens, wenn die ersten unnötigen Fehler auftreten und wenn sie mit zunehmender Programmkom-plexität immer häufiger «fremden» Code lesen und verstehen müssen. Auch besondere Funktionalitäten, deren Quelltext sie gerne voller Stolz weiterge -ben, führen bei guter Kommentierung zu weniger Nachfragen. • Tests am Ende jeder Doppelstunde werden gerne durchgeführt, weil man sehen will, was die anderen Teammitglieder implementiert haben, und weil man wieder ein fehlerfreies, lauffähiges Produkt haben möchte. Im Unterrichts einsatz76Durch die starke Betonung der Interaktion werden in agilen Projekten auch so -ziale Kompetenzen und deren Entwicklung gefördert. Defizite im Bereich der Kommunikations- oder Teamfähigkeit einzelner Schülerinnen und Schüler hät -te ich früher in wasserfallähnlichen Projekten mit großer Wahrscheinlichkeit nicht bemerkt. Jetzt bemerke ich sie, kann die Entwicklung der Lernenden ver-folgen und sie gezielt und individuell fördern. Dadurch wird die ↑ Bewertung und Einschätzung der Einzelleistungen auf einer wesentlich solideren Basis möglich, ebenso wie eine fundierte Rückmeldung an die Lernenden über die rein fachlichen Kriterien hinaus. Als schwierig stellte es sich heraus, den Einhalt der Rollen beim Pair-Programming im Verlauf des langen Projekts sicherzu -stellen. Um insbesondere die aktive Rolle des Navigators zu motivieren, wird von mir inzwischen ab der vierten Etappe (nach ca. vier bis fünf Monaten) der Truck-Factor-Check eingeführt. In der Softwaretechnik wird vom «Truck-Fac -tor» gesprochen, wenn es darum geht, dass das Team bei spontanem Ausfall eines Mitglieds vollständig über dessen Aufgaben und Arbeitsstand informiert ist und somit jederzeit die Bearbeitung übernehmen kann. Auch bei schulischen Projekten ist eine solche Stellvertreterregelung von Bedeutung, etwa wenn Ler -nende krankheitsbedingt fehlen und ihre jeweiligen Partner dann nicht mehr weiterarbeiten können, was zu Verzögerungen in der Projektentwicklung führt. Um die Anforderung zu prüfen, ob sich wirklich jeweils beide Partner eines Pro -grammierpaars auf dem gleichen Informationsstand befinden, rufe ich zu einem nicht genauer angekündigten Zeitpunkt den Truck-Factor-Check aus. Dann wer -den die Partner des angesprochenen Pairs an zwei verschiedene Rechner gesetzt, die jeweiligen Projektdateien werden kopiert und beide müssen getrennt vonei -nander weiterarbeiten. Ich lasse mir dann von beiden einzeln erläutern, was ihre aktuell zu bewältigenden Aufgaben sind. Anfangs stehen die Schülerinnen und Schüler dieser Unterrichtsmethode oft skeptisch gegenüber, entwickeln aber erfahrungsgemäß sehr schnell den Ehrgeiz zu zeigen, dass auch nach Trennung eines Pairs beide Beteiligten ohne Nachfragen weiterarbeiten können. Dadurch wird der Truck-Factor-Check auch zu einer spielerischen Möglichkeit, die Invol -viertheit aller zu erhalten.Jedes Jahr bin ich wieder beeindruckt vom enormen Zuwachs an sozialen, organisatorischen und persönlichen Fähigkeiten der Schülerinnen und Schüler. Besonders freut es mich dann im folgenden Jahr im Projektseminar der Quali-fikationsphase zu sehen, wie sie ihr Potenzial in Projekten verschiedener Leit-fächer einbringen. Sie erstaunen und überzeugen hierbei auch die Kolleginnen und Kollegen insbesondere informatikferner Fächer mit ihren methodischen Kompetenzen, ebenso wie ihre Teammitglieder, die keine Erfahrung mit agilen Projekten haben. Ein geskriptetes Projekt als Methodik für den Anfangsunterricht 773.5 Ein geskriptetes Projekt als Methodik für den Anfangsunterricht Ein Unterrichtskonzept von Lennard KerberSteckbriefKlassenstufe: 9 (Gymnasium, Wahlpflichtkurs)Klassenstärke: 20 Schülerinnen und SchülerThema: GeschicklichkeitsspielBesonderheiten: Selbstreguliertes Lernen, Student-Story, beiläufiges Lernen agiler Begriffe und VorgehensweisenAgile Praktiken: Project-Board, User-Storys, Tasks, Prototypen, Stand-up-Mee-ting, Pair-Programming, Refactoring, Planning-PokerProgrammiersprache/Entwicklungsumgebung: ProcessingDauer und Frequenz: zehn Wochen mit einer Doppelstunde pro WocheZeitlicher Ablauf:        Unterricht für Programmieranfänger in einer textbasierten Programmiersprache zu strukturieren, ist nach meiner Erfahrung eine Gratwanderung. Stark geführtes, kleinschrittiges Vorgehen mit kurzen praktischen Übungen verhilft insbesondere Leistungsschwächeren zu Erfolgserlebnissen, birgt aber die Gefahr von Unselbst -ständigkeit in neuen und größeren Anwendungssituationen und demotiviert leistungsstarke Schülerinnen und Schüler. Längere Übungsphasen am Rechner können wegen einer zu großen Anzahl syntaktischer und semantischer Probleme demotivierend wirken, denn sie gehen für viele mit langem Warten auf Unter -stützung einher. Eine Modellierung vorweg ist generell kaum motivierbar, weil ihr Sinn bei kleinen Aufgaben nicht erkennbar ist. Um diese Probleme ein Stück Im Unterrichts einsatz78weit aufzulösen, verwenden Lehrkräfte besondere Unterrichtsmethoden. Dennoch bleibt es meist bei einem Unterricht, der für alle Seiten sehr anstrengend ist.Aus dieser Erfahrung heraus ergab sich die Idee, die Schülerinnen und Schü -ler bereits zu einem frühen Zeitpunkt in einem «geskripteten Projekt» selbst -reguliert gemeinsam lernen zu lassen. Mit «selbstreguliert» meine ich, dass die Schülerinnen und Schüler ihren Lernprozess insbesondere bzgl. des Lerntempos selbst steuern und ihn durch Übungen überwachen. Das «geskriptete Projekt» bestand – anders als ein freies Projekt – aus vorgegebenen Lernaufgaben und vorgegebenen Anwendungsaufgaben, mit denen ein Spiel entwickelt wurde. Für die Lernaufgaben führte ich analog zu ↑ User-Storys den Begriff «Student-Sto -rys» ein, die Anwendungsaufgaben waren von mir vorbereitete User-Storys und ↑ Tasks. Lern- und Anwendungsphasen wechselten sich im Projekt regel-mäßig ab. Dabei sollten die Schülerinnen und Schüler einige agile Techniken und Praktiken nutzen, die beispielsweise einen klaren Organisationsrahmen oder Interaktivität fördernde Handlungsanweisungen vorgeben, um so Lernprozesse innerhalb des vorgezeichneten Projekts sinnvoll zu unterstützen. Auf die dabei indirekt erworbene Methodenkompetenz kann im Anschluss in umfassenderen agilen (Softwareentwicklungs-)Projekten aufgebaut werden. Somit adressiert das Vorgehen auch eine Herausforderung der Projektarbeit: Wie können Begrif -fe, Vorgehensweisen und Kommunikationsformen in einem Softwareprojekt selbst Gegenstand des Unterrichts werden, ehe sie von den Schülerinnen und Schülern selbstständig angewandt werden? Das folgende Beispiel vermeidet the -orielastiges «Lernen auf Vorrat», indem Terminologie und Aufbau eines agilen Softwareprojekts implizit im Unterricht miterlernt und geübt werden.ProjektvorbereitungRahmenbedingungenFür die Lerngruppe war es ihr erster Informatikunterricht. Gemäß internem Curriculum wurden zunächst Algorithmen des Alltags in umgangssprachlicher Formulierung besprochen und anschließend Kontrollstrukturen noch ohne Ver -wendung einer Programmiersprache erarbeitet. Mit Processing, einer Program -miersprache, die sich gut zum Programmieren von Grafiken, Simulationen und Animationen eignet, setzten sich die Lernenden zum ersten Mal im Rahmen des Projekts auseinander. Variablen und Funktionen waren neben der Verwendung von Kontrollstrukturen die inhaltlichen Ziele der Sequenz. Objektorientierung und objektorientierte Modellierung hingegen spielten noch keine Rolle. Der Computerraum bot mit 14 außenstehenden Computern und einem großen Tisch in der Mitte für Besprechungen im Plenum eine gute Aufteilung.Ein geskriptetes Projekt als Methodik für den Anfangsunterricht 79Gestaltung des Lehr-LernarrangementsDas über die gesamte Einheit des «geskripteten Projekts» tragende Thema war die Entwicklung eines Geschicklichkeitsspiels, in dem eine runde Scheibe mit der Computermaus durch ein 2D-Labyrinth gesteuert wird. Wenn die Scheibe zu dicht an die Wände des Labyrinths kommt, wird sie kleiner. Die Größe der Scheibe im Ziel bestimmt die erreichte Punktzahl.Abbildung 3.17:  Von Schülerinnen und Schülern entwickeltes GeschicklichkeitsspielFür die Umsetzung waren nach einer einführenden Doppelstunde vier ↑ Iterati -onen mit je drei Doppelstunden geplant, in denen auch schrittweise ein Benut-zerhandbuch erstellt werden sollte. Von den geplanten vier Iterationen konnten aus schulischen Gründen nur drei durchgeführt werden. Dennoch waren die Schülerinnen und Schüler stolz auf ihre als ↑ Prototypen vorliegenden Ergeb -nisse. Hierin zeigte sich ein klarer Vorteil der agilen Softwareentwicklung für die Projektorganisation und -durchführung in der Schule.Die Aufteilung der LerninhalteInhaltlich war das Lehr-Lernarrangement so gestaltet, dass die Schülerinnen und Schüler am Ende der ersten Iteration Rechtecke in selbst gewählten Far -ben zeichnen und damit ihr Spielfeld individuell gestalten konnten. Sie haben sich dazu mit den Koordinaten der Leinwand des Processing-Systems und dem Thema RGB-Farbraum vertraut gemacht. In der zweiten Iteration wurden die Konzepte «Funktion» (ohne Parameter und ohne Rückgabewert) sowie «Variab -le» erarbeitet und zur Weiterentwicklung des Spiels verwendet, beispielsweise beim Zeichnen der Rechtecke bzw. der Spielfigur. Am Ende der dritten Iteration schließlich implementierten die Schülerinnen und Schüler auch Funktionen mit Rückgabewert und Funktionen mit Parametern. Damit konnte der Spielplan mit einer bewegten Scheibe, die dem Mauszeiger folgt, programmiert werden. Die Hindernisse waren für die vierte Iteration vorbereitet, in der die Scheibe bei Berührung der Wände des Labyrinths verkleinert werden soll. Die Schülerinnen Im Unterrichts einsatz80und Schüler sollten im Verlauf Schnittstellen, Variablen und Funktionen nach einem jeweils vorgegebenen Schema im Quellcode dokumentieren.Projektdurchführung TeamsFür das Projekt bildeten die Schülerinnen und Schüler fünf Vierer-Teams, wobei sie selbst entschieden, mit wem sie zusammenarbeiten mochten. Die Teammitglieder unterstützten sich während des Projekts gegenseitig beim Lernen und entwickel -ten gemeinsam ihr Spiel. Dabei arbeiteten die Schülerinnen und Schüler teilweise synchron und teilweise asynchron. Dennoch gelang es den Teams und der gesam -ten Gruppe regelmäßig auf einer gemeinsamen Basis zusammenzukommen, denn die agilen Praktiken gaben dem Lehr-Lernarrangement eine verbindliche zeitliche Taktung und bildeten einen hilfreichen Rahmen zur Orientierung. Dazu gehörten aus der Softwareentwicklung bekannte und für die Schule angepasste agile Tech -niken und Praktiken, aber auch die von mir zusätzlich eingeführte Student-Story, mit der ich neue Inhalte in das Projekt integrierte und Lernphasen strukturierte. Die Student-Story: Integration neuer InhalteStudent-Storys beschreiben einen Lernauftrag von mir an die Schülerinnen und Schüler. Sie enthalten in der Regel das intendierte Ziel im Titel sowie eine knap -pe Beschreibung des Auftrags, wie das hier beispielhaft dargestellt ist. Abbildung 3.17:  Student-Story zum Thema «Variablen» mit zugehörigen TasksDas Material, das die Schülerinnen und Schüler zum Erledigen des Auftrags benötigten, habe ich ihnen zur Verfügung gestellt. Der zeitliche Umfang einer Student-Story betrug in meinem Projekt im Mittel etwa 30 bis 40 Minuten.Titel:  Variablen in einer Programmier -sprache kennenlernen.Beschreibung:  Arbeitet das Arbeitsblatt zu Station  2.1 durch.Task 1: Lies das  Arbeitsblatt; be -arbeite anschließend Aufgabe 1.Task 2: Bearbeitet Aufgabe 2 in  der Gruppe und protokolliert das Ergebnis.Task 3: Bearbeite mindestens eine Wahlaufgabe.Ein geskriptetes Projekt als Methodik für den Anfangsunterricht 81Analog zur User-Story waren auch der Student-Story Tasks zugeordnet, die hier theoretischen Input oder praktische Übungen enthielten, von mir vorgege -ben waren und zusammen das für die Student-Story zu erledigende Arbeitspaket festlegten. In Task 2 beispielsweise bekamen die Schülerinnen und Schüler den Auftrag, in ihrem Team einen Schreibtischlauf eines Algorithmus durchzufüh-ren und zu verfolgen, wie sich der Wert einzelner Variablen ändert. Durch die Nummerierung der Tasks gab ich den Schülerinnen und Schülern die Bearbei-tungsreihenfolge der Teilaufgaben vor.Den Teams half eine Student-Story mit den zugehörigen Tasks, Lernphasen im Projekt selbst zu organisieren. Die Tasks wurden jeweils (im Unterschied zu Tasks im regulären agilen Projekt) vom gesamten Team bearbeitet, wobei sich die Lernenden unabhängig von der vorgegebenen Sozialform gegenseitig unter -stützen. Den aktuellen Arbeitsstand visualisierten sie an einem ↑ Project-Board, das hier die Funktion einer Checkliste beim Stationenlernen bzw. eines Ablauf -plans bei Wochenplanarbeit hatte.Wenn es zur Theorie in einer Student-Story ergänzende praktische Übungen am Computer gab, arbeiteten die Schülerinnen und Schüler eines Teams stets mit ↑ Pair-Programming, sodass zum einen der Wissenstransfer unterstützt und zum anderen überlegtes Vorgehen gefördert wurde. Die Rollen sollte jedes Pair regelmäßig alle 5 Minuten wechseln. Pair-Programming war die einzige Praktik, bei der ich steuernd eingreifen musste, denn die Beobachtung zeigte, dass sonst meist die Stärkeren programmieren und die Schwächeren zusehen, weil sie sich in der entsprechenden Rolle wohlfühlen. Für mich war es allerdings nicht leicht, konsequent für einen Wechsel zu sorgen, da die Schülerinnen und Schüler zu ganz unterschiedlichen Zeiten programmierten.Aufbau der Iterationen: Im eigenen Tempo kooperativ arbeitenJede Iteration des Projekts war drei Doppelstunden lang und bestand aus drei Phasen. In der ersten Phase befassten sich alle Lernenden eines Vierer-Teams mit den neuen Inhalten und Konzepten anhand von Student-Storys. In dieser Phase überwogen Einzel- und Partnerarbeiten und sie dauerten je nach Lerntempo un -terschiedlich lang. Da sich die Schülerinnen und Schüler eines Teams gegenseitig beim Lernen unterstützten, beendete ein Team dennoch meist zeitgleich die erste Phase. Aufgrund der Teambildung setzten sich leistungsstärkere Teammitglieder in dieser Phase mit Schwierigkeiten schwächerer Teammitglieder auseinander und vertieften so auch ihr eigenes Verständnis. In der zweiten Phase erweiterten die Teams arbeitsteilig ihr Spiel um Funktionalitäten, bei deren Umsetzung sie die neuen Konzepte anwendeten. Die User-Storys und Tasks dieser Phase waren zwar ebenfalls von mir vorgegeben, jedoch blieb den Schülerinnen und Schülern Im Unterrichts einsatz82dennoch ein gestalterischer Freiraum. So konnten schnellere Teams, die die erste Phase früher beendet hatten, die Zeit nutzen, um die von mir vorgegebenen Be -wertungskriterien besonders gut zu berücksichtigen. Ihr Labyrinth konnte z.B. besonders viele Wege oder verschiedene Effekte haben, wie beispielsweise den Effekt, der beim Schnitt transparenter Rechtecke entsteht. So konnten sie sich in -tensiver mit den Möglichkeiten auseinandersetzen, die ihnen Processing bot. Sie konnten sich auch um einen klar strukturierten und gut dokumentierten Quell -text bemühen. Nach der Implementierung erweiterte jedes Team in dieser Phase außerdem sein Benutzerhandbuch. Auch hier konnten schnellere Teams passende Bildschirmfotos einfügen und für eine übersichtliche Gestaltung sorgen. Aber auch schwächere Gruppen sollten mit Fleiß und Einsatz in der von mir geplanten Zeit immer zu einem lauffähigen Produkt und einer Beschreibung kommen. Ab -schließend wurden in der dritten Phase die Zwischenergebnisse kurz vorgestellt. Stand-up-Meeting: Das Gelernte rekapitulierenJede Doppelstunde begann mit einem ↑ Stand-up-Meeting, in dem sich die Schülerinnen und Schüler jeder Gruppe kurz und knapp klarmachen sollten, was sie in der letzten Doppelstunde geschafft haben und was sie für diese Stun-de planen. Das heißt, es gab zwar eine Begrüßung, aber die Wiederholung und Zusammenfassung der neu erarbeiteten Lerninhalte bzw. des Fortschritts beim Entwickeln des Spiels fand individuell in den Teams statt und orientierte sich am jeweiligen Stand der einzelnen Teams im Lernprozess und im Projekt. Indem die Stand-up-Meetings kurze individuelle Rekapitulationen am Stundenanfang automatisch anstießen, unterstützten sie die Organisation des selbstregulierten Lernens ideal: Da die Teams in ihrem eigenen Tempo arbeiteten, wäre eine von mir moderierte Stundeneinführung im Plenum nicht sinnvoll gewesen. Hilfreich bei der Rekapitulation der vorangegangenen Doppelstunde waren die jeweiligen Arbeitsblätter und Student-Storys bzw. User-Storys und das grup -peneigene Project-Board, das den Stand des Projekts visualisierte. Mit Student- und User-Storys in die ArbeitsphaseDie Schülerinnen und Schüler konnten ihre Project-Boards nach dem Stand-up-Meeting mit den von mir vorgefertigten Student-Storys bzw. User-Storys und den zugehörigen Tasks für die kommende Doppelstunde vorbereiten und im Verlauf der Stunde aktuell halten. Vermutlich wegen der Skriptung, der kleinen Gruppengröße, dem geringen Anteil arbeitsteiliger Aufgaben oder dem Standort des Boards direkt neben dem Rechner erlebten die Schülerinnen und Schüler es mit der Zeit jedoch als unwichtig, dass das Project-Board zu jedem Zeitpunkt den aktuellen Stand zeigte. So haben sie später meist erst am Ende einer Dop -Ein geskriptetes Projekt als Methodik für den Anfangsunterricht 83pelstunde die Zettel umgehängt – um zu sehen, was sie geschafft haben und zur Orientierung in der nächsten Stunde. Letztlich war auch für mich der Einblick in den Arbeitsstand am Stundenende ausreichend und hilfreich.Nachdem alle die Student-Storys (meist zwei pro Iteration) erledigt hatten, wurden die User-Storys und Tasks zur Weiterentwicklung des Geschicklichkeits -spiels arbeitsteilig vom Team umgesetzt. Zur Implementierung diente wiede -rum Pair-Programming. Zu Beginn der dritten Doppelstunde führten in allen Teams die Programming-Pairs ihren Code zusammen und testeten ihn.Prototypen und Reflexion: Der Abschluss einer IterationIn der dritten Phase jeder Iteration wurden die Prototypen und Benutzerhand -bücher der Gruppen im Plenum kurz vorgestellt und besprochen, wobei sich die Gruppenmitglieder abwechselten. In diesen Runden gaben die Mitschülerinnen und Mitschüler und ich regelmäßig ↑ Feedback. Da wir zur Besprechung im Plen-um versammelt waren und zu diesem Zeitpunkt stets alle den gleichen Stand hatten, nutzte ich die Runden auch zur Nachgestaltung der Fachsprache oder zur Sicherung ganz zentraler Inhalte. Am Ende jeder Plenumsrunde richteten die Schülerinnen und Schüler den Blick auf das gesamte Projekt: das Erreichte, das Projektziel und das unmittelbar anstehende Teilziel der nächsten Iteration, ehe sie in der nächsten Iteration wieder in kleinen Teilschritten arbeiteten.Refactoring: Mit neu erlernten Konzepten zu besserem CodeEinige User-Storys bzw. Tasks stießen ↑ Refactoring-Tätigkeiten an, die dazu dienten, den bestehenden Quelltext mit Hilfe neu erlernter Konzepte besser zu strukturieren. So konnten die Lernenden beispielsweise in der zweiten Iteration Funktionen verwenden, um das Zeichnen der Rechtecke des Spielplans auszula -gern und den Code stärker zu strukturieren. Dieses Refactoring wurden von den Schülerinnen und Schülern als «Praktik der Profis» akzeptiert und motivierte so den Umbau des Codes, der sehr oft mit dem schrittweisen Einführen von Lerninhalten verbunden ist, auf sehr elegante Art und Weise.BewertungBeim Vorgehen nach dem Wasserfallmodell liegt erst am Ende ein Produkt vor. Was tun, wenn eine Gruppe kein lauffähiges Produkt abgibt? Durch das Proto -typing löste sich diese Situation auf, weil ich früh und regelmäßig Einblick in Zwischenstände hatte und steuernd und unterstützend eingreifen konnte. In diesem Fall war sogar angekündigt, dass jede Prototypvorstellung benotet wird. Dazu gab es jeweils klar kommunizierte Anforderungen und Kriterien. Daraus resultierend bildete ich dann jeweils Teilnoten, die die Schülerinnen und Schüler einsahen, weil sie transparent und nachvollziehbar zustande kamen.Im Unterrichts einsatz84Beobachtungen und ErfahrungenDie genutzten agilen Techniken und Praktiken unterstützten die Organisation und Planung, soziales Lernen, die Motivation und die ↑ Bewertung der Proto -typen und der dazugehörigen Benutzerhandbücher optimal. Dadurch wurde der Erwerb fachlicher Kompetenzen im Bereich der Programmierung durch die Wei -terentwicklung wichtiger sozialer Kompetenzen ergänzt und die Schülerinnen und Schüler haben ganz nebenbei noch eine typische Arbeits- und Vorgehens -weise beim Entwickeln von IT-Systemen erlernt und intuitiv reflektiert. So sind sie bestens auf ein richtiges Unterrichtsprojekt vorbereitet.Interessant war, dass die Schülerinnen und Schüler fast alle Praktiken mit Begeisterung aufgenommen haben. Sie reflektierten ihren Sinn und Nutzen im gegebenen Kontext intuitiv und setzten sie im späteren Verlauf von sich aus passend bzw. angepasst ein oder ließen sie weg. Zur zeitlichen Planung der Arbeitsphase beispielsweise konnten die Schülerinnen und Schüler, wenn sie wollten, das Planning-Poker (↑ Aufwandsabschätzung) nutzen. Es wurde auch ein, zwei Mal ausprobiert und dann weggelassen, vermutlich, weil es keinen direkten Mehrwert brachte. Die Aufgaben einer Iteration waren ja von mir fest vorgegeben und so geplant, dass auch die Schwächeren sie in der gegebenen Zeit bearbeiten konnten. Andere Techniken und Praktiken, wie das Project-Board, wurden von den Schülerinnen und Schülern wie oben beschrieben an den Kon-text angepasst und gewinnbringend genutzt. Schließlich führten sie mehrfach selbstständig ein Refactoring durch, sodass sie bereits unterschiedlich struktu -rierten Code geschrieben und die erreichten Verbesserungen in der Reflexion noch einmal benannt haben.Besonders bereichernd war für mich das Prototyping, wobei hier verschie -dene Aspekte zu meiner sehr positiven Erfahrung beitrugen. Ein Punkt ist die leichtere und transparentere Bewertbarkeit. Noch viel wichtiger war für mich aber, dass ich so oft die Möglichkeit hatte zu loben. Auch die Schülerinnen und Schüler schätzten die Gelegenheit, sich voneinander Feedback zu holen. Bei -des steigerte die Motivation sehr und es hat möglicherweise auch dazu geführt, dass ein sonst allgemein auffälliger Schüler bei mir tolle Beiträge lieferte und ein unproblematisches Verhalten zeigte. Positiv überrascht war ich dann aber doch, als eine Kollegin mich fragte, was ich mit meinen Schülern gemacht habe. «Wenn ich ihnen eine Aufgabe gebe», berichtete sie, «beginnen deine Schüler zu arbeiten, während meine sich erstmal alle melden und Fragen stellen.» Offenbar führten die Projekterfahrungen zu einer nachhaltig selbstständigeren, zielori-entierteren Arbeitsweise.Reflexionskompetenz stärken durch Weiter  entwicklung des eigenen agilen  Prozesses 853.6 Reflexionskompetenz stärken durch Weiter  entwicklung des eigenen agilen  Prozesses Ein Unterrichtsprojekt von Leonore DietrichSteckbriefKlassenstufe: 11 (Hochbegabtenprojekt)Gruppenstärke: 4 SchülerThema: Jump-’n’-Run-Spiel Pengu Besonderheiten: Erfahrungen im agilen Prozess reflektierenAbschlussprojekt eines mehrjährigen Hochbegabtenprogramms Agile Praktiken: Project-Board, User-Storys, Tasks, Prototypen, Stand-up-Mee-ting, Pair-Programming, Aufwandsabschätzung, Refactoring, ReflexionProgrammiersprache/Entwicklungsumgebung: Java/GreenfootDauer und Frequenz: Einjährig (inkl. Vor- und Nachbereitung) mit vierstündigen Treffen nach AbspracheZeitlicher Ablauf:   In diesem Projekt stand nicht die Entwicklung eines Softwareprodukts im Mit-telpunkt, sondern die Vorgehensweise. Was sind wesentliche Aspekte eines Soft -wareentwicklungsprozesses? Die Sicht der Wissenschaft darauf hat sich über die Jahre stetig verändert. Die Idee von dem einen, idealen Entwicklungsprozess wird abgelöst von der Aufforderung, insbesondere an die Entwicklerinnen und Entwickler eines Teams, den Prozess und die eigene Rolle im Team und im Pro -zess mit auszugestalten, regelmäßig zu reflektieren und zu optimieren. Das hier beschriebene Abschlussprojekt zeigt, wie diese Aufforderung von hochbegabten Schülern aufgenommen und umgesetzt wurde. Im Unterrichts einsatz86ProjektvorbereitungRahmenbedingungenDas Projekt fand im Rahmen des Hector-Seminars statt, einem baden-Würt -tembergischen Programm zur langfristigen Hochbegabtenförderung. Dieses schließt in der Oberstufe mit einer einjährigen Kooperationsphase ab, in der Teams meist in Zusammenarbeit mit einer Hochschule ein Projekt durchführen. Nach einem gemeinsamen Vorlauf begann das Informatik-Projekt für die vier Teilnehmer im November mit einer Einführung. Die produktiven Treffen, in denen ↑ Prototypen entstanden, fanden ab Januar bis zum Ende des Schuljahrs statt. Im Mittel gab es in dieser Zeit ein begleitetes, vierstündiges Treffen pro Monat an der Universität und parallel dazu unregelmäßige selbstständige Tref -fen. Vereinzelt haben die Schüler auch außerhalb der Treffen an Problemlösun-gen gearbeitet und die Ergebnisse per E-Mail sowie bei den Treffen kommuni-ziert. In dieser Phase wurde mit Greenfoot das Spiel Pengu realisiert, das ich als ein mögliches Ausgangsszenario vorgestellt hatte. Einer der vier Schüler hatte zumindest grundlegende Java-Kenntnisse, die anderen drei nur rudimentäre Kenntnisse von einfachen algorithmischen Kontrollstrukturen. Prozessmodelle aus der Softwaretechnik waren ebenso wenig bekannt wie Modellierungstech-niken. Allerdings verfügten alle vier über eine sehr schnelle Auffassungsgabe, hatten eine außergewöhnlich ausgeprägte Fähigkeit, analytisch und strukturiert zu denken, und eine hohe Abstraktionsfähigkeit.Agile Praktiken in der VorbereitungEntsprechend dem Ziel, vor allem die ausgewählten agilen Methoden und Stra-tegien zu thematisieren, lag ein geringerer Fokus auf der Umsetzung des Pro -jekts mit Greenfoot. Die Schüler sollten regelmäßig am Ende eines Treffens ihre Erfahrungen mit den agilen Techniken und Praktiken reflektieren und dabei benennen, was gut bzw. schlecht lief, worauf sie zukünftig mehr achten und was sie ändern wollen. Soweit möglich sollten dann Vermutungen aufgestellt werden über Auswirkungen, die sie sich von der jeweiligen Änderung versprechen, im positiven Sinn wie auch im negativen. In den folgenden Treffen sollten sie dann beobachten, wie gut ihnen die Umsetzung der geplanten Änderungen gelang und inwieweit die Annahmen eintrafen. Deshalb wurde im ersten Treffen zunächst erläutert, wie Softwareentwicklungsprojekte mit agilen Vorgehensweisen typi-scherweise ablaufen. Ein Video unterstützte die Ausführungen und vermittel -te einen Einblick in das Vorgehen bei professionellen Projekten. Anschließend wurde besprochen, wie es im konkreten Projekt aussehen kann. Anfänglich wur -den die oben in der Übersicht erwähnten Praktiken vorgegeben, wobei das ↑ Re -Reflexionskompetenz stärken durch Weiter  entwicklung des eigenen agilen  Prozesses 87factoring erst später angewandt wurde. Im konkreten Kontext hätte sich ein elektronisches ↑ Project-Board angeboten, da die Treffen an verschiedenen Orten stattfanden und die Teilnehmer von unterschiedlichen Schulen kamen. Allerdings wollte ich den Schülern die Möglichkeit bieten, nach getaner Arbeit für alle sichtbar und haptisch erlebbar einen Zettel umzuhängen. Deshalb be -stand unser Project-Board aus einem transportablen, faltbaren Plakat, das zu den Treffen jeweils mitgebracht wurde.Projektdurchführung Die vierstündigen betreuten Treffen umfassten jeweils ein ↑ Stand-up-Meeting und meist zwei ↑ Iterationen. Jede Iteration begann mit einem Planungsmee -ting, gefolgt von einer Aufwandsabschätzung, einer Programmierphase von ca. 45 Minuten, einer Codeintegration, einem kurzen ↑ Test und einer kurzen Re -flexion. Die letzte Iteration endete mit einem ausgiebigen Test, einem Prototyp, einem Review und einer ausführlichen Retrospektive (↑ Reflexion in Review und Retrospektive). Dieser Ablauf kam der geringen Programmiererfahrung der Teilnehmer entgegen, da die zu planende Programmierphase von 45 Minuten überschaubar blieb. Zugleich wurde zu viel Overhead vermieden, indem zwi -schendurch jeweils nur kurz getestet und reflektiert wurde. Stand-up-Meeting, Planung und AufwandsabschätzungDas Stand-up-Meeting zu Beginn diente dem Rekapitulieren des vorangegan -genen Treffens und ging dann in ein Planungsmeeting für die nächste Iteration über. Während der Planungs- und Entwurfsphase wurde vor allem viel disku -tiert. Diesbezüglich stellte das agile Vorgehen wegen der recht hohen Erwartun -gen an kommunikative und kooperative Fähigkeiten anfangs eine Herausforde -rung dar – zumindest für drei der vier Schüler. Beim ersten Stand-up-Meeting beispielsweise standen sie da wie «bestellt und nicht abgeholt». Ich habe aber darauf bestanden, dass jeder sich beteiligt. Im Verlauf wurde die Kommuni -kation untereinander beobachtbar besser: Nach drei Iterationen war beispiels -weise zu erkennen, dass die Diskussionen beim Planen und später bei der Auf -wandsabschätzung für die ↑ Tasks wesentlich differenzierter wurden und die Beteiligung gleichmäßiger verteilt war. Das Planning-Poker traf spontan auf große Zustimmung, trotz anfänglicher Schwierigkeiten aufgrund geringer Pro -grammiererfahrung. Die Schüler reflektierten die erlebten Abweichungen nach jeder Iteration und bezogen die Erfahrungen in die folgenden Abschätzungen ein: «Das ist geschätzt etwas/viel mehr/weniger aufwendig als [...], weil [...].» Dabei fielen ihnen auch Aspekte auf, die sie beim Planen der Tasks zu ungenau Im Unterrichts einsatz88besprochen hatten, weil dann die Schätzungen auseinanderlagen, d. h. die Ab -schätzung hatte auch eine Kontrollfunktion. Unterstützt wurde die Entwicklung hin zu differenzierteren Diskussionen, gleichmäßigerer Beteiligung und besse -ren Abschätzungen, vermutlich auch durch die wechselnde Zusammenstellung der Pairs beim Programmieren, die für den Wissenstransfer sehr förderlich war. DokumentationDokumentiert wurden ein im Rahmen eines Refactorings im vierten Treffen erstelltes Klassendiagramm und einige Programmabläufe in Form von Strukto -grammen. Für das Projekt und seine Ziele war diese Form der Planung passend, denn die Schüler hatten nur geringe Vorkenntnisse im Bereich von Modellie -rungstechniken und das Produkt war bezogen auf die Fähigkeiten der Schüler zu strukturierendem und abstrahierendem Denken wenig komplex. Test und PrototypAm Ende eines Treffens gab es jeweils einen lauffähigen und getesteten Proto -typ, der präsentiert werden konnte. Beim Testen des Prototyps haben die Schü-ler von sich aus eine Art Regressionstest (↑ Testen) durchgeführt, ohne dass ich das erwähnt oder erwartet hätte. Sie strukturierten und klassifizierten dazu zunächst die gefundenen Fehler, um ihre Erkenntnisse dann bei den zukünftigen Prototypen für Tests wiederzuverwenden. RefactoringNach drei Treffen gelangten die Schüler zu einem Punkt, an dem sie einige Programmierprobleme nicht mehr selbstständig lösen konnten und fachliche Hilfe benötigten. Bei der Umsetzung einer vorgeschlagenen Lösung stellte sich jedoch heraus, dass sie dazu gleichartige Funktionalitäten an vielen verschiede -nen Stellen benötigen würden und deshalb zunächst die Struktur überarbeitet werden sollte. Hierfür erstellten die Schüler zusammen mit mir zunächst ein Klassendiagramm der aktuellen Software aus Moderationskarten und Klebezet -teln. Indem die Schüler Klassen und Methoden verschoben und verschiedene Strukturen diskutierten, fanden sie Möglichkeiten, die Struktur zu verbessern. Die Umsetzung des Refactorings übernahm ein Pair, während das andere sich mit einem weiteren identifizierten Problem befasste: der uneinheitlichen und teils nicht standardkonformen Benennung von Klassen und Methoden.RetrospektivenDie Retrospektive der Iterationen am Ende der Treffen wurden gewissenhaft durchgeführt und die aus den Beobachtungen und Erfahrungen gewonnenen Reflexionskompetenz stärken durch Weiter  entwicklung des eigenen agilen  Prozesses 89Erkenntnisse von den Schülern zusammen mit Schlussfolgerungen für ihren Entwicklungsprozess schriftlich in einem Protokoll festgehalten. Am Ende wur -de beschlossen, welche Änderung in der nächsten Iteration umgesetzt werden soll und was man sich davon erhofft, sodass darauf in den folgenden Iterationen besonders geachtet werden konnte.Beobachtungen und Erfahrungen Mich beeindruckte im agilen Projekt besonders, dass ich Zeit und Gelegenheit hatte zuzuhören und zu beobachten. Ich musste nicht wie bisher moderieren, immer wieder Schüler motivieren und bestärken oder ihnen den jeweils nächs -ten Schritt erklären. Vielmehr fanden die Schüler mit den agilen Praktiken und dem iterativen Ablauf eine Struktur vor, in der sie Probleme rasch erkennen konnten, Zeit hatten, sie zu analysieren, Lösungsansätze zu entwickeln, umzu-setzen und zu evaluieren. Sie gingen dabei planvoll vor und wählten unterschied -liche Strategien und Herangehensweisen, um Probleme und Schwierigkeiten zu bewältigen, wie die folgenden drei Beispiele exemplarisch zeigen:Die Aufwandsabschätzung stellt für Schüler mit geringen Programmier -kenntnissen ein Problem dar, das sie erfahrungsgemäß nur schwer selbststän-dig lösen können. Indem die Schüler in der ersten Iteration nach Gefühl und in den weiteren Iterationen vergleichend schätzten, haben sie ihr Vorgehen zu einer effektiven Praktik ausgestaltet, wie sie heute oft auch in professionellen Projekten verwendet wird. Eine weitere typische Schwierigkeit stellt insbesondere für unerfahrene Programmiererinnen und Programmierer das Formulieren von geeigneten User-Storys dar. Entsprechend schien den Schülern die Formulierung von User-Storys für ihr Spiel zunächst schnell von der Hand zu gehen, bei der an -schließenden Planung von Tasks zeigte sich jedoch rasch, dass die Storys zum Teil nur einen Task enthielten, zum Teil aber auch viel zu umfassend waren. Eine in der Reflexion beschlossene und zu Beginn des zweiten Treffens vorgenom -mene Neuformulierung brach nun die zu umfangreich geratenen User-Storys in jeweils mehrere überschaubarere auf. Mithilfe des geschätzten und bei der Umsetzung tatsächlich benötigten Aufwands der neuen User-Storys verifi -zierten sie den Erfolg ihres Aufteilungsprozesses im weiteren Projektverlauf. Bemerkenswert fand ich, dass die Schüler im Zusammenhang mit dem Auftei-lungsprozess von User-Storys in der Reflexion auch die Rolle eines potenziellen Kunden mitbetrachteten. Im Verlauf des Projekts wurde den Schülern bewusst, dass sie in unbetreuten Treffen Probleme hatten, an den Wechsel beim ↑ Pair-Programming zu denken Im Unterrichts einsatz90und das Zeitfenster (↑ Timeboxing) für eine Iteration einzuhalten. Diese Be -obachtung veranlasste sie, das eigene Zeitmanagement zu reflektieren und die ‹Versprechungen› der Praktiken zu prüfen, um gegebenenfalls die Praktiken zu ändern oder gar fallen zu lassen, was aber nicht geschah.Insgesamt nehme ich als Lehrerin ebenso wie die Schüler das agile Vorgehen als sehr spannende und hilfreiche Methode für ein Softwareprojekt wahr. Agile Projekte sind Teil meines Regelunterrichts geworden und bieten den Schülerin-nen und Schülern in Form einer auf andere Kontexte übertragbaren Methode einen deutlichen Mehrwert.Agiler Methodenkoffer IGrundlegende Techniken  und Praktiken4 Titel:Beschreibung:  Priorität:  Dieses Kapitel gibt zunächst einen Überblick über den agilen Prozess und stellt dann sechs zentrale agile Methoden vor, die für den Einstieg empfehlenswert sind. Abhängig von den Rahmenbedingungen kann da­mit jede Lehrkraft individuell Schulprojekte ausgestalten. Die am Ende des Kapitels vorgestellten agilen Spiele zeigen Möglichkeiten auf, agiles Denken und Handeln projektunabhängig erlebbar zu machen.Iterationen – der agile Prozess934.1 Iterationen – der agile ProzessWichtigstes Merkmal eines agil organisierten Projekts ist das iterative und inkrementelle Vorgehen in kurzen Zeitintervallen mit früh sichtbaren und erprobbaren Zwischenergebnissen. Verankert sind auch klare Kom -munikationsstrukturen und eine Visualisierung der Projektarbeit. Beides sorgt für eine hohe Transparenz. Gewinn für Schülerinnen und SchülerDer agile Prozess• unterstützt durch eine strukturierte Vorgehensweise sowie eine Vielzahl an Methoden die Projektplanung, -organisation und -durchführung,• gibt durch Iterationen die Möglichkeit, sich mit dem Projekt weiterzuentwi -ckeln und Selbstvertrauen in der Projektdurchführung zu gewinnen,• motiviert durch frühzeitige und viele Erfolgserlebnisse im Gesamtprozess,• hilft, die eigenen Zielvorstellungen frühzeitig und regelmäßig zu überprüfen,• fördert die Eigenverantwortung und Kollaboration,• ermöglicht es, an verschiedenen Stellen fachliche und soziale Kompetenzen einzubringen und damit das Team zu unterstützen.  Gewinn für LehrkräfteDer agile Prozess• unterstützt durch Iterationen das Durchhaltevermögen und die Konzentration der Schülerinnen und Schüler, da die Intervalle überschaubar sind,• ermöglicht ein regelmäßiges produkt- bzw. prozessbezogenes Feedback an Schülerinnen und Schüler,• ermöglicht die Staffelung von Lerninhalten anhand der allmählichen Entwick -lung des Produkts,• macht Lernprozesse sicht- und beobachtbar.Agiler Methodenkoffer I94HintergrundAgil organisierte Softwareprojekte bestehen aus sich wiederholenden festen Zeitfenstern (Iterationen), in denen das Team den Prototyp jeweils um weitere Funktionalitäten ergänzt. Jede Iteration umfasst eine Planung, in der das Itera-tionsziel festgelegt wird, eine Arbeitsphase sowie eine Reflexion. Während einer Iteration darf ihr Ziel nicht mehr geändert werden, damit das Team fokussiert arbeiten kann. Iterationen folgen im agilen Prozess direkt aufeinander und sind in der Regel alle gleich lang. Professionelle Projekte beginnen zunächst mit einer strategischen Planungs -phase, in der die Produktvision des Kunden über eine Liste von Anforderun -gen, meist Backlog genannt, konkretisiert wird. In einem zweiten Schritt wird zusammen mit dem Kunden durch Prioritäten eine Bearbeitungsreihenfolge festgelegt. Im Gegensatz zum klassischen Projektmanagement ist die Sammlung der Anforderungen schlanker, weniger detailliert ausgearbeitet und dynamisch: Nach jedem Iterationsende können weitere Einträge ergänzt und die Prioritäten geändert werden. Auch Verbesserungen und Fehlerbehebungen sind typische Ergänzungen. Ein Backlog-Eintrag, bei Softwareprojekten ↑ User-Story ge -nannt, besteht aus einer Beschreibung, einer Priorität und einer ↑ Aufwands -abschätzung. In der strategischen Produktplanung wird auch die grundlegende Softwarearchitektur festgelegt, da deren nachträgliche Änderung mit hohem Aufwand verbunden wäre.Zu Beginn jeder Iteration (Sprint) werden nun unter Berücksichtigung von Prioritäten und dem Zeitrahmen (↑ Timeboxing) der Iteration (typischerwei -se zwischen zwei und sechs Wochen) User-Storys aus dem Backlog zur Um -setzung ausgewählt. Das Entwicklerteam plant nun die nötigen Teilaufgaben als ↑ Tasks und setzt diese um. Während der Planung und Umsetzung gibt jederzeit das ↑ Project-Board einen Überblick über den Bearbeitungsstand. Abgeschlossen wird jede Iteration mit einem funktionsfähigen, inkrementell wachsenden Prototyp, der Qualitätsabnahme durch den Kunden im Review und einer Reflexion zum Arbeitsprozess in einer Retrospektive (↑ Reflexion in Re -view und Retrospektive).Während der Umsetzung finden täglich kurze ↑ Stand-up-Meetings statt. ↑ Kollaborative Werkzeuge (↑ Repositorys) sowie ↑ Pair-Programming unterstützen die Zusammenarbeit, ↑ Testen sowie ↑ Refactoring sorgen für eine Qualitätssicherung. Die Abbildung 4.1 bietet einen Überblick über den agi-len Prozess und das Zusammenspiel der verschiedenen Bestandteile. Sie findet sich in einer größeren Version auf der Umschlaginnenseite. Iterationen – der agile Prozess95Abbildung 4.1:  Gesamtbild eines typischen agilen Prozesses Trotz der Dynamik, Anforderungen nachträglich einsteuern zu können, darf agiles Projektmanagement nicht dahingehend missverstanden werden, dass sich jederzeit spontane Einfälle einflechten lassen. So soll das Team während einer Iteration ungestört und fokussiert am Plan arbeiten können. Am Ende einer Iteration sind gemäß der Agilen Werte Rückmeldungen erwünscht und Änderungswünsche möglich.Umsetzung in der SchuleIn schulischen Softwareprojekten stellt sich das Planen und Durchführen langer Projektphasen in einem linearen Vorgehensmodell als schwierig heraus, weil Schülerinnen und Schüler nicht über die Erfahrung verfügen, Software zu Be -ginn des Projekts «auf dem Papier» vollständig durchplanen zu können. Durch die iterative Entwicklung haben die Schülerinnen und Schüler die Möglichkeit, Prototypen ihrer Software frühzeitig zu testen und dabei zu überprüfen, ob die Teilziele erreicht wurden. Erste Erfolge werden früh sichtbar und können de -monstriert werden. In komplexeren Oberstufenprojekten mit Schichten (wie Modell, Ansicht, Logik) erfolgt die Integration früher und regelmäßig, sodass dabei oft auftretende Schnittstellenprobleme schnell erkannt werden und die Agiler Methodenkoffer I96Korrekturmaßnahmen nicht so aufwendig sind. Sogar neue Funktionalitäten (Features) können jeweils vor Beginn einer Iteration in die Planung aufgenom-men werden. Zum Abschluss jeder Iteration wird der Entwicklungs- und damit auch der Lernprozess reflektiert. Der folgende Prozessablauf entspricht dem in Abbildung 4.2 dargestellten, für die Schule angepassten Kreislauf. Die Kurzbe -schreibung der Methoden auf der hinteren Umschlaginnenseite mag für Ein -steiger hilfreich sein.Projektvorbereitung1. [Optional] Durchführung eines agilen Spiels als Einstieg in agiles Denken und Handeln.2. Themenfindung, Gruppenbildung; Festlegen der Iterationsdauer und der zu verwendenden Techniken und Praktiken durch die Lehrkraft. 3. Bekanntgabe der Bewertungskriterien durch die Lehrkraft.4. Themenkonkretisierung durch Formulierung von möglichst unabhängigen User-Storys (Backlog).5. Installieren des Project-Boards mit den Spalten «To do», «In Progress», «Done». 6. User-Storys priorisieren und entsprechend der Priorität in die linke Spalte des Project Boards hängen (höchste Priorität nach oben).ProjektdurchführungJede Unterrichtseinheit beginnt mit einem Stand-up-Meeting.Die folgenden Schritte wiederholen sich in jeder Iteration.1. User-Storys wählen, die in dieser Iteration umgesetzt werden sollen und auch im Rahmen des Zeitfensters umgesetzt werden können.2. Tasks für die ausgewählten User-Storys planen. Ggf. Modelle aktualisieren.3. Implementieren und Project-Board aktuell halten, d. h. Tasks, die in Bear -beitung gehen, mit Namen versehen und in die Spalte «In Progress» hängen und wenn sie erledigt und getestet sind, auf «Done» hängen (und sich über das Erreichte freuen). 4. Integrieren: Die beiden Pairs, die als Erstes fertig sind, beginnen. Falls die Teams aus mehr als zwei Pairs bestehen, kommen die restlichen Pairs nach und nach an die Reihe, sobald sie auch fertig sind. Bei der Integration wird immer (mindestens) zu zweit gearbeitet. Die Schülerinnen und Schüler, die mit ihren Tasks fertig sind und nicht aktiv an der Integration mitwirken, helfen anderen, dokumentieren, suchen Fehler usw. Generell ist nie jemand ohne Arbeit.Iterationen – der agile Prozess975. Testen der Funktionalität einer User-Story sowie des neu entstandenen Prototyps als Ganzes. Getestete und somit fertige User-Storys auf «Done» hängen.6. Für in der Iteration nicht mehr behebbare Fehler einen Task schreiben, im Team kommunizieren und diesen für die nächste Iteration mit der fehler -haften User-Story in die erste Zeile der linken Spalte des Boards hängen.ReflexionGemeinsam reflektieren: 1. Prototyp vor der Gruppe, der Lehrkraft oder im Plenum präsentieren, Feed-back einholen und feiern. Daraus ergeben sich ggfs. weitere User-Storys bzw. ein Umpriorisieren.2. [Optional] Qualität des Quelltextes hinterfragen: Ist er gut strukturiert, da-mit verschiedene Teams unabhängig arbeiten können? Sind die vorhandenen Kommentare hilfreich? ... 3. [Optional] (Team-)Fähigkeiten reflektieren: Was können wir schon gut? Wo haben wir noch Schwierigkeiten? Was sollen wir im nächsten Schritt lernen?Abbildung 4.2:  Typischer agiler Prozess in der SchuleAgiler Methodenkoffer I98Ein Blick ins KlassenzimmerInformatiklehrerin Frau Lovelace berichtet:Das agile Vorgehen hat die Begeisterung meiner Schülerinnen und Schüler erhöht und die Ergebnisse von Projekten stark verbessert. Durch den klaren Zeitrahmen einer Iteration müssen sie sich auf das Wesentliche konzentrieren (KISS-Prinzip). Der Kreislauf mit inkrementellen Prototypen schafft motivierende Erfolgserlebnisse und erhöht die Kompetenz der Schülerinnen und Schüler durch die fest verankerten Reflexionen. Die institutionalisierten Meetings fördern einen respektvollen Umgang miteinander und die Schülerinnen und Schüler entwickeln ihre Persönlichkeit mit Agilen Werten weiter.VariantenEin übliches Vorgehen ist es, den agilen Prozess an das individuelle Projekt und die Bedürfnisse der Schülergruppe anzupassen, einzelne Methoden (vor -erst) wegzulassen oder stärker zu führen und mit zunehmender Erfahrung der Schülerinnen und Schüler weitere agile Techniken und Praktiken hinzuzufügen. Dadurch ist es möglich, unterschiedliche Schwerpunkte zu setzen (Kapitel 3).HerausforderungenDa Projektunterricht mit agilen Methoden idealerweise keinem starren Vorge -hensmodell folgt, sollte sich die Lehrkraft vorab und regelmäßig während des Projekts mit verschiedenen Fragen auseinandersetzen:• Welche Techniken und Praktiken sollen im Projekt verwendet werden? Un -terstützen diese die Schülerinnen und Schüler (noch) optimal?• Ist das Project-Board so gestaltet, dass zu jedem Zeitpunkt die relevanten Informationen auf einen Blick erfassbar sind?• Wie viel Zeit steht (noch) zur Verfügung? Welche Iterationsdauer ist für das Projekt und die Gruppe geeignet? Hilft es, den Ablauf einer Iteration zu mo -difizieren?• Wie formell müssen die Methoden eingeführt werden? Welche Änderungen, die Schülerinnen und Schüler im Verlauf daran vornehmen, lösen bzw. brin -gen Probleme?Iterationen – der agile Prozess99Tipps und Tricks aus der Unterrichtspraxis• Es kann sinnvoll sein, einzelne Methoden, z.B. User-Storys und Pair-Pro -gramming, bereits vor dem Projekt einzuführen.• Bei Zeitproblemen bleibt der Prozess agil: User-Storys ggf. einfach in die nächste Iteration verschieben, ein Gefühl für Erreichbares wird sich mit zu-nehmender Erfahrung einstellen. So bleibt auch Raum, notwendige Lern-phasen spontan zu integrieren.• Die Festlegung, dass es am Ende einer Iteration immer einen getesteten lauffähigen Prototyp gibt, sollte stets beibehalten werden. In Projekten mit Programmieranfängern kann der Ablauf aber dahingehend abgeändert wer -den, dass auch zweimal pro Iteration jeweils für eine kürzere Arbeitsphase Tasks zu User-Storys geplant werden und der Code nur am Ende der Iteration integriert und lauffähig gemacht wird.• Kann eine Iteration am Ende einer Stunde einmal nicht abgeschlossen wer-den, verläuft die nächste Doppelstunde wie folgt: Im Stand-up-Meeting wird der Arbeitsstand rekapituliert, dann wird die Iteration mit einem getesteten und lauffähigen Prototyp abgeschlossen. Die folgende Iteration wird ver -kürzt, sodass das Team wieder in den gewohnten Rhythmus kommt.Agiler Methodenkoffer I1004.2 User-Storys – Anforderungen aus  KundensichtEine User-Story beschreibt eine An -forderung an das Softwaresystem aus Sicht des Kunden. Sie besteht aus we -nigen Sätzen und ist in Alltagssprache formuliert.Gewinn für Schülerinnen und SchülerUser-Storys sind• ein zentrales Hilfsmittel zur Analyse, Konkretisierung und Strukturierung der Zielsetzungen in überschaubaren, handhabbaren Teilen,• eine Formulierungshilfe für Projektziele, • Basis für Kommunikation über die Wichtigkeit (Priorisierung) der Projektziele mit dem Kunden und innerhalb der Gruppe,• eine Messgröße für den Projektfortschritt,• eine Möglichkeit, sich unabhängig von technischen Fertigkeiten einzubringen. Gewinn für LehrkräfteUser-Storys sind• ein Instrument, um Projektziele unter Berücksichtigung der Fähigkeiten der Schülerinnen und Schüler bezüglich ihrer Machbarkeit zu bewerten und ggf. früh lenkend einzugreifen,• eine Mess- und Beobachtungsgröße für den Projektfortschritt,• eine elegante Steuerungsmöglichkeit, um in der Rolle des Kunden dezent auf den Projektablauf Einfluss zu nehmen. Titel:Beschreibung:  Priorität:  User-Storys – Anforderungen aus  Kundensicht101HintergrundUser-Storys werden in der agilen Softwareentwicklung zur Spezifikation von Anforderungen eingesetzt. Sie beschreiben in Summe das ganze Produkt. Jede einzelne User-Story beantwortet folgende drei Fragen: • Wer fordert etwas an? (Rolle)• Was wünscht sich der Anforderer? (Ziel/Funktion)• Warum ist das wichtig? (Nutzen) Dadurch wird eine Funktionalität der Software aus Sicht des Nutzers formuliert. User-Storys werden deshalb in enger Zusammenarbeit mit dem Kunden oder der Kundin geschrieben, wobei Fachbegriffe der Informatik zu vermeiden sind. Durch User-Storys werden weder Techniken noch Werkzeuge festgelegt.Abbildung 4.3:  Allgemeiner Aufbau und konkretes Beispiel einer User-StoryUser-Storys sind ein wesentliches Instrument zur Steuerung eines agilen Pro -zesses (↑ Iterationen). Unter anderem werden der Aufwand sowie der Pro -jektfortschritt mittels User-Storys bestimmt und kontrolliert. Dazu gibt es unterschiedliche Vorgehensweisen. Die Reihenfolge, in der die User-Storys bearbeitet werden, legt der Kunde, oft gemeinsam mit dem Team, durch eine Priorisierung fest. Dabei berücksichtigt er insbesondere Funktionalitäten, die ein erster ↑ Prototyp haben soll. Kommt es während des Projekts zu Anforde -rungsänderungen, können sowohl die Priorisierung der User-Storys als auch die noch nicht umgesetzten User-Storys selbst in Absprache zwischen Kunde und Entwicklerteam jeweils vor Beginn einer Iteration geändert werden.Umsetzung in der SchuleDie Schülerinnen und Schüler sind in ihren Unterrichtsprojekten meist ihre eigenen Kunden und müssen sich zunächst auf ein grobes gemeinsames Pro -Titel:  Beschreibung:  Als <Rolle> möchte ich <Ziel/Funktion>, um <Nutzen>.Priorität:Titel:  Bestätigung DatenschutzerklärungBeschreibung:  Als Anbieter eines Online ­Shops möchte ich, dass jeder neue Nutzer das Lesen der Datenschutzerklärung bestätigt, um rechtlich einwandfrei seine E ­Mail­Adresse für eigene Werbezwecke nutzen zu können.Priorität:  70Agiler Methodenkoffer I102jektziel einigen. Anschließend ist dieses genauer auszudifferenzieren und zu beschreiben. Hierzu werden die ermittelten Anforderungen auf Karteikarten festgehalten, wobei jede Karteikarte genau eine User-Story beinhaltet, wie die folgenden Beispiele illustrieren. Abbildung 4.4: User-Storys aus einem AbenteuerspielAnschließend werden die User-Storys vom Team priorisiert (was ist besonders wichtig, was ist nur «nice to have») und nach Priorität geordnet in die linke Spal -te des ↑ Project-Boards gehängt. Priorisierungen beginnen bei zehn (höchste Priorität) und werden in Zehnerschritten hochgezählt. So können ggf. später neue User-Storys sowohl an beliebiger Stelle und insbesondere am Ende einge -fügt werden. Ebenso wie im professionellen Projekt können die Teams sowohl die User-Storys selbst als auch deren Priorisierung im Verlauf des Projekts än-dern. Die Abschätzung des Aufwands wird im Schulkontext meist weggelassen, da dies bei fehlenden Programmier- und Projekterfahrungen eine sehr schwie -rige Aufgabe darstellt. Es bietet sich folgende Kontrollliste an, die beim Schreiben von User-Storys hilfreich ist:Meine User-Story• beschreibt eine Aktivität oder Funktion des Produkts,• ist aus Sicht des Kunden in Alltagssprache geschrieben,• ist kurz, d.h. besteht höchstens aus zwei bis drei Sätzen,• enthält keine technischen Ausdrücke,• legt keine Werkzeuge oder Techniken fest,• beinhaltet Titel, Beschreibung, Priorität und optional eine Aufwandsabschätzung.Titel:  LebensenergieBeschreibung:  Wenn ein Avatar mit einem giftigen/energiespendenden Element in Berüh -rung kommt, werden ihm Lebensenergiepunkte abgezogen/addiert, um das Spiel attraktiver zu machen.Priorität:  10Titel:  Lebensenergie VariationBeschreibung:  Der Abzug an Lebensenergie -punkten bei einem Avatar durch Berührung mit einem giftigen Element kann durch Tragen eines Amuletts oder eines Schutzumhangs reduziert werden.Priorität:  40User-Storys – Anforderungen aus  Kundensicht103Ein Blick ins KlassenzimmerInformatiklehrer Herr Weizenbaum berichtet:Nachdem sich Teams gebildet hatten, war es zunächst ihre Aufgabe, das gewählte Thema zu präzisieren und Ideen zu sammeln. Ich kam dann immer mal wieder als Kunde zu den einzelnen Teams dazu und ließ mir berichten, wie weit sie waren und wie sie sich ihr Produkt vorstellten. Durch geschicktes Nachfragen, etwa «Das habe ich noch nicht ganz verstanden …», konnte ich das Team auf Schwierigkeiten oder ungeklärte Punkte hinweisen. Unrealistische Ziele korrigierte ich, indem ich mir als Kunde etwas Ähnliches, aber Machbares wünschte. Nach der Sammlung der Ideen haben die Schülerinnen und Schüler diese als User-Storys formuliert und auf Kartei -karten festgehalten. Hierzu erhielten sie eine Kontrollliste mit zu berücksichtigenden Regeln. Ich kam in der Rolle des Kunden noch ein oder zwei Mal dazu, um zu prüfen, ob die User-Storys tatsächlich leicht in einer Iteration implementierbar sind. Zu um -fassende User-Storys ließ ich mir noch mal erklären und bat das Team dann, diese in mehrere Storys zu unterteilen. VariantenRollenspielUm den Ablauf der Prozesse zu verstehen und die einzelnen Aktivitäten und Funktionalitäten eines Systems zu erkennen, eignet sich die Methode des Rol-lenspiels. Dabei verkörpert ein Schüler oder eine Schülerin die Software, wäh-rend die anderen in der Rolle der Nutzer mit der Software verbal interagieren. Als Nutzer tust du so, als ob du die Soft-ware normal benutzen würdest.Als «Software» sagst du, was auf dem Bildschirm zu sehen ist und im Computer passiert.Und jetzt berührt mein Avatar das MonsterGut, in dem Moment färbt sich dein Avatar grün, wird ausgeblendet und es  erscheint «Game Over»Agiler Methodenkoffer I104Verbalisiert werden die notwendigen Schritte, mit der die Software angemessen reagiert. Die Erkenntnisse aus diesem Spiel werden anschließend genutzt, um die User-Storys zu formulieren.Student-StorysHierbei werden Lernaufgaben in Form von User-Storys durch die Lehrkraft vor -gegeben, um Unterrichtsphasen lehrergesteuert zu strukturieren oder Lern- und Erarbeitungsphasen im Projekt einzuschieben (z.B. Einarbeitung in ein Soft -warewerkzeug, persistente Datenspeicherung, Einbindung von Audiodateien, Kennenlernen von Variablen).Geskriptetes ProjektEine Weiterführung der Student-Story stellt das geskriptete Projekt dar, in dem alle User-Storys bereits durch die Lehrkraft vorgegeben werden. Die Lehrkraft nimmt die Rolle des Kunden ein und gibt die Projektziele und den Ablauf mittels priorisierter User-Storys sowie dazugehöriger ↑ Tasks vor. Dies kann insbeson -dere im Anfangsunterricht eine erfolgreiche Zusammenarbeit der Schülerinnen und Schüler und effektive Programmierarbeit ermöglichen. Gleichzeitig werden so verschiedene Praktiken agiler Projekte quasi nebenbei eingeführt (Kapitel 3.5). Modeling-, Refactoring- und Documentation-StorysZum Einsteuern von Aufgaben, deren Ziel keine neue Funktionalität, sondern die Sicherung der Softwarequalität darstellt, können diese speziellen User-Storys eingeführt werden. Modeling-Storys reservieren Zeit, in der sich die Schüler mit Modellierungsaspekten (statisch und/oder dynamisch) beschäftigen. Beispiels -weise kann ein so erstelltes Klassendiagramm bei weiteren Planungsschritten helfen und als zentraler Bezugspunkt bei Besprechungen dienen. Refacto -ring-Storys reservieren Zeit für ein ↑ Refactoring und Documentation-Storys Zeit für die ↑ Dokumentation. Herausforderungen• Die Unterscheidung der Benutzer- und Entwicklerperspektive kann für Schü -lerinnen und Schüler schwierig sein.• User-Storys werden leicht zu umfangreich (sogenannte «Epics», die ein gan -zes Etappenziel statt einer einzelnen Funktionalität beschreiben). Mitunter sieht man der User-Story die Intention der Schülerinnen und Schüler aber nicht an, wie beispielsweise bei der folgenden User-Story eines Scratch-Pro -jekts.User-Storys – Anforderungen aus  Kundensicht105Abbildung 4.5:  User-Story aus einem AbenteuerspielAuf Nachfrage der Lehrkraft ergeben sich hier eine Vielzahl an Funktionalitäten, die wie folgt aufgeteilt und zwischen den bereits priorisierten User-Storys ein-geordnet werden können.Abbildung 4.6:  Ausdifferenzierte User-Storys eines Spielprojekts mit ScratchTitel:  StartseiteBeschreibung:  Zu Beginn gibt es eine Startseite.Priorität:  50Titel:  StartseiteBeschreibung:  Zu Beginn gibt es eine Startseite. Man kann sich die Spielregeln anzeigen lassen und die Hintergrundmusik an ­ und ausschalten. Wenn man das Spiel startet, wird man nach dem Na -men gefragt.Priorität:  35Titel:  AvatarkostümeBeschreibung:  Es sollen drei verschiedene Avatarkostüme zur Verfügung stehen. Über die Startseite ist eine Auswahl des Kostüms möglich.Priorität:  55Titel:  AuswahlseiteBeschreibung:  Die Startseite wird zur Auswahl -seite erweitert. Man gelangt über eine Tasten -kombination (während des Spiels) und nach Erreichen eines neuen Levels zur Auswahlseite. Der Name, der Punktestand, das aktuelle Level und Kostüm werden angezeigt.Priorität:  75Titel:  Erweiterung der Avatarkostüme Beschreibung:  Weitere Avatarkostüme sind Levels zugeordnet und kosten zunehmend mehr Punkte. Man kann sich mit den erspielten Punk -ten weitere Avatarkostüme freischalten, sobald man das entsprechende Level erreicht hat.Priorität:  85Titel:  Wahl einer HintergrundmusikBeschreibung:  Mit zunehmendem Level kann man sich auch andere Hintergrundmusik aus­suchen. Die noch nicht freigeschalteten Musiktitel sind grau. Musiktitel kosten keine Punkte.Priorität:  110Agiler Methodenkoffer I106Material• Vorbereitete Karten, welche die Struktur von User-Storys vorgeben (Titel, Beschreibung, Priorität)• Beispiel-User-Storys als Orientierung für Umfang und Form Tipps und Tricks aus der Unterrichtspraxis• Wenn die Schülerinnen und Schüler noch sehr unerfahren sind und die Pro -jektzeit relativ lang ist, genügt es, sie zunächst nur User-Storys für ein erstes Etappenziel schreiben zu lassen, die sie im Verlauf des Projekts durch weitere ergänzen. Meist kommen nach einigen Iterationen von selbst weitere Ideen, die zum Projektziel passen.• Zielorientiert können User-Storys explizit so beschrieben werden, dass sie in einer Iteration (z.B. 45 oder 90 Minuten) bearbeitet werden können. Abhän -gig von der Lerngruppe reichen eventuell sogar Iterationen mit User-Storys, die sich in 15 bis 20 Minuten bearbeiten lassen.• Die Lehrkraft kann ggf. Implementationshinweise (z.B. Tasks) auf der Rück -seite der User-Storys unterbringen.• User-Storys können nicht immer arbeitsteilig parallel bearbeitet werden. Regeln wie «nicht in der gleichen Methode» oder «nicht in der gleichen Figur» sollten auf Task-Ebene aufgestellt und bekannt gemacht werden. • Ist eine Steuerung des Projektverlaufs bspw. hinsichtlich rahmenplanrele -vanter Inhalte sinnvoll, kann diese durch das Hinzufügen oder passendes Priorisieren der User-Storys durch die Lehrkraft in der Rolle des Kunden elegant einfließen.• Eine strikte Struktur mit Rolle, Ziel/Funktion und Nutzen wie im professio -nellen Bereich (Abbildung 4.3) ist im schulischen Kontext nicht nötig.Das Project-Board – Planung und Stand im Blick1074.3 Das Project-Board – Planung und Stand im BlickEin Project-Board visualisiert die  Projektziele, den Entwicklungsprozess sowie den aktuellen Projektstand und dient als Kommunikations- und Wis -sensschnittstelle.Gewinn für Schülerinnen und SchülerDas Project-Board • gibt einen Überblick über das Projekt, insbesondere zeigt es die Ziele und Auf -gabenpakete, den aktuellen Arbeitsstand (und damit auch den Projektfort -schritt) sowie die Arbeitsverteilung,• unterstützt durch die Visualisierung des Prozesses die Selbstorganisation,• motiviert durch aktives Umhängen erledigter Aufgaben und ermöglicht es, das Erledigen zu feiern. Gewinn für LehrkräfteDas Project-Board• erleichtert die Betreuung der Schülerinnen und Schüler durch die Sichtbarkeit aller Aufgaben, des aktuellen Arbeitsstands, der aktuellen Arbeitsverteilung und damit der individuellen Projektbeiträge,• bietet durch den transparenten Projektfortschritt Anlässe für Lob, zum Steu-ern oder zur Planung von Hilfestellungen. Agiler Methodenkoffer I108HintergrundIn der agilen Softwareentwicklung kommt dem Project-Board eine zentrale Rol -le in der Organisation der Arbeitsabläufe und der Kommunikation im Projekt zu. Die bei Projektbeginn formulierten Beschreibungen der Anforderungen an das Softwaresystem (↑ User-Storys) werden am Project-Board als sogenann -tes Backlog gesammelt: In einer nach Prioritäten geordneten Liste werden die User-Storys in der linken Spalte angepinnt. Das Backlog ist dynamisch, d. h. im Laufe der Entwicklung dürfen einzelne Punkte ergänzt, ausdifferenziert oder neu priorisiert werden.Je nach Größe des Projekts werden das gesamte Backlog oder auch nur die User-Storys für die aktuelle ↑ Iteration am Project-Board angebracht. Die User-Storys der aktuell anstehenden Iteration werden jeweils durch ↑ Tasks und eine ↑ Aufwandsabschätzung konkretisiert. Folgende drei Spalten sind auf jedem Project-Board zu finden: In der ers -ten Spalte, «To Do», hängen nach Prioritäten geordnet die zu bearbeitenden User-Storys sowie die zugehörigen Tasks, falls die User-Storys schon spezifi -ziert wurden. Daneben, in der zweiten Spalte, hängen die einzelnen Tasks, die gerade in Bearbeitung sind. Der bearbeitende Entwickler zeichnet sich für alle sichtbar für den Task verantwortlich und aktualisiert den Bearbeitungsstatus am Project-Board. In der dritten Spalte befinden sich die bereits vollständig umgesetzten erledigten Tasks und User-Storys. Häufig ist ein sogenanntes Burn-Down-Chart enthalten, mit dessen Hilfe kontinuierlich der noch zu erledigende Arbeitsaufwand in Abhängigkeit von der zur Verfügung stehenden Zeit grafisch dargestellt wird (↑ Aufwandsab -schätzung). In Softwareunternehmen werden Project-Boards oft auch in elek -tronischer Form verwendet, insbesondere wenn das Team auf verschiedene Arbeitsorte verteilt ist. Durch den hierin gespeicherten Prozessverlauf kann ein Project-Board auch zur Dokumentation des Projekts herangezogen werden. Umsetzung in der SchuleAuch in Schulprojekten dient das Project-Board dem Zweck, den Planungspro -zess zu unterstützen und den aktuellen Stand transparent zu machen. Da bei Besprechungen (↑ Stand-up-Meetings und andere Besprechungsformen) die darauf sichtbaren Informationen zentral sind, sollte das Project-Board im Klas -senzimmer zu jeder Zeit verfügbar und davor ausreichend Platz zum Versam -meln der Gruppe sein. Das Project-Board – Planung und Stand im Blick109Ein Blick ins KlassenzimmerInformatiklehrer Herr Turing berichtet:Da alle Tasks, deren Bearbeitung zumindest begonnen wurde, mit Namen versehen sind, kann sich jedes Teammitglied bei Nachfragen und Problemen im Zusammen-hang mit diesem Task und dessen Umsetzung gezielt an die entsprechenden Spe -zialisten wenden.Ich habe zu jedem Zeitpunkt Informationen darüber, welcher Schüler und welche Schülerin was bearbeitet und welchen Anteil sie bei der Projektarbeit haben. Auch Wissenslücken, ein zu umfangreicher Task oder mangelhafte Zielorientierung wer -den offenbar, wenn ein Task über lange Zeit im Status «In Progress» verharrt. Diese Transparenz der individuellen Beiträge zum Projektfortschritt schätze nicht nur ich, sondern auch die Teams schätzten sie sehr, weil sie ein Anstoß sind, die Betroffenen persönlich anzusprechen und ggfs. helfend bzw. steuernd einzugreifen. VariantenZusatzbereiche auf dem Board• Ende der Iteration: Um den Zeitrahmen (↑ Timeboxing) transparent zu ma -chen und die Fokussierung zu erhöhen, ist es sinnvoll, am Project-Board das Ende der aktuellen Iteration sichtbar zu machen (Abbildung 3.11).• Problembereich: Hier können konkrete Fragen an das Team oder die Lehr -kraft formuliert und abgelegt werden (Abbildung 3.16).• Ideenbereich: Hier können Ideen spontan abgelegt werden, damit sie nicht verloren gehen; diese können später priorisiert und als User-Story übernom -men werden.• Spalten für ↑ Testen, ↑ Dokumentieren und/oder ↑ Refactoring: Der Be -deutung dieser wichtigen Aspekte der Softwareentwicklung kann durch die Aufnahme am Project-Board ein höherer Stellenwert gegeben werden. Digitale Project-BoardsFür Schülerinnen und Schüler sind besonders Project-Boards mit echten Zetteln geeignet, da das Verschieben einzelner Tasks auf einem physischen Board einen hohen Motivationseffekt hat. Dennoch mag ein digtiales Project-Board bei Ober -stufenprojekten sinnvoll sein, weil digitale Dokumente wie Klassendiagramme und Anleitungen für externe Bibliotheken direkt eingebunden werden können, der Arbeitsprozess über ein Protokoll der Aktivität dokumentiert wird und ein Zugriff auch außerhalb des Klassenzimmers für häusliche Arbeiten möglich ist (Kapitel 3.3). Es gibt eine Vielzahl an professionellen Möglichkeiten, von denen Agiler Methodenkoffer I110jedoch die meisten nicht für die Schule geeignet sind, weil sie nur einen Teil der folgenden didaktischen bzw. organisatorischen Anforderungen erfüllen:• Die Regeln für den Prozessablauf sollten nicht so strikt sein, dass sie in der Schule Schritte erzwingen, die aus didaktischer Sicht sinnlose Daten erzeugen.• Die Anzahl der Spalten sollte selbst bestimmt und die Spaltenüberschriften selbst gestaltet werden können.• Es sollte die Möglichkeit geben, den User-Storys Prioritäten zuzuordnen.• Auch für Teams in Klassenstärke sollten keine Kosten anfallen Herausforderungen• Wenn mehrere Klassen den gleichen Klassenraum nutzen, sollte sicherge -stellt werden, dass Project-Boards nicht verändert werden.• Räumliche Gegebenheiten schränken den Platz für mehrere Project-Boards als Treffpunkt unter Umständen ein, sodass eine geschickte Raumaufteilung erforderlich ist.Material• Als Project-Boards können Wandtafeln (Pinnwände, Whiteboards), Stell -wände, Flip-Charts, kleinere Pinnwände, Styroporplatten oder Poster, nach Möglichkeit in der Größe A0, verwendet werden.• Buntes Papier, z.B. Karteikarten, für die User-Storys und Klebezettel für die TasksTipps und Tricks aus der Unterrichtspraxis• Das Project-Board sollte am besten etwas entfernt von möglichen Sitzgele -genheiten aufgestellt werden, um zu vermeiden, dass die Stand-up-Meetings zu einer gemütlichen Sitzrunde werden.• Neben dem Project-Board sollte an der Wand Platz für die Modellierung ge -geben werden (um Klassendiagramme o. Ä. aufzuhängen). In unseren Pro -jekten half dies den Schülerinnen und Schülern dabei, den Überblick über die Struktur ihrer Software zu behalten, und wurde wie selbstverständlich in die Gespräche integriert. Diese werden dadurch konkreter und fokussierter. • Wenn die Project-Boards am Stundenende weggeräumt werden müssen, können Poster vorteilhaft sein, da sie zusammengerollt oder gefaltet werden können.• Mit Fotos in regelmäßigen Abständen kann der Stand des Project-Boards festgehalten und damit die Projektentwicklung dokumentiert werden.Tasks – Arbeitspakete aus Entwicklersicht1114.4 Tasks – Arbeitspakete aus EntwicklersichtTasks sind kleine, aus Entwicklersicht beschriebene Aufgaben, die zu bearbeiten sind, um eine User-Story umzusetzen.  Gewinn für Schülerinnen und SchülerTasks• sind ein Instrument, um von User-Storys zu einem Entwurf zu gelangen,• fördern Selbstorganisation und Eigenverantwortung,• stellen ein Hilfsmittel zur Verbalisierung von Gedanken und Lösungsansätzen dar,• können als To-do-Liste gesehen werden und vereinfachen dadurch die Ein-schätzung des Aufwands und die Umsetzung,• ermöglichen Erfolgserlebnisse bei der jeweiligen Fertigstellung. Gewinn für LehrkräfteTasks • machen anhand der Zuordnungen nachvollziehbar, wer welche Teile bearbeitet hat, und Ungleichverteilung der Arbeit sicht- und adressierbar,• machen Problemlösevorgänge sichtbar und vergleichbar,• zeigen konzeptionelle Fehler frühzeitig auf.Agiler Methodenkoffer I112HintergrundSind die ↑ User-Storys erstellt und priorisiert, wird jede User-Story der nächs -ten ↑ Iteration in mehrere Tasks überführt, die hierzu auf jeweils einem Kle -bezettel notiert werden. In der Softwareentwicklung ist ein Task eine knappe technische Beschreibung eines kleinen abgeschlossenen Arbeitspakets, das von einer einzelnen Entwicklerin, einem einzelnen Entwickler bzw. dem Entwickler -paar in überschaubarer Zeit (einige Stunden) erledigt werden kann. Tasks wer-den mit ↑ Aufwandsabschätzungen versehen. Als Summe dieser Abschätzungen über alle Tasks erhält man ein genaueres Maß des zu erwartenden Aufwands für die Implementierung der gesamten User-Story.Umsetzung in der SchuleUm User-Storys, die ja als reine Anforderungen aus Kundensicht formuliert sind, zu realisieren, bedarf es nun der Planung und Beschreibung der konkre -ten Schritte, die aus Entwicklersicht bei der Implementierung notwendig sind:Notwendige Fragen bei der Implementierung• Wo erfolgen Änderungen? (Welche Klassen des aktuellen Prototyps werden von der Umsetzung der User-Story berührt?)• Was muss geändert werden? (Attribut, Methode …)• Wie erfolgen die Änderungen? (Implementierungsdetails wie z.B. Datentypen, Signaturen von Methoden, Attributnamen, Bibliotheksfunktion …)Auch in der Schule bietet es sich an, die Antworten auf diese Fragen je Task auf einem Klebezettel zu notieren. Die Erstellung der Tasks erfolgt gemein -sam im Team und dient damit auch der Diskussion in der Gruppe darüber, wie User-Storys technisch umgesetzt werden können bzw. sollen. Leistungsstarke und leistungsschwache Schülerinnen und Schüler arbeiten hierbei intensiv zu-sammen, was auch den Wissenstransfer in der Gruppe unterstützt. Da ein Task wesentliche Umsetzungsentscheidungen festhält, sind in dieser Phase auch Ent -wurfs- und Modellierungsaspekte zu berücksichtigen. Durch die Beschreibung, wo, d. h. in welchen Klassen, der Task zu Änderungen führt, lässt sich dann auch entscheiden, welche Tasks parallel bearbeitbar sind.Je nach Situation und Lerngruppe können Tasks unterschiedliche Komplexi -tät aufweisen. So ist das Erstellen einer Klasse, die sich um Ein- und Ausgaben über eine grafische Benutzeroberfläche kümmert, relativ komplex, das Erstellen Tasks – Arbeitspakete aus Entwicklersicht113eines Konstruktors relativ einfach. Tasks können somit auch sehr kleine Arbeits -aufträge sein, nahe an dem, was im Code umzusetzen ist. Soll im Unterricht auch die Zeitplanung berücksichtigt werden, kann wie in professionellen Projekten eine Abschätzung des zeitlichen Aufwands notiert werden. Durch Ermittlung des Gesamtaufwands kann dann bestimmt werden, ob die Iterationsplanung sinnvoll ist und sich die Arbeit in der zur Verfügung stehenden Unterrichtszeit umsetzen lässt, oder ob noch Anpassungen vorge -nommen werden müssen. Die Tasks werden nun an die Karteikarten der jeweils dazugehörigen User-Story geheftet und am ↑ Project-Board angebracht. Im weiteren Verlauf wählen die Programming-Pairs (↑ Pair-Programming) einen Task, notieren ihre Namen darauf und hängen ihn am Project-Board in die Spalte «in Progress». Treten Fragen auf, die einen anderen Task betreffen, können sich die Schülerin -nen und Schüler direkt an das Pair wenden, das den betreffenden Task bearbei-tet. Sobald ein Task umgesetzt ist, wandert er in die Spalte «Done». Ein Blick ins KlassenzimmerInformatiklehrerin Frau Hopper berichtet:Unten sehen Sie in einem Beispiel, wie im Rahmen einer Spielprogrammierung mit Scratch ein Team in meiner Klasse die User-Storys über Tasks sehr gut geplant hat. Die Tasks können gut arbeitsteilig erledigt werden, weil die zu erledigenden Auf -gaben in unterschiedlichen Figuren (Sprites) liegen. Die Schülerinnen und Schüler müssen dennoch gut planen und sich absprechen, weil viele Interaktionen zwischen Scratch-Figuren enthalten sind. Es ist von Vorteil, dass die Schülerinnen und Schüler aufgrund der niedrigen Priorität der User-Story schon in mehreren vorangegangenen Iterationen lernen konnten, wie man solche Absprachen gut und zügig trifft und wie man sie als Task festhält. Die Aufwandsabschätzung erfolgte relativ durch Vergabe von T-Shirt-Größen S, M, L.Agiler Methodenkoffer I114Abbildung 4.7:  Ausdifferenzierte User-Storys eines Spielprojekts mit ScratchEin Blick ins KlassenzimmerInformatiklehrer Herr Backus berichtet:In Oberstufenprojekten sind die Themen komplexer, aber auch da helfen User-  Storys und zugehörige Tasks, Aufgabenpakete zu schnüren. Letztes Jahr wollte bei mir im Kurs ein sehr leistungsstarkes Team eine Software entwickeln, die den Vertre -tungsplan personalisiert: Ausgehend von einem PDF-Dokument für die ganze Schule sollten nur diejenigen Stunden angezeigt werden, die eine Klasse bzw. einen Kurs betreffen. Sehen Sie, wie das Team die User-Story «Vertretungsplaninformationen aus einem PDF-Dokument auslesen» in Tasks unterteilt hat:Titel:  Spielanfang und Spielende ausgestaltenBeschreibung:  Zu Spielbeginn kann man sich die Regeln anzeigen lassen und die Hintergrundmusik an­ und ausstellen. Wenn man das Spiel startet, wird man nach dem Namen gefragt, und sobald man ihn eingegeben hat, kann man spielen. Wenn die Spielfigur alle Leben verloren hat, nennt sie den Namen und die Zahl der Punkte.Priorität:  80Button «Start» erstellen; Wenn angeklickt:– Nachricht «Los geht's!» senden– Button verstecken– Die Spielfigur fragt: «Wie heißt du?» ➜ Namen speichern LButton «Spielregeln» erstellen; wenn angeklickt, erscheinen die Spielregeln. Bei «Los geht's!» ➜ Button verstecken.MWenn die Spielfigur alle Leben verloren hat, sagt sie «Hallo» und den Spieler-namen und dann «Deine Punkte:» gefolgt vom Punktestand.MButton «Sound» mit Kostümen für «an» und «aus» erstellen. Bei Klick Kostüm wechseln und Hintergrundmusik an ­/ausschalten.Bei «Los geht's!» ➜  Button verstecken. MTasks – Arbeitspakete aus Entwicklersicht115VariantenVorgegebene Tasks in ausgearbeiteten Softwareprojekten Um unerfahrene Schülerinnen und Schüler anfänglich bei der Erstellung von Tasks zu unterstützen, können diese von der Lehrkraft vorgegeben oder deren Erstellung aus den User-Storys angeleitet werden (Kapitel 3.5). Dies gibt den Schülerinnen und Schülern Sicherheit und lässt eine anfängliche Steuerung durch die Lehrkraft zu. Der Beginn der Projektarbeit wird dadurch planbarer und ermöglicht geplante Binnendifferenzierung sowie die Einbettung von Lern -phasen in die Projektarbeit.User-Storys als TaskIn überschaubaren Projekten, z.B. bei der Verwendung einer blockbasierten Sprache, kann der Übergang von einer Beschreibung aus Kundensicht zu einer Beschreibung aus Entwicklersicht so naheliegend werden, dass er von Schüle -rinnen und Schülern auch ohne das Formulieren einzelner Tasks direkt beim Programmieren bewältigt werden kann. Hierfür müssen die User-Storys relativ kleinschrittig gestaltet werden (Kapitel 3.2).Titel:  Vertretungsplaninformationen aus einem PDF­Dokument auslesen Auslesen von Informationen aus dem PDF ­DokumentJava­BibliothekRecherchieren: Recherchie -ren einer Java ­Bibliothek, mit der ein PDF ­Dokument gelesen und dessen Inhalt als Zeichenketten gespei -chert werden kann.Lesen eines einfachen PDF­DokumentsErstellen einer Klasse PDF­Leser, die ein PDF ­ Dokument im gleichen Verzeichnis öffnet und den Inhalt als Zeichenkette speichert.Auslesen der Vertretungs -planinformationenZeilenweises Auslesen des Vertretungsplans und Speichern der Information in 0bjekten der Klasse Stundenausfall.Datenstruktur zum Speichern eines Stundenausfalls erzeugenErstellen einer Klasse «Stun-denausfall» mit Attributen wie Klasse/Kurs, Stunde, entfallender Lehrer, vertreten-der Lehrer und passenden Getter ­Methoden.Lesen eines strukturierten PDF­DokumentsHerausfinden, wie man in einem tabellenartig auf -gebauten PDF ­Dokument die Information einzelner Zellen auslesen kann.Agiler Methodenkoffer I116Herausforderungen• Das Betrachten eines Problems aus unterschiedlichen Blickwinkeln in User-Storys (Benutzersicht) und Tasks (technische Sicht) fällt Schülerinnen und Schülern mitunter schwer. • Die Parallelbearbeitung von Tasks kann dann problematisch werden, wenn gleichzeitig dieselbe Methode modifiziert wird und das beim Zusammenfüh -ren zu Konflikten führt. Schülerinnen und Schüler lernen allerdings schnell aus einer solchen Konflikterfahrung und werden derartige Situationen in Zukunft vermeiden.• Wenn Tasks relativ eng zusammenhängen und sich die arbeitsteilige Umset -zung als schwierig erweist, arbeiten die Pairs in der Regel an unterschiedli-chen User-Storys. • Ebenso wie User-Storys werden auch Tasks von den Schülerinnen und Schü -lern oft sehr knapp oder kryptisch formuliert, was aber ausreichend ist, wenn sie vom ganzen Team verstanden werden. • Manche Teams oder Teammitglieder neigen dazu, zu viel in eine User-Story hineinzuinterpretieren und mehr Tasks als notwendig zu planen. Neben Hin -weisen auf das KISS-Prinzip kann man ggf. auch optionale Tasks einführen, die umgesetzt werden, sobald alle verpflichtenden Tasks in Bearbeitung oder beendet sind. Die feste Länge einer Iteration (↑ Timeboxing) verhindert au -tomatisch ein Sichverlieren.Material• Klebezettel• Beispiel-Tasks als Orientierung für Umfang und Form von TasksTipps und Tricks aus der Unterrichtspraxis• Als Einstiegshilfe können einige Tasks zu einer User-Story vorgeben werden.• Lösungsansätze für das Überführen von User-Storys in Tasks können als Hilfsmittel angeboten werden, z.B. indem die Lehrkraft Leitfragen oder mögliche Tasks auf die Rückseite konkreter User-Storys schreibt.• In der Anfangsphase wird das Planungs-Meeting für die Taskeinteilung durchaus Zeit benötigen und es kann ein mehrfaches Nachbessern während der Implementierungsphase erforderlich werden. Der Aufwand wird sich jedoch mit zunehmender Erfahrung reduzieren. Tasks – Arbeitspakete aus Entwicklersicht117• In Unterrichtsprojekten hat es sich als äußerst motivierend erwiesen, wenn jede Erledigung eines Tasks mit einem lauten «Juhu» gefeiert wird.• Beim Zusammenfügen der einzelnen Beiträge zu einem gemeinsamen Quelltext geht leicht der Überblick verloren, wenn mehrere Versionen ei -nes Quelltextes gleichzeitig geöffnet sind. Es kann hilfreich sein, zusätzlich zur Entwicklungsumgebung einen Texteditor (mit Syntaxhervorhebung) zu verwenden: Aus dem Dokument im Texteditor werden die betreffenden Ab -schnitte kopiert und dann in das Zieldokument in der Entwicklungsumge -bung eingefügt. Eine komplexere, aber elegante Lösung ist die Verwendung von ↑ Repositorys.Agiler Methodenkoffer I1184.5 Stand-up-Meetings und andere  BesprechungsformenMeetings sind ein wichtiger Baustein zum Informations -austausch im Team. Die verschiedenen Besprechungsfor -men unterscheiden sich hinsichtlich Zielsetzung, Zeit -punkt und Dauer. Allen ist gemeinsam, dass sie zeitlich begrenzt sind und dass besonders die Werte Offenheit, Respekt und Fokussiertheit im Vordergrund stehen. Gewinn für Schülerinnen und SchülerMeetings• fordern zum jeweils passenden Zeitpunkt die nötige Kommunikation ein,• bringen das Team auf einen gemeinsamen Informationsstand,• geben die Gelegenheit, eigene Ideen sichtbar für alle einzubringen,• ermöglichen, offen Fragen zu stellen und Probleme anzusprechen,• helfen, sich auf die Selbstorganisation der Gruppe zu konzentrieren. Gewinn für LehrkräfteMeetings• verringern den Betreuungsaufwand, da die Selbstorganisation der Gruppe stark gefördert wird,• bieten die Möglichkeit, die Gruppenorganisation zu beobachten,• geben einen Einblick in die softwaretechnische Vorgehensweise und Probleme, die sonst oft verborgen sind, • ermöglichen es, Konflikte in den Teams zu erkennen.Stand-up-Meetings und andere  Besprechungsformen119Exemplarisch wird in den Abschnitten Hintergrund und Umsetzung in der Schu -le das Stand-up-Meeting ausführlicher beschrieben. Weitere Besprechungsfor-men finden sich unten im Abschnitt Varianten.Stand-up-MeetingEin Stand-up-Meeting ist eine kurze, im Allgemeinen täglich stattfindende Besprechung, in der sich alle Teammitglieder über den aktuellen Projektstand austauschen. Das Stand-up-Meeting soll so kurz sein, dass es sich nicht lohnt, dafür eine Sitzgelegenheit zu suchen.HintergrundKurze Stand-up-Meetings (5 bis maximal 15 Minuten), meist zu Beginn eines Arbeitstages, dienen dem Team dazu, sich täglich gegenseitig zu informieren. Jeder Mitarbeiter und jede Mitarbeiterin nennt seine bzw. ihre seit dem letzten Stand-up-Meeting erledigten und die heute geplanten Aufgaben (↑ Tasks) sowie ggfs. aufgetretene Schwierigkeiten. Um das Meeting kurz zu halten, wird hier-bei auf die Diskussion von Details verzichtet. Wird eine Schwierigkeit genannt, so dient das Meeting dazu, einen geeigneten Ansprechpartner oder eine geeig -nete Ansprechpartnerin zu finden, um danach Lösungsansätze zu besprechen. Hält man sich an die Regeln, wird auch bei einem Projekt mit vielen Beteiligten die Maximalzeit nicht überschritten. Da diese kurzen Besprechungen täglich stattfinden, findet sich hierfür auch häufig die Bezeichnung «Daily». Durch das Stehen, meist vor dem ↑ Project-Board, wird eine zielorientierte und aktive Dis -kussionsatmosphäre begünstigt.Umsetzung in der SchuleDem Start in den Arbeitstag entspricht in der Schule der Beginn einer Unter -richtsstunde. Die Gruppe versammelt sich stehend vor dem Project-Board und rekapituliert kurz, was zuletzt erreicht wurde. Anschließend werden die nächsten Aufgabenschritte besprochen und das Project-Board entsprechend aktualisiert.  Es ist wichtig, dass die Stand-up-Meetings einerseits kurz bleiben und sich an-dererseits alle an der Diskussion beteiligen, z.B. indem jede und jeder das Team über ihre bzw. seine letzten Arbeiten informiert. Sollte im ↑ Pair-Programming gearbeitet werden, teilt sich das Paar die Rückmeldung.Agiler Methodenkoffer I120Reihum zu beantwortende Fragen• Welche Tasks wurden seit dem letzten Treffen erledigt?• Welche Tasks werde ich als nächste bearbeiten?• Falls Probleme aufgetreten sind, welche waren dies?Ein Blick ins KlassenzimmerInformatiklehrerin Frau Estrin berichtetNach vier Wochen hat auch die eher große Achtergruppe unheimlich effizient kom-muniziert. Inzwischen wird die Leitung jedes Mal von jemand anderem übernommen. Die Zeit eines Stand-up-Meetings haben sie relativ gut im Griff. Sie planen zielge-richtet und gehen nach 5 bis 10 Minuten mit definierten Aufgaben an ihre Rechner. VariantenSpontan-MeetingIn verschiedenen Projekten hat es sich bewährt, dass jederzeit spontan ein Stand-up-Meeting einberufen werden kann, falls schwerwiegende Probleme auftreten, die im Team gemeinsam gelöst werden müssen. Beispielsweise kann ein Sonderfall bei der Interaktion mehrerer Objekte in der Planung übersehen oder unzureichend besprochen sein.Planungs-Meeting Abhängig vom Zeitpunkt sind Planungs-Meetings mit unterschiedlichen Ziel -setzungen nötig: • Zu Beginn des Projekts müssen die ↑ User-Storys als Backlog erarbeitet wer -den.• Zu Beginn einer Iteration müssen (ggfs. mit einer Umpriorisierung) die User-Storys ausgewählt werden, die als nächste umgesetzt werden sol -len. Zu jeder User-Story müssen Tasks formuliert werden.• Im Laufe des Projekts kann ein Bedarf an themenbezogenen Planungen auf -treten, z.B. eine Besprechung von Strukturänderungen (↑ Refactoring) oder Festlegungen der Benutzerführung/-oberfläche.Review Das Review entspricht der Produktabnahme durch den Kunden (s.a. ausführ -licher unter ↑ Reflexion) und findet immer am Ende einer Iteration im Team Stand-up-Meetings und andere  Besprechungsformen121oder im Plenum statt: Der neue Prototyp wird vorgestellt und anschließend wird Feedback durch die Teammitglieder oder alle Mitschülerinnen und Mitschüler, die Lehrkraft und ggfs. auch Externe eingeholt. Im Review sollte nicht an Lob und positiver Bestärkung gespart werden. Retrospektive Die Retrospektive hat als Zielsetzung eine kritische Reflexion des Arbeitsab -laufs, der Zusammenarbeit und des Umgangs miteinander (s.a. ausführlicher unter ↑ Reflexion). Mögliche Fragen zur Verbesserung des Arbeitsprozesses sind: • Was lief gut?• Was hätte besser laufen können?• Was wollen wir im nächsten Schritt konkret ändern?Herausforderungen• Kommunikationsschwache Schülerinnen und Schüler können vor allem an-fangs Probleme haben, sich vor der Runde zu artikulieren. Redseligen Team -mitgliedern mag es schwerfallen sich zu fokussieren. Erfahrungen zeigen, dass sich die Probleme mit der Zeit einpegeln.• Gruppendynamische Aspekte können Probleme hervorrufen. In einem sol-chen Fall sollte die Lehrkraft eine Retrospektive einberufen, um über die Probleme offen und lösungsorientiert zu sprechen.Material• Project-Board• Platz für räumliche Verteilung der Projektgruppen ohne/mit Sitzmöglich -keitenTipps und Tricks aus der Unterrichtspraxis• Bei Bedarf können die Rollen eines Moderators oder eines Zeitwächters (↑ Timeboxing) vergeben werden.• Im Anfangsunterricht empfiehlt es sich, eine Checkliste für das typische Stand-up-Meeting (Kasten oben) auszuhängen.Agiler Methodenkoffer I122• Visualisierungen (z.B. Klassendiagramme) unterstützen die Besprechungen und sollten einbezogen werden.• In der Unterstufe können Reviews klein gehalten werden, z.B. durch ein Tes -ten/Vorstellen der neuen Ergebnisse innerhalb des Teams.Pair-Programming – Zusammenarbeit mit klarer Rollenverteilung1234.6 Pair-Programming – Zusammenarbeit mit klarer RollenverteilungPair-Programming ist eine Arbeitstechnik, bei der zwei Teammitglieder mit verschiedenen Rollen gemeinsam pro -grammieren.Gewinn für Schülerinnen und SchülerPair-Programming• organisiert kollaboratives Arbeiten mit definierten Rollen statt einer Ak -tiv-Passiv-Teilung,• ermöglicht ein gegenseitiges Unterstützen und Teilen der Kenntnisse,• verhindert Fehler durch das Vier-Augen-Prinzip,• erhöht die Selbstsicherheit bei der Bearbeitung von schwierigen Aufgaben und bei eventuell folgenreichen Entscheidungen,• fördert die Codequalität, da der Code in Worte gefasst und dadurch genauer durchdacht wird. Gewinn für LehrkräftePair-Programming• sorgt für gleichmäßige Beteiligung der Schülerinnen und Schüler durch Rol -lenwechsel,• unterstützt den Wissenstransfer und verhindert planloses Drauflos-Program -mieren,• fördert den Austausch im Team über die normalen Sitznachbarn hinaus und macht so Programmieren als Gemeinschaftsprozess wahrnehmbar.Agiler Methodenkoffer I124HintergrundBeim Pair-Programming arbeiten zwei Programmiererinnen oder Programmie -rer gemeinsam an einem Computer. Sie füllen dabei zwei verschiedene Rollen aus: die des Drivers (Fahrers), der an der Tastatur und Maus sitzt, und die des Navigators, der dem Driver über die Schulter sieht. Die Rollen werden dabei re -gelmäßig getauscht. Der Driver programmiert und erklärt dem Navigator stän-dig, was er vorhat und wie er vorgeht. Der Navigator überprüft kontinuierlich die Eingaben des Drivers, überlegt sich daneben auch alternative Vorgehensweisen und diskutiert mit dem Driver mögliche Fehlinterpretationen und Probleme im Entwurf. So ist es seine Aufgabe, das große Ganze im Blick zu behalten.Pair-Programming soll durch das Vier-Augen-Prinzip frühzeitig zur Entde -ckung von Entwurfsfehlern führen und wird deshalb beispielsweise eingesetzt, wenn in kurzer Zeit Programme mit einer hohen Qualität erstellt werden müs -sen. Außerdem ermöglicht der intensive soziale Austausch, dass unterschied -liche Sichtweisen und Intentionen von Teammitgliedern schnell transparent gemacht und dann auch geklärt werden können. Daher ist ein Einsatzszenario in Unternehmen auch das «Anlernen» von Junior-Entwicklern durch das Pro -grammieren im Paar mit einem Senior-Programmierer. Umsetzung in der SchuleAn vielen Schulen teilen sich zwei Schülerinnen und Schüler bei der praktischen Arbeit einen Computer. Mit Pair-Programming wird aber keineswegs aus der Not eine Tugend gemacht und etwa die knappe Ausstattung zur Unterrichtsme -thode geadelt. Vielmehr bietet es große kommunikative und auch pädagogische Vorteile. Pair-Programming unterstützt das gemeinsame Arbeiten, indem jeder Schülerin bzw. jedem Schüler des Pairs eine konkrete Rolle zugewiesen wird. Auf den Wechsel der Rollen, üblicherweise alle 15 Minuten, sollte im Schulrahmen besonders geachtet werden. Außerdem unterstreicht das Konzept, wie wichtig es ist, dass über den entstehenden Code geredet wird, und es wird verlangt, dass beide Partner aufmerksam an der Codeherstellung mitwirken. Pair-Program -ming ist per se eine kooperative Unterrichtsform.Die Zusammensetzung der Paare kann je nach Schülergruppe durch die Lehr -kraft oder die Schülerinnen und Schüler selbst erfolgen, in leistungshomogenen oder auch -heterogenen Paaren.Gleiches gilt für die mögliche Durchmischung der Paare: Sowohl die Beibe -haltung der Paare als auch der regelmäßige Wechsel der Partner sind möglich.Pair-Programming – Zusammenarbeit mit klarer Rollenverteilung125Der Driver • verwendet Tastatur und Maus und verfasst den Quelltext, • teilt Entscheidungen und Absichten dem Partner/der  Partnerin mit.Der Navigator• stellt regelmäßig Fragen, • prüft, ob Schnittstellenabsprachen eingehalten werden, • achtet darauf, dass sprechende Variablennamen verwendet und andere Verein -barungen bzgl. der Lesbarkeit des Codes eingehalten werden,• identifiziert schwierige Codestellen, die einer Kommentierung bedürfen, und for -dert Kommentare ein, • übernimmt die Verantwortung dafür, dass bei der aktuellen Aufgabe geblieben wird,• prüft, ob die Implementierung zur User-Story, dem Task oder der Modellierung passt,• achtet auf Initialisierung, Zugriff auf Referenzen, die Berücksichtigung von Son-derfällen und Abbruchbedingungen bei Rekursionen.   Ein Blick ins KlassenzimmerInformatiklehrer Herr Zuse berichtet:In den meisten Unterrichtsprojekten haben sich die Schülerinnen und Schüler selbst in Programming-Pairs zusammengefunden. Teilweise haben sie sogar im Lauf des Projekts Umbesetzungen selbst initiiert und organisiert, um Kenntnisse innerhalb des Projektteams effizienter zu nutzen. Bei ungerader Schülerzahl oder wenn ein Pair-Partner krank war, wurde es den Schü -lerinnen und Schülern überlassen, ob sie zu dritt zusammenarbeiten möchten oder ob jemand einzeln arbeiten möchte. Die Zusammensetzung der Pairs kann, muss aber nicht gewechselt werden. Mit beiden Varianten habe ich gute Erfahrungen gemacht. Es ist in agilen Projekten auch wichtig, dass sich die Projektbeteiligten wohlfühlen.VariantenEine interessante Strategie stellt der Truck-Factor-Check dar, der die Situation simuliert, wenn ein Partner ausfällt (Kapitel 3.4). Um insbesondere bei längeren Projekten oder besonderen Lerngruppen sicherzustellen, dass sich beide Partner Agiler Methodenkoffer I126an den gemeinsamen Arbeiten aktiv beteiligen, kann der Truck-Factor-Check für ein Pair ausgerufen werden. In dem Fall wird der aktuelle Arbeitsstand auf einen zweiten Rechner kopiert und beide Schüler oder Schülerinnen müssen nun zeigen, dass sie in der Lage sind, allein, ohne den Partner oder die Partnerin weiterzu-arbeiten. Dazu müssen beide verstanden haben, was vorher gearbeitet wurde.Herausforderungen• Es sollte allen klar sein, dass auch der Navigator nicht untätig sein darf. Mit -denken ist eine wichtige Voraussetzung, um nach dem Rollenwechsel gut weiterzuarbeiten.• Ein selbstständiger Rollenwechsel sowie die Kommunikation (insbesondere des Drivers) sind keine Selbstläufer und müssen regelmäßig von der Lehr -kraft eingefordert werden.• Manche Schülerinnen und Schüler haben eine geringe Frustrationstoleranz, wenn sie nicht die Kontrolle über die konkrete Arbeit haben. Dadurch kann es zu produktivitätshemmenden Konflikten kommen.• Wenn innerhalb eines Pairs die Motivationen und die Vorstellungen von Eigeninitiative sehr unterschiedlich ausfallen, besteht die Gefahr, dass die Zusammenarbeit nicht funktioniert. Aber auch solche heterogenen Pairs ha -ben schon wunderbar zusammen funktioniert und tolle Ergebnisse gebracht.Material• Zum Anfang empfiehlt sich für jedes Pair eine Karte, die an die Kernaufgaben der beiden Rollen erinnert (Kasten oben). Tipps und Tricks aus der Unterrichtspraxis• Der Truck-Factor kann auch mittels Glücksrad o. Ä. simuliert werden und so zufällig jederzeit zur Anwendung kommen. • Bei Konflikten oder Problemen bezüglich der Umsetzung, die das Pair al -lein nicht lösen kann, können Spontan-Meetings einberufen werden, um im Team gemeinsam einen Lösungsansatz zu suchen.• In sehr ungleichen Pairs kann der Navigator bei neuen Lösungsansätzen auch beschreiben, was zu tun ist. Der Driver tippt den Programmtext ein und stellt Fragen, wenn ihm etwas unklar ist. Ziel dieses Vorgehens ist, dass der Driver im weiteren Projektverlauf ähnliche Aufgaben möglichst selbstständig um-setzen kann. Dies wird auch in der Software-Praxis so gehandhabt.Prototypen – funktionsfähige Produkte ab der ersten Iteration1274.7 Prototypen – funktionsfähige Produkte ab der ersten IterationEin Prototyp ist ein getestetes und lauffähigesProdukt, das jedoch nicht vollumfänglich sein muss. Jeder Proto -typ markiert den Abschluss einer Iteration.  Gewinn für Schülerinnen und SchülerPrototypen• motivieren durch regelmäßige, schnell sichtbare (Zwischen-)Ergebnisse dazu, engagiert weiterzuarbeiten,• helfen, sich anhand überschaubarer Ziele eines nächsten Schritts auf das We -sentliche (des Prototyps dieser Iteration) zu fokussieren,• machen frühzeitig und regelmäßig das Produkt hinsichtlich der eigenen Ziele oder Kundenwünsche überprüfbar,• erfordern frühzeitig und regelmäßig, die Teilprodukte (z.B. GUI, Datenbank und Programmlogik) zusammenzubringen,• stellen auch bei vorzeitigem Projektabbruch ein funktionsfähiges Produkt dar. Gewinn für LehrkräftePrototypen• geben einen kontinuierlichen Einblick in den Projektfortschritt der Schülerin-nen und Schüler,• stellen jeweils eine Möglichkeit zum produktbezogenen Feedback und zur Be -urteilung der Leistung dar.Agiler Methodenkoffer I128HintergrundAgile Prozesse sind so gestaltet, dass sie in kurzen Iterationen funktionierende Prototypen hervorbringen, die dem Kunden oder der Kundin einen Mehrwert bringen. Prototypen können mit den Kunden diskutiert und von zukünftigen Nutzern erprobt werden. Das ermöglicht schnelle Feedbackschleifen, die dabei helfen, Missverständnisse aufzudecken, kritische Aspekte in der Benutzung der Bedienoberfläche zu entdecken und das Projekt an neue Anforderungen anzu -passen oder die Priorisierung neu zu ordnen. Für das Entwicklerteam ist ein Prototyp die Basis für eine konkretere Kommunikation. So sinkt das Risiko einer Fehlentwicklung und die Qualität steigt. Prototypen werden in den Softwareun -ternehmen intern bzw. extern abgenommen und sollen deshalb festgelegte Qua -litätskriterien erfüllen. Deshalb investiert das Team regelmäßig Zeit in gründ-liche ↑ Tests, angemessene ↑ Dokumentation und nötige Restrukturierungen (↑ Refactoring) der Software.Umsetzung in der SchuleAuch in schulischen Softwareprojekten repräsentieren Prototypen Versionen des angestrebten Produkts mit inkrementellem Mehrwert. Hierbei ist jeder Pro -totyp das getestete und lauffähige Produkt einer Iteration, bei dem jedoch nur ein Teil der geplanten Features eingearbeitet ist. In regelmäßigen Abständen werden die aktuellen Prototypen, ähnlich den Kundenpräsentationen in der professionellen Entwicklung, den Mitschülerinnen und Mitschülern oder der Lehrkraft vorgestellt. Zum jeweiligen Projekt sinnvoll passende und mit den Schülerinnen und Schülern abgestimmte Qualitätskriterien sind dabei eine Ori -entierungshilfe für die Teams und tragen dazu bei, dass das Feedback und die Bewertung transparent werden.Prototypen – funktionsfähige Produkte ab der ersten Iteration129Ein Blick ins KlassenzimmerInformatiklehrer Herr Nygaard berichtet:Sehen Sie sich folgende Bildsequenz an, die die zwei ersten lauffähigen Prototypen des Jump-’n’-Run-Spiels «Pengu» meiner Schülerinnen und Schüler zeigt. Sie illus-triert schön, wie das Spiel schrittweise entwickelt wurde: Prototyp 1: Die Grundfunktionalität des Spiels ist hergestellt. Eine Welt mit zwei Felsabbrüchen, einer Wolke und einem Pinguin als Spielfigur, der über die Cursor -tasten bewegt werden und in den Abgrund fallen kann.Prototyp 2: Pengu kann nun auch springen und auf der Wolke stehen, die sich zwi -schen dem Abgrund hin und her bewegt.Agiler Methodenkoffer I130Finales Ergebnis: Nach einer Reihe weiterer Iterationen hat das Spiel noch eine  Menge weiterer Funktionalitäten, wie z.B. Punktezähler, Anzahl von Leben, Schnee-flocken und Eiszapfen als weitere Spielelemente erhalten. VariantenKundenfeedbackFalls für ein passendes Projekt externe Kunden bspw. in einer Schulbibliothek oder im Sekretariat existieren, sollten geeignete Prototypen ausgewählt werden, die den Nutzern zum Testen zur Verfügung gestellt werden. Der Kunde gibt dann dem Team z.B. in einer Besprechung Rückmeldung über die Erfahrungen.Mock-upEin Mock-up ist ein nicht funktionsfähiges Vorführmodell, das insbesondere zu Beginn der Produktentwicklung eingesetzt wird, um Anforderungen mit Kun-den und Nutzern abzustimmen. In der Softwareentwicklung wird es häufig für grafische Benutzeroberflächen eingesetzt. Ein Mock-up kann in der Anfangs -phase auch als Prototyp gesehen werden. HerausforderungenDie Zeit so zu planen, dass genau am Ende einer Interation ein getesteter und lauffähiger Prototyp fertiggestellt ist, ist anspruchsvoll. Förderlich für das Ge -lingen sind Pufferzeiten am Ende einer Iteration und ein absolutes Verbot von Änderungen in letzter Minute (notwendige Änderungen müssen als User-Story Prototypen – funktionsfähige Produkte ab der ersten Iteration131in die nächste Iteration aufgenommen werden). Sind die für einen Prototyp ge -planten User-Storys schneller umgesetzt als gedacht, empfiehlt es sich, an der Dokumentation zu arbeiten, den Quelltext zu optimieren (↑ Refactoring) oder zu testen. Hier können gegebenenfalls auch andere Pairs unterstützt werden. Auch das Spezifizieren von Tasks der nächsten User-Story ist denkbar.Herausfordernd kann das Zusammenführen (mergen) der Ergebnisse der Projektbeteiligten sein. Dies geht mit visuellen Programmiersprachen relativ einfach, solange die Schülerinnen und Schüler an verschiedenen Figuren (Spri -tes) arbeiten. Bei textbasierten Programmiersprachen muss erfahrungsgemäß mehr Zeit dafür eingeplant werden. Empfehlenswert sind ↑ Repositorys. Falls das Zusammenführen von den Schülerinnen und Schülern manuell übernom-men wird, sollten die weiteren Teammitglieder diese Zeit sinnvoll nutzen, z.B. indem sie sich untereinander beim Finden und Beheben von Fehlern unterstüt -zen, die Modellierungen auf den aktuellen Stand bringen, Lücken in der Doku-mentation identifizieren oder schon Zwischenversionen der teilweise zusam -mengeführten Software testen. Material• Werkzeug zum Einsammeln und Archivieren der Prototypen (z.B. Moodle, Repository …)Tipps und Tricks aus der Unterrichtspraxis• Prototypen erzwingen eine frühe und regelmäßige Integration unterschied -licher Programmteile und Komponenten, wenn die Ergebnisse der einzel -nen Paare zusammengeführt werden. Das hat den Vorteil, dass gerade in größeren Projekten Schnittstellenprobleme, etwa zwischen den Schichten (Datenhaltung, Logik und grafische Benutzeroberfläche), überschaubar blei -ben: Schnittstellenprobleme werden dann so früh erkannt, dass die dadurch notwendigen Änderungen auch für Lernende umsetzbar sind. Insbesondere ist auch noch genügend Zeit, diese Änderungen umzusetzen.• Fehler können in Ausnahmefällen auch einmal in die kommende Itera tion mitgenommen werden. Dann wird eine User-Story geschrieben, die die höchste Priorität hat, sodass die Fehler gleich am Anfang bearbeitet werden. Eine Regel wie «Es wird nicht weitergearbeitet, bevor der Prototyp funktio -niert» ist sinnvoll.Agiler Methodenkoffer I1324.8 Agile Spiele – agiles Denken und Handeln erlebenAgile Spiele dienen als Einstieg in agiles Denken und Handeln sowie die damit verbundenen Werte, Prin-zipien und Methoden.Gewinn für Schülerinnen und SchülerAgile Spiele • dienen zum Kennenlernen agiler Techniken, Praktiken und Herangehensweisen,• machen erste Begriffe agiler Methoden intuitiv erfassbar,• zeigen die Bedeutung von Absprachen in Teams,• stärken den Teamgeist und motivieren,• zeigen, dass konkrete Fehler, erfahrene Schwierigkeiten und als falsch erkann -te Annahmen wertvoll sind für die Entwicklung von Verbesserungsideen, und machen dies in kurzen Iterationen erfahrbar,• machen erlebbar, dass und wie man mit Änderungen in agilen Projekten um-gehen kann,• verdeutlichen Agile Werte wie Respekt, offene Kommunikation, Mut zu Fehlern und ehrlichem Feedback, Fokussiertheit und Commitment. Gewinn für LehrkräfteAgile Spiele • können als motivierender Einstieg verwendet werden,• verdeutlichen spielerisch Ziele und Kernideen agiler Vorgehensweisen in Pro-jekten.Agile Spiele – agiles Denken und Handeln erleben133HintergrundAgile Spiele dienen als Einstieg in agiles Denken und Handeln sowie die damit verbundenen Werte, Prinzipien und Methoden. Sie werden von Trainern und Coaches in Unternehmen eingesetzt, um bei der Umstellung auf agile Methoden die Mitarbeiter und Mitarbeiterinnen in entsprechende Praktiken einzuführen sowie bei teambildenden Maßnahmen die Zusammenarbeit zu stärken bzw. Re -flexionsprozesse darüber anzuregen. Umsetzung in der SchuleAgile Spiele lassen sich direkt auch im Schulkontext nutzen, um auf die Arbeit in agilen Softwareprojekten vorzubereiten. In der Regel werden solche Spiele vor der eigentlichen Projektphase oder bei Problemen im Projekt eingesetzt, bspw. um Reflexionsprozesse zu schulen.Beispiel 1: Das Ball-Point-GameSpielregeln Für das Spiel wird der Gruppe ein Behälter (z.B. Schachtel, Einkaufstüte aus Papier) mit (Tisch-)Tennisbällen bereitgestellt. Das Ziel besteht darin, so viele Bälle wie möglich in 2 Minuten durch die Reihe der Teilnehmer laufen zu lassen. Zu beachten sind folgende Regeln, die bewusst nicht weiter spezifiziert werden:• Jeder Teilnehmer und jede Teilnehmerin muss den Ball mindestens einmal berühren, dann muss der Ball zurück zum Startspieler. • Der Ball muss «geworfen» werden, also sich eine gewisse Zeit in der Luft befinden! • Falls der Ball herunterfällt, muss er zurück in den Behälter und es gibt keinen Punkt.• Der Ball darf nicht an direkte Nachbarn weitergegeben werden.Ansonsten kann sich das Team selbstständig organisieren, eigene (regelkonfor -me) Vorgehensweisen finden und optimieren und so seinen individuellen Weg für das beste Ergebnis finden. Das betrifft einfache Aspekte wie die Wahl des Startspielers und die Form der Aufstellung, aber auch Interpretationen, ob der Ball für einen Punkt im Behälter abgelegt werden muss und wie der Ball «gewor -fen» wird. Ob und wann die Regeln verletzt werden, erkennt das Team meist selbst. Strittige Fragen klärt die Lehrkraft und sie kann ggf. am Ende Punkte Agiler Methodenkoffer I134für«nicht sauber gespielte Runden» abziehen, wobei sie das idealerweise mit dem Team einvernehmlich tut. Abbildung 4.8:  Ball-Point-GameAblaufZunächst werden die Regeln vorgestellt, ggf. Fragen beantwortet, aber ohne zu viel vorzugeben. In der ersten Iteration wird 2 Minuten lang die Spielstrategie geplant. Dann muss sich die Gruppe (zügig) auf eine gemeinsame Schätzung einigen, wie viele Punkte voraussichtlich erzielt werden. Die Schätzung wird schriftlich fixiert. Im Spiel muss einer der Teilnehmenden (meist der Start -spieler selbst) die Zahl der regulär gespielten Runden und daraus resultieren -den Punkte zählen. Nach 2 Minuten Spielzeit werden die tatsächlich erreich -ten Punkte notiert, dann wird 1 Minute reflektiert (↑ Reflexion). Nun folgt die nächste Iteration, in der erneut geplant (nun 1 Minute), wieder geschätzt und gespielt wird usw. Reflexion und Planung gehen fließend ineinander über, das Team entscheidet selbst, wie es die 2 Minuten zwischen den Spielphasen nutzt.  Der gesamte Prozess wird in drei oder vier Iterationen durchgeführt.  Als Variante kann ab der dritten Iteration ein zusätzliches Wurfobjekt (z.B. ein Stein) hinzugefügt werden, welches mehr Punkte bringt und nach denselben Regeln vom Startspieler zu den anderen Spielern wandern muss. Idealerweise unterscheidet es sich in Gewicht und Größe von den bisher verwendeten Bällen.Nach der letzten Iteration werden das Spiel und die erreichten Leistungen ausgewertet (Reflexion). Agile Spiele – agiles Denken und Handeln erleben135Rahmenbedingungen• Dauer: ca. 40 Minuten• Teilnehmerzahl: 10−20 pro Team• Materialien (pro Team): 1 Behälter, 6−12 Bälle und 1−2 Steine (wichtig: Grö -ßen-/Gewichtsunterschiede!), 1 Stoppuhr, Papier/Tafel und Stift zur Doku -mentation von Schätzung und Ergebnis je DurchlaufReflexionsfragen • Wie zufrieden seid ihr mit dem Ergebnis? Hättet ihr dieses Ergebnis zu Be -ginn erwartet?• Hättet ihr noch weitere Runden spielen wollen, um euch zu verbessern? Hattet ihr beim Programmieren schon mal ein solches «Flow»-Gefühl und wolltet nicht aufhören?• Wie schwer war das Schätzen am Anfang/am Ende?• Bei vier Spielrunden gab es insgesamt 8 Minuten Zeit für die Planung des Prozesses. Wäre das Ergebnis das gleiche, wenn die gesamte Planungszeit am Anfang des Spiels zur Verfügung gestanden hätte?Beispiel 2: Kekse backenSpielregelnEine neue Cookie-Produktlinie soll entwickelt und vermarktet werden. Die Um -setzung wird mit einer «Papierbäckerei» nachgestellt und optimiert. Die Aufgabe der beteiligten Teams ist es, Kekse aus Papier auszuschneiden, im gedachten Ofen zu backen, anschließend mit Buntstiften zu verzieren und schließlich zu verpacken. Folgende Anforderungen gibt die Geschäftsleitung vor:• Die Kekse sollen rund und mit Streusel verziert sein.• Jede Packung soll 16 Stück enthalten und mit der Beschriftung «Läcker» ver-sehen werden.• Für das Backen gelten folgende Regeln: °Ein Backblech (A4-Blatt) hat Platz für maximal 12 Kekse. °Backzeit ist mindestens 60 Sekunden, nach 75 Sekunden sind die Kekse verbrannt. °Der Ofen (ein markierter Bereich auf dem Tisch) darf während der Back -zeit nicht geöffnet werden (d. h. das Backblech und alles darauf darf wäh -rend der Backzeit nicht berührt werden.)Agiler Methodenkoffer I136 Abbildung 4.9:  Cookies backenAblaufDie Aufgabe wird wie oben vorgestellt und die Teams, die in einem Wettbewerb gegeneinander antreten, werden eingeteilt. Jedes Team hat 3 Minuten Planungs -zeit zur Verfügung. Dann muss sich jede Gruppe (zügig) auf eine gemeinsame Schätzung einigen, wie viele Packungen sie in 5 Minuten Arbeitszeit meint pro -duzieren zu können, und die Produktionsphase beginnt. Nach dem Durchlauf findet eine (unangekündigte) Qualitätskontrolle statt. Nach 3 Minuten Reflexion und Neuplanung schließt sich die 2. Iteration an usw. In einer Qualitätskontrolle am Ende jeder Arbeitsphase wird das Ergebnis (in Form von Punkten) durch den Spielleiter bewertet. Er übernimmt dabei einer-seits die Rolle der Geschäftsleitung, lässt aber auch eine kritische Kundensicht einfließen (auch Mitglieder von anderen Teams sollen helfen, Kundenkritik bzw. -lob zu äußern). Bewertungskriterien sind • die Anzahl der hergestellten Packungen entsprechend der Anforderungen, • die runde Form und (gleichmäßige) Größe der Kekse, Verzierung, • eine ansprechende Gestaltung der Verpackung und hoher Wiedererken -nungswert (sehen alle gleich aus?), • die korrekte Schätzung der Leistungsfähigkeit,• [optional] der Ressourcenverbrauch (wurde Material verschwendet?).Agile Spiele – agiles Denken und Handeln erleben137Die erste Qualitätskontrolle ist in der Regel für viele Teams sehr unbefriedi -gend, da einige Bewertungskriterien nicht vorab mitgeteilt, sondern erst durch die erste Qualitätskontrolle offensichtlich werden. Es wird offen, ehrlich und mit Respekt Kritik an den Produkten geübt. Dadurch wird deutlich, wie wichtig frühes und regelmäßiges Feedback und ehrliche, respektvolle Kommunikation sind. Im Folgenden bleiben die Kriterien stabil und eventuelle Fragen der Teams dazu werden von der Geschäftsleitung knapp, für alle und nach bestem Wissen beantwortet.Kurzfristige Änderungen sind in Projekten Alltag. Um die Flexibilität (Agili-tät) der Teams zu testen, streut der Spielleiter unmittelbar vor Start der folgen -den Arbeitsphasen neue Rahmenbedingungen ein. • Vor der 2. Arbeitsphase: Die Marketingabteilung hat durch eine Blitzumfra-ge herausgefunden, dass auf der Packung ein Spruch stehen muss und die Streusel bunt sein müssen.• Vor der 3. Arbeitsphase: Die Geschäftsleitung hat in einem Managementse -minar erfahren, dass es in Unternehmen wichtig ist, Mitarbeiter der einzel-nen Abteilungen zu mischen. Deshalb muss pro Team ein Mitarbeiter (den der Spielleiter bestimmt) das Team wechseln. • Vor der 4. Arbeitsphase: Die Geschäftsleitung hat es sich anders überlegt, die Idee war doch nicht so gut. Die Mitarbeiter wechseln wieder zurück. Au-ßerdem ist in Kürze Valentinstag! Die Marketingabteilung sagt, es reichen 8 Kekse pro Packung. Der/die Schenkende ist verliebt und zahlt den gleichen Preis trotz weniger Inhalt. Dafür muss Vanilleteig (gelb anmalen mit dickem Marker) verwendet und der Keks nach dem Backen mit einem Herz aus Bit-terschokolade (schwarzer Farbstift) verziert werden. Rahmenbedingungen• Dauer: ca. 60 Minuten• Teilnehmerzahl: 15−30 (pro Gruppe 5−6) • Materialien: viel Papier (auch buntes), Papier/Tafel und Stift zur Dokumen-tation von Schätzung und Ergebnis pro Durchlauf. Pro Gruppe: Farbstifte in mindestens fünf Farben zum Verzieren der Kekse (Streusel) und der Verpa-ckung; auch braun bzw. schwarz als Schokoladenfarbe, dicker gelber Marker, zwei Scheren (nicht mehr, da diese knappe Ressource für Spannung im Ar-beitsprozess sorgt), Backblech (= DIN-A4-Blatt), Timer (Handy), Tesa-RolleAgiler Methodenkoffer I138Reflexionsfragen • Wie war es? (Zusammenarbeit, Umgang, Wertschätzung …)• Welche Rollen spielen Absprachen zur Arbeitsaufteilung?• Wie war das Gefühl derjenigen, die plötzlich das Team wechseln mussten? Wie seid ihr zurechtgekommen? Wie seid ihr aufgenommen worden?• Welche Bedeutung hatte die Planung/der Qualitätscheck/die Reflexionspha -se? Wie war der erste Qualitätscheck? Wäre das Ergebnis das Gleiche, wenn die gesamte Planungszeit am Anfang des Spiels zur Verfügung gestanden hätte?• Wie schwer war das Schätzen am Anfang/am Ende?Beispiel 3: Das StabspielDas Stabspiel ist ein sehr kurzes Spiel, das zeigt, wie wichtig es ist, in einem Team aufeinander zu achten. Es stammt nicht von Agilen Coaches, hat aber eine vergleichbare Intensität und Nachhaltigkeit und ist besonders für stark heterogene Teams geeignet, die idealerweise schon einige Iterationen zusam -mengearbeitet haben.Spielregeln• Die Teammitglieder stehen sich in zwei Reihen gegenüber.• Jede(r) streckt genau einen Zeigefinger zur Mitte hin aus.• Der Stab liegt lose auf den Zeigefingern. • Jeder «beteiligte Zeigefinger» muss zu jedem Zeitpunkt Kontakt zum Stab haben.SpielverlaufDas Team muss den Stab bis zum Boden absenken und dann wieder auf Au -genhöhe anheben. Wenn ein oder mehrere Zeigefinger den Kontakt verlieren, muss das Team von vorne beginnen. In der Umsetzung stellt sich die Aufgabe als durchaus herausfordernd dar, was den Teammitgliedern in der Regel spätestens dann bewusst wird, wenn der Stab wie von Zauberhand zunächst in Richtung Himmel aufsteigt. Ohne Kommunikation und Feedback ist die Aufgabe nicht zu bewältigen. Rahmenbedingungen• Dauer: 5−10 Minuten + Reflexion• Teilnehmerzahl: mindestens 8Agile Spiele – agiles Denken und Handeln erleben139• Material: ein Besenstiel/Rundholz pro 8−12 Schülerinnen und Schüler, die nicht zu dicht stehen sollten.Abbildung 4.10: Das Stabspiel Reflexionsfragen • Wie war es? (Zusammenarbeit, Herausforderung an der «einfachen» Auf -gabe …)• An welcher Stelle war es besonders schwierig? Wodurch kamen die Schwie -rigkeiten zustande? (Bei der Aufwärtsbewegung entsteht das Gefühl, man sei zu langsam. Ungewollt beschleunigen einige so lange die Bewegung, bis die ersten den Kontakt zur Stange verlieren.)• Wie wurden die Schwierigkeiten überwunden? (Permanente Rückmeldun -gen; die Schnellen müssen auf die Langsameren warten.)• Was bedeutet das Übertragen auf Projektarbeit im Team? (Rücksicht, kon -tinuierliches Feedback, kontinuierliches Aufeinanderachten: Die Schnellen achten darauf, dass sie niemanden abhängen, die Langsamen strengen sich an, Schritt zu halten, gemeinsame Entscheidungen.)Beispiel 4: Die Marshmallow-ChallengeAufgabe in diesem Wettbewerb ist es, in kleinen Teams aus einer begrenzten Menge roher Spaghetti, Klebeband und Faden ein möglichst hohes Gebäude zu bauen, das an der Spitze einen Marshmallow tragen kann. Gefördert werden Prototyping, insbesondere frühe Integration und regelmäßiges Testen, inno -vatives Denken, Zusammenarbeit, Experimentierfreudigkeit und Kreativität (↑ Websuche: marshmallow challenge).Beispiel 5: Kanban-Pizza-GameAufgabe ist es, ähnlich wie im Spiel «Kekse backen», mit Hilfe von Papier zu be -stimmten Vorgaben möglichst viele Pizzen zu backen. Gefördert werden Prototy -ping, innovatives Denken, Zusammenarbeit (↑ Websuche: kanban pizza game).Agiler Methodenkoffer I140Beispiel 6: Thirty-Five − paarweises PriorisierenMit der «Thirty-Five» genannten Technik können spielerisch Aufgaben (und an -deres) im Team gemeinsam priorisiert bzw. der Diskurs darüber geübt werden. Dazu erhalten alle Teilnehmenden je eine Karte, auf der eine zu bewertende Auf -gabe beschrieben ist. Nun diskutieren jeweils zwei von ihnen die Priorität ihrer beiden Aufgaben und verteilen am Ende im Konsens fünf ganze Prioritätspunkte basierend auf der relativen Wichtigkeit der Aufgaben zueinander (5 : 0, 4 : 1 oder 3 : 2). Die Punkte werden auf der Karte notiert und die Karten getauscht. Das Zeitfenster (1,5 bis 2 Minuten) für die Diskussion wird vorab festgelegt und ein Spielleiter achtet auf die Einhaltung. Wenn alle Paare priorisiert haben, beginnt eine neue Runde. Das Spiel ist nur mit einer geraden Anzahl an Teilnehmenden möglich und wird im Allgemeinen sieben Runden (bei mindestens acht Teilnehmenden) gespielt. Die Summe der Prioritätspunkte ergibt am Ende die Gesamtpriorität jeder Karte, sodass nun alle Karten gemäß ihrer damit finalen Priorisierung geordnet ausgelegt werden können. Die Technik führt nicht nur recht schnell zu einer Priorisierung, da es leichter ist, Karten paarweise zu vergleichen, es werden auch alle Teammitglie -der einbezogen (↑ Websuche: thirty-five agile game).Agiler  Methodenkoffer IIWeitere Techniken und Praktiken5 Der zweite Teil des Methodenkoffers enthält weitere agile Praktiken, die sich nach ersten Erfahrungen gewinnbringend im Projektunterricht einsetzen lassen. Sie unterstützen die Schülerinnen und Schüler in ihrer Selbstorganisation und vertiefen die Organisation agiler Projekte.Reflexion in Review und Retrospektive – Nachdenken über Inhalt und Prozess1435.1 Reflexion in Review und Retrospektive – Nachdenken über Inhalt und ProzessReview und Retrospektive bezeichnen Reflexionstreffen der Projektbeteiligten. Im Review begutachten das Team und der Kunde gemeinsam den Prototyp und überarbei-ten falls nötig die Planung. In der Retrospektive hinter-fragt das Entwicklerteam Stärken und Schwächen seiner bisherigen Arbeitsweise.  Gewinn für Schülerinnen und SchülerReview und Retrospektive • bieten die Möglichkeit, Gelerntes bewusst zu machen,• ermöglichen es, den Umgang mit Feedback zu üben.Review• ist die Gelegenheit, Prototypen zu präsentieren und Feedback zum Produkt und zum Projektstatus einzuholen,• fördert Selbstregulationsfähigkeiten, indem gesetzte Ziele mit dem Erreichten verglichen werden,• motiviert, da das Team das Geschaffte in den Mittelpunkt stellt,• fördert einen Perspektivwechsel, weil das große Ganze aus Kundensicht be -trachtet wird.Retrospektive• unterstützt den Ausbau und die Stärkung von Teamfähigkeit,• verhindert das Sichaufstauen von Frustration,• bietet die Gelegenheit, Änderungen an der Arbeitsweise zu planen und deren Auswirkungen zu reflektieren.Agiler Methodenkoffer II 144Gewinn für LehrkräfteReview und Retrospektive • sind Gelegenheiten, im Team oder im Plenum die Fachsprache zu festigen und neu Gelerntes zu sichern,• ermöglichen regelmäßiges Feedback zu den Prototypen,• bieten Gelegenheit, Produkt- und Lernfortschritte zu bewerten,• ermöglichen es, die Teams bei der Planung der nächsten Schritte zu unter -stützen.HintergrundSoftwareentwicklung wird als kontinuierlicher Lernprozess verstanden, in dem jedes Projekt und jedes Team neu und anders sind. Die Grundlage für eine stete Verbesserung bildet frühes und regelmäßiges Feedback, wobei das direkte Ge -spräch zwischen den Projektbeteiligten als effektivster Weg angesehen wird. Review und Retrospektive sind die Meetings am Ende jeder ↑ Iteration, in denen man innehält und sich über die laufende Software sowie über Arbeitsprozess und Zusammenarbeit austauscht. Sie bieten Gelegenheiten, aus dem Alltag he -rauszutreten, kurz auf die Metaebene zu wechseln, Erfolge zu feiern, Probleme früh offen und konstruktiv anzusprechen und Lösungen dafür zu erarbeiten. Folgende zwei Reflexionstreffen sind typisch in agilen Prozessen.Review: Hier steht der ↑ Prototyp im Mittelpunkt. Neben dem Entwicklerteam nimmt idealerweise auch der Kunde daran teil. Die Entwickler präsentieren dem Kunden am Prototyp die Ergebnisse der Iteration. Diese werden mit den geplanten Zielen verglichen, und der Kunde erhält die Gelegenheit, den Pro -totyp zu benutzen und zu validieren. Die entsprechende Rückmeldung ist im agilen Prozess die Basis für die Planung der nächsten Schritte. Zudem sprechen das Entwicklerteam oder der Kunde auch Fehlverhalten des Prototyps, größe -re Probleme oder notwendige Änderungen im Plan offen und ehrlich an und überlegen gemeinsam, wie sie so angegangen werden können, dass beide Seiten damit zufrieden sind. Entsprechende User-Storys werden formuliert und in die Planung aufgenommen. Retrospektive: Die Retrospektive findet nach dem Review statt, um die eigenen Arbeitsprozesse und die Zusammenarbeit zu hinterfragen. Neben objektiven Ge -sichtspunkten, wie der Arbeitsgeschwindigkeit des Teams, spielen hier auch subjektive Gesichtspunkte eine Rolle, z.B. die Wahrnehmung der Arbeitsatmo -sphäre oder die Zufriedenheit mit verwendeten Werkzeugen und Methoden. Reflexion in Review und Retrospektive – Nachdenken über Inhalt und Prozess145Damit das Team offen sprechen kann, entscheidet es selbst, ob jemand zusätz-lich eingeladen wird und, wenn ja, wer. Es gibt unterschiedliche Techniken und Vorgehensweisen, z.B. kann auf Klebezetteln zusammengetragen werden, was gut gelaufen ist. Diese Punkte werden als Erfolg des Teams gefeiert. Anschlie -ßend wird notiert, was besser laufen könnte, und es werden für einige Punkte Maßnahmen entwickelt. Das Ziel ist die stete Verbesserung des Prozesses und der Zusammenarbeit, an der sich alle aktiv beteiligen.Umsetzung in der SchuleReflexion und ↑ Feedback sind unabdingbar für erfolgreiches selbstorgani -siertes Lernen und deshalb in Schulprojekten von besonderer Bedeutung. Auch hier ist direktes Feedback innerhalb des Teams während der Iteration wichtig, beispielsweise vom Navigator zum Driver im ↑ Pair-Programming. Da in der Schule die Iterationen wesentlich kürzer sind als in professionellen Projekten, ist darüber hinaus eine weniger formelle Form der Reflexion möglich.Ein Review führen die Schülerinnen und Schüler beispielsweise am Ende jeder Iteration durch, indem sie sich beim Testen des Prototyps mit den neuen Funktionalitäten vertraut machen und diese gegen die ursprünglichen Ziele prü -fen. Da sie ihre eigenen Kunden sind, entscheiden sie selbst, ob sie mit den erar -beiteten Lösungen zufrieden sind, und feiern ihre Erfolge. Für Fehler, die nicht unmittelbar behoben werden können, sowie für neue Ideen oder offensichtlich gewordene Probleme, für deren Lösung sie sich zunächst neues Fachwissen an-eignen müssen, können sie User-Storys schreiben und diese priorisieren. So behalten sie das ursprüngliche Ziel im Auge und haben für die nächste Iteration ein ↑ Project-Board, das den aktuellen Stand des Projekts visualisiert. In unserem Review• präsentieren wir unsere Arbeitsergebnisse der letzten Iteration und prüfen sie gegen die Ziele der umgesetzten User-Storys,• hängen wir fertige User-Storys am Project-Board um und feiern unsere Erfolge,• notieren wir noch nicht gelöste Fehler und ordnen sie entsprechend der Wichtig-keit am Project-Board ein,• [optional] schreiben wir für neue Ideen User-Storys,• [optional] schreiben wir eine User-Story, falls wir uns zum Lösen eines Problems noch Fachwissen aneignen müssen,• [optional] ordnen wir hinzugekommene User-Storys entsprechend ihrer Wichtig-keit am Project-Board ein. Agiler Methodenkoffer II 146Werden die Teams am Ende der Iteration aufgefordert, in einer Retrospektive ihre Arbeitsweise und Zusammenarbeit zu reflektieren, so ist der Bezugspunkt – ebenso wie in professionellen Projekten – hinsichtlich der Verbesserung nicht eine vergangene Iteration («Was haben wir falsch gemacht?») sondern die nächs -te Iteration («Was wollen wir nächstes Mal besser machen?»). Insbesondere bei Problemen in der Zusammenarbeit können in der Schule aber zum passenden Zeitpunkt auch Vieraugengespräche zwischen einzelnen Teammitgliedern und der Lehrkraft sinnvoll sein. Unsere Retrospektive hat folgende SchritteRückblick: Was lief gut? Was hätte besser laufen können?Auswahl treffen: Was davon ist uns am wichtigsten?Einsichten gewinnen: Warum sind die Dinge, wie sie sind?Maßnahmen beschließen: Was wollen wir konkret ändern?Ein Blick ins KlassenzimmerInformatiklehrerin Frau Lovelace berichtet:Unsere Iterationen dauerten jeweils drei Doppelstunden. Danach hat jedes Team den neuen Prototyp im Plenum vorgestellt. Ich konnte permanent loben – die Schü-lerinnen und Schüler hatten sich immer Mühe gegeben und wirklich tolle Sachen gemacht. Das Lob hat die Schülerinnen und Schüler sehr motiviert.Informatiklehrer Herr Weizenbaum berichtet:Mir war es wichtig, dass die Schülerinnen und Schüler immer mal wieder innehal -ten konnten. Wir trafen uns dazu im Plenum. Sie fassten zusammen, was sie schon geschafft hatten, und prüften, ob sie sich noch auf dem richtigen Weg befinden und was noch umzusetzen war. Danach legten sie die Ziele des nächsten Schritts fest. Erfahrungsgemäß beschrieben die Teams dabei eher das große Endziel. Kleine er -reichbare Teilziele für die nächste Iteration zu formulieren, fiel ihnen besonders an-fangs noch schwer.Meine Erfahrung ist auch, dass die Reflexionen in agilen Spielen eine sehr nachhal -tige Wirkung haben. So genügte es, um Feedback anzuregen, meist, die Schülerinnen und Schüler kurz an ihre Erfahrung aus dem Ball-Point-Game zu erinnern.Reflexion in Review und Retrospektive – Nachdenken über Inhalt und Prozess147HerausforderungTrotz der üblichen Zeitknappheit bei Projekten an Schulen lohnt es sich, regel-mäßig innezuhalten. Die Reflexionsphasen führen zur steten und meist auch nachhaltigen Verbesserung der Arbeitsweise und Arbeitshaltung. MaterialFür Retrospektiven im Team sind ggf. Klebezettel (evtl. in zwei unterschiedli -chen Farben), Klebepunkte, Pinnwand/Plakat, Marker oder ein Fotoapparat (zur Dokumentation) sinnvoll. Tipps und Tricks aus der Unterrichtspraxis• Spezialisieren sich die Programming-Pairs beispielsweise auf die Entwick -lung einer konzeptionellen Schicht (Abbildung 3.10), so ist das Review eine gute Gelegenheit, um einander nicht nur die neuen Funktionalitäten aus der Kundensicht vorzustellen, sondern auch auf fachliche Details bei deren Um-setzung einzugehen und Fragen der Teammitglieder dazu zu beantworten.• Damit alle Teammitglieder in langen Projekten den Überblick über die Funk -tionalitäten ihres Prototyps behalten, kann die Lehrkraft zusätzlich zu selbst-organisierten Reviews ab einem geeigneten Zeitpunkt kurze Gespräche ein-beraumen, in denen sie sich in der Rolle eines Kunden die Funktionalitäten erklären lässt. Jedes Teammitglied soll dazu in der Lage sein. Der Termin wird rechtzeitig bekannt gegeben, sodass die Teams noch Zeit für ein kurzes Briefing haben.• Reflexionen im Plenum können genutzt werden, um neu Gelerntes zu sichern und die Fachsprache zu stärken.• Bei Retrospektiven ist es für die Schülerinnen und Schüler anfangs hilfreich, wenn die Lehrkraft einen Reflexionsschwerpunkt vorgibt. Typische Frage -stellung an jedes Teammitglied können folgende sein: °Bist du im Projekt angekommen, kannst du passend zu deinen Implemen -tierungserfahrungen aktiv etwas beitragen und fühlst du dich integriert? Wünschst du dir Unterstützung? °An welcher Stelle hast du in der letzten Iteration einen Fehler gemacht und was hast du daraus gelernt? °Wird deiner Meinung nach auf Zeitrahmen geachtet, um fokussiert ein-zelne Arbeitspakete mit Blick auf den Prototyp zu bearbeiten?Agiler Methodenkoffer II 148 °Bist du zufrieden mit den Absprachen und der Zusammenarbeit? Ist dir immer klar, was als Nächstes zu tun ist? Mit zunehmender Erfahrung kann dann eine Retrospektive entsprechend der Schritte im Kasten «Unsere Retrospektive hat folgende Schritte» auf  S. 146 thematisch offen abgehalten werden. • Einzelne Schülerinnen und Schüler können im Wechsel die Moderation ei -ner Retrospektive des Teams übernehmen. Sie achten darauf, dass jeder sich unabhängig von anderen Meinungen einbringen kann. Erfahrungsgemäß ist aber bei den meisten Teams kein Moderator nötig. Wenn sich allerdings nur wenige an der Retrospektive beteiligen, empfiehlt sich der Einsatz typischer Moderationstechniken. Zum Beispiel erhält jedes Teammitglied zwei Klebe -punkte, mit denen es zwei der gesammelten Themen als für sich am wich -tigsten bewertet. Das Thema mit den meisten Stimmen wird im Folgenden intensiver besprochen.• Es kann sinnvoll sein, die gewonnene Erkenntnis einer Retrospektive als Motto für die nächste Iteration, z.B. am Project-Board, für alle sichtbar zu notieren.• Ein persönliches Projekttagebuch bietet die Möglichkeit, Ergebnisse einer individuellen Reflexion zu dokumentieren.Timeboxing – fokussiert arbeiten in festen Zeitrahmen1495.2 Timeboxing – fokussiert arbeiten in festen ZeitrahmenTimeboxing bezeichnet die Vergabe von festen Zeitrahmen für Vorgänge wie Meetings oder Iterationen, die hierdurch effizienter und fo -kussierter werden. Die zeitliche Beschränkung vereinfacht die Planung und fördert Agile Wer-te, z.B. Einfachheit, Fokus und Zusicherung.Gewinn für Schülerinnen und SchülerTimeboxing • fördert ein zielgerichtetes und konzentriertes Arbeiten in der Implementie-rungsphase und unterstützt einen effektiven Austausch bei Besprechungen,• schafft ein Bewusstsein, dass (insbesondere bei mehreren Beteiligten) Zeit wertvoll ist, • erleichtert die Projektplanung,• ist ein hilfreiches Instrument zur Selbstorganisation und kann schon nach kur -zer Zeit richtig Spaß machen. Gewinn für LehrkräfteTimeboxing • erleichtert die zeitliche Planung und das Anpassen der Aktivitäten an den meist vorgegebenen Doppelstundentakt,• hilft abzuschätzen, welche Aufgaben bewältigbar sind,• hilft, einen positiven Projektabschluss zu erreichen.Agiler Methodenkoffer II 150HintergrundVor dem Hintergrund, die Effizienz eines Projekts und insbesondere auch von Besprechungen zu erhöhen, werden in agilen Projekten typischen Vorgängen klare zeitliche Rahmen zugeordnet. Gerade bei Besprechungen schätzen agile Teams eine sehr restriktive Einhaltung der Timebox, weil dadurch diese in der Regel kürzer als zeitlich nicht festgelegte Meetings sind. Dies motiviert das Team, einen intensiven Austausch von Beginn an anzustreben und zu einem Ergebnis in der vorgegebenen Zeit zu gelangen. Aber auch in Umsetzungsphasen ist die Timebox ein von Entwicklerteams wertgeschätzter Rahmen, da sie in dieser Zeit störungsfrei ohne Diskussionen und Planänderungen fokussiert an den Aufgaben arbeiten können. Die Abbildung zeigt typische Zeitrahmen in Un -ternehmen.Abbildung 5.1:  Typische Zeitrahmen in UnternehmenDer Vorgang wird nach der festgelegten Dauer abgeschlossen. Sollten am Ende nicht alle geplanten Inhalte abgeschlossen sein, müssen diese entweder gestri-chen oder in eine nachfolgende Timebox verschoben werden.Umsetzung in der SchuleAuch in der Schule kann Timeboxing zielgerichtetes und effizientes Arbeiten fördern. Die größte Timebox stellt diejenige für die ↑ Iteration dar. In der Re -gel sind Iterationen getaktet mit ein oder zwei Doppelstunden, sodass für die Schülerinnen und Schüler keine Visualisierung des Endes nötig ist. In Ober -stufenprojekten hingegen kann es hilfreich sein, das jeweilige Iterationsende hinsichtlich der Zielorientierung bewusst am Project-Board sichtbar zu ma -chen. Auch für Meetings wie das Stand-up und das Review werden vorab zeit -liche Rahmen festgelegt. Typische Zeiten in der Schule sind 8 Minuten für das Stand-up-Meeting und 20–25 Minuten für Review sowie Retrospektive. An das eigenständige Festlegen der Timebox bei einem Planungsmeeting müssen sich Timeboxing – fokussiert arbeiten in festen Zeitrahmen151Schülerinnen und Schüler erst herantasten, da ihnen die Erfahrung fehlt. Die Dauer von Timeboxen, die regelmäßig vorkommen, wie diejenigen für die Itera -tion und das Stand-up-Meeting, wird einmal zu Beginn des Projekts festgelegt und ändert sich in der Regel nicht. Für selten vorkommende Meetings sollte die Dauer vorab mündlich kommuniziert und beispielsweise auf einem Blatt Papier festgehalten werden, das beim Treffpunkt sichtbar angebracht wird.Ein Blick ins KlassenzimmerInformatiklehrer Herr Turing berichtet:Ein sehr deutliches Gefühl für den Wert einer Timebox schaffen die ↑agilen Spiele «Ball-Point-Game» und «Kekse backen»: Ein konsequenter Kreislauf von Planung, Umsetzung und Feedback lässt sich nur durch Zeitrahmen erreichen. In der Praxis hat sich gezeigt, dass diese Erfahrungen sehr nachhaltig sind, sodass Hinweise der Lehrkraft in den ersten Iterationen bei den Schülerinnen und Schülern auf Verständ -nis stoßen und wohlwollend angenommen werden.HerausforderungEs muss eine Balance zwischen dem Aufbau eines Zeitdrucks einerseits und Raum für kreatives Arbeiten und Lernprozesse andererseits gefunden werden.Material• Blatt/Karte mit dem Ende des Zeitrahmens (für alle sichtbar)• Uhr (für alle sichtbar) Tipps und Tricks aus der Unterrichtspraxis• In einer Reflexion nach zwei bis drei Iterationen stellt in der Regel mindes -tens ein Team fest, dass es nicht mehr so lange über unwesentliche und leicht änderbare Dinge, wie etwa die Grafiken ihrer Figuren, diskutieren und statt -dessen erstmal wichtige Funktionalitäten umsetzen will.• Aufkommende Themen, die nicht Gegenstand des Meetings oder der Iterati -on sind, können auf einem Klebezettel notiert und neben das Project-Board gehängt werden. So werden sie gewürdigt, gehen nicht verloren und können an anderer Stelle wieder aufgenommen werden.Agiler Methodenkoffer II 1525.3 Testen – systematisch Qualität hinterfragenBeim Testen wird anhand konkreter Beispiele systematisch überprüft, ob die Software die festgelegten Anforderungen erfüllt.Gewinn für Schülerinnen und SchülerSoftwaretests• helfen, die Qualität der Ergebnisse des eigenen Handelns zu hinterfragen, zu überprüfen und aus Fehlern zu lernen, • erzeugen die Einsicht, dass jede Software – auch die, die uns im Alltag be -gegnet und z.B. zukünftig unsere Fahrzeuge steuert – immer (noch) Fehler haben kann,• sind eine Möglichkeit, sich unabhängig von technischen Fertigkeiten einzu -bringen, etwa durch das systematische Überprüfen der Funktionalität einer umgesetzten User-Story, • schaffen durch Verfolgung des dynamischen Ablaufs ein vertieftes Verständnis des sonst statischen Quelltexts. Gewinn für LehrkräfteSoftwaretests• entlasten dadurch, dass die Lernenden eine individuelle Rückmeldung zur Funktionsfähigkeit ihres Programmes erhalten,• geben Anlass, bei bestimmten Fehlern die Struktur des Codes mit einem Team zu diskutieren.Testen – systematisch Qualität hinterfragen153HintergrundSoftwaretests sind ein zentraler Baustein im Qualitätsmanagement der Soft -wareentwicklung. Bei vielen tausend Zeilen Code und mehreren Mitarbeiterin-nen und Mitarbeitern sind automatisierte Tests deshalb heute eine hervorragen -de Technik, um in agilen Projekten mögliche Auswirkungen von Ergänzungen bzw. Veränderungen (auch ↑ Refactoring) auf schon funktionierende Pro -grammbestandteile unmittelbar zu überprüfen. Eine frühzeitige Erkennung von Fehlern erspart Kosten, da die Korrekturmaßnahmen später i.d.R. aufwendi -ger sind, weil dann mehr Quelltext betroffen ist. Wenn regelmäßig alle bereits implementierten Funktionalitäten nach jeder Änderung getestet werden, ist hingegen klar, dass die Ursachen von Fehlverhalten mit dem im letzten Schritt neu hinzugekommenen Quelltext zusammenhängen. Im Falle von Test-Driven Development (TDD) wird die Herangehensweise sogar umgedreht, indem erst Testfälle geschrieben werden, bevor der Code zur Erfüllung der Tests imple -mentiert wird. Deshalb schlagen die Tests zunächst fehl. Die darauffolgende Implementierung ergänzt schrittweise Code, bis alle Tests erfolgreich verlaufen. Bei der Erstellung von Tests ist es nicht nur wichtig, das normale Verhalten z.B. von Methoden zu überprüfen (positives Testen), sondern auch das Fehl -schlagen (negatives Testen). So ist es beispielsweise bei einer Authentifikation nicht nur wichtig, dass zugelassene Nutzer Zugang erhalten, sondern auch, dass anderen der Zugang verwehrt wird. Abhängig von der Zielsetzung werden in der Softwaretechnik verschiedene Teststufen unterschieden, wie Modultests, Integrationstests und Systemtests, wobei abhängig von der Stufe mehr White -box- bzw. Blackbox-Tests verwendet werden. Ein klassischer Blackbox-Test ist die Abnahme durch den Kunden im Review.Testen ist aber nicht nur eine Technik der Softwareentwicklung, sondern auch ein Beitrag zu Agilen Werten: Im agilen Prozess geben die Entwickler zu Beginn einer Iteration dem Kunden eine verbindliche Zusage (Commitment) über neue Funktionalitäten des kommenden Prototyps. Tests helfen am Ende der Iteration beiden Seiten, der Erfüllung der Zusage zu vertrauen.Umsetzung in der SchuleTesten ist ein zentraler Bestandteil der Softwareentwicklung, aber oftmals das erste, was in wasserfallähnlichen Projekten aufgrund von Zeitnot weggelassen wird. In der Regel kommen die Schülerinnen und Schüler kaum über ein Auspro -bieren hinaus, sodass sie kein systematisches Vorgehen kennenlernen. In agilen Projekten hingegen überprüfen die Schülerinnen und Schüler an verschiede -Agiler Methodenkoffer II 154nen Stellen jeder Iteration die Ergebnisse ihrer Arbeit: bei der Umsetzung eines Tasks bevor sie diesen auf «Done» umhängen, mit jeder fertig implementierten User-Story sowie anhand des Prototyps als Ganzes am Ende der Iteration. Durch das Testen stoßen die Schülerinnen und Schüler frühzeitig und regelmäßig auf Fehlverhalten der Software, beispielsweise weil sich eine Figur in die falsche Rich -tung bewegt oder eine Kollision nicht erkannt wird, um diese dann zu beheben. Sie machen selbstständig und aus eigener Motivation die Erfahrung, dass Code, der erfolgreich kompiliert, immer noch auf logische Fehler überprüft werden muss. Die User-Storys bzw. Tasks sind für das Team Ansatzpunkte für die Entwicklung von positiven – sowie im Idealfall auch negativen – Testfällen zum Überprüfen der Funktionalität. Die Schülerinnen und Schüler versprechen beim Umhängen der User-Story dem Team, dass der Prototyp sich entsprechend der jeweiligen User-Story verhält. So werden sie in agilen Projekten dazu angehalten, eine Vor -gehensweise zum systematischen Testen zu entwickeln. Auch Schülerinnen und Schüler mit weniger Fachwissen können ein großes Geschick beim Testen haben und so das Team voranbringen. Beim Testen gefundene und korrigierte Fehler sind in agilen Projekten wertvolle Möglichkeiten zu lernen, vom Gelernten in der folgenden Iteration zu profitieren und es mit dem Team zu teilen. Nicht nur in agilen Projekten, sondern im Informatikunterricht allgemein gibt es abhängig von der Jahrgangsstufe, der Programmiererfahrung und der Programmierumgebung unterschiedliche Herangehensweisen an das Testen. Vorgehen beim TestenManuelles Testen: Nach der Rückmeldung des Compilers über die syntaktische Korrektheit wird die funktionale Richtigkeit überprüft. Diese Aufgabe hat zu -nächst die Entwicklerin oder der Entwickler selbst. Als weitere Stufe der Qualitätskontrolle können Mitschüler die Rolle des Testers übernehmen und auf Nutzerebene (Blackbox-Test) neu programmierte Funktionalitäten anderer prüfen. Um diese Tätigkeiten zu organisieren, würden sich entsprechende Tasks oder die Einführung einer neuen Spalte am ↑ Pro -ject-Board anbieten (Ready to Test).Peer-Review: Die Schülerinnen und Schüler überprüfen den Quellcode ihrer Teammitglieder (Whitebox-Test) und sichern dadurch die Qualität nach dem Vier-Augen-Prinzip. Im ↑ Pair-Programming ist das Peer-Review enthalten. Debugging: Das schrittweise Durchlaufen des statischen Quelltexts (mit oder ohne Debugger) ermöglicht das systematische Beobachten der Werte von Va -riablen und des dynamischen Ablaufs. Dadurch können nicht nur funktionale Fehler lokalisiert werden, sondern es wird auch ein größeres Verständnis für Programmabläufe erzielt.Testen – systematisch Qualität hinterfragen155Erstellen von Testklassen, Ausführen von Testfällen: Testklassen werden ge -nutzt, um konkrete Ausgangszustände zu initialisieren, darüber zu testende Operationen auszuführen und den Endzustand mit einem Sollzustand zu ver -gleichen. Dieses Ausführen von Testfällen kann dann sehr einfach regelmäßig wiederholt werden, beispielsweise nach jeder Iteration. Testklassen können codiert oder (mit entsprechender Unterstützung durch die Entwicklungsum -gebung z.B. BlueJ) aufgezeichnet werden, wobei aus Testhandlungen, die über Maus und Tastatur erfolgen, der Quelltext des Testfalls in der Testklasse erzeugt wird. In agilen Oberstufenprojekten kann die Verwendung von Testklassen die Schülerinnen und Schüler dauerhaft entlasten.Ein Blick ins KlassenzimmerInformatiklehrerin Frau Hopper berichtet:Gerade bei Funktionalitäten, die einem Pair besonders wichtig waren, zeigten die Schülerinnen und Schüler beim Testen eine mir aus dem Unterricht nicht bekannte Ausdauer. Hierbei konzentrierten sie sich oft als Erstes auf das, was die anderen Pairs des Teams implementiert hatten, um zu sehen, wie ihre gemeinsame Software gewachsen war. Mit der Zeit konnte ich aus den Diskussionen aber auch heraushören, dass sie auf ihre eigene Weise begannen, Fehler den Phasen zuzuordnen, in denen sie entstanden waren. Sie benannten den Entwurf, die Implementierung oder fehlende Absprachen, auch wenn sie es so nicht formuliert hätten. So gab das Testen schon einen ersten Einstieg in die Prozessreflexion. Manchmal wird ein Durchbruch mit der Aufmerksamkeit der ganzen Klasse wertge-schätzt: Als die von einem Pair anvisierte Funktionalität nach längerem Studieren, Experimentieren, mehreren Korrekturen und wiederholtem Testen fehlerfrei war, ging ein Aufschrei durch die Klasse «Ja, es funktioniert, es funktioniert!», und alle kamen zusammengelaufen und wollten das Ergebnis sehen.Ein Blick ins KlassenzimmerInformatiklehrer Herr Backus berichtet: Teilweise bietet es sich bei agilen Projekten in der Oberstufe an, Junit-Tests zu ver -wenden. Beispielsweise gab es eine Gruppe, die irgendwann ziemlich entnervt war, weil die Testfälle nach jeder Iteration immer länger und mehr wurden und die ma -nuelle Testtätigkeit, insbesondere das wiederholte Überprüfen von Funktionalitäten aus früheren Iterationen, relativ stupide war. Diese Situation ist für mich als Lehrkraft ideal, um den Schülerinnen und Schülern eine Einführung in Testklassen zu geben und die Idee des automatisierten Testens zu verdeutlichen. Agiler Methodenkoffer II 156Herausforderungen• Viele Schülerinnen und Schüler geben sich zufrieden, wenn das Programm irgendwie läuft. Aber Softwarequalität ist mehr als ein Programm ohne Syntaxfehler. Konkrete Hinweise an den Navigator zum Hinterfragen des Quelltexts, zum Refactoring und Vereinbarungen zum Testen, helfen die Softwarequalität zu steigern.  • Die Schülerinnen und Schüler finden zwar durch Ausprobieren relativ schnell Fehler, insbesondere bei der Spieleentwicklung, aber sie verfügen zu Beginn des Projekts kaum über systematisch abrufbare Strategien. Diese gilt es aufzubauen. Die iterative Vorgehensweise unterstützt dies, weil z.B. beim Debuggen die Kompetenz mit dem Quelltextumfang mitwachsen kann. • Anfangs überprüfen die Schülerinnen und Schüler meist nur die positiven Fälle, beispielsweise ob eine Figur «springt», wenn die Taste gedrückt wird. Nicht aber, ob sie dabei durch Plattformen hindurchfliegt, die über ihr lie -gen, ob sie nach dem Sprung weiter auf die Taste reagiert, sodass man sie beliebig weit nach oben «katapultieren» kann, oder was passiert, wenn sie am Spielfeldrand springt. Hier kann die Lehrkraft neben viel Lob für das Geschaffte auch kleine Anreize geben, beispielsweise in Kundengesprächen oder im Review (↑ Reflexion). • Die Anzahl möglicher Kombinationen, die getestet werden müssen, kann die Schülerinnen und Schüler überfordern, etwa, wenn in Scratch mehrere Figu-ren über verschiedene Nachrichten interagieren oder wenn sie Logikspiele wie Mastermind entwickeln. Tipps und Tricks aus der Unterrichtspraxis• Wenn man sich regelmäßig von den Schülerinnen und Schülern Funktiona-litäten der Software zeigen lässt, kann man dabei besondere Testfälle (Son-derfälle, Extremfälle, negatives Testen) einstreuen.• Für Aktivitäten des Testens können eigene Tasks oder eine eigene Spalte am Project-Board vorgesehen werden.• Allgemeine Qualitätskriterien, die erfüllt sein müssen, bevor man einen Task am Project-Board in die Spalte «Done» hängt, können im Team vorab bespro -chen und in der «Definition of Done» festgelegt werden (↑ Dokumentation).• Hilfreich ist es, dass die Schülerinnen und Schüler im Pair arbeiten, da der Navigator auch die Funktion hat, auf die Qualität zu achten. • Hilfreich kann es sein, bereits vor dem Projektbeginn im Unterricht Strate -gien für das Lokalisieren von Fehlern zu besprechen.Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen 1575.4 Feedback und Bewertung –  Rückmeldungen zur Weiterentwicklung nutzenDurch Feedback und Bewertung erfolgt eine auf den indi -viduellen und kollaborativen Projektbeitrag bezogene Rück -meldung, die das Geleistete wertschätzt und dem einzelnen Teammitglied Anlass und Anhaltspunkte bietet, verschie -dene Leistungsaspekte und seine eigene Arbeitsweise zu reflektieren. Gewinn für Schülerinnen und SchülerFeedback und Bewertung • bieten differenzierte Rückmeldungen und Anerkennung der Schülerleistung, • wertschätzen den individuellen Beitrag in Abgrenzung von den anderen Team -mitgliedern, • ermöglichen durch Beteiligung der Teammitglieder am Bewertungsprozess eine Rückmeldung an die anderen Teammitglieder in standardisierter Form,• helfen, eigene Leistungen ehrlich zu reflektieren und in die Gesamtleistung des Teams einzuordnen. Gewinn für LehrkräfteFeedback und Bewertung• entsprechen dem Anliegen detaillierter Lernerfolgsrückmeldungen, • sind eine Basis für die Erstellung von Schulnoten, • bieten Möglichkeiten, nach individueller und anforderungsbezogener Norm zu bewerten,• unterstützen bei der Notentransparenz und -gerechtigkeit.Agiler Methodenkoffer II 158HintergrundDie Durchführung agiler Projekte und ihre Ausrichtung an Agilen Werten passt kaum noch zu den bisher meist hierarchisch organisierten Formen des Feed -backs und der Leistungsbewertung durch Vorgesetzte. Da sich agile Teams weit -gehend selbst organisieren und möglichst ohne Störungen von außen fokussiert arbeiten, verlieren Projektleiterinnen und Manager nicht nur an Einfluss, sie ha -ben auch weniger Einblick in die konkrete Arbeit. Außerdem wird in agilen Pro -jekten besonders Wert darauf gelegt, dass das Team gemeinsam Verantwortung übernimmt für das Produkt und den gesamten Code. Eine gute Möglichkeit, den Teammitgliedern dennoch Feedback zukommen zu lassen und ihre Kompeten-zen zu beurteilen, besteht darin, die Einschätzungen der Teammitglieder unter -einander heranzuziehen. Dazu bieten sich verschiedene Instrumente an, die für die Bestimmung der individuellen Leistungen herangezogen werden können:Instrumente zur Beschreibung individueller LeistungenIndividual Contribution Report: Jedes Teammitglied beschreibt aus eigener Sicht den individuellen Beitrag zum Projektergebnis detailliert für jede einzelne Phase (z.B. Vorbereitung/Konzeption, Durchführung, Auswertung). Die ande -ren Teammitglieder haben später die Möglichkeit, die Individual Contribution Reports zu kommentieren.Self/Peer Evaluation Survey: Jedes Teammitglied bewertet sich selbst und alle anderen Teammitglieder auf einem Bewertungsbogen hinsichtlich verschiede -ner Aspekte guter Teamarbeit. Diese Aspekte beinhalten z.B. das Verhalten in Meetings (Pünktlichkeit, Aufmerksamkeit und Beitrag), Arbeitsweisen (Effek -tivität, Kooperation, Gründlichkeit) sowie die Angabe besonderer und verbes -serungswürdiger Leistungen.Work Product Pay Packet: Die Teammitglieder verteilen virtuelle 100 Euro im Team entsprechend ihrer Einschätzung der Qualität und Quantität der Arbeit jedes einzelnen Teammitglieds, auch an sich selbst. Jedes Teammitglied kann zusätzlich einen einmaligen Bonus von 5 Euro an ein anderes Teammitglied vergeben, wenn es der Meinung ist, dass es mehr als das Geforderte geleistet hat.Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen 159Abbildung 5.2:  Work Product Pay Packet als BewertungsinstrumentMit den resultierenden Bewertungen gehen agile Organisationen sehr behutsam um und nutzen sie vordergründig, um mit jedem und jeder einzeln die nächsten Schritte einer positiven Weiterentwicklung zu erarbeiten. Feedback der Grup -penleistungen ist auch regelmäßig Gegenstand der ↑ Retrospektive.Umsetzung in der SchuleLeistungsbewertung in Schulprojekten ist komplexer, da nicht nur Leistungsas -pekte und soziale Verhaltensweisen entsprechend der anforderungsbezogenen Norm zu bestimmen sind, sondern auch in der individuellen Bezugsnorm die Entwicklung der Fach-, Methoden-, Sozial- und Selbstkompetenzen zu berück -sichtigen ist. Ein Fokus sollte in der Schule auf der Bewertung beobachtbaren Verhaltens liegen. Hier ist es von Vorteil, dass agile Projekte den Lern- und Ar-beitsprozess sichtbar machen und die Lehrkraft durch die Selbstorganisation der Teams im Unterricht Zeit hat, die Schülerinnen und Schüler bei der Arbeit zu beobachten, zuzuhören und ggf. in der Rolle des Kunden zu steuern. Dies ermög -licht es der Lehrkraft, zum passenden Zeitpunkt das entsprechende individuelle Feedback zu geben. In der Unterrichtspraxis haben sich folgende Schwerpunkte für inhaltliche und prozessbezogene Rückmeldungen als praktikabel erwiesen.FachkompetenzPrototypen können als Vergegenständlichung angewandter Fachkompetenz verstanden werden. Sie stellen für Schülerinnen und Schüler nicht nur einen motivierenden Gegenstand zur objektiven Rückmeldung des eigenen Projekter -folgs und seiner Zwischenschritte dar, sie lassen sich auch für Feedback und die )Agiler Methodenkoffer II 160Bewertung heranziehen. Als Grundlage dafür können Kriterien für die Gestal -tung der Prototypen herangezogen werden (bspw. «ansprechend» und «nutzer-freundlich»). Weitere Gegenstände können der dem Prototyp zugrundeliegende Quelltext (z.B. Fehlerfreiheit, Kommentierung), seine Strukturierung (in der Oberstufe etwa MVC-Entwurfsmuster oder Drei-Schichten-Architektur, im Anfangsunterricht auch mal nur «Einrücken») und seine Lesbarkeit sein (spre -chende und einheitliche Benennung) sowie die Anwendung bestimmter vorge -gebener Programmierkonzepte.Für möglichst individuelles Feedback können zunächst die Beiträge der ein-zelnen Pairs zum Projekt betrachtet werden, insbesondere, welche und wie viele Tasks ein Pair umgesetzt hat und welcher Code dabei entstanden ist. Allerdings wird es kaum möglich sein festzustellen, welchen konkreten Anteil ein einzelner an der gemeinschaftlichen Leistung eines Pairs hat. Um dennoch den indivi -duellen Kompetenzstand festzustellen, bieten sich nach unseren Erfahrungen folgende Möglichkeiten an: In Einzelgesprächen, bspw. in einem «Kundenge -spräch», kann die Lehrkraft sich konkrete fachliche Details erklären lassen. Ebenso kann der Truck-Factor-Check (↑ Pair-Programming) als individuelle Leistungsüberprüfung eingesetzt werden. Des Weiteren können durch die Be -obachtung der Schülerinnen und Schüler in den Meetings, beim Sprechen über die geplante Implementierung im Pair und beim Diskutieren von Fehlern im Test der Wissensstand, die Verwendung der Fachsprache und die Problemlöse -kompetenz eingeschätzt werden.MethodenkompetenzInnerhalb des Projekts erwerben die Schülerinnen und Schüler verschiedene Kompetenzen der Projektorganisation, die auch selbst Gegenstand der Bewer-tung sein können: Sind die User-Storys und Tasks passend formuliert? Werden die Rollen beim Pair-Programming eingehalten? Werden die Ergebnisse und Prozesse angemessen reflektiert? Wie in anderen Lernkontexten üblich, können dabei auch weitere Resultate des Arbeitsprozesses für Feedback und Leistungs -bewertung herangezogen werden. So wird am Project-Board erkennbar, ob es tatsächlich so installiert und verwendet wurde, dass die Ziele einer Iteration erkennbar sind, der Projektstand stets transparent ist, die Verantwortlichkeiten klar geregelt sind und ob es vom Team tatsächlich für die Organisation genutzt wird. Zur Methodenkompetenz gehört auch, die agilen Methoden, Techniken und Praktiken sicher anwenden zu können.Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen 161Soziale KompetenzSoziale Kompetenzen lassen sich vor allem in der aktiven gemeinschaftlichen Arbeit beobachten: Sind die Schülerinnen und Schüler in der Lage, ihr Team zu motivieren, Zuversicht zu verbreiten, die eigenen Fähigkeiten und Ideen einzu-bringen, andere davon zu überzeugen, zu moderieren, Hilfe zu erbitten und an-deren zu helfen? Dazu gehört auch, am Ball zu bleiben, Entscheidungsfindungen konstruktiv zu unterstützen, die Fähigkeiten des Teams einschätzen zu können und gemeinsam einfache Lösungen zu suchen. In agilen Projekten sind die Kompetenzen sehr gut für die Lehrkräfte beob -achtbar und für die Schülerinnen und Schüler erfahrbar. Aufgrund des iterativen Vorgehens kann sich jede und jeder Einzelne ggf. mit individueller Unterstüt -zung durch das Team oder die Lehrkraft weiterentwickeln. Selbst- bzw. PersonalkompetenzDie Entwicklung von Selbst- und Personalkompetenzen ist eng mit dem Ver-stehen und Umsetzen der Agilen Werte verbunden. Sind die Schülerinnen und Schüler bereit, Verantwortung zu übernehmen und durchzuhalten? Zeigen sie Initiative, sind entscheidungsfreudig aber auch lernfähig?Um als Schülerin oder Schüler Kriterien wie die oben angeführten beurteilen und für die eigene Kompetenzentwicklung annehmen zu können, sollten diese klar definiert sein und ggf. anhand von Indikatoren verdeutlicht und voneinan-der abgegrenzt werden. Bereits vorab sollte mit allen Teams darüber gesprochen werden, welche Aspekte Gegenstand von Feedback und Bewertung werden und woran diese gemessen werden. Eine gemeinsame Diskussion darüber, welche Aspekte den Schülerinnen und Schülern wichtig sind, hilft zudem, sich auf ein gemeinsames Wertesystem zu verständigen und dieses zu verinnerlichen.Ein Blick ins KlassenzimmerInformatiklehrerin Frau Estrin berichtet:Bei der Bewertung bin ich bisher zwei verschiedene Wege gegangen. In einem Projekt [Kapitel 3.2] habe ich mich am Work Product Pay Packet und der Poolnote orientiert und für jede Gruppe eine Anzahl an Punkten für die Gruppenleistung vergeben. Das Team musste diese Punkte in einem konsensorientierten Prozess auf die einzel -nen Teammitglieder verteilen und war so in die Bewertung mit einbezogen. In ei -nem anderen Projekt [Kapitel 3.5] legte ich den Schwerpunkt auf die kontinuierliche Produktentwicklung in den Iterationen. Die Schülerinnen und Schüler erhielten für jeden Prototyp Teilnoten, aus denen später transparent und nachvollziehbar eine Gesamtbewertung gebildet wurde.Agiler Methodenkoffer II 162Ein Blick ins KlassenzimmerInformatiklehrer Herr Zuse berichtet:In meinen Projekten steht die individuelle Kompetenzentwicklung stärker im Fo -kus und es gehen nicht nur die Programmierfertigkeiten ein, sondern auch die «Soft Skills»: Einem Schüler beispielsweise konnten das Team und ich nichts im Program -mieren beibringen, weil er sich auch in seiner Freizeit intensiv damit beschäftigte und entsprechend versiert war. Aber er hat im Laufe des Projekts seine Art zu kom-munizieren extrem geändert. Anfangs wurde er schnell ausfällig, wenn jemand ihn nicht verstand. Später sagte er ab und an: «Es ist schwer, das so zu formulieren, dass die anderen das auch verstehen!», schaffte es aber dennoch, sein Wissen weiterzu-geben. Das war eine sehr positive Entwicklung, die ich ihm hoch anrechnete. Er hat es wirklich geschafft, dazuzulernen!Herausforderung• Vor Projektbeginn sollten aus Gründen der Transparenz die Bewertungs -kriterien festgelegt sein. Das ist nicht einfach, da Projekte offen sind und dementsprechend das Ergebnis noch nicht bekannt ist. Folgende Fragen, die sich die Lehrkraft in Hinblick auf die Kriterien stellen muss, sind typisch: °Wie stark werden das Produkt und fachliches Können bewertet, wie stark der Prozess und der Lernfortschritt? °Wie kann man die individuelle Leistung einzelner beurteilen, auch wenn im Team gearbeitet wird? °Wie kann man objektive Kriterien und die Berücksichtigung von wert-vollen, (nicht vorhersehbaren) individuellen Beiträgen miteinander ver-einbaren? °Gibt es gegebenenfalls eine Möglichkeit, die Lernenden in die Festlegung einiger Bewertungskriterien einzubeziehen? • Im Feedback ist Wertschätzung sehr wichtig. Schwachstellen sollten offen, aber mit Feingefühl angesprochen werden. Tipps und Tricks aus der Unterrichtspraxis• Es ist für Schülerinnen und Schüler im Rahmen einer Projektarbeit hilfreich, wenn sie bereits während des Projekts früh und wiederholt Rückmeldungen ihrer Teammitglieder über das eigene Verhalten und die eigene Leistung er-halten, um sich verbessern zu können und nicht erst zum Ende des Projekts Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen 163eine Bewertung durch die Lehrkraft vorgenommen wird. Das kann als Teil des agilen Prozesses in der ↑ Reflexion berücksichtigt werden.• Bei einem Bewertungsbogen macht es Sinn, einen Bereich «Sonstiges» oder «Besondere individuelle Leistungen» aufzunehmen, um flexibel vorab nicht planbare Beiträge berücksichtigen zu können.• Prototypen bieten eine klare produktbezogene Möglichkeit der Bewertung.• Projektbeiträge eines Pairs lassen sich anhand der Namenskürzel auf den bearbeiteten Tasks nachvollziehen.• Je nach Heterogenität der Lerngruppe können, unterstützt durch die Lehr -kraft, unterschiedliche Schwerpunkte auf den individuellen Lernfortschritt gelegt werden. So können sich Schülerinnen und Schüler, die noch fachliche Defizite haben, zunächst darum bemühen, ihre Fachkompetenz zu verbes -sern. Die Teammitglieder, die schneller lernen oder fachlich bereits weiter sind, können ihren Schwerpunkt auf die Entwicklung von sozialen sowie Selbst- und Personalkompetenzen legen, indem sie bei sich selbst und im Team Schwächen identifizieren und daran arbeiten.Agiler Methodenkoffer II 1645.5 Dokumentation – Transparenz durch aufgezeichnete AbsprachenDa innerhalb eines Softwareprojekts verschiedene Beteiligte zusammenar -beiten, ist es wichtig, zentrale Infor -mationen transparent zu dokumen -tieren. Typische Bestandteile einer Dokumentation sind Prozessabspra -chen, Texte oder Diagramme, die das Verständnis für den Aufbau und die Funktionsweise der Software erhöhen, so -wie Vereinbarungen der Qualitätsstandards.Gewinn für Schülerinnen und SchülerEine Dokumentation• hält an zur Reflexion und (schriftlichen) Kommunikation, • macht Absprachen und Prozessbestandteile transparent und dauerhaft nach -lesbar,• erlaubt es, sich in eigene ältere oder fremde Quelltexte einzuarbeiten.  Gewinn für LehrkräfteEine Dokumentation• eröffnet die Möglichkeit, das Projekt wiederzuverwenden und weiterzuent -wickeln,• gibt Anlass für Gespräche und Hilfestellungen,• offenbart, ob Schülerinnen und Schüler die Funktionalität des Quelltextes verstanden haben.Dokumentation – Transparenz durch aufgezeichnete Absprachen165Hintergrund Während der Dokumentation in klassischen Projekten ein zentraler Stellenwert zugemessen wurde, von der Vertragsgestaltung über die detaillierte Beschrei -bung einzelner Komponenten bis hin zur ausführlichen Planung und Aufzeich-nung von Testfällen in allen Phasen, ist sie in agilen Projekten zwar immer noch wichtig, steht aber nicht mehr im Mittelpunkt: Funktionierende Software wird als wichtiger als umfassende Dokumentation angesehen (Kapitel 2.1). Zudem entsteht ein Teil der Dokumentation des Prozesses und der Software nebenbei. So werden nun zu Beginn nicht mehr alle Details festgeschrieben, sondern typischerweise nur allgemeine Anforderungen und die grobe Softwarearchitek -tur. Die Details werden erst Iteration für Iteration ergänzt, passend zu Agilen Werten immer mit möglichst direkter Kommunikation und der Flexibilität, Neues einzusteuern bzw. umzupriorisieren. Dennoch verzichtet man auch in agilen Projekten nicht auf angemessene Dokumentation. Im Sinne der Nachhal -tigkeit können sich so Entwickler schnell ein Verständnis für den Aufbau und die Funktionsweise der Software verschaffen und Absprachen müssen nicht erneut ausdiskutiert werden. Die Dokumentation lässt sich in drei Bereiche einteilen:Prozessdokumentation: Das Ziel des Projekts und daraus resultierende Anforde -rungen des Kunden an die Software werden zu Beginn des Projekts bzw. in den Iterationsplanungen vom Entwicklerteam und dem Kunden gemeinsam in Work -shops zur Backlog- bzw. Iterationsplanung, oft mit Hilfe von Pinnwänden und Zetteln, festgelegt. ↑ User-Storys, die dabei entstehen oder verändert werden, werden dann in ein ↑ Project-Board eingepflegt bzw. dort aktualisiert. Die Ergeb -nisse von Retrospektiven bestehen meist ebenfalls aus auf Plakaten gesammelten Klebezetteln und können beispielsweise als Fotoprotokoll festgehalten werden.Ein Monitoring des Prozessfortschritts ist mit speziellen Funktionalitäten digitaler Project-Boards oder auch mit Programmen zur Tabellenkalkulation möglich.Softwaredokumentation: Die grundlegende Architektur, d. h. die Softwarekom -ponenten und deren Zusammenspiel, werden meist als Diagramm dargestellt. Standard in der laufenden Entwicklung sind qualitativ hochwertiger Quelltext mit Quelltextdokumentationen, insbesondere solchen, aus denen über Doku -mentationswerkzeuge automatisch Hypertexte erzeugt werden können.Qualitätsdokumentation: Im Gespräch zwischen Team und Kunden werden zu den einzelnen Anforderungen (User-Storys) die Erwartungen des Kunden an das Produkt dokumentiert. Auch nicht funktionale Anforderungen wie Stabi -lität oder kurze Antwortzeiten werden als User-Storys festgehalten. Über diese Agiler Methodenkoffer II 166Kriterien hinaus, die das Produkt am Ende erfüllen muss, legt das Team in der Definition of Done weitere allgemeine, interne und nicht auf bestimmte User-Storys bezogene Qualitätskriterien fest, die jeder fertige Prototyp erfüllen muss. Automatisierte ↑ Tests überprüfen und dokumentieren die Anforderungen. Testfälle werden werkzeuggestützt verwaltet und mit Augenmaß dokumentiert.Der Umfang einer sinnvollen Dokumentation sollte abhängig von der Team-größe, der Lebensdauer der Software und ihrem Einsatzgebiet so gewählt wer-den, dass sie einen Mehrwert aufweist.Umsetzung in der SchuleIn der Schule ist der Projektumfang entsprechend der zur Verfügung stehenden Zeit deutlich geringer und selten muss die Software nach Projektabschluss noch gepflegt oder erweitert werden. Dennoch ergibt sich die Notwendigkeit, dass sich die Schülerinnen und Schüler in ihre und fremde Quelltexte regelmäßig (wieder) einarbeiten. Eine maßvolle Dokumentation ist eine Hilfe dabei. Hin -sichtlich des Umfangs sind die Agilen Werte Transparenz und Einfachheit (Ka-pitel 2.2) eine Orientierungshilfe. Agile Techniken erfüllen selbst schon grund-legende dokumentarische Zwecke, wie die folgende Auflistung von möglichen Dokumentationstypen zeigt:• Das Project-Board mit den User-Storys und Tasks gibt einen guten Über -blick über den aktuellen Projektstand. Hier entsteht ohne zusätzlichen Auf -wand eine Prozessdokumentation, beispielsweise durch auf «Done» gesetzte User-Storys, welche nun die Anforderungen erfüllen.• Gut lesbarer, möglichst selbsterklärender Quelltext beginnt bei aussagekräf -tigen Bezeichnern für Attribute und Methoden. Sinnvoll ist es auch, auf eine gute Strukturierung zu achten, indem man z.B. Sinnabschnitte in einer Me -thode zusammenfasst.• Quelltextkommentare sind wichtig, um Schnittstellenabsprachen zu doku-mentieren, und als Erläuterungen schwieriger Quelltextstellen. Der blaue Kasten unten zeigt eine einfache Checkliste zu Quelltextkommentaren für Schülerinnen und Schüler. • Insbesondere bei komplexeren Projekten ist ein Klassendiagramm essenziell, weil es Zusammenhänge und Strukturen der Software visualisiert. Damit können sich alle Schülerinnen und Schüler besser austauschen. Im Gegensatz zur linearen Vorgehensweise gibt es bei agilem Vorgehen kein vollständiges Klassendiagramm vor dem ersten Implementierungsschritt, vielmehr wird Dokumentation – Transparenz durch aufgezeichnete Absprachen167das Diagramm begleitend zum Projektfortschritt weiterentwickelt (Variante Modelling-Story bei ↑ User Storys).Im Anfangsunterricht sind in der Regel im Sinne eines guten Aufwand-Nut -zen-Verhältnisses die Prozess- und Softwaredokumentation ausreichend.Anforderungen an Quelltextkommentare in der Schule Im Quelltext kommentiert sind:• die (eine!) Aufgabe jeder Klasse, • bei Methoden ihre Aufgabe und ggfs. welche Schnittstellenabsprachen sie erfüllen, außer wenn ihre Aufgabe wie bei Getter- und Setter-Methoden trivialerweise klar ist,• schwierige und unübersichtliche Quelltextstellen, die einer ergänzenden Erläu -terung bedürfen.  Ein Blick ins KlassenzimmerInformatiklehrer Herr Nygaard berichtet:Dokumentation soll in agilen Projekten so stattfinden, dass sie einen Mehrwert hat. Vorrangig ist die laufende Software. Deshalb entstehen Klassendiagramme in den von mir betreuten agilen Projekten meist erst zu einem späteren Zeitpunkt, wenn die Software bzw. die zu lösenden Probleme so komplex sind, dass die Schülerinnen und Schüler in der Modellierung einen Vorteil für sich erkennen. Ab diesem Zeitpunkt werden Klassendiagramme regelmäßig in Besprechungen herangezogen und meist freiwillig mit jeder Iteration erweitert bzw. im Falle eines ↑ Refactorings überarbei-tet. Sie sind in der Regel nicht vollständig ausgearbeitet, wichtig ist mir nur, dass die Teams damit gut zurechtkommen. Ebenso können Sequenz- und Zustandsdiagram -me oder Struktogramme einen wichtigen Beitrag in Besprechungen liefern.Auch lesen, kopieren und testen meine Schülerinnen und Schüler sehr viel fremden Code in diesen Projekten. Da sehen sie sehr schnell den Unterschied zwischen guter und schlechter bzw. nicht vorhandener Kommentierung und ob die Bezeichner gut gewählt wurden. VariantenEine Möglichkeit, den Sinn der Quelltextdokumentation erfahrbar zu machen, ist es, Schülerinnen und Schüler (von der Lehrkraft gesteuert) in fremden Quell -texten weiterarbeiten zu lassen.Agiler Methodenkoffer II 168HerausforderungEs ist schwierig, den passenden Zeitpunkt zu finden, an dem die Schülerinnen und Schüler einen gewissen Leidensdruck haben: Wenn aber auf Grund von mangelnder Dokumentation Fehler entstanden sind oder Arbeiten doppelt ge -macht werden mussten, ist allerdings der ideale Zeitpunkt gekommen, an dem der Mehrwert einer Dokumentation erfahrbar wird.Material• Für Besprechungen verschiedenster Art im Prozessablauf sind Stellwände bzw. Plakate, farbige Zettel, Marker etc. hilfreich, für Einsteiger Karten mit Anforderungen an Quelltextkommentare. • In höheren Jahrgangsstufen können bei der Auswahl des Entwicklungswerk -zeugs durchaus auch Funktionalitäten wie das automatische Generieren ei-nes Klassendiagramms aus dem Quelltext oder eines Hypertextes (z.B. Ja -vaDoc über BlueJ) aus den Kommentaren sowie das einfache Nutzen eines Test-Frameworks eine Rolle spielen. Tipps und Tricks aus der Unterrichtspraxis• Das regelmäßige Abfotografieren des Project-Boards ist eine Möglichkeit, den Verlauf des Projekts zu dokumentieren.• Auf dem ↑ Project-Board kann man zusätzliche Spalten für Dokumentation und Refactoring ergänzen, um die Bedeutung der beiden Aspekte herauszu-stellen und eine regelmäßige Erinnerung präsent zu haben.• Die Lehrkraft kann spezielle User-Storys «Dokumentation» einstreuen wie beispielsweise die folgende:Titel:  ProgrammdokumentationBeschreibung:  Informiert euch mit Hilfe des Zusatzmaterials über das Thema «Programm -dokumentation». Erstellt dann für euer bis­heriges Programm eine Dokumentation, plant dazu Tasks und geht arbeitsteilig vor. Führt die Dokumentation ab jetzt konsequent fort.Dokumentation – Transparenz durch aufgezeichnete Absprachen169Abbildung 5.3:  User-Story «Dokumentation»• Ein Benutzerhandbuch als weitere Dokumentationsart kann bereichernd sein, weil es bei den Schülerinnen und Schülern einen Perspektivwechsel vom Entwickler zum Benutzer anregt (Kapitel 3.5). • Im Pair-Programming sollte der Navigator auch auf die Einhaltung der Quelltextdokumentation achten.• Phasen, in denen einzelne Programming-Pairs vor der Integration und dem Test «Leerlauf» haben, weil sie ihren Task umgesetzt haben, können für Do -kumentationszwecke genutzt werden: Dieses Pair nimmt sich bspw. eine Java-Klasse aus ihrem Projekt und überprüft bzw. ergänzt die Quelltextdo -kumentation nach vorgegebenen Regeln.Agiler Methodenkoffer II 1705.6 Refactoring – Qualität verbessern und dabei lernenUnter Refactoring versteht man das Überarbeiten des bisherigen Arbeits -stands des Quelltextes mit dem Ziel, diesen besser verständlich und leich -ter erweiterbar zu machen, ohne dass sich seine Funktionalität nach außen verändert.Gewinn für Schülerinnen und SchülerRefactoring • fördert die konstruktiv kritische Betrachtung des eigenen Quelltextes,• verbessert die Qualität und Lesbarkeit des Quelltextes,• führt zu einem besseren Verständnis des gemeinsamen Quelltexts,• erleichtert das Finden und Beheben von Fehlern in darauffolgenden Iterationen,• unterstützt den Lernprozess, da es als Prozessbestandteil signalisiert, dass zunächst auch suboptimale Lösungen erlaubt sind,• macht durch sukzessive Verbesserungen sowohl an Details als auch an Design und Struktur die Auswirkungen von Entwurfsentscheidungen erfahrbar. Gewinn für LehrkräfteRefactoring • erleichtert das Unterstützen der Teams etwa bei der Fehlersuche, da man sich schneller im Quelltext zurechtfindet, • gibt Gelegenheit, über Vorzüge und Nachteile unterschiedlicher Entwurfsent-scheidungen anhand von konkreten Beispielen zu sprechen.Refactoring – Qualität verbessern und dabei lernen171HintergrundRefactoring bezeichnet eine agile Praktik, die auch außerhalb der agilen Soft -wareentwicklung beliebt ist. Während es bei über Jahre gewachsener Software lange Zeit etwas scherzhaft, aber oft aus bitterer Erfahrung heraus hieß «Never touch a running system», ist es heute fester Bestandteil eines Entwicklungs -prozesses, die Struktur der Software häufig und mit möglichst kleinen Ände -rungen zu überarbeiten, sodass sie dauerhaft gut erweiterbar, verständlich und leicht testbar bleibt. Weiterhin früh im Prozess trifft man grundlegende Entwurfsentscheidungen, die z.B. die Komponenten und ihr Zusammenspiel betreffen, wie etwa das Verwenden einer Client-Server-Architektur. Darüber hinaus gibt es aber unzählige Entscheidungen im Laufe des Entwicklungspro -zesses, bei denen die Erfahrung gezeigt hat, dass es tatsächlich billiger und effektiver ist, zunächst nach dem KISS-Prinzip den einfachsten Entwurf für die aktuelle ↑ Iteration zu wählen und dafür aber regelmäßig die Struktur zu überarbeiten. Denn nur zu oft stellte sich eine mit viel Aufwand vorbereitete komplexe Struktur später gar nicht mehr als sinnvoll heraus, insbesondere wenn Änderungen der Anforderungen notwendig wurden. Somit entsteht der Softwareentwurf nicht vollständig in einer großen Vorabplanung, sondern ist die Summe vieler sukzessiv getroffener Entscheidungen. Als wichtige Vor -aussetzung für das Gelingen eines Refactorings gilt eine gute Testabdeckung (↑ Testen), denn je umfangreicher die Tests sind, desto schneller erkennt man, wenn beim Umstrukturieren die Funktionalität der Software nicht erhalten bleibt. Das Refactoring findet also in einer Iteration immer dann statt, wenn neu implementierte Tasks getestet sind und die Software lauffähig ist. Dann werden beispielsweise Variablen-, Methoden- und Klassennamen überdacht, redundante Abschnitte im Quelltext eliminiert, auskommentierter Quelltext gelöscht, zu umfangreiche Methoden in kleinere zerlegt, eine Klasse aufge -teilt, falls sie mehr als eine Zuständigkeit hat, Spezialisierungen oder Gene -ralisierungen durchgeführt und Entwurfsmuster eingeführt. Neben kleinen Aufräumarbeiten können hin und wieder auch größere Strukturänderungen sinnvoll sein, die mehr Zeit benötigen. Sie werden mit dem Kunden bespro -chen, als User-Story geplant und priorisiert.Umsetzung in der SchuleDurch Refactoring wird es in der Schule möglich, dass Schülerinnen und Schüler mit ihrem aktuellen Wissen und einem Plan für die ersten Schritte zunächst ins Projekt starten, Prototypen erzeugen und erst im Laufe der Zeit einige Charak -Agiler Methodenkoffer II 172teristika von qualitativ guter Software erfahren und umsetzen. Sie werden in der Regel nach den ersten Iterationen zunehmend Nachteile von ungenügend strukturierter Software spüren: Ihr Quelltext wird schlechter lesbar, wenn keine sprechenden Bezeichner verwendet wurden, Erweiterungen führen zu Fehlern, weil im Team festgelegte Regeln, etwa wie man Getter- und Setter-Methoden bezeichnet, nicht von allen eingehalten wurden, erste Redundanzen führen dazu, dass diese Quelltextstellen immer wieder parallel erweitert und korrigiert werden müssen, oder Methoden werden zu lang und unübersichtlich. Das sind Anlässe, die zu einem Refactoring motivieren. Ein typisches Beispiel ist, eine mehrfach verwendete Bedingung bestehend aus einem komplizierten Ausdruck durch eine Methode mit booleschem Rückgabewert zu ersetzen:Mehrfach verwendete Bedingungen ersetzen – höhere Übersichtlichkeit  und weniger Redundanzen Aus:if (positionX>0 && positionX<10 && positionY>0 && positionY<10)wird:if (istImSpielfeld())in Kombination mit einer neuen Methode:boolean istImSpielfeld(){return (positionX>0 && positionX<10 && positionY>0 && positionY<10)}Auch in der Schule wird ein Refactoring erst dann durchgeführt, wenn die Software getestet und lauffähig ist. Je nach Erfahrung werden Teams für ers -te Überarbeitungen einen Anstoß oder auch die Unterstützung der Lehrkraft benötigen. Regelmäßiges Überarbeiten durch kleine Verbesserungen passt ab diesem Zeitpunkt gut ans Ende einer Iteration nach dem Testen. Hilfreich für die Schülerinnen und Schüler hierfür kann eine Checkliste mit Qualitätskriterien für Quelltext wie im Kasten auf Seite 173 sein. Für größere Umstrukturierungen hingegen bietet es sich auch in der Schule an, User-Storys zu schreiben.Insbesondere in Oberstufenprojekten ist es in der Regel notwendig, einige grundlegende Strukturentscheidungen, die mehr Erfahrung voraussetzen, zu Beginn des Projekts zu treffen. Hier, aber auch wenn man sehr früh im Lernpro -zess in ein Projekt einsteigt (Kapitel 3.3), wird die Lehrkraft die Schülerinnen und Schüler anfangs weiterhin beraten müssen. Darüber hinaus können Ent -wurfsentscheidungen nun aber mit der Zeit getroffen bzw. optimiert werden Refactoring – Qualität verbessern und dabei lernen173und Fehler werden nicht wie in wasserfallähnlichen Projekten zu Problemen, die den Projekterfolg gefährden, sondern zu wertvollen Lernchancen.QualitätscheckIn unserem Quelltext• haben alle Bezeichner sprechende und zu unserer Vereinbarung passende Namen •  ist die Formatierung einheitlich,•  sind auskommentierte Zeilen, die nicht mehr gebraucht werden, gelöscht,•  haben Methoden eine übersichtliche Länge,•  hat jede Klasse eine übersichtliche Größe und genau eine Zuständigkeit,•  gibt es keine unnötigen Redundanzen,•  nutzen wir Spezialisierung und Generalisierung, wo sie sinnvoll sind.Ein Blick ins KlassenzimmerInformatiklehrerin Frau Lovelace berichtet: Ein Team kam an einem Punkt gar nicht mehr weiter. Es hatte zwar ein gutes Klas-sendiagramm, aber beim Umsetzen teilweise Methoden in falschen Klassen imple-mentiert. Das geschieht erfahrungsgemäß am Anfang immer mal. Also habe ich das Team zu einem Refactoring angeleitet. Am Ende waren sie glücklich, weil es sich so schnell und leicht reparieren ließ. Zunächst hatten sie gedacht, jetzt müssen sie alles wegwerfen und von vorn anfangen. Gerade den Schwächeren im Team hat das Refactoring sehr geholfen. Sie haben gemerkt, dass sie etwas zum Projekt beitragen können und dass Fehler machen nicht so schlimm ist. So sind sie weiter fleißig mit dabei gewesen.Informatiklehrer Herr Weizenbaum berichtet:Ein Team hat in einem Spiel verschiedene Tiere implementiert. Mit der Zeit wurde eine Vererbungsstruktur sinnvoll. Um Redundanzen zu vermeiden sowie die Lesbar -keit und Erweiterbarkeit zu verbessern, wurde der bestehende Code entsprechend folgender Teamentscheidungen überarbeitet:• Die Bezeichner sollen deutsche Begriffe sein, aber «set» und «get» werden als Präfix von Getter- und Setter-Methoden verwendet.• Die gemeinsamen Attribute und zugehöigen Getter- und Setter-Methoden werden in die Oberklasse verschoben. Agiler Methodenkoffer II 174Abbildung 5.4:  Beispiel für Vereinheitlichen von Bezeichnern und sinnvolles Einführen einer Vererbung Tipps und Tricks aus der Unterrichtspraxis• Eine anfangs schon eingeführte Liste mit Vereinbarungen für lesbaren, gut strukturierten Quelltext kann schrittweise erweitert werden. • Neu erlernte Konzepte, wie beispielsweise Modularisierung oder Vererbung. sind ein typischer Anlass, Quelltext umzustrukturieren. Refactoring, als Technik aus der Praxis der Softwareentwicklung («Das machen die Profis auch»), kann nicht nur im Projekt, sondern auch im Unterricht eine Motiva-tion für solche Umstrukturierungsarbeiten sein. • Hilfreich sind Entwicklungsumgebungen, die ein automatisches Formatie -ren und das Umbenennen unterstützen. • Entscheidungen, wie etwa das Verwenden einer Client-Server-Architektur oder des MVC-Musters, können von der Lehrkraft vorab vorgegeben werden, da sie nachträglich nur mit großem Aufwand umsetzbar sind. Sie werden auch in professionellen Projekten von Entwicklern mit mehr Erfahrung, meist ausgewiesenen Softwarearchitekten, so früh wie nötig getroffen.Schlangenamevelocityschlaengelt() getName() getVelocity() setName(name) setVelocity(vel)Schweintiername Geschwindigkeitlaeuft() getName()getGeschwindigkeit() setName(name) setGeschwindigkeit(g)Schlange<<abstract>>TierSchildkroetename speedkriecht() getName()getGeschwindigkeit setName(name) setSpeed(s)Schwein SchildkröteAufwandsabschätzung – gemeinsam das Machbare ermitteln1755.7 Aufwandsabschätzung – gemeinsam das Machbare ermittelnAls Basis des Planungspro -zesses und zur gemeinsamen Abschätzung des Aufwands eines Projekts oder einer Aufgabe können verschiede -ne Techniken herangezogen werden, mit denen die Expertise des Teams genutzt und Wissenstransfer un -terstützt wird.Gewinn für Schülerinnen und SchülerAufwandsabschätzungen • fundieren den Planungsprozess hinsichtlich des Schaffbaren, • sind Anlass zum Austausch über Problemlösestrategien,• offenbaren, ob alle ein gemeinsames Verständnis der zu planenden Aufgabe haben,• unterstützen den sachbezogenen Austausch und die Konsensfindung bei un-terschiedlichen Meinungen. Gewinn für LehrkräfteAufwandsabschätzungen• sind ein Instrument, um Selbstorganisation zu fördern,• initiieren Wissenstransfer innerhalb der Teams.Agiler Methodenkoffer II 176HintergrundIn agilen Softwareprojekten ist die Abschätzung der für das Projekt und seine Bestandteile benötigten Zeit eine der wichtigsten, aber auch herausfordernds -ten Aufgaben: Zu Beginn des Projekts oder einer Iteration gibt das Team dem Kunden eine Zusicherung darüber, welche Funktionalitäten im entsprechenden Zeitrahmen umgesetzt werden. Eine Zusage kann nur dann zuverlässig sein, wenn zuvor eine realistische Aufwandsabschätzung vorgenommen wurde.Häufig erfolgt agiles Schätzen nicht durch Bestimmung des absoluten Auf -wands, sondern orientiert sich an einem Referenzwert und alle weiteren Schät -zungen finden relativ dazu statt. Vergleichende Schätzungen sind schneller und objektiver, da letztlich die tatsächliche Bearbeitungszeit auch vom konkreten Bearbeiter abhängt. Eine einfache Möglichkeit ist die Vergabe von T-Shirt-Grö -ßen (XS, S, M, L …) für die Größenordnung des Aufwands.Eine handlungsorientierte Technik zur gemeinsamen Prognostizierung des Arbeitsaufwands ist das Planning-Poker. Jeder Teilnehmer erhält hierbei einen Satz Spielkarten mit Komplexitätswerten (sogenannte Story-Points, Abbildung 5.5). Mit steigenden Werten vergrößert sich auch ihr Abstand, da auch der Un-sicherheitsfaktor im Schätzen größer wird. Als Sonderkarten gibt es eine Frage- und eine Pausenkarte.Abbildung 5.5:  Planning-Pokerkartenset mit Story-Points.In jeder Spielrunde wird eine User-Story betrachtet und dazu in die Mit -te des Tisches gelegt. Alle Teammitglieder legen nun verdeckt die Karte ih -rer Schätzung auf den Tisch und decken anschließend gleichzeitig auf. Der größte und kleinste Schätzwert sollte jeweils begründet werden. Anschlie -ßend wird versucht, in der Diskussion einen Konsens zu finden, der dann auf der User-Story als gemeinsamer Schätzwert notiert wird. Die Konsens -findung im Team ist ein Mehrwert, weil dadurch Agile Werte gelebt werden.  Der relative Schätzwert kann über einen Referenzwert in Bearbeitertage umge -rechnet werden. Aufwandsabschätzung – gemeinsam das Machbare ermitteln177Wurde zu Beginn einer Iteration der Gesamtaufwand aller User-Storys be -stimmt, kann der Projektfortschritt über ein sogenanntes Burn-Down-Chart visualisiert werden. Dazu wird der täglich aktualisierte Restaufwand in Abhän-gigkeit zur verbleibenden Zeit dargestellt (Abbildung 5.6).Abbildung 5.6:  Burn-Down-ChartUmsetzung in der SchuleFür Schülerinnen und Schüler stellt die Zeitabschätzung aufgrund der meist fehlenden Projekt- und Softwareentwicklungserfahrung eine der schwierigsten Aufgaben dar. Aus diesem Grund ist es sinnvoll, statt User-Storys Tasks (als kleinste Einheit von Arbeitspaketen) sowie vergleichende Abschätzungen zu verwenden. Dass vergleichendes Schätzen deutlich einfacher ist, lässt sich mit folgender Aufgabe demonstrieren:Wie viele Einwohner haben Köln, Frankfurt und München jeweils?a) Schätzen Sie absolute Zahlen.b) Schätzen Sie, wie sich die Einwohnerzahlen in etwa relativ zueinander ver-halten.Agiler Methodenkoffer II 178Mit Planning-Poker erhalten die Schülerinnen und Schüler eine spielerische Technik an die Hand, mit der sich alle Teammitglieder unabhängig von ihrer Erfahrung oder Durchsetzungsfähigkeit in den Planungsprozess einbringen können. Die Tasks zu den User-Storys für die nächste Iteration werden präsen-tiert, und es ist die Aufgabe aller, diese zu analysieren, mit anderen Abschätzun -gen zu vergleichen, einen Schätzwert verdeckt auszugeben (s.o.) und anschlie -ßend ggf. zu verteidigen und zu erklären, sodass ein Konsens gefunden wird. Da Schülerinnen und Schüler in konkreten Zeiträumen denken und in Schulprojek -ten relativ kurze Arbeitszeiten zur Verfügung stehen, kann als Basiswert des Planning-Pokers bspw. ein 15-Minuten-Zeitraum gewählt werden (Abbildung 5.7). Abbildung 5.7:  Planning-Poker-Kartenset, angepasst an SchulprojekteDie Erörterung sehr unterschiedlicher Schätzungen trägt auch dazu bei, nicht näher spezifizierte Anforderungen und Annahmen zu klären. Varianten• Als einfache vergleichende Abschätzung, die auch hier im Buch verwendet wird, ist beispielsweise eine Einteilung des Aufwands in gering, mittel oder hoch möglich, was leicht mit T-Shirt-Größen (S, M, L) gekennzeichnet wer-den kann (Kapitel 3.2).• Die Unterteilung einer User-Story in etwa gleich große Tasks bzw. außerhalb der Softwaretechnik einer Aufgabe in annähernd gleich große Arbeitspakete ist bereits eine Art Aufwandsabschätzung: Die Arbeitspakete werden nicht exakt gleich lang sein, aber sie sind ein Maß für den Gesamtaufwand. Für viele Schulprojekte ist diese Art der Abschätzung völlig ausreichend.Aufwandsabschätzung – gemeinsam das Machbare ermitteln179HerausforderungenDie Aufwandsabschätzung ist vor allem am Anfang schwer und zählt deshalb zu den anspruchsvollen Techniken. Anders als bei professionellen Projekten be -steht die Priorität in der Schule letztlich nicht darin, profitabel zu arbeiten und ein Produkt zu entwickeln, das ein externer Kunde tatsächlich braucht, sondern es ist meist unerlässlich, die wenige verfügbare Zeit einzuhalten und selbst mit dem Produkt zufrieden zu sein. Aus diesem Grunde wird in Unterrichtsprojek -ten häufig darauf verzichtet.Tipps und Tricks aus der Unterrichtspraxis• Sollte es zu starken Diskrepanzen zwischen der zur Verfügung stehenden und der geschätzten notwendigen Zeit kommen, müssen Anzahl oder Komplexi-tät der User-Storys geändert werden.• Bei der Aufwandsabschätzung ist es wichtig, dass die Teammitglieder gleich -zeitig ihre Entscheidung bekannt geben, damit unabhängige Meinungen in die Meinungsbildung einfließen. Auch ohne Pokerkarten ist dies leicht mög -lich, wenn es nur wenige Aufwandskategorien (z.B. gering, mittel, hoch) gibt: Ein «Spielleiter» leitet das Ende der individuellen Überlegungsphase mit ei-nem Countdown ein. Am Ende des Countdowns heben alle gleichzeitig (!) die Hand und zeigen mit der Fingerzahl ihr Ergebnis an. Im Anschluss erfolgt dann wie gewohnt eine gemeinsame Diskussion, um einen Konsens in der Gruppe zu finden. Agiler Methodenkoffer II 1805.8 Repositorys und andere kollaborative WerkzeugeDigitale Werkzeuge können kollabo -ratives Arbeiten unterstützen, indem sie das zeitgleiche Bearbeiten, das Zusammenführen verschiedener Be -standteile und eine Versionskontrolle ermöglichen.Gewinn für Schülerinnen und SchülerEin kollaboratives Werkzeug• erleichtert das örtlich und zeitlich verteilte Arbeiten an Dokumenten eines Projekts, • erhöht die Übersicht durch eine Versionskontrolle,• erleichtert die Wiederaufnahme der Arbeit nach einem «Irrweg» über ein Roll -back,• reduziert Arbeit, weil es das automatische Zusammenführen (Merge) von Quelltext ermöglicht, • schafft Transparenz über die Beiträge der einzelnen Teammitglieder.  Gewinn für LehrkräfteEin kollaboratives Werkzeug• entlastet das Projekt zeitlich und die Betreuung organisatorisch,• schafft Transparenz bezüglich des aktuellen Projektstandes und der Beiträge einzelner Teammitglieder.  Repositorys und andere kollaborative Werkzeuge181HintergrundAgile Projekte mit Beteiligten an unterschiedlichen Standorten, ggfs. von unter -schiedlichen Unternehmen, bedürfen eines digitalen Datenaustauschs. Gemein -same Dateiverzeichnisse und E-Mails führen allerdings zur Problematik, dass unklar ist, welche Version jeweils aktuell ist. Abhilfe versprechen kollaborative Werkzeuge, bspw. gemeinsame Wikis, die Änderungen in der Versionshistorie nachvollziehbar machen. In der professionellen Softwareentwicklung in Unter -nehmen und im Open-Source-Bereich ist der Einsatz von Versionsverwaltungs -systemen etabliert. Sie haben folgenden Mehrwert:Zum einen gibt die automatische Versionierung eine Übersicht über den Ent -stehungsverlauf inklusive der Dokumentation, wer wann was geändert hat. Die Daten werden nicht nur gesichert, sondern es ist auch leicht möglich, eine Datei auf eine ältere Version zurückzusetzen (Rollback).Zum anderen stellt das automatische Zusammenführen (engl. merge) von Quelltexten mit einer automatischen Konflikterkennung, falls mehrere Entwick -ler Änderungen im selben Bereich durchgeführt haben, eine Arbeitserleichte -rung dar und reduziert die Fehlerhäufigkeit.In professionellen Projekten sind solche Systeme daher seit langem unver-zichtbar. Im agilen Umfeld unterstützen sie zudem Werte wie Transparenz, Feed back und Selbstorganisation.Umsetzung in der SchuleIn der Schule ist der Mehrwert kollaborativer Werkzeuge vergleichbar mit dem oben genannten. Außerhalb des Programmierens eignen sich u.a. Wikis, kol -laborative Mindmaps, digitale To-do-Listen oder Project-Boards, Online-Of -fice-Anwendungen oder einfache webbasierte Texteditoren als Werkzeuge.Ein aktuell in der Softwareentwicklung weit verbreitetes Versionsverwal -tungssystem ist Git. Auch für den Informatikunterricht geeignete Entwick -lungsumgebungen wie BlueJ und der JavaEditor haben ihrerseits bereits einen Git-Client integriert. Für Git-Server, auf denen man ein Repository, also ein Verzeichnis zur Speicherung und Verwaltung der Softwareversionen, einrichten kann, gibt es mehrere kostenlose Hosting-Angebote. Solche Software-Reposi -torys synchronisieren Daten nicht in Echtzeit. Für Git-Systeme beispielsweise erfolgt die Synchronisation entsprechend dem in Abbildung 5.8 dargestellten und im Folgenden beschriebenen Ablauf:Agiler Methodenkoffer II 182Abbildung 5.8:  Grundsätzliche Abfolge der Arbeitsschritte beim Einsatz eines Git-Sys-tems in der SoftwareentwicklungZu Beginn der Arbeit lädt sich jedes Entwicklerpair aktiv mit einem «Pull» (auch «Update») (1.) die aktuellste Version der weiterzuentwickelnden Software aus dem Server-Repository. Im abgebildeten Beispiel ist das die Version 2. Lokal führt Pair A ebenso wie Pair B nun eigene Änderungen bzw. Ergänzungen des Quelltextes durch. Mit jedem «Commit» (2.) werden diese Änderungen zunächst lokal bei Pair A bzw. Pair B gespeichert. Erst wenn das eigene Programm lauf -fähig ist und getestet wurde, stößt das erste Programming-Pair, z.B. Pair A, aktiv mit einem «Push» (3.) eine Abgabe in das Server-Repository an. Im Re -pository wird die Abgabe automatisch als Version 3 gespeichert. Ein von Pair B nun angestoßener «Push» würde vom Server-Repository abgelehnt, d. h. die Schülerinnen und Schüler können sich nicht mehr versehentlich gegenseitig ihre Arbeiten überschreiben. Wird ein «Push» abgelehnt, holt sich das Pair mit einem weiteren «Pull» (4.) die jetzt aktuellste Version vom Server-Repository. Diese wird vom git-Client automatisch mit der lokalen Version von Pair B zu -sammengeführt (engl. merge) (5.). Das Ergebnis der Zusammenführung kann dann mit einem weiteren «Push» (6) beim Server-Repository abgegeben werden und wird automatisch als Version 4 abgespeichert. Idealerweise führen die Pairs ihre Änderungen in unterschiedlichen Bereichen des Quelltextes durch, denn sonst können beim automatischen Zusammenführen (5.) Konflikte auftreten, die das Pair manuell klären muss, wobei das Werkzeug diese Arbeit durch eine geschickte Darstellung unterstützt.Genauer betrachtet gibt es bei Git-Systemen neben dem oben beschriebenen Server-Repository auch bei jedem der beiden Programming-Pairs ein eigenes lokales Repository, welches Änderungen automatisch versioniert und verwal -tet. Bei Softwareprojekten in der Schule ist es empfehlenswert, didaktische Entwicklungsumgebungen zu verwenden, die bereits einen Repository-Client Repositorys und andere kollaborative Werkzeuge183enthalten. Dadurch entfällt eine zusätzliche Installation und Einarbeitung, so -wohl in der Schule als auch zu Hause. Das Werkzeug soll ja die Arbeitsprozesse entlasten!Ein Blick ins KlassenzimmerInformatiklehrer Herr Turing berichtet:Wie oft habe ich schon gehört, dass eine Schülergruppe bei einem Projekt nicht weiterarbeiten kann, weil genau der kranke Schüler die Datei mit dem aktuellen Zwischenstand hat. Das senkt die Motivation und bremst den Arbeitsfortschritt. Online-Repositorys lösen das Problem, weil damit jederzeit (auch für die Hausauf-gabe) der aktuelle Stand abrufbar ist. Am Ende einer Iteration sind nun auch die Leistungsträgerinnen und Leistungsträger der Teams deutlich entlastet, denn sie müssen nicht mehr dafür sorgen, dass die unterschiedlichen Quelltextteile zu einer lauffähigen Version zusammengesetzt werden. Außerdem bin ich begeistert, weil ich mitverfolgen kann, wie einige Schülerinnen und Schüler so vom Projektthema gefangen sind, dass sie auch von zu Hause vieles einbringen.HerausforderungenSicherheitseinstellungen in schulischen Netzwerken blockieren mitunter digi-tale kollaborative Werkzeuge. Aus diesem Grund sollten diese vorbereitend mit Schüleraccounts getestet werden, um ggfs. rechtzeitig Freigaben beantragen zu können.Tipps und Tricks aus der Unterrichtspraxis• Bei datenschutzrechtlichen Bedenken können Accounts über die Vergabe von Nicknames anonymisiert werden. • Viele kollaborative Werkzeuge geben einen guten Einblick darin, wie und wann die Teammitglieder welche Inhalte beigesteuert haben. Das darf man nicht überbewerten, insbesondere bei ↑ Pair-Programming. Diese Informa -tionen stellen aber durchaus gute Gesprächsanlässe dar.• Der Umgang mit Software-Repositorys sollte nach Möglichkeit bereits vor dem Projekt schrittweise eingeführt werden: Das Verteilen von Dateien z.B. mit vorgefertigten Quelltextrümpfen oder Lösungen über Repositorys ist für die Lehrkraft ein Weg, der auch im regulären Unterricht den Aufwand minimiert. Auch für die Schülerinnen und Schüler ist es zeitsparend, da die Dateien nach dem Holen über das Werkzeug direkt in der Entwicklungsum-Agiler Methodenkoffer II 184gebung verfügbar sind. So sparen sie sich den Umweg über das Zwischenspei -chern und Entpacken einer Zip-Datei. Der Mehrwert der Kollaboration kann gut durch entsprechende Aufgaben für Schülerinnen und Schüler erfahrbar gemacht werden (Kapitel 3.3).Agile Methoden  für alleSchule agil gestalten6 Zum Abschluss des Buches werfen wir einen umfassenderen Blick auf die Entwicklung der Projektmethode, die mit ihr verbundenen Ziele und den Beitrag agiler Methoden, um diese in der Unterrichtspraxis zu errei­chen. Anschließend verdeutlichen wir anhand verschiedener Beispiele, wie Schule über den Informatikunterricht hinaus agil gestaltet werden kann.Agile Methoden in Theorie und Praxis1876.1 Agile Methoden in Theorie und PraxisDie Bedeutung der Projektmethode für die SchuleDie Projektmethode hat an allgemeinbildenden Schulen eine mehr als hundert -jährige Geschichte. Während die amerikanischen Pädagogen Dewey und Kil -patrick zu Beginn des 20. Jahrhunderts vor allem das «herzhaft absichtsvolle Tun» und die subjektiven Einstellungen der Lernenden stärker im Unterricht berücksichtigt haben wollten, prägte später zunächst Gudjons die deutsche Dis -kussion mit dem Konzept des handlungsorientierten Lernens, das Schule und reale Welt wieder stärker miteinander verbinden sollte. Der Schweizer Pädagoge Frey entwickelt später für die Praxis ein aus sieben Komponenten bestehendes Grundmuster der Projektmethode, an dem sich heute viele Unterrichtsprojekte im deutschsprachigen Raum orientieren.Da auch in der gegenwärtigen Bildungsdiskussion ein Stärken und Verknüp -fen fachlicher, sozialer, methodischer und personaler Kompetenzen gewünscht ist, wird die Projektmethode zunehmend als geeignete Unterrichtsmethode angesehen, um Selbstorganisation, individualisiertes, kooperatives und selbst-reguliertes Lernen sowie das gemeinsame Übernehmen von Verantwortung im Unterricht zu adressieren. Aufgabe der Lehrkraft in einem solchen Unter-richt ist es, im Klassenzimmer die Rahmenbedingungen zu schaffen, die es den Schülerinnen und Schülern ermöglichen, motiviert und ihren Kompetenzen entsprechend projektorientiert arbeiten und lernen zu können. Dabei sollen sie unterstützend betreut und letztlich auch bewertet werden. Informatikunter -richt ist gegenüber anderen Fächern insofern besonders, als Prozessmodelle der professionellen Softwareentwicklung herangezogen werden können, die neben der Strukturierung von Unterrichtsprojekten auch einen Einblick in den Ar -beitsalltag bieten können. Entsprechend greift unter anderem auch Frey für den Informatikunterricht ein traditionelles Vorgehensmodell der Softwareentwick -lung auf und zeigt, wie es mit den sieben Komponenten seines Grundmusters verknüpft werden kann.Agile Methoden für alle 188Probleme der traditionellen ProjektmethodeProjektarbeit wird typischerweise in Phasen gegliedert, die das Vorgehen struk -turieren und traditionell eine nach der anderen durchlaufen werden: Nach der Ideensammlung wird ein genauer Plan erstellt, dieser wird arbeitsteilig um -gesetzt und zum Schluss wird überprüft, ob die Projektziele erreicht wurden. Im Informatikunterricht orientierten sich Projekte bisher meist am Wasserfall -modell der professionellen Softwareentwicklung, welches einen vergleichbaren Aufbau aufweist. In der praktischen Umsetzung stößt dieses Vorgehen allerdings in der Schule wie in der Industrie an Grenzen. So werden Projekte in der pro -fessionellen Softwareentwicklung ebenso wie im Informatikunterricht oftmals nicht erfolgreich abgeschlossen. Wo genau liegen aber die Probleme?Wir haben in einer qualitativ angelegten Studie Informatiklehrkräfte mit unterschiedlichen Erfahrungshintergründen verschiedener Schultypen und Bundesländer dazu befragt mit dem Ziel, eine Erklärung zu finden.Als Kernprobleme werden das Fehlen von methodischen Kompetenzen so -wie Defizite hinsichtlich fachlicher, sozialer und persönlicher Kompetenzen der Schülerinnen und Schüler gesehen. So sind viele der Kompetenzen, die anhand des Projekts erworben werden sollen, eigentlich Voraussetzung für die Projekt-arbeit. Der Freiraum im Projekt allein genügt kaum, um die benötigten Kompe -tenzen auszubilden. Hierzu zählt die oftmals fehlende Fähigkeit zur Selbstorga -nisation, sowohl bezogen auf den Prozess der Produktentwicklung als auch auf das Lösen von Problemen. Zwar soll in Projekten gemeinsam Verantwortung übernommen werden, aber auch das scheitert regelmäßig an fehlenden fachli-chen und methodischen Kompetenzen, sodass die Verantwortung stattdessen an die Lehrkraft oder an einzelne leistungsstarke Schülerinnen und Schüler de -legiert wird. Auch zu Beginn noch sehr motivierte Kurse leiden an abnehmender Motivation, wenn sich die Projektaufgaben als zu schwer zu bewältigen oder als eintönig erweisen. Alle Lehrkräfte berichten von Erfahrungen mit Projek -ten, in denen am Ende Zeit fehlte, was sich direkt auf den Projekterfolg (kein lauffähiges Produkt) auswirkte. Das Bewerten der Schülerleistungen verläuft mangels Einblick in die Arbeitsprozesse und unfertiger Produkte oftmals nicht zufriedenstellend.Ebenso erweisen sich das Planen inhaltlicher und methodischer Unterstüt-zung sowie die Adressierung von neuen Themen für die Lehrkräfte als schwie -rig. So berichten die Lehrkräfte übereinstimmend, dass der Betreuungsaufwand meist während des gesamten Projekts hoch und der Grad der Selbstorganisation entsprechend niedrig ausfällt. Für den schulischen Alltag werden traditionelle Vorgehensweisen als zu unflexibel erlebt. Agile Methoden in Theorie und Praxis189Andere Studien der letzten Jahre zur Projektpraxis legen darüber hinaus nahe, dass die Situation auch in anderen Fächern ähnlich ist: Die mit der Pro -jektmethode in der Theorie verfolgten Absichten, denen die Lehr-Lern-For -schung, die Fachdidaktiken, aber auch die Wirtschaft einen zunehmend höheren Stellenwert innerhalb der Bildung beimessen, können in der Unterrichtspraxis von Lehrkräften oft nur unzureichend realisiert werden.Wie agile Projekte das Lernen und das Unterrichten unterstützenSeit 2013 begleiten wir Lehrkräfte bei der Umsetzung agiler Unterrichtsprojekte in ganz Deutschland und beobachten, wie die damit verbundenen Praktiken und Techniken an individuelle fachliche und pädagogische Zielen angepasst und in unterschiedlichsten Kontexten erfolgreich eingesetzt werden. Da wir inzwischen Erfahrungen aus über 20 Projekten sammeln und auswerten konnten, lassen sich Schlussfolgerungen hinsichtlich des Potenzials agiler Methoden im Un -terricht ziehen: Die Praktiken und Techniken agiler Projekte und ihr iterativer Aufbau füllen die Lücke zwischen den pädagogisch-didaktischen Zielen und dem sich im Unterricht allmählich entwickelnden Kompetenzerwerb optimal. Die Selbstorganisation gelingt leichterWie erstellt man einen Plan? Wie werden Absprachen getroffen und festge -halten? Wie ist ein komplexes Vorhaben aufzubereiten, sodass man Schritt für Schritt zum Ziel kommt? In agilen Projekten unterstützen die Praktiken und Techniken als konkrete umsetzbare Handlungsschemata den Prozess, indem sie vorgeben, wann was gemacht werden muss: «Die Teams können gar nicht anders, als den vorgegebenen Planungs- und Kommunikationsprozessen zu folgen.» Die Schülerinnen und Schüler schätzen die Iterationen, da sie über -schaubare Zeitrahmen schaffen, die Problemkomplexität durch das Zerlegen in Teilziele auf ein bewältigbares Maß reduzieren und da der Einstieg mit zunächst einfachen Aufgaben für alle gut möglich ist. Erforderlich für das Gelingen ist das Vertrauen der Lehrkraft, die Schülerinnen und Schüler loslegen zu lassen, selbst wenn dabei zunächst auch nicht ideale Lösungsansätze verfolgt werden.Aufbau und Werte agiler Projekte unterstützen das LernenLernen setzt voraus, dass Handlungen mehrfach durchgeführt, dabei geübt und vor dem eigenen Erfahrungs- und Wissenshorizont reflektiert werden. Entspre -chend erlaubt das iterative Vorgehen in agilen Projekten, aus eigenen Fehlern und solchen der Teammitglieder zu lernen und daraus Konsequenzen zu ziehen. Das bezieht sich auf fachliche, aber auch auf soziale, methodische und organisa -Agile Methoden für alle 190torische Kompetenzen. Die Lehrkräfte berichten, dass ein tieferes Verständnis für fachliche Zusammenhänge erzeugt wurde, da die Schülerinnen und Schüler in jeder Iteration – und damit wesentlich häufiger als bisher – zwischen der Kun -den-, Entwickler-, Tester- und Nutzerperspektive wechselten. Wissenstransfer in den Projekten wird über die regelmäßige Kommunikation, z.B. über fachbe -zogene Themen, gefördert. Die Lehrkräfte unterstreichen, dass Lernprozesse in agilen Projekten besser unterstützt werden, da die Schülerinnen und Schüler hier mit einfachen Problemstellungen beginnen können und die Komplexität dann langsam entsprechend dem Kompetenzerwerb im Projekt zunehmen kann. Da auch die Reflexionen der Kooperation und des Arbeitsergebnisses am Ende jeder Iteration wiederholte Bestandteile des Projekts darstellen, werden Lern -prozesse bewusst und erfolgen zielgerichtet. Durch die regelmäßig sichtbaren Erfolge, die das Selbstbewusstsein stärk -ten, sowie eine hohe Identifizierung der Teams mit ihren Produkten waren die Schülerinnen und Schüler durchgehend motiviert. Agile Projekte fördern soziale KompetenzAls Vorbereitung für das Berufsleben ist das konstruktive gemeinsame Arbeiten im Team als «Soft Skill» eine wichtige Voraussetzung. Die vielfältigen kommu-nikationsfördernden und strukturierenden Praktiken agiler Projekte führten in den unterschiedlichsten Kursen dazu, dass die Schülerinnen und Schüler im Laufe der Projekte lernten, sich strukturiert, effektiv sowie zum passenden Zeit -punkt auszutauschen und dabei jedes Teammitglied miteinzubeziehen. Dieser Aspekt wurde von den Lehrkräften als sehr wichtig erachtet und deshalb oft durch eigene Adaptionen zusätzlich gestärkt.Lehrkräfte erhalten Freiraum Die Komplexität von Schulprojekten stellt auch für Lehrkräfte eine Herausfor-derung dar. In den untersuchten agilen Projekten wurde deutlich, dass das Pla-nen von agilem Projektunterricht besser gelingt, weil Projekte auch dann mit einem lauffähigen Produkt abgeschlossen werden können, wenn nicht alle Pläne umgesetzt werden. Die zur Verfügung stehenden Praktiken und Techniken und der Projektablauf erwiesen sich als sehr flexibel, sodass sie an den jeweiligen Kontext angepasst werden konnten.Da die Teams sich schnell selbst organisierten, änderte sich die Rolle der Lehrkräfte insofern, als nun weniger Betreuungsaufwand notwendig war. Die Lehrkräfte schätzen insbesondere die Zeit, die sie nun hatten, um die Lernpro -zesse der Schülerinnen und Schüler zu beobachten und Einzelne bei Problemen zu beraten.Agile Methoden in Theorie und Praxis191Das wirkte sich auch auf die Qualität und Quantität des Lehrerfeedbacks und der Bewertung aus. Rückmeldungen waren aufgrund der Transparenz und der Zeit, die die Lehrkräfte für die Beobachtung hatten, nun wesentlich fundierter. In die Bewertung konnten hierdurch nicht nur das Produkt und der Beitrag des Einzelnen, sondern auch die Entwicklung unterschiedlicher Kompetenzen ein-bezogen werden. Heterogenität wird zur BereicherungIm Hinblick auf Schule wird in den letzten Jahren verstärkt diskutiert, wie man der Heterogenität der Schülerschaft gerecht werden kann. Heterogenität kann eine hervorragende Chance darstellen, Lernprozesse im Unterricht zu berei -chern. Je nach Unterrichtsgegenstand stellt sie aber auch eine große Herausfor -derung dar. In der Informatik ist die Heterogenität besonders groß. Hier haben einige Schülerinnen und Schüler teils verblüffende Fertigkeiten, während an -dere nur langsam einen Zugang finden. In den untersuchten Projekten stellte sich heraus, dass die agilen Methoden sich auch hervorragend dazu eignen, mit Heterogenität konstruktiv und produktiv umzugehen. Den Teams gelang es mit Hilfe der Praktiken und Techniken, die unterschiedlichen Vorerfahrungen, Vor -stellungen und Persönlichkeiten der einzelnen Teammitglieder zugunsten eines gemeinsamen Verständnisses durch fokussierte Diskussionen und Aushand -lungsprozesse zu integrieren. Durch die häufigen Meetings, das Project-Board und die Prototypen werden Probleme, die einer effektiven Kooperation im Wege stehen, früh für alle (Team und Lehrkraft) sichtbar. Unkooperatives Verhalten wurde für einzelne Teammitglieder wesentlich unangenehmer. Probleme konn -ten regelmäßig, offen und ehrlich in den Reviews (bspw. fehlende Beiträge Ein-zelner) und Retrospektiven (bspw. soziales Verhalten) angesprochen werden und Lösungsideen konnten in der folgenden Iteration erprobt werden. Positives Feed back zur individuellen Entwicklung stärkte das Verständnis füreinander und damit den Teamgeist. Die Lehrkräfte konnten die Schülerinnen und Schüler falls nötig unterstützen und für Einzelne individuelle Ziele und Kriterien ergän -zen, die zur Reflexion der Leistungsentwicklung in jeder Iteration herangezogen werden konnten.Agil lossprinten In der Gesamtschau wird deutlich, dass es den Schülerinnen und Schülern in agilen Projekten fast immer gelingt, ihre Abhängigkeit von der Lehrkraft und einzelnen Schülerinnen und Schülern zu überwinden und echte Teamfähigkei-ten zu entwickeln. Sie sind dank des Vertrauens ihrer Lehrkräfte und unterstützt Agile Methoden für alle 192durch agile Methoden einfach «losgesprintet», haben angefangen zu arbeiten und Erstaunliches geschafft. Lehrkräfte, die agile Projekte über fünf Monate oder länger durchführten, beobachteten einen deutlichen individuellen Zuwachs an unterschiedlichsten Kompetenzen, den sie bei nahezu allen Schülerinnen und Schülern als deutlich höher und nachhaltiger bewerten als in früheren, vergleichbaren traditionellen Projekten. «Man muss ihnen nur vertrauen», re -sümierte ein Lehrer, «es ist erstaunlich, wie gut das funktioniert.»Agile Schule über den Informatikunterricht hinaus 1936.2 Agile Schule über den Informatikunterricht hinaus Zunehmend werden agile Methoden auch außerhalb des IT-Bereichs zur Organi -sation von Aufgaben und Arbeitsabläufen herangezogen. Es gibt Vereine die sich agil organisieren, selbst Familien nutzen agile Praktiken wie das Project-Board für die Organisation des Alltags, und auch immer mehr Schulen entdecken agile Projektarbeit als hilfreich in unterschiedlichen Fächern. Für Schülerinnen und Schüler sind agile Projekte ideale Wegbereiter, um Fähigkeiten und Fertigkeiten zu erlernen, die beim Berufseinstieg geschätzt werden. In den von uns begleite -ten Unterrichtsprojekten konnte beobachtet werden, wie die Schülerinnen und Schüler ganz von selbst agile Vorgehensweisen aus dem Informatikunterricht gewinnbringend auf andere Fächer übertragen. Beispielsweise tun sich Schüle -rinnen und Schüler in der Qualifikationsphase auch ein Jahr nach ihrem agilen Projekt hervor, indem sie ihre Teams in unterschiedlichsten Projektseminaren durch agile Methoden unterstützen und voranbringen – unabhängig von ihren fachlichen Fähigkeiten. Ein Mitschüler, für den agiles Vorgehen neu war, stellte anerkennend fest: «Ihr habt einen echten Vorteil, ihr habt das ja gelernt!» Auch solche gemischten Teams finden in der Regel ihr selbst entwickeltes, an ihren Kontext angepasstes agiles Vorgehen. Agile Projektarbeit verändert die Arbeits -weise nachhaltig und über Fächergrenzen hinweg. Die Vielfältigkeit der Lern -gelegenheiten und Ziele agiler Vorgehensweisen zeigt sich an der je nach Fach und Thema geprägten Sicht von Lehrkräften darauf, was es in ihrem Unterricht letztlich bedeutet, agil vorzugehen: «Im Kern geht es bei agilem Vorgehen um Innovationen», «In agilen Projekten geht es im Grunde um Lernen, Menschen und Veränderung», «Agil ist eine Einstellung, eine Kultur», «Agil ist im Wesent-lichen eine kreative Art des Problemlösens und der Zusammenarbeit» oder «Agil sein bedeutet, sich mit Feedback und Korrekturen stetig zu verbessern.» Vier Beispiele, die zeigen, wie der Transfer agiler Methoden in andere Schulfächer gelingen kann, wollen wir als Ausblick ans Ende unseres Buches setzen – denn da, wo agile Methoden eingesetzt wurden, sind Lehrkräfte ebenso wie Schülerin -nen und Schüler jeden Alters und jeder Schulart von den agilen Ideen begeistert. Agile Methoden für alle 194Agile GrundschuleIn verschiedenen Grundschulen wird der agile Ansatz bereits verwendet, um pä -dagogische Ziele, bspw. des selbstorganisierten Lernens, zu unterstützen. Durch den geschickten Einsatz agiler Praktiken und Techniken können Kinder hier nicht nur lernen, sich die Arbeit selbst einzuteilen, wie man es bspw. vom Wo -chenplan kennt. Ebenso konkretisieren, visualisieren und priorisieren sie ihre Ziele und Aufgaben am Project-Board oder führen tägliche Stand-up-Meetings durch. Einfache Fragen unterstützen ihre Re flexions- und Planungsprozesse: «Was haben wir erreicht?», «Was wollen wir als Nächstes erreichen?» und «Was müssen wir dazu noch überwinden?» Die Formulierung zeigt den Stellenwert der Kooperation: «Macht es gemeinsam!» als Wert bedeutet, dass die Kinder mehr lernen, als nur für sich selbst zu sorgen. Die Entscheidungs- und Hand -lungsmöglichkeiten und Freiräume der Kinder sollten mit Hilfsmitteln für de -ren Umsetzung (den agilen Praktiken) einhergehen. Visualisierung, Nachdenken und produktives Tun bieten hervorragende und individuell gestaltbare Rahmen für die Grundschule und werden so zu Werkzeugen des Denkens, die beim Prob -lemlösen und gemeinsamen Arbeiten helfen, indem hierdurch Kommunikation effektiv verläuft und Fortschritt nachvollziehbar wird. Sie erfahren Handlungs -muster, die sich positiv auf das Lernen im Team auswirken und ein wichtiger Beitrag zum «Lernen Lernen» sind. Eine Methode zur Umsetzung agiler Ideen in der Grundschule, die aber auch in anderen Kontexten eingesetzt werden kann, ist das denkbar einfache «Themen-Café», welches sich an die Praktik des «Lean Coffee» anlehnt und mit Grundschülern erprobt wurde: Die Kinder erhalten hierbei jeweils zwei Klebezet -tel oder Karteikarten und notieren hierauf Themen, die ihnen wichtig sind. Von den gesammelten Themen bestimmen sie dann die für alle interessantesten, indem jedes Kind mit zwei Stickern die persönlich spannendsten auswählt. Da-nach werden die Themen der Priorität nach auf einer Art Project-Board sortiert und wandern über die Spalte «In Diskussion» nach «Diskutiert», solange die Zeit reicht.Der Unterricht erhält mit dem «Themen-Café» eine simple und zugleich zweckmäßige Struktur zur Selbstorganisation: Die Kinder schaffen ihre eigene aktuell für sie relevante Agenda, visualisieren und priorisieren sie und sprechen zielgerichtet und produktiv über die Themen. Es benötigt keine Rolle für die Gesprächsleitung oder Moderation, vielmehr engagiert sich jedes Kind für ein Gesprächs- und Arbeitsklima, das auf Agilen Werten wie Respekt, Offenheit, Fokussierung und Feedback basiert. Agile Schule über den Informatikunterricht hinaus 195Das «Themen-Café» kann auch in anderen Unterrichtssituationen gewinn-bringend eingesetzt werden, wo eine Einbeziehung aller Schülerinnen und Schü-ler und die Bearbeitung priorisierter Themen sinnvoll ist. Selbst Meetings im Kollegenkreis können so strukturiert und eine Agenda der wichtigen Themen schnell zusammengestellt werden.Agile Aufgabenbearbeitung in der Mathematik Im Mathematikunterricht gehört Gruppenarbeit nicht zu den naheliegenden Unterrichtsmethoden, aber gerade dann, wenn Aufgaben komplexer oder of -fener werden, können Schülerinnen und Schüler bessere Ergebnisse erzielen, wenn sie regelmäßig gemeinsam Aufgaben besprechen, Lösungsansätze disku-tieren und sich gegenseitig Dinge erklären. Um das anzuregen und ihnen eine simple, aber strukturierende Herangehensweise für kooperatives Lernen in der Mathematik an die Hand zu geben, haben sich agile Praktiken als sehr hilfreich erwiesen.In der Oberstufe hat sich folgendes Vorgehen zur gemeinsamen Lösung ei-ner komplexen Aufgabe bewährt, welches aber grundsätzlich auch in anderen Schulstufen denkbar wäre: Damit nicht immer die Gleichen zusammenarbeiten, werden die Teams, die jeweils aus sechs bis acht Schülerinnen und Schülern bestehen, zufällig gebildet. Im Folgenden ist das ↑ Timeboxing für die ersten Schritte sehr kurz. Nachdem alle zunächst die Aufgabe gelesen haben, benennen die Teams in einem Planungs-Meeting die zu lösenden Teilprobleme und notie -ren sie auf Klebezetteln. Anschließend erklärt sich jedes Teammitglied für ein Teilproblem zuständig, wobei Doppelbesetzungen möglich sind, und skizziert am eigenen Arbeitsplatz eine mögliche Lösungsstrategie. Im Stand-up-Mee -ting werden nun reihum die gefundenen Strategien vorgestellt, wobei deutlich wird, dass es für ein Teilproblem durchaus unterschiedliche Vorgehensweisen geben kann. Fehlende Lösungsansätze ergänzt das Team ggf. noch. Nun legen die Teams die Teilprobleme endgültig fest und entwickeln dann arbeitsteilig in Paaren einen relativ detaillierten Lösungsweg, wobei analog zum Pair-Program -ming der Driver laut denkt und der Navigator als Diskussionspartner fungiert und sich bei Fragen, Schwierigkeiten oder Fehlern einschaltet. Im nächsten Stand-up-Meeting präsentieren die Paare ihre Lösungswege und sprechen of -fene Fragen, Schwierigkeiten und ggf. auch Irrwege an. In der nun folgenden längeren Arbeitsphase am Platz befassen sich die Schülerinnen und Schüler individuell mit dem konkreten Lösen ihrer Teilprobleme. Schließlich werden die Teillösungen im Team zur Gesamtlösung zusammengefügt. Rückblickend sprechen die Teams anschließend über zu beachtende Aspekte und diskutie -Agile Methoden für alle 196ren, erfahrungsgemäß durchaus heftig, die Vor- und Nachteile verschiedener Strategien. Die Erfahrung zeigt, dass der Zeitbedarf für dieses Vorgehen nicht wesentlich länger als im fragend-entwickelnden Unterricht sein muss. Allerdings erleben die Schülerinnen und Schüler hierbei, wie Lösungen komplexer Aufgaben ge -meinsam entwickelt werden können und dass man dabei auch ohne ein «Ma -thegenie» im Team gut zurechtkommt. Viele arbeiten jetzt gern, zielgerichtet und immer wieder in wechselnden Teams beim Lösen von Hausaufgaben, beim Vor- oder Nachbereiten des Unterrichts und insbesondere auch in der Vorbe -reitung für schriftliche Prüfungen zusammen. Einzelkämpfer gibt es natürlich weiterhin, viele davon sind aber auf Dauer deutlich weniger erfolgreich als die Teamarbeiter.Agile Methoden in einem Physik-Projektseminar der Oberstufe Ein Ziel der Bayerischen Projektseminare in der Oberstufe ist die Durchführung eines umfangreichen Projekts. Die Schülerinnen und Schüler haben ein Jahr Zeit, sich ausgehend von einer Idee eigene Ziele zu setzen und diese selbstorga-nisiert umzusetzen. Für die meist 15 bis 18 Schülerinnen und Schüler ist es eine Herausforderung, einen so langen Zeitrahmen gemeinsam zu gestalten. Agile Werte wie eine Feedbackkultur, Offenheit und Transparenz, der Mut, Fehler zu machen, und Fokussierung sind hervorragende übergreifende Ziele, die im Rahmen eines solchen selbstorganisierten Prozesses verfolgt und dann auch in einem Zertifikat rückgemeldet werden können.Teams entwickeln basierend auf Agilen Werten innovative ProdukteZiel des Physik-Projektseminars «Erfinderwerkstatt» war es, in Teams eine Idee für ein innovatives technisches Produkt zu erarbeiten und dieses Produkt auch auf einer Prototypebene umzusetzen. In einem iterativen und inkrementellen Prozess entwickelten die Schülerinnen und Schüler zuerst Ideen und Hypothe -sen, wie eine Lösung aussehen könnte, bauten einen zunächst einfachen Pro -totyp und erprobten ihn. Die Testdaten wurden analysiert und lieferten einen Erkenntnisgewinn, der dann zu einer Verbesserung des Lösungsansatzes führte.  Ein Beispiel eines dreiköpfigen Teams aus dem Projektseminar Erfinder -werkstatt veranschaulicht den Ablauf:«Intelligente Straßenschilder» haben den Zweck, nur im Fall einer Gefahr In -formationen anzuzeigen. Beispielsweise soll ein Schild «Wildwechsel» nur dann leuchten, wenn wirklich Lebewesen auf eine Landstraße laufen. Agile Schule über den Informatikunterricht hinaus 197Mit einem ersten, sehr einfachen Prototyp, der eine über Sensoren schalt -bare Farbdiode hatte, wurde durch das Team die generelle Machbarkeit geklärt. In einem zweiten Schritt wurde nach einer Möglichkeit gesucht, die Anzeige auf mehrere einzeln schaltbare Farbdioden zu erweitern. Über diesen Prototyp konnten auch Kosten-/Aufwandsüberlegungen konkretisiert werden, sodass am Ende eine Anzeige aus 256 Farbdioden entstand. Parallel dazu wurden die Reichweite der Sensorik erhöht sowie Haltevorrichtungen für die Anzeige und die Sensoren gebaut. So entstand im letzten Schritt ein Prototyp, bei dem ein Mensch, der sich in der Gefahrenzone befindet, das Warnsignal auf dem Schild auslöst.Agile Praktiken in der ErfinderwerkstattDas ↑ agile Spiel «Kekse backen» bietet für Projekte, in denen Innovationen ent -stehen sollen, einen optimalen Einstieg, da die Schülerinnen und Schüler hierbei den iterativen Prozess, insbesondere die Reflexionsphasen zur Produktqualität, erfahren, ebenso wie die Weiterentwicklung eines Produkts bei unvollständigen, sich ändernden Anforderungen. Im Projekt pflegte dann jedes Team ein selbst-gestaltetes ↑ Project-Board, dessen Zustand regelmäßig festgehalten wurde und so auch einen wichtigen Teil der Projektdokumentation darstellte.Der Unterricht fand vierzehntägig statt und hatte ausgerichtet auf eine ver-tiefte Arbeitsphase den zeitlichen Umfang von vier Schulstunden. Vor der Ar -beitsphase fand mit Unterstützung einer Checkliste jeweils eine Planung statt. Abgeschlossen wurde jede Arbeitsphase mit einer ↑ Reflexion. Auch hier arbei -teten die Schülerinnen und Schüler mit Checklisten sowohl für das Review als auch für die Retrospektive. Hierbei wurde nicht nur kommuniziert, sondern die Ergebnisse wurden zugleich in einfacher, aber passender Weise dokumentiert.Checkliste zu Beginn des Unterrichts• Wie ist der aktuelle Stand? In welcher Phase des Projekts befinden wir uns? • Wer hat welche Aufgaben seit dem letzten Treffen zu Hause erledigt? • Was ist die Zielsetzung für das heutige Treffen? Checkliste am Ende des Unterrichts • Was haben wir während der Unterrichtszeit gemacht/geschafft? Wie effizient waren wir dabei?• [Optional] Welche speziellen Ereignisse (Probleme; erreichte Meilensteine; Verbesserungsansätze) gab es?• Ist das Board auf dem aktuellen Stand gebracht? Falls nein, wer aktualisiert?• [Optional] Gibt es Wünsche und Fragen an die Seminarleiter?Agile Methoden für alle 198Das Protokoll erforderte wie jede ↑ Dokumentation einen Zusatzaufwand. Dieser war jedoch gering und die Dokumentation half den Schülerinnen und Schülern, sich zu fokussieren und den am Ende des Seminars erwarteten Ab -schlussbericht zu erstellen. Der Lehrkraft gab sie einen guten Überblick über die aktuellen individuellen Aktivitäten und ermöglichte so einen guten Einstieg in die durchzuführenden persönlichen Feedbackgespräche. Eine für alle geltende Iterationsdauer ist hinderlich in Projekten, in denen die Themen der einzelnen Teams sehr unterschiedlich sind, wie es hier der Fall war. Sie ist auch nicht nötig, solange die Teams ohnehin von sich aus immer wieder konkrete, erprobbare Prototypen anstreben. In derart langen Projekten helfen Prototypen besonders gut, die Motivation zu erhalten. Das Feedback der anderen während einer Vorstellung im Plenum, die die Lehrkraft anregte, hatte eine sehr belebende Wirkung und ist ideal, um müde Phasen zu überwinden: Alle Beteiligten hatten dann wieder Lust, das nächste Problem anzugehen. Es zeigt sich, dass agile Methoden durch ihre Unterstützung eigenverant -wortlichen, selbstorganisierten Arbeitens bei verschiedensten Projekten ge -winnbringend sind, nicht nur bei Projekten in der Softwareentwicklung. Der hier skizzierte Ablauf eignet sich nicht nur für innovative Produkte aus der Tech -nik, sondern kann auch für solche bspw. aus den Bereichen Musik oder Film verwendet werden. Gemäß agilen Denkweisen und Wertvorstellungen darf die Vorgehensweise dabei nicht als starre Vorgabe gesehen werden. Vielmehr wählt die Lehrkraft nur die Praktiken und Techniken aus, die im konkreten Projekt einen Mehrwert versprechen, und sollte dabei auch keine Scheu haben, diese zu adaptieren und Neues zu ergänzen.Agile Schule als UnterrichtsprinzipErste positive Erfahrungen existieren auch mit der Verwendung der Agilen Schule als durchgängiges Unterrichtsprinzip. In der Softwareentwicklung legt der Kunde fest, was gemacht werden soll. Wie und auf welchem Weg ein agiles Entwicklerteam dieses Ziel erreicht, bestimmt es dagegen selbst. So ähnlich ist es auch in agilen Klassenzimmern, in denen der gesamte Unterricht Agilen Wer -ten folgt. Die Inhalte und Ziele des Unterrichts sind im Curriculum festgelegt und entsprechend durch die Lehrkraft vorgegeben, die auch geeignetes Mate -rial zur Verfügung stellt. Die Art der jeweiligen Ergebnisse (Produkte) legt die Lehrkraft entweder für alle fest oder handelt sie mit den Teams aus. Zudem de -finiert sie entsprechende Qualitätskriterien, anhand derer die Schülerinnen und Schüler ihre Arbeitsergebnisse überprüfen können. In den Iterationen erledigen die Teams Theoriestudien und praktische Arbeiten und entwickeln in kleinen Agile Schule über den Informatikunterricht hinaus 199Schritten und in der Regel im Wechsel Präsentationen, Berichte, Kurzfilme oder andere Produkte. Typische Teamgrößen sind vier Schülerinnen und Schüler. Sobald die Lehrkraft einen guten Überblick über die individuellen Stärken und Schwächen hat, setzt sie die Teams abwechselnd so neu zusammen, dass in je -dem Team verschiedene Stärken vorhanden sind. Damit das möglich ist, muss die Lehrkraft auch die Reihenfolge festlegen, in der bestimmte übergeordnete Themen bearbeitet werden. Die Dauer einer Iteration wird so festgelegt, dass die Teams in der gegebenen Zeit ein (Unter-)Thema bearbeiten und dort konkrete Ergebnisse entwickeln können. Die Planung und Priorisierung wird mit einem Project-Board visualisiert, das um Bereiche für Probleme sowie für Arbeiten, die besonders viel Spaß gemacht haben, erweitert werden kann. Jede Stunde beginnt mit einem Stand-up-Meeting, danach wird besprochen, was in der Stunde bear -beitet werden soll, und das Team legt los. Wann die Schülerinnen und Schüler allein, paarweise oder im Team arbeiten, legen sie selbst fest und sie priorisieren auch ihre konkreten Tätigkeiten selbst. Lehrkräfte berichten, dass die Schülerinnen und Schüler das selbstbestimm -te Arbeiten im eigenen Tempo schätzen, sich gern gegenseitig unterstützen und je nach Teamzusammensetzung auch lernen, mit Konflikten umzugehen. An -fangs erscheint das Arbeiten oft etwas chaotisch, aber langfristig ist es intensi-ver, nachhaltiger und macht beobachtbar mehr Spaß. Lehrkräfte berichten, dass agil lernende Klassen schneller sind und in kompetenzorientierten Prüfungen im Durchschnitt besser abschneiden. Erste Vergleiche des Bearbeitungstempos lassen vermuten, dass im lehrerzentrierten Unterricht die Schnellen mitunter erheblich ausgebremst werden, während die Schwachen vor allem unter zeitli-chem Druck stehen.Agile Schule lohnt sich. Übereinstimmend berichten Lehrkräfte, dass sich agiler Unterricht für jedes Fach, jedes Alter, alle Schülergruppen und jeden Schultyp eignet. Wann sprinten Sie mit Ihren Schülerinnen und Schülern los?Agile Methoden für alle 200GlossarGlossar202Agiles ManifestDas Agile Manifest stellt den kleinsten ge-meinsamen Nenner agiler Methoden dar und beschreibt anhand von vier Leitsätzen und zwölf Prinzipien die grundlegenden Werte und Ziele agiler Softwareentwick -lung. Es entstand 2001 bei einem Treffen von erfahrenen Praktikern aus dem Bereich der Softwareentwicklung, deren gemein -sames Anliegen es war, bessere Wege zur Entwicklung von Software zu erschließen.Agile SpieleAgile Spiele dienen dem Einstieg in agiles Denken und Handeln und der Vermittlung damit verbundener Werte, Prinzipien und Methoden (Kapitel 4.8).Agile TeamsTeams sind der Dreh- und Angelpunkt agi-len Arbeitens. Agile Teams organisieren sich selbst und orientieren sich dabei am Nutzen für den Kunden sowie an gemein -sam verabredeten Regeln, die im Einklang mit Agilen Werten stehen. Die Teammitglie -der begegnen sich auf Augenhöhe, kommu -nizieren offen miteinander und reflektieren ihr Tun regelmäßig. Agile Teams bestehen selten aus mehr als zehn Personen, da -mit die direkte Kommunikation gelingt. Da häufig Spezialisten aus unterschiedlichen Bereichen zusammenarbeiten, ist der Wis -senstransfer innerhalb des Teams wichtig. Er wird durch verschiedene agile Praktiken unterstützt, damit das Projektziel beim Aus- oder Wegfall einzelner Personen mög -lichst nicht gefährdet wird. AkzeptanzkriterienMit den Akzeptanzkriterien beschreibt der Kunde/Product-Owner, welche fachlichen Anforderungen eine User-Story bis zum Review erfüllen muss. Dies ist für das Ent-wicklungsteam sowohl zum Verständnis der User-Story als auch zum Erstellen von Tests hilfreich. Die Erfüllung der Akzep -tanzkriterien ist eine echte Untermenge der Definition of Done.AufwandsabschätzungZeitabschätzungen unterstützen den Pla-nungsprozess. Häufig erfolgt agiles Schät -zen nicht durch Bestimmung des absolu -ten Aufwands, sondern relativ zu einem Erfahrungswert. Weit verbreitet ist dabei die Vergabe von T-Shirt-Größen (S, M, L …) oder Story-Points. Eine handlungsori -entierte Technik, durch die das gesamte Team sich an der Abschätzung beteiligt, ist das Planning-Poker. Zur Visualisierung des Aufwands können Burn-Down-Charts verwendet werden (Kapitel 5.7).BacklogDas Backlog, auch Product-Backlog, ist eine Liste von Aufgaben, die in einem Pro-jekt zu erledigen sind, beispielsweise die User-Storys zur Umsetzung der Anforde -rungen an eine Software. Bei der Samm -lung und Priorisierung der Aufgaben ist der Kunde maßgeblich beteiligt. Ein Back -log hat jedoch keinen verbindlichen Ver -tragscharakter. Inhalt und Priorisierung der einzelnen Aufgaben können während des Projekts nach jeder Iteration einver -nehmlich geändert werden – ganz nach dem Prinzip, wonach das Reagieren auf Veränderungen einen höheren Stellenwert hat als das Festhalten an ursprünglichen (vertraglichen) Abmachungen.Das Sprint-Backlog ist ein Begriff der Scrum-Vorgehensweise und umfasst dieje -nigen User-Storys des (Product-)Backlogs, die in der anstehenden Iteration (Sprint) erledigt werden sollen. Ein Sprint-Backlog ist, anders als das Product-Backlog, nicht veränderbar, weil mit diesem die Planungs -phase beendet wird und ab dann der Fokus Glossar 203auf dem Umsetzen der ausgewählten Auf-gaben und dem Erreichen der festgelegten Ziele liegt.Burn-Down-ChartEin Burn-Down-Chart ist eine grafische Darstellung des Projektverlaufs. Es visua -lisiert den Zusammenhang zwischen dem noch zu leistenden Aufwand (horizontale Achse) und der verbleibenden Zeit (verti -kale Achse). Zu Beginn eines Zeitraums – entweder die Dauer einer Iteration oder die gesamte Projektlaufzeit – wird der Aufwand über die User-Storys geschätzt. Verbindet man diesen Startpunkt mit dem Aufwand 0 zum Ende des Zeitraums, ergibt sich die Ideal -linie. Liegt im Verlauf die reale Kurve zu einem gegebenen Zeitpunkt oberhalb der Ideallinie, so ist das Team im Verzug. Liegt die reale Kurve dagegen unterhalb der  Ideallinie, so liegt das Team vor der geplan -ten Zeit. Sind einzelne Aufgaben erledigt, reduziert sich der Restaufwand. Die Aktualisierung des Restaufwands im Burn-Down-Chart erfolgt entweder toolgestützt und auto -matisch, oder sie wird in regelmäßigen Abständen vom Team erledigt. Das Burn-Down-Chart schafft einerseits den Anreiz, fokussiert einzelne User-Storys fertigzu -stellen, und sorgt andererseits für Trans -parenz, um gegebenenfalls bei Abwei -chungen rechtzeitig reagieren zu können (Kapitel 5.7).CommitmentSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23Definition of DoneDie Definition of Done ist eine vom Team festgelegte Kriterienliste, anhand derer entschieden wird, wann eine Aufgabe tat -sächlich erledigt ist. Die Kriterien legen somit die Qualität des Produkts fest. Sie können sich von Projekt zu Projekt unter -scheiden. Die Definition of Done umfasst beispielsweise die Prüfung der in den User-Storys festgelegten Anforderungen, die Durchführung von Tests oder das Er -stellen einer Dokumentation. Nur Produk -te, die der Definition of Done entsprechen, werden am Ende einer Iteration dem Kun-den vorgestellt.DokumentationDa innerhalb eines Softwareprojekts ver -schiedene Beteiligte zusammenarbeiten, ist es wichtig, zentrale Informationen nicht nur direkt zu kommunizieren, son -dern auch transparent zu dokumentieren. Typische Bestandteile einer Dokumenta -tion sind Prozessabsprachen, Texte oder Diagramme, die das Verständnis für den Aufbau und die Funktionsweise der Soft -ware erhöhen, sowie Vereinbarungen der Qualitätsstandards. In agilen Projekten ist die Dokumentation zwar wichtig, steht aber nicht im Mittelpunkt: Funktionierende Software wird als wichtiger angesehen als umfassende Dokumentation (Kapitel 5.5).DriverSiehe Pair-ProgrammingEinfachheitSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23EpicEin Epic ist eine eher grob skizzierte um -fangreiche Anforderung, die wie eine User-Story aus Anwendersicht formuliert ist. In der strategischen Planungsphase einiger professioneller Projekte entwerfen der Kunde und das Entwicklerteam von der Produktversion ausgehend gemein -Glossar204sam Epics. Durch Detaillieren und Aufteilen entstehen aus den Epics im Weiteren die User-Storys.Feedback und BewertungDurch Feedback und Bewertung erfolgt eine auf den individuellen und kollabora -tiven Projektbeitrag bezogene Rückmel -dung, die das Geleistete wertschätzt und dem einzelnen Teammitglied Anlass und Anhaltspunkte bietet, verschiedene Leis -tungsaspekte und die eigene Arbeitsweise zu reflektieren. In agilen Projekten arbei -ten Teams selbstorganisiert, weshalb die Teammitglieder sich gegenseitig auch das fundierteste Feedback geben können (Ka-pitel 5.4).FokussierungSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23 IterationEine Iteration ist eine definierte, sich wie-derholende Zeitspanne, in der das Team den Prototyp (weiter)entwickelt. Jede Ite -ration umfasst eine Planung, in der das Iterationsziel festgelegt wird, eine Ar -beitsphase sowie eine Reflexion. Damit das Team fokussiert arbeiten kann, dürfen während der Iteration keine Ziele geän -dert werden. Iterationen folgen im agilen Prozess direkt aufeinander und sind in der Regel alle gleich lang.KISS-Prinzip (Keep It Small and Simple)Gemäß der Leitfrage «Kann ich es sinnvoll einfacher gestalten?» soll nur das imple -mentiert werden, was für die unmittelba -re Zielsetzung notwendig ist. Es sollten also keine eventuell zukünftig hinzukom -menden Bedingungen und Anforderungen berücksichtigt werden. Gibt es mehrere Lösungen, so ist die einfachere zu bevorzu -gen, denn sie ist leichter nachzuvollziehen. Dies erleichtert später die Fehlersuche oder Erweiterungen. Auch zur Projektor -ganisation werden nur diejenigen Techni -ken und Praktiken herangezogen, die einen Mehrwert bieten.KommunikationSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23 Lean CoffeeDas Lean Coffee ist eine strukturgebende Methode für Veranstaltungen mit dem Ziel eines einfach organisierten kollegialen Wissensaustauschs. Teilnehmende brin -gen Themen ein, die zunächst auf Mode -rationskarten gesammelt und an einem Project-Board in der linken Spalte sichtbar angebracht werden. Anschließend erfolgt eine Priorisierung, indem jeder Teilnehmer zwei Punkte vergibt. Dann werden die Kar -ten entsprechend in absteigender Reihen-folge der vergebenen Punkte sortiert. Die Diskussion der Themen folgt nun dieser Reihenfolge und wird visuell unterstützt, indem das jeweils aktuelle Thema in die Spalte «In Progress» und abschließend in die Spalte «Done» verschoben wird.Mock-upEin Mock-up (engl. für Simulation, Modell) ist ein einfaches (strukturelles), nicht funk -tionsfähiges Anschauungsmodell. Es zeigt beispielsweise das Design der grafischen Benutzeroberfläche mit Menüs und Icons. Mithilfe eines oder mehrerer Mock-ups können potenzielle Nutzer oder Kunden beispielsweise hinsichtlich des Designs (Farben, Layouts, Schriftarten) und der Benutzerfreundlichkeit (Usability) befragt werden.Glossar 205Modeling-StoryDie Modeling-Story wurde von Lehrkräf -ten für die Agile Schule eingeführt und enthält einen Modellierungsauftrag. Mo -deling-Storys sorgen für Transparenz von Modellierungstätigkeiten. Bei der Iterati -onsplanung werden sie wie User-Storys priorisiert und am Project-Board visua -lisiert. Sie können von den Schülerinnen und Schülern eines Teams geschrieben, aber auch von der Lehrkraft vorgegeben werden, um eine Reflexion über Strukturen anzustoßen (Kapitel 4.1).MutSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23NavigatorPair-ProgrammingPair-ProgrammingPair-Programming (engl. für Paarprogram-mierung) ist eine Arbeitstechnik, bei der zwei Teammitglieder in verschiedenen Rollen gemeinsam programmieren. Der Entwickler, der die Tastatur und die Maus kontrolliert, ist der Driver. Er erstellt den Programmcode, kümmert sich um die De -tails der Implementierung und erklärt, was er tut. Sein Partner übernimmt die Rolle des Navigators, der das gesamte Projekt sowie die getroffenen Absprachen etwa zum Programmierstil im Blick behält. Er hinterfragt die Aktivität des Drivers und spricht funktionale Unklarheiten, eventuel -le Fehler oder einfachere Umsetzungsmög -lichkeiten an. Die Rollen werden regelmä -ßig getauscht und auch die Paare sollten idealerweise ab und an neu zusammenge-setzt werden. Durch dieses Vorgehen soll die Qualität des Quelltextes gesteigert und das Wissen im Team verteilt werden (Ka -pitel 4.6).Planning-PokerPlanning-Poker ist eine spielerische Tech-nik zur Abschätzung des Aufwands einer Aufgabe (User-Story, Task), an der sich das gesamte Team aktiv beteiligt. Benutzt wer -den spezielle Spielkarten mit unterschied -lichen (Zeit-)Werten (Kapitel 5.7).Product-BacklogBacklogProduct-OwnerRollenProject-BoardEin Project-Board (auch Taskboard ge -nannt) visualisiert die Projektziele, den Entwicklungsprozess sowie den aktuellen Projektstand und dient als Kommunika -tions- und Wissensschnittstelle, an der die Stand-up-Meetings stattfinden. Am Project-Board sind die User-Storys in der linken Spalte der Priorität nach von oben nach unten angebracht. Die zugehörigen Tasks werden während einer Iteration ent-sprechend ihrem Bearbeitungszustand in die Spalten «In Progress» und «Done» ver -schoben (Kapitel 4.3).PrototypPrototyping PrototypingPrototyping ist ein methodisches Vor -gehen, bei dem früh und meist in kurzen Abständen Zwischenergebnisse (Prototy -pen) erzeugt werden. Ein Prototyp ist ein getestetes und lauffähiges Produkt, das nicht vollumfänglich sein muss. Mit inkre-mentell wachsenden Teilfunktionalitäten, die der Kunde erproben und nutzen kann, entsteht so schrittweise ein Endprodukt. In diesem Prozess erhält das Entwickler -team früh und häufig wertvolles Feedback Glossar206des Kunden und kann auf notwendige oder sinnvolle Änderungen reagieren. Zudem bleiben die Änderungen so klein und über -schaubar (Kapitel 4.7).RefactoringUnter Refactoring versteht man das Über -arbeiten des bisherigen Arbeitsstandes des Quelltextes mit dem Ziel, diesen bes -ser verständlich und leichter erweiterbar zu machen, ohne dass sich seine Funk -tion nach außen verändert. Nach dem KISS-Prinzip wird der einfachste Entwurf für die aktuelle Iteration gewählt und die Struktur des Quelltextes später regelmä -ßig überarbeitet. Das Refactoring findet in einer Iteration immer dann statt, wenn neu implementierte Tasks getestet worden sind und die Software lauffähig ist. Als wichti -ge Voraussetzung für das Gelingen eines Refactorings gilt eine gute Testabdeckung. So kann auf Änderungen während des Ent -wicklungsprozesses reagiert werden, ohne vorab aufwendig Geplantes zu verwerfen (Kapitel 5.6). RepositoryDigitale Werkzeuge können kollaboratives Arbeiten unterstützen, indem sie das zeit-gleiche Editieren, das Zusammenführen verschiedener Bestandteile und eine Ver -sionskontrolle ermöglichen. Die automa -tische Versionierung macht den Entste -hungsverlauf überblickbar und ermöglicht, eine Datei auf eine ältere Version zurück -zusetzen (Rollback). Das automatische Zusammenführen (engl. merge) von Quell -texten mit einer automatischen Konflikter -kennung ist eine Arbeitserleichterung und reduziert die Fehlerhäufigkeit (Kapitel 5.8).RespektSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23RetrospektiveDie Retrospektive ist ein Reflexionstreffen der Projektbeteiligten am Ende einer Itera -tion. Das Entwicklerteam hinterfragt hier -bei Stärken und Schwächen seiner bishe -rigen Arbeitsweise. Ziel ist es, konstruktiv und zukunftsgerichtet Verbesserungsmög -lichkeiten zu erkennen, Missstände zu be-seitigen und Erfolge zu feiern. Die Organi -sation einer Retrospektive wird durch das Gliedern in Phasen (Rückblick, Auswahl von Themen, Gewinnen subjektiver und objektiver Einsichten sowie Beschließen von Maßnahmen) und die Visualisierung der Ergebnisse der Phasen unterstützt (Kapitel 5.1).ReviewIm Review zeigt das Team dem Kunden die umgesetzten User-Storys der letzten Ite -ration und das Erreichte wird diskutiert. Positives Feedback des Kunden ist moti -vierend für das Entwicklerteam, negatives Feedback wiederum ist wichtig, um Fehler oder Schwächen frühzeitig zu erkennen und darauf zu reagieren. Zudem spre -chen das Entwicklerteam oder der Kunde auch größere Probleme oder notwendige Änderungen im Plan offen und ehrlich an und überlegen sich gemeinsam Lösungen  (Kapitel 5.1).RollenIn professionellen agilen Projekten sind vor allem drei im Scrum-Vorgehensmodell definierte Rollen weithin bekannt, nämlich der Product-Owner, das Entwicklerteam und der Scrum-Master. Der Product-Owner ist der Vertreter des Kunden und interner Ansprechpartner für das Entwicklerteam.Das Entwicklerteam entscheidet, wie es die Kundenwünsche technisch umsetzt, ermittelt den Zeitbedarf und kommuniziert Glossar 207diesen dem Kunden. Es arbeitet fokussiert auf das Ziel der jeweiligen Iteration hin.Der Scrum-Master unterstützt das Team und sorgt dafür, dass es möglichst un -gestört und effektiv arbeiten kann. Dazu achtet er ähnlich einem Schiedsrichter im Sport darauf, dass das Team vereinbarte Regeln einhält, moderiert die Meetings, unterstützt gruppendynamische Prozesse, beseitigt Hindernisse und sorgt für einen guten Informationsfluss im Team und zum Product-Owner.Scrum-MasterRollenSelbstorganisationSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23SprintIn Anlehnung an das Scrum-Vorgehens -modell werden Iterationen auch als Sprint bezeichnet.Stand-up-MeetingEin Stand-up-Meeting ist eine kurze, im Allgemeinen täglich stattfindende Bespre -chung, in der sich alle Teammitglieder über den aktuellen Projektstand austauschen. Das Stand-up-Meeting soll so kurz sein, dass es sich nicht lohnt, dafür eine Sitz -gelegenheit zu suchen. Diskussionen über einzelne Themen oder Probleme werden, falls sie nötig sind, im Anschluss geführt (Kapitel 4.5).Story-PointsStory-Points werden verwendet, um die Komplexität von User-Storys abzuschät -zen. Dieses Abschätzen erfolgt verglei -chend: Zunächst wählt das Team dazu eine User-Story aus und legt für sie einver -nehmlich eine Anzahl an Story-Points fest. Im Folgenden schätzt das Team die Kom -plexität weiterer User-Storys durch Ver -gleiche mit bereits geschätzten User-Sto-rys ab.Student-StoryDie Student-Story wurde von Lehrkräften für die Agile Schule eingeführt und stellt eine Lernaufgabe dar. Student-Storys er -möglichen es, neben den User-Storys für die Weiterentwicklung des Prototyps auch notwendige Lernaktivitäten transparent zu machen und beim Planen einer Iteration zu berücksichtigen. Student-Storys können von den Schülerinnen und Schülern eines Teams geschrieben werden. Ebenso kön -nen sie von der Lehrkraft vorgegeben wer -den, ggf. auch zusammen mit dem nötigen Material oder den Tasks, also den zu be -arbeitenden Teilaufgaben. Student-Storys werden ebenso wie User-Storys priorisiert und am Project-Board visualisiert (Kapitel 4.1).TaskTasks sind kleine, aus Entwicklersicht be-schriebene Aufgaben, die zu bearbeiten sind, um eine User-Story umzusetzen. Sie werden zu Beginn jeder Iteration für die ausgewählten User-Storys vom Team ge -plant. Ein Task sollte so klein sein, dass er in überschaubarer Zeit (einige Stunden) erledigt werden kann (Kapitel 4.4).Test-Driven Development (TDD)Die testgetriebene Entwicklung (2003 von Kent Beck vorgeschlagen) ist eine meist in der agilen Softwareentwicklung verwende -te Vorgehensweise, bei der zunächst Tests für das geforderte Verhalten geschrieben werden. Danach wird so lange implemen -tiert, bis keiner der Tests mehr fehlschlägt.Glossar208TestenBeim Testen wird anhand konkreter Bei -spiele systematisch überprüft, ob die Software die festgelegten Anforderungen erfüllt. Während bei klassischen Vorge -hensweisen nur am Ende des Projekts und dann meist unter Zeitdruck getestet wird, wird in agilen Projekten in jeder Iteration der neue Prototyp getestet (Kapitel 5.3).TimeboxingTimeboxing bezeichnet die Vergabe von festen Zeitrahmen für Vorgänge wie Mee -tings oder Iterationen, die hierdurch effizi-enter werden. Es vereinfacht die zeitliche Planung der Vorgänge und fördert meh rere Agile Werte, z.B. Einfachheit, Fokus und Zusicherung. In der Agilen Schule muss eine Balance zwischen Zeitdruck und Raum für kreatives Arbeiten und Lernpro-zesse gefunden werden (Kapitel 5.2).TransparenzSiehe Abb. 2.3 «Werte in agilen Projekten» S. 23Truck-FactorDer Truck-Factor geht auf Kent Beck zu -rück und gibt die Wahrscheinlichkeit an, mit der ein Projekt scheitert, wenn eine Person (spontan) ausfällt, die spezielles Wissen oder spezielle Fähigkeiten hat, die für das Projekt unverzichtbar sind. User-StoryEine User-Story beschreibt eine Anforde -rung an das Softwaresystem aus Sicht des Kunden. Sie besteht aus wenigen Sätzen und ist in Alltagssprache formuliert. Jede User-Story ist für den Kunden nützlich und nur so umfangreich, dass das Entwickler -team mehrere User-Storys in einer Itera-tion umsetzen kann (Kapitel 4.2).Velocity Die Velocity (engl. für Geschwindigkeit) gibt an, wie viele Aufgaben ein Team in ei-nem Zeitintervall (z.B. Iteration) umsetzen kann. Ein neu zusammengestelltes Team muss seine Velocity zunächst in einer Ite -ration ermitteln, ehe es in den folgenden Iterationen dem Kunden gegenüber ver -lässliche Zusagen (Commitments) machen kann. Brichzin, Kastl, Romeike Agile SchulePeter Brichzin, Petra Kastl, Ralf Romeike Agile Schule Methoden für den Projektunterricht   in der Informatik und darüber hinausPeter Brichzin, Petra Kastl, Ralf Romeike  Agile Schule Methoden für den Projektunterricht in der Informatik und darüber hinaus ISBN Print: 978-3-0355-1053-9  ISBN E-Book: 978-3-0355-1247-2 Bibliografische Information der Deutschen Nationalbibliothek: Die Deutsche Nationalbibliothek verzeichnet diese Publikation in der Deutschen Nationalbibliografie; detaillierte bibliografische Daten sind im Internet über http:/ /dnb.dnb.de abrufbar. 1. Auflage 2019 Alle Rechte vorbehalten © 2019 hep verlag ag, Bern www.hep-verlag.com5Inhalt 1. Einleitung   Schule entwickelt sich weiter 7 2. Hintergrund  Agile Kultur in Unternehmen und Schulen 13 2.1 Geschichte und Entwicklung 15 2.2 Agiles Arbeiten – ein Zusammenspiel aus Werten und Praktiken 22 2.3 Unternehmen werden agil – Beweggründe und Erfahrungen 29 3. Im Unterrichts einsatz  Erfahrungen mit agilen Schulprojekten 35 3.1 Best Practice – das Spiel «Pengu» 37 3.2 Im Anfangsunterricht durch Gestaltungsfreiräume begeistern  46 3.3 In der Oberstufe komplexe Anwendungssoftware agil entwickeln 53 3.4 Agile Softwareentwicklung als ganzjährige Lernmethode   im Pflichtunterricht  66 3.5 Ein geskriptetes Projekt als Methodik für den Anfangsunterricht  77 3.6 Reflexionskompetenz stärken durch Weiter  entwicklung   des eigenen agilen  Prozesses  85 4. Agiler Methodenkoffer I  Grundlegende Techniken und Praktiken 91 4.1 Iterationen – der agile Prozess 93 4.2 User-Storys – Anforderungen aus  Kundensicht 100 4.3 Das Project-Board – Planung und Stand im Blick 107 4.4 Tasks – Arbeitspakete aus Entwicklersicht 111 4.5 Stand-up-Meetings und andere  Besprechungsformen 118 4.6 Pair-Programming – Zusammenarbeit mit klarer Rollenverteilung 123 4.7 Prototypen – funktionsfähige Produkte ab der ersten Iteration 127 4.8 Agile Spiele – agiles Denken und Handeln erleben 132  65. Agiler Methodenkoffer II  Weitere Techniken und Praktiken 141 5.1 Reflexion in Review und Retrospektive – Nachdenken über   Inhalt und Prozess 143 5.2 Timeboxing – fokussiert arbeiten in festen Zeitrahmen 149 5.3 Testen – systematisch Qualität hinterfragen 152 5.4 Feedback und Bewertung – Rückmeldungen zur   Weiterentwicklung nutzen  157 5.5 Dokumentation – Transparenz durch aufgezeichnete Absprachen 164 5.6 Refactoring – Qualität verbessern und dabei lernen 170 5.7 Aufwandsabschätzung – gemeinsam das Machbare ermitteln 175 5.8 Repositorys und andere kollaborative Werkzeuge 180 6. Agile Methoden für alle  Schule agil gestalten 185 6.1 Agile Methoden in Theorie und Praxis 187 6.2 Agile Schule über den Informatikunterricht hinaus  193  Glossar 201Einleitung  Schule entwickelt  sich weiter1 Schule entwickelt sich weiter 9Schule prägt einen der wichtigsten Lebensabschnitte der Menschen. Von der  Grundschule bis zum Abitur sammeln Schülerinnen und Schüler wichtige Er fahrungen, die sie für den Rest ihres Lebens prägen. Damit geht es in der Schule  um mehr als nur um die Vermittlung von Wissen. Neben fachbezogenen Inhalten kommt auch allgemeinen Kompetenzen eine zunehmend größere Bedeutung  zu, wie sich auch in Bildungsstandards und kompetenzorientierten Lehrplänen  zeigt. Dazu gehören beispielsweise die Fähigkeiten, effektiv zu kommunizieren  und zu kooperieren sowie Lernund Problemlösestrategien zielgerichtet ein zusetzen. Projektunterricht als wichtige Unterrichtsmethode Projektunterricht gilt als besonders dazu geeignet, das selbstgesteuerte, selbstorganisierte und kooperative Lernen der Schülerinnen und Schüler zu fördern.  Hierbei wird typischerweise in für die Lernenden relevanten Kontexten die Anwendung fachbezogener und verschiedener allgemeiner Kompetenzen geför dert, bspw. Teamarbeit und die Planung selbstorganisierter Unterrichtsphasen.  Im Informatikunterricht haben Projekte darüber hinaus eine besondere Be deutung, da sie hier nicht nur als Unterrichtsmethode fungieren, sondern zu gleich auch einen Einblick in die meist in Projekten organisierte Berufsrealität  der Softwareentwicklung ermöglichen.  Der klassische Projektunterricht ist in der Regel klar sequenziell strukturiert.  Zunächst wird ein umfangreicher Plan aufgestellt, dann wird er realisiert. In  der Praxis haben sich allerdings in den letzten 15 Jahren rasch agile Methoden,  verbreitet, und zwar in kleinen wie großen Softwareunternehmen. Oft sind agile  Teams besonders motiviert, sie arbeiten fokussiert, pflegen einen wertschätzenden Umgang unter den Mitgliedern und sehen Fehler als eine wichtige Möglich keit, etwas zu lernen. Sie bestimmen ihren Weg zum Ziel selbst, reflektieren die sen regelmäßig und begreifen Veränderung als Chance. Die meisten Teams und  Kunden, die einmal agile Luft geschnuppert haben, wollen nicht mehr zurück,  weil sie nun flexibel auf Anforderungsänderungen und andere sich im Prozess  ergebende Herausforderungen reagieren können. So verändern agiles Denken  und Handeln die Unternehmenskultur, da mit ihnen eine Reihe zentraler Werte,  wie offene Kommunikation auf Augenhöhe und Selbstverantwortung im Team,  verbunden sind. Betrachtet man als Lehrkraft die agilen Methoden etwas genauer, offen bart sich ihr didaktisch-pädagogisches Potenzial für die Unterrichtsgestaltung  schnell: Die Praktiken und Techniken fördern und fordern Kommunikation im  Team, unterstützen die Strukturierung der inhaltlichen Arbeit in gut bearbeit-Einleitung  10bare Teilziele und erleichtern die Mitgestaltung des Lernprozesses durch die  Schülerinnen und Schüler. Kurze Zyklen sorgen schnell für erste Erlebnisse, die  motivieren, regen aber auch zum Innehalten und Nachdenken über das Produkt  und die Zusammenarbeit an: Was haben wir bis jetzt erreicht? Sind wir damit  auf dem richtigen Weg? Was sind unsere nächsten Schritte? Was lief gut? Was  wollen wir im nächsten Zyklus besser machen? Hierdurch wird Lernen auch zu  einem wichtigen Prozessbestandteil. Unser Erfahrungshorizont In unserem Buch «Agile Schule» greifen wir das Potenzial der Agilen Werte,  Praktiken und Techniken auf und machen sie für die Schule nutzbar. Das tun  wir weder, weil es gerade angesagt ist, noch, um ein Agiles Coaching zu ver kaufen oder die nächste Zertifizierung zu bewerben. Uns geht es darum, eine  Begeisterung weiterzugeben, die uns selbst in unserer Arbeit mit agilen Me thoden gepackt hat. Wir wollen zeigen, welchen Wert agile Methoden für den  Unterricht haben können, denn mit unserer Begeisterung sind wir nicht allein.  Das Buch basiert auf Erfahrungen und der langjährigen Begleitforschung zum  Einsatz agiler Projekte in unterschiedlichen Schulen in ganz Deutschland. Mit  den beteiligten Lehrkräften haben wir uns mehrmals im Jahr getroffen, um  gemeinsam die Methoden weiterzuentwickeln und für die Schule hinsichtlich  ihres didaktischen Mehrwerts anzupassen. Die so entstandene Agile Schule ist  keine Blaupause, die als festgelegtes Projektmodell im Unterricht Schritt für  Schritt befolgt werden muss. Vielmehr stellt sie einen Rahmen an Möglichkeiten dar, verschiedene Praktiken und Techniken den Unterrichtsanforderungen  entsprechend zu verwenden und anzupassen. Der erste eigene Versuch ist selten perfekt und selbst wenn, so wird im Laufe der Jahre immer auch mal eine  Schülergruppe ihr Ziel nicht erreichen. Wichtig ist es, sich in regelmäßigen Ab ständen die Frage zu stellen, was warum gut oder ungünstig verlaufen ist, und  entsprechende Anpassungen vorzunehmen. Auch wenn es sich bei den meisten  Beispielen um Erfahrungen aus dem Informatikunterricht handelt, beschränkt  sich die Agile Schule nicht darauf. Es zeigt sich zunehmend, dass die Agile Schule  auch in anderen Fächern oder Kontexten eine Bereicherung darstellen kann. Zum Aufbau des Buchs Im auf die Einleitung folgenden Kapitel 2 stellen wir die wesentlichen Hinter gründe agiler Methoden dar und geben einen Einblick, wie unterschiedlich der  Weg zum Einsatz agiler Methoden in Unternehmen gestaltet werden kann. Die Schule entwickelt sich weiter 11in diesem Kapitel präsentierten Agilen Werte werden in den folgenden Kapiteln  immer wieder aufgegriffen.  In Kapitel 3 wird ein Best-Practice-Beispiel vorgestellt, welches kompakt  die Kernideen agiler Projekte illustriert. Im Folgenden berichten Lehrkräfte  von ihren Motivationen und Umsetzungen agiler Projekte in unterschiedlichen  Kontexten. Die Berichte zeigen, wie flexibel sich die Methoden, Techniken und  Praktiken an die individuelle Unterrichtsgestaltung anpassen und neben fachlichen auch pädagogische Ziele umsetzen lassen.  Kapitel 4 enthält einen Methodenkoffer mit acht grundlegenden Praktiken  und Techniken, ihrer theoretischen Fundierung, Varianten der schulischen Um setzung, Stolpersteinen sowie Tipps und Tricks. Diese acht Methoden sind ein  guter Einstieg in erste agile Projekte.  Kapitel 5 umfasst weitere acht Praktiken und Techniken. Sie dienen der me thodischen Vertiefung.  In Kapitel 6 reflektieren wir die gewonnenen Erfahrungen aus wissenschaft licher Sicht und skizzieren Möglichkeiten für den Einsatz agiler Methoden außerhalb des Informatikunterrichts. Die Pfeile im Fließtext verweisen auf Methodenbausteine (bei ihrer Erstnennung), die weiterführende Informationen beinhalten. Das Glossar erklärt Begrif fe aus der agilen Welt, die im didaktischen Kontext nur am Rande vorkommen.  Weiter beschreibt es die wichtigsten Methoden. Zum Einsatz dieses Buchs Sie können dieses Buch zusammenhängend von vorn nach hinten lesen, aber  auch als Nachschlagewerk für Agile Werte, Praktiken und Techniken in der Schu le nutzen. Wenn Sie sich vor allem für konkrete Umsetzungsbeispiele interes sieren, können Sie direkt mit den Praxisberichten in Kapitel 3 einsteigen. Sie  beginnen alle mit einem Überblick über den Kontext, die Zielrichtung und den  zeitlichen Ablauf des Unterrichtsprojekts. Sollten Sie nicht Informatik unter richten, mag für Sie Kapitel 6.2 ein guter Start sein, da dort Unterrichtsbeispiele  außerhalb der Informatik vorgestellt werden. Sie können Ihre Aufmerksamkeit  auch erst den Agilen Werten widmen, da sie die Basis agilen Handelns und  Denkens sind, und dann direkt zu den Methodenbausteinen springen. Den Bau stein ↑ Iterationen – der agile Prozess empfehlen wir Ihnen, wenn Sie zunächst  einen Überblick gewinnen möchten. Seien Sie sich beim Lesen aber bewusst,  dass der agile Prozess nur als Ausgangspunkt für Ihren eigenen, auf den indi viduellen Kontext zugeschnittenen Prozess dienen soll. Es geht weniger um die  perfekte Umsetzung des agilen Prozesses und der damit verbundenen Techniken Einleitung  12und Praktiken als um die Schülerinnen und Schüler, die sich selbst organisieren,  effektiv kollaborativ arbeiten und dabei wichtige projektbezogene Kompetenzen  erwerben; die Lernenden stehen im Zentrum. Dank Ein Buch wie «Agile Schule» kann nicht ohne die Mitarbeit und Unterstützung  zahlreicher Kolleginnen und Kollegen entstehen. Wir danken insbesondere den  Lehrerinnen und Lehrern, die durch ihre Erfahrungen und Beobachtungen die  Grundlage für die Praxisberichte geschaffen haben: Andreas, Lennard, Leo und  Uli.  Des Weiteren danken wir den Teilnehmerinnen und Teilnehmern der Work shops, die an den Grundlagen für die Methodenkoffer mitgearbeitet haben:  Andreas, Christian, Conny, Dorothea, Julia, Lennard, Leo, Mareen, Matthias,  Melanie, Mike, Sebastian, Thomas, Timo, Tobias und Uli.  Darüber hinaus danken wir der Sybit GmbH, insbesondere Johannes, Tho mas, Fritz und Stephan, die uns auf der «Agile Bodensee» einen Einblick in die  agile Welt der Profis und die Realisation unseres Workshops in Radolfszell er möglicht haben.  Unser Dank gilt außerdem Gerald von der Lenovate GmbH für die engagierte  Bereicherung unseres Workshops in Kloster Zinna, insbesondere für das Spiel  «Kekse backen» und die markanten Sprüche zu Agilen Werten. Weiterhin ge bührt unser Dank Bernd (stellvertretend für die ganze QAware GmbH), der einem der Autoren für ein Jahr die Mitarbeit im Unternehmen ermöglicht und  ihm damit zu einem vertieften Einblick in die agilen Praktiken, Techniken und  Werte von Profis verholfen hat.  Im Rahmen der Königsteiner fachdidaktischen Gespräche haben viele Kol leginnen und Kollegen mit uns an den Methodenbausteinen weitergearbeitet;  auch ihnen gebührt unser Dank.  Schließlich bedanken wir uns bei der Google-CS4HS-Initiative für die finan zielle Beteiligung an den Workshops sowie an den Druckkosten dieses Buches.Hintergrund Agile Kultur in  Unternehmen  und Schulen2  Kommunikation  Einfachheit Feedback  SelbstTransparenz  organisation   Mut  Commitment   (Zusage) Respekt Zielstrebigkeit/ FokussierungAgile WerteAgile Methoden einzusetzen bedeutet auch zu verstehen, wo sie herkom­ men, welche Werte mit ihnen verbunden sind und wie diese in der Praxis  zum Tragen kommen. In diesem Kapitel werden zunächst die wich­ tigsten Entwicklungsschritte und Vorgehensmodelle agiler Methoden  beschrieben. Anschließend werden Agile Werte als ideelles Fundament  und ihre Bedeutung für Unterrichtsprojekte dargestellt. Unterschiedli­ che Beweggründe und Erfahrungen bei der Einführung agiler Methoden  werden schließlich durch Schilderungen aus der Praxis dreier Unter­ nehmen skizziert.Geschichte und Entwicklung 152.1 Geschichte und Entwicklung Softwareentwicklung wird Teamarbeit Allein entwickelte Software ist typischerweise nicht sehr komplex, wird von  wenigen genutzt oder hat eine kurze Lebenszeit. Anders ist es mit großen Softwaresystemen: Sie werden von vielen für viele geschrieben und meist über Jahr zehnte genutzt und weiterentwickelt.  Die Entwicklung solcher Softwaresysteme begann Mitte des letzten Jahrhun derts mit Steuerelementen für Raumfahrt und militärische Streitkräfte. An fangs wurde im Großen ebenso «intuitiv» wie im Kleinen entwickelt. In den  folgenden Jahrzehnten beauftragten Banken, Telefonund Transportgesell schaften, Unternehmen für Medizintechnik und viele weitere Branchen zunehmend umfangreichere Softwarelösungen, die nur noch von Teams entwickelt  werden konnten. Rasch wurde klar: Das Risiko zu scheitern war ohne ein struk turiertes Vorgehen groß. Dass es damals, als sich die Informatik als Wissen schaft erst entwickelte, noch kaum systematisch ausgebildete Informatiker, aber  viele Ingenieure in der Softwareentwicklung gab, mag erklären, weshalb man in  den 1960er-Jahren bewährte Vorgehensweisen aus Bauund Produktionspro zessen übernahm und sie für die Softwareentwicklung anpasste. So entstand  ein wasserfallähnlicher Verlauf in Phasen, der einen Schwerpunkt auf die sehr  präzise Analyse und Definition der Anforderungen legte, um dadurch, analog  zum Bauwesen, teure oder gar unmögliche spätere Änderungen zu vermeiden.  Anschließend wurde gemäß den Anforderungen ein detaillierter Plan ausgearbeitet und im Folgenden genau umgesetzt. Kommuniziert wurde dabei im We sentlichen durch das Weiterreichen der umfangreichen Dokumentation. Diese  heute als klassisch bezeichneten Vorgehensweisen brachten Struktur in den  Prozess, aber auch neue Probleme. Planungsfehler wurden beispielsweise oft  erst am Ende des Projekts erkannt und waren zu diesem Zeitpunkt nur mit erheblichem Zusatzaufwand meist in Form von Überstunden behebbar. Außerdem  beschrieben die verschriftlichten Wünsche des Kunden aufgrund von Kommunikationsschwierigkeiten oder unzureichender Kenntnisse oft nicht das, was  eigentlich gebraucht wurde, sodass die Arbeit von Monaten oder Jahren «um -Hintergrund 16sonst» war. Nach Abschluss einer klassischen Planung eingebrachte Wünsche  durften nicht mehr berücksichtigt werden, auch wenn eine Planänderung aus  Sicht des Entwicklerteams möglich und sinnvoll gewesen wäre. Die Praxis der  Softwareentwicklung zeigte Ende des 20. Jahrhunderts immer deutlicher, dass  langfristige Pläne oft nur für kurze Zeit gute Pläne sind, insbesondere in einer  Welt, deren Anforderungen und Einsatzszenarien immer volatiler, komplexer,  unsicherer und mehrdeutiger werden. Abbildung 2.1: Probleme bei klassischem Vorgehen: Was der Kunde beschreibt, was er  anfangs wollte, was umgesetzt wird, was noch gerettet werden kann und was er tatsächlich gebraucht hätte Auf dem Weg zu mehr Flexibilität Vor dem Hintergrund dieser auch für die Softwareentwickler oftmals frustrie renden Erfahrungen diskutierten in den 1990er-Jahren immer mehr Informatikerinnen und Informatiker darüber, welche neuen Wege beschritten werden  könnten, um Software für alle Beteiligten besser zu entwickeln. Hierbei entstan den Vorgehensmodelle wie Extreme Programming, Scrum und Feature Driven  Development, die zunächst unter das Prädikat «leichtgewichtig» fielen. Die Ideen  für Veränderungen waren nun da, aber noch fehlte eine positive charakteristische Bezeichnung, die, vergleichbar mit einem Siegel, die verknüpften Werte  bündelte, ihnen eine unverkennbare Identität gab und beim Kunden Neugier  und Vertrauen für das damit verbundene Versprechen, besser zu sein, weckte.  Das änderte sich, als 17 erfahrene Softwareentwickler mit sehr unterschiedlichem Hintergrund im Jahr 2001 in den schneebedeckten Rocky Mountains  zusammenkamen, um eine gemeinsame Basis und einen Begriff für die neuen  Herangehensweisen zu finden. Nachdem ein Teilnehmer vorgeschlagen hatte,  das, was man in der praktischen Arbeit mehr schätzen gelernt hat, dem gegenüberzustellen, was traditionell wichtig war, ging es sehr schnell. Dann standen  vier Sätze, aus denen das Agile Manifest wurde, an der Wandtafel.Geschichte und Entwicklung 17Das Agile Manifest Individuen und Interaktionen sind wichtiger   als Prozesse und Werkzeuge. Funktionierende Software ist wichtiger   als umfassende Dokumentation. Zusammenarbeit mit den Kunden ist wichtiger   als Vertragsverhandlung. Reagieren auf Veränderung ist wichtiger   als das Befolgen eines Plans. Abbildung 2.2: Das 2001 formulierte Manifest für Agile Softwareentwicklung Der Moment wird von Teilnehmern später als überwältigend beschrieben. Es gab  keine Gegenargumente, es bedurfte keiner Abstimmung. Alle sahen die Sätze  und sagten: «Ja, das ist es!» Am zweiten Tag wählte die Gruppe das Wort «agil»,  das mit «beweglich», «flink» oder «wendig» ins Deutsche übersetzt werden kann,  als positiv besetzten Begriff für das nun zum Ausdruck gebrachte gemeinsame  Wertesystem und die daraus abgeleiteten Prinzipien. Die neuen Vorgehensmo delle, die sich darauf stützen, wurden von nun an als agile Methoden bezeichnet.  Da sich der Begriff «Methode» sowohl auf Vorgehensmodelle als auch auf hierin  verwendete Techniken, Praktiken und Hilfsmittel beziehen kann, verwenden wir  im Folgenden den weiteren Methodenbegriff, der auch gut zum Verständnis von  Methoden im Unterricht passt. Zehn Jahre Agiles Manifest – eine Zwischenbilanz Was agile Methoden in den folgenden Jahren verändern sollten, damit hatte  2001 niemand gerechnet, sagten die Teilnehmer übereinstimmend anlässlich  des zehnten Jahrestags. Denn im Gegensatz zu vielen anderen Bewegungen, die  verebbten, wuchs in der Praxis die Zahl der agil arbeitenden Teams und Unternehmen unaufhaltsam und immer schneller, insbesondere im IT-Bereich. Oft Hintergrund 18begann ein Team damit, es «mal auszuprobieren», und erlebte dabei, wie Kolle ginnen und Kollegen neugierig wurden und fragten: «Was macht ihr denn da,  warum seid ihr so gut drauf?» So sprang die Idee von einem Team zum nächsten  und veränderte nicht nur deren Stimmung, sondern auch die Qualität der Pro dukte, die Effektivität, die Motivation der Projektbeteiligten und letztlich die  gesamte Unternehmenskultur. In agilen Unternehmen geht man beispielsweise  davon aus, dass man die besten Ergebnisse erhält, wenn man kleinen, sich selbst  organisierenden Teams statt einer klaren Arbeitsanweisung ein inhaltliches Ziel  gibt. Es liegt dann in der Verantwortung und der Freiheit des Teams, den für sich  besten Weg zum Ziel zu bestimmen. Die in den Vorgehensmodellen beschrie benen Techniken und Praktiken unterstützen sie dabei. Agile Werte haben im  Bereich der Kooperation und Teamarbeit, aber auch weit darüber hinaus viel  bewegt, lautet die Bilanz nach zehn Jahren, auch wenn der Wandel noch lange  nicht abgeschlossen ist: Agil sein bedeutet, sich ständig zu bewegen, zu verändern und neuen Umgebungen anzupassen, sodass die Weiterentwicklung des  agilen Ansatzes wohl auch nie abgeschlossen sein wird. Agile Vorgehensmodelle aus der Softwaretechnik Kleinster gemeinsamer Nenner der agilen Vorgehensmodelle sind die im Agilen  Manifest ausgedrückten Leitgedanken und Werte. Gemeinsam ist ihnen darüber  hinaus, dass sie alle empirisch sind, also auf möglichst systematischem und  datengestütztem Lernen aus Erfahrungen basieren, und dass damit iterativ, also  in kleinen Zeitintervallen Inkremente entwickelt werden, die das Produkt um  etwas für den Kunden Nützliches erweitern.  Scrum Der Begriff «Scrum» steht symbolisch für das Gedränge im Rugby als Analo gie für sich in komplexen Situationen erfolgreich selbst organisierende (Pro duktentwicklungs-)Teams. Besondere Rollen nehmen in Scrum der Product  Owner, der im Sinne des Kunden und mit dem Ziel der Wertschöpfungsmaxi mierung entscheidet, was gemacht wird, und ein Scrum Master, der das Team  wo nötig unterstützt, ein. Darüber hinaus beschreibt Scrum eine Reihe von Mee tings und Praktiken. Die Selbstverpflichtung des Teams, seine Fokussiertheit so wie Offenheit, Respekt und Mut sind Werte, die besonders betont werden. Scrum  stammt aus der Softwaretechnik, wird aber inzwischen auch in anderen Bereichen erfolgreich als Vorgehensmodell für das Projektmanagement verwendet.Geschichte und Entwicklung 19Extreme Programming (XP) XP hat viele Ähnlichkeiten zu Scrum, stellt aber neben Mut und Respekt direk te Kommunikation und Feedback ins Zentrum sowie Einfachheit, welche die  Denkweise und den Codierstil der Entwicklerinnen und Entwickler prägt. Von  den vielen XP-Praktiken ist Pair-Programming wohl die bekannteste.  Feature Driven Development (FDD) Die Organisation der Produktentwicklung erfolgt bei FDD dem Namen entspre chend anhand einer Liste von Funktionalitäten, die nach und nach umgesetzt  werden. FDD harmoniert, anders als Scrum oder XP, gut mit existierenden klas sisch hierarchischen Projektstrukturen. Es erfordert keinen kulturellen Wandel  der Unternehmen, hat insgesamt eine deutlich andere Ausprägung, kann aber  bei agilen Vorgehensweisen verortet werden. Verwandte Vorgehensmodelle Kanban, Lean Management und Design Thinking bringen Ideen aus anderen  produzierenden Bereichen, wie etwa der Autoindustrie, in die IT: Kanban Ziel des Kanban-Vorgehensmodells ist es, die Wertschöpfungskette eines  mehrstufigen Prozesses kostenoptimal mittels Hol-Prinzip (Pull-Prinzip) ohne  schwerfällige zentrale Planung zu steuern. Der Prozess wird dazu mithilfe eines  Project-Boards und Karten, auf denen die zu erledigenden Aufgaben stehen,  visualisiert. Da jeder Wechsel zwischen unterschiedlichen Aufgaben, die ein  Mitarbeiter oder eine Mitarbeiterin quasi parallel bearbeitet, Zeit kostet, legt  das Team eine maximale Zahl an Arbeiten fest, die jeder und jede gleichzeitig  bearbeiten darf. Bis zu dieser Zahl können die Mitarbeitenden Aufgaben auf dem  Board in die Spalte «In Bearbeitung» verschieben. Für Probleme wie beispiels weise Flaschenhälse im Prozess, die so sichtbar werden, überlegt sich das Team  Maßnahmen, die es ergreifen will.  Lean Management Die Methoden des Lean Managements zielen darauf ab, die Prozessorganisatio nen und das Qualitätsniveau zu verbessern, und sind heute weltweit verbreitet.  Im Kern stellt Lean Management eine Unternehmenskultur dar, in der sich alle  Tätigkeiten auf den Kunden ausrichten, in der die Teams im Rahmen dieses  Unternehmensleitbildes eigenverantwortlich und autonom arbeiten und in der Hintergrund 20großer Wert auf offene Informationsund Feedbackprozesse gelegt wird, die die  Basis kontinuierlicher Verbesserung sind. Design Thinking Design Thinking ist ein Ansatz für praktisches und kreatives Problemlösen, der  in Projekten und anderen Kontexten, in denen es um Innovation geht, genutzt  werden kann. Er stellt eine breite Palette an Methoden zur Verfügung, die sich  durch Benutzerorientierung, Visualisierung, Simulation sowie durch iteratives  und oft auch durch forschendes Vorgehen auszeichnen. Wohin geht der Weg? Während um das Jahr 2000 herum die Mehrheit der agil arbeitenden Teams  in der Softwareentwicklung angaben, dass sie sich an Extreme Programming  orientieren, war 2017 Scrum die meistgenutzte agile Methode. Je nach Umfrage  arbeiten 85 Prozent oder mehr aller befragten Teams in der IT mit «Scrum»,  wobei jedes Team mit der Zeit sein eigenes Scrum entwickelt. Wie viel Software  in den vergangenen Jahren prozentual mit klassischen bzw. mit agilen Vorge hensmodellen entwickelt wurde, ist schwer zu sagen. Ein Trend zeichnet sich  jedoch klar ab: In der Softwareentwicklung gibt es kaum noch ein Unterneh men, in dem nicht zumindest einzelne Teams «agile Luft» schnuppern. Laut  dem Unternehmen VersionOne, das seit 2006 jährlich eine Umfrage zum Stand  agiler Softwareentwicklung durchführt, setzten im Jahr 2018 bereits 97 Prozent  aller Unternehmen in der Softwareentwicklung agile Methoden ein. Die meisten  amerikanischen IT-Riesen arbeiten agil, aber auch namhafte europäische und  deutsche Unternehmen vergeben IT-Aufträge inzwischen bevorzugt an agile  Teams und arbeiten selbst daran, agil zu werden. Über die Erfahrungen auf dem  Weg dorthin gibt es bis heute einen regen Austausch auf Konferenzen und an  «agilen Stammtischen», um auch Neulinge auf dem Weg zum agilen Denken und  Handeln zu unterstützen. Für viele gilt in Anlehnung an die als Sprint bezeichneten Iterationen: «Wir sind einfach losgesprintet – und es hat gut geklappt.» Wie verändert agiles Denken die Arbeit? Sicherlich kann man hier aus heutiger Sicht viele Auswirkungen beschreiben,  die auf die Verbreitung agiler Methoden zurückzuführen sind, und sie lassen  sich je nach Fokus unterschiedlich gewichten. Im Folgenden werden deshalb nur  exemplarisch zwei ganz unterschiedliche Aspekte aufgegriffen:Geschichte und Entwicklung 21Agile Methoden haben sich in der zunehmend komplexen Welt, in der sich die  Softwareentwicklung heute bewegt, bewährt. Selbst «einfache» Suchmaschinen  sind inzwischen so komplex, dass auch Experten oft nicht mehr vorhersagen  können, wie sich eine Änderung im Algorithmus auswirkt. Also formuliert man  im Laufe der (Weiter-)Entwicklung Hypothesen, stellt die veränderte Suchmaschine für kurze Zeit online und wertet die Ergebnisse anschließend aus. Validiertes Lernen aus Experimenten ist eine unverzichtbare Methode moderner  Softwareentwicklung geworden, die in klassischen Vorgehensmodellen kaum  Platz findet. In agilen Methoden stellt die Freiheit zum Experimentieren hin gegen einen Wert dar. Validiertes Lernen fügt sich auf natürliche Weise in die  iterativ inkrementelle Entwicklung von Produkten mit regelmäßigen Feedback schleifen ein, in welcher Kunde und Nutzer eine zentrale Rolle einnehmen. Agile Methoden stoßen in IT-Unternehmen einen kulturellen Wandel an. Die ser Wandel hat in der Softwareentwicklung sichtbar positive Wirkungen gezeigt,  sodass sich die Ideen inzwischen (obwohl Lean Management sie bereits Mitte  des letzten Jahrhunderts aufgegriffen hat) auch im modernen Management und  außerhalb der IT-Branche wiederfinden. Bildlich gesprochen: Schwerfällige Tan ker, in denen oben auf der Brücke getrommelt und unten gerudert wird, sind in  bewegter See zu träge. Stattdessen setzt man auf viele kleine, autonome Teams  in Kanus, die eigenverantwortlich rudern. Die Klammer, die diese Kanus «lose  zusammenhält» und Richtung Ziel lenkt, ist die Kommunikation. Statt als feste  Rolle wird Führung als temporäre und «dienende» Aktivität gesehen, die jeder  und jede von Zeit zu Zeit ergreift. Agile Unternehmen schätzen ihre Mitarbeite rinnen und Mitarbeiter, sie vertrauen ihren Fähigkeiten und ihrem Engagement,  setzen auf ihre Motivation und sorgen für ein Klima, in dem offen, respektvoll  und transparent kommuniziert wird und Erfolge auch gefeiert werden. So macht  Arbeit einfach mehr Spaß!Hintergrund 222.2 Agiles Arbeiten – ein Zusammenspiel  aus Werten und Praktiken Agile Werte Agile Projekte zeichnen sich nicht nur durch den Einsatz verschiedener agiler  Methoden aus, auch wenn diese am sichtbarsten sind, wie etwa die vielen bunten  Klebezettel an einem Board. Vielmehr basieren agile Projekte auf einer Reihe  von Werten, welche die grundlegende Orientierungsund Entscheidungshilfe  für agile Teams auf ihrem selbstgestalteten Weg zum gesetzten Ziel bilden. In  Form von konkreten und erprobten Techniken werden die Werte umgesetzt und  die agilen Teams bei ihrer Selbstorganisation ideal unterstützt. Unter Werten werden grundlegende erstrebenswerte Merkmale und Eigenschaften agiler Projekte subsumiert. Typisch positive personenbezogene We sensmerkmale wie Eigenverantwortung, Zielstrebigkeit, Offenheit und Respekt  sind damit korreliert und tragen zu einer positiven Unternehmensbzw. Schul kultur bei. Als die beiden zentralen Werte agiler Methoden gelten Kommunikation und Einfachheit. Gemeinsam mit den Werten Feedback, Selbstorganisation  und Transparenz werden sie nicht nur in der Softwarepraxis gelebt, sondern  bilden auch die Basis für die Agile Schule. Darüber hinaus können in agilen Pro jekten je nach Schwerpunktsetzung auch andere Werte wie bspw. Commitment,  Mut oder Fokus wichtig werden. Agiles Arbeiten – ein Zusammenspiel aus Werten und Praktiken 23Werte in agilen Projekten Kommunikation Teile dich mit und tausche dich regelmä ßig mit allen Projektbeteiligten aus. Das  betrifft die Anforderungen, Umsetzungs möglichkeiten und Quelltexte, aber auch  das Miteinander im Team.  Einfachheit  Wähle die einfachste technische Lö sung, um den größtmöglichen Projekt fortschritt zu erhalten, und verwende  organisatorisch nur Methoden mit ei nem unmittelbaren Mehrwert. Oder noch  knapper formuliert, handle nach dem  KISS-Prinzip. Feedback  Zeige Zwischenergebnisse früh und oft  und hole dir dazu Rückmeldungen ein.  Reflektiere die Rückmeldungen und  passe selbstkritisch inhaltliche Zie le und Prozessabläufe an, das wird dir  dabei helfen, das Produkt und deine Ar beitstechniken zu verbessern. Selbstorganisation  Organisiere mit deinen Teamkollegen  euren Arbeits pro zess so, dass ihr best möglich eure Ziele erreicht. Besprechun gen helfen dabei. Hole dir aktiv Aufgaben  vom Project-Board, die du gut bewälti gen kannst. Transparenz Kommuniziere offen und ehrlich, liefere  alle Informationen über deine Aktivitäten  im Team zeitnah und transparent. Ein  aktiver Informationsaustausch ist ent -scheidend für den Erfolg kooperativen  Lernens und Arbeitens. Commitment (Zusage) Sei bereit, mit deinem Team Verantwor tung sowohl für eine Produktentwicklung  als auch für den Lernfortschritt zu über nehmen. Dazu gehören das Gestalten  von Freiheiten, das gemeinsame Festlegen von Zielen mit einem «Ja, wir wollen  das!» sowie das bestmögliche Engage ment für die verabredeten Ziele.  Mut Sei mutig, auch mal Fehler zu machen,  denn jeder Fehler bietet die Chance,  etwas zu lernen. Sei mutig, Fragen zu  stellen, Verantwortung zu übernehmen,  Entscheidungen zu treffen und auch ehr lich über Misserfolge und Hindernisse zu  sprechen.  Respekt Höre deinen Teamkollegen zu und ver suche sie zu verstehen. Berücksichtige  ihren Erfahrungshintergrund, wenn du  Feed back gibst und ihre Ergebnisse und  ihr Verhalten bewertest. In agilen Projek ten arbeiten alle Beteiligten auf Augenhö he miteinander, jeder wird sich entspre chend seiner Möglichkeiten einbringen. Zielstrebigkeit/Fokussierung Widme deine Aufmerksamkeit ungeteilt  einer konkreten Aufgabe. Fokussiere  dazu all deine Bemühungen und Fähig keiten darauf, um im vorgegebenen Zeit fenster das zugesagte Ziel zu erreichen. Abbildung 2.3:  Werte, auf die sich die Prinzipien und Methoden der agilen Projektarbeit  beziehenHintergrund 24Im Folgenden werden die wichtigsten Werte der Agilen Schule genauer charak terisiert: Kommunikation  Kommunikation ist die Grundlage für gemeinsames Arbeiten und Lernen.  In agilen Projekten ist sie die Voraussetzung dafür, dass Wissen regelmäßig  und bestmöglich ausgetauscht und innerhalb des Teams verteilt wird. Bei der  Übernahme klassischer Vorgehensmodelle wird mitunter auch in Schulen versucht, durch die fließbandartige Abarbeitung von Dokumenten wie Lastenund  Pflichtenheft, Modellen, Klassendokumentationen und Anderem die zwischenmenschliche Kommunikation zu ersetzen. Für agiles Vorgehen ist dagegen die  direkte Kommunikation aller Beteiligten zentral. Sie sollte regelmäßig, zielorientiert, offen, ehrlich, und respektvoll erfolgen. Das betrifft auch die Absprachen  über (Zwischen-)Ziele und Machbarkeiten im Projekt sowie den Austausch über  Einschätzungen, Lösungswege, Entscheidungen und Probleme mit den Teammitgliedern.  Einfachheit Um Ziele zu erreichen, ist Einfachheit sowohl bei der inhaltlichen Arbeit als auch  bei der organisatorischen Durchführung eines agilen Projekts zentral. Dabei  ist die Leitfrage des KISS-Prinzips («Keep it small and simple») hilfreich für  die Fokussierung auf das Wesentliche: Kann ich es sinnvoll einfacher gestalten?  Konkret soll in der inhaltlichen Umsetzung nur das implementiert werden, was  für die unmittelbare Zielstellung benötigt wird. Unnötige Details hingegen ge fährden den Projektfortschritt. Gibt es mehrere Lösungswege, so ist der einfachere zu bevorzugen; er ist leichter nachzuvollziehen und zu verstehen. Dadurch  werden später auch die Fehlersuche, das Erweitern und die Pflege erleichtert.  Auch zur Projektorganisation werden nur diejenigen Techniken und Praktiken  herangezogen, die einen Mehrwert bieten. Welche das sind, muss abhängig vom  konkreten Projekt entschieden werden bzw. kann nach Reflexionsphasen ange passt werden. Beispielsweise kann in der Schule auf Rollen, wie sie in Scrum  existieren, weitestgehend verzichtet werden.  Feedback Feedback ist eine der konstruktivsten Formen der Kommunikation und grundle gend für individuelle und gemeinsame Lernund Weiterentwicklungsprozesse.  In sequenziell verlaufenden Projekten erhalten die Teams erst beim Abschluss  ein Feedback. Stärken und Schwächen bei der Planung etwa werden so zwar  benannt, aber die Gelegenheit, daraus Gelerntes unmittelbar anzuwenden, wur -Agiles Arbeiten – ein Zusammenspiel aus Werten und Praktiken 25de verpasst. In agilen Projekten werden die Phasen zyklisch in ↑ Iterationen  durchlaufen, um das Zwischenprodukt (↑ Prototyp) schrittweise zu erweitern,  woraus sich eine regelmäßige Rückkopplung ergibt. Unmittelbare Bedeutung  für die Schülerinnen und Schüler hat die frühe Rückmeldung auf der Ebene  der umgesetzten Lösungen, die sie in agilen Projekten in der Beurteilung der  Zwischenprodukte im Review (↑ Reflexion) erhalten. Feedback auf (Selbst-) Steuerungsebene bezieht sich auf die Selbstorganisation und Selbstreflexion des  Teams und des Einzelnen und kann ebenso wie Feedback auf der Personalebene  in den Retrospektiven (↑ Reflexion) gegeben werden.  Selbstorganisation In klassischen professionellen Projekten, die in Phasen verlaufen, gibt es Taktge ber: Das Entwicklerteam trifft kaum organisatorische Entscheidungen, sondern  setzt lediglich von Vorgesetzten genehmigte Pläne in vorgegebenen Zeiträumen  um, weshalb Selbstorganisation nur in begrenztem Umfang erforderlich ist. In  Schulprojekten hingegen sind Selbstorganisation und Eigenverantwortung zwar  seit jeher gewünscht, in der Umsetzung aber nur schwer zu erreichen, da konkrete, unterstützende Methoden fehlen. Agile Methoden beheben diesen Mangel.  Sie helfen den Teams, in einem vorgegebenen Rahmen selbst zu entscheiden,  welche Ziele sie sich setzen und wie sie ihre (Lern-)Arbeit inhaltlich und zeitlich  gestalten und strukturieren. Da das Vorgehen in agilen Projekten transparent  ist, erkennt auch der Agile Coach bzw. die Lehrkraft, welche Art der Unterstützung das jeweilige Team (noch) benötigt, bis die Selbstorganisation tatsächlich  gelingt. Transparenz Klarheit über die Aktivitäten im Team, offene Kommunikation und aktiver Informationsaustausch sind entscheidend für den Erfolg kollaborativer Arbeit  und kooperativen Lernens. Klassische, in Phasen ablaufende Projektarbeit ist  vergleichbar mit einem U-Boot, das regelmäßig für längere Zeit abtaucht. Was in  dieser Zeit passiert, ist von außen nicht einsehbar. In agilen Projekten hingegen  sind Strukturen und Prozesse transparent, für die Teams (von innen) und die  Lehrkraft/Projektleiter/Kunden (von außen). Jeder kann die Ziele und Abläufe  sehen, da der Projektstand und die aktuellen Tätigkeiten visualisiert werden und  so jederzeit auf einen Blick erfassbar ist, wer wann woran arbeitet, was noch zu  tun ist und was bereits erledigt wurde. Probleme werden offen angesprochen,  Entscheidungen gemeinsam getroffen und Wissen und Informationen werden  aktiv untereinander geteilt. Dieses Hineinsehen und Verstehen ist für Schüle rinnen und Schüler eine wesentliche Voraussetzung zur Partizipation, und für Hintergrund 26Lehrkräfte ist es die Basis, auf der sie entscheiden, welche Rolle für sie gerade  passend ist: die eines Trainers, eines Coaches oder eines Beobachters. Insbeson dere als Beobachter kann die Lehrkraft dank der Transparenz die Kompetenz entwicklung der Schülerinnen und Schüler verfolgen und somit ein fundiertes  Feedback geben.  Agile Werte durch Praktiken und Techniken zum Leben erwecken Der agile Prozess gibt einen Rahmen vor, in dem Projekte so strukturiert werden,  dass zu jedem Zeitpunkt das Richtige richtig getan wird. Insbesondere mittels  verschiedener Praktiken und Techniken zum Visualisieren, Austauschen und  Nachdenken werden dabei die Agilen Werte zur Basis des Handelns gemacht. Visualisieren Eine zentrale Rolle spielen Praktiken und Techniken, die den Stand und die Auf gaben des gesamten Projekts und insbesondere des aktuellen Zyklus auf einen  Blick erfassbar und damit für alle transparent machen. Das Visualisieren erfolgt  in der Agilen Schule ebenso wie in professionellen Projekten durch das ↑ Pro ject-Board mit seinen drei Spalten für geplante, in Arbeit befindliche und er ledigte Aufgaben sowie durch priorisierte ↑ User-Storys und die Beschreibung  damit verbundener Aufgabenpakete in Form von ↑ Tasks, für die Einzelne für  alle sichtbar die Verantwortung übernehmen. Die Visualisierung unterstützt  die Selbstorganisation, zeigt das Commitment des Teams bzw. der einzelnen  Teammitglieder, fordert Einfachheit bei der Planung ein und sorgt für ein fo kussiertes Arbeiten. Austauschen Ebenso wesentlich ist eine Reihe von Techniken und Praktiken, die den Aus tausch von Informationen und Wissen unterstützen, wobei sie jeweils nicht  nur einen Anlass zur Kommunikation bieten, sondern diese auch strukturieren.  So erfolgt der Austausch in der Agilen Schule analog zu professionellen agilen  Projekten bspw. vor dem Hintergrund der täglichen Absprachen (↑ Stand-upMeeting), zum Besprechen des Vorgehens bei der Projektumsetzung im Pla nungsmeeting (↑ Stand-up-Meeting und andere Besprechungsformen), beim  Beschreiben und Diskutieren konkreter Umsetzungen (↑ Pair-Programming),  beim Nutzen ↑ kollaborativer Werkzeuge, bei der Beurteilung des entwickel ten (Zwischen-)Produkts im Review (↑ Reflexion) sowie bei der Reflexion des  Arbeitsablaufs, der Zusammenarbeit und des Umgangs miteinander in der Re trospektive. Jede der Praktiken setzt auf Offenheit und Respekt im Gespräch, Agiles Arbeiten – ein Zusammenspiel aus Werten und Praktiken 27aber auch auf den Mut, beispielsweise Fehler anzusprechen und Wünsche zu  artikulieren, sowie auf Fokussierung. Die Kommunikation sorgt für Transparenz  und Feedback, da Informationen ausgetauscht, Entscheidungen gemeinsam ge troffen und fachliche Probleme ebenso wie Stärken und Schwächen des Teams  angesprochen werden. Nachdenken Der dritte zentrale Aspekt, das Nachdenken, löst insbesondere durch den ↑ ite rativen Prozess regelmäßig ein «Inspizieren und Adaptieren» aus. Dieses macht  das Team und seine Arbeit agil, indem es ein Lernen aus Fehlern und Erfahrun gen unterstützt, ein Verbessern in kleinen Schritten ermöglicht und die Umset zung von Änderungen begünstigt. Neben den kommunikativen Praktiken (↑ Re flexion in Review und Retrospektive) gehören dazu weitere wie ein konkretes  Prüfen und Korrigieren der erreichten Ergebnisse bezüglich der geplanten Ziele  (↑ Testen) vor einem Review, ein Überarbeiten der Struktur des Zwischenpro dukts (↑ Refactoring), ein Beschreiben des Erreichten (↑ Dokumentation) und  ein Überdenken und Ergänzen noch offener Aufgaben und ihrer Priorität. Die agile Szene drückt das, was für sie Agile Werte und agiles Handeln bedeuten,  gern auch in markanten Sprüchen aus (Abbildung 2.4). Abbildung 2.4: Markante Sprüche aus einem Alltag mit Agilen WertenHintergrund 28Das Agile Schulmanifest Das Agile Manifest von 2001 gilt als Start für einen Kulturwandel in der Soft wareentwicklung. In der Agilen Schule sind Agile Werte essenziell für das Ge lingen der Projekte sowie für die individuelle Entwicklung und den Lernprozess  der Schülerinnen und Schüler. Auf Grund unserer Erfahrungen auf dem Weg zu besseren Projekten haben  wir ein Agiles Schulmanifest formuliert (Abbildung 2.5). Es soll dazu anregen,  den Wandel auch in der Schule einzuleiten: Das Agile Schulmanifest Selbstverantwortliche Schülerinnen und Schüler   und ihre Interaktionen sind wichtiger als das kleinschrittige Befolgen einer Instruktion. Lernen aus Erfahrung und schnelle Erfolge sind   wichtiger als Vorabfundierung bis ins letzte Detail. Erkunden und Ausgestalten eines gemeinsamen Ziels sind wichtiger als das penible Einhalten von Vorgaben. Kreativität und Reagieren auf Gelerntes  sind wichtiger als das Befolgen eines starren Plans. Abbildung 2.5:  Manifest für einen agilen Wandel in der SchuleUnternehmen werden agil – Beweggründe und Erfahrungen 292.3 Unternehmen werden agil – Beweggründe  und Erfahrungen Warum werden immer mehr Unternehmen – nicht nur solche aus dem IT-Be reich – agil? Was bedeutet «agil werden» und «agil sein» für sie? Wie gehen sie  vor, welche Hürden gilt es zu überwinden und welche Erfahrungen machen sie?  Wir, die Autoren, haben nicht die Erfahrung Agiler Coaches, die unterschied lichste Teams dabei begleitet haben, agiles Denken und Handeln zu lernen, und  deshalb aus dem Nähkästchen plaudern können. Wir haben auch nicht erlebt,  wie es sich anfühlt, aus einem klassischen Prozess in einen agilen zu wechseln.  Aber wir haben Kontakt gesucht zu Profis aus der Praxis und haben insbesondere auf der «Agile Bodensee», der Konferenz für agile Softwareentwickler und  Projektentwickler im Bodenseeraum, über mehrere Jahre Einsicht gewonnen  in die agile Bewegung. Wir fühlten die Begeisterung und die Lust der Vortra genden, andere Teams zu unterstützen und etwas zu bewegen, indem sie ihre  eigenen Erfahrungen teilten, und wir saßen mit Teams am Mittagstisch, die erst  noch agil werden wollten und viele Fragen hatten. Die folgenden Ausschnitte  aus Berichten von Praktikerinnen und Praktikern illustrieren die Erfahrungen. «Einfach losgesprintet» – im agilen Testprojekt Stefan Kirch und Henning Pautsch berichteten auf der Agile Bodensee 2014 vom  Umstieg auf agile Methoden bei der Bauer+Kirch GmbH in Aachen: Ausgangspunkt des Ausprobierens agiler Methoden war, dass die Erfahrungen im  Unternehmen zunehmend eine Ahnung bestärkten, dass die klassische Art, Software  zu entwickeln, auf Dauer in eine Sackgasse führen würde. Ein idealer Zeitpunkt, um  ein agiles Vorgehen zu erproben, war gekommen, als ein hausinternes Werkzeug neu  entwickelt werden musste. Unglücklicherweise erkrankte gerade zu diesem Zeit punkt der Agile Coach, der das Entwicklerteam begleiten sollte. Was also tun? Zwar  finden sich in Büchern und Blogs viele Informationen zum methodischen Vorgehen,  aber sie können keine Erfahrungen ersetzen. Um die Gelegenheit nicht verstreichen  zu lassen, wollte man es dennoch wagen, und obwohl das Team keinen Coach haben  würde, wurde es auf den Weg geschickt. Bald mussten die ersten Entscheidungen Hintergrund 30getroffen werden: Wie lang sollte ein Sprint (↑ Iteration) dauern, also die Entwicklung  von jeweils einem weiteren Inkrement der Software? Eine Woche erschien dem Team  zu kurz, vier Wochen zu lang, also entschied es sich kurzerhand für zwei Wochen. Das  grundsätzliche Ziel wiederum war klar und einiges ergab sich im Verlauf des Pro jekts, etwa wie viel das Team in zwei Wochen schafft. Die Anforderungen in Form von    ↑ User-Storys wurden elektronisch erstellt, aber das Team wollte sie auch ausge druckt als Zettel an einem großen, übersichtlichen ↑ Project-Board an einer Wand im  Büro haben. Die detaillierten Teilaufgaben (↑ Tasks) wurden der Einfachheit halber  nur am  Project-Board verwaltet. Dort traf sich das Team auch jeden Morgen für 10  Minuten zum ↑ Stand-up-Meeting, um sich gegenseitig zu informieren. Bereits nach den ersten Sprints war sich das Team einig: Über die anstehenden  User-Storys zu sprechen und die Tasks gemeinsam zu planen, bringt alle fachlich  voran und liefert qualitativ bessere Entwürfe. Die Besprechungen des jeweiligen  Zwischenprodukts (↑ Prototyp) mit dem hausinternen Kunden motivieren: Rückmel dungen wie «Ja, genau so wollte ich das haben» spornen an. Es wurden auch Fehler  gemacht, diese waren aber stets mit einem Lerneffekt verbunden. Insgesamt ver lief das agile Testprojekt erfreulich erfolgreich, was unmittelbare Auswirkungen auf  weitere Projekte nach sich zog. Nicht nur die Entwicklerinnen und Entwickler dieses  Teams sprachen sich in neuen Projekten sofort für ein agiles Vorgehen aus, auch an dere Kolleginnen und Kollegen äußerten sich interessiert, wenn sie am Project-Board  vorbeigingen oder das Team bei der Arbeit erlebten. Ohne genau zu wissen, was da  gemacht wurde, sahen sie, dass die Beteiligten eine ganz andere Motivation hatten,  und meinten: «Das wollen wir auch!» Deshalb ist das Fazit von Kirch und Pautsch: «Sprinten Sie einfach los! Sprinten Sie  los, wenn Sie motiviert sind und wissen, dass nicht alles von Anfang an perfekt sein  wird. Schauen Sie sich an, was Sie falsch gemacht haben und versuchen Sie es beim  nächsten Mal besser zu machen – das ist erstaunlich einfach. Sprinten Sie los! Sie  werden feststellen, dass Ihr Team mit einer ganz anderen Motivation, mit einer ganz  anderen Identifikation an die Sache herangeht!» «Können wir das auch umsetzen?» – Wie die agile Denkweise alle ansteckt Robert Misch von gutefrage.net und Sascha Rehbock berichteten auf der Agile Bodensee 2014 über den agilen Wandel im ganzen Unternehmen: Es begann damit, dass die IT-Abteilung agile Methoden einführte. Schnell wurde  das auch für Kolleginnen und Kollegen aus anderen Abteilungen sichtbar: An den   Project-Boards mit den bunten Zetteln, an den täglichen Stand-up-Meetings sowie  generell an der gesteigerten Motivation. Klar, dass diese Änderungen ihre Neugier  weckten. Sie stellten Fragen – und wollten einen ähnlichen Prozess auch für sich  einführen. Deshalb organisierten die Agilen Coaches der IT-Abteilung bald auch für Unternehmen werden agil – Beweggründe und Erfahrungen 31andere Abteilungen Workshops, sodass sich die agile Arbeitsweise erst langsam und  dann immer schneller im Unternehmen ausbreitete: vom Community-Management  über Marketing, Sales und Finances sogar bis in die juristische Abteilung der Unter nehmensgruppe. Deren Leiter hatte zwar zunächst noch keine Vorstellung davon,  wie agiles Vorgehen in der Rechtsabteilung der Holding aussehen könnte, aber er  glaubte daran. Alle angepassten Prozesse bei gutefrage.net wurden nun iterativ aufgebaut und ins besondere drei agile Praktiken etablierten sich überall: Das Project-Board visuali siert die Arbeit im Team und schafft Transparenz. Damit kann fokussiert gearbeitet  werden, es lassen sich wiederkehrende Probleme im Arbeitsablauf identifizieren,  Veränderungen planen und deren Wirksamkeit prüfen. In einem täglichen Stand-upMeeting werden Informationen ausgetauscht und der Tag geplant, und nach jeder  Iteration werden Prozesse, Ergebnisse und die Zusammenarbeit in der ↑ Reflexion  bewertet und wo nötig Verbesserungen initiiert. Als wesentlicher Faktor für das Gelingen der agilen Transformation erwies sich, dass  alle im Team nicht nur etwas über agile Praktiken erfuhren, sondern verstanden, wel che Denkweise dahintersteckt. Da Agile Werte die gesamte Arbeitskultur verändern,  war es wichtig, den Teams genügend Zeit für die Umstellung zu lassen. Zuerst wurde  eine kleine Änderung eingeführt und begleitet. Daraus entwickelten sich adaptierte  Praktiken und die Teams verbesserten sich stetig.  Was die Mitarbeiterinnen und Mitarbeiter nach der agilen Transformation besonders  zu schätzen gelernt haben, ist unterschiedlich: Das Marketing-Team beispielsweise  schätzt die durch das Project-Board gewonnene Transparenz und insbesondere die  Priorisierung von Arbeiten: «Wir fangen weniger an, aber dafür wird mehr fertig. Das  hilft, sich auf Resultate zu fokussieren.» Die juristische Abteilung hat das Arbeiten in Paaren eingeführt. Nun ist nicht mehr  nur eine einzelne Person als Experte oder Expertin für einen Bereich verantwortlich.  Verträge werden nun zu zweit entworfen und gegenseitig begutachtet. «Wenn ich  jetzt krank werde oder in den Urlaub gehe», berichtete eine Juristin, «bin ich dank  der neuen Arbeitsweise entspannter, weil das Projekt trotzdem weitergeht.» Auch in  der Unternehmensgruppe ist die Erfahrung mit der neuen juristischen Abteilung sehr  positiv: Anfragen werden nun effizienter und besser bearbeitet. Die Managerinnen  und Manager begrüßten zwar die Motivation in agilen Teams, stellten sich aber bald  die Frage «Welche Aufgaben bleiben uns denn nun? Braucht es überhaupt noch eine  Kontrolle der Arbeitsprozesse?» Es ist verständlich, dass die Idee von selbstorga nisierten Teams sie zunächst verunsicherte. Ein Workshop zu «Management 3.0»  inspirierte sie jedoch und weckte die Experimentierfreude. Beispielsweise wurde  ein sogenanntes Delegation-Board installiert, auf dem alle sehen können, wer wel che anstehenden Entscheidungen treffen darf. Für die Teams ist diese Klarheit eine  große Hilfe.Hintergrund 32«Entscheidend ist der Kulturwandel» – Organisationsentwicklung   durch agile Transformation  Stefano Trentini, Leiter des Bereichs Software Engineering bei den Schweizerischen  Bundesbahnen (SBB) und Mischa Ramseyer, Agiler Coach bei pragmatic solutions,  berichteten auf der Agile Bodensee 2016 über den Beginn einer «agilen Transforma tion» bei den SBB: Wie kommt ein konservatives Traditionsunternehmen wie die SBB dazu, in seinem  IT-Bereich flächendeckend Agilität einführen zu wollen? Der Handlungsbedarf entstand, weil andere IT-Unternehmen zunehmend kundennäher arbeiten und ihre Produkte immer schneller, kostengünstiger, aber mit konstanter Qualität auf den Markt  bringen. Die einzige Möglichkeit, als unternehmensinterner Anbieter von IT-Lösungen  in diesem Umfeld konkurrenzfähig zu bleiben, war es, einen Paradigmenwechsel  einzuleiten. Entscheidend schien dabei nicht die Wahl eines bestimmten agilen  Frame  works, sondern vielmehr ein Kulturwandel. Dieser lässt sich nicht vorschreiben, vielmehr müssen die Beschäftigten mitgenommen werden. Das wurde erreicht,  indem dieser Kulturwandel bei den SBB anhand von fünf werteorientierten Prinzipien  beschrieben, kommuniziert und zunehmend umgesetzt wurde: Schaffe Wert und Nutzen! Bei den SBB wurde sehr langfristig und detailliert geplant  und jeder Bereich hielt sich stark an seine Pläne. Von dieser planorientierten Steue rung galt es nun zu einer Steuerung zu kommen, die stets dem jeweiligen Projektziel  dient und sich am Schaffen von Wert und Nutzen orientiert. Übernimm Verantwortung! Bisher trafen die Vorgesetzten die Entscheidungen und  übernahmen die Verantwortung, weshalb sich die Beschäftigten kaum innovativ  einbringen konnten. Als neues Ziel sollen die Mitarbeitenden mit der Zeit befähigt  werden, sich auf ihrem Fachgebiet mehr zu trauen und zu lernen, mit Verantwortung  umzugehen und vor allem Fehler offen zuzugeben. Unterstütze Veränderung!  Bei den SBB wird ein freundlicher und netter Umgang  gepflegt. Das führte in der Vergangenheit aber auch dazu, dass jemand, ehe er Kritik  an anderen übte, nach Behelfslösungen suchte. Um Veränderung zukünftig als positiv  wahrzunehmen und zu unterstützen, soll sich nun jeder und jede kritisch mit den  Ergebnissen der Arbeit auseinandersetzen und somit besser aus Erfahrungen lernen. Macht’s zusammen! Bisher hatte jede Person eine klar definierte Rolle, die ihre Tätigkeit festlegt und eingrenzt. Zukünftig sollen nun Aufgaben zusammen im Team  erledigt werden, ohne Rollen, und die Verantwortung soll dabei gemeinsam getragen  werden. Das bedeutet, dass die Teams eine funktionierende Form der Kooperation  entwickeln sollen. Mach’s einfach! Aus der Tradition heraus gab es bei den SBB seit jeher viele Regularien, Abläufe waren relativ kompliziert. Dinge einfach zu machen bedeutet, diese  Regularien sinnvoll abzubauen und es zu wagen, Entscheidungen mit dem gesunden  Menschenverstand zu treffen.Unternehmen werden agil – Beweggründe und Erfahrungen 33Nach der Einigung auf diese Prinzipien als Grundlage für den Wandel begann die  Umsetzung, wobei – wie im agilen Umfeld üblich – in kleinen Schritten, also iterativ  vorgegangen wurde. In jedem Quartal wurden Teilziele entsprechend der Priorisie rung mit Feature-Teams an einem Nachmittag geplant und während des Quartals  ausgearbeitet. Am Ende jeder Iteration wurden die Resultate präsentiert. So ist unter anderem ein Vorgehensmodell der SBB entstanden, das den werteorientierten  Rahmen vorgibt. Nun kann jedes Team, das in ein neues Projekt startet, für sich  selbst entscheiden, ob es sich an Scrum, Kanban oder einem anderen agilen Vorgehensmodell orientiert, denn jedes passt in den vorgegebenen Rahmen und erlaubt  es beispielsweise, während der Produktentwicklung regelmäßig zu prüfen, ob Wert  und Nutzen geschaffen werden. Zudem wurde Raum für Vernetzung und Dialog in der  Organisation geschaffen, damit jeder den Zielen Sinn geben und eigene Ideen entwi ckeln kann, unabhängig von seiner Aufgabe und Position im Unternehmen. Der Stand  der agilen Transformation wurde von Beginn an anhand von Kriterien gemessen. Die se Daten wurden um eine Selbsteinschätzung der Teams ergänzt und es zeigt sich  inzwischen: «Agilität ist bei den Mitarbeiterinnen und Mitarbeitern angekommen.  Agilität gilt als erstrebenswert.» Viel Zeit und Reflexion, laufende Anpassungen und  eine Begleitung waren dabei wichtige Faktoren.Im Unterrichtseinsatz Erfahrungen  mit agilen   Schulprojekten3 Im ersten Teil dieses Kapitels wird ein mehrfach erprobtes Beispiel vor­ gestellt, das die wesentlichen Kernideen agiler Projekte verdeutlicht.  Daran schließen Erfahrungsberichte agiler Schulprojekte an, die illus ­ trieren, wie agile Methoden bei unterschiedlichen Lerngruppen, fach­ lichen Vorkenntnissen und Zielsetzungen flexibel und gewinnbringend  eingesetzt werden können. Ziel dieser Berichte ist es, den Leserinnen  und Lesern Anregung zu geben, die Unterrichtsprojekte ihrer Schülerin­ nen und Schüler durch Auswahl und Anpassung agiler Praktiken indivi­ duell zu gestalten.3.1 Best Practice – das Spiel «Pengu» 373.1 Best Practice – das Spiel «Pengu» Ein lohnenswertes Projektziel ist für viele Schülerinnen und Schüler die  Konzeption und Implementierung eines Computerspiels. Sehr gut eig net sich das Jump-’n’-Run-Spiel «Pengu», bei dem eine Spielfigur auf ei ner bewegten Wolke über einen Abgrund gesteuert werden muss. Umge setzt wird dieses Szenario in diesem Beispiel mit Greenfoot. Greenfoot stellt  auf der Programmiersprache Java basierende Miniwelten zur Verfügung,  die insbesondere für zweidimensionale Spiele und Simulationen geeig net sind. Greenfoot ermöglicht es Programmieranfängern somit, die ob jektorientierte Programmierung auf interaktive Weise kennenzulernen.   Im Folgenden soll nun die Spielidee konkret mit Hilfe agiler Techniken und  Praktiken umgesetzt werden. Hierzu wird das Szenario zuerst in ↑ User-Storys  festgehalten und in ↑ Tasks aufgeteilt. Anschließend wird das weitere Projektvorgehen beschrieben.  Abbildung 3.1:  Das Pengu-Spiel Im Unterrichts einsatz 38Funktionalitäten in User-Storys festhalten User-Storys beschreiben in kurzer Form Funktionalitäten der zu entwickelnden  Software, die dem Nutzer zur Verfügung stehen sollen. Jede User-Story soll sich  dazu auf eine konkrete Aktivität beschränken und wird aus Sicht des Kunden  beschrieben. Typischerweise erfolgt die Erstellung der User-Storys unter Ein beziehung des Auftraggebers und erfordert domänenspezifisches Wissen aus  dem Kontext der zu erstellenden Software. In diesem Beispiel übernehmen die  Schülerinnen und Schüler selbst die Kundenrolle, um zu entscheiden, wie das  Spiel ausgestaltet werden soll. Deshalb ist es erforderlich, dass das Team eine  Vorstellung vom Spielfluss und den Möglichkeiten solcher Jump-‘n’-Run-Spiele  besitzt, um die Anforderungen klar aufzustellen und auch eigene Ideen mit ein zubringen. User-Storys helfen nun, das umfangreiche Spiel in kleine und damit  gut umsetzbare Teile zu gliedern. Als Grundsatz sollte für jede Aktivität einer  Figur (hier z.B. «Pinguin kann sich bewegen», «Wolke bewegt sich zwischen den  Klippen») eine eigene User-Story erstellt werden. Anhand der User-Storys kann  dann auch überprüft werden, ob etwas Wichtiges vergessen wurde. Abbildung 3.2:  Die ersten User-Storys zum Pengu-SpielTitel:  Spielfläche Beschreibung:  Ein Pinguin steht auf  einer Klippe, die durch einen Abgrund von  einer zweiten Klippe getrennt ist. Zwischen  den Klippen ist eine Wolke. Priorität:  10Titel:  Pinguin bewegen Beschreibung:  Der Spieler kann den Pin guin nach rechts und links bewegen. Der  Pinguin blickt dabei immer in Laufrich tung. Priorität:  20 Titel:  Pinguin fällt Beschreibung:  Wenn der Pinguin über  den Abgrund kommt, fällt er hinunter  und das Spiel ist zu Ende. Priorität:  303.1 Best Practice – das Spiel «Pengu» 39Die ersten drei User-Storys dienen in unserem Beispiel der Grundfunktio nalität des Spiels: «Spielfläche», «Pinguin bewegen» und «Pinguin fällt». Weitere  User-Storys beinhalten die nächsten Spielfunktionen sowie weitere Ausbaumög lichkeiten. Die Zettel zeigen die entsprechenden Beschreibungen der User-Sto rys sowie deren Prioritäten, welche die Bearbeitungsreihenfolge vorgeben. Da  alle drei User-Storys für das Spiel grundlegend sind, wurden sehr hohe Prioritä ten festgelegt (je kleiner die Zahl, umso höher die Priorität). Aus den Prioritäten  können auch implizite Abhängigkeiten ersichtlich werden (bspw. nur wenn das  Szenario erstellt ist, ergibt eine dazu implementierte Aktivität Sinn).  Die erste Iteration planen und Tasks erstellen Nach der Priorisierung der User-Storys wird im Team festgelegt, wie viele  User-Storys in der ersten ↑ Iteration umgesetzt werden sollen. Da die Schüle rinnen und Schüler zunächst noch wenig Erfahrung haben, den Arbeitsaufwand  für die Umsetzung der User-Storys einzuschätzen, erfolgt hier die erste Auswahl  «nach Gefühl». Hilfreich ist dabei, wenn die User-Storys anfangs sehr klein sind.  Wir wählen entsprechend die drei User-Storys mit der höchsten Priorität aus.  Nun werden diese User-Storys in Tasks gegliedert. Ein Task ist eine grobe Be schreibung eines überschaubaren Arbeitspakets, die auf einem eigenen Klebe zettel (Post-it) steht. Während User-Storys die Ziele des Pengu-Spiels aus Sicht  des Kunden beschreiben, müssen die Schülerinnen und Schüler nun ihre Pers pektive ändern und die Teilziele aus Sicht eines Softwareentwicklers betrachten.  Dabei sind bereits verschiedene Designentscheidungen zu treffen. Die resultie renden Tasks der drei User-Storys der ersten Iteration von Pengu sind in der  folgenden Abbildung dargestellt.  Titel:  Spielfläche Welt hat beim   Starten Himmel als  Hintergrund ➜ Klassenbild ändern. SZwei Felsen, links  und rechts, getrennt  von einem Abgrund  als neue 0bjekte  einfügen. MIm Unterrichts einsatz 40Abbildung 3.3:  Tasks als Planungsergebnis für die erste Iteration des Pengu-SpielsTitel:  Pinguin bewegen Ist die rechte Pfeil taste gedrückt, so  bewegt sich Pengu  nach rechts. SIst die rechte Pfeil taste gedrückt,  schaut Pengu nach  rechts. S Ist die linke Pfeil­ taste gedrückt,  schaut Pengu nach  links. SIst die linke Pfeil­ taste gedrückt, so  bewegt sich Pengu  nach links.  S Titel:  Pinguin fällt In der Klasse «Pinguin»  wird ein Attribut  «fällt» definiert und  im Konstruktor mit  «false» initialisiert. SWenn der Pinguin keine  Klippe berührt, wird das  Attribut «fällt» auf  «true» gesetzt und der  Pinguin bewegt sich   automatisch   nach unten. M Der Pinguin verschwin det am unteren Spiel feldrand ➜ Objekt  löschen. Das Spiel ist zu  Ende. LWenn der Pinguin im  Fallen eine Klippe  berührt, prallt er  ab. M3.1 Best Practice – das Spiel «Pengu» 41Es wird deutlich, dass Tasks auch konkrete, technische Begriffe oder kurze Quell codehinweise enthalten dürfen. Soll auch die Zeitplanung im Projekt berücksich tigt werden, wird zusätzlich eine ↑ Aufwandsabschätzung auf dem Task-Zettel  festgehalten. Im Beispiel wird eine relative Schätzung des Aufwands in Form  von den T-Shirt-Größen S, M und L vorgenommen. Die User-Storys und Tasks  der ersten Iteration werden nun auf die linke Seite des Project-Boards gehängt. Alles im Blick: Project-Board und Stand-up-Meetings Das ↑ Project-Board dient als zentraler Informationsund Organisationsort des  Projekts. Es visualisiert die Ziele und den Status der aktuellen Iteration und  unterstützt zielgerichtete Diskussionen anhand der angebrachten User-Storys  und Tasks. Zu Beginn einer Iteration befinden sich alle Karten auf der linken  Seite. Sobald ein Schülerpaar mit einer Aufgabe beginnt, wird ein Klebezettel  mit dem entsprechenden Task aus der To-do-Spalte genommen, mit Namens kürzel versehen (sodass alle Beteiligten genau sehen können, wer welche Tasks  übernommen hat) und in die Spalte «In Progress» gehängt. Sobald der Task be arbeitet wurde, wird der Klebezettel nach rechts auf «Done» verschoben. Das  Project-Board macht den Stand des Projektes sichtbar: Abbildung 3.4: Project-Board in einer Iteration Vor dem Project-Board finden auch die regelmäßigen ↑ Stand-up-Meetings  statt, in denen zu Beginn einer Unterrichtsstunde organisatorische Aspekte der  Projektdurchführung besprochen werden. Sie stellen eine geschickte Möglichkeit dar, den Stand des Projekts, das Geleistete der letzten Unterrichtsstunde  und Probleme, aber auch die Ziele des Tages zu besprechen. In der Regel sind  diese Meetings so kurz, dass es sich gar nicht lohnt, sich erst hinzusetzen. Durch  das Stehen bemüht sich auch jeder, sich kurz zu fassen und sich auf das Wesent -Im Unterrichts einsatz 42liche zu beschränken. Reihum beantwortet hier jede Schülerin und jeder Schüler  die Fragen: Was habe ich seit dem letzten Mal getan? Was werde ich heute in  Angriff nehmen? Welche Probleme hatte ich oder sehe ich auf mich zukommen  und welche Hilfe brauche ich? Schritt für Schritt vom Basic Pengu zum Advanced Pengu Nachdem die Planungsphase der ersten Iteration abgeschlossen und das Pro ject-Board eingerichtet wurden, beginnt nun die arbeitsteilige Implementie rung, bei der die Schülerinnen und Schüler immer paarweise (↑ Pair-Program ming) an einem selbst gewählten Task arbeiten. Während ein Schüler oder eine  Schülerin die aktiv programmierende Rolle übernimmt und dabei das Vorgehen  und die Arbeitsschritte erläutert, behält der oder die andere das große Ganze im  Blick und stellt ggf. Fragen, sodass fortwährend kommuniziert wird. Alle 15 Minuten werden die Rollen getauscht. Bevor ein Task als erledigt gekennzeichnet  werden darf, wird der resultierende Quelltext getestet. Am Ende der Implemen tierungsphase wird der neue Quelltext in die bestehende Codebasis integriert.  Eine Viertelstunde vor Ende der Doppelstunde sind alle drei User-Storys fertig  umgesetzt und integriert, sodass das Team auch das Ergebnis ausgiebig testen  kann. Sind alle Tests erfolgreich bestanden, ist der erste ↑ Prototyp des Pen gu-Spiels fertig und die somit vollständig bearbeiteten User-Storys können am  Project-Board in die Spalte «Done» gehängt werden. Ein Vorteil der iterativen Entwicklung ist es, dass die Schülerinnen und  Schüler die Möglichkeit bekommen, Prototypen des Spiels in verschiedenen  Entwicklungsphasen zu erstellen, auszuprobieren und dabei zu überprüfen, ob  die Teilziele erreicht wurden. Im «Pengu»-Beispiel wird die erste Iteration be stimmt durch die Herstellung der Grundfunktionalitäten des Spiels. Der Vorteil  der iterativen Vorgehensweise wird unmittelbar deutlich: Bereits so früh im  Projekt ist das Spiel «spielbar», der erste Erfolg kann bereits getestet und gegen über Mitschülerinnen und Mitschülern und der Lehrkraft demonstriert werden.  Sogar das Hinzufügen weiterer Spielideen (Features) oder ein Umpriorisieren ist  vor einer Iteration noch möglich, was bei linearen Vorgehensmodellen nahezu  ausgeschlossen wäre. Zum Abschluss jeder Iteration kann und sollte reflektiert  werden, wie gut der Prozess bis dahin gelaufen ist und ob sich das Team auf dem  richtigen Weg befindet (↑ Reflexion). In den weiteren Iterationen kommen nun nach und nach, der zuvor be stimmten Priorität entsprechend, die weiteren in den User-Storys festgehalte nen Funktionalitäten hinzu: das Bewegen der Wolke, Überqueren des Abgrunds  und Springen in Iteration 2, Punktezähler, Sternenhimmel und Sternesammeln 3.1 Best Practice – das Spiel «Pengu» 43in Iteration 3 sowie das Berücksichtigen verschiedener Leben und das Gewinnen  in Iteration 4. Erweiterungen des Spiels wie beispielsweise die Eiszapfen (Ab bildung 3.5) können als niedrig priorisierte User-Story je nach Zeitvorrat gegen  Projektende umgesetzt werden oder fallen weg.   Abbildung 3.5:  Aufteilen einer umfangreichen User-Story in Tasks In der Umsetzung des Spiels werden innerhalb jeder Iteration jeweils alle Phasen des klassischen Softwareentwicklungsprozesses (Anforderungsanalyse,  Entwurf, Implementieren, Integrieren und Testen) einmal durchlaufen. Die Aus der Sicht des Kunden: Titel:  Eiszapfentreffer Beschreibung:  Eiszapfen fallen zufällig nach  unten und verschwinden, wenn sie die Klippe oder  den Boden erreichen. Trifft ein Eiszapfen den  Pinguin, so ist der Pinguin für zwei Sekunden  bewusstlos. Priorität:  120 Implementiere das  Fallen der Eiszapfen.  Lösche Eiszapfenobjekte,  die die Klippe oder den  unteren Spielfeldrand  erreichen. MErzeuge fortlaufend  an zufälliger Stelle  am oberen Spielfeld rand Eiszapfen­ objekte. MErzeuge die Klasse   E i s z a p f e n .     S Implementiere zu  einem Treffer wäh rend des Sprungs  eine verzögerte Re aktion nach dem  Sprung. LVerhindere die Re aktion, wenn die  Attribute «faellt»  oder «springt» des  Pinguins «true»  sind. SImplementiere Reaktion des  Pinguins auf einen Eiszapfentreffer. Der Pinguin kippt  um und reagiert ca. 2 Sek.  nicht. Das Attribut «ist  bewusstlos» wird auf «true»  gesetzt. LAus der Sicht des Entwicklers:Im Unterrichts einsatz 44Schülerinnen und Schüler erhalten entsprechend die Gelegenheit, diesen Pro zess mehrfach in einem Projekt zu bestreiten und aus Erfahrungen zu lernen. Praxiserfahrungen Das beschriebene Spiel wurde inzwischen an verschiedenen Schulen in der Unterrichtspraxis, aber auch in Lehrerfortbildungen eingesetzt. Dabei war das Spiel  als Unterrichtsgegenstand sehr motivierend und die Methoden erwiesen sich  als sehr flexibel und für Projekte unterschiedlichster Ausprägungen geeignet.  So können sowohl die Lerngruppen, Vorkenntnisse als auch die zeitlichen Ge gebenheiten ganz unterschiedlich sein, weshalb in diesem Beispiel auf die Konkretisierung der Rahmenbedingungen verzichtet wurde. Schwierigkeiten ergaben sich mitunter aus der Notwendigkeit, die agilen Praktiken zuerst selbst  erfassen zu müssen, z.B. wie User-Storys formuliert sein sollen und wie man  diese in Tasks überführt. Mit diesem Beispiel ist nun eine Vorlage gegeben, die  zur Orientierung für das Erlernen agiler Techniken und Praktiken und die  Durchführung agiler Softwareentwicklungsprojekte im Informatikunterricht  dienen kann. Titel:  Spielfläche (10) Titel:  Pinguin bewegen (20) Titel:  Pinguin fällt (30)Titel:  Pinguin überquert Abgrund Beschreibung:  Der Pinguin kann auf der  Wolke stehen und bewegt sich mit ihr mit.  Der Spieler kann ihn auf der Wolke wie auf  den Klippen nach rechts und links bewegen. Priorität:  50 Titel:  Wolke, die sich bewegt Beschreibung:  Eine Wolke bewegt sich  automatisch zwischen den Klippen hin und  her. Priorität:  40Titel:  Pinguin springt Beschreibung:  Der Spieler kann den Pin guin springen lassen. Wenn der Pinguin  fällt, reagiert er nicht. Priorität:  603.1 Best Practice – das Spiel «Pengu» 45Abbildung 3.6:  Weitere User-Storys zum Pengu-SpielTitel:  Punktezähler Beschreibung:  Das Spiel hat einen   Punktezähler. Priorität:  70 Titel:  Sternenhimmel Beschreibung:  Es erscheinen Sterne am  Himmel, die dort unterschiedlich lange  stehen und dann wieder verschwinden. Priorität:  80 Titel:  Sterne sammeln Beschreibung:  Der Pinguin kann Sterne  einsammeln und erhält dafür Punkte.  Dazu kann er jetzt höher springen. Priorität:  90 Eiszapfentreffer (120)Titel:  Pengu hat drei Leben Beschreibung:  Der Pinguin hat drei Leben. Wenn  er von der Klippe fällt, verliert er ein Leben und  beginnt wieder oben auf der Klippe. Hat er kein  Leben mehr, ist das Spiel zu Ende. Priorität:  100 Titel:  Pengu gewinnt Beschreibung:  Sobald der Spieler mehr als 15  Punkte hat, erscheint auf der rechten Klippe eine  Tür. Erreicht der Pinguin die Tür, ertönt eine  Fanfare und der Spieler hat gewonnen. Priorität:  110Im Unterrichts einsatz 463.2 Im Anfangsunterricht durch Gestaltungsfreiräume begeistern  Ein Unterrichtsprojekt von Andreas Gramm Steckbrief Klassenstufe: 9 (Gymnasium, Wahlpflichtkurs) Klassenstärke: 20 Schülerinnen und Schüler Thema: Jump-’n’-Run-Spiel Besonderheiten: Kollaboration lernen, «geplant-unfertiges» Produkt,   Berufsbild Informatiker/Informatikerin  Agile Praktiken: Project-Board, User-Storys, Prototypen, Stand-up-Meeting,  Pair-Programming, Reflexion Programmiersprache/Entwicklungsumgebung: Scratch Dauer und Frequenz: sechs Wochen mit einer Doppelstunde pro Woche Zeitlicher Ablauf:    Im Anfangsunterricht durch Gestaltungsfreiräume begeistern  47Gerade im Anfangsunterricht geht es mir darum, erlebbar zu machen, dass im  Beruf der Informatikerin/des Informatikers das Gestalten von Produkten und  das Arbeiten im Team im Vordergrund stehen. Dabei ist es wichtig, sich gut zu  organisieren, um gemeinsam zu einem tollen Ergebnis zu kommen. Ziel und Mo tivation war es, den Schülerinnen und Schülern früh im Lernprozess zu zeigen,  wie sie mit ihrem Wissen schon selbst etwas schaffen können, und sie so für  das Fach zu begeistern und ihnen ein inspirierendes Berufsbild zu vermitteln. Ausgangspunkt meiner Projektgestaltung war die Frage, wie ich im ge gebenen zeitlichen Rahmen Vorgehensweisen bei der Entwicklung größerer  Softwaresysteme für Lernende auf motivierende Art und Weise umsetzen und  erlebbar machen kann. Ein typisches Problem, das ich in meinen bisherigen  plangetriebenen, wasserfallähnlichen Projekten beobachtet habe, ist, dass Schü lerinnen und Schüler mit ihrer Erfahrung kaum Anforderungen sinnvoll analy sieren und Software entsprechend entwerfen konnten. Bis sie über die Voraus setzungen verfügen, um solche Projekte anzugehen, ist bei vielen das Interesse  für das Fach schon der Auffassung gewichen, dass Informatik viel zu schwer  sei. Unzufrieden war ich auch damit, dass Tests aus Zeitgründen zurückgestellt  werden mussten und für eine Reflexion trotzdem viel zu wenig Zeit blieb. Deshalb fand ich ein iteratives Vorgehen sehr verlockend. Man hat hierbei  kurze Zyklen, sodass die Schülerinnen und Schüler in der ersten ↑ Iteration, den  agilen Prozess und die agilen Praktiken kennenlernen und das erste interessante  Zahnrädchen einer größeren Lösung entwickeln können. In den nächsten Itera tionen kommen Schritt für Schritt weitere Zahnrädchen dazu. Dieses iterative  Vorgehen ist mehr als die Aneinanderreihung von Umsetzungen kleiner, unab hängiger Probleme, denn die Teile fügen sich zu etwas Größerem zusammen.  Wenn dabei sechs Schülerinnen und Schüler in Kooperation arbeiten, entsteht  schnell etwas Spannendes. Das Endprodukt muss nicht perfekt sein, es muss  nicht jede Idee umgesetzt sein. Trotzdem haben die Schülerinnen und Schüler  einen lauffähigen ↑ Prototyp, den sie selbst gemeinsam entwickelt haben, und  sie wissen, dass und wie es weitergehen könnte.  Projektvorbereitung Rahmenbedingungen Für die Schülerinnen und Schüler war es ihr erstes Schuljahr mit Informatikun terricht. Das Projekt wurde in der frühen Phase des Kurses mit Scratch durchgeführt und es sollten exemplarische Komponenten eines Jump-’n’-Run-Spiels  entwickelt werden. Entgegen der Planung musste das Projekt zweimal für einen  längeren Zeitraum unterbrochen werden. So fanden je eine Doppelstunde für Im Unterrichts einsatz 48Vorübungen im Herbst und für die Formulierung der User-Storys im Januar statt  sowie vier Doppelstunden für die Realisierung im Frühjahr. Agile Praktiken in der Vorbereitung Vor dem Projekt hatten die Schülerinnen und Schüler grundlegende Programmierkenntnisse mit Scratch erworben und mit Kollisionen und Variablen wich tige Konzepte für das Spiel kennengelernt. Sie konnten auch Zustände und Ab standsveränderungen (z.B. die Anzahl der «Leben» einer Spielfigur) speichern  und wussten, wie eine Kollision als Ereignis erfasst werden kann. Auf dazu gehörige Arbeitsblätter mit erklärenden Beispielen konnten sie im Projekt zurückgreifen. Außerdem wurde vorbereitend auf das Projekt geübt, wie der Code  einzelner Figuren (Sprites) in Scratch exportiert und importiert wird, wobei  deutlich wurde, dass eine Quelltextintegration relativ einfach abläuft, solange  man nicht in gleichen Figuren arbeitet. Diese Übung haben die Schülerinnen  und Schüler im ↑ Pair-Programming durchgeführt und damit diese Praktik  bereits vorbereitend geübt. Warm-up-Spiel Als Einstieg wurde mit allen 20 Schülerinnen und Schülern gemeinsam das  Ball-Point-Game (↑ agile Spiele) gespielt, bei dem sie einen Heidenspaß hatten  und eine deutlich sichtbare Optimierung erzielten. Es war eine gelungene Mo tivation, die zeigte, wie wichtig Absprachen für eine erfolgreiche Kooperation  sind und wie man einen iterativen Prozess durch stringentes Planen, Handeln  und Reflektieren optimieren kann. Projektdurchführung Themenwahl und Teams Der Kurs wurde nun in drei etwa gleich große Gruppen geteilt, wobei die Schülerinnen und Schüler selbst die Teamzusammensetzung wählten. Sie waren von  Anfang an interessiert und konnten ihre Erfahrung mit Computerspielen beim  Sammeln und Diskutieren erster Ideen für ihr Jump-’n’-Run-Spiel einbringen.  Anschließend formulierten sie erste User-Storys, die sie in einer weiteren Dop -Im Anfangsunterricht durch Gestaltungsfreiräume begeistern  49pelstunde konkretisierten, um weitere ergänzten und am ↑ Project-Board be festigten. Auf eine Unterscheidung zwischen ↑ User-Storys und ↑ Tasks wurde  in diesem Projekt verzichtet, da sich in Scratch die Beschreibung aus Kunden und Entwicklersicht wenig unterscheidet. Zusätzlich wurde darauf geachtet,  dass die User-Storys klein waren, also nur wenige, einfache Aufgaben umfass ten. Eine ↑ Aufwandsabschätzung erfolgte relativ über die T-Shirt-Größen S,  M, L:  Abbildung 3.7:  Aufwandseinschätzung mit Hilfe von den T-Shirt-Größen S (small), M  (middle) und L (large) Eine logische Bearbeitungsreihenfolge ergab sich im Verlauf von selbst, d. h.  auf ein Priorisieren vorab konnte verzichtet werden, wodurch die Vorarbeiten  weiter verkürzt wurden. Stand-up-Meetings und Planung Die Umsetzung erfolgte in zwei Iterationen von jeweils zwei Doppelstunden.  Die zu Beginn jeder Doppelstunde stattfindenden ↑ Stand-up-Meetings gaben  den Lernenden eine Struktur vor, in der sie den Stand ihrer Arbeit selbstständig  rekapitulieren konnten. Anschließend planten sie für die kommende Doppel stunde, sodass es entsprechend zwei Planungen pro Iteration gab. Dieser Ablauf  mit zwei Planungen verhinderte, dass sich die Schülerinnen und Schüler Teile  ihrer Planung bis zur nächsten Doppelstunde merken mussten, und ermöglichte  gleichzeitig, nur jede zweite Doppelstunde zu integrieren und einen lauffähigen  Prototyp zu erzeugen. In den Planungen konnten weitere User-Storys ergänzt  werden, soweit dies die Umsetzung der Spielidee erforderlich machte. Falls am  Ende einer Doppelstunde nicht alle ausgewählten User-Storys umgesetzt wa ren, wurden sie in die Folgestunde geschoben, auch wenn sie so nicht mehr  Teil des jeweiligen Prototyps waren. Genauso gut konnten Programming-Pairs  auch nicht ausgewählte User-Storys vorziehen, wenn zu wenig Aufgaben geplant  waren. Titel:  Spielende Beschreibung:  Wenn die Figur ihr letztes  Leben verliert, fragt diese: «Wie heißt  du?». (Dann kommt der eingegebene  Name in die Highscore ­Liste.) Aufwand:  MIm Unterrichts einsatz 50Fragen und Probleme, die sich während der Umsetzung ergaben, konnten  von den Teams in zusätzlichen Spontan-Meetings vor dem Board gelöst wer den. Zwei oder drei Mal traten im Projektverlauf organisatorische bzw. fachliche  Probleme auf, die entweder alle hatten oder auf die sie in Kürze stoßen würden.  In diesen Situationen habe ich das Thema, beispielsweise das Abspeichern der  Dateien in einem für alle zugänglichen Netzlaufwerk, zu Beginn der folgenden  Doppelstunde kurz im Plenum aufgegriffen und, wenn es sich anbot, von einzel nen Teams erarbeitete Lösungen für das Problem dem gesamten Kurs vorstellen  lassen. Pair-Programming und Einzelarbeit zu Hause Die konkrete Umsetzung mit Scratch erfolgte im Pair-Programming, wobei der  Navigator aufgrund der wenigen Konzepte und Datenstrukturen, die bekannt  waren, weniger auf alternative Umsetzungsmöglichkeiten der konkreten Sto ry, sondern mehr auf das Zusammenspiel der unterschiedlichen arbeitsteilig  umgesetzten Spielereignisse achten musste. Wichtig war auch, dass der Dri ver stets seine Ideen bei der Umsetzung ausdrückte und die Schülerinnen und  Schüler so lernten, ihr Vorgehen beim Programmieren mit Worten zu beschreiben und kritisch zu hinterfragen. Wenn sie wollten, konnten die Schülerinnen  und Schüler sich ihr Projekt auf einen USB-Stick kopieren und daran zu Hause  weiterarbeiten. Die dabei umgesetzten Funktionalitäten mussten in der folgen den Doppelstunde dem Team im Stand-up-Meeting vorgestellt werden, ehe das  Team entschied, ob sie in das Projekt integriert werden durften. Teamarbeit und Transparenz Fast alle Schülerinnen und Schüler haben sich für ihr Projekt mitverantwortlich  gefühlt. Einzelne, die sich herausnehmen, gibt es wahrscheinlich immer, aber  hier ist ein solches Verhalten deutlich aufgefallen und es war für diejenigen  unangenehmer als gewöhnlich.  Reflexion Zum Abschluss des Projekts wurden die letzten Prototypen der drei Teams, die,  wie von mir zum Projektstart angekündigt, keine komplette Umsetzung des  jeweiligen Spiels waren, im Plenum vorgestellt, zusammen mit einer zu Hause vorbereiteten individuellen ↑ Reflexion des Projekts. Dabei berichteten alle  Schülerinnen und Schüler, viel über Softwareentwicklung und Kooperation im  Team gelernt zu haben. Letzteres wurde übereinstimmend wie folgt zusammengefasst: Absprachen treffen ist wichtig, aber mühsam und teilweise schwierig.  Aber ohne Absprachen kann eine produktive Zusammenarbeit nicht funktionie -Im Anfangsunterricht durch Gestaltungsfreiräume begeistern  51ren. Neben dieser Erfahrung war die Präsentation der Arbeitsergebnisse aber  vor allem von Stolz auf das Erreichte geprägt. Bewertung der kooperativen Projektarbeit  Eine Herausforderung stellt die ↑ Bewertung von Leistungen dar, die von der  Gruppe bzw. individuell in einem Projekt erbracht werden, da zwei unterschied liche Interessen kollidieren: Zum einen will ich die Schülerinnen und Schüler  befähigen, etwas zu tun, und gleichzeitig messe ich, was sie tun. Ein weiterer  Punkt ist die Frage, welchen Wert eine individuelle Idee hat und welcher Wert  der Fähigkeit der Gruppe, sie erfolgreich umzusetzen, zukommt. Nachdem die  Schülerinnen und Schüler ihre Projekte bereits weitgehend selbstorganisiert  durchgeführt hatten, war es mir wichtig, sie auch in den Prozess der Bewertung  einzubeziehen. Gemäß dem Prinzip einer Poolnote bekam jede Gruppe von mir  entsprechend ihrer Gesamtleistung eine Anzahl von Punkten. Die Aufgabe der  Gruppe bestand nun darin, sich auf eine Verteilung der Punkte auf die Grup penmitglieder zu einigen und sich so mit der Frage auseinandersetzen, welche  Fähigkeiten und Fertigkeiten jedes einzelnen Mitgliedes die Gruppe im Projekt  besonders gut vorangebracht haben und welche eher hemmend waren. Die so  erzielte Note umfasste sowohl die Leistung bezüglich des Produkts als auch den  Beitrag zur Zusammenarbeit. Zwei Gruppen haben sich sehr schnell geeinigt, die Punkte gleich aufzuteilen.  An dieser Stelle war es mir nicht wichtig, einzugreifen oder mir die Überle gungen darlegen zu lassen, da sich meiner Beobachtung nach alle für ein gu tes Arbeitsergebnis engagiert hatten. Interessant war eine Gruppe, in der es  Spannungen gegeben hatte: Eine leistungsstärkere Schülerin meinte, dass ihr  Beitrag mehr Anerkennung finden müsste, die anderen Gruppenmitglieder  betonten dagegen, dass erst die Tatsache, dass sie der Gruppe eine Überarbei tung zugesagt, das aber nicht eingehalten hat, ein besseres Gruppenergebnis  verhindert hat. Nach langer Diskussion mit wenig Verständnis für die jeweils  andere Position haben sie sich als Kompromiss auf die gleiche Punktzahl für  alle Gruppenmitglieder geeinigt. Die Schülerinnen und Schüler haben damit  eine sehr ambivalente Situation bewältigt, die ihnen auch im späteren Leben  begegnen wird.  Beobachtungen und Erfahrungen  Durch die agile Herangehensweise gelang es meinen Schülerinnen und Schü lern tatsächlich, bereits früh im Lernprozess gemeinsam, mit Begeisterung und  Spaß etwas Tolles zu schaffen. Da sich im Projekt der Ablauf einer Iteration Im Unterrichts einsatz 52wiederholte und eine klare Struktur hatte, musste ich nicht wie früher in was serfallähnlichen Projekten moderieren und den nächsten Schritt vorgeben. Die  Schülerinnen und Schüler arbeiteten eigenständiger und zunehmend selbst bewusster. Die positive Bestärkung der Selbstwirksamkeit durch die iterative  Vorgehensweise und die früh und regelmäßig in den Prototypen sichtbaren  Arbeitsergebnisse sehe ich sehr positiv. Die regelmäßigen und häufigen Anläs se zur Kommunikation in der agilen Arbeitsform boten den Schülerinnen und  Schülern, die zum größten Teil nicht deutscher Herkunftssprache waren, zudem  Gelegenheit zur Verbesserung ihrer Sprachkompetenz im Sinne einer Sprach bildung im Fachunterricht. Was mir gefehlt hat, war, dass die Schülerinnen und Schüler während des  Projekts in fachlicher Hinsicht nicht nur bekannte Fähigkeiten ausbauen und  vertiefen, sondern sich im Rahmen des Projekts auch neue Konzepte erarbeiten.  Im nächsten Projekt werde ich daher Anregungen bereitstellen, die die Erarbei tung neuer Fachkonzepte initiieren. Für mich sehr entlastend war, dass von Anfang an klar kommuniziert war:  Wir werden nur ein Stück des Spiels implementieren, es wird funktionieren,  aber nicht ausgereift sein. Es bestanden weder Anspruch noch Notwendigkeit, in  der gegebenen Zeit alle Funktionalitäten umzusetzen, um ein sinnvolles Produkt  zu haben. Auch wenn so nur kleine Funktionen entstanden sind: Die Schüle rinnen und Schüler haben erfahren, dass und wie sie gemeinsam selbst Informatiksysteme erschaffen und nach ihren eigenen Wünschen und Interessen  gestalten können, und waren nun hoch motiviert, weitere Themengebiete der  Informatik zu erarbeiten. Insofern ist die Entscheidung, derartige Projekte früh  im Schuljahr durchzuführen, sehr gut, weil es bei den Lernenden eine positive  Einstellung zum Fach erzeugt. Die agilen Methoden, mit denen ich dieses Ziel  tatsächlich erreichen konnte, sind für mich deshalb eine wirkliche Bereicherung. In der Oberstufe komplexe Anwendungssoftware agil entwickeln 533.3 In der Oberstufe komplexe Anwendungssoftware agil entwickeln Ein Unterrichtsprojekt von Peter Brichzin Steckbrief Klassenstufe: 11 (Gymnasium, Wahlpflichtunterricht) Klassenstärke: 20−25 Schülerinnen und Schüler Thema: Entwicklung einer Anwendungssoftware mit grafischer Benutzer oberfläche, persistenter Datenspeicherung und dynamischer Datenstruktur Besonderheiten: hohe Komplexität, stark leistungsinhomogene Schülergruppen, thematische Freiheit, methodische Varianten: Student-Story, Model ling-Story, digitales Project-Board  Agile Praktiken: Iterationen, Project-Board, User-Storys, Tasks, Prototypen,  Stand-up-Meeting, Pair-Programming, Repository, Testen, Timeboxing, Reflexion, Refactoring Programmiersprache/Entwicklungsumgebung: Java/BlueJ, Java Editor, IntelliJ  oder Eclipse Dauer und Frequenz: acht Wochen mit drei Stunden pro Woche Zeitlicher Ablauf:      Software (nach dem Wasserfallmodell) vollständig zu planen, dann einzelne  Komponenten umzusetzen, diese zusammenzuführen und zu testen, ist eine  sehr anspruchsvolle Aufgabe, die viel Erfahrung voraussetzt. Schülerinnen und  Schüler machen diese Erfahrung nur sehr selten: Selbst den Leistungsstärksten Im Unterrichts einsatz 54bereitet der Entwurf erhebliche Schwierigkeiten und die anderen können sich  nur wenig einbringen. Deshalb verpufft leicht die Begeisterung für die Entwick lung einer eigenen Software, wenn am Anfang erst zwei bis drei Wochen geplant  wird. Daneben gibt es noch eine weitere kritische Stelle: das Zusammensetzen  typischer Komponenten wie Logik, grafischer Benutzeroberfläche und Daten haltung. Egal wie oft man als Lehrkraft die Wichtigkeit guter Schnittstellen absprachen und eines rechtzeitigen Zusammensetzens betont, tendieren die  Schülerinnen und Schüler dazu, das Zusammensetzen zu verschieben, weil sie  mit ihren Komponenten noch nicht zufrieden sind. So musste ich mehrfach  miterleben, wie durch das späte Erkennen von unzureichenden Schnittstellenbeschreibungen aufwendige Korrekturen notwendig wurden und die verbleiben de Zeit (bis zum Schuljahresschluss) nicht reichte, um darauf zu reagieren. Das  resultierende unfertige Ergebnis, eine nur in Teilen laufende Software, ist nicht  nur für die Schülerinnen und Schüler unbefriedigend, sondern natürlich frage  ich mich als Lehrer auch, wie ich den Rahmen verbessern kann. Eine stärkere  Steuerung und Führung von meiner Seite aus ist keine Option, denn wesentliche  Ziele einer Projektarbeit sind sich selbst zu organisieren, eigene Entscheidungen  zu treffen und Verantwortung zu übernehmen. Das oben geschilderte Scheitern  beinhaltet eine oft (schmerzhafte) Erfahrung, die im Lernprozess aber sehr hilf reich sein kann. Damit jedoch am Ende ein Erfolg und damit Begeisterung für  das Erstellen einer Software im Team steht, sollten (unvermeidbare) Irrwege  und ihre Reflexion möglichst früh im Projektverlauf stattfinden. Genau dies ist  einer der Vorteile eines iterativen Vorgehens agiler Projekte mit einem schrittweisen Planen, einer frühen Integration und dem Lernen aus Fehlern. Weitere  Vorteile sind eine höhere Transparenz des Projektstands und Erfolgserlebnisse  durch funktionsfähige Prototypen. Projektvorbereitung Rahmenbedingungen Mittlerweile zum dritten Mal habe ich ein Softwareprojekt in der Oberstufe agil  angeleitet. Die Schülerinnen und Schüler bringen als Vorwissen einerseits aus  Jahrgangsstufe 10 Grundlagen zur objektorientierten Modellierung und Pro grammierung mit, andererseits aus Jahrgangsstufe 11 praktische und theore tische Kenntnisse zu den Datenstrukturen Liste, Baum und Graph. Der mit 26  Stunden ausgewiesene abschließende Lehrplanpunkt «Softwaretechnik» ermög licht eine ca. achtwöchige reine Projektphase bei drei Stunden Unterricht pro  Woche. Die Leistungsstärken der Schülerinnen und Schüler waren immer sehr  heterogen. Einige brachten bereits Erfahrungen, z.B. in der Programmierung In der Oberstufe komplexe Anwendungssoftware agil entwickeln 55grafischer Benutzeroberflächen und der Verwendung professioneller Entwick lungsumgebungen, ein, für andere war es bereits eine Herausforderung, auch  kleine Teilaufgaben innerhalb des Teams selbstständig zu lösen. Auf Eigeninitiative der Leistungsstärkeren nutzt ein zunehmender Teil der Schülerinnen  und Schüler im Projekt auch IntelliJ oder Eclipse, weil dort die automatische  Codegenerierung, die Einbindung von Bibliotheken und das Refactoring leichter  sind als in den sonst im Unterricht verwendeten didaktischen Entwicklungsum gebungen BlueJ und JavaEditor. Agile Praktiken in der Vorbereitung  In der Mittelstufe werden (bisher) bei uns Projekte nicht agil durchgeführt,  entsprechend sind agile Praktiken und Techniken für die Lernenden neu. Ein  wesentlicher Schlüssel für einen Projekterfolg ist meiner Meinung nach das  Kennenlernen und Einführen einzelner Techniken bereits im Vorfeld. Dies ist  im regulären Unterricht ohne Projektkontext für die Bausteine ↑ User-Sto rys, ↑ Tasks, ↑ Prototypen, ↑ Pair-Programming, ↑ Testen und ↑ Repositorys  sehr gut möglich. User-Storys: Bei jeder anwendungsbezogenen Aufgabe im regulären Unterricht  können zu Beginn eine Kundensicht eingenommen und Anforderungen in Alltagssprache formuliert werden. Tasks: Teilaufgaben aus Entwicklersicht ergeben sich automatisch bei der Im plementierung von User-Storys. Pair-Programming: Peer-to-Peer-Wissenstransfer, indem für einzelne Stunden  Leistungsstärkere mit Leistungsschwächeren ein Paar bilden und dabei der Leis tungsschwächere zur Rolle des Drivers verpflichtet wird. Prototyping: Im folgenden Kasten wird ein exemplarisches Prototyping prä sentiert, das im Unterricht (passend zum für mich gültigen Lehrplan) neue  informatische Inhalte im Anwendungskontext einer Patientenverwaltung für  ein Wartezimmer vergegenständlicht. Parallel zu den Lerninhalten wird über  mehrere Wochen im Kurs sukzessive eine einfache Software entwickelt.Im Unterrichts einsatz 56Beispiel eines Prototypings  Prototyp 1: Speicherung von Patientendaten in einem statischen Array mit den Zugriffsmöglichkeiten, vorne einen Patienten aus der Warteschlange zu entnehmen  und hinten einen neuen einzufügen. Prototyp 2: Eine dynamische Warteschlange, in der Objekte der Klasse PATIENT jeweils eine Referenz auf den nachfolgenden Patienten haben. Prototyp 3: Durch die Einführung einer Klasse KNOTEN wird die Struktur (Warte schlange) vom Inhalt (Patient) entkoppelt. Prototyp 4: Anforderungen, z.B. zum Einfügen von Notfallpatienten, führen zu neuen  Methoden und der Verallgemeinerung der Datenstruktur zu einer Liste. Prototyp 5: Umsetzung der Datenstruktur Liste mit dem Entwurfsmuster Kompo situm. Hinweis : Aus Sicht der Softwareentwicklung ist der Prototyp 5 eher ein ↑ Refactoring. Abbildung 3.8:  Prototyping für eine Patientenverwaltung Testen: Die Qualitätskontrolle gehört bei Lehrplaneinheiten mit Programmieren  zum Informatikunterricht dazu. In der Oberstufe bietet es sich beispielsweise  an, dass die Lehrkraft Testklassen verteilt und Schülerinnen und Schüler durch  das Ausführen von Testfällen die Qualität ihrer Programme selbst überprüfen  können. Sukzessive können die Schülerinnen und Schüler auch eigene Testklas sen schreiben. Auch der Einsatz eines Debuggers ist zu empfehlen, weil er ein  Verständnis für den dynamischen Ablauf eines Programms schafft und bei der  Fehlersuche hilfreich ist. Repositorys: Versionskontrollsysteme können im Unterricht bereits zur Ver teilung von Programmgerüsten und Musterlösungen verwendet werden. Au ßerdem lässt sich durch die Vorgabe einer abstrakten Oberklasse der Vorteil  verteilten Arbeitens sehr schön demonstrieren: Wenn in einer Klasse mit 20  Schülerinnen und Schülern jede und jeder 15 Minuten für das Schreiben einer  Unterklasse benötigt, dann hat man nach den 15 Minuten nicht nur eine, sondern 20 verschiedene Unterklassen. Wenn diese gesammelt und für alle sichtbar  vorliegen, ist das beeindruckend. Für ein Vertiefen dieser agilen Techniken und Praktiken fehlt meist die Zeit, aber  bereits dieser erste Einstieg ermöglicht zu Projektbeginn eine höhere Konzentration auf Inhaltliches.In der Oberstufe komplexe Anwendungssoftware agil entwickeln 57Warm-up Die Schülerinnen und Schüler erhielten zwei methodisch unterschiedliche Ein führungen in die agile Projektorganisation. Zunächst gab ein Kurzvortrag von  knapp 20 Minuten einen Überblick über die iterativ-inkrementelle Vorgehens weise als zentralen Prozessgedanken, die Planung von ↑ Iterationen mithilfe  von User-Storys und Tasks, Prototypen als Ergebnisse sowie die Methodenbausteine ↑ Timeboxing und Reflexionstreffen (↑ Reflexion).  Als zweiten Impuls wählte ich ein praktisches agiles Arbeiten. Dafür eignen  sich ↑ agile Spiele: Mehrfach habe ich die Marshmallow Challenge durchgeführt,  um das Prototyping begreifbar zu machen. Beim letzten Kurs bin ich aber dazu  übergegangen, den Schülerinnen und Schülern stattdessen eine konkrete Auf gabe zu geben, an der sie in sehr kurzer Zeit (75 Minuten) den agilen Prozess  kennenlernen können. Jedes Team sollte ein eigenes Backlog mit priorisierten  User-Storys für eine Lernkarten-Software erstellen. Zur ersten User-Story sollten Tasks skizziert und ggf. sogar die ersten Quelltextzeilen programmiert wer den. Die Teams wurden zufällig zusammengestellt, um eingespielte Banknachbarn zu trennen. Ziel war es, mit einer anschließend stattfindenden Reflexion  (20 Minuten) alle wesentlichen Bestandteile einer Iteration zu durchlaufen:  eigenständige Planung in unterschiedlichen Detailgraden, Implementierung  (war kein Schwerpunkt, weil die Schülerinnen und Schüler diese aus dem Un terricht kennen) und eine Prozessreflexion. Trotz der extrem kurzen Zeit gab es  gute inhaltliche Ergebnisse, wie die folgende Abbildung zeigt.  Titel:  Karten erstellen Beschreibung:  Der Nutzer kann neue  Lernkarten erstellen, indem er eine Frage  und die zugehörige Antwort eingibt. Priorität:  10Titel:  Karten speichern Beschreibung:  Die Lernkarten werden  dauerhaft gespeichert. Priorität:  15 Titel:  Abfrage durchführen Beschreibung:  Bei einer Abfrage werden  die Fragen in zufälliger Reihenfolge ge stellt. Die eingegebene Antwort wird mit  der Lösung verglichen. Priorität:  20Titel:  Gruppieren von Karten Beschreibung:  Jede Karte kann einem  thematischen Bereich, z.B. Geschichte,   Jgst. 10, DDR zugeordnet werden. Priorität:  30Im Unterrichts einsatz 58Abbildung 3.9:  Knapp formulierte User-Storys für eine Lernkarten-Software Die Reflexion brachte die folgenden wichtigen Punkte hervor. Teilweise sind sie  allgemeiner Art, teilweise als individuelle Anliegen meiner Schülerinnen und  Schüler zu verstehen. • Bei der Formulierung von User-Storys sind Stichworte zu wenig. • Die aktive Beteiligung aller Teammitglieder ist wichtig. (Einige äußerten im  Vorfeld die Sorge von Trittbrettfahrern im Projekt.) • Das unerklärte Einbringen von Konzepten, die über den bisherigen Unter richt hinausgehen, grenzt Schülerinnen und Schüler mit weniger Programmiererfahrung aus. Das KISS-Prinzip ist eine mögliche Lösung für dieses  Problem. • Mehrere Schülerinnen und Schüler äußerten den Wunsch, ein digitales Pro ject-Board führen zu dürfen, um auch von zu Hause darauf Zugriff zu haben. • Die knappe Zeitvorgabe macht es notwendig, sich für einzelne Aufgaben  Zeitrahmen zu setzen (↑ Timeboxing), um fokussierter zu arbeiten und «sich  im Kreis drehende» Diskussionen zu beenden. • Zentrale Werte wie Respekt, Mut, Zielstrebigkeit, Einfachheit und Feedback  werden angesprochen. Gegenüber einem agilen Spiel bestand der Vorteil diese Warm-ups darin, das  bereits eine ganze Iteration inklusive Reflexion durchlaufen wurde. Zudem erhielten die Schülerinnen und Schüler eine Vorstellung, wie die Arbeit in zufällig  ausgewählten Teams mit unterschiedlichen Leistungsniveaus funktioniert. Im  Gegensatz dazu stellt ein Einstieg durch ein agiles Spiel das Soziale und Emo tionale stärker in den Vordergrund. Ich wähle den Einstieg inzwischen immer  möglichst passend zu den Stärken und Schwächen der Schülerinnen und Schüler  des jeweiligen Kurses.Titel:  Statistik ausgeben Beschreibung:  Am Ende einer Abfrage runde wird eine Statistik des Ergebnisses  ausgegeben. Priorität:  40Titel:  Karten bearbeiten und löschen Beschreibung:  Die Lernkarten können  nachträglich bearbeitet bzw. gelöscht   werden. Priorität:  50In der Oberstufe komplexe Anwendungssoftware agil entwickeln 59Projektdurchführung  Themenwahl und Teams Die Schülerinnen und Schüler waren frei in der Themenwahl. Einzige fachli che Vorgaben waren, dass eine grafische Benutzeroberfläche, persistente Da tenspeicherung und dynamische Datenstrukturen Bestandteile der Software  sein müssen. Um die Themenwahl zu fokussieren, hatten vor Projektbeginn  alle Schülerinnen und Schüler den Arbeitsauftrag, über einen Forumseintrag  in der Lernplattform des Kurses ein Thema für das Projekt vorzuschlagen, was  u.a. zu folgenden Themenvorschlägen führte:  Spiele: Black Jack, Poker, Schach, Arcade-Game, Brettspiel TAC, Jump-’n’-Run,  Rubiks-Cube-Löser Anwendungssoftware: individualisierte Anzeige des Vertretungsplanes auf dem  Handy/Computer, digitales Hausaufgabenheft, Kassensystem für Pausenver kauf, Wettprogramm für die Fußball-WM, Kochbuch, Reiseführer, Führerschein training, Nachhilfevermittlung, eine Software für die Lehrmittelbibliothek und  ein Vokabeltrainer mit einem Beispielsatz zu jeder Vokabel. Ich stellte die eingebrachten Vorschläge vor, kommentierte diese (beispielsweise  sind reale Kunden wie bei der Bibliothekssoftware motivierend; eine Nachhilfe vermittlung ist nur sinnvoll als Webservice, der aber erst im Lehrplan der Jahrgangsstufe 12 Thema ist) und jedes Team konnte sich dann ein Thema wählen. Bei einer Teamgröße von sechs bis acht Mitgliedern musste ich pro Kurs drei  Themen betreuen. Zur Gruppeneinteilung habe ich abhängig von der jeweiligen  Lerngruppe folgende Verfahren erprobt, die jeweils unterschiedliche Vorund  Nachteile haben: • Gruppeneinteilung nach Themenwunsch, mit dem Vorteil, dass damit stark  auf die Schülerwünsche eingegangen wird. • Leistungshomogene Gruppeneinteilung, bei der sich jeder in der Gruppe  fachlich gleichermaßen einbringen kann und die Gefahr der Überforderung  Einzelner durch technisch anspruchsvolle Lösungsansätze anderer gering  ist; nach der Einteilung wählt die Gruppe ein Thema für sich aus. • Leistungsinhomogene Gruppeneinteilung, sodass pro Gruppe in etwa ein  gleiches Verhältnis von Leistungsstarken und -schwachen vorhanden ist.  Diese Variante hat den Vorteil des Wissenstransfers innerhalb der Gruppe,  sowie eine höhere Erfolgsquote für ein lauffähiges Endprodukt bei allen  Gruppen.Im Unterrichts einsatz 60Nachdem nun die Teams und Themen stehen, kann das Projekt beginnen. Da  Ziele und Umsetzung einzelner Methoden in den Kapiteln 4 und 5 ausführlich  beschrieben werden, gehe ich im Folgenden nur auf Besonderheiten ein. User-Story und die Varianten Modeling-Story und Student-Story  Der Beginn mit der (Grob-)Planung auf Ebene von User-Storys funktioniert sehr  gut, weil sich alle unabhängig von ihrer Programmiererfahrung gut einbringen  und die ersten Implementierungsschritte spätestens nach drei Schulstunden  beginnen können. Jedoch ist bei zunehmender Prototyp-Größe die Zahl der Klas sen nicht mehr so einfach zu überblicken bzw. kann es notwendig sein, dass eine  sehr zentrale Klasse zeitgleich von mehreren Paaren verändert werden muss.  Hieraus entsteht im Entwicklungsverlauf der Bedarf, einen Überblick über die  Klassen, deren Schnittstellen und ihre Beziehungen zu bekommen. An diesem  Punkt ist es sinnvoll, ein Klassendiagramm zu erstellen, welches die Grundlage  für weitere Überlegungen und Besprechungen ist. In der Regel muss ich den  Anstoß dazu geben. Passend zum agilen Projektablauf schlage ich dazu in einem  Planungsmeeting vor, eine von mir als Modeling-Story bezeichnete besondere  User-Story aufzunehmen. Im Nachgang zur Modellierung ist häufig ein Refac toring nötig. Modellieren und Refactoring brauchen zwar Zeit, sodass in dieser  Iteration weniger Funktionalitäten umgesetzt werden. Da das verteilte Arbeiten  danach aber wieder leichter geht, weil die Aufgaben und Schnittstellen klarer  sind, sehen die Schülerinnen und Schüler auch den Mehrwert. Ebenso ermuntere ich dazu, Student-Storys – spezielle User-Storys, in denen  Wissen aufgebaut wird – über das Project-Board einzupriorisieren. Deren In halte können Einarbeitung in neue Themen wie eine Datenbankanbindung sein  oder aber auch der Wissenstransfer von Leistungsstärkeren zu -schwächeren.  Da diese Lernprozesse Zeit benötigen, ist es wichtig, sie über das Project-Board  transparent zu machen und dann auch nach Beendigung mit einem Setzen auf  «Done» zu feiern. Iterationen und Prototypen lösen die Schnittstellenproblematik Als Iterationsintervall haben sich zwei Wochen (sechs Schulstunden) bewährt.  Damit sind vier Iterationen möglich. Weniger Iterationen sind ungünstig, da die  Teams bereits zwei Iterationen benötigen, um richtig produktiv zu werden  (bspw. für die Teamentwicklung und Schwerpunktsetzungen der einzelnen Mit glieder: Wer kann sich in welchem Bereich am besten einbringen?). Spätestens  beim Prototyp nach der zweiten Iteration muss entsprechend der oben beschrie benen Schnittstellenproblematik ein Zusammenführen der einzelnen Schichten  erfolgen (Abbildung 3.10), da nur so ungenaue Schnittstellenabsprachen zwi -In der Oberstufe komplexe Anwendungssoftware agil entwickeln 61schen Teilgruppen des Teams frühzeitig erkannt und korrigiert werden können.  Das ist eine harte Vorgabe, die ich regelmäßig kommuniziere. Erstaunlicherwei se wird sie von den Schülerinnen und Schülern besser angenommen, als es bis her im wasserfallartigen Prozess der Fall war. Eventuell ist die Ursache der hö heren Erfolgsquote auch die strukturell vereinfachte Selbstorganisation, die den  Leistungsstärkeren Freiraum verschafft, um die Integration voranzutreiben.  Abbildung 3.10: Inkrementelle Softwareentwicklung über mehrere Schichten Vom erweiterten zum digitalen Project-Board  In meinen Projekten hat sich eine zusätzliche Spalte beim Project-Board be währt, in der zu Beginn jeder Iteration ihr Ende eingetragen wird und dieses  dadurch transparent dargestellt ist (↑ Timeboxing). Weiterhin gibt es einen  Platz, in dem Fragen und Probleme (an die Lehrkraft) kommuniziert sowie Ide en festgehalten werden können, die noch nicht über User-Storys einpriorisiert  sind (Abbildung 3.11).  Während das Board am Anfang meist sorgfältig aktualisiert wird, lässt dies  im zunehmenden Verlauf oder bei Hektik nach. Hierauf muss die Lehrkraft ein  Auge haben. Abbildung 3.11:  Modifiziertes Project-BoardIm Unterrichts einsatz 62Zunehmend äußerten Schülerinnen und Schülern den Wunsch, ein digitales  Project-Board zu führen. Von entsprechenden professionellen Werkzeugen rate  ich ab, da sie eine Einarbeitungszeit erfordern und teilweise einen sehr starren  Prozessablauf fest vorgeben. Mit kostenlosen Werkzeugen wie Trello oder den  Zusatzfunktionalitäten zur Projektabwicklung in github habe ich dagegen be reits positive Erfahrungen gesammelt. Als Lehrer kann ich die Schülerinnen  und Schüler dahingehend beraten, dass den Vorteilen eines häuslichen Zugriffs  und von elektronischen Klebezetteln, die nicht herunterfallen oder verloren ge hen können, die Nachteile des reduzierten Erlebens des Umhängens und ggf.  weniger Übersicht beim Stand-up-Meeting gegenüberstehen. Aus Lehrersicht  schätze ich digitale Project-Boards sehr: Die Transparenz, wie aktiv ein Team  oder einzelne Teammitglieder sind und an welchen Inhalten aktuell gearbeitet  wird, bietet mir sehr konkrete Ansatzpunkte für Feedbackgespräche. Letztendlich sollte in der Oberstufe das Team aber selbst über die Ausgestaltung des  Boards entscheiden.  Mit Meetings unterschiedliche Reflexionsprozesse initiieren Bei den Meetings orientiere ich mich an der Praxis in Unternehmen: Im Standup-Meeting zu Beginn einer Unterrichtsstunde kommuniziert jedes Teammitglied bzw. jedes Paar knapp und präzise, welche Aufgaben es bearbeitet hat und  was es als Nächstes plant. Hier wird auch deutlich sichtbar, wer sich wie stark  engagiert, ebenso zeigen sich unterschiedliche gruppendynamische Prozesse.  Gegebenenfalls werden kurze Hinweise zum Lösungsweg ausgetauscht (insbe sondere, wenn Schnittstellen betroffen sind). Aber ich achte stark darauf, dass  eine maximale Dauer von 10 Minuten eingehalten wird. Davon abzugrenzen sind der zweiwöchentliche Rückblick auf die inhaltliche  Arbeit im Review mit der Vorstellung des Prototyps sowie die prozessbezogene  Retrospektive (↑ Reflexion in Review und Retrospektive) und auch die Iterationsplanung. Zeitlich müssen die Teams ein gutes Aufwand-Nutzen-Verhältnis  finden: Wenn es im Team rumort, dann sind 20 Minuten Retrospektive sehr  wertvoll, wenn es läuft, ist diese Zeit besser beim Implementieren aufgehoben.  Abhängig von meinen Beobachtungen steuere ich einen Aspekt für die Retros pektive bei, z.B. «Sind alle unabhängig von ihren Implementierungserfahrungen  im Projekt angekommen und integriert?» oder «Wurde auf Zeitrahmen geachtet,  um fokussiert einzelne Arbeitspakete mit Blick auf den Prototyp zu bearbeiten?» Mit Repositorys kollaborativ an komplexen Projekten arbeiten In dem ersten von mir betreuten Oberstufenprojekt war es keine Seltenheit, dass  ein gesamtes Team blockiert wurde, weil ein einzelnes Mitglied krank war oder In der Oberstufe komplexe Anwendungssoftware agil entwickeln 63seinen USB-Stick mit der neuesten Version zu Hause vergessen hatte. Auch emp fand ich es als Nachteil, dass am Ende einer Iteration oft leistungsstarke Schülerinnen und Schüler für längere Zeit damit beschäftigt waren, alle Quelltextbe standteile des Teams zusammenzufügen, insbesondere weil die Integration eine  wichtige informatische Kompetenz ist und jedes Paar hier (auch aus Fehlern)  sehr viel lernen kann. ↑ Repositorys lösen diese Probleme und sind daher gerade  bei umfangreicheren Softwareprojekten in einer größeren Gruppe ein wichtiges  Werkzeug, um kollaboratives Arbeiten zu unterstützen. Da mittlerweile Versi onsverwaltung auch direkt über typische schulische Entwicklungsumgebungen  wie BlueJ und den JavaEditor möglich ist, nutze ich diese Technik. Sie erleichtert  nicht nur die Arbeit der Schülerinnen und Schüler, sondern gibt mir auch jeder zeit einen Einblick in den Aktivitätsgrad und in den aktuellen Stand.  Beobachtungen und Erfahrungen Lehrerrolle und Agile Werte Die verstärkte Selbstorganisation der Schülerinnen und Schüler ermöglicht mir  als Lehrer einen Rollenwechsel. Als Beobachter kann ich gerade auch kommunikative und gruppendynamische Aspekte im Auge behalten, in einer Art Kundenrolle Anforderungen und Hilfen über Student-Storys und Modelling-Storys  einfließen lassen oder einfache technische Probleme aus dem Weg räumen. In  der Anfangsphase ist es wichtig, (zu) hohe Ansprüche der Schülerinnen und  Schüler an ihre Software ins Verhältnis zur Zeit von acht Wochen zu setzen.  Zu den Hilfen gehört auch, immer wieder an Agile Werte zu erinnern, wie z.B.  Einfachheit, Fokussiertheit, Mut, Dinge auszuprobieren, Fehler zu machen und  Fragen zu stellen, sowie an den regelmäßigen Rollenwechsel beim Pair-Pro gramming. Die Übersicht aus Abbildung 2.3 hängt bei uns an exponierter Stelle im Computerraum. Bei recht unterschiedlichem Engagement der einzelnen  Mitglieder eines Teams – diesbezüglich unterscheidet sich der Projektunterricht  nicht vom normalen Unterricht – kann der Lehrer neben eigenen Rückmeldungen auch ein ↑ Feedback auf Teamebene initiieren.  Die interne Organisation konnte jedes Team für sich frei gestalten. Bis auf  wenige Ausnahmefälle, in denen sich Einzelne ausklinkten, weil sie das Fach  nicht weiter belegen, übernahmen die Schülerinnen und Schüler recht selbstver ständlich diese Verantwortung, beispielsweise die Gesprächsleitung, gegenseiti ge Unterstützung, Aufgabenverteilung und Paarauswahl. Ein sehr positives Beispiel für eine solche individuelle Gestaltung war eine Gruppe, die durch selbst  initiierte Teambesprechungen einen Wissenstransfer von einzelnen Paaren zu  den anderen Gruppenmitgliedern bewirkte. Im Unterrichts einsatz 64Projektergebnis und Lernprozess Das Oberstufenprojekt habe ich bereits mehrfach durchgeführt, und da jedes  Team anders arbeitet, sind meine Erfahrungen vielfältig.  Agile Methoden sind kein Garant für ein Gelingen. So gab es eine Gruppe,  die an mangelhafter Kommunikation und häufigen Absenzen der implemen tierungsstarken Schülerinnen und Schüler, ohne den aktuellen Stand des  Quelltextes weiterzugeben, scheiterte. In einem anderen Fall hatte ein zu engagiertes Teammitglied die Implementierung ohne Absprache mit dem Team  in Einzelarbeit vorangebracht. Als Ergebnis war dann zwar ein Prototyp lauf fähig, allerdings wurden damit verschiedene Beiträge anderer Teamkollegen  ersetzt, die infolgedessen in den Papierkorb wanderten. Aufgrund des nur mit  den Änderungen funktionierenden Prototyps fehlte den Teammitgliedern der  Mut, entschieden ein Veto zu ergreifen. In diesem Fall kam leider die Retros pektive zu spät, die Motivation im Team sank in den Keller. Als Lehrer habe ich  Abbildung 3.12:  Ausschnitt des Klassendiagramms zum digitalen Hausaufgabenheft<<abstract>> Task String description Calendar deadline int priority Lesson int length Subject subjectSubject ArrayList<Homework> homework ArrayList<Grade> grades String name String shortName + void addNewGrade(grade) + float calculateAverage()Schedule SchoolDay Lesson[] lessons +Lesson getLesson(index) + void setLesson(index, lesson)Reminder HomeworkIn der Oberstufe komplexe Anwendungssoftware agil entwickeln 65die hohe Bedeutung der regelmäßigen Retrospektive mitgenommen und werde  in zukünftigen Projekten auch einen ausreichenden Zeitraum dafür einplanen.  Im letzten Oberstufenkurs gab es ein Team mit einem ebenfalls in Softwareent wicklung sehr erfahrenen Schüler. Dieser bestand darauf, vor der Implemen tierung mit einem ausführlichen Entwurf in Form eines Klassendiagramms zu  beginnen. Dabei schaffte er es aber, durch viele Erklärungen auch leistungs schwächere Teammitglieder ins Boot zu holen. Diese lobten das Vorgehen in der  abschließenden Retrospektive, weil sie durch das gemeinsame Entwickeln des  Klassendiagramms (Abbildung 3.12) viele Zusammenhänge verstanden haben. Trotz dieser Herausforderungen ist insgesamt ein höherer Erfolg bei der agi len Vorgehensweise deutlich sichtbar. Messbar ist dieser an der entwickelten  Software, die in am Wasserfallmodell orientierten Projekten nie über eine Al pha-Version hinauskam, neuerdings jedoch regelmäßig ein Release-Niveau erreicht. Die Schulbibliothekssoftware (Abbildung 3.13) wurde sogar unmittelbar  nach Projektende von der Lehrmittelbücherei eingesetzt.  Zentrale Gründe für den Erfolg sind aus meiner Sicht einerseits das Proto typing, das die Schnittstellenprobleme deutlich reduziert, sowie eine Unterstüt zung von eigenverantwortlichem und (dennoch) fokussiertem Arbeiten durch  agile Praktiken. Das zeigt die positive Wirkung agiler Methoden beim kollabo rativen Arbeiten in Projekten. Deshalb hoffe ich, dass diese in Zukunft häufiger  in der Schule (und nicht nur im Informatikunterricht) eingesetzt werden. Abbildung 3.13:  Menüführung der Bibliothekssoftware: oben links: Auswahl Austeilen oder  Einsammeln; rechts Auswahl des Schülers/der Schülerin – Anzeige entsprechend der Na menseingabe; unten links: Eingabe der ISBN über das Textfeld oder einen Barcode-Scanner Im Unterrichts einsatz 663.4 Agile Softwareentwicklung als ganzjährige  Lernmethode im Pflichtunterricht  Ein Unterrichtsprojekt von Ulrich Kiesmüller Steckbrief Kassenstufe: 10 (naturwissenschaftlich-technischer Zweig eines Gymnasiums,  Pflichtunterricht) Klassenstärke: 25–30 Schülerinnen und Schüler Themen: Spielautomat, Arcade-Game, Animationen Besonderheiten: Selbstorganisiert Fachund Sozialkompetenzen entwickeln,  Kundengespräche, Truck-Factor-Check Agile Praktiken: Project-Board, User-Storys, Tasks, Stand-up-Meeting,   Pair-Programming Programmiersprache/Entwicklungsumgebung: Java/BlueJ Dauer und Frequenz: Ganzjährig (inklusive Vorbereitungszeit), mit einer Doppel stunde pro Woche Zeitlicher Ablauf:                       Nachdem sich die Schülerinnen und Schüler in der 10. Klasse mit den Grund lagen der objektorientierten Modellierung und Programmierung beschäftigt  haben, ist im Curriculum ein kleines Softwareprojekt vorgesehen. Es soll den  Lernenden vermitteln, dass man umfangreiche Aufgaben nur mit sorgfältig ge plantem, strukturiertem Vorgehen lösen kann. In der praktischen Umsetzung Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht  67erlebte ich allerdings wiederholt, dass Schülerinnen und Schüler in Projekten  zwar sehr motiviert sind, aber in den zehn Unterrichtsstunden, die der Lehrplan  vorsieht, keine brauchbaren oder gar spannenden Produkte umsetzen können.  Deshalb habe ich in den letzten Jahren die Projektphase erheblich ausgedehnt.  Ich begann nun früh im Lernjahr und unterbrach die Projektarbeit regelmäßig  meist zu Beginn jeder Doppelstunde, um weitere Lerninhalte zu integrieren.  Dabei habe ich mich an dem in mehreren Schulbüchern und didaktischen Lehr büchern beschriebenen Vorgehen nach dem Wasserfallmodell orientiert, das  auch der Oberstufenlehrplan in Bayern vorgibt. Das Projekt war entsprechend  in Phasen unterteilt, deren Abfolge sich am Lebenszyklus von Software orien tierte. Problematisch bei diesem Vorgehen war, dass die Lernenden zu Beginn  des Projekts weder über die fachlichen und planerischen Fähigkeiten verfügten,  die ein lineares Prozessmodell voraussetzt, noch in der Lage waren, selbstständig strukturiert vorzugehen. Deshalb waren sie immer stark auf Unterstützung  angewiesen. Für mich als Lehrkraft bedeutete das einen enormen Betreuungs aufwand, und entsprechend langsam war der beobachtbare Projektfortschritt.  Am Ende des Schuljahres waren die Schülerinnen und Schüler zwar stolz auf  ihr Produkt, bemängelten aber regelmäßig das lange Warten auf Unterstützung.  Besonders unbefriedigend für mich war, dass ich trotz der langen Projektlaufzeit  typische Ziele wie selbstständiges Arbeiten, Kreativität und kritische Reflexion  wenig berücksichtigen und Fähigkeiten wie Entscheidungsfindung und einen  konstruktiven Umgang mit Konflikten im Team kaum fördern konnte. Im Einsatz agiler Methoden sah ich die Möglichkeit, es den Lernenden durch  iteratives Vorgehen zu ermöglichen, mit vorhandenen fachlichen, sozialen sowie  organisatorischen Fähigund Fertigkeiten, unterstützt durch ausgewählte agile  Praktiken, selbstorganisiert loszulegen und ihre Kompetenzen in jeder Iteration  auszubauen.  Projektvorbereitung Rahmenbedingungen Das Projekt fand erstmals 2013 in zwei Klassen statt und wird seither jedes Jahr  ähnlich durchgeführt. Die Computerräume sind mit 20 Einzelrechnern ausge stattet und ihre Größe bietet jeder Gruppe Platz für ihr ↑ Project-Board sowie  für die davor stattfindenden Diskussionen und Planungen, ohne dass sich die  Schülergruppen dabei gegenseitig stören. Die Vorkenntnisse im Bereich der  Objektorientierung aus der 6. Jahrgangsstufe und der Algorithmik aus der 7.  Jahrgangsstufe sind bei den meisten Schülerinnen und Schülern gering. Zur  Verfügung stehen den Lernenden eine vorgegebene Java-Klasse, die es erlaubt, Im Unterrichts einsatz 68einfache geometrische Objekte in einigen wenigen Farben grafisch darzustellen,  sowie das Buch «Java ist auch eine Insel» als weiteres Hilfsmittel. Agile Praktiken in der Vorbereitung des Projekts Vor dem Projektstart werden die grundlegenden Voraussetzungen bezüglich der  objektorientierten Modellierung und Programmierung sowie des Einsatzes ge eigneter Werkzeuge vermittelt. Parallel dazu werden erste agile Praktiken und  Techniken angepasst in den Unterrichtsverlauf integriert. In den beiden folgen den Abschnitten beschreibe ich das Vorgehen und dahinterstehende Intentionen  exemplarisch.  Kundenwünsche: Aspekte der Anforderungsanalyse  Da die objektorientierte Modellierung dazu anhält, sich zunächst über die in  einem Programm enthaltenen Klassen Gedanken zu machen, beginnen wir mit  der Modellierung von einfachen Grafiken, deren Bestandteile über «ist-ein»-Be ziehungen auf die Klassen «Kreis», «Rechteck» und «Dreieck» Bezug nehmen.  Nach einem Theorie-Input zur Erstellung von Klassendiagrammen erhalten  die Schülerinnen und Schüler eine einführende, explizit unkonkrete Aufgabe,  die sie in drei Gruppen unabhängig voneinander kooperativ modellieren sollen.  Eine beispielhafte Aufgabe lautet: «Baut mir ein Haus!» Sie ist bewusst offen  formuliert, um alle erst einmal zum Arbeiten zu bringen und die Notwendig keit der Präzisierung von Anforderungen zu verdeutlichen. Der Ablauf ist etwa  so, dass die Teams zumeist viele Details wie einen Pool oder Balkon planen. Im  Folgenden gibt es mehreren Feedback-Schleifen, in denen ich als Kunde das  Ziel mit den jeweiligen Teams präzisiere. Dabei lenke ich die Schülerinnen und  Schüler schrittweise dahin, ein «sehr einfaches» Modell zu erstellen, das so auch  ein erstes Zwischenziel des späteren Projekts sein könnte. Das Ergebnis ist ein  Klassendiagramm, das die Klassen «Kreis», «Rechteck» und «Dreieck» nutzt, um  die verschiedenen Bestandteile des geplanten Hauses darzustellen. Die Planung der Aufgabe erfolgt in einem Planungsmeeting (↑ Stand-upMeetings und andere Besprechungsformen). Die Lernenden üben dabei wesent liche Aspekte der Anforderungsermittlung: Sie präzisieren Kundenwünsche,  führen konzentrierte Diskussionen, holen sich von mir als Kunden in Kun dengesprächen wiederholt Feedback und einigen sich auf einen gemeinsamen  Plan. Das Planungsmeeting und die Kundengespräche finden im Stehen vor dem  Project-Board der Gruppen statt, das hier noch eine freie Planungsfläche, aber  zugleich bereits ein zentraler Arbeitsbereich ist. Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht  69User-Storys und Tasks: Von der Kundensicht zur Entwicklersicht  Im weiteren Verlauf werden Grundlagen der objektorientierten Programmie rung und der algorithmischen Grundstrukturen vermittelt. Die Arbeitsaufträge  werden von mir in Form von Kundenwünschen (vergleichbar mit ↑ User-Storys)  erteilt, die zunächst sehr klein sind. Die Schülerinnen und Schülern setzen sie in  Paaren um (↑ Pair-Programming) und fassen so von Anfang an ihre Programmiertätigkeiten in Worte. Themen und Aufgabenstellungen der Arbeitsaufträge  werden so gewählt, dass User-Storys, ↑ Tasks und erstellter Quelltext für das  spätere Projekt angepasst und dort integriert werden können. Gegen Ende dieser Phase werden Kundenwünsche auch gezielt offener formuliert (Abbildung 3.14), um Spielraum für eigene Interpretationen zu schaffen  und um die Lernenden die Tasks selbstständig identifizieren und formulieren  zu lassen. So führte ich sie schrittweise an den Perspektivwechsel von der Kundenzur Entwicklersicht heran. Abbildung 3.14: Verschiedene Schülerinterpretationen des Kundenwunsches «Ich möchte, dass sich ein Kreis in einem Kreis bewegt» Die in dieser Phase gebildeten Gruppen haben stets wechselnde Zusammensetzungen, damit sich keine eingespielten Rollenverteilungen herausbilden und die  Schülerinnen und Schüler unterschiedliche Herausforderungen kooperativen  Arbeitens bewältigen lernen. Warm-up-Spiel Um den Schülerinnen und Schülern spielerisch eine Idee von agiler Projektarbeit zu vermitteln und ihnen Mut zu machen, wird vor dem Einstieg ins Projekt  das Ball-Point-Game (↑ agile Spiele) durchgeführt. Hierbei erfahren sie die  Bedeutung von gemeinsamen Absprachen, die Vorteile kurzer, iterativer Ent wicklungsphasen (flexible Reaktion auf Änderungen, stete Verbesserung der  Im Unterrichts einsatz 70eigenen Performanz, Sinn einer Reflexion) und die motivierende Wirkung von  Zielsetzungen, die in kurzer Zeit erreichbar sind. Stimmen aus dem Kreis der  Lernenden nach der Durchführung waren unter anderem «Noch nie habe ich  mich für etwas so reingehängt» und «Hätte ich nicht gedacht, dass wir uns so  steigern können». In der nächsten Pause sprach mich die Schulleiterin an, was  wir denn da in der Eiseskälte im Schulhof gemacht hätten. Auf meine Erklärung  hin meinte sie: «Toll, da haben die ja was fürs Leben gelernt.» Projektdurchführung  Themenwahl und Teams Für die sich bis zum Schuljahresende erstreckende Projektarbeit dürfen sich die  Schülerinnen und Schüler eigene Themen wählen.  Abbildung 3.15:  Anreize zur Themenwahl Spielautomat, Arcade-Game, bewegte Grafiken Durch Präsentation einiger in der zur Verfügung stehenden Zeit umsetzbarer  Projektbeispiele wird ihnen eine Entscheidungshilfe geboten. Nach der folgenden geheimen Abstimmung bezüglich eines Wunschthemengebiets ließen sich  die Klassen jeweils problemlos in drei etwa gleich große Interessengruppen tei len. Die themengebundene Zusammensetzung der Projektgruppen führt dazu,  dass in vielen Fällen nicht nur eingespielte Teams zusammenarbeiten und sich  die Schülerinnen und Schüler mit für sie neuen Gesprächsund Teampartnern  zurechtfinden müssen. Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht  71Planungsmeeting Die Teams treffen sich zu einer ersten Besprechung in einem Planungsmeeting  an ihrem Project-Board, das ihnen bis zum Schuljahresende exklusiv zur Verfügung steht. Die Planungsmeetings finden im Stehen statt, weil die Schülerinnen  und Schüler dann erfahrungsgemäß deutlich ergebnisorientiertere Diskussio nen führen. Ich geselle mich abwechselnd zu jedem Team dazu, verfolge die Ge spräche einige Zeit und schlüpfe dann in die Rolle des Kunden, um die Wünsche  zu kanalisieren und als Berater erste erreichbare Ziele zu verdeutlichen. Da das  Projekt über ca. acht Monate laufen wird, erstellen die Schülerinnen und Schüler  User-Storys jeweils für Etappen von drei bis vier Wochen, also für die nächsten  drei bis vier ↑ Iterationen. Dieses Vorgehen wiederholt sich im weiteren Pro jektverlauf, wobei die Kontrolle über das Projekt sobald wie möglich vollständig  den Gruppen überlassen wird. Anschließend greife ich nur noch dann ein, wenn  die Schülerinnen und Schüler sich deutlich zu hohe Anforderungen stellen oder  völlig falsche Wege bei der Implementierung beschreiten wollen.  Project-Board Die User-Storys der ersten Etappe werden nun in der Reihenfolge ihrer Priorität  an das Project-Board geheftet. Dabei ergibt sich die Priorität entweder logisch  aus den Funktionalitäten oder die Teammitglieder einigen sich darüber, was  ihnen wichtiger und was weniger wichtig ist. Das Project-Board ist ab jetzt ein  Board im engeren Sinn der Softwareentwicklung, mit drei Spalten, für User-Sto rys und dazu geplanten Tasks links, für Tasks in Bearbeitung in der Mitte und  für fertige Tasks und abgeschlossene User-Storys rechts und einem zusätzlichen  Bereich für Probleme. Es bietet allen Beteiligten eine ständig aktuelle Übersicht  über den Stand des Projektes. Projektablauf Bis zum Ende der drei bis vier Iterationen umfassenden ersten Etappe ist der  Ablauf der jeweils einer Iteration entsprechenden Doppelstunden nun wie folgt: • 10 Minuten Stand-up und planen • 20 Minuten implementieren • 10 Minuten Stand-up und planen • 20 Minuten implementieren • 20 Minuten integrieren und testen 10 Minuten Puffer Kundengespräche, Reflexion oder Input im Plenum erfolgen je nach Bedarf.Im Unterrichts einsatz 72Stand-up-Meeting, planen und implementieren  Die Teams führen zu Stundenbeginn ein sehr kurzes Stand-up-Meeting durch,  in dem sie erledigte Aufgaben der letzten Stunde rekapitulieren und eventuelle  Probleme ansprechen. Dem Stand-up-Meeting schließt sich nun jeweils eine  Planungsphase von ca. fünf Minuten an. Die Teammitglieder wählen eine oder  mehrere User-Storys unter Beachtung der Priorität aus, mit deren Umsetzung  das Team ca. 20 Minuten beschäftigt ist, und formulieren dazu Tasks. Die ge planten Tasks werden nun arbeitsteilig und im Pair-Programming implementiert. Einen Task, den ein Pair in Bearbeitung nimmt, versieht es vor dem Umhängen am Project-Board mit Namen, damit die Gruppenmitglieder sich bei  Fragen gezielt an das Pair wenden können. Wenn einzelne Pairs in der arbeitstei ligen Phase vor anderen ihre Aufgaben umgesetzt haben, es aber keine weiteren  in der verbleibenden Zeit umsetzbaren Tasks gibt, verbessern die Betroffenen  z.B. die Inline-Dokumentation oder testen einzelne Klassen oder das gesamte  Projekt. Nach ca. 20 Minuten trifft sich das Team erneut am Project-Board. Die  Teammitglieder informieren sich gegenseitig über ihre Tätigkeit in den letzten  20 Minuten und planen weitere 20 Minuten.  Unabhängig davon, dass mit 20 Minuten ein für Neulinge im Bereich des  Programmierens überschaubares Zeitfenster gewählt wurde, gelingt vielen  Schülerinnen und Schülern eine zielorientierte und gründliche Planung und  die Einschätzung, was sie in 20 Minuten schaffen können, anfangs nur mit  Abstrichen. Bei kleineren Problemen behelfen sich die Teams meist mit selbst  einberufenen, spontanen Stand-up-Meetings und lernen, teils auch noch mit  meiner Unterstützung, innerhalb von ein bis zwei Doppelstunden, worauf es bei  einer Planung ankommt. Auch ihre «Velocity», also wie viel sie in 20 Minuten  schaffen, lernen sie recht rasch einzuschätzen. Integrieren und testen Gegen Ende jeder Doppelstunde wird der Code eines Teams von zwei Teammitgliedern zusammengeführt, vom Team getestet und falls nötig korrigiert. Ziel  ist es, nach jeder Doppelstunde eine getestete und lauffähige Programmversion,  also einen ↑ Prototyp, zu haben und damit die Iteration abzuschließen. Die Integration dauerte im Regelfall 10 bis 15 Minuten und nach einem ↑ Refactoring  oder bei nicht eingehaltenen Absprachen bis zu 30 Minuten. Während der Code  schrittweise zusammengeführt wird, unterstützen diejenigen Pairs, die ihren  Code bereits «abgegeben» haben, andere Teammitglieder, insbesondere beim  Lokalisieren und Korrigieren von Fehlern und beim Fertigstellen der Tasks.  Teils testen sie auch Zwischenversionen, die das Integrationspair zur Verfügung Agile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht  73stellt, aktualisieren das Klassendiagramm oder identifizieren Lücken in der Do kumentation sowie schlecht kommentierten Code. Die weiteren Etappen: Selbstständigkeit entwickelt sich Die folgenden Etappen verlaufen nun analog. Während sich aber zu Beginn der  ersten Etappe die Erstellung kompakter User-Storys, die nur wenige Tasks umfassen, ebenso wie die Planung von Tasks in der Regel noch schwierig gestalten  und ich viel unterstützen muss, helfen die gewonnenen Erfahrungen den Schü lerinnen und Schülern in den folgenden Etappen immer schneller, passende  kleine User-Storys zu schreiben und diese dann aus Entwicklersicht zu planen.  Auch wenn sie zunächst noch ungünstige Lösungen planen und entwerfen und  deren Nachteile erst im Laufe der Zeit bemerken, eignen sie sich auf der Suche  nach Alternativen neue fachliche Fähigkeiten an. Deshalb unterscheide ich ganz  bewusst zwischen den weiter oben erwähnten völlig falschen Wegen, bei denen  ich eingreife, und Umwegen, die durch ein Refactoring gut überarbeitet werden  können.  Wenn zeitversetzt nach etwa zwei Etappen (nach sechs bis acht Wochen) das  Planning-Poker als Möglichkeit zur ↑ Aufwandsabschätzung vorgestellt wird,  haben die Lernenden in meinen Projekten erfahrungsgemäß bereits ein gutes  Gespür für die passende Größe von User-Storys und Tasks entwickelt. Die Tech nik der Aufwandsabschätzung hat für sie keinen spürbaren Mehrwert, da sie  inzwischen im Mittel immer die gleiche Anzahl User-Storys in einer Iteration  umsetzen. Sie wird deshalb in der Regel von ihnen verworfen. Da sich die Schülerinnen und Schüler nach der ersten Etappe schon gut selbst  organisieren, kann ich mich ab der zweiten Etappe verstärkt um (nichtfachliche)  Probleme in den Teams kümmern. Ein leistungsstarker Schüler beispielsweise  ging immer, wenn er um Hilfe gebeten wurde, zu seinen Teammitgliedern und  programmierte schnell eine Lösung. Ich sprach ihn darauf an und er gab zu, dass  dies für ihn sehr anstrengend sei. Wir besprachen alternative Möglichkeiten,  die im Folgenden dazu führten, dass er stattdessen konstruktive Tipps gab. Die  Teammitglieder begannen nun, zunehmend selbstständiger zu arbeiten, und er  wurde immer weniger um Hilfe gebeten. Ein anderer sehr guter Programmierer  reagierte schnell respektlos auf Fragen seiner Teammitglieder. Mir gegenüber  sagte er: «Die verstehen einfach nicht, was ich ihnen sage.» Er lernte im Verlauf, sein Wissen so zu formulieren, dass das Team ihn besser verstehen konnte.  Probleme wie die beschriebenen kommen erfahrungsgemäß in allen Projekten  vor, sind aber in agilen Projekten wegen der Transparenz und der häufigen Interaktion und Kommunikation leicht beobachtbar. Entsprechend kann ich gut  und gezielt unterstützen. Im Unterrichts einsatz 74Integration von Lerninhalten In diesen beschriebenen Ablauf werden die Lerninhalte der 10. Jahrgangsstufe  integriert. Dazu gibt es am Project-Board einen Bereich für Probleme, in dem  Pairs Klebezettel mit schriftlich notierten Problemen fixieren können (Abbil dung 3.16). Ich behalte den Problembereich aller Project-Boards im Blick und  prüfe einzeln, ob die Lernenden das Problem selbst lösen können oder ob Hilfe  von außen nötig ist. Im ersten Fall notiere ich einen Tipp zum Selbstlernen,  der je nach Größe sogar ein eigener «Lern-Task» sein kann (z.B. Methoden mit  Rückgabewert wiederholen). Im zweiten Fall melde ich schriftlich auf dem Zettel  zurück, wann und wie eine Hilfestellung erfolgt. In den bisherigen Durchläufen  Hintergrundmusik? Selber herausfindenViele Grashalm­ objekte speichern? Input für alle am  18.3. ➜ Story kurz  zurückstellenSchiefe Rechtecke Tipp: Dreiecke Abbildung 3.16:  Pairs notieren Problemfelder – die Lehrkraft gibt LösungshinweiseAgile Softwareentwicklung als ganzjährige Lernmethode im Pflichtunterricht  75zeigte sich, dass die einzelnen Teams trotz unterschiedlicher Themen und indi vidueller Arbeitstempi oft nahezu zeitgleich an bestimmte Problemstellungen  gelangen, z.B. «Wir bräuchten etwas, um viele gleichartige Dinge auf einmal  anzusprechen». In diesen Fällen bietet sich eine zentrale Theoriephase an – im  genannten Fall zum Thema «(eindimensionale) Felder». So kann ich Input dann  geben, wenn er tatsächlich gebraucht wird, und «Lernen auf Vorrat» vermeiden.  Kommt eine Gruppe deutlich früher zu einer Problemstellung, wird ihr weitergeholfen, um möglichst raschen Projektfortschritt zu gewährleisten.  Themen, auf welche die Lernenden nicht von selbst stoßen, können in Kundengesprächen gezielt angeschnitten werden. Beispielsweise wird von schnel len, leistungsstärkeren Teams ein Kundenwunsch nach einer GUI, also einfachen  Buttons und Labeln, mit Begeisterung aufgenommen und mit Eifer angegangen.  Hierzu vermittle ich dann dem Team die Theorie und stelle auch entsprechende  Codefragmente zur Verfügung. Beobachtungen und Erfahrungen Meine Rolle als Lehrkraft wandelte sich vom «Fragenbeantworter» und «Fehler sucher» im wasserfallähnlichen Projekt hin zu 50 Prozent Coach und 50 Prozent  Beobachter im agilen Projekt. Grund dafür ist, dass die Schülerinnen und Schü ler jetzt schon nach wenigen Iterationen ihr Projekt selbstständig organisieren.  Von zu langen Phasen des Wartens auf Unterstützung ist nicht mehr die Rede.  Obwohl ich kaum noch helfen muss, geben die Lernenden in der Rückmeldung  regelmäßig an, dass sie sich gut betreut fühlen. Einige Tätigkeiten der Softwareentwicklung, deren Sinn ich in wasserfal lähnlichen Projekten nur mit Mühe vermitteln konnte, werden von den Schüle rinnen und Schülern bei der agilen Vorgehensweise als hilfreich erkannt:  • Klassendiagramme erstellen die Teams relativ früh freiwillig und erweitern  sie, weil sie ihnen bei der Planung späterer Iterationen, bei der Implemen tierung sowie beim Testen helfen.  • Kommentare im Quelltext ergänzen die Teams spätestens, wenn die ersten  unnötigen Fehler auftreten und wenn sie mit zunehmender Programmkomplexität immer häufiger «fremden» Code lesen und verstehen müssen. Auch  besondere Funktionalitäten, deren Quelltext sie gerne voller Stolz weiterge ben, führen bei guter Kommentierung zu weniger Nachfragen.  • Tests am Ende jeder Doppelstunde werden gerne durchgeführt, weil man  sehen will, was die anderen Teammitglieder implementiert haben, und weil  man wieder ein fehlerfreies, lauffähiges Produkt haben möchte. Im Unterrichts einsatz 76Durch die starke Betonung der Interaktion werden in agilen Projekten auch so ziale Kompetenzen und deren Entwicklung gefördert. Defizite im Bereich der  Kommunikationsoder Teamfähigkeit einzelner Schülerinnen und Schüler hät te ich früher in wasserfallähnlichen Projekten mit großer Wahrscheinlichkeit  nicht bemerkt. Jetzt bemerke ich sie, kann die Entwicklung der Lernenden verfolgen und sie gezielt und individuell fördern. Dadurch wird die ↑ Bewertung  und Einschätzung der Einzelleistungen auf einer wesentlich solideren Basis  möglich, ebenso wie eine fundierte Rückmeldung an die Lernenden über die  rein fachlichen Kriterien hinaus. Als schwierig stellte es sich heraus, den Einhalt  der Rollen beim Pair-Programming im Verlauf des langen Projekts sicherzu stellen. Um insbesondere die aktive Rolle des Navigators zu motivieren, wird  von mir inzwischen ab der vierten Etappe (nach ca. vier bis fünf Monaten) der  Truck-Factor-Check eingeführt. In der Softwaretechnik wird vom «Truck-Fac tor» gesprochen, wenn es darum geht, dass das Team bei spontanem Ausfall  eines Mitglieds vollständig über dessen Aufgaben und Arbeitsstand informiert  ist und somit jederzeit die Bearbeitung übernehmen kann. Auch bei schulischen  Projekten ist eine solche Stellvertreterregelung von Bedeutung, etwa wenn Ler nende krankheitsbedingt fehlen und ihre jeweiligen Partner dann nicht mehr  weiterarbeiten können, was zu Verzögerungen in der Projektentwicklung führt.  Um die Anforderung zu prüfen, ob sich wirklich jeweils beide Partner eines Pro grammierpaars auf dem gleichen Informationsstand befinden, rufe ich zu einem  nicht genauer angekündigten Zeitpunkt den Truck-Factor-Check aus. Dann wer den die Partner des angesprochenen Pairs an zwei verschiedene Rechner gesetzt,  die jeweiligen Projektdateien werden kopiert und beide müssen getrennt vonei nander weiterarbeiten. Ich lasse mir dann von beiden einzeln erläutern, was ihre  aktuell zu bewältigenden Aufgaben sind. Anfangs stehen die Schülerinnen und  Schüler dieser Unterrichtsmethode oft skeptisch gegenüber, entwickeln aber  erfahrungsgemäß sehr schnell den Ehrgeiz zu zeigen, dass auch nach Trennung  eines Pairs beide Beteiligten ohne Nachfragen weiterarbeiten können. Dadurch  wird der Truck-Factor-Check auch zu einer spielerischen Möglichkeit, die Invol viertheit aller zu erhalten. Jedes Jahr bin ich wieder beeindruckt vom enormen Zuwachs an sozialen,  organisatorischen und persönlichen Fähigkeiten der Schülerinnen und Schüler.  Besonders freut es mich dann im folgenden Jahr im Projektseminar der Qualifikationsphase zu sehen, wie sie ihr Potenzial in Projekten verschiedener Leitfächer einbringen. Sie erstaunen und überzeugen hierbei auch die Kolleginnen  und Kollegen insbesondere informatikferner Fächer mit ihren methodischen  Kompetenzen, ebenso wie ihre Teammitglieder, die keine Erfahrung mit agilen  Projekten haben. Ein geskriptetes Projekt als Methodik für den Anfangsunterricht  773.5 Ein geskriptetes Projekt als Methodik  für den Anfangsunterricht  Ein Unterrichtskonzept von Lennard Kerber Steckbrief Klassenstufe: 9 (Gymnasium, Wahlpflichtkurs) Klassenstärke: 20 Schülerinnen und Schüler Thema: Geschicklichkeitsspiel Besonderheiten: Selbstreguliertes Lernen, Student-Story, beiläufiges Lernen  agiler Begriffe und Vorgehensweisen Agile Praktiken: Project-Board, User-Storys, Tasks, Prototypen, Stand-up-Meeting, Pair-Programming, Refactoring, Planning-Poker Programmiersprache/Entwicklungsumgebung: Processing Dauer und Frequenz: zehn Wochen mit einer Doppelstunde pro Woche Zeitlicher Ablauf:               Unterricht für Programmieranfänger in einer textbasierten Programmiersprache  zu strukturieren, ist nach meiner Erfahrung eine Gratwanderung. Stark geführtes,  kleinschrittiges Vorgehen mit kurzen praktischen Übungen verhilft insbesondere  Leistungsschwächeren zu Erfolgserlebnissen, birgt aber die Gefahr von Unselbst ständigkeit in neuen und größeren Anwendungssituationen und demotiviert  leistungsstarke Schülerinnen und Schüler. Längere Übungsphasen am Rechner  können wegen einer zu großen Anzahl syntaktischer und semantischer Probleme  demotivierend wirken, denn sie gehen für viele mit langem Warten auf Unter stützung einher. Eine Modellierung vorweg ist generell kaum motivierbar, weil  ihr Sinn bei kleinen Aufgaben nicht erkennbar ist. Um diese Probleme ein Stück Im Unterrichts einsatz 78weit aufzulösen, verwenden Lehrkräfte besondere Unterrichtsmethoden. Dennoch  bleibt es meist bei einem Unterricht, der für alle Seiten sehr anstrengend ist. Aus dieser Erfahrung heraus ergab sich die Idee, die Schülerinnen und Schü ler bereits zu einem frühen Zeitpunkt in einem «geskripteten Projekt» selbst reguliert gemeinsam lernen zu lassen. Mit «selbstreguliert» meine ich, dass die  Schülerinnen und Schüler ihren Lernprozess insbesondere bzgl. des Lerntempos  selbst steuern und ihn durch Übungen überwachen. Das «geskriptete Projekt»  bestand – anders als ein freies Projekt – aus vorgegebenen Lernaufgaben und  vorgegebenen Anwendungsaufgaben, mit denen ein Spiel entwickelt wurde. Für  die Lernaufgaben führte ich analog zu ↑ User-Storys den Begriff «Student-Sto rys» ein, die Anwendungsaufgaben waren von mir vorbereitete User-Storys  und ↑ Tasks. Lernund Anwendungsphasen wechselten sich im Projekt regelmäßig ab. Dabei sollten die Schülerinnen und Schüler einige agile Techniken und  Praktiken nutzen, die beispielsweise einen klaren Organisationsrahmen oder  Interaktivität fördernde Handlungsanweisungen vorgeben, um so Lernprozesse  innerhalb des vorgezeichneten Projekts sinnvoll zu unterstützen. Auf die dabei  indirekt erworbene Methodenkompetenz kann im Anschluss in umfassenderen  agilen (Softwareentwicklungs-)Projekten aufgebaut werden. Somit adressiert  das Vorgehen auch eine Herausforderung der Projektarbeit: Wie können Begrif fe, Vorgehensweisen und Kommunikationsformen in einem Softwareprojekt  selbst Gegenstand des Unterrichts werden, ehe sie von den Schülerinnen und  Schülern selbstständig angewandt werden? Das folgende Beispiel vermeidet the orielastiges «Lernen auf Vorrat», indem Terminologie und Aufbau eines agilen  Softwareprojekts implizit im Unterricht miterlernt und geübt werden. Projektvorbereitung Rahmenbedingungen Für die Lerngruppe war es ihr erster Informatikunterricht. Gemäß internem  Curriculum wurden zunächst Algorithmen des Alltags in umgangssprachlicher  Formulierung besprochen und anschließend Kontrollstrukturen noch ohne Ver wendung einer Programmiersprache erarbeitet. Mit Processing, einer Program miersprache, die sich gut zum Programmieren von Grafiken, Simulationen und  Animationen eignet, setzten sich die Lernenden zum ersten Mal im Rahmen des  Projekts auseinander. Variablen und Funktionen waren neben der Verwendung  von Kontrollstrukturen die inhaltlichen Ziele der Sequenz. Objektorientierung  und objektorientierte Modellierung hingegen spielten noch keine Rolle. Der  Computerraum bot mit 14 außenstehenden Computern und einem großen Tisch  in der Mitte für Besprechungen im Plenum eine gute Aufteilung.Ein geskriptetes Projekt als Methodik für den Anfangsunterricht  79Gestaltung des Lehr-Lernarrangements Das über die gesamte Einheit des «geskripteten Projekts» tragende Thema war  die Entwicklung eines Geschicklichkeitsspiels, in dem eine runde Scheibe mit  der Computermaus durch ein 2D-Labyrinth gesteuert wird. Wenn die Scheibe  zu dicht an die Wände des Labyrinths kommt, wird sie kleiner. Die Größe der  Scheibe im Ziel bestimmt die erreichte Punktzahl. Abbildung 3.17:  Von Schülerinnen und Schülern entwickeltes Geschicklichkeitsspiel Für die Umsetzung waren nach einer einführenden Doppelstunde vier ↑ Iterati onen mit je drei Doppelstunden geplant, in denen auch schrittweise ein Benutzerhandbuch erstellt werden sollte. Von den geplanten vier Iterationen konnten  aus schulischen Gründen nur drei durchgeführt werden. Dennoch waren die  Schülerinnen und Schüler stolz auf ihre als ↑ Prototypen vorliegenden Ergeb nisse. Hierin zeigte sich ein klarer Vorteil der agilen Softwareentwicklung für  die Projektorganisation und -durchführung in der Schule. Die Aufteilung der Lerninhalte Inhaltlich war das Lehr-Lernarrangement so gestaltet, dass die Schülerinnen  und Schüler am Ende der ersten Iteration Rechtecke in selbst gewählten Far ben zeichnen und damit ihr Spielfeld individuell gestalten konnten. Sie haben  sich dazu mit den Koordinaten der Leinwand des Processing-Systems und dem  Thema RGB-Farbraum vertraut gemacht. In der zweiten Iteration wurden die  Konzepte «Funktion» (ohne Parameter und ohne Rückgabewert) sowie «Variab le» erarbeitet und zur Weiterentwicklung des Spiels verwendet, beispielsweise  beim Zeichnen der Rechtecke bzw. der Spielfigur. Am Ende der dritten Iteration  schließlich implementierten die Schülerinnen und Schüler auch Funktionen mit  Rückgabewert und Funktionen mit Parametern. Damit konnte der Spielplan mit  einer bewegten Scheibe, die dem Mauszeiger folgt, programmiert werden. Die  Hindernisse waren für die vierte Iteration vorbereitet, in der die Scheibe bei  Berührung der Wände des Labyrinths verkleinert werden soll. Die Schülerinnen  Im Unterrichts einsatz 80und Schüler sollten im Verlauf Schnittstellen, Variablen und Funktionen nach  einem jeweils vorgegebenen Schema im Quellcode dokumentieren. Projektdurchführung  Teams Für das Projekt bildeten die Schülerinnen und Schüler fünf Vierer-Teams, wobei sie  selbst entschieden, mit wem sie zusammenarbeiten mochten. Die Teammitglieder  unterstützten sich während des Projekts gegenseitig beim Lernen und entwickel ten gemeinsam ihr Spiel. Dabei arbeiteten die Schülerinnen und Schüler teilweise  synchron und teilweise asynchron. Dennoch gelang es den Teams und der gesam ten Gruppe regelmäßig auf einer gemeinsamen Basis zusammenzukommen, denn  die agilen Praktiken gaben dem Lehr-Lernarrangement eine verbindliche zeitliche  Taktung und bildeten einen hilfreichen Rahmen zur Orientierung. Dazu gehörten  aus der Softwareentwicklung bekannte und für die Schule angepasste agile Tech niken und Praktiken, aber auch die von mir zusätzlich eingeführte Student-Story,  mit der ich neue Inhalte in das Projekt integrierte und Lernphasen strukturierte.  Die Student-Story: Integration neuer Inhalte Student-Storys beschreiben einen Lernauftrag von mir an die Schülerinnen und  Schüler. Sie enthalten in der Regel das intendierte Ziel im Titel sowie eine knap pe Beschreibung des Auftrags, wie das hier beispielhaft dargestellt ist.  Abbildung 3.17:  Student-Story zum Thema «Variablen» mit zugehörigen Tasks Das Material, das die Schülerinnen und Schüler zum Erledigen des Auftrags  benötigten, habe ich ihnen zur Verfügung gestellt. Der zeitliche Umfang einer  Student-Story betrug in meinem Projekt im Mittel etwa 30 bis 40 Minuten.Titel:  Variablen in einer Programmier sprache kennenlernen. Beschreibung:  Arbeitet das Arbeitsblatt  zu Station   2.1 durch.Task 1: Lies das   Arbeitsblatt; be arbeite anschließend  Aufgabe 1.Task 2: Bearbeitet  Aufgabe 2 in   der Gruppe und  protokolliert das  Ergebnis.Task 3: Bearbeite  mindestens eine  Wahlaufgabe.Ein geskriptetes Projekt als Methodik für den Anfangsunterricht  81Analog zur User-Story waren auch der Student-Story Tasks zugeordnet, die  hier theoretischen Input oder praktische Übungen enthielten, von mir vorgege ben waren und zusammen das für die Student-Story zu erledigende Arbeitspaket  festlegten. In Task 2 beispielsweise bekamen die Schülerinnen und Schüler den  Auftrag, in ihrem Team einen Schreibtischlauf eines Algorithmus durchzuführen und zu verfolgen, wie sich der Wert einzelner Variablen ändert. Durch die  Nummerierung der Tasks gab ich den Schülerinnen und Schülern die Bearbeitungsreihenfolge der Teilaufgaben vor. Den Teams half eine Student-Story mit den zugehörigen Tasks, Lernphasen  im Projekt selbst zu organisieren. Die Tasks wurden jeweils (im Unterschied zu  Tasks im regulären agilen Projekt) vom gesamten Team bearbeitet, wobei sich  die Lernenden unabhängig von der vorgegebenen Sozialform gegenseitig unter stützen. Den aktuellen Arbeitsstand visualisierten sie an einem ↑ Project-Board,  das hier die Funktion einer Checkliste beim Stationenlernen bzw. eines Ablauf plans bei Wochenplanarbeit hatte. Wenn es zur Theorie in einer Student-Story ergänzende praktische Übungen  am Computer gab, arbeiteten die Schülerinnen und Schüler eines Teams stets  mit ↑ Pair-Programming, sodass zum einen der Wissenstransfer unterstützt  und zum anderen überlegtes Vorgehen gefördert wurde. Die Rollen sollte jedes  Pair regelmäßig alle 5 Minuten wechseln. Pair-Programming war die einzige  Praktik, bei der ich steuernd eingreifen musste, denn die Beobachtung zeigte,  dass sonst meist die Stärkeren programmieren und die Schwächeren zusehen,  weil sie sich in der entsprechenden Rolle wohlfühlen. Für mich war es allerdings  nicht leicht, konsequent für einen Wechsel zu sorgen, da die Schülerinnen und  Schüler zu ganz unterschiedlichen Zeiten programmierten. Aufbau der Iterationen: Im eigenen Tempo kooperativ arbeiten Jede Iteration des Projekts war drei Doppelstunden lang und bestand aus drei  Phasen. In der ersten Phase befassten sich alle Lernenden eines Vierer-Teams mit  den neuen Inhalten und Konzepten anhand von Student-Storys. In dieser Phase  überwogen Einzelund Partnerarbeiten und sie dauerten je nach Lerntempo un terschiedlich lang. Da sich die Schülerinnen und Schüler eines Teams gegenseitig  beim Lernen unterstützten, beendete ein Team dennoch meist zeitgleich die erste  Phase. Aufgrund der Teambildung setzten sich leistungsstärkere Teammitglieder  in dieser Phase mit Schwierigkeiten schwächerer Teammitglieder auseinander  und vertieften so auch ihr eigenes Verständnis. In der zweiten Phase erweiterten  die Teams arbeitsteilig ihr Spiel um Funktionalitäten, bei deren Umsetzung sie  die neuen Konzepte anwendeten. Die User-Storys und Tasks dieser Phase waren  zwar ebenfalls von mir vorgegeben, jedoch blieb den Schülerinnen und Schülern Im Unterrichts einsatz 82dennoch ein gestalterischer Freiraum. So konnten schnellere Teams, die die erste  Phase früher beendet hatten, die Zeit nutzen, um die von mir vorgegebenen Be wertungskriterien besonders gut zu berücksichtigen. Ihr Labyrinth konnte z.B.  besonders viele Wege oder verschiedene Effekte haben, wie beispielsweise den  Effekt, der beim Schnitt transparenter Rechtecke entsteht. So konnten sie sich in tensiver mit den Möglichkeiten auseinandersetzen, die ihnen Processing bot. Sie  konnten sich auch um einen klar strukturierten und gut dokumentierten Quell text bemühen. Nach der Implementierung erweiterte jedes Team in dieser Phase  außerdem sein Benutzerhandbuch. Auch hier konnten schnellere Teams passende  Bildschirmfotos einfügen und für eine übersichtliche Gestaltung sorgen. Aber  auch schwächere Gruppen sollten mit Fleiß und Einsatz in der von mir geplanten  Zeit immer zu einem lauffähigen Produkt und einer Beschreibung kommen. Ab schließend wurden in der dritten Phase die Zwischenergebnisse kurz vorgestellt.  Stand-up-Meeting: Das Gelernte rekapitulieren Jede Doppelstunde begann mit einem ↑ Stand-up-Meeting, in dem sich die  Schülerinnen und Schüler jeder Gruppe kurz und knapp klarmachen sollten,  was sie in der letzten Doppelstunde geschafft haben und was sie für diese Stunde planen. Das heißt, es gab zwar eine Begrüßung, aber die Wiederholung und  Zusammenfassung der neu erarbeiteten Lerninhalte bzw. des Fortschritts beim  Entwickeln des Spiels fand individuell in den Teams statt und orientierte sich  am jeweiligen Stand der einzelnen Teams im Lernprozess und im Projekt. Indem  die Stand-up-Meetings kurze individuelle Rekapitulationen am Stundenanfang  automatisch anstießen, unterstützten sie die Organisation des selbstregulierten  Lernens ideal: Da die Teams in ihrem eigenen Tempo arbeiteten, wäre eine von  mir moderierte Stundeneinführung im Plenum nicht sinnvoll gewesen.  Hilfreich bei der Rekapitulation der vorangegangenen Doppelstunde waren  die jeweiligen Arbeitsblätter und Student-Storys bzw. User-Storys und das grup peneigene Project-Board, das den Stand des Projekts visualisierte.  Mit Studentund User-Storys in die Arbeitsphase Die Schülerinnen und Schüler konnten ihre Project-Boards nach dem Stand-upMeeting mit den von mir vorgefertigten Student-Storys bzw. User-Storys und  den zugehörigen Tasks für die kommende Doppelstunde vorbereiten und im  Verlauf der Stunde aktuell halten. Vermutlich wegen der Skriptung, der kleinen  Gruppengröße, dem geringen Anteil arbeitsteiliger Aufgaben oder dem Standort  des Boards direkt neben dem Rechner erlebten die Schülerinnen und Schüler  es mit der Zeit jedoch als unwichtig, dass das Project-Board zu jedem Zeitpunkt  den aktuellen Stand zeigte. So haben sie später meist erst am Ende einer Dop -Ein geskriptetes Projekt als Methodik für den Anfangsunterricht  83pelstunde die Zettel umgehängt – um zu sehen, was sie geschafft haben und zur  Orientierung in der nächsten Stunde. Letztlich war auch für mich der Einblick  in den Arbeitsstand am Stundenende ausreichend und hilfreich. Nachdem alle die Student-Storys (meist zwei pro Iteration) erledigt hatten,  wurden die User-Storys und Tasks zur Weiterentwicklung des Geschicklichkeits spiels arbeitsteilig vom Team umgesetzt. Zur Implementierung diente wiede rum Pair-Programming. Zu Beginn der dritten Doppelstunde führten in allen  Teams die Programming-Pairs ihren Code zusammen und testeten ihn. Prototypen und Reflexion: Der Abschluss einer Iteration In der dritten Phase jeder Iteration wurden die Prototypen und Benutzerhand bücher der Gruppen im Plenum kurz vorgestellt und besprochen, wobei sich die  Gruppenmitglieder abwechselten. In diesen Runden gaben die Mitschülerinnen  und Mitschüler und ich regelmäßig ↑ Feedback. Da wir zur Besprechung im Plenum versammelt waren und zu diesem Zeitpunkt stets alle den gleichen Stand  hatten, nutzte ich die Runden auch zur Nachgestaltung der Fachsprache oder  zur Sicherung ganz zentraler Inhalte. Am Ende jeder Plenumsrunde richteten die  Schülerinnen und Schüler den Blick auf das gesamte Projekt: das Erreichte, das  Projektziel und das unmittelbar anstehende Teilziel der nächsten Iteration, ehe  sie in der nächsten Iteration wieder in kleinen Teilschritten arbeiteten. Refactoring: Mit neu erlernten Konzepten zu besserem Code Einige User-Storys bzw. Tasks stießen ↑ Refactoring-Tätigkeiten an, die dazu  dienten, den bestehenden Quelltext mit Hilfe neu erlernter Konzepte besser zu  strukturieren. So konnten die Lernenden beispielsweise in der zweiten Iteration  Funktionen verwenden, um das Zeichnen der Rechtecke des Spielplans auszula gern und den Code stärker zu strukturieren. Dieses Refactoring wurden von den  Schülerinnen und Schülern als «Praktik der Profis» akzeptiert und motivierte  so den Umbau des Codes, der sehr oft mit dem schrittweisen Einführen von  Lerninhalten verbunden ist, auf sehr elegante Art und Weise. Bewertung Beim Vorgehen nach dem Wasserfallmodell liegt erst am Ende ein Produkt vor.  Was tun, wenn eine Gruppe kein lauffähiges Produkt abgibt? Durch das Proto typing löste sich diese Situation auf, weil ich früh und regelmäßig Einblick in  Zwischenstände hatte und steuernd und unterstützend eingreifen konnte. In  diesem Fall war sogar angekündigt, dass jede Prototypvorstellung benotet wird.  Dazu gab es jeweils klar kommunizierte Anforderungen und Kriterien. Daraus  resultierend bildete ich dann jeweils Teilnoten, die die Schülerinnen und Schüler  einsahen, weil sie transparent und nachvollziehbar zustande kamen.Im Unterrichts einsatz 84Beobachtungen und Erfahrungen Die genutzten agilen Techniken und Praktiken unterstützten die Organisation  und Planung, soziales Lernen, die Motivation und die ↑ Bewertung der Proto typen und der dazugehörigen Benutzerhandbücher optimal. Dadurch wurde der  Erwerb fachlicher Kompetenzen im Bereich der Programmierung durch die Wei terentwicklung wichtiger sozialer Kompetenzen ergänzt und die Schülerinnen  und Schüler haben ganz nebenbei noch eine typische Arbeitsund Vorgehens weise beim Entwickeln von IT-Systemen erlernt und intuitiv reflektiert. So sind  sie bestens auf ein richtiges Unterrichtsprojekt vorbereitet. Interessant war, dass die Schülerinnen und Schüler fast alle Praktiken mit  Begeisterung aufgenommen haben. Sie reflektierten ihren Sinn und Nutzen im  gegebenen Kontext intuitiv und setzten sie im späteren Verlauf von sich aus  passend bzw. angepasst ein oder ließen sie weg. Zur zeitlichen Planung der  Arbeitsphase beispielsweise konnten die Schülerinnen und Schüler, wenn sie  wollten, das Planning-Poker (↑ Aufwandsabschätzung) nutzen. Es wurde auch  ein, zwei Mal ausprobiert und dann weggelassen, vermutlich, weil es keinen  direkten Mehrwert brachte. Die Aufgaben einer Iteration waren ja von mir fest  vorgegeben und so geplant, dass auch die Schwächeren sie in der gegebenen Zeit  bearbeiten konnten. Andere Techniken und Praktiken, wie das Project-Board,  wurden von den Schülerinnen und Schülern wie oben beschrieben an den Kontext angepasst und gewinnbringend genutzt. Schließlich führten sie mehrfach  selbstständig ein Refactoring durch, sodass sie bereits unterschiedlich struktu rierten Code geschrieben und die erreichten Verbesserungen in der Reflexion  noch einmal benannt haben. Besonders bereichernd war für mich das Prototyping, wobei hier verschie dene Aspekte zu meiner sehr positiven Erfahrung beitrugen. Ein Punkt ist die  leichtere und transparentere Bewertbarkeit. Noch viel wichtiger war für mich  aber, dass ich so oft die Möglichkeit hatte zu loben. Auch die Schülerinnen und  Schüler schätzten die Gelegenheit, sich voneinander Feedback zu holen. Bei des steigerte die Motivation sehr und es hat möglicherweise auch dazu geführt,  dass ein sonst allgemein auffälliger Schüler bei mir tolle Beiträge lieferte und  ein unproblematisches Verhalten zeigte. Positiv überrascht war ich dann aber  doch, als eine Kollegin mich fragte, was ich mit meinen Schülern gemacht habe.  «Wenn ich ihnen eine Aufgabe gebe», berichtete sie, «beginnen deine Schüler zu  arbeiten, während meine sich erstmal alle melden und Fragen stellen.» Offenbar  führten die Projekterfahrungen zu einer nachhaltig selbstständigeren, zielorientierteren Arbeitsweise.Reflexionskompetenz stärken durch Weiter  entwicklung des eigenen agilen  Prozesses  853.6 Reflexionskompetenz stärken durch  Weiter  entwicklung des eigenen agilen   Prozesses  Ein Unterrichtsprojekt von Leonore Dietrich Steckbrief Klassenstufe: 11 (Hochbegabtenprojekt) Gruppenstärke: 4 Schüler Thema: Jump-’n’-Run-Spiel Pengu  Besonderheiten: Erfahrungen im agilen Prozess reflektieren Abschlussprojekt eines mehrjährigen Hochbegabtenprogramms  Agile Praktiken: Project-Board, User-Storys, Tasks, Prototypen, Stand-up-Meeting, Pair-Programming, Aufwandsabschätzung, Refactoring, Reflexion Programmiersprache/Entwicklungsumgebung: Java/Greenfoot Dauer und Frequenz: Einjährig (inkl. Vorund Nachbereitung) mit vierstündigen  Treffen nach Absprache Zeitlicher Ablauf:     In diesem Projekt stand nicht die Entwicklung eines Softwareprodukts im Mittelpunkt, sondern die Vorgehensweise. Was sind wesentliche Aspekte eines Soft wareentwicklungsprozesses? Die Sicht der Wissenschaft darauf hat sich über  die Jahre stetig verändert. Die Idee von dem einen, idealen Entwicklungsprozess  wird abgelöst von der Aufforderung, insbesondere an die Entwicklerinnen und  Entwickler eines Teams, den Prozess und die eigene Rolle im Team und im Pro zess mit auszugestalten, regelmäßig zu reflektieren und zu optimieren. Das hier  beschriebene Abschlussprojekt zeigt, wie diese Aufforderung von hochbegabten  Schülern aufgenommen und umgesetzt wurde. Im Unterrichts einsatz 86Projektvorbereitung Rahmenbedingungen Das Projekt fand im Rahmen des Hector-Seminars statt, einem baden-Würt tembergischen Programm zur langfristigen Hochbegabtenförderung. Dieses  schließt in der Oberstufe mit einer einjährigen Kooperationsphase ab, in der  Teams meist in Zusammenarbeit mit einer Hochschule ein Projekt durchführen.  Nach einem gemeinsamen Vorlauf begann das Informatik-Projekt für die vier  Teilnehmer im November mit einer Einführung. Die produktiven Treffen, in  denen ↑ Prototypen entstanden, fanden ab Januar bis zum Ende des Schuljahrs  statt. Im Mittel gab es in dieser Zeit ein begleitetes, vierstündiges Treffen pro  Monat an der Universität und parallel dazu unregelmäßige selbstständige Tref fen. Vereinzelt haben die Schüler auch außerhalb der Treffen an Problemlösungen gearbeitet und die Ergebnisse per E-Mail sowie bei den Treffen kommuniziert. In dieser Phase wurde mit Greenfoot das Spiel Pengu realisiert, das ich als  ein mögliches Ausgangsszenario vorgestellt hatte. Einer der vier Schüler hatte  zumindest grundlegende Java-Kenntnisse, die anderen drei nur rudimentäre  Kenntnisse von einfachen algorithmischen Kontrollstrukturen. Prozessmodelle  aus der Softwaretechnik waren ebenso wenig bekannt wie Modellierungstechniken. Allerdings verfügten alle vier über eine sehr schnelle Auffassungsgabe,  hatten eine außergewöhnlich ausgeprägte Fähigkeit, analytisch und strukturiert  zu denken, und eine hohe Abstraktionsfähigkeit. Agile Praktiken in der Vorbereitung Entsprechend dem Ziel, vor allem die ausgewählten agilen Methoden und Strategien zu thematisieren, lag ein geringerer Fokus auf der Umsetzung des Pro jekts mit Greenfoot. Die Schüler sollten regelmäßig am Ende eines Treffens ihre  Erfahrungen mit den agilen Techniken und Praktiken reflektieren und dabei  benennen, was gut bzw. schlecht lief, worauf sie zukünftig mehr achten und was  sie ändern wollen. Soweit möglich sollten dann Vermutungen aufgestellt werden  über Auswirkungen, die sie sich von der jeweiligen Änderung versprechen, im  positiven Sinn wie auch im negativen. In den folgenden Treffen sollten sie dann  beobachten, wie gut ihnen die Umsetzung der geplanten Änderungen gelang und  inwieweit die Annahmen eintrafen. Deshalb wurde im ersten Treffen zunächst  erläutert, wie Softwareentwicklungsprojekte mit agilen Vorgehensweisen typischerweise ablaufen. Ein Video unterstützte die Ausführungen und vermittel te einen Einblick in das Vorgehen bei professionellen Projekten. Anschließend  wurde besprochen, wie es im konkreten Projekt aussehen kann. Anfänglich wur den die oben in der Übersicht erwähnten Praktiken vorgegeben, wobei das ↑ Re -Reflexionskompetenz stärken durch Weiter  entwicklung des eigenen agilen  Prozesses  87factoring erst später angewandt wurde. Im konkreten Kontext hätte sich ein  elektronisches ↑ Project-Board angeboten, da die Treffen an verschiedenen  Orten stattfanden und die Teilnehmer von unterschiedlichen Schulen kamen.  Allerdings wollte ich den Schülern die Möglichkeit bieten, nach getaner Arbeit  für alle sichtbar und haptisch erlebbar einen Zettel umzuhängen. Deshalb be stand unser Project-Board aus einem transportablen, faltbaren Plakat, das zu  den Treffen jeweils mitgebracht wurde. Projektdurchführung  Die vierstündigen betreuten Treffen umfassten jeweils ein ↑ Stand-up-Meeting  und meist zwei ↑ Iterationen. Jede Iteration begann mit einem Planungsmee ting, gefolgt von einer Aufwandsabschätzung, einer Programmierphase von ca.  45 Minuten, einer Codeintegration, einem kurzen ↑ Test und einer kurzen Re flexion. Die letzte Iteration endete mit einem ausgiebigen Test, einem Prototyp,  einem Review und einer ausführlichen Retrospektive (↑ Reflexion in Review  und Retrospektive). Dieser Ablauf kam der geringen Programmiererfahrung der  Teilnehmer entgegen, da die zu planende Programmierphase von 45 Minuten  überschaubar blieb. Zugleich wurde zu viel Overhead vermieden, indem zwi schendurch jeweils nur kurz getestet und reflektiert wurde.  Stand-up-Meeting, Planung und Aufwandsabschätzung Das Stand-up-Meeting zu Beginn diente dem Rekapitulieren des vorangegan genen Treffens und ging dann in ein Planungsmeeting für die nächste Iteration  über. Während der Planungsund Entwurfsphase wurde vor allem viel disku tiert. Diesbezüglich stellte das agile Vorgehen wegen der recht hohen Erwartun gen an kommunikative und kooperative Fähigkeiten anfangs eine Herausforde rung dar – zumindest für drei der vier Schüler. Beim ersten Stand-up-Meeting  beispielsweise standen sie da wie «bestellt und nicht abgeholt». Ich habe aber  darauf bestanden, dass jeder sich beteiligt. Im Verlauf wurde die Kommuni kation untereinander beobachtbar besser: Nach drei Iterationen war beispiels weise zu erkennen, dass die Diskussionen beim Planen und später bei der Auf wandsabschätzung für die ↑ Tasks wesentlich differenzierter wurden und die  Beteiligung gleichmäßiger verteilt war. Das Planning-Poker traf spontan auf  große Zustimmung, trotz anfänglicher Schwierigkeiten aufgrund geringer Pro grammiererfahrung. Die Schüler reflektierten die erlebten Abweichungen nach  jeder Iteration und bezogen die Erfahrungen in die folgenden Abschätzungen  ein: «Das ist geschätzt etwas/viel mehr/weniger aufwendig als [...], weil [...].»  Dabei fielen ihnen auch Aspekte auf, die sie beim Planen der Tasks zu ungenau Im Unterrichts einsatz 88besprochen hatten, weil dann die Schätzungen auseinanderlagen, d. h. die Ab schätzung hatte auch eine Kontrollfunktion. Unterstützt wurde die Entwicklung  hin zu differenzierteren Diskussionen, gleichmäßigerer Beteiligung und besse ren Abschätzungen, vermutlich auch durch die wechselnde Zusammenstellung  der Pairs beim Programmieren, die für den Wissenstransfer sehr förderlich war.  Dokumentation Dokumentiert wurden ein im Rahmen eines Refactorings im vierten Treffen  erstelltes Klassendiagramm und einige Programmabläufe in Form von Strukto grammen. Für das Projekt und seine Ziele war diese Form der Planung passend,  denn die Schüler hatten nur geringe Vorkenntnisse im Bereich von Modellie rungstechniken und das Produkt war bezogen auf die Fähigkeiten der Schüler  zu strukturierendem und abstrahierendem Denken wenig komplex.  Test und Prototyp Am Ende eines Treffens gab es jeweils einen lauffähigen und getesteten Proto typ, der präsentiert werden konnte. Beim Testen des Prototyps haben die Schüler von sich aus eine Art Regressionstest (↑ Testen) durchgeführt, ohne dass  ich das erwähnt oder erwartet hätte. Sie strukturierten und klassifizierten dazu  zunächst die gefundenen Fehler, um ihre Erkenntnisse dann bei den zukünftigen  Prototypen für Tests wiederzuverwenden.  Refactoring Nach drei Treffen gelangten die Schüler zu einem Punkt, an dem sie einige  Programmierprobleme nicht mehr selbstständig lösen konnten und fachliche  Hilfe benötigten. Bei der Umsetzung einer vorgeschlagenen Lösung stellte sich  jedoch heraus, dass sie dazu gleichartige Funktionalitäten an vielen verschiede nen Stellen benötigen würden und deshalb zunächst die Struktur überarbeitet  werden sollte. Hierfür erstellten die Schüler zusammen mit mir zunächst ein  Klassendiagramm der aktuellen Software aus Moderationskarten und Klebezet teln. Indem die Schüler Klassen und Methoden verschoben und verschiedene  Strukturen diskutierten, fanden sie Möglichkeiten, die Struktur zu verbessern.  Die Umsetzung des Refactorings übernahm ein Pair, während das andere sich  mit einem weiteren identifizierten Problem befasste: der uneinheitlichen und  teils nicht standardkonformen Benennung von Klassen und Methoden. Retrospektiven Die Retrospektive der Iterationen am Ende der Treffen wurden gewissenhaft  durchgeführt und die aus den Beobachtungen und Erfahrungen gewonnenen Reflexionskompetenz stärken durch Weiter  entwicklung des eigenen agilen  Prozesses  89Erkenntnisse von den Schülern zusammen mit Schlussfolgerungen für ihren  Entwicklungsprozess schriftlich in einem Protokoll festgehalten. Am Ende wur de beschlossen, welche Änderung in der nächsten Iteration umgesetzt werden  soll und was man sich davon erhofft, sodass darauf in den folgenden Iterationen  besonders geachtet werden konnte. Beobachtungen und Erfahrungen  Mich beeindruckte im agilen Projekt besonders, dass ich Zeit und Gelegenheit  hatte zuzuhören und zu beobachten. Ich musste nicht wie bisher moderieren,  immer wieder Schüler motivieren und bestärken oder ihnen den jeweils nächs ten Schritt erklären. Vielmehr fanden die Schüler mit den agilen Praktiken und  dem iterativen Ablauf eine Struktur vor, in der sie Probleme rasch erkennen  konnten, Zeit hatten, sie zu analysieren, Lösungsansätze zu entwickeln, umzusetzen und zu evaluieren. Sie gingen dabei planvoll vor und wählten unterschied liche Strategien und Herangehensweisen, um Probleme und Schwierigkeiten zu  bewältigen, wie die folgenden drei Beispiele exemplarisch zeigen: Die Aufwandsabschätzung stellt für Schüler mit geringen Programmier kenntnissen ein Problem dar, das sie erfahrungsgemäß nur schwer selbstständig lösen können. Indem die Schüler in der ersten Iteration nach Gefühl und  in den weiteren Iterationen vergleichend schätzten, haben sie ihr Vorgehen zu  einer effektiven Praktik ausgestaltet, wie sie heute oft auch in professionellen  Projekten verwendet wird.  Eine weitere typische Schwierigkeit stellt insbesondere für unerfahrene  Programmiererinnen und Programmierer das Formulieren von geeigneten  User-Storys dar. Entsprechend schien den Schülern die Formulierung von  User-Storys für ihr Spiel zunächst schnell von der Hand zu gehen, bei der an schließenden Planung von Tasks zeigte sich jedoch rasch, dass die Storys zum  Teil nur einen Task enthielten, zum Teil aber auch viel zu umfassend waren. Eine  in der Reflexion beschlossene und zu Beginn des zweiten Treffens vorgenom mene Neuformulierung brach nun die zu umfangreich geratenen User-Storys  in jeweils mehrere überschaubarere auf. Mithilfe des geschätzten und bei der  Umsetzung tatsächlich benötigten Aufwands der neuen User-Storys verifi zierten sie den Erfolg ihres Aufteilungsprozesses im weiteren Projektverlauf.  Bemerkenswert fand ich, dass die Schüler im Zusammenhang mit dem Aufteilungsprozess von User-Storys in der Reflexion auch die Rolle eines potenziellen  Kunden mitbetrachteten.  Im Verlauf des Projekts wurde den Schülern bewusst, dass sie in unbetreuten  Treffen Probleme hatten, an den Wechsel beim ↑ Pair-Programming zu denken Im Unterrichts einsatz 90und das Zeitfenster (↑ Timeboxing) für eine Iteration einzuhalten. Diese Be obachtung veranlasste sie, das eigene Zeitmanagement zu reflektieren und die  ‹Versprechungen› der Praktiken zu prüfen, um gegebenenfalls die Praktiken zu  ändern oder gar fallen zu lassen, was aber nicht geschah. Insgesamt nehme ich als Lehrerin ebenso wie die Schüler das agile Vorgehen  als sehr spannende und hilfreiche Methode für ein Softwareprojekt wahr. Agile  Projekte sind Teil meines Regelunterrichts geworden und bieten den Schülerinnen und Schülern in Form einer auf andere Kontexte übertragbaren Methode  einen deutlichen Mehrwert.Agiler  Methodenkoffer I Grundlegende  Techniken   und Praktiken4  Titel: Beschreibung:   Priorität:  Dieses Kapitel gibt zunächst einen Überblick über den agilen Prozess  und stellt dann sechs zentrale agile Methoden vor, die für den Einstieg  empfehlenswert sind. Abhängig von den Rahmenbedingungen kann da­ mit jede Lehrkraft individuell Schulprojekte ausgestalten. Die am Ende  des Kapitels vorgestellten agilen Spiele zeigen Möglichkeiten auf, agiles  Denken und Handeln projektunabhängig erlebbar zu machen.Iterationen – der agile Prozess 934.1 Iterationen – der agile Prozess Wichtigstes Merkmal eines agil organisierten Projekts  ist das iterative und inkrementelle Vorgehen in kurzen  Zeitintervallen mit früh sichtbaren und erprobbaren  Zwischenergebnissen. Verankert sind auch klare Kom munikationsstrukturen und eine Visualisierung der  Projektarbeit. Beides sorgt für eine hohe Transparenz.  Gewinn für Schülerinnen und Schüler Der agile Prozess • unterstützt durch eine strukturierte Vorgehensweise sowie eine Vielzahl an  Methoden die Projektplanung, -organisation und -durchführung, • gibt durch Iterationen die Möglichkeit, sich mit dem Projekt weiterzuentwi ckeln und Selbstvertrauen in der Projektdurchführung zu gewinnen, • motiviert durch frühzeitige und viele Erfolgserlebnisse im Gesamtprozess, • hilft, die eigenen Zielvorstellungen frühzeitig und regelmäßig zu überprüfen, • fördert die Eigenverantwortung und Kollaboration, • ermöglicht es, an verschiedenen Stellen fachliche und soziale Kompetenzen  einzubringen und damit das Team zu unterstützen.     Gewinn für Lehrkräfte Der agile Prozess • unterstützt durch Iterationen das Durchhaltevermögen und die Konzentration  der Schülerinnen und Schüler, da die Intervalle überschaubar sind, • ermöglicht ein regelmäßiges produktbzw. prozessbezogenes Feedback an  Schülerinnen und Schüler, • ermöglicht die Staffelung von Lerninhalten anhand der allmählichen Entwick lung des Produkts, • macht Lernprozesse sichtund beobachtbar.Agiler Methodenkoffer I 94Hintergrund Agil organisierte Softwareprojekte bestehen aus sich wiederholenden festen  Zeitfenstern (Iterationen), in denen das Team den Prototyp jeweils um weitere  Funktionalitäten ergänzt. Jede Iteration umfasst eine Planung, in der das Iterationsziel festgelegt wird, eine Arbeitsphase sowie eine Reflexion. Während einer  Iteration darf ihr Ziel nicht mehr geändert werden, damit das Team fokussiert  arbeiten kann. Iterationen folgen im agilen Prozess direkt aufeinander und sind  in der Regel alle gleich lang.  Professionelle Projekte beginnen zunächst mit einer strategischen Planungs phase, in der die Produktvision des Kunden über eine Liste von Anforderun gen, meist Backlog genannt, konkretisiert wird. In einem zweiten Schritt wird  zusammen mit dem Kunden durch Prioritäten eine Bearbeitungsreihenfolge  festgelegt. Im Gegensatz zum klassischen Projektmanagement ist die Sammlung  der Anforderungen schlanker, weniger detailliert ausgearbeitet und dynamisch:  Nach jedem Iterationsende können weitere Einträge ergänzt und die Prioritäten  geändert werden. Auch Verbesserungen und Fehlerbehebungen sind typische  Ergänzungen. Ein Backlog-Eintrag, bei Softwareprojekten ↑ User-Story ge nannt, besteht aus einer Beschreibung, einer Priorität und einer ↑ Aufwands abschätzung. In der strategischen Produktplanung wird auch die grundlegende  Softwarearchitektur festgelegt, da deren nachträgliche Änderung mit hohem  Aufwand verbunden wäre. Zu Beginn jeder Iteration (Sprint) werden nun unter Berücksichtigung von  Prioritäten und dem Zeitrahmen (↑ Timeboxing) der Iteration (typischerwei se zwischen zwei und sechs Wochen) User-Storys aus dem Backlog zur Um setzung ausgewählt. Das Entwicklerteam plant nun die nötigen Teilaufgaben  als ↑ Tasks und setzt diese um. Während der Planung und Umsetzung gibt  jederzeit das ↑ Project-Board einen Überblick über den Bearbeitungsstand.  Abgeschlossen wird jede Iteration mit einem funktionsfähigen, inkrementell  wachsenden Prototyp, der Qualitätsabnahme durch den Kunden im Review und  einer Reflexion zum Arbeitsprozess in einer Retrospektive (↑ Reflexion in Re view und Retrospektive). Während der Umsetzung finden täglich kurze ↑ Stand-up-Meetings  statt. ↑ Kollaborative Werkzeuge (↑ Repositorys) sowie ↑ Pair-Programming  unterstützen die Zusammenarbeit, ↑ Testen sowie ↑ Refactoring sorgen für  eine Qualitätssicherung. Die Abbildung 4.1 bietet einen Überblick über den agilen Prozess und das Zusammenspiel der verschiedenen Bestandteile. Sie findet  sich in einer größeren Version auf der Umschlaginnenseite. Iterationen – der agile Prozess 95Abbildung 4.1:  Gesamtbild eines typischen agilen Prozesses  Trotz der Dynamik, Anforderungen nachträglich einsteuern zu können, darf  agiles Projektmanagement nicht dahingehend missverstanden werden, dass  sich jederzeit spontane Einfälle einflechten lassen. So soll das Team während  einer Iteration ungestört und fokussiert am Plan arbeiten können. Am Ende  einer Iteration sind gemäß der Agilen Werte Rückmeldungen erwünscht und  Änderungswünsche möglich. Umsetzung in der Schule In schulischen Softwareprojekten stellt sich das Planen und Durchführen langer  Projektphasen in einem linearen Vorgehensmodell als schwierig heraus, weil  Schülerinnen und Schüler nicht über die Erfahrung verfügen, Software zu Be ginn des Projekts «auf dem Papier» vollständig durchplanen zu können. Durch  die iterative Entwicklung haben die Schülerinnen und Schüler die Möglichkeit,  Prototypen ihrer Software frühzeitig zu testen und dabei zu überprüfen, ob die  Teilziele erreicht wurden. Erste Erfolge werden früh sichtbar und können de monstriert werden. In komplexeren Oberstufenprojekten mit Schichten (wie  Modell, Ansicht, Logik) erfolgt die Integration früher und regelmäßig, sodass  dabei oft auftretende Schnittstellenprobleme schnell erkannt werden und die Agiler Methodenkoffer I 96Korrekturmaßnahmen nicht so aufwendig sind. Sogar neue Funktionalitäten  (Features) können jeweils vor Beginn einer Iteration in die Planung aufgenommen werden. Zum Abschluss jeder Iteration wird der Entwicklungsund damit  auch der Lernprozess reflektiert. Der folgende Prozessablauf entspricht dem in  Abbildung 4.2 dargestellten, für die Schule angepassten Kreislauf. Die Kurzbe schreibung der Methoden auf der hinteren Umschlaginnenseite mag für Ein steiger hilfreich sein. Projektvorbereitung 1. [Optional] Durchführung eines agilen Spiels als Einstieg in agiles Denken  und Handeln. 2. Themenfindung, Gruppenbildung; Festlegen der Iterationsdauer und der zu  verwendenden Techniken und Praktiken durch die Lehrkraft.  3. Bekanntgabe der Bewertungskriterien durch die Lehrkraft. 4. Themenkonkretisierung durch Formulierung von möglichst unabhängigen  User-Storys (Backlog). 5. Installieren des Project-Boards mit den Spalten «To do», «In Progress»,  «Done».  6. User-Storys priorisieren und entsprechend der Priorität in die linke Spalte  des Project Boards hängen (höchste Priorität nach oben). Projektdurchführung Jede Unterrichtseinheit beginnt mit einem Stand-up-Meeting. Die folgenden Schritte wiederholen sich in jeder Iteration. 1. User-Storys wählen, die in dieser Iteration umgesetzt werden sollen und  auch im Rahmen des Zeitfensters umgesetzt werden können. 2. Tasks für die ausgewählten User-Storys planen. Ggf. Modelle aktualisieren. 3. Implementieren und Project-Board aktuell halten, d. h. Tasks, die in Bear beitung gehen, mit Namen versehen und in die Spalte «In Progress» hängen  und wenn sie erledigt und getestet sind, auf «Done» hängen (und sich über  das Erreichte freuen).  4. Integrieren: Die beiden Pairs, die als Erstes fertig sind, beginnen. Falls die  Teams aus mehr als zwei Pairs bestehen, kommen die restlichen Pairs nach  und nach an die Reihe, sobald sie auch fertig sind. Bei der Integration wird  immer (mindestens) zu zweit gearbeitet. Die Schülerinnen und Schüler, die  mit ihren Tasks fertig sind und nicht aktiv an der Integration mitwirken,  helfen anderen, dokumentieren, suchen Fehler usw. Generell ist nie jemand  ohne Arbeit.Iterationen – der agile Prozess 975. Testen der Funktionalität einer User-Story sowie des neu entstandenen  Prototyps als Ganzes. Getestete und somit fertige User-Storys auf «Done»  hängen. 6. Für in der Iteration nicht mehr behebbare Fehler einen Task schreiben, im  Team kommunizieren und diesen für die nächste Iteration mit der fehler haften User-Story in die erste Zeile der linken Spalte des Boards hängen. Reflexion Gemeinsam reflektieren:  1. Prototyp vor der Gruppe, der Lehrkraft oder im Plenum präsentieren, Feedback einholen und feiern. Daraus ergeben sich ggfs. weitere User-Storys bzw.  ein Umpriorisieren. 2. [Optional] Qualität des Quelltextes hinterfragen: Ist er gut strukturiert, damit verschiedene Teams unabhängig arbeiten können? Sind die vorhandenen  Kommentare hilfreich? ...  3. [Optional] (Team-)Fähigkeiten reflektieren: Was können wir schon gut? Wo  haben wir noch Schwierigkeiten? Was sollen wir im nächsten Schritt lernen? Abbildung 4.2:  Typischer agiler Prozess in der SchuleAgiler Methodenkoffer I 98Ein Blick ins Klassenzimmer Informatiklehrerin Frau Lovelace berichtet: Das agile Vorgehen hat die Begeisterung meiner Schülerinnen und Schüler erhöht  und die Ergebnisse von Projekten stark verbessert. Durch den klaren Zeitrahmen  einer Iteration müssen sie sich auf das Wesentliche konzentrieren (KISS-Prinzip).  Der Kreislauf mit inkrementellen Prototypen schafft motivierende Erfolgserlebnisse  und erhöht die Kompetenz der Schülerinnen und Schüler durch die fest verankerten  Reflexionen. Die institutionalisierten Meetings fördern einen respektvollen Umgang  miteinander und die Schülerinnen und Schüler entwickeln ihre Persönlichkeit mit  Agilen Werten weiter. Varianten Ein übliches Vorgehen ist es, den agilen Prozess an das individuelle Projekt  und die Bedürfnisse der Schülergruppe anzupassen, einzelne Methoden (vor erst) wegzulassen oder stärker zu führen und mit zunehmender Erfahrung der  Schülerinnen und Schüler weitere agile Techniken und Praktiken hinzuzufügen.  Dadurch ist es möglich, unterschiedliche Schwerpunkte zu setzen (Kapitel 3). Herausforderungen Da Projektunterricht mit agilen Methoden idealerweise keinem starren Vorge hensmodell folgt, sollte sich die Lehrkraft vorab und regelmäßig während des  Projekts mit verschiedenen Fragen auseinandersetzen: • Welche Techniken und Praktiken sollen im Projekt verwendet werden? Un terstützen diese die Schülerinnen und Schüler (noch) optimal? • Ist das Project-Board so gestaltet, dass zu jedem Zeitpunkt die relevanten  Informationen auf einen Blick erfassbar sind? • Wie viel Zeit steht (noch) zur Verfügung? Welche Iterationsdauer ist für das  Projekt und die Gruppe geeignet? Hilft es, den Ablauf einer Iteration zu mo difizieren? • Wie formell müssen die Methoden eingeführt werden? Welche Änderungen,  die Schülerinnen und Schüler im Verlauf daran vornehmen, lösen bzw. brin gen Probleme?Iterationen – der agile Prozess 99Tipps und Tricks aus der Unterrichtspraxis • Es kann sinnvoll sein, einzelne Methoden, z.B. User-Storys und Pair-Pro gramming, bereits vor dem Projekt einzuführen. • Bei Zeitproblemen bleibt der Prozess agil: User-Storys ggf. einfach in die  nächste Iteration verschieben, ein Gefühl für Erreichbares wird sich mit zunehmender Erfahrung einstellen. So bleibt auch Raum, notwendige Lernphasen spontan zu integrieren. • Die Festlegung, dass es am Ende einer Iteration immer einen getesteten  lauffähigen Prototyp gibt, sollte stets beibehalten werden. In Projekten mit  Programmieranfängern kann der Ablauf aber dahingehend abgeändert wer den, dass auch zweimal pro Iteration jeweils für eine kürzere Arbeitsphase  Tasks zu User-Storys geplant werden und der Code nur am Ende der Iteration  integriert und lauffähig gemacht wird. • Kann eine Iteration am Ende einer Stunde einmal nicht abgeschlossen werden, verläuft die nächste Doppelstunde wie folgt: Im Stand-up-Meeting wird  der Arbeitsstand rekapituliert, dann wird die Iteration mit einem getesteten  und lauffähigen Prototyp abgeschlossen. Die folgende Iteration wird ver kürzt, sodass das Team wieder in den gewohnten Rhythmus kommt.Agiler Methodenkoffer I 1004.2 User-Storys –  Anforderungen aus  Kundensicht Eine User-Story beschreibt eine An forderung an das Softwaresystem aus  Sicht des Kunden. Sie besteht aus we nigen Sätzen und ist in Alltagssprache  formuliert. Gewinn für Schülerinnen und Schüler User-Storys sind • ein zentrales Hilfsmittel zur Analyse, Konkretisierung und Strukturierung der  Zielsetzungen in überschaubaren, handhabbaren Teilen, • eine Formulierungshilfe für Projektziele,  • Basis für Kommunikation über die Wichtigkeit (Priorisierung) der Projektziele  mit dem Kunden und innerhalb der Gruppe, • eine Messgröße für den Projektfortschritt, • eine Möglichkeit, sich unabhängig von technischen Fertigkeiten einzubringen.   Gewinn für Lehrkräfte User-Storys sind • ein Instrument, um Projektziele unter Berücksichtigung der Fähigkeiten der  Schülerinnen und Schüler bezüglich ihrer Machbarkeit zu bewerten und ggf.  früh lenkend einzugreifen, • eine Messund Beobachtungsgröße für den Projektfortschritt, • eine elegante Steuerungsmöglichkeit, um in der Rolle des Kunden dezent auf  den Projektablauf Einfluss zu nehmen. Titel: Beschreibung:   Priorität:  User-Storys – Anforderungen aus  Kundensicht 101Hintergrund User-Storys werden in der agilen Softwareentwicklung zur Spezifikation von  Anforderungen eingesetzt. Sie beschreiben in Summe das ganze Produkt. Jede  einzelne User-Story beantwortet folgende drei Fragen:  • Wer fordert etwas an? (Rolle) • Was wünscht sich der Anforderer? (Ziel/Funktion) • Warum ist das wichtig? (Nutzen)  Dadurch wird eine Funktionalität der Software aus Sicht des Nutzers formuliert.  User-Storys werden deshalb in enger Zusammenarbeit mit dem Kunden oder  der Kundin geschrieben, wobei Fachbegriffe der Informatik zu vermeiden sind.  Durch User-Storys werden weder Techniken noch Werkzeuge festgelegt. Abbildung 4.3:  Allgemeiner Aufbau und konkretes Beispiel einer User-Story User-Storys sind ein wesentliches Instrument zur Steuerung eines agilen Pro zesses (↑ Iterationen). Unter anderem werden der Aufwand sowie der Pro jektfortschritt mittels User-Storys bestimmt und kontrolliert. Dazu gibt es  unterschiedliche Vorgehensweisen. Die Reihenfolge, in der die User-Storys  bearbeitet werden, legt der Kunde, oft gemeinsam mit dem Team, durch eine  Priorisierung fest. Dabei berücksichtigt er insbesondere Funktionalitäten, die  ein erster ↑ Prototyp haben soll. Kommt es während des Projekts zu Anforde rungsänderungen, können sowohl die Priorisierung der User-Storys als auch die  noch nicht umgesetzten User-Storys selbst in Absprache zwischen Kunde und  Entwicklerteam jeweils vor Beginn einer Iteration geändert werden. Umsetzung in der Schule Die Schülerinnen und Schüler sind in ihren Unterrichtsprojekten meist ihre  eigenen Kunden und müssen sich zunächst auf ein grobes gemeinsames Pro -Titel:   Beschreibung:  Als <Rolle> möchte ich  <Ziel/Funktion>, um <Nutzen>. Priorität:Titel:  Bestätigung Datenschutzerklärung Beschreibung:  Als Anbieter eines Online ­Shops  möchte ich, dass jeder neue Nutzer das Lesen der  Datenschutzerklärung bestätigt, um rechtlich  einwandfrei seine E ­Mail­Adresse für eigene  Werbezwecke nutzen zu können. Priorität:  70Agiler Methodenkoffer I 102jektziel einigen. Anschließend ist dieses genauer auszudifferenzieren und zu  beschreiben. Hierzu werden die ermittelten Anforderungen auf Karteikarten  festgehalten, wobei jede Karteikarte genau eine User-Story beinhaltet, wie die  folgenden Beispiele illustrieren.  Abbildung 4.4: User-Storys aus einem Abenteuerspiel Anschließend werden die User-Storys vom Team priorisiert (was ist besonders  wichtig, was ist nur «nice to have») und nach Priorität geordnet in die linke Spal te des ↑ Project-Boards gehängt. Priorisierungen beginnen bei zehn (höchste  Priorität) und werden in Zehnerschritten hochgezählt. So können ggf. später  neue User-Storys sowohl an beliebiger Stelle und insbesondere am Ende einge fügt werden. Ebenso wie im professionellen Projekt können die Teams sowohl  die User-Storys selbst als auch deren Priorisierung im Verlauf des Projekts ändern. Die Abschätzung des Aufwands wird im Schulkontext meist weggelassen,  da dies bei fehlenden Programmierund Projekterfahrungen eine sehr schwie rige Aufgabe darstellt.  Es bietet sich folgende Kontrollliste an, die beim Schreiben von User-Storys  hilfreich ist: Meine User-Story • beschreibt eine Aktivität oder Funktion des Produkts, • ist aus Sicht des Kunden in Alltagssprache geschrieben, • ist kurz, d.h. besteht höchstens aus zwei bis drei Sätzen, • enthält keine technischen Ausdrücke, • legt keine Werkzeuge oder Techniken fest, • beinhaltet Titel, Beschreibung, Priorität und optional eine Aufwandsabschätzung.Titel:  Lebensenergie Beschreibung:  Wenn ein Avatar mit einem  giftigen/energiespendenden Element in Berüh rung kommt, werden ihm Lebensenergiepunkte  abgezogen/addiert, um das Spiel attraktiver zu  machen. Priorität:  10Titel:  Lebensenergie Variation Beschreibung:  Der Abzug an Lebensenergie punkten bei einem Avatar durch Berührung mit  einem giftigen Element kann durch Tragen eines  Amuletts oder eines Schutzumhangs reduziert  werden. Priorität:  40User-Storys – Anforderungen aus  Kundensicht 103Ein Blick ins Klassenzimmer Informatiklehrer Herr Weizenbaum berichtet: Nachdem sich Teams gebildet hatten, war es zunächst ihre Aufgabe, das gewählte  Thema zu präzisieren und Ideen zu sammeln. Ich kam dann immer mal wieder als  Kunde zu den einzelnen Teams dazu und ließ mir berichten, wie weit sie waren und  wie sie sich ihr Produkt vorstellten. Durch geschicktes Nachfragen, etwa «Das habe  ich noch nicht ganz verstanden …», konnte ich das Team auf Schwierigkeiten oder  ungeklärte Punkte hinweisen. Unrealistische Ziele korrigierte ich, indem ich mir als  Kunde etwas Ähnliches, aber Machbares wünschte. Nach der Sammlung der Ideen  haben die Schülerinnen und Schüler diese als User-Storys formuliert und auf Kartei karten festgehalten. Hierzu erhielten sie eine Kontrollliste mit zu berücksichtigenden  Regeln. Ich kam in der Rolle des Kunden noch ein oder zwei Mal dazu, um zu prüfen,  ob die User-Storys tatsächlich leicht in einer Iteration implementierbar sind. Zu um fassende User-Storys ließ ich mir noch mal erklären und bat das Team dann, diese  in mehrere Storys zu unterteilen.  Varianten Rollenspiel Um den Ablauf der Prozesse zu verstehen und die einzelnen Aktivitäten und  Funktionalitäten eines Systems zu erkennen, eignet sich die Methode des Rollenspiels. Dabei verkörpert ein Schüler oder eine Schülerin die Software, während die anderen in der Rolle der Nutzer mit der Software verbal interagieren.  Als Nutzer tust du so, als ob du die Software normal benutzen würdest.Als «Software» sagst du, was auf dem  Bildschirm zu sehen ist und im Computer  passiert.Und jetzt berührt mein  Avatar das MonsterGut, in dem Moment färbt  sich dein Avatar grün, wird  ausgeblendet und es   erscheint «Game Over»Agiler Methodenkoffer I 104Verbalisiert werden die notwendigen Schritte, mit der die Software angemessen  reagiert. Die Erkenntnisse aus diesem Spiel werden anschließend genutzt, um  die User-Storys zu formulieren. Student-Storys Hierbei werden Lernaufgaben in Form von User-Storys durch die Lehrkraft vor gegeben, um Unterrichtsphasen lehrergesteuert zu strukturieren oder Lernund  Erarbeitungsphasen im Projekt einzuschieben (z.B. Einarbeitung in ein Soft warewerkzeug, persistente Datenspeicherung, Einbindung von Audiodateien,  Kennenlernen von Variablen). Geskriptetes Projekt Eine Weiterführung der Student-Story stellt das geskriptete Projekt dar, in dem  alle User-Storys bereits durch die Lehrkraft vorgegeben werden. Die Lehrkraft  nimmt die Rolle des Kunden ein und gibt die Projektziele und den Ablauf mittels  priorisierter User-Storys sowie dazugehöriger ↑ Tasks vor. Dies kann insbeson dere im Anfangsunterricht eine erfolgreiche Zusammenarbeit der Schülerinnen  und Schüler und effektive Programmierarbeit ermöglichen. Gleichzeitig werden  so verschiedene Praktiken agiler Projekte quasi nebenbei eingeführt (Kapitel 3.5).  Modeling-, Refactoringund Documentation-Storys Zum Einsteuern von Aufgaben, deren Ziel keine neue Funktionalität, sondern die  Sicherung der Softwarequalität darstellt, können diese speziellen User-Storys  eingeführt werden. Modeling-Storys reservieren Zeit, in der sich die Schüler mit  Modellierungsaspekten (statisch und/oder dynamisch) beschäftigen. Beispiels weise kann ein so erstelltes Klassendiagramm bei weiteren Planungsschritten  helfen und als zentraler Bezugspunkt bei Besprechungen dienen. Refacto ring-Storys reservieren Zeit für ein ↑ Refactoring und Documentation-Storys  Zeit für die ↑ Dokumentation.  Herausforderungen • Die Unterscheidung der Benutzerund Entwicklerperspektive kann für Schü lerinnen und Schüler schwierig sein. • User-Storys werden leicht zu umfangreich (sogenannte «Epics», die ein gan zes Etappenziel statt einer einzelnen Funktionalität beschreiben). Mitunter  sieht man der User-Story die Intention der Schülerinnen und Schüler aber  nicht an, wie beispielsweise bei der folgenden User-Story eines Scratch-Pro jekts.User-Storys – Anforderungen aus  Kundensicht 105Abbildung 4.5:  User-Story aus einem Abenteuerspiel Auf Nachfrage der Lehrkraft ergeben sich hier eine Vielzahl an Funktionalitäten,  die wie folgt aufgeteilt und zwischen den bereits priorisierten User-Storys eingeordnet werden können. Abbildung 4.6:  Ausdifferenzierte User-Storys eines Spielprojekts mit ScratchTitel:  Startseite Beschreibung:  Zu Beginn gibt es eine  Startseite. Priorität:  50 Titel:  Startseite Beschreibung:  Zu Beginn gibt es eine Startseite.  Man kann sich die Spielregeln anzeigen lassen und  die Hintergrundmusik an ­ und ausschalten. Wenn  man das Spiel startet, wird man nach dem Na men gefragt. Priorität:  35Titel:  Avatarkostüme Beschreibung:  Es sollen drei verschiedene  Avatarkostüme zur Verfügung stehen.  Über die Startseite ist eine Auswahl des  Kostüms möglich. Priorität:  55 Titel:  Auswahlseite Beschreibung:  Die Startseite wird zur Auswahl seite erweitert. Man gelangt über eine Tasten kombination (während des Spiels) und nach  Erreichen eines neuen Levels zur Auswahlseite. Der  Name, der Punktestand, das aktuelle Level und  Kostüm werden angezeigt. Priorität:  75Titel:  Erweiterung der Avatarkostüme  Beschreibung:  Weitere Avatarkostüme sind  Levels zugeordnet und kosten zunehmend mehr  Punkte. Man kann sich mit den erspielten Punk ten weitere Avatarkostüme freischalten, sobald  man das entsprechende Level erreicht hat. Priorität:  85 Titel:  Wahl einer Hintergrundmusik Beschreibung:  Mit zunehmendem Level kann  man sich auch andere Hintergrundmusik aus­ suchen. Die noch nicht freigeschalteten Musiktitel  sind grau. Musiktitel kosten keine Punkte. Priorität:  110Agiler Methodenkoffer I 106Material • Vorbereitete Karten, welche die Struktur von User-Storys vorgeben (Titel,  Beschreibung, Priorität) • Beispiel-User-Storys als Orientierung für Umfang und Form  Tipps und Tricks aus der Unterrichtspraxis • Wenn die Schülerinnen und Schüler noch sehr unerfahren sind und die Pro jektzeit relativ lang ist, genügt es, sie zunächst nur User-Storys für ein erstes  Etappenziel schreiben zu lassen, die sie im Verlauf des Projekts durch weitere  ergänzen. Meist kommen nach einigen Iterationen von selbst weitere Ideen,  die zum Projektziel passen. • Zielorientiert können User-Storys explizit so beschrieben werden, dass sie in  einer Iteration (z.B. 45 oder 90 Minuten) bearbeitet werden können. Abhän gig von der Lerngruppe reichen eventuell sogar Iterationen mit User-Storys,  die sich in 15 bis 20 Minuten bearbeiten lassen. • Die Lehrkraft kann ggf. Implementationshinweise (z.B. Tasks) auf der Rück seite der User-Storys unterbringen. • User-Storys können nicht immer arbeitsteilig parallel bearbeitet werden.  Regeln wie «nicht in der gleichen Methode» oder «nicht in der gleichen Figur»  sollten auf Task-Ebene aufgestellt und bekannt gemacht werden.  • Ist eine Steuerung des Projektverlaufs bspw. hinsichtlich rahmenplanrele vanter Inhalte sinnvoll, kann diese durch das Hinzufügen oder passendes  Priorisieren der User-Storys durch die Lehrkraft in der Rolle des Kunden  elegant einfließen. • Eine strikte Struktur mit Rolle, Ziel/Funktion und Nutzen wie im professio nellen Bereich (Abbildung 4.3) ist im schulischen Kontext nicht nötig.Das Project-Board – Planung und Stand im Blick 1074.3 Das Project-Board –  Planung und Stand im Blick Ein Project-Board visualisiert die   Projektziele, den Entwicklungsprozess  sowie den aktuellen Projektstand und  dient als Kommunikationsund Wis sensschnittstelle. Gewinn für Schülerinnen und Schüler Das Project-Board  • gibt einen Überblick über das Projekt, insbesondere zeigt es die Ziele und Auf gabenpakete, den aktuellen Arbeitsstand (und damit auch den Projektfort schritt) sowie die Arbeitsverteilung, • unterstützt durch die Visualisierung des Prozesses die Selbstorganisation, • motiviert durch aktives Umhängen erledigter Aufgaben und ermöglicht es, das  Erledigen zu feiern.   Gewinn für Lehrkräfte Das Project-Board • erleichtert die Betreuung der Schülerinnen und Schüler durch die Sichtbarkeit  aller Aufgaben, des aktuellen Arbeitsstands, der aktuellen Arbeitsverteilung  und damit der individuellen Projektbeiträge, • bietet durch den transparenten Projektfortschritt Anlässe für Lob, zum Steuern oder zur Planung von Hilfestellungen. Agiler Methodenkoffer I 108Hintergrund In der agilen Softwareentwicklung kommt dem Project-Board eine zentrale Rol le in der Organisation der Arbeitsabläufe und der Kommunikation im Projekt  zu. Die bei Projektbeginn formulierten Beschreibungen der Anforderungen an  das Softwaresystem (↑ User-Storys) werden am Project-Board als sogenann tes Backlog gesammelt: In einer nach Prioritäten geordneten Liste werden die  User-Storys in der linken Spalte angepinnt. Das Backlog ist dynamisch, d. h. im  Laufe der Entwicklung dürfen einzelne Punkte ergänzt, ausdifferenziert oder  neu priorisiert werden. Je nach Größe des Projekts werden das gesamte Backlog oder auch nur die  User-Storys für die aktuelle ↑ Iteration am Project-Board angebracht. Die  User-Storys der aktuell anstehenden Iteration werden jeweils durch ↑ Tasks  und eine ↑ Aufwandsabschätzung konkretisiert.  Folgende drei Spalten sind auf jedem Project-Board zu finden: In der ers ten Spalte, «To Do», hängen nach Prioritäten geordnet die zu bearbeitenden  User-Storys sowie die zugehörigen Tasks, falls die User-Storys schon spezifi ziert wurden. Daneben, in der zweiten Spalte, hängen die einzelnen Tasks, die  gerade in Bearbeitung sind. Der bearbeitende Entwickler zeichnet sich für alle  sichtbar für den Task verantwortlich und aktualisiert den Bearbeitungsstatus  am Project-Board. In der dritten Spalte befinden sich die bereits vollständig  umgesetzten erledigten Tasks und User-Storys.  Häufig ist ein sogenanntes Burn-Down-Chart enthalten, mit dessen Hilfe  kontinuierlich der noch zu erledigende Arbeitsaufwand in Abhängigkeit von  der zur Verfügung stehenden Zeit grafisch dargestellt wird (↑ Aufwandsab schätzung). In Softwareunternehmen werden Project-Boards oft auch in elek tronischer Form verwendet, insbesondere wenn das Team auf verschiedene  Arbeitsorte verteilt ist. Durch den hierin gespeicherten Prozessverlauf kann  ein Project-Board auch zur Dokumentation des Projekts herangezogen werden.  Umsetzung in der Schule Auch in Schulprojekten dient das Project-Board dem Zweck, den Planungspro zess zu unterstützen und den aktuellen Stand transparent zu machen. Da bei  Besprechungen (↑ Stand-up-Meetings und andere Besprechungsformen) die  darauf sichtbaren Informationen zentral sind, sollte das Project-Board im Klas senzimmer zu jeder Zeit verfügbar und davor ausreichend Platz zum Versam meln der Gruppe sein. Das Project-Board – Planung und Stand im Blick 109Ein Blick ins Klassenzimmer Informatiklehrer Herr Turing berichtet: Da alle Tasks, deren Bearbeitung zumindest begonnen wurde, mit Namen versehen  sind, kann sich jedes Teammitglied bei Nachfragen und Problemen im Zusammenhang mit diesem Task und dessen Umsetzung gezielt an die entsprechenden Spe zialisten wenden. Ich habe zu jedem Zeitpunkt Informationen darüber, welcher Schüler und welche  Schülerin was bearbeitet und welchen Anteil sie bei der Projektarbeit haben. Auch  Wissenslücken, ein zu umfangreicher Task oder mangelhafte Zielorientierung wer den offenbar, wenn ein Task über lange Zeit im Status «In Progress» verharrt. Diese  Transparenz der individuellen Beiträge zum Projektfortschritt schätze nicht nur ich,  sondern auch die Teams schätzten sie sehr, weil sie ein Anstoß sind, die Betroffenen  persönlich anzusprechen und ggfs. helfend bzw. steuernd einzugreifen.   Varianten Zusatzbereiche auf dem Board • Ende der Iteration: Um den Zeitrahmen (↑ Timeboxing) transparent zu ma chen und die Fokussierung zu erhöhen, ist es sinnvoll, am Project-Board das  Ende der aktuellen Iteration sichtbar zu machen (Abbildung 3.11). • Problembereich: Hier können konkrete Fragen an das Team oder die Lehr kraft formuliert und abgelegt werden (Abbildung 3.16). • Ideenbereich: Hier können Ideen spontan abgelegt werden, damit sie nicht  verloren gehen; diese können später priorisiert und als User-Story übernom men werden. • Spalten für ↑ Testen, ↑ Dokumentieren und/oder ↑ Refactoring: Der Be deutung dieser wichtigen Aspekte der Softwareentwicklung kann durch die  Aufnahme am Project-Board ein höherer Stellenwert gegeben werden.  Digitale Project-Boards Für Schülerinnen und Schüler sind besonders Project-Boards mit echten Zetteln  geeignet, da das Verschieben einzelner Tasks auf einem physischen Board einen  hohen Motivationseffekt hat. Dennoch mag ein digtiales Project-Board bei Ober stufenprojekten sinnvoll sein, weil digitale Dokumente wie Klassendiagramme  und Anleitungen für externe Bibliotheken direkt eingebunden werden können,  der Arbeitsprozess über ein Protokoll der Aktivität dokumentiert wird und ein  Zugriff auch außerhalb des Klassenzimmers für häusliche Arbeiten möglich ist  (Kapitel 3.3). Es gibt eine Vielzahl an professionellen Möglichkeiten, von denen Agiler Methodenkoffer I 110jedoch die meisten nicht für die Schule geeignet sind, weil sie nur einen Teil der  folgenden didaktischen bzw. organisatorischen Anforderungen erfüllen: • Die Regeln für den Prozessablauf sollten nicht so strikt sein, dass sie in der  Schule Schritte erzwingen, die aus didaktischer Sicht sinnlose Daten erzeugen. • Die Anzahl der Spalten sollte selbst bestimmt und die Spaltenüberschriften  selbst gestaltet werden können. • Es sollte die Möglichkeit geben, den User-Storys Prioritäten zuzuordnen. • Auch für Teams in Klassenstärke sollten keine Kosten anfallen  Herausforderungen • Wenn mehrere Klassen den gleichen Klassenraum nutzen, sollte sicherge stellt werden, dass Project-Boards nicht verändert werden. • Räumliche Gegebenheiten schränken den Platz für mehrere Project-Boards  als Treffpunkt unter Umständen ein, sodass eine geschickte Raumaufteilung  erforderlich ist. Material • Als Project-Boards können Wandtafeln (Pinnwände, Whiteboards), Stell wände, Flip-Charts, kleinere Pinnwände, Styroporplatten oder Poster, nach  Möglichkeit in der Größe A0, verwendet werden. • Buntes Papier, z.B. Karteikarten, für die User-Storys und Klebezettel für die  Tasks Tipps und Tricks aus der Unterrichtspraxis • Das Project-Board sollte am besten etwas entfernt von möglichen Sitzgele genheiten aufgestellt werden, um zu vermeiden, dass die Stand-up-Meetings  zu einer gemütlichen Sitzrunde werden. • Neben dem Project-Board sollte an der Wand Platz für die Modellierung ge geben werden (um Klassendiagramme o. Ä. aufzuhängen). In unseren Pro jekten half dies den Schülerinnen und Schülern dabei, den Überblick über  die Struktur ihrer Software zu behalten, und wurde wie selbstverständlich in  die Gespräche integriert. Diese werden dadurch konkreter und fokussierter.  • Wenn die Project-Boards am Stundenende weggeräumt werden müssen, können  Poster vorteilhaft sein, da sie zusammengerollt oder gefaltet werden können. • Mit Fotos in regelmäßigen Abständen kann der Stand des Project-Boards  festgehalten und damit die Projektentwicklung dokumentiert werden.Tasks – Arbeitspakete aus Entwicklersicht 1114.4 Tasks – Arbeitspakete aus Entwicklersicht Tasks sind kleine, aus Entwicklersicht beschriebene  Aufgaben, die zu bearbeiten sind, um eine User-Story  umzusetzen.    Gewinn für Schülerinnen und Schüler Tasks • sind ein Instrument, um von User-Storys zu einem Entwurf zu gelangen, • fördern Selbstorganisation und Eigenverantwortung, • stellen ein Hilfsmittel zur Verbalisierung von Gedanken und Lösungsansätzen  dar, • können als To-do-Liste gesehen werden und vereinfachen dadurch die Einschätzung des Aufwands und die Umsetzung, • ermöglichen Erfolgserlebnisse bei der jeweiligen Fertigstellung.   Gewinn für Lehrkräfte Tasks  • machen anhand der Zuordnungen nachvollziehbar, wer welche Teile bearbeitet  hat, und Ungleichverteilung der Arbeit sichtund adressierbar, • machen Problemlösevorgänge sichtbar und vergleichbar, • zeigen konzeptionelle Fehler frühzeitig auf.Agiler Methodenkoffer I 112Hintergrund Sind die ↑ User-Storys erstellt und priorisiert, wird jede User-Story der nächs ten ↑ Iteration in mehrere Tasks überführt, die hierzu auf jeweils einem Kle bezettel notiert werden. In der Softwareentwicklung ist ein Task eine knappe  technische Beschreibung eines kleinen abgeschlossenen Arbeitspakets, das von  einer einzelnen Entwicklerin, einem einzelnen Entwickler bzw. dem Entwickler paar in überschaubarer Zeit (einige Stunden) erledigt werden kann. Tasks werden mit ↑ Aufwandsabschätzungen versehen. Als Summe dieser Abschätzungen  über alle Tasks erhält man ein genaueres Maß des zu erwartenden Aufwands für  die Implementierung der gesamten User-Story. Umsetzung in der Schule Um User-Storys, die ja als reine Anforderungen aus Kundensicht formuliert  sind, zu realisieren, bedarf es nun der Planung und Beschreibung der konkre ten Schritte, die aus Entwicklersicht bei der Implementierung notwendig sind: Notwendige Fragen bei der Implementierung • Wo erfolgen Änderungen? (Welche Klassen des aktuellen Prototyps werden von  der Umsetzung der User-Story berührt?) • Was muss geändert werden? (Attribut, Methode …) • Wie erfolgen die Änderungen? (Implementierungsdetails wie z.B. Datentypen,  Signaturen von Methoden, Attributnamen, Bibliotheksfunktion …) Auch in der Schule bietet es sich an, die Antworten auf diese Fragen je Task  auf einem Klebezettel zu notieren. Die Erstellung der Tasks erfolgt gemein sam im Team und dient damit auch der Diskussion in der Gruppe darüber, wie  User-Storys technisch umgesetzt werden können bzw. sollen. Leistungsstarke  und leistungsschwache Schülerinnen und Schüler arbeiten hierbei intensiv zusammen, was auch den Wissenstransfer in der Gruppe unterstützt. Da ein Task  wesentliche Umsetzungsentscheidungen festhält, sind in dieser Phase auch Ent wurfsund Modellierungsaspekte zu berücksichtigen. Durch die Beschreibung,  wo, d. h. in welchen Klassen, der Task zu Änderungen führt, lässt sich dann auch  entscheiden, welche Tasks parallel bearbeitbar sind. Je nach Situation und Lerngruppe können Tasks unterschiedliche Komplexi tät aufweisen. So ist das Erstellen einer Klasse, die sich um Einund Ausgaben  über eine grafische Benutzeroberfläche kümmert, relativ komplex, das Erstellen Tasks – Arbeitspakete aus Entwicklersicht 113eines Konstruktors relativ einfach. Tasks können somit auch sehr kleine Arbeits aufträge sein, nahe an dem, was im Code umzusetzen ist.  Soll im Unterricht auch die Zeitplanung berücksichtigt werden, kann wie  in professionellen Projekten eine Abschätzung des zeitlichen Aufwands notiert  werden. Durch Ermittlung des Gesamtaufwands kann dann bestimmt werden,  ob die Iterationsplanung sinnvoll ist und sich die Arbeit in der zur Verfügung  stehenden Unterrichtszeit umsetzen lässt, oder ob noch Anpassungen vorge nommen werden müssen.  Die Tasks werden nun an die Karteikarten der jeweils dazugehörigen  User-Story geheftet und am ↑ Project-Board angebracht. Im weiteren Verlauf  wählen die Programming-Pairs (↑ Pair-Programming) einen Task, notieren  ihre Namen darauf und hängen ihn am Project-Board in die Spalte «in Progress».  Treten Fragen auf, die einen anderen Task betreffen, können sich die Schülerin nen und Schüler direkt an das Pair wenden, das den betreffenden Task bearbeitet. Sobald ein Task umgesetzt ist, wandert er in die Spalte «Done».  Ein Blick ins Klassenzimmer Informatiklehrerin Frau Hopper berichtet: Unten sehen Sie in einem Beispiel, wie im Rahmen einer Spielprogrammierung mit  Scratch ein Team in meiner Klasse die User-Storys über Tasks sehr gut geplant hat.  Die Tasks können gut arbeitsteilig erledigt werden, weil die zu erledigenden Auf gaben in unterschiedlichen Figuren (Sprites) liegen. Die Schülerinnen und Schüler  müssen dennoch gut planen und sich absprechen, weil viele Interaktionen zwischen  Scratch-Figuren enthalten sind. Es ist von Vorteil, dass die Schülerinnen und Schüler  aufgrund der niedrigen Priorität der User-Story schon in mehreren vorangegangenen  Iterationen lernen konnten, wie man solche Absprachen gut und zügig trifft und wie  man sie als Task festhält. Die Aufwandsabschätzung erfolgte relativ durch Vergabe  von T-Shirt-Größen S, M, L.Agiler Methodenkoffer I 114Abbildung 4.7:  Ausdifferenzierte User-Storys eines Spielprojekts mit Scratch Ein Blick ins Klassenzimmer Informatiklehrer Herr Backus berichtet: In Oberstufenprojekten sind die Themen komplexer, aber auch da helfen User  Storys und zugehörige Tasks, Aufgabenpakete zu schnüren. Letztes Jahr wollte bei  mir im Kurs ein sehr leistungsstarkes Team eine Software entwickeln, die den Vertre tungsplan personalisiert: Ausgehend von einem PDF-Dokument für die ganze Schule  sollten nur diejenigen Stunden angezeigt werden, die eine Klasse bzw. einen Kurs  betreffen. Sehen Sie, wie das Team die User-Story «Vertretungsplaninformationen  aus einem PDF-Dokument auslesen» in Tasks unterteilt hat:Titel:  Spielanfang und Spielende ausgestalten Beschreibung:  Zu Spielbeginn kann man sich die  Regeln anzeigen lassen und die Hintergrundmusik  an­ und ausstellen. Wenn man das Spiel startet, wird  man nach dem Namen gefragt, und sobald man ihn  eingegeben hat, kann man spielen. Wenn die Spielfigur  alle Leben verloren hat, nennt sie den Namen und die  Zahl der Punkte. Priorität:  80Button «Start» erstellen;  Wenn angeklickt: – Nachricht «Los geht's!»  senden – Button verstecken – Die Spielfigur fragt: «Wie  heißt du?» ➜ Namen  speichern LButton «Spielregeln»  erstellen; wenn angeklickt,  erscheinen die Spielregeln.  Bei «Los geht's!» ➜  Button verstecken. M Wenn die Spielfigur alle  Leben verloren hat, sagt sie  «Hallo» und den Spielernamen und dann «Deine  Punkte:» gefolgt vom  Punktestand. MButton «Sound» mit  Kostümen für «an» und  «aus» erstellen. Bei Klick  Kostüm wechseln und  Hintergrundmusik an ­/ ausschalten. Bei «Los geht's!» ➜   Button verstecken. MTasks – Arbeitspakete aus Entwicklersicht 115Varianten Vorgegebene Tasks in ausgearbeiteten Softwareprojekten  Um unerfahrene Schülerinnen und Schüler anfänglich bei der Erstellung von  Tasks zu unterstützen, können diese von der Lehrkraft vorgegeben oder deren  Erstellung aus den User-Storys angeleitet werden (Kapitel 3.5). Dies gibt den  Schülerinnen und Schülern Sicherheit und lässt eine anfängliche Steuerung  durch die Lehrkraft zu. Der Beginn der Projektarbeit wird dadurch planbarer  und ermöglicht geplante Binnendifferenzierung sowie die Einbettung von Lern phasen in die Projektarbeit. User-Storys als Task In überschaubaren Projekten, z.B. bei der Verwendung einer blockbasierten  Sprache, kann der Übergang von einer Beschreibung aus Kundensicht zu einer  Beschreibung aus Entwicklersicht so naheliegend werden, dass er von Schüle rinnen und Schülern auch ohne das Formulieren einzelner Tasks direkt beim  Programmieren bewältigt werden kann. Hierfür müssen die User-Storys relativ  kleinschrittig gestaltet werden (Kapitel 3.2).Titel:  Vertretungsplaninformationen aus einem  PDF­Dokument auslesen  Auslesen von Informationen aus dem PDF ­Dokument Java­Bibliothek Recherchieren: Recherchie ren einer Java ­Bibliothek,  mit der ein PDF ­Dokument  gelesen und dessen Inhalt  als Zeichenketten gespei chert werden kann.Lesen eines einfachen  PDF­Dokuments Erstellen einer Klasse  PDF­Leser, die ein PDF ­  Dokument im gleichen  Verzeichnis öffnet und den  Inhalt als Zeichenkette  speichert. Auslesen der Vertretungs planinformationen Zeilenweises Auslesen des  Vertretungsplans und  Speichern der Information  in 0bjekten der Klasse  Stundenausfall.Datenstruktur zum Speichern  eines Stundenausfalls erzeugen Erstellen einer Klasse «Stundenausfall» mit Attributen  wie Klasse/Kurs, Stunde,  entfallender Lehrer, vertretender Lehrer und passenden  Getter ­Methoden.Lesen eines strukturierten  PDF­Dokuments Herausfinden, wie man in  einem tabellenartig auf gebauten PDF ­Dokument  die Information einzelner  Zellen auslesen kann.Agiler Methodenkoffer I 116Herausforderungen • Das Betrachten eines Problems aus unterschiedlichen Blickwinkeln in  User-Storys (Benutzersicht) und Tasks (technische Sicht) fällt Schülerinnen  und Schülern mitunter schwer.  • Die Parallelbearbeitung von Tasks kann dann problematisch werden, wenn  gleichzeitig dieselbe Methode modifiziert wird und das beim Zusammenfüh ren zu Konflikten führt. Schülerinnen und Schüler lernen allerdings schnell  aus einer solchen Konflikterfahrung und werden derartige Situationen in  Zukunft vermeiden. • Wenn Tasks relativ eng zusammenhängen und sich die arbeitsteilige Umset zung als schwierig erweist, arbeiten die Pairs in der Regel an unterschiedlichen User-Storys.  • Ebenso wie User-Storys werden auch Tasks von den Schülerinnen und Schü lern oft sehr knapp oder kryptisch formuliert, was aber ausreichend ist, wenn  sie vom ganzen Team verstanden werden.  • Manche Teams oder Teammitglieder neigen dazu, zu viel in eine User-Story  hineinzuinterpretieren und mehr Tasks als notwendig zu planen. Neben Hin weisen auf das KISS-Prinzip kann man ggf. auch optionale Tasks einführen,  die umgesetzt werden, sobald alle verpflichtenden Tasks in Bearbeitung oder  beendet sind. Die feste Länge einer Iteration (↑ Timeboxing) verhindert au tomatisch ein Sichverlieren. Material • Klebezettel • Beispiel-Tasks als Orientierung für Umfang und Form von Tasks Tipps und Tricks aus der Unterrichtspraxis • Als Einstiegshilfe können einige Tasks zu einer User-Story vorgeben werden. • Lösungsansätze für das Überführen von User-Storys in Tasks können als  Hilfsmittel angeboten werden, z.B. indem die Lehrkraft Leitfragen oder  mögliche Tasks auf die Rückseite konkreter User-Storys schreibt. • In der Anfangsphase wird das Planungs-Meeting für die Taskeinteilung  durchaus Zeit benötigen und es kann ein mehrfaches Nachbessern während  der Implementierungsphase erforderlich werden. Der Aufwand wird sich  jedoch mit zunehmender Erfahrung reduzieren. Tasks – Arbeitspakete aus Entwicklersicht 117• In Unterrichtsprojekten hat es sich als äußerst motivierend erwiesen, wenn  jede Erledigung eines Tasks mit einem lauten «Juhu» gefeiert wird. • Beim Zusammenfügen der einzelnen Beiträge zu einem gemeinsamen  Quelltext geht leicht der Überblick verloren, wenn mehrere Versionen ei nes Quelltextes gleichzeitig geöffnet sind. Es kann hilfreich sein, zusätzlich  zur Entwicklungsumgebung einen Texteditor (mit Syntaxhervorhebung) zu  verwenden: Aus dem Dokument im Texteditor werden die betreffenden Ab schnitte kopiert und dann in das Zieldokument in der Entwicklungsumge bung eingefügt. Eine komplexere, aber elegante Lösung ist die Verwendung  von ↑ Repositorys.Agiler Methodenkoffer I 1184.5 Stand-up-Meetings und andere   Besprechungsformen Meetings sind ein wichtiger Baustein zum Informations austausch im Team. Die verschiedenen Besprechungsfor men unterscheiden sich hinsichtlich Zielsetzung, Zeit punkt und Dauer. Allen ist gemeinsam, dass sie zeitlich  begrenzt sind und dass besonders die Werte Offenheit,  Respekt und Fokussiertheit im Vordergrund stehen.  Gewinn für Schülerinnen und Schüler Meetings • fordern zum jeweils passenden Zeitpunkt die nötige Kommunikation ein, • bringen das Team auf einen gemeinsamen Informationsstand, • geben die Gelegenheit, eigene Ideen sichtbar für alle einzubringen, • ermöglichen, offen Fragen zu stellen und Probleme anzusprechen, • helfen, sich auf die Selbstorganisation der Gruppe zu konzentrieren.   Gewinn für Lehrkräfte Meetings • verringern den Betreuungsaufwand, da die Selbstorganisation der Gruppe  stark gefördert wird, • bieten die Möglichkeit, die Gruppenorganisation zu beobachten, • geben einen Einblick in die softwaretechnische Vorgehensweise und Probleme,  die sonst oft verborgen sind,  • ermöglichen es, Konflikte in den Teams zu erkennen.Stand-up-Meetings und andere  Besprechungsformen 119Exemplarisch wird in den Abschnitten Hintergrund und Umsetzung in der Schu le das Stand-up-Meeting ausführlicher beschrieben. Weitere Besprechungsformen finden sich unten im Abschnitt Varianten. Stand-up-Meeting Ein Stand-up-Meeting ist eine kurze, im Allgemeinen täglich stattfindende  Besprechung, in der sich alle Teammitglieder über den aktuellen Projektstand  austauschen. Das Stand-up-Meeting soll so kurz sein, dass es sich nicht lohnt,  dafür eine Sitzgelegenheit zu suchen. Hintergrund Kurze Stand-up-Meetings (5 bis maximal 15 Minuten), meist zu Beginn eines  Arbeitstages, dienen dem Team dazu, sich täglich gegenseitig zu informieren.  Jeder Mitarbeiter und jede Mitarbeiterin nennt seine bzw. ihre seit dem letzten  Stand-up-Meeting erledigten und die heute geplanten Aufgaben (↑ Tasks) sowie  ggfs. aufgetretene Schwierigkeiten. Um das Meeting kurz zu halten, wird hierbei auf die Diskussion von Details verzichtet. Wird eine Schwierigkeit genannt,  so dient das Meeting dazu, einen geeigneten Ansprechpartner oder eine geeig nete Ansprechpartnerin zu finden, um danach Lösungsansätze zu besprechen.  Hält man sich an die Regeln, wird auch bei einem Projekt mit vielen Beteiligten  die Maximalzeit nicht überschritten. Da diese kurzen Besprechungen täglich  stattfinden, findet sich hierfür auch häufig die Bezeichnung «Daily». Durch das  Stehen, meist vor dem ↑ Project-Board, wird eine zielorientierte und aktive Dis kussionsatmosphäre begünstigt. Umsetzung in der Schule Dem Start in den Arbeitstag entspricht in der Schule der Beginn einer Unter richtsstunde. Die Gruppe versammelt sich stehend vor dem Project-Board und  rekapituliert kurz, was zuletzt erreicht wurde. Anschließend werden die nächsten  Aufgabenschritte besprochen und das Project-Board entsprechend aktualisiert.   Es ist wichtig, dass die Stand-up-Meetings einerseits kurz bleiben und sich andererseits alle an der Diskussion beteiligen, z.B. indem jede und jeder das Team  über ihre bzw. seine letzten Arbeiten informiert. Sollte im ↑ Pair-Programming  gearbeitet werden, teilt sich das Paar die Rückmeldung.Agiler Methodenkoffer I 120Reihum zu beantwortende Fragen • Welche Tasks wurden seit dem letzten Treffen erledigt? • Welche Tasks werde ich als nächste bearbeiten? • Falls Probleme aufgetreten sind, welche waren dies? Ein Blick ins Klassenzimmer Informatiklehrerin Frau Estrin berichtet Nach vier Wochen hat auch die eher große Achtergruppe unheimlich effizient kommuniziert. Inzwischen wird die Leitung jedes Mal von jemand anderem übernommen.  Die Zeit eines Stand-up-Meetings haben sie relativ gut im Griff. Sie planen zielgerichtet und gehen nach 5 bis 10 Minuten mit definierten Aufgaben an ihre Rechner.  Varianten Spontan-Meeting In verschiedenen Projekten hat es sich bewährt, dass jederzeit spontan  ein Stand-up-Meeting einberufen werden kann, falls schwerwiegende Probleme  auftreten, die im Team gemeinsam gelöst werden müssen. Beispielsweise kann  ein Sonderfall bei der Interaktion mehrerer Objekte in der Planung übersehen  oder unzureichend besprochen sein. Planungs-Meeting  Abhängig vom Zeitpunkt sind Planungs-Meetings mit unterschiedlichen Ziel setzungen nötig:  • Zu Beginn des Projekts müssen die ↑ User-Storys als Backlog erarbeitet wer den. • Zu Beginn einer Iteration müssen (ggfs. mit einer Umpriorisierung)  die User-Storys ausgewählt werden, die als nächste umgesetzt werden sol len. Zu jeder User-Story müssen Tasks formuliert werden. • Im Laufe des Projekts kann ein Bedarf an themenbezogenen Planungen auf treten, z.B. eine Besprechung von Strukturänderungen (↑ Refactoring) oder  Festlegungen der Benutzerführung/-oberfläche. Review  Das Review entspricht der Produktabnahme durch den Kunden (s.a. ausführ licher unter ↑ Reflexion) und findet immer am Ende einer Iteration im Team Stand-up-Meetings und andere  Besprechungsformen 121oder im Plenum statt: Der neue Prototyp wird vorgestellt und anschließend wird  Feedback durch die Teammitglieder oder alle Mitschülerinnen und Mitschüler,  die Lehrkraft und ggfs. auch Externe eingeholt. Im Review sollte nicht an Lob  und positiver Bestärkung gespart werden.  Retrospektive  Die Retrospektive hat als Zielsetzung eine kritische Reflexion des Arbeitsab laufs, der Zusammenarbeit und des Umgangs miteinander (s.a. ausführlicher  unter ↑ Reflexion).  Mögliche Fragen zur Verbesserung des Arbeitsprozesses sind:  • Was lief gut? • Was hätte besser laufen können? • Was wollen wir im nächsten Schritt konkret ändern? Herausforderungen • Kommunikationsschwache Schülerinnen und Schüler können vor allem anfangs Probleme haben, sich vor der Runde zu artikulieren. Redseligen Team mitgliedern mag es schwerfallen sich zu fokussieren. Erfahrungen zeigen,  dass sich die Probleme mit der Zeit einpegeln. • Gruppendynamische Aspekte können Probleme hervorrufen. In einem solchen Fall sollte die Lehrkraft eine Retrospektive einberufen, um über die  Probleme offen und lösungsorientiert zu sprechen. Material • Project-Board • Platz für räumliche Verteilung der Projektgruppen ohne/mit Sitzmöglich keiten Tipps und Tricks aus der Unterrichtspraxis • Bei Bedarf können die Rollen eines Moderators oder eines Zeitwächters  (↑ Timeboxing) vergeben werden. • Im Anfangsunterricht empfiehlt es sich, eine Checkliste für das typische  Stand-up-Meeting (Kasten oben) auszuhängen.Agiler Methodenkoffer I 122• Visualisierungen (z.B. Klassendiagramme) unterstützen die Besprechungen  und sollten einbezogen werden. • In der Unterstufe können Reviews klein gehalten werden, z.B. durch ein Tes ten/Vorstellen der neuen Ergebnisse innerhalb des Teams.Pair-Programming – Zusammenarbeit mit klarer Rollenverteilung 1234.6 Pair-Programming – Zusammenarbeit  mit klarer Rollenverteilung Pair-Programming ist eine Arbeitstechnik, bei der zwei  Teammitglieder mit verschiedenen Rollen gemeinsam pro grammieren. Gewinn für Schülerinnen und Schüler Pair-Programming • organisiert kollaboratives Arbeiten mit definierten Rollen statt einer Ak tiv-Passiv-Teilung, • ermöglicht ein gegenseitiges Unterstützen und Teilen der Kenntnisse, • verhindert Fehler durch das Vier-Augen-Prinzip, • erhöht die Selbstsicherheit bei der Bearbeitung von schwierigen Aufgaben und  bei eventuell folgenreichen Entscheidungen, • fördert die Codequalität, da der Code in Worte gefasst und dadurch genauer  durchdacht wird.  Gewinn für Lehrkräfte Pair-Programming • sorgt für gleichmäßige Beteiligung der Schülerinnen und Schüler durch Rol lenwechsel, • unterstützt den Wissenstransfer und verhindert planloses Drauflos-Program mieren, • fördert den Austausch im Team über die normalen Sitznachbarn hinaus und  macht so Programmieren als Gemeinschaftsprozess wahrnehmbar.Agiler Methodenkoffer I 124Hintergrund Beim Pair-Programming arbeiten zwei Programmiererinnen oder Programmie rer gemeinsam an einem Computer. Sie füllen dabei zwei verschiedene Rollen  aus: die des Drivers (Fahrers), der an der Tastatur und Maus sitzt, und die des  Navigators, der dem Driver über die Schulter sieht. Die Rollen werden dabei re gelmäßig getauscht. Der Driver programmiert und erklärt dem Navigator ständig, was er vorhat und wie er vorgeht. Der Navigator überprüft kontinuierlich die  Eingaben des Drivers, überlegt sich daneben auch alternative Vorgehensweisen  und diskutiert mit dem Driver mögliche Fehlinterpretationen und Probleme im  Entwurf. So ist es seine Aufgabe, das große Ganze im Blick zu behalten. Pair-Programming soll durch das Vier-Augen-Prinzip frühzeitig zur Entde ckung von Entwurfsfehlern führen und wird deshalb beispielsweise eingesetzt,  wenn in kurzer Zeit Programme mit einer hohen Qualität erstellt werden müs sen. Außerdem ermöglicht der intensive soziale Austausch, dass unterschied liche Sichtweisen und Intentionen von Teammitgliedern schnell transparent  gemacht und dann auch geklärt werden können. Daher ist ein Einsatzszenario  in Unternehmen auch das «Anlernen» von Junior-Entwicklern durch das Pro grammieren im Paar mit einem Senior-Programmierer.  Umsetzung in der Schule An vielen Schulen teilen sich zwei Schülerinnen und Schüler bei der praktischen  Arbeit einen Computer. Mit Pair-Programming wird aber keineswegs aus der  Not eine Tugend gemacht und etwa die knappe Ausstattung zur Unterrichtsme thode geadelt. Vielmehr bietet es große kommunikative und auch pädagogische  Vorteile. Pair-Programming unterstützt das gemeinsame Arbeiten, indem jeder  Schülerin bzw. jedem Schüler des Pairs eine konkrete Rolle zugewiesen wird. Auf  den Wechsel der Rollen, üblicherweise alle 15 Minuten, sollte im Schulrahmen  besonders geachtet werden. Außerdem unterstreicht das Konzept, wie wichtig  es ist, dass über den entstehenden Code geredet wird, und es wird verlangt, dass  beide Partner aufmerksam an der Codeherstellung mitwirken. Pair-Program ming ist per se eine kooperative Unterrichtsform. Die Zusammensetzung der Paare kann je nach Schülergruppe durch die Lehr kraft oder die Schülerinnen und Schüler selbst erfolgen, in leistungshomogenen  oder auch -heterogenen Paaren. Gleiches gilt für die mögliche Durchmischung der Paare: Sowohl die Beibe haltung der Paare als auch der regelmäßige Wechsel der Partner sind möglich.Pair-Programming – Zusammenarbeit mit klarer Rollenverteilung 125Der Driver  • verwendet Tastatur und Maus und verfasst den Quelltext,  • teilt Entscheidungen und Absichten dem Partner/der   Partnerin mit. Der Navigator • stellt regelmäßig Fragen,  • prüft, ob Schnittstellenabsprachen eingehalten werden,  • achtet darauf, dass sprechende Variablennamen verwendet und andere Verein barungen bzgl. der Lesbarkeit des Codes eingehalten werden, • identifiziert schwierige Codestellen, die einer Kommentierung bedürfen, und for dert Kommentare ein,  • übernimmt die Verantwortung dafür, dass bei der aktuellen Aufgabe geblieben wird, • prüft, ob die Implementierung zur User-Story, dem Task oder der Modellierung  passt, • achtet auf Initialisierung, Zugriff auf Referenzen, die Berücksichtigung von Sonderfällen und Abbruchbedingungen bei Rekursionen.     Ein Blick ins Klassenzimmer Informatiklehrer Herr Zuse berichtet: In den meisten Unterrichtsprojekten haben sich die Schülerinnen und Schüler selbst  in Programming-Pairs zusammengefunden. Teilweise haben sie sogar im Lauf des  Projekts Umbesetzungen selbst initiiert und organisiert, um Kenntnisse innerhalb  des Projektteams effizienter zu nutzen.  Bei ungerader Schülerzahl oder wenn ein Pair-Partner krank war, wurde es den Schü lerinnen und Schülern überlassen, ob sie zu dritt zusammenarbeiten möchten oder  ob jemand einzeln arbeiten möchte. Die Zusammensetzung der Pairs kann, muss  aber nicht gewechselt werden. Mit beiden Varianten habe ich gute Erfahrungen  gemacht. Es ist in agilen Projekten auch wichtig, dass sich die Projektbeteiligten  wohlfühlen. Varianten Eine interessante Strategie stellt der Truck-Factor-Check dar, der die Situation  simuliert, wenn ein Partner ausfällt (Kapitel 3.4). Um insbesondere bei längeren  Projekten oder besonderen Lerngruppen sicherzustellen, dass sich beide Partner Agiler Methodenkoffer I 126an den gemeinsamen Arbeiten aktiv beteiligen, kann der Truck-Factor-Check für  ein Pair ausgerufen werden. In dem Fall wird der aktuelle Arbeitsstand auf einen  zweiten Rechner kopiert und beide Schüler oder Schülerinnen müssen nun zeigen,  dass sie in der Lage sind, allein, ohne den Partner oder die Partnerin weiterzuarbeiten. Dazu müssen beide verstanden haben, was vorher gearbeitet wurde. Herausforderungen • Es sollte allen klar sein, dass auch der Navigator nicht untätig sein darf. Mit denken ist eine wichtige Voraussetzung, um nach dem Rollenwechsel gut  weiterzuarbeiten. • Ein selbstständiger Rollenwechsel sowie die Kommunikation (insbesondere  des Drivers) sind keine Selbstläufer und müssen regelmäßig von der Lehr kraft eingefordert werden. • Manche Schülerinnen und Schüler haben eine geringe Frustrationstoleranz,  wenn sie nicht die Kontrolle über die konkrete Arbeit haben. Dadurch kann  es zu produktivitätshemmenden Konflikten kommen. • Wenn innerhalb eines Pairs die Motivationen und die Vorstellungen von  Eigeninitiative sehr unterschiedlich ausfallen, besteht die Gefahr, dass die  Zusammenarbeit nicht funktioniert. Aber auch solche heterogenen Pairs ha ben schon wunderbar zusammen funktioniert und tolle Ergebnisse gebracht. Material • Zum Anfang empfiehlt sich für jedes Pair eine Karte, die an die Kernaufgaben  der beiden Rollen erinnert (Kasten oben).  Tipps und Tricks aus der Unterrichtspraxis • Der Truck-Factor kann auch mittels Glücksrad o. Ä. simuliert werden und so  zufällig jederzeit zur Anwendung kommen.  • Bei Konflikten oder Problemen bezüglich der Umsetzung, die das Pair al lein nicht lösen kann, können Spontan-Meetings einberufen werden, um im  Team gemeinsam einen Lösungsansatz zu suchen. • In sehr ungleichen Pairs kann der Navigator bei neuen Lösungsansätzen auch  beschreiben, was zu tun ist. Der Driver tippt den Programmtext ein und stellt  Fragen, wenn ihm etwas unklar ist. Ziel dieses Vorgehens ist, dass der Driver  im weiteren Projektverlauf ähnliche Aufgaben möglichst selbstständig umsetzen kann. Dies wird auch in der Software-Praxis so gehandhabt.Prototypen – funktionsfähige Produkte ab der ersten Iteration 1274.7 Prototypen – funktionsfähige Produkte ab  der ersten Iteration Ein Prototyp ist ein getestetes und lauffähigesProdukt,  das jedoch nicht vollumfänglich sein muss. Jeder Proto typ markiert den Abschluss einer Iteration.     Gewinn für Schülerinnen und Schüler Prototypen • motivieren durch regelmäßige, schnell sichtbare (Zwischen-)Ergebnisse dazu,  engagiert weiterzuarbeiten, • helfen, sich anhand überschaubarer Ziele eines nächsten Schritts auf das We sentliche (des Prototyps dieser Iteration) zu fokussieren, • machen frühzeitig und regelmäßig das Produkt hinsichtlich der eigenen Ziele  oder Kundenwünsche überprüfbar, • erfordern frühzeitig und regelmäßig, die Teilprodukte (z.B. GUI, Datenbank und  Programmlogik) zusammenzubringen, • stellen auch bei vorzeitigem Projektabbruch ein funktionsfähiges Produkt dar.   Gewinn für Lehrkräfte Prototypen • geben einen kontinuierlichen Einblick in den Projektfortschritt der Schülerinnen und Schüler, • stellen jeweils eine Möglichkeit zum produktbezogenen Feedback und zur Be urteilung der Leistung dar.Agiler Methodenkoffer I 128Hintergrund Agile Prozesse sind so gestaltet, dass sie in kurzen Iterationen funktionierende  Prototypen hervorbringen, die dem Kunden oder der Kundin einen Mehrwert  bringen. Prototypen können mit den Kunden diskutiert und von zukünftigen  Nutzern erprobt werden. Das ermöglicht schnelle Feedbackschleifen, die dabei  helfen, Missverständnisse aufzudecken, kritische Aspekte in der Benutzung der  Bedienoberfläche zu entdecken und das Projekt an neue Anforderungen anzu passen oder die Priorisierung neu zu ordnen. Für das Entwicklerteam ist ein  Prototyp die Basis für eine konkretere Kommunikation. So sinkt das Risiko einer  Fehlentwicklung und die Qualität steigt. Prototypen werden in den Softwareun ternehmen intern bzw. extern abgenommen und sollen deshalb festgelegte Qua litätskriterien erfüllen. Deshalb investiert das Team regelmäßig Zeit in gründliche ↑ Tests, angemessene ↑ Dokumentation und nötige Restrukturierungen  (↑ Refactoring) der Software. Umsetzung in der Schule Auch in schulischen Softwareprojekten repräsentieren Prototypen Versionen  des angestrebten Produkts mit inkrementellem Mehrwert. Hierbei ist jeder Pro totyp das getestete und lauffähige Produkt einer Iteration, bei dem jedoch nur  ein Teil der geplanten Features eingearbeitet ist. In regelmäßigen Abständen  werden die aktuellen Prototypen, ähnlich den Kundenpräsentationen in der  professionellen Entwicklung, den Mitschülerinnen und Mitschülern oder der  Lehrkraft vorgestellt. Zum jeweiligen Projekt sinnvoll passende und mit den  Schülerinnen und Schülern abgestimmte Qualitätskriterien sind dabei eine Ori entierungshilfe für die Teams und tragen dazu bei, dass das Feedback und die  Bewertung transparent werden.Prototypen – funktionsfähige Produkte ab der ersten Iteration 129Ein Blick ins Klassenzimmer Informatiklehrer Herr Nygaard berichtet: Sehen Sie sich folgende Bildsequenz an, die die zwei ersten lauffähigen Prototypen  des Jump-’n’-Run-Spiels «Pengu» meiner Schülerinnen und Schüler zeigt. Sie illustriert schön, wie das Spiel schrittweise entwickelt wurde:  Prototyp 1: Die Grundfunktionalität des Spiels ist hergestellt. Eine Welt mit zwei  Felsabbrüchen, einer Wolke und einem Pinguin als Spielfigur, der über die Cursor tasten bewegt werden und in den Abgrund fallen kann. Prototyp 2: Pengu kann nun auch springen und auf der Wolke stehen, die sich zwi schen dem Abgrund hin und her bewegt. Agiler Methodenkoffer I 130Finales Ergebnis: Nach einer Reihe weiterer Iterationen hat das Spiel noch eine   Menge weiterer Funktionalitäten, wie z.B. Punktezähler, Anzahl von Leben, Schneeflocken und Eiszapfen als weitere Spielelemente erhalten.   Varianten Kundenfeedback Falls für ein passendes Projekt externe Kunden bspw. in einer Schulbibliothek  oder im Sekretariat existieren, sollten geeignete Prototypen ausgewählt werden,  die den Nutzern zum Testen zur Verfügung gestellt werden. Der Kunde gibt dann  dem Team z.B. in einer Besprechung Rückmeldung über die Erfahrungen. Mock-up Ein Mock-up ist ein nicht funktionsfähiges Vorführmodell, das insbesondere zu  Beginn der Produktentwicklung eingesetzt wird, um Anforderungen mit Kunden und Nutzern abzustimmen. In der Softwareentwicklung wird es häufig für  grafische Benutzeroberflächen eingesetzt. Ein Mock-up kann in der Anfangs phase auch als Prototyp gesehen werden.  Herausforderungen Die Zeit so zu planen, dass genau am Ende einer Interation ein getesteter und  lauffähiger Prototyp fertiggestellt ist, ist anspruchsvoll. Förderlich für das Ge lingen sind Pufferzeiten am Ende einer Iteration und ein absolutes Verbot von  Änderungen in letzter Minute (notwendige Änderungen müssen als User-Story  Prototypen – funktionsfähige Produkte ab der ersten Iteration 131in die nächste Iteration aufgenommen werden). Sind die für einen Prototyp ge planten User-Storys schneller umgesetzt als gedacht, empfiehlt es sich, an der  Dokumentation zu arbeiten, den Quelltext zu optimieren (↑ Refactoring) oder  zu testen. Hier können gegebenenfalls auch andere Pairs unterstützt werden.  Auch das Spezifizieren von Tasks der nächsten User-Story ist denkbar. Herausfordernd kann das Zusammenführen (mergen) der Ergebnisse der  Projektbeteiligten sein. Dies geht mit visuellen Programmiersprachen relativ  einfach, solange die Schülerinnen und Schüler an verschiedenen Figuren (Spri tes) arbeiten. Bei textbasierten Programmiersprachen muss erfahrungsgemäß  mehr Zeit dafür eingeplant werden. Empfehlenswert sind ↑ Repositorys. Falls  das Zusammenführen von den Schülerinnen und Schülern manuell übernommen wird, sollten die weiteren Teammitglieder diese Zeit sinnvoll nutzen, z.B.  indem sie sich untereinander beim Finden und Beheben von Fehlern unterstüt zen, die Modellierungen auf den aktuellen Stand bringen, Lücken in der Dokumentation identifizieren oder schon Zwischenversionen der teilweise zusam mengeführten Software testen.  Material • Werkzeug zum Einsammeln und Archivieren der Prototypen (z.B. Moodle,  Repository …) Tipps und Tricks aus der Unterrichtspraxis • Prototypen erzwingen eine frühe und regelmäßige Integration unterschied licher Programmteile und Komponenten, wenn die Ergebnisse der einzel nen Paare zusammengeführt werden. Das hat den Vorteil, dass gerade in  größeren Projekten Schnittstellenprobleme, etwa zwischen den Schichten  (Datenhaltung, Logik und grafische Benutzeroberfläche), überschaubar blei ben: Schnittstellenprobleme werden dann so früh erkannt, dass die dadurch  notwendigen Änderungen auch für Lernende umsetzbar sind. Insbesondere  ist auch noch genügend Zeit, diese Änderungen umzusetzen. • Fehler können in Ausnahmefällen auch einmal in die kommende Itera tion  mitgenommen werden. Dann wird eine User-Story geschrieben, die die  höchste Priorität hat, sodass die Fehler gleich am Anfang bearbeitet werden.  Eine Regel wie «Es wird nicht weitergearbeitet, bevor der Prototyp funktio niert» ist sinnvoll.Agiler Methodenkoffer I 1324.8 Agile Spiele – agiles Denken und Handeln  erleben Agile Spiele dienen als Einstieg in agiles Denken und  Handeln sowie die damit verbundenen Werte, Prinzipien und Methoden. Gewinn für Schülerinnen und Schüler Agile Spiele  • dienen zum Kennenlernen agiler Techniken, Praktiken und Herangehensweisen, • machen erste Begriffe agiler Methoden intuitiv erfassbar, • zeigen die Bedeutung von Absprachen in Teams, • stärken den Teamgeist und motivieren, • zeigen, dass konkrete Fehler, erfahrene Schwierigkeiten und als falsch erkann te Annahmen wertvoll sind für die Entwicklung von Verbesserungsideen, und  machen dies in kurzen Iterationen erfahrbar, • machen erlebbar, dass und wie man mit Änderungen in agilen Projekten umgehen kann, • verdeutlichen Agile Werte wie Respekt, offene Kommunikation, Mut zu Fehlern  und ehrlichem Feedback, Fokussiertheit und Commitment.   Gewinn für Lehrkräfte Agile Spiele  • können als motivierender Einstieg verwendet werden, • verdeutlichen spielerisch Ziele und Kernideen agiler Vorgehensweisen in Projekten.Agile Spiele – agiles Denken und Handeln erleben 133Hintergrund Agile Spiele dienen als Einstieg in agiles Denken und Handeln sowie die damit  verbundenen Werte, Prinzipien und Methoden. Sie werden von Trainern und  Coaches in Unternehmen eingesetzt, um bei der Umstellung auf agile Methoden  die Mitarbeiter und Mitarbeiterinnen in entsprechende Praktiken einzuführen  sowie bei teambildenden Maßnahmen die Zusammenarbeit zu stärken bzw. Re flexionsprozesse darüber anzuregen.  Umsetzung in der Schule Agile Spiele lassen sich direkt auch im Schulkontext nutzen, um auf die Arbeit  in agilen Softwareprojekten vorzubereiten. In der Regel werden solche Spiele vor  der eigentlichen Projektphase oder bei Problemen im Projekt eingesetzt, bspw.  um Reflexionsprozesse zu schulen. Beispiel 1: Das Ball-Point-Game Spielregeln  Für das Spiel wird der Gruppe ein Behälter (z.B. Schachtel, Einkaufstüte aus  Papier) mit (Tisch-)Tennisbällen bereitgestellt. Das Ziel besteht darin, so viele  Bälle wie möglich in 2 Minuten durch die Reihe der Teilnehmer laufen zu lassen.  Zu beachten sind folgende Regeln, die bewusst nicht weiter spezifiziert werden: • Jeder Teilnehmer und jede Teilnehmerin muss den Ball mindestens einmal  berühren, dann muss der Ball zurück zum Startspieler.  • Der Ball muss «geworfen» werden, also sich eine gewisse Zeit in der Luft  befinden!  • Falls der Ball herunterfällt, muss er zurück in den Behälter und es gibt keinen  Punkt. • Der Ball darf nicht an direkte Nachbarn weitergegeben werden. Ansonsten kann sich das Team selbstständig organisieren, eigene (regelkonfor me) Vorgehensweisen finden und optimieren und so seinen individuellen Weg  für das beste Ergebnis finden. Das betrifft einfache Aspekte wie die Wahl des  Startspielers und die Form der Aufstellung, aber auch Interpretationen, ob der  Ball für einen Punkt im Behälter abgelegt werden muss und wie der Ball «gewor fen» wird. Ob und wann die Regeln verletzt werden, erkennt das Team meist  selbst. Strittige Fragen klärt die Lehrkraft und sie kann ggf. am Ende Punkte Agiler Methodenkoffer I 134für«nicht sauber gespielte Runden» abziehen, wobei sie das idealerweise mit  dem Team einvernehmlich tut.  Abbildung 4.8:  Ball-Point-Game Ablauf Zunächst werden die Regeln vorgestellt, ggf. Fragen beantwortet, aber ohne zu  viel vorzugeben. In der ersten Iteration wird 2 Minuten lang die Spielstrategie  geplant. Dann muss sich die Gruppe (zügig) auf eine gemeinsame Schätzung  einigen, wie viele Punkte voraussichtlich erzielt werden. Die Schätzung wird  schriftlich fixiert. Im Spiel muss einer der Teilnehmenden (meist der Start spieler selbst) die Zahl der regulär gespielten Runden und daraus resultieren den Punkte zählen. Nach 2 Minuten Spielzeit werden die tatsächlich erreich ten Punkte notiert, dann wird 1 Minute reflektiert (↑ Reflexion). Nun folgt die  nächste Iteration, in der erneut geplant (nun 1 Minute), wieder geschätzt und  gespielt wird usw. Reflexion und Planung gehen fließend ineinander über, das  Team entscheidet selbst, wie es die 2 Minuten zwischen den Spielphasen nutzt.   Der gesamte Prozess wird in drei oder vier Iterationen durchgeführt.   Als Variante kann ab der dritten Iteration ein zusätzliches Wurfobjekt (z.B. ein  Stein) hinzugefügt werden, welches mehr Punkte bringt und nach denselben  Regeln vom Startspieler zu den anderen Spielern wandern muss. Idealerweise  unterscheidet es sich in Gewicht und Größe von den bisher verwendeten Bällen. Nach der letzten Iteration werden das Spiel und die erreichten Leistungen  ausgewertet (Reflexion). Agile Spiele – agiles Denken und Handeln erleben 135Rahmenbedingungen • Dauer: ca. 40 Minuten • Teilnehmerzahl: 10−20 pro Team • Materialien (pro Team): 1 Behälter, 6−12 Bälle und 1−2 Steine (wichtig: Grö ßen-/Gewichtsunterschiede!), 1 Stoppuhr, Papier/Tafel und Stift zur Doku mentation von Schätzung und Ergebnis je Durchlauf Reflexionsfragen  • Wie zufrieden seid ihr mit dem Ergebnis? Hättet ihr dieses Ergebnis zu Be ginn erwartet? • Hättet ihr noch weitere Runden spielen wollen, um euch zu verbessern?  Hattet ihr beim Programmieren schon mal ein solches «Flow»-Gefühl und  wolltet nicht aufhören? • Wie schwer war das Schätzen am Anfang/am Ende? • Bei vier Spielrunden gab es insgesamt 8 Minuten Zeit für die Planung des  Prozesses. Wäre das Ergebnis das gleiche, wenn die gesamte Planungszeit  am Anfang des Spiels zur Verfügung gestanden hätte? Beispiel 2: Kekse backen Spielregeln Eine neue Cookie-Produktlinie soll entwickelt und vermarktet werden. Die Um setzung wird mit einer «Papierbäckerei» nachgestellt und optimiert. Die Aufgabe  der beteiligten Teams ist es, Kekse aus Papier auszuschneiden, im gedachten  Ofen zu backen, anschließend mit Buntstiften zu verzieren und schließlich zu  verpacken. Folgende Anforderungen gibt die Geschäftsleitung vor: • Die Kekse sollen rund und mit Streusel verziert sein. • Jede Packung soll 16 Stück enthalten und mit der Beschriftung «Läcker» versehen werden. • Für das Backen gelten folgende Regeln:  °Ein Backblech (A4-Blatt) hat Platz für maximal 12 Kekse.  °Backzeit ist mindestens 60 Sekunden, nach 75 Sekunden sind die Kekse  verbrannt.  °Der Ofen (ein markierter Bereich auf dem Tisch) darf während der Back zeit nicht geöffnet werden (d. h. das Backblech und alles darauf darf wäh rend der Backzeit nicht berührt werden.)Agiler Methodenkoffer I 136  Abbildung 4.9:  Cookies backen Ablauf Die Aufgabe wird wie oben vorgestellt und die Teams, die in einem Wettbewerb  gegeneinander antreten, werden eingeteilt. Jedes Team hat 3 Minuten Planungs zeit zur Verfügung. Dann muss sich jede Gruppe (zügig) auf eine gemeinsame  Schätzung einigen, wie viele Packungen sie in 5 Minuten Arbeitszeit meint pro duzieren zu können, und die Produktionsphase beginnt. Nach dem Durchlauf  findet eine (unangekündigte) Qualitätskontrolle statt. Nach 3 Minuten Reflexion  und Neuplanung schließt sich die 2. Iteration an usw.  In einer Qualitätskontrolle am Ende jeder Arbeitsphase wird das Ergebnis (in  Form von Punkten) durch den Spielleiter bewertet. Er übernimmt dabei einerseits die Rolle der Geschäftsleitung, lässt aber auch eine kritische Kundensicht  einfließen (auch Mitglieder von anderen Teams sollen helfen, Kundenkritik bzw.  -lob zu äußern). Bewertungskriterien sind  • die Anzahl der hergestellten Packungen entsprechend der Anforderungen,  • die runde Form und (gleichmäßige) Größe der Kekse, Verzierung,  • eine ansprechende Gestaltung der Verpackung und hoher Wiedererken nungswert (sehen alle gleich aus?),  • die korrekte Schätzung der Leistungsfähigkeit, • [optional] der Ressourcenverbrauch (wurde Material verschwendet?).Agile Spiele – agiles Denken und Handeln erleben 137Die erste Qualitätskontrolle ist in der Regel für viele Teams sehr unbefriedi gend, da einige Bewertungskriterien nicht vorab mitgeteilt, sondern erst durch  die erste Qualitätskontrolle offensichtlich werden. Es wird offen, ehrlich und  mit Respekt Kritik an den Produkten geübt. Dadurch wird deutlich, wie wichtig  frühes und regelmäßiges Feedback und ehrliche, respektvolle Kommunikation  sind. Im Folgenden bleiben die Kriterien stabil und eventuelle Fragen der Teams  dazu werden von der Geschäftsleitung knapp, für alle und nach bestem Wissen  beantwortet. Kurzfristige Änderungen sind in Projekten Alltag. Um die Flexibilität (Agilität) der Teams zu testen, streut der Spielleiter unmittelbar vor Start der folgen den Arbeitsphasen neue Rahmenbedingungen ein.  • Vor der 2. Arbeitsphase: Die Marketingabteilung hat durch eine Blitzumfrage herausgefunden, dass auf der Packung ein Spruch stehen muss und die  Streusel bunt sein müssen. • Vor der 3. Arbeitsphase: Die Geschäftsleitung hat in einem Managementse minar erfahren, dass es in Unternehmen wichtig ist, Mitarbeiter der einzelnen Abteilungen zu mischen. Deshalb muss pro Team ein Mitarbeiter (den  der Spielleiter bestimmt) das Team wechseln.  • Vor der 4. Arbeitsphase: Die Geschäftsleitung hat es sich anders überlegt,  die Idee war doch nicht so gut. Die Mitarbeiter wechseln wieder zurück. Außerdem ist in Kürze Valentinstag! Die Marketingabteilung sagt, es reichen 8  Kekse pro Packung. Der/die Schenkende ist verliebt und zahlt den gleichen  Preis trotz weniger Inhalt. Dafür muss Vanilleteig (gelb anmalen mit dickem  Marker) verwendet und der Keks nach dem Backen mit einem Herz aus Bitterschokolade (schwarzer Farbstift) verziert werden.  Rahmenbedingungen • Dauer: ca. 60 Minuten • Teilnehmerzahl: 15−30 (pro Gruppe 5−6)  • Materialien: viel Papier (auch buntes), Papier/Tafel und Stift zur Dokumentation von Schätzung und Ergebnis pro Durchlauf. Pro Gruppe: Farbstifte in  mindestens fünf Farben zum Verzieren der Kekse (Streusel) und der Verpackung; auch braun bzw. schwarz als Schokoladenfarbe, dicker gelber Marker,  zwei Scheren (nicht mehr, da diese knappe Ressource für Spannung im Arbeitsprozess sorgt), Backblech (= DIN-A4-Blatt), Timer (Handy), Tesa-RolleAgiler Methodenkoffer I 138Reflexionsfragen  • Wie war es? (Zusammenarbeit, Umgang, Wertschätzung …) • Welche Rollen spielen Absprachen zur Arbeitsaufteilung? • Wie war das Gefühl derjenigen, die plötzlich das Team wechseln mussten?  Wie seid ihr zurechtgekommen? Wie seid ihr aufgenommen worden? • Welche Bedeutung hatte die Planung/der Qualitätscheck/die Reflexionspha se? Wie war der erste Qualitätscheck? Wäre das Ergebnis das Gleiche, wenn  die gesamte Planungszeit am Anfang des Spiels zur Verfügung gestanden  hätte? • Wie schwer war das Schätzen am Anfang/am Ende? Beispiel 3: Das Stabspiel Das Stabspiel ist ein sehr kurzes Spiel, das zeigt, wie wichtig es ist, in einem  Team aufeinander zu achten. Es stammt nicht von Agilen Coaches, hat aber  eine vergleichbare Intensität und Nachhaltigkeit und ist besonders für stark  heterogene Teams geeignet, die idealerweise schon einige Iterationen zusam mengearbeitet haben. Spielregeln • Die Teammitglieder stehen sich in zwei Reihen gegenüber. • Jede(r) streckt genau einen Zeigefinger zur Mitte hin aus. • Der Stab liegt lose auf den Zeigefingern.  • Jeder «beteiligte Zeigefinger» muss zu jedem Zeitpunkt Kontakt zum Stab  haben. Spielverlauf Das Team muss den Stab bis zum Boden absenken und dann wieder auf Au genhöhe anheben. Wenn ein oder mehrere Zeigefinger den Kontakt verlieren,  muss das Team von vorne beginnen. In der Umsetzung stellt sich die Aufgabe als  durchaus herausfordernd dar, was den Teammitgliedern in der Regel spätestens  dann bewusst wird, wenn der Stab wie von Zauberhand zunächst in Richtung  Himmel aufsteigt. Ohne Kommunikation und Feedback ist die Aufgabe nicht  zu bewältigen.  Rahmenbedingungen • Dauer: 5−10 Minuten + Reflexion • Teilnehmerzahl: mindestens 8Agile Spiele – agiles Denken und Handeln erleben 139• Material: ein Besenstiel/Rundholz pro 8−12 Schülerinnen und Schüler, die  nicht zu dicht stehen sollten. Abbildung 4.10: Das Stabspiel  Reflexionsfragen  • Wie war es? (Zusammenarbeit, Herausforderung an der «einfachen» Auf gabe …) • An welcher Stelle war es besonders schwierig? Wodurch kamen die Schwie rigkeiten zustande? (Bei der Aufwärtsbewegung entsteht das Gefühl, man sei  zu langsam. Ungewollt beschleunigen einige so lange die Bewegung, bis die  ersten den Kontakt zur Stange verlieren.) • Wie wurden die Schwierigkeiten überwunden? (Permanente Rückmeldun gen; die Schnellen müssen auf die Langsameren warten.) • Was bedeutet das Übertragen auf Projektarbeit im Team? (Rücksicht, kon tinuierliches Feedback, kontinuierliches Aufeinanderachten: Die Schnellen  achten darauf, dass sie niemanden abhängen, die Langsamen strengen sich  an, Schritt zu halten, gemeinsame Entscheidungen.) Beispiel 4: Die Marshmallow-Challenge Aufgabe in diesem Wettbewerb ist es, in kleinen Teams aus einer begrenzten  Menge roher Spaghetti, Klebeband und Faden ein möglichst hohes Gebäude zu  bauen, das an der Spitze einen Marshmallow tragen kann. Gefördert werden  Prototyping, insbesondere frühe Integration und regelmäßiges Testen, inno vatives Denken, Zusammenarbeit, Experimentierfreudigkeit und Kreativität  (↑ Websuche: marshmallow challenge). Beispiel 5: Kanban-Pizza-Game Aufgabe ist es, ähnlich wie im Spiel «Kekse backen», mit Hilfe von Papier zu be stimmten Vorgaben möglichst viele Pizzen zu backen. Gefördert werden Prototy ping, innovatives Denken, Zusammenarbeit (↑ Websuche: kanban pizza game).Agiler Methodenkoffer I 140Beispiel 6: Thirty-Five − paarweises Priorisieren Mit der «Thirty-Five» genannten Technik können spielerisch Aufgaben (und an deres) im Team gemeinsam priorisiert bzw. der Diskurs darüber geübt werden.  Dazu erhalten alle Teilnehmenden je eine Karte, auf der eine zu bewertende Auf gabe beschrieben ist. Nun diskutieren jeweils zwei von ihnen die Priorität ihrer  beiden Aufgaben und verteilen am Ende im Konsens fünf ganze Prioritätspunkte  basierend auf der relativen Wichtigkeit der Aufgaben zueinander (5 : 0, 4 : 1 oder  3 : 2). Die Punkte werden auf der Karte notiert und die Karten getauscht. Das  Zeitfenster (1,5 bis 2 Minuten) für die Diskussion wird vorab festgelegt und ein  Spielleiter achtet auf die Einhaltung.  Wenn alle Paare priorisiert haben, beginnt eine neue Runde. Das Spiel ist nur  mit einer geraden Anzahl an Teilnehmenden möglich und wird im Allgemeinen  sieben Runden (bei mindestens acht Teilnehmenden) gespielt. Die Summe der  Prioritätspunkte ergibt am Ende die Gesamtpriorität jeder Karte, sodass nun  alle Karten gemäß ihrer damit finalen Priorisierung geordnet ausgelegt werden  können. Die Technik führt nicht nur recht schnell zu einer Priorisierung, da es  leichter ist, Karten paarweise zu vergleichen, es werden auch alle Teammitglie der einbezogen (↑ Websuche: thirty-five agile game).Agiler   Methodenkoffer II Weitere Techniken  und Praktiken5 Der zweite Teil des Methodenkoffers enthält weitere agile Praktiken,  die sich nach ersten Erfahrungen gewinnbringend im Projektunterricht  einsetzen lassen. Sie unterstützen die Schülerinnen und Schüler in ihrer  Selbstorganisation und vertiefen die Organisation agiler Projekte.Reflexion in Review und Retrospektive – Nachdenken über Inhalt und Prozess 1435.1 Reflexion in Review und Retrospektive –  Nachdenken über Inhalt und Prozess Review und Retrospektive bezeichnen Reflexionstreffen  der Projektbeteiligten. Im Review begutachten das Team  und der Kunde gemeinsam den Prototyp und überarbeiten falls nötig die Planung. In der Retrospektive hinterfragt das Entwicklerteam Stärken und Schwächen seiner  bisherigen Arbeitsweise.    Gewinn für Schülerinnen und Schüler Review und Retrospektive  • bieten die Möglichkeit, Gelerntes bewusst zu machen, • ermöglichen es, den Umgang mit Feedback zu üben. Review • ist die Gelegenheit, Prototypen zu präsentieren und Feedback zum Produkt  und zum Projektstatus einzuholen, • fördert Selbstregulationsfähigkeiten, indem gesetzte Ziele mit dem Erreichten  verglichen werden, • motiviert, da das Team das Geschaffte in den Mittelpunkt stellt, • fördert einen Perspektivwechsel, weil das große Ganze aus Kundensicht be trachtet wird. Retrospektive • unterstützt den Ausbau und die Stärkung von Teamfähigkeit, • verhindert das Sichaufstauen von Frustration, • bietet die Gelegenheit, Änderungen an der Arbeitsweise zu planen und deren  Auswirkungen zu reflektieren.Agiler Methodenkoffer II  144Gewinn für Lehrkräfte Review und Retrospektive  • sind Gelegenheiten, im Team oder im Plenum die Fachsprache zu festigen und  neu Gelerntes zu sichern, • ermöglichen regelmäßiges Feedback zu den Prototypen, • bieten Gelegenheit, Produktund Lernfortschritte zu bewerten, • ermöglichen es, die Teams bei der Planung der nächsten Schritte zu unter stützen. Hintergrund Softwareentwicklung wird als kontinuierlicher Lernprozess verstanden, in dem  jedes Projekt und jedes Team neu und anders sind. Die Grundlage für eine stete  Verbesserung bildet frühes und regelmäßiges Feedback, wobei das direkte Ge spräch zwischen den Projektbeteiligten als effektivster Weg angesehen wird.  Review und Retrospektive sind die Meetings am Ende jeder ↑ Iteration, in denen  man innehält und sich über die laufende Software sowie über Arbeitsprozess  und Zusammenarbeit austauscht. Sie bieten Gelegenheiten, aus dem Alltag he rauszutreten, kurz auf die Metaebene zu wechseln, Erfolge zu feiern, Probleme  früh offen und konstruktiv anzusprechen und Lösungen dafür zu erarbeiten.  Folgende zwei Reflexionstreffen sind typisch in agilen Prozessen. Review: Hier steht der ↑ Prototyp im Mittelpunkt. Neben dem Entwicklerteam  nimmt idealerweise auch der Kunde daran teil. Die Entwickler präsentieren  dem Kunden am Prototyp die Ergebnisse der Iteration. Diese werden mit den  geplanten Zielen verglichen, und der Kunde erhält die Gelegenheit, den Pro totyp zu benutzen und zu validieren. Die entsprechende Rückmeldung ist im  agilen Prozess die Basis für die Planung der nächsten Schritte. Zudem sprechen  das Entwicklerteam oder der Kunde auch Fehlverhalten des Prototyps, größe re Probleme oder notwendige Änderungen im Plan offen und ehrlich an und  überlegen gemeinsam, wie sie so angegangen werden können, dass beide Seiten  damit zufrieden sind. Entsprechende User-Storys werden formuliert und in die  Planung aufgenommen.  Retrospektive: Die Retrospektive findet nach dem Review statt, um die eigenen  Arbeitsprozesse und die Zusammenarbeit zu hinterfragen. Neben objektiven Ge sichtspunkten, wie der Arbeitsgeschwindigkeit des Teams, spielen hier auch  subjektive Gesichtspunkte eine Rolle, z.B. die Wahrnehmung der Arbeitsatmo sphäre oder die Zufriedenheit mit verwendeten Werkzeugen und Methoden. Reflexion in Review und Retrospektive – Nachdenken über Inhalt und Prozess 145Damit das Team offen sprechen kann, entscheidet es selbst, ob jemand zusätzlich eingeladen wird und, wenn ja, wer. Es gibt unterschiedliche Techniken und  Vorgehensweisen, z.B. kann auf Klebezetteln zusammengetragen werden, was  gut gelaufen ist. Diese Punkte werden als Erfolg des Teams gefeiert. Anschlie ßend wird notiert, was besser laufen könnte, und es werden für einige Punkte  Maßnahmen entwickelt. Das Ziel ist die stete Verbesserung des Prozesses und  der Zusammenarbeit, an der sich alle aktiv beteiligen. Umsetzung in der Schule Reflexion und ↑ Feedback sind unabdingbar für erfolgreiches selbstorgani siertes Lernen und deshalb in Schulprojekten von besonderer Bedeutung. Auch  hier ist direktes Feedback innerhalb des Teams während der Iteration wichtig,  beispielsweise vom Navigator zum Driver im ↑ Pair-Programming. Da in der  Schule die Iterationen wesentlich kürzer sind als in professionellen Projekten,  ist darüber hinaus eine weniger formelle Form der Reflexion möglich. Ein Review führen die Schülerinnen und Schüler beispielsweise am Ende  jeder Iteration durch, indem sie sich beim Testen des Prototyps mit den neuen  Funktionalitäten vertraut machen und diese gegen die ursprünglichen Ziele prü fen. Da sie ihre eigenen Kunden sind, entscheiden sie selbst, ob sie mit den erar beiteten Lösungen zufrieden sind, und feiern ihre Erfolge. Für Fehler, die nicht  unmittelbar behoben werden können, sowie für neue Ideen oder offensichtlich  gewordene Probleme, für deren Lösung sie sich zunächst neues Fachwissen aneignen müssen, können sie User-Storys schreiben und diese priorisieren. So  behalten sie das ursprüngliche Ziel im Auge und haben für die nächste Iteration  ein ↑ Project-Board, das den aktuellen Stand des Projekts visualisiert.  In unserem Review • präsentieren wir unsere Arbeitsergebnisse der letzten Iteration und prüfen sie  gegen die Ziele der umgesetzten User-Storys, • hängen wir fertige User-Storys am Project-Board um und feiern unsere Erfolge, • notieren wir noch nicht gelöste Fehler und ordnen sie entsprechend der Wichtigkeit am Project-Board ein, • [optional] schreiben wir für neue Ideen User-Storys, • [optional] schreiben wir eine User-Story, falls wir uns zum Lösen eines Problems  noch Fachwissen aneignen müssen, • [optional] ordnen wir hinzugekommene User-Storys entsprechend ihrer Wichtigkeit am Project-Board ein.  Agiler Methodenkoffer II  146Werden die Teams am Ende der Iteration aufgefordert, in einer Retrospektive  ihre Arbeitsweise und Zusammenarbeit zu reflektieren, so ist der Bezugspunkt  – ebenso wie in professionellen Projekten – hinsichtlich der Verbesserung nicht  eine vergangene Iteration («Was haben wir falsch gemacht?») sondern die nächs te Iteration («Was wollen wir nächstes Mal besser machen?»). Insbesondere bei  Problemen in der Zusammenarbeit können in der Schule aber zum passenden  Zeitpunkt auch Vieraugengespräche zwischen einzelnen Teammitgliedern und  der Lehrkraft sinnvoll sein.  Unsere Retrospektive hat folgende Schritte Rückblick: Was lief gut? Was hätte besser laufen können? Auswahl treffen: Was davon ist uns am wichtigsten? Einsichten gewinnen: Warum sind die Dinge, wie sie sind? Maßnahmen beschließen: Was wollen wir konkret ändern? Ein Blick ins Klassenzimmer Informatiklehrerin Frau Lovelace berichtet: Unsere Iterationen dauerten jeweils drei Doppelstunden. Danach hat jedes Team  den neuen Prototyp im Plenum vorgestellt. Ich konnte permanent loben – die Schülerinnen und Schüler hatten sich immer Mühe gegeben und wirklich tolle Sachen  gemacht. Das Lob hat die Schülerinnen und Schüler sehr motiviert. Informatiklehrer Herr Weizenbaum berichtet: Mir war es wichtig, dass die Schülerinnen und Schüler immer mal wieder innehal ten konnten. Wir trafen uns dazu im Plenum. Sie fassten zusammen, was sie schon  geschafft hatten, und prüften, ob sie sich noch auf dem richtigen Weg befinden und  was noch umzusetzen war. Danach legten sie die Ziele des nächsten Schritts fest.  Erfahrungsgemäß beschrieben die Teams dabei eher das große Endziel. Kleine er reichbare Teilziele für die nächste Iteration zu formulieren, fiel ihnen besonders anfangs noch schwer. Meine Erfahrung ist auch, dass die Reflexionen in agilen Spielen eine sehr nachhal tige Wirkung haben. So genügte es, um Feedback anzuregen, meist, die Schülerinnen  und Schüler kurz an ihre Erfahrung aus dem Ball-Point-Game zu erinnern.Reflexion in Review und Retrospektive – Nachdenken über Inhalt und Prozess 147Herausforderung Trotz der üblichen Zeitknappheit bei Projekten an Schulen lohnt es sich, regelmäßig innezuhalten. Die Reflexionsphasen führen zur steten und meist auch  nachhaltigen Verbesserung der Arbeitsweise und Arbeitshaltung.  Material Für Retrospektiven im Team sind ggf. Klebezettel (evtl. in zwei unterschiedli chen Farben), Klebepunkte, Pinnwand/Plakat, Marker oder ein Fotoapparat (zur  Dokumentation) sinnvoll.  Tipps und Tricks aus der Unterrichtspraxis • Spezialisieren sich die Programming-Pairs beispielsweise auf die Entwick lung einer konzeptionellen Schicht (Abbildung 3.10), so ist das Review eine  gute Gelegenheit, um einander nicht nur die neuen Funktionalitäten aus der  Kundensicht vorzustellen, sondern auch auf fachliche Details bei deren Umsetzung einzugehen und Fragen der Teammitglieder dazu zu beantworten. • Damit alle Teammitglieder in langen Projekten den Überblick über die Funk tionalitäten ihres Prototyps behalten, kann die Lehrkraft zusätzlich zu selbstorganisierten Reviews ab einem geeigneten Zeitpunkt kurze Gespräche einberaumen, in denen sie sich in der Rolle eines Kunden die Funktionalitäten  erklären lässt. Jedes Teammitglied soll dazu in der Lage sein. Der Termin  wird rechtzeitig bekannt gegeben, sodass die Teams noch Zeit für ein kurzes  Briefing haben. • Reflexionen im Plenum können genutzt werden, um neu Gelerntes zu sichern  und die Fachsprache zu stärken. • Bei Retrospektiven ist es für die Schülerinnen und Schüler anfangs hilfreich,  wenn die Lehrkraft einen Reflexionsschwerpunkt vorgibt. Typische Frage stellung an jedes Teammitglied können folgende sein:  °Bist du im Projekt angekommen, kannst du passend zu deinen Implemen tierungserfahrungen aktiv etwas beitragen und fühlst du dich integriert?  Wünschst du dir Unterstützung?  °An welcher Stelle hast du in der letzten Iteration einen Fehler gemacht  und was hast du daraus gelernt?  °Wird deiner Meinung nach auf Zeitrahmen geachtet, um fokussiert einzelne Arbeitspakete mit Blick auf den Prototyp zu bearbeiten?Agiler Methodenkoffer II  148 °Bist du zufrieden mit den Absprachen und der Zusammenarbeit? Ist dir  immer klar, was als Nächstes zu tun ist?  Mit zunehmender Erfahrung kann dann eine Retrospektive entsprechend  der Schritte im Kasten «Unsere Retrospektive hat folgende Schritte» auf   S. 146 thematisch offen abgehalten werden.  • Einzelne Schülerinnen und Schüler können im Wechsel die Moderation ei ner Retrospektive des Teams übernehmen. Sie achten darauf, dass jeder sich  unabhängig von anderen Meinungen einbringen kann. Erfahrungsgemäß ist  aber bei den meisten Teams kein Moderator nötig. Wenn sich allerdings nur  wenige an der Retrospektive beteiligen, empfiehlt sich der Einsatz typischer  Moderationstechniken. Zum Beispiel erhält jedes Teammitglied zwei Klebe punkte, mit denen es zwei der gesammelten Themen als für sich am wich tigsten bewertet. Das Thema mit den meisten Stimmen wird im Folgenden  intensiver besprochen. • Es kann sinnvoll sein, die gewonnene Erkenntnis einer Retrospektive als  Motto für die nächste Iteration, z.B. am Project-Board, für alle sichtbar zu  notieren. • Ein persönliches Projekttagebuch bietet die Möglichkeit, Ergebnisse einer  individuellen Reflexion zu dokumentieren.Timeboxing – fokussiert arbeiten in festen Zeitrahmen 1495.2 Timeboxing –  fokussiert arbeiten in festen Zeitrahmen Timeboxing bezeichnet die Vergabe von festen  Zeitrahmen für Vorgänge wie Meetings oder  Iterationen, die hierdurch effizienter und fo kussierter werden. Die zeitliche Beschränkung  vereinfacht die Planung und fördert Agile Werte, z.B. Einfachheit, Fokus und Zusicherung. Gewinn für Schülerinnen und Schüler Timeboxing  • fördert ein zielgerichtetes und konzentriertes Arbeiten in der Implementierungsphase und unterstützt einen effektiven Austausch bei Besprechungen, • schafft ein Bewusstsein, dass (insbesondere bei mehreren Beteiligten) Zeit  wertvoll ist,  • erleichtert die Projektplanung, • ist ein hilfreiches Instrument zur Selbstorganisation und kann schon nach kur zer Zeit richtig Spaß machen.   Gewinn für Lehrkräfte Timeboxing  • erleichtert die zeitliche Planung und das Anpassen der Aktivitäten an den  meist vorgegebenen Doppelstundentakt, • hilft abzuschätzen, welche Aufgaben bewältigbar sind, • hilft, einen positiven Projektabschluss zu erreichen.Agiler Methodenkoffer II  150Hintergrund Vor dem Hintergrund, die Effizienz eines Projekts und insbesondere auch von  Besprechungen zu erhöhen, werden in agilen Projekten typischen Vorgängen  klare zeitliche Rahmen zugeordnet. Gerade bei Besprechungen schätzen agile  Teams eine sehr restriktive Einhaltung der Timebox, weil dadurch diese in der  Regel kürzer als zeitlich nicht festgelegte Meetings sind. Dies motiviert das  Team, einen intensiven Austausch von Beginn an anzustreben und zu einem  Ergebnis in der vorgegebenen Zeit zu gelangen. Aber auch in Umsetzungsphasen  ist die Timebox ein von Entwicklerteams wertgeschätzter Rahmen, da sie in  dieser Zeit störungsfrei ohne Diskussionen und Planänderungen fokussiert an  den Aufgaben arbeiten können. Die Abbildung zeigt typische Zeitrahmen in Un ternehmen. Abbildung 5.1:  Typische Zeitrahmen in Unternehmen Der Vorgang wird nach der festgelegten Dauer abgeschlossen. Sollten am Ende  nicht alle geplanten Inhalte abgeschlossen sein, müssen diese entweder gestrichen oder in eine nachfolgende Timebox verschoben werden. Umsetzung in der Schule Auch in der Schule kann Timeboxing zielgerichtetes und effizientes Arbeiten  fördern. Die größte Timebox stellt diejenige für die ↑ Iteration dar. In der Re gel sind Iterationen getaktet mit ein oder zwei Doppelstunden, sodass für die  Schülerinnen und Schüler keine Visualisierung des Endes nötig ist. In Ober stufenprojekten hingegen kann es hilfreich sein, das jeweilige Iterationsende  hinsichtlich der Zielorientierung bewusst am Project-Board sichtbar zu ma chen. Auch für Meetings wie das Stand-up und das Review werden vorab zeit liche Rahmen festgelegt. Typische Zeiten in der Schule sind 8 Minuten für das  Stand-up-Meeting und 20–25 Minuten für Review sowie Retrospektive. An das  eigenständige Festlegen der Timebox bei einem Planungsmeeting müssen sich Timeboxing – fokussiert arbeiten in festen Zeitrahmen 151Schülerinnen und Schüler erst herantasten, da ihnen die Erfahrung fehlt. Die  Dauer von Timeboxen, die regelmäßig vorkommen, wie diejenigen für die Itera tion und das Stand-up-Meeting, wird einmal zu Beginn des Projekts festgelegt  und ändert sich in der Regel nicht. Für selten vorkommende Meetings sollte die  Dauer vorab mündlich kommuniziert und beispielsweise auf einem Blatt Papier  festgehalten werden, das beim Treffpunkt sichtbar angebracht wird. Ein Blick ins Klassenzimmer Informatiklehrer Herr Turing berichtet: Ein sehr deutliches Gefühl für den Wert einer Timebox schaffen die ↑agilen Spiele  «Ball-Point-Game» und «Kekse backen»: Ein konsequenter Kreislauf von Planung,  Umsetzung und Feedback lässt sich nur durch Zeitrahmen erreichen. In der Praxis  hat sich gezeigt, dass diese Erfahrungen sehr nachhaltig sind, sodass Hinweise der  Lehrkraft in den ersten Iterationen bei den Schülerinnen und Schülern auf Verständ nis stoßen und wohlwollend angenommen werden. Herausforderung Es muss eine Balance zwischen dem Aufbau eines Zeitdrucks einerseits und  Raum für kreatives Arbeiten und Lernprozesse andererseits gefunden werden. Material • Blatt/Karte mit dem Ende des Zeitrahmens (für alle sichtbar) • Uhr (für alle sichtbar)  Tipps und Tricks aus der Unterrichtspraxis • In einer Reflexion nach zwei bis drei Iterationen stellt in der Regel mindes tens ein Team fest, dass es nicht mehr so lange über unwesentliche und leicht  änderbare Dinge, wie etwa die Grafiken ihrer Figuren, diskutieren und statt dessen erstmal wichtige Funktionalitäten umsetzen will. • Aufkommende Themen, die nicht Gegenstand des Meetings oder der Iterati on sind, können auf einem Klebezettel notiert und neben das Project-Board  gehängt werden. So werden sie gewürdigt, gehen nicht verloren und können  an anderer Stelle wieder aufgenommen werden.Agiler Methodenkoffer II  1525.3 Testen – systematisch Qualität hinterfragen Beim Testen wird anhand konkreter Beispiele systematisch  überprüft, ob die Software die festgelegten Anforderungen  erfüllt. Gewinn für Schülerinnen und Schüler Softwaretests • helfen, die Qualität der Ergebnisse des eigenen Handelns zu hinterfragen, zu  überprüfen und aus Fehlern zu lernen,  • erzeugen die Einsicht, dass jede Software – auch die, die uns im Alltag be gegnet und z.B. zukünftig unsere Fahrzeuge steuert – immer (noch) Fehler  haben kann, • sind eine Möglichkeit, sich unabhängig von technischen Fertigkeiten einzu bringen, etwa durch das systematische Überprüfen der Funktionalität einer  umgesetzten User-Story,  • schaffen durch Verfolgung des dynamischen Ablaufs ein vertieftes Verständnis  des sonst statischen Quelltexts.   Gewinn für Lehrkräfte Softwaretests • entlasten dadurch, dass die Lernenden eine individuelle Rückmeldung zur  Funktionsfähigkeit ihres Programmes erhalten, • geben Anlass, bei bestimmten Fehlern die Struktur des Codes mit einem Team  zu diskutieren.Testen – systematisch Qualität hinterfragen 153Hintergrund Softwaretests sind ein zentraler Baustein im Qualitätsmanagement der Soft wareentwicklung. Bei vielen tausend Zeilen Code und mehreren Mitarbeiterinnen und Mitarbeitern sind automatisierte Tests deshalb heute eine hervorragen de Technik, um in agilen Projekten mögliche Auswirkungen von Ergänzungen  bzw. Veränderungen (auch ↑ Refactoring) auf schon funktionierende Pro grammbestandteile unmittelbar zu überprüfen. Eine frühzeitige Erkennung von  Fehlern erspart Kosten, da die Korrekturmaßnahmen später i.d.R. aufwendi ger sind, weil dann mehr Quelltext betroffen ist. Wenn regelmäßig alle bereits  implementierten Funktionalitäten nach jeder Änderung getestet werden, ist  hingegen klar, dass die Ursachen von Fehlverhalten mit dem im letzten Schritt  neu hinzugekommenen Quelltext zusammenhängen. Im Falle von Test-Driven  Development (TDD) wird die Herangehensweise sogar umgedreht, indem erst  Testfälle geschrieben werden, bevor der Code zur Erfüllung der Tests imple mentiert wird. Deshalb schlagen die Tests zunächst fehl. Die darauffolgende  Implementierung ergänzt schrittweise Code, bis alle Tests erfolgreich verlaufen.  Bei der Erstellung von Tests ist es nicht nur wichtig, das normale Verhalten  z.B. von Methoden zu überprüfen (positives Testen), sondern auch das Fehl schlagen (negatives Testen). So ist es beispielsweise bei einer Authentifikation  nicht nur wichtig, dass zugelassene Nutzer Zugang erhalten, sondern auch, dass  anderen der Zugang verwehrt wird. Abhängig von der Zielsetzung werden in  der Softwaretechnik verschiedene Teststufen unterschieden, wie Modultests,  Integrationstests und Systemtests, wobei abhängig von der Stufe mehr White boxbzw. Blackbox-Tests verwendet werden. Ein klassischer Blackbox-Test ist  die Abnahme durch den Kunden im Review. Testen ist aber nicht nur eine Technik der Softwareentwicklung, sondern auch  ein Beitrag zu Agilen Werten: Im agilen Prozess geben die Entwickler zu Beginn  einer Iteration dem Kunden eine verbindliche Zusage (Commitment) über neue  Funktionalitäten des kommenden Prototyps. Tests helfen am Ende der Iteration  beiden Seiten, der Erfüllung der Zusage zu vertrauen. Umsetzung in der Schule Testen ist ein zentraler Bestandteil der Softwareentwicklung, aber oftmals das  erste, was in wasserfallähnlichen Projekten aufgrund von Zeitnot weggelassen  wird. In der Regel kommen die Schülerinnen und Schüler kaum über ein Auspro bieren hinaus, sodass sie kein systematisches Vorgehen kennenlernen. In agilen  Projekten hingegen überprüfen die Schülerinnen und Schüler an verschiede -Agiler Methodenkoffer II  154nen Stellen jeder Iteration die Ergebnisse ihrer Arbeit: bei der Umsetzung eines  Tasks bevor sie diesen auf «Done» umhängen, mit jeder fertig implementierten  User-Story sowie anhand des Prototyps als Ganzes am Ende der Iteration. Durch  das Testen stoßen die Schülerinnen und Schüler frühzeitig und regelmäßig auf  Fehlverhalten der Software, beispielsweise weil sich eine Figur in die falsche Rich tung bewegt oder eine Kollision nicht erkannt wird, um diese dann zu beheben. Sie  machen selbstständig und aus eigener Motivation die Erfahrung, dass Code, der  erfolgreich kompiliert, immer noch auf logische Fehler überprüft werden muss.  Die User-Storys bzw. Tasks sind für das Team Ansatzpunkte für die Entwicklung  von positiven – sowie im Idealfall auch negativen – Testfällen zum Überprüfen  der Funktionalität. Die Schülerinnen und Schüler versprechen beim Umhängen  der User-Story dem Team, dass der Prototyp sich entsprechend der jeweiligen  User-Story verhält. So werden sie in agilen Projekten dazu angehalten, eine Vor gehensweise zum systematischen Testen zu entwickeln. Auch Schülerinnen und  Schüler mit weniger Fachwissen können ein großes Geschick beim Testen haben  und so das Team voranbringen. Beim Testen gefundene und korrigierte Fehler  sind in agilen Projekten wertvolle Möglichkeiten zu lernen, vom Gelernten in der  folgenden Iteration zu profitieren und es mit dem Team zu teilen.  Nicht nur in agilen Projekten, sondern im Informatikunterricht allgemein  gibt es abhängig von der Jahrgangsstufe, der Programmiererfahrung und der  Programmierumgebung unterschiedliche Herangehensweisen an das Testen.  Vorgehen beim Testen Manuelles Testen: Nach der Rückmeldung des Compilers über die syntaktische  Korrektheit wird die funktionale Richtigkeit überprüft. Diese Aufgabe hat zu nächst die Entwicklerin oder der Entwickler selbst.  Als weitere Stufe der Qualitätskontrolle können Mitschüler die Rolle des  Testers übernehmen und auf Nutzerebene (Blackbox-Test) neu programmierte  Funktionalitäten anderer prüfen. Um diese Tätigkeiten zu organisieren, würden  sich entsprechende Tasks oder die Einführung einer neuen Spalte am ↑ Pro ject-Board anbieten (Ready to Test). Peer-Review: Die Schülerinnen und Schüler überprüfen den Quellcode ihrer  Teammitglieder (Whitebox-Test) und sichern dadurch die Qualität nach dem  Vier-Augen-Prinzip. Im ↑ Pair-Programming ist das Peer-Review enthalten.  Debugging: Das schrittweise Durchlaufen des statischen Quelltexts (mit oder  ohne Debugger) ermöglicht das systematische Beobachten der Werte von Va riablen und des dynamischen Ablaufs. Dadurch können nicht nur funktionale  Fehler lokalisiert werden, sondern es wird auch ein größeres Verständnis für  Programmabläufe erzielt.Testen – systematisch Qualität hinterfragen 155Erstellen von Testklassen, Ausführen von Testfällen: Testklassen werden ge nutzt, um konkrete Ausgangszustände zu initialisieren, darüber zu testende  Operationen auszuführen und den Endzustand mit einem Sollzustand zu ver gleichen. Dieses Ausführen von Testfällen kann dann sehr einfach regelmäßig  wiederholt werden, beispielsweise nach jeder Iteration. Testklassen können  codiert oder (mit entsprechender Unterstützung durch die Entwicklungsum gebung z.B. BlueJ) aufgezeichnet werden, wobei aus Testhandlungen, die über  Maus und Tastatur erfolgen, der Quelltext des Testfalls in der Testklasse erzeugt  wird. In agilen Oberstufenprojekten kann die Verwendung von Testklassen die  Schülerinnen und Schüler dauerhaft entlasten. Ein Blick ins Klassenzimmer Informatiklehrerin Frau Hopper berichtet: Gerade bei Funktionalitäten, die einem Pair besonders wichtig waren, zeigten die  Schülerinnen und Schüler beim Testen eine mir aus dem Unterricht nicht bekannte  Ausdauer. Hierbei konzentrierten sie sich oft als Erstes auf das, was die anderen  Pairs des Teams implementiert hatten, um zu sehen, wie ihre gemeinsame Software  gewachsen war. Mit der Zeit konnte ich aus den Diskussionen aber auch heraushören,  dass sie auf ihre eigene Weise begannen, Fehler den Phasen zuzuordnen, in denen sie  entstanden waren. Sie benannten den Entwurf, die Implementierung oder fehlende  Absprachen, auch wenn sie es so nicht formuliert hätten. So gab das Testen schon  einen ersten Einstieg in die Prozessreflexion.  Manchmal wird ein Durchbruch mit der Aufmerksamkeit der ganzen Klasse wertgeschätzt: Als die von einem Pair anvisierte Funktionalität nach längerem Studieren,  Experimentieren, mehreren Korrekturen und wiederholtem Testen fehlerfrei war, ging  ein Aufschrei durch die Klasse «Ja, es funktioniert, es funktioniert!», und alle kamen  zusammengelaufen und wollten das Ergebnis sehen. Ein Blick ins Klassenzimmer Informatiklehrer Herr Backus berichtet:  Teilweise bietet es sich bei agilen Projekten in der Oberstufe an, Junit-Tests zu ver wenden. Beispielsweise gab es eine Gruppe, die irgendwann ziemlich entnervt war,  weil die Testfälle nach jeder Iteration immer länger und mehr wurden und die ma nuelle Testtätigkeit, insbesondere das wiederholte Überprüfen von Funktionalitäten  aus früheren Iterationen, relativ stupide war. Diese Situation ist für mich als Lehrkraft  ideal, um den Schülerinnen und Schülern eine Einführung in Testklassen zu geben  und die Idee des automatisierten Testens zu verdeutlichen. Agiler Methodenkoffer II  156Herausforderungen • Viele Schülerinnen und Schüler geben sich zufrieden, wenn das Programm  irgendwie läuft. Aber Softwarequalität ist mehr als ein Programm ohne  Syntaxfehler. Konkrete Hinweise an den Navigator zum Hinterfragen des  Quelltexts, zum Refactoring und Vereinbarungen zum Testen, helfen die  Softwarequalität zu steigern.   • Die Schülerinnen und Schüler finden zwar durch Ausprobieren relativ  schnell Fehler, insbesondere bei der Spieleentwicklung, aber sie verfügen  zu Beginn des Projekts kaum über systematisch abrufbare Strategien. Diese  gilt es aufzubauen. Die iterative Vorgehensweise unterstützt dies, weil z.B.  beim Debuggen die Kompetenz mit dem Quelltextumfang mitwachsen kann.  • Anfangs überprüfen die Schülerinnen und Schüler meist nur die positiven  Fälle, beispielsweise ob eine Figur «springt», wenn die Taste gedrückt wird.  Nicht aber, ob sie dabei durch Plattformen hindurchfliegt, die über ihr lie gen, ob sie nach dem Sprung weiter auf die Taste reagiert, sodass man sie  beliebig weit nach oben «katapultieren» kann, oder was passiert, wenn sie  am Spielfeldrand springt. Hier kann die Lehrkraft neben viel Lob für das  Geschaffte auch kleine Anreize geben, beispielsweise in Kundengesprächen  oder im Review (↑ Reflexion).  • Die Anzahl möglicher Kombinationen, die getestet werden müssen, kann die  Schülerinnen und Schüler überfordern, etwa, wenn in Scratch mehrere Figuren über verschiedene Nachrichten interagieren oder wenn sie Logikspiele  wie Mastermind entwickeln.  Tipps und Tricks aus der Unterrichtspraxis • Wenn man sich regelmäßig von den Schülerinnen und Schülern Funktionalitäten der Software zeigen lässt, kann man dabei besondere Testfälle (Sonderfälle, Extremfälle, negatives Testen) einstreuen. • Für Aktivitäten des Testens können eigene Tasks oder eine eigene Spalte am  Project-Board vorgesehen werden. • Allgemeine Qualitätskriterien, die erfüllt sein müssen, bevor man einen Task  am Project-Board in die Spalte «Done» hängt, können im Team vorab bespro chen und in der «Definition of Done» festgelegt werden (↑ Dokumentation). • Hilfreich ist es, dass die Schülerinnen und Schüler im Pair arbeiten, da der  Navigator auch die Funktion hat, auf die Qualität zu achten.  • Hilfreich kann es sein, bereits vor dem Projektbeginn im Unterricht Strate gien für das Lokalisieren von Fehlern zu besprechen.Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen  1575.4 Feedback und Bewertung –   Rückmeldungen zur Weiterentwicklung  nutzen Durch Feedback und Bewertung erfolgt eine auf den indi viduellen und kollaborativen Projektbeitrag bezogene Rück meldung, die das Geleistete wertschätzt und dem einzelnen  Teammitglied Anlass und Anhaltspunkte bietet, verschie dene Leistungsaspekte und seine eigene Arbeitsweise zu  reflektieren.  Gewinn für Schülerinnen und Schüler Feedback und Bewertung  • bieten differenzierte Rückmeldungen und Anerkennung der Schülerleistung,  • wertschätzen den individuellen Beitrag in Abgrenzung von den anderen Team mitgliedern,  • ermöglichen durch Beteiligung der Teammitglieder am Bewertungsprozess  eine Rückmeldung an die anderen Teammitglieder in standardisierter Form, • helfen, eigene Leistungen ehrlich zu reflektieren und in die Gesamtleistung  des Teams einzuordnen.   Gewinn für Lehrkräfte Feedback und Bewertung • entsprechen dem Anliegen detaillierter Lernerfolgsrückmeldungen,  • sind eine Basis für die Erstellung von Schulnoten,  • bieten Möglichkeiten, nach individueller und anforderungsbezogener Norm zu  bewerten, • unterstützen bei der Notentransparenz und -gerechtigkeit.Agiler Methodenkoffer II  158Hintergrund Die Durchführung agiler Projekte und ihre Ausrichtung an Agilen Werten passt  kaum noch zu den bisher meist hierarchisch organisierten Formen des Feed backs und der Leistungsbewertung durch Vorgesetzte. Da sich agile Teams weit gehend selbst organisieren und möglichst ohne Störungen von außen fokussiert  arbeiten, verlieren Projektleiterinnen und Manager nicht nur an Einfluss, sie ha ben auch weniger Einblick in die konkrete Arbeit. Außerdem wird in agilen Pro jekten besonders Wert darauf gelegt, dass das Team gemeinsam Verantwortung  übernimmt für das Produkt und den gesamten Code. Eine gute Möglichkeit, den  Teammitgliedern dennoch Feedback zukommen zu lassen und ihre Kompetenzen zu beurteilen, besteht darin, die Einschätzungen der Teammitglieder unter einander heranzuziehen. Dazu bieten sich verschiedene Instrumente an, die für  die Bestimmung der individuellen Leistungen herangezogen werden können: Instrumente zur Beschreibung individueller Leistungen Individual Contribution Report: Jedes Teammitglied beschreibt aus eigener  Sicht den individuellen Beitrag zum Projektergebnis detailliert für jede einzelne  Phase (z.B. Vorbereitung/Konzeption, Durchführung, Auswertung). Die ande ren Teammitglieder haben später die Möglichkeit, die Individual Contribution  Reports zu kommentieren. Self/Peer Evaluation Survey: Jedes Teammitglied bewertet sich selbst und alle  anderen Teammitglieder auf einem Bewertungsbogen hinsichtlich verschiede ner Aspekte guter Teamarbeit. Diese Aspekte beinhalten z.B. das Verhalten in  Meetings (Pünktlichkeit, Aufmerksamkeit und Beitrag), Arbeitsweisen (Effek tivität, Kooperation, Gründlichkeit) sowie die Angabe besonderer und verbes serungswürdiger Leistungen. Work Product Pay Packet: Die Teammitglieder verteilen virtuelle 100 Euro im  Team entsprechend ihrer Einschätzung der Qualität und Quantität der Arbeit  jedes einzelnen Teammitglieds, auch an sich selbst. Jedes Teammitglied kann  zusätzlich einen einmaligen Bonus von 5 Euro an ein anderes Teammitglied  vergeben, wenn es der Meinung ist, dass es mehr als das Geforderte geleistet hat.Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen  159Abbildung 5.2:  Work Product Pay Packet als Bewertungsinstrument Mit den resultierenden Bewertungen gehen agile Organisationen sehr behutsam  um und nutzen sie vordergründig, um mit jedem und jeder einzeln die nächsten  Schritte einer positiven Weiterentwicklung zu erarbeiten. Feedback der Grup penleistungen ist auch regelmäßig Gegenstand der ↑ Retrospektive. Umsetzung in der Schule Leistungsbewertung in Schulprojekten ist komplexer, da nicht nur Leistungsas pekte und soziale Verhaltensweisen entsprechend der anforderungsbezogenen  Norm zu bestimmen sind, sondern auch in der individuellen Bezugsnorm die  Entwicklung der Fach-, Methoden-, Sozialund Selbstkompetenzen zu berück sichtigen ist. Ein Fokus sollte in der Schule auf der Bewertung beobachtbaren  Verhaltens liegen. Hier ist es von Vorteil, dass agile Projekte den Lernund Arbeitsprozess sichtbar machen und die Lehrkraft durch die Selbstorganisation  der Teams im Unterricht Zeit hat, die Schülerinnen und Schüler bei der Arbeit zu  beobachten, zuzuhören und ggf. in der Rolle des Kunden zu steuern. Dies ermög licht es der Lehrkraft, zum passenden Zeitpunkt das entsprechende individuelle  Feedback zu geben. In der Unterrichtspraxis haben sich folgende Schwerpunkte  für inhaltliche und prozessbezogene Rückmeldungen als praktikabel erwiesen. Fachkompetenz Prototypen können als Vergegenständlichung angewandter Fachkompetenz  verstanden werden. Sie stellen für Schülerinnen und Schüler nicht nur einen  motivierenden Gegenstand zur objektiven Rückmeldung des eigenen Projekter folgs und seiner Zwischenschritte dar, sie lassen sich auch für Feedback und die )Agiler Methodenkoffer II  160Bewertung heranziehen. Als Grundlage dafür können Kriterien für die Gestal tung der Prototypen herangezogen werden (bspw. «ansprechend» und «nutzerfreundlich»). Weitere Gegenstände können der dem Prototyp zugrundeliegende  Quelltext (z.B. Fehlerfreiheit, Kommentierung), seine Strukturierung (in der  Oberstufe etwa MVC-Entwurfsmuster oder Drei-Schichten-Architektur, im  Anfangsunterricht auch mal nur «Einrücken») und seine Lesbarkeit sein (spre chende und einheitliche Benennung) sowie die Anwendung bestimmter vorge gebener Programmierkonzepte. Für möglichst individuelles Feedback können zunächst die Beiträge der einzelnen Pairs zum Projekt betrachtet werden, insbesondere, welche und wie viele  Tasks ein Pair umgesetzt hat und welcher Code dabei entstanden ist. Allerdings  wird es kaum möglich sein festzustellen, welchen konkreten Anteil ein einzelner  an der gemeinschaftlichen Leistung eines Pairs hat. Um dennoch den indivi duellen Kompetenzstand festzustellen, bieten sich nach unseren Erfahrungen  folgende Möglichkeiten an: In Einzelgesprächen, bspw. in einem «Kundenge spräch», kann die Lehrkraft sich konkrete fachliche Details erklären lassen.  Ebenso kann der Truck-Factor-Check (↑ Pair-Programming) als individuelle  Leistungsüberprüfung eingesetzt werden. Des Weiteren können durch die Be obachtung der Schülerinnen und Schüler in den Meetings, beim Sprechen über  die geplante Implementierung im Pair und beim Diskutieren von Fehlern im  Test der Wissensstand, die Verwendung der Fachsprache und die Problemlöse kompetenz eingeschätzt werden. Methodenkompetenz Innerhalb des Projekts erwerben die Schülerinnen und Schüler verschiedene  Kompetenzen der Projektorganisation, die auch selbst Gegenstand der Bewertung sein können: Sind die User-Storys und Tasks passend formuliert? Werden  die Rollen beim Pair-Programming eingehalten? Werden die Ergebnisse und  Prozesse angemessen reflektiert? Wie in anderen Lernkontexten üblich, können  dabei auch weitere Resultate des Arbeitsprozesses für Feedback und Leistungs bewertung herangezogen werden. So wird am Project-Board erkennbar, ob es  tatsächlich so installiert und verwendet wurde, dass die Ziele einer Iteration  erkennbar sind, der Projektstand stets transparent ist, die Verantwortlichkeiten  klar geregelt sind und ob es vom Team tatsächlich für die Organisation genutzt  wird. Zur Methodenkompetenz gehört auch, die agilen Methoden, Techniken  und Praktiken sicher anwenden zu können.Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen  161Soziale Kompetenz Soziale Kompetenzen lassen sich vor allem in der aktiven gemeinschaftlichen  Arbeit beobachten: Sind die Schülerinnen und Schüler in der Lage, ihr Team zu  motivieren, Zuversicht zu verbreiten, die eigenen Fähigkeiten und Ideen einzubringen, andere davon zu überzeugen, zu moderieren, Hilfe zu erbitten und anderen zu helfen? Dazu gehört auch, am Ball zu bleiben, Entscheidungsfindungen  konstruktiv zu unterstützen, die Fähigkeiten des Teams einschätzen zu können  und gemeinsam einfache Lösungen zu suchen.  In agilen Projekten sind die Kompetenzen sehr gut für die Lehrkräfte beob achtbar und für die Schülerinnen und Schüler erfahrbar. Aufgrund des iterativen  Vorgehens kann sich jede und jeder Einzelne ggf. mit individueller Unterstüt zung durch das Team oder die Lehrkraft weiterentwickeln.  Selbstbzw. Personalkompetenz Die Entwicklung von Selbstund Personalkompetenzen ist eng mit dem Verstehen und Umsetzen der Agilen Werte verbunden. Sind die Schülerinnen und  Schüler bereit, Verantwortung zu übernehmen und durchzuhalten? Zeigen sie  Initiative, sind entscheidungsfreudig aber auch lernfähig? Um als Schülerin oder Schüler Kriterien wie die oben angeführten beurteilen  und für die eigene Kompetenzentwicklung annehmen zu können, sollten diese  klar definiert sein und ggf. anhand von Indikatoren verdeutlicht und voneinander abgegrenzt werden. Bereits vorab sollte mit allen Teams darüber gesprochen  werden, welche Aspekte Gegenstand von Feedback und Bewertung werden und  woran diese gemessen werden. Eine gemeinsame Diskussion darüber, welche  Aspekte den Schülerinnen und Schülern wichtig sind, hilft zudem, sich auf ein  gemeinsames Wertesystem zu verständigen und dieses zu verinnerlichen. Ein Blick ins Klassenzimmer Informatiklehrerin Frau Estrin berichtet: Bei der Bewertung bin ich bisher zwei verschiedene Wege gegangen. In einem Projekt  [Kapitel 3.2] habe ich mich am Work Product Pay Packet und der Poolnote orientiert  und für jede Gruppe eine Anzahl an Punkten für die Gruppenleistung vergeben. Das  Team musste diese Punkte in einem konsensorientierten Prozess auf die einzel nen Teammitglieder verteilen und war so in die Bewertung mit einbezogen. In ei nem anderen Projekt [Kapitel 3.5] legte ich den Schwerpunkt auf die kontinuierliche  Produktentwicklung in den Iterationen. Die Schülerinnen und Schüler erhielten für  jeden Prototyp Teilnoten, aus denen später transparent und nachvollziehbar eine  Gesamtbewertung gebildet wurde.Agiler Methodenkoffer II  162Ein Blick ins Klassenzimmer Informatiklehrer Herr Zuse berichtet: In meinen Projekten steht die individuelle Kompetenzentwicklung stärker im Fo kus und es gehen nicht nur die Programmierfertigkeiten ein, sondern auch die «Soft  Skills»: Einem Schüler beispielsweise konnten das Team und ich nichts im Program mieren beibringen, weil er sich auch in seiner Freizeit intensiv damit beschäftigte  und entsprechend versiert war. Aber er hat im Laufe des Projekts seine Art zu kommunizieren extrem geändert. Anfangs wurde er schnell ausfällig, wenn jemand ihn  nicht verstand. Später sagte er ab und an: «Es ist schwer, das so zu formulieren, dass  die anderen das auch verstehen!», schaffte es aber dennoch, sein Wissen weiterzugeben. Das war eine sehr positive Entwicklung, die ich ihm hoch anrechnete. Er hat  es wirklich geschafft, dazuzulernen! Herausforderung • Vor Projektbeginn sollten aus Gründen der Transparenz die Bewertungs kriterien festgelegt sein. Das ist nicht einfach, da Projekte offen sind und  dementsprechend das Ergebnis noch nicht bekannt ist. Folgende Fragen, die  sich die Lehrkraft in Hinblick auf die Kriterien stellen muss, sind typisch:  °Wie stark werden das Produkt und fachliches Können bewertet, wie stark  der Prozess und der Lernfortschritt?  °Wie kann man die individuelle Leistung einzelner beurteilen, auch wenn  im Team gearbeitet wird?  °Wie kann man objektive Kriterien und die Berücksichtigung von wertvollen, (nicht vorhersehbaren) individuellen Beiträgen miteinander vereinbaren?  °Gibt es gegebenenfalls eine Möglichkeit, die Lernenden in die Festlegung  einiger Bewertungskriterien einzubeziehen?  • Im Feedback ist Wertschätzung sehr wichtig. Schwachstellen sollten offen,  aber mit Feingefühl angesprochen werden.  Tipps und Tricks aus der Unterrichtspraxis • Es ist für Schülerinnen und Schüler im Rahmen einer Projektarbeit hilfreich,  wenn sie bereits während des Projekts früh und wiederholt Rückmeldungen  ihrer Teammitglieder über das eigene Verhalten und die eigene Leistung erhalten, um sich verbessern zu können und nicht erst zum Ende des Projekts Feedback und Bewertung – Rückmeldungen zur Weiterentwicklung nutzen  163eine Bewertung durch die Lehrkraft vorgenommen wird. Das kann als Teil  des agilen Prozesses in der ↑ Reflexion berücksichtigt werden. • Bei einem Bewertungsbogen macht es Sinn, einen Bereich «Sonstiges» oder  «Besondere individuelle Leistungen» aufzunehmen, um flexibel vorab nicht  planbare Beiträge berücksichtigen zu können. • Prototypen bieten eine klare produktbezogene Möglichkeit der Bewertung. • Projektbeiträge eines Pairs lassen sich anhand der Namenskürzel auf den  bearbeiteten Tasks nachvollziehen. • Je nach Heterogenität der Lerngruppe können, unterstützt durch die Lehr kraft, unterschiedliche Schwerpunkte auf den individuellen Lernfortschritt  gelegt werden. So können sich Schülerinnen und Schüler, die noch fachliche  Defizite haben, zunächst darum bemühen, ihre Fachkompetenz zu verbes sern. Die Teammitglieder, die schneller lernen oder fachlich bereits weiter  sind, können ihren Schwerpunkt auf die Entwicklung von sozialen sowie  Selbstund Personalkompetenzen legen, indem sie bei sich selbst und im  Team Schwächen identifizieren und daran arbeiten.Agiler Methodenkoffer II  1645.5 Dokumentation – Transparenz durch  aufgezeichnete Absprachen Da innerhalb eines Softwareprojekts  verschiedene Beteiligte zusammenar beiten, ist es wichtig, zentrale Infor mationen transparent zu dokumen tieren. Typische Bestandteile einer  Dokumentation sind Prozessabspra chen, Texte oder Diagramme, die das  Verständnis für den Aufbau und die Funktionsweise der Software erhöhen, so wie Vereinbarungen der Qualitätsstandards. Gewinn für Schülerinnen und Schüler Eine Dokumentation • hält an zur Reflexion und (schriftlichen) Kommunikation,  • macht Absprachen und Prozessbestandteile transparent und dauerhaft nach lesbar, • erlaubt es, sich in eigene ältere oder fremde Quelltexte einzuarbeiten.     Gewinn für Lehrkräfte Eine Dokumentation • eröffnet die Möglichkeit, das Projekt wiederzuverwenden und weiterzuent wickeln, • gibt Anlass für Gespräche und Hilfestellungen, • offenbart, ob Schülerinnen und Schüler die Funktionalität des Quelltextes  verstanden haben.Dokumentation – Transparenz durch aufgezeichnete Absprachen 165Hintergrund  Während der Dokumentation in klassischen Projekten ein zentraler Stellenwert  zugemessen wurde, von der Vertragsgestaltung über die detaillierte Beschrei bung einzelner Komponenten bis hin zur ausführlichen Planung und Aufzeichnung von Testfällen in allen Phasen, ist sie in agilen Projekten zwar immer noch  wichtig, steht aber nicht mehr im Mittelpunkt: Funktionierende Software wird  als wichtiger als umfassende Dokumentation angesehen (Kapitel 2.1). Zudem  entsteht ein Teil der Dokumentation des Prozesses und der Software nebenbei.  So werden nun zu Beginn nicht mehr alle Details festgeschrieben, sondern  typischerweise nur allgemeine Anforderungen und die grobe Softwarearchitek tur. Die Details werden erst Iteration für Iteration ergänzt, passend zu Agilen  Werten immer mit möglichst direkter Kommunikation und der Flexibilität,  Neues einzusteuern bzw. umzupriorisieren. Dennoch verzichtet man auch in  agilen Projekten nicht auf angemessene Dokumentation. Im Sinne der Nachhal tigkeit können sich so Entwickler schnell ein Verständnis für den Aufbau und die  Funktionsweise der Software verschaffen und Absprachen müssen nicht erneut  ausdiskutiert werden. Die Dokumentation lässt sich in drei Bereiche einteilen: Prozessdokumentation: Das Ziel des Projekts und daraus resultierende Anforde rungen des Kunden an die Software werden zu Beginn des Projekts bzw. in den  Iterationsplanungen vom Entwicklerteam und dem Kunden gemeinsam in Work shops zur Backlogbzw. Iterationsplanung, oft mit Hilfe von Pinnwänden und  Zetteln, festgelegt. ↑ User-Storys, die dabei entstehen oder verändert werden,  werden dann in ein ↑ Project-Board eingepflegt bzw. dort aktualisiert. Die Ergeb nisse von Retrospektiven bestehen meist ebenfalls aus auf Plakaten gesammelten  Klebezetteln und können beispielsweise als Fotoprotokoll festgehalten werden. Ein Monitoring des Prozessfortschritts ist mit speziellen Funktionalitäten  digitaler Project-Boards oder auch mit Programmen zur Tabellenkalkulation  möglich. Softwaredokumentation: Die grundlegende Architektur, d. h. die Softwarekom ponenten und deren Zusammenspiel, werden meist als Diagramm dargestellt.  Standard in der laufenden Entwicklung sind qualitativ hochwertiger Quelltext  mit Quelltextdokumentationen, insbesondere solchen, aus denen über Doku mentationswerkzeuge automatisch Hypertexte erzeugt werden können. Qualitätsdokumentation: Im Gespräch zwischen Team und Kunden werden zu  den einzelnen Anforderungen (User-Storys) die Erwartungen des Kunden an  das Produkt dokumentiert. Auch nicht funktionale Anforderungen wie Stabi lität oder kurze Antwortzeiten werden als User-Storys festgehalten. Über diese Agiler Methodenkoffer II  166Kriterien hinaus, die das Produkt am Ende erfüllen muss, legt das Team in  der Definition of Done weitere allgemeine, interne und nicht auf bestimmte  User-Storys bezogene Qualitätskriterien fest, die jeder fertige Prototyp erfüllen  muss.  Automatisierte ↑ Tests überprüfen und dokumentieren die Anforderungen.  Testfälle werden werkzeuggestützt verwaltet und mit Augenmaß dokumentiert. Der Umfang einer sinnvollen Dokumentation sollte abhängig von der Teamgröße, der Lebensdauer der Software und ihrem Einsatzgebiet so gewählt werden, dass sie einen Mehrwert aufweist. Umsetzung in der Schule In der Schule ist der Projektumfang entsprechend der zur Verfügung stehenden  Zeit deutlich geringer und selten muss die Software nach Projektabschluss noch  gepflegt oder erweitert werden. Dennoch ergibt sich die Notwendigkeit, dass  sich die Schülerinnen und Schüler in ihre und fremde Quelltexte regelmäßig  (wieder) einarbeiten. Eine maßvolle Dokumentation ist eine Hilfe dabei. Hin sichtlich des Umfangs sind die Agilen Werte Transparenz und Einfachheit (Kapitel 2.2) eine Orientierungshilfe. Agile Techniken erfüllen selbst schon grundlegende dokumentarische Zwecke, wie die folgende Auflistung von möglichen  Dokumentationstypen zeigt: • Das Project-Board mit den User-Storys und Tasks gibt einen guten Über blick über den aktuellen Projektstand. Hier entsteht ohne zusätzlichen Auf wand eine Prozessdokumentation, beispielsweise durch auf «Done» gesetzte  User-Storys, welche nun die Anforderungen erfüllen. • Gut lesbarer, möglichst selbsterklärender Quelltext beginnt bei aussagekräf tigen Bezeichnern für Attribute und Methoden. Sinnvoll ist es auch, auf eine  gute Strukturierung zu achten, indem man z.B. Sinnabschnitte in einer Me thode zusammenfasst. • Quelltextkommentare sind wichtig, um Schnittstellenabsprachen zu dokumentieren, und als Erläuterungen schwieriger Quelltextstellen. Der blaue  Kasten unten zeigt eine einfache Checkliste zu Quelltextkommentaren für  Schülerinnen und Schüler.  • Insbesondere bei komplexeren Projekten ist ein Klassendiagramm essenziell,  weil es Zusammenhänge und Strukturen der Software visualisiert. Damit  können sich alle Schülerinnen und Schüler besser austauschen. Im Gegensatz  zur linearen Vorgehensweise gibt es bei agilem Vorgehen kein vollständiges  Klassendiagramm vor dem ersten Implementierungsschritt, vielmehr wird Dokumentation – Transparenz durch aufgezeichnete Absprachen 167das Diagramm begleitend zum Projektfortschritt weiterentwickelt (Variante  Modelling-Story bei ↑ User Storys). Im Anfangsunterricht sind in der Regel im Sinne eines guten Aufwand-Nut zen-Verhältnisses die Prozessund Softwaredokumentation ausreichend. Anforderungen an Quelltextkommentare in der Schule  Im Quelltext kommentiert sind: • die (eine!) Aufgabe jeder Klasse,  • bei Methoden ihre Aufgabe und ggfs. welche Schnittstellenabsprachen sie erfüllen,  außer wenn ihre Aufgabe wie bei Getterund Setter-Methoden trivialerweise klar  ist, • schwierige und unübersichtliche Quelltextstellen, die einer ergänzenden Erläu terung bedürfen.   Ein Blick ins Klassenzimmer Informatiklehrer Herr Nygaard berichtet: Dokumentation soll in agilen Projekten so stattfinden, dass sie einen Mehrwert hat.  Vorrangig ist die laufende Software. Deshalb entstehen Klassendiagramme in den  von mir betreuten agilen Projekten meist erst zu einem späteren Zeitpunkt, wenn  die Software bzw. die zu lösenden Probleme so komplex sind, dass die Schülerinnen  und Schüler in der Modellierung einen Vorteil für sich erkennen. Ab diesem Zeitpunkt  werden Klassendiagramme regelmäßig in Besprechungen herangezogen und meist  freiwillig mit jeder Iteration erweitert bzw. im Falle eines ↑ Refactorings überarbeitet. Sie sind in der Regel nicht vollständig ausgearbeitet, wichtig ist mir nur, dass die  Teams damit gut zurechtkommen. Ebenso können Sequenzund Zustandsdiagram me oder Struktogramme einen wichtigen Beitrag in Besprechungen liefern. Auch lesen, kopieren und testen meine Schülerinnen und Schüler sehr viel fremden  Code in diesen Projekten. Da sehen sie sehr schnell den Unterschied zwischen guter  und schlechter bzw. nicht vorhandener Kommentierung und ob die Bezeichner gut  gewählt wurden.   Varianten Eine Möglichkeit, den Sinn der Quelltextdokumentation erfahrbar zu machen,  ist es, Schülerinnen und Schüler (von der Lehrkraft gesteuert) in fremden Quell texten weiterarbeiten zu lassen.Agiler Methodenkoffer II  168Herausforderung Es ist schwierig, den passenden Zeitpunkt zu finden, an dem die Schülerinnen  und Schüler einen gewissen Leidensdruck haben: Wenn aber auf Grund von  mangelnder Dokumentation Fehler entstanden sind oder Arbeiten doppelt ge macht werden mussten, ist allerdings der ideale Zeitpunkt gekommen, an dem  der Mehrwert einer Dokumentation erfahrbar wird. Material • Für Besprechungen verschiedenster Art im Prozessablauf sind Stellwände  bzw. Plakate, farbige Zettel, Marker etc. hilfreich, für Einsteiger Karten mit  Anforderungen an Quelltextkommentare.  • In höheren Jahrgangsstufen können bei der Auswahl des Entwicklungswerk zeugs durchaus auch Funktionalitäten wie das automatische Generieren eines Klassendiagramms aus dem Quelltext oder eines Hypertextes (z.B. Ja vaDoc über BlueJ) aus den Kommentaren sowie das einfache Nutzen eines  Test-Frameworks eine Rolle spielen.  Tipps und Tricks aus der Unterrichtspraxis • Das regelmäßige Abfotografieren des Project-Boards ist eine Möglichkeit,  den Verlauf des Projekts zu dokumentieren. • Auf dem ↑ Project-Board kann man zusätzliche Spalten für Dokumentation  und Refactoring ergänzen, um die Bedeutung der beiden Aspekte herauszustellen und eine regelmäßige Erinnerung präsent zu haben. • Die Lehrkraft kann spezielle User-Storys «Dokumentation» einstreuen wie  beispielsweise die folgende: Titel:  Programmdokumentation Beschreibung:  Informiert euch mit Hilfe des  Zusatzmaterials über das Thema «Programm dokumentation». Erstellt dann für euer bis­ heriges Programm eine Dokumentation, plant  dazu Tasks und geht arbeitsteilig vor. Führt die  Dokumentation ab jetzt konsequent fort.Dokumentation – Transparenz durch aufgezeichnete Absprachen 169Abbildung 5.3:  User-Story «Dokumentation» • Ein Benutzerhandbuch als weitere Dokumentationsart kann bereichernd  sein, weil es bei den Schülerinnen und Schülern einen Perspektivwechsel  vom Entwickler zum Benutzer anregt (Kapitel 3.5).  • Im Pair-Programming sollte der Navigator auch auf die Einhaltung der  Quelltextdokumentation achten. • Phasen, in denen einzelne Programming-Pairs vor der Integration und dem  Test «Leerlauf» haben, weil sie ihren Task umgesetzt haben, können für Do kumentationszwecke genutzt werden: Dieses Pair nimmt sich bspw. eine  Java-Klasse aus ihrem Projekt und überprüft bzw. ergänzt die Quelltextdo kumentation nach vorgegebenen Regeln.Agiler Methodenkoffer II  1705.6 Refactoring – Qualität verbessern  und dabei lernen Unter Refactoring versteht man das  Überarbeiten des bisherigen Arbeits stands des Quelltextes mit dem Ziel,  diesen besser verständlich und leich ter erweiterbar zu machen, ohne dass  sich seine Funktionalität nach außen  verändert. Gewinn für Schülerinnen und Schüler Refactoring  • fördert die konstruktiv kritische Betrachtung des eigenen Quelltextes, • verbessert die Qualität und Lesbarkeit des Quelltextes, • führt zu einem besseren Verständnis des gemeinsamen Quelltexts, • erleichtert das Finden und Beheben von Fehlern in darauffolgenden Iterationen, • unterstützt den Lernprozess, da es als Prozessbestandteil signalisiert, dass  zunächst auch suboptimale Lösungen erlaubt sind, • macht durch sukzessive Verbesserungen sowohl an Details als auch an Design  und Struktur die Auswirkungen von Entwurfsentscheidungen erfahrbar.   Gewinn für Lehrkräfte Refactoring  • erleichtert das Unterstützen der Teams etwa bei der Fehlersuche, da man sich  schneller im Quelltext zurechtfindet,  • gibt Gelegenheit, über Vorzüge und Nachteile unterschiedlicher Entwurfsentscheidungen anhand von konkreten Beispielen zu sprechen.Refactoring – Qualität verbessern und dabei lernen 171Hintergrund Refactoring bezeichnet eine agile Praktik, die auch außerhalb der agilen Soft wareentwicklung beliebt ist. Während es bei über Jahre gewachsener Software  lange Zeit etwas scherzhaft, aber oft aus bitterer Erfahrung heraus hieß «Never  touch a running system», ist es heute fester Bestandteil eines Entwicklungs prozesses, die Struktur der Software häufig und mit möglichst kleinen Ände rungen zu überarbeiten, sodass sie dauerhaft gut erweiterbar, verständlich  und leicht testbar bleibt. Weiterhin früh im Prozess trifft man grundlegende  Entwurfsentscheidungen, die z.B. die Komponenten und ihr Zusammenspiel  betreffen, wie etwa das Verwenden einer Client-Server-Architektur. Darüber  hinaus gibt es aber unzählige Entscheidungen im Laufe des Entwicklungspro zesses, bei denen die Erfahrung gezeigt hat, dass es tatsächlich billiger und  effektiver ist, zunächst nach dem KISS-Prinzip den einfachsten Entwurf für  die aktuelle ↑ Iteration zu wählen und dafür aber regelmäßig die Struktur zu  überarbeiten. Denn nur zu oft stellte sich eine mit viel Aufwand vorbereitete  komplexe Struktur später gar nicht mehr als sinnvoll heraus, insbesondere  wenn Änderungen der Anforderungen notwendig wurden. Somit entsteht der  Softwareentwurf nicht vollständig in einer großen Vorabplanung, sondern ist  die Summe vieler sukzessiv getroffener Entscheidungen. Als wichtige Vor aussetzung für das Gelingen eines Refactorings gilt eine gute Testabdeckung  (↑ Testen), denn je umfangreicher die Tests sind, desto schneller erkennt man,  wenn beim Umstrukturieren die Funktionalität der Software nicht erhalten  bleibt. Das Refactoring findet also in einer Iteration immer dann statt, wenn  neu implementierte Tasks getestet sind und die Software lauffähig ist. Dann  werden beispielsweise Variablen-, Methodenund Klassennamen überdacht,  redundante Abschnitte im Quelltext eliminiert, auskommentierter Quelltext  gelöscht, zu umfangreiche Methoden in kleinere zerlegt, eine Klasse aufge teilt, falls sie mehr als eine Zuständigkeit hat, Spezialisierungen oder Gene ralisierungen durchgeführt und Entwurfsmuster eingeführt. Neben kleinen  Aufräumarbeiten können hin und wieder auch größere Strukturänderungen  sinnvoll sein, die mehr Zeit benötigen. Sie werden mit dem Kunden bespro chen, als User-Story geplant und priorisiert. Umsetzung in der Schule Durch Refactoring wird es in der Schule möglich, dass Schülerinnen und Schüler  mit ihrem aktuellen Wissen und einem Plan für die ersten Schritte zunächst ins  Projekt starten, Prototypen erzeugen und erst im Laufe der Zeit einige Charak -Agiler Methodenkoffer II  172teristika von qualitativ guter Software erfahren und umsetzen. Sie werden in  der Regel nach den ersten Iterationen zunehmend Nachteile von ungenügend  strukturierter Software spüren: Ihr Quelltext wird schlechter lesbar, wenn keine  sprechenden Bezeichner verwendet wurden, Erweiterungen führen zu Fehlern,  weil im Team festgelegte Regeln, etwa wie man Getterund Setter-Methoden  bezeichnet, nicht von allen eingehalten wurden, erste Redundanzen führen  dazu, dass diese Quelltextstellen immer wieder parallel erweitert und korrigiert  werden müssen, oder Methoden werden zu lang und unübersichtlich. Das sind  Anlässe, die zu einem Refactoring motivieren. Ein typisches Beispiel ist, eine  mehrfach verwendete Bedingung bestehend aus einem komplizierten Ausdruck  durch eine Methode mit booleschem Rückgabewert zu ersetzen: Mehrfach verwendete Bedingungen ersetzen – höhere Übersichtlichkeit   und weniger Redundanzen  Aus: if (positionX>0 && positionX<10 && positionY>0 && positionY<10) wird: if (istImSpielfeld()) in Kombination mit einer neuen Methode: boolean istImSpielfeld() { return (positionX>0 && positionX<10 && positionY>0 && positionY<10) } Auch in der Schule wird ein Refactoring erst dann durchgeführt, wenn die  Software getestet und lauffähig ist. Je nach Erfahrung werden Teams für ers te Überarbeitungen einen Anstoß oder auch die Unterstützung der Lehrkraft  benötigen. Regelmäßiges Überarbeiten durch kleine Verbesserungen passt ab  diesem Zeitpunkt gut ans Ende einer Iteration nach dem Testen. Hilfreich für die  Schülerinnen und Schüler hierfür kann eine Checkliste mit Qualitätskriterien  für Quelltext wie im Kasten auf Seite 173 sein. Für größere Umstrukturierungen  hingegen bietet es sich auch in der Schule an, User-Storys zu schreiben. Insbesondere in Oberstufenprojekten ist es in der Regel notwendig, einige  grundlegende Strukturentscheidungen, die mehr Erfahrung voraussetzen, zu  Beginn des Projekts zu treffen. Hier, aber auch wenn man sehr früh im Lernpro zess in ein Projekt einsteigt (Kapitel 3.3), wird die Lehrkraft die Schülerinnen  und Schüler anfangs weiterhin beraten müssen. Darüber hinaus können Ent wurfsentscheidungen nun aber mit der Zeit getroffen bzw. optimiert werden Refactoring – Qualität verbessern und dabei lernen 173und Fehler werden nicht wie in wasserfallähnlichen Projekten zu Problemen,  die den Projekterfolg gefährden, sondern zu wertvollen Lernchancen. Qualitätscheck In unserem Quelltext • haben alle Bezeichner sprechende und zu unserer Vereinbarung passende Namen  •  ist die Formatierung einheitlich, •  sind auskommentierte Zeilen, die nicht mehr gebraucht werden, gelöscht, •  haben Methoden eine übersichtliche Länge, •  hat jede Klasse eine übersichtliche Größe und genau eine Zuständigkeit, •  gibt es keine unnötigen Redundanzen, •  nutzen wir Spezialisierung und Generalisierung, wo sie sinnvoll sind. Ein Blick ins Klassenzimmer Informatiklehrerin Frau Lovelace berichtet:  Ein Team kam an einem Punkt gar nicht mehr weiter. Es hatte zwar ein gutes Klassendiagramm, aber beim Umsetzen teilweise Methoden in falschen Klassen implementiert. Das geschieht erfahrungsgemäß am Anfang immer mal. Also habe ich das  Team zu einem Refactoring angeleitet. Am Ende waren sie glücklich, weil es sich so  schnell und leicht reparieren ließ. Zunächst hatten sie gedacht, jetzt müssen sie  alles wegwerfen und von vorn anfangen. Gerade den Schwächeren im Team hat das  Refactoring sehr geholfen. Sie haben gemerkt, dass sie etwas zum Projekt beitragen  können und dass Fehler machen nicht so schlimm ist. So sind sie weiter fleißig mit  dabei gewesen. Informatiklehrer Herr Weizenbaum berichtet: Ein Team hat in einem Spiel verschiedene Tiere implementiert. Mit der Zeit wurde  eine Vererbungsstruktur sinnvoll. Um Redundanzen zu vermeiden sowie die Lesbar keit und Erweiterbarkeit zu verbessern, wurde der bestehende Code entsprechend  folgender Teamentscheidungen überarbeitet: • Die Bezeichner sollen deutsche Begriffe sein, aber «set» und «get» werden als  Präfix von Getterund Setter-Methoden verwendet. • Die gemeinsamen Attribute und zugehöigen Getterund Setter-Methoden werden  in die Oberklasse verschoben.  Agiler Methodenkoffer II  174Abbildung 5.4:  Beispiel für Vereinheitlichen von Bezeichnern und sinnvolles Einführen  einer Vererbung  Tipps und Tricks aus der Unterrichtspraxis • Eine anfangs schon eingeführte Liste mit Vereinbarungen für lesbaren, gut  strukturierten Quelltext kann schrittweise erweitert werden.  • Neu erlernte Konzepte, wie beispielsweise Modularisierung oder Vererbung.  sind ein typischer Anlass, Quelltext umzustrukturieren. Refactoring, als  Technik aus der Praxis der Softwareentwicklung («Das machen die Profis  auch»), kann nicht nur im Projekt, sondern auch im Unterricht eine Motivation für solche Umstrukturierungsarbeiten sein.  • Hilfreich sind Entwicklungsumgebungen, die ein automatisches Formatie ren und das Umbenennen unterstützen.  • Entscheidungen, wie etwa das Verwenden einer Client-Server-Architektur  oder des MVC-Musters, können von der Lehrkraft vorab vorgegeben werden,  da sie nachträglich nur mit großem Aufwand umsetzbar sind. Sie werden  auch in professionellen Projekten von Entwicklern mit mehr Erfahrung,  meist ausgewiesenen Softwarearchitekten, so früh wie nötig getroffen.Schlange name velocity schlaengelt()  getName()  getVelocity()  setName(name)  setVelocity(vel)Schwein tiername  Geschwindigkeit laeuft()  getName() getGeschwindigkeit()  setName(name)  setGeschwindigkeit(g) Schlange<<abstract>> TierSchildkroete name  speed kriecht()  getName() getGeschwindigkeit  setName(name)  setSpeed(s) Schwein SchildkröteAufwandsabschätzung – gemeinsam das Machbare ermitteln 1755.7 Aufwandsabschätzung –  gemeinsam das Machbare ermitteln Als Basis des Planungspro zesses und zur gemeinsamen  Abschätzung des Aufwands  eines Projekts oder einer  Aufgabe können verschiede ne Techniken herangezogen  werden, mit denen die Expertise des Teams genutzt und Wissenstransfer un terstützt wird. Gewinn für Schülerinnen und Schüler Aufwandsabschätzungen  • fundieren den Planungsprozess hinsichtlich des Schaffbaren,  • sind Anlass zum Austausch über Problemlösestrategien, • offenbaren, ob alle ein gemeinsames Verständnis der zu planenden Aufgabe  haben, • unterstützen den sachbezogenen Austausch und die Konsensfindung bei unterschiedlichen Meinungen.   Gewinn für Lehrkräfte Aufwandsabschätzungen • sind ein Instrument, um Selbstorganisation zu fördern, • initiieren Wissenstransfer innerhalb der Teams.Agiler Methodenkoffer II  176Hintergrund In agilen Softwareprojekten ist die Abschätzung der für das Projekt und seine  Bestandteile benötigten Zeit eine der wichtigsten, aber auch herausfordernds ten Aufgaben: Zu Beginn des Projekts oder einer Iteration gibt das Team dem  Kunden eine Zusicherung darüber, welche Funktionalitäten im entsprechenden  Zeitrahmen umgesetzt werden. Eine Zusage kann nur dann zuverlässig sein,  wenn zuvor eine realistische Aufwandsabschätzung vorgenommen wurde. Häufig erfolgt agiles Schätzen nicht durch Bestimmung des absoluten Auf wands, sondern orientiert sich an einem Referenzwert und alle weiteren Schät zungen finden relativ dazu statt. Vergleichende Schätzungen sind schneller und  objektiver, da letztlich die tatsächliche Bearbeitungszeit auch vom konkreten  Bearbeiter abhängt. Eine einfache Möglichkeit ist die Vergabe von T-Shirt-Grö ßen (XS, S, M, L …) für die Größenordnung des Aufwands. Eine handlungsorientierte Technik zur gemeinsamen Prognostizierung des  Arbeitsaufwands ist das Planning-Poker. Jeder Teilnehmer erhält hierbei einen  Satz Spielkarten mit Komplexitätswerten (sogenannte Story-Points, Abbildung  5.5). Mit steigenden Werten vergrößert sich auch ihr Abstand, da auch der Unsicherheitsfaktor im Schätzen größer wird. Als Sonderkarten gibt es eine Frage und eine Pausenkarte. Abbildung 5.5:  Planning-Pokerkartenset mit Story-Points. In jeder Spielrunde wird eine User-Story betrachtet und dazu in die Mit te des Tisches gelegt. Alle Teammitglieder legen nun verdeckt die Karte ih rer Schätzung auf den Tisch und decken anschließend gleichzeitig auf. Der  größte und kleinste Schätzwert sollte jeweils begründet werden. Anschlie ßend wird versucht, in der Diskussion einen Konsens zu finden, der dann  auf der User-Story als gemeinsamer Schätzwert notiert wird. Die Konsens findung im Team ist ein Mehrwert, weil dadurch Agile Werte gelebt werden.   Der relative Schätzwert kann über einen Referenzwert in Bearbeitertage umge rechnet werden. Aufwandsabschätzung – gemeinsam das Machbare ermitteln 177Wurde zu Beginn einer Iteration der Gesamtaufwand aller User-Storys be stimmt, kann der Projektfortschritt über ein sogenanntes Burn-Down-Chart  visualisiert werden. Dazu wird der täglich aktualisierte Restaufwand in Abhängigkeit zur verbleibenden Zeit dargestellt (Abbildung 5.6). Abbildung 5.6:  Burn-Down-Chart Umsetzung in der Schule Für Schülerinnen und Schüler stellt die Zeitabschätzung aufgrund der meist  fehlenden Projektund Softwareentwicklungserfahrung eine der schwierigsten  Aufgaben dar. Aus diesem Grund ist es sinnvoll, statt User-Storys Tasks (als  kleinste Einheit von Arbeitspaketen) sowie vergleichende Abschätzungen zu  verwenden. Dass vergleichendes Schätzen deutlich einfacher ist, lässt sich mit  folgender Aufgabe demonstrieren: Wie viele Einwohner haben Köln, Frankfurt und München jeweils? a) Schätzen Sie absolute Zahlen. b) Schätzen Sie, wie sich die Einwohnerzahlen in etwa relativ zueinander verhalten.Agiler Methodenkoffer II  178Mit Planning-Poker erhalten die Schülerinnen und Schüler eine spielerische  Technik an die Hand, mit der sich alle Teammitglieder unabhängig von ihrer  Erfahrung oder Durchsetzungsfähigkeit in den Planungsprozess einbringen  können. Die Tasks zu den User-Storys für die nächste Iteration werden präsentiert, und es ist die Aufgabe aller, diese zu analysieren, mit anderen Abschätzun gen zu vergleichen, einen Schätzwert verdeckt auszugeben (s.o.) und anschlie ßend ggf. zu verteidigen und zu erklären, sodass ein Konsens gefunden wird. Da  Schülerinnen und Schüler in konkreten Zeiträumen denken und in Schulprojek ten relativ kurze Arbeitszeiten zur Verfügung stehen, kann als Basiswert des  Planning-Pokers bspw. ein 15-Minuten-Zeitraum gewählt werden (Abbildung  5.7).  Abbildung 5.7:  Planning-Poker-Kartenset, angepasst an Schulprojekte Die Erörterung sehr unterschiedlicher Schätzungen trägt auch dazu bei, nicht  näher spezifizierte Anforderungen und Annahmen zu klären.  Varianten • Als einfache vergleichende Abschätzung, die auch hier im Buch verwendet  wird, ist beispielsweise eine Einteilung des Aufwands in gering, mittel oder  hoch möglich, was leicht mit T-Shirt-Größen (S, M, L) gekennzeichnet werden kann (Kapitel 3.2). • Die Unterteilung einer User-Story in etwa gleich große Tasks bzw. außerhalb  der Softwaretechnik einer Aufgabe in annähernd gleich große Arbeitspakete  ist bereits eine Art Aufwandsabschätzung: Die Arbeitspakete werden nicht  exakt gleich lang sein, aber sie sind ein Maß für den Gesamtaufwand. Für  viele Schulprojekte ist diese Art der Abschätzung völlig ausreichend.Aufwandsabschätzung – gemeinsam das Machbare ermitteln 179Herausforderungen Die Aufwandsabschätzung ist vor allem am Anfang schwer und zählt deshalb  zu den anspruchsvollen Techniken. Anders als bei professionellen Projekten be steht die Priorität in der Schule letztlich nicht darin, profitabel zu arbeiten und  ein Produkt zu entwickeln, das ein externer Kunde tatsächlich braucht, sondern  es ist meist unerlässlich, die wenige verfügbare Zeit einzuhalten und selbst mit  dem Produkt zufrieden zu sein. Aus diesem Grunde wird in Unterrichtsprojek ten häufig darauf verzichtet. Tipps und Tricks aus der Unterrichtspraxis • Sollte es zu starken Diskrepanzen zwischen der zur Verfügung stehenden und  der geschätzten notwendigen Zeit kommen, müssen Anzahl oder Komplexität der User-Storys geändert werden. • Bei der Aufwandsabschätzung ist es wichtig, dass die Teammitglieder gleich zeitig ihre Entscheidung bekannt geben, damit unabhängige Meinungen in  die Meinungsbildung einfließen. Auch ohne Pokerkarten ist dies leicht mög lich, wenn es nur wenige Aufwandskategorien (z.B. gering, mittel, hoch) gibt:  Ein «Spielleiter» leitet das Ende der individuellen Überlegungsphase mit einem Countdown ein. Am Ende des Countdowns heben alle gleichzeitig (!) die  Hand und zeigen mit der Fingerzahl ihr Ergebnis an. Im Anschluss erfolgt  dann wie gewohnt eine gemeinsame Diskussion, um einen Konsens in der  Gruppe zu finden. Agiler Methodenkoffer II  1805.8 Repositorys und andere kollaborative  Werkzeuge Digitale Werkzeuge können kollabo ratives Arbeiten unterstützen, indem  sie das zeitgleiche Bearbeiten, das  Zusammenführen verschiedener Be standteile und eine Versionskontrolle  ermöglichen. Gewinn für Schülerinnen und Schüler Ein kollaboratives Werkzeug • erleichtert das örtlich und zeitlich verteilte Arbeiten an Dokumenten eines  Projekts,  • erhöht die Übersicht durch eine Versionskontrolle, • erleichtert die Wiederaufnahme der Arbeit nach einem «Irrweg» über ein Roll back, • reduziert Arbeit, weil es das automatische Zusammenführen (Merge) von  Quelltext ermöglicht,  • schafft Transparenz über die Beiträge der einzelnen Teammitglieder.     Gewinn für Lehrkräfte Ein kollaboratives Werkzeug • entlastet das Projekt zeitlich und die Betreuung organisatorisch, • schafft Transparenz bezüglich des aktuellen Projektstandes und der Beiträge  einzelner Teammitglieder.   Repositorys und andere kollaborative Werkzeuge 181Hintergrund Agile Projekte mit Beteiligten an unterschiedlichen Standorten, ggfs. von unter schiedlichen Unternehmen, bedürfen eines digitalen Datenaustauschs. Gemein same Dateiverzeichnisse und E-Mails führen allerdings zur Problematik, dass  unklar ist, welche Version jeweils aktuell ist. Abhilfe versprechen kollaborative  Werkzeuge, bspw. gemeinsame Wikis, die Änderungen in der Versionshistorie  nachvollziehbar machen. In der professionellen Softwareentwicklung in Unter nehmen und im Open-Source-Bereich ist der Einsatz von Versionsverwaltungs systemen etabliert. Sie haben folgenden Mehrwert: Zum einen gibt die automatische Versionierung eine Übersicht über den Ent stehungsverlauf inklusive der Dokumentation, wer wann was geändert hat. Die  Daten werden nicht nur gesichert, sondern es ist auch leicht möglich, eine Datei  auf eine ältere Version zurückzusetzen (Rollback). Zum anderen stellt das automatische Zusammenführen (engl. merge) von  Quelltexten mit einer automatischen Konflikterkennung, falls mehrere Entwick ler Änderungen im selben Bereich durchgeführt haben, eine Arbeitserleichte rung dar und reduziert die Fehlerhäufigkeit. In professionellen Projekten sind solche Systeme daher seit langem unverzichtbar. Im agilen Umfeld unterstützen sie zudem Werte wie Transparenz,  Feed back und Selbstorganisation. Umsetzung in der Schule In der Schule ist der Mehrwert kollaborativer Werkzeuge vergleichbar mit dem  oben genannten. Außerhalb des Programmierens eignen sich u.a. Wikis, kol laborative Mindmaps, digitale To-do-Listen oder Project-Boards, Online-Of fice-Anwendungen oder einfache webbasierte Texteditoren als Werkzeuge. Ein aktuell in der Softwareentwicklung weit verbreitetes Versionsverwal tungssystem ist Git. Auch für den Informatikunterricht geeignete Entwick lungsumgebungen wie BlueJ und der JavaEditor haben ihrerseits bereits einen  Git-Client integriert. Für Git-Server, auf denen man ein Repository, also ein  Verzeichnis zur Speicherung und Verwaltung der Softwareversionen, einrichten  kann, gibt es mehrere kostenlose Hosting-Angebote. Solche Software-Reposi torys synchronisieren Daten nicht in Echtzeit. Für Git-Systeme beispielsweise  erfolgt die Synchronisation entsprechend dem in Abbildung 5.8 dargestellten  und im Folgenden beschriebenen Ablauf:Agiler Methodenkoffer II  182Abbildung 5.8:  Grundsätzliche Abfolge der Arbeitsschritte beim Einsatz eines Git-Systems in der Softwareentwicklung Zu Beginn der Arbeit lädt sich jedes Entwicklerpair aktiv mit einem «Pull» (auch  «Update») (1.) die aktuellste Version der weiterzuentwickelnden Software aus  dem Server-Repository. Im abgebildeten Beispiel ist das die Version 2. Lokal  führt Pair A ebenso wie Pair B nun eigene Änderungen bzw. Ergänzungen des  Quelltextes durch. Mit jedem «Commit» (2.) werden diese Änderungen zunächst  lokal bei Pair A bzw. Pair B gespeichert. Erst wenn das eigene Programm lauf fähig ist und getestet wurde, stößt das erste Programming-Pair, z.B. Pair A,  aktiv mit einem «Push» (3.) eine Abgabe in das Server-Repository an. Im Re pository wird die Abgabe automatisch als Version 3 gespeichert. Ein von Pair  B nun angestoßener «Push» würde vom Server-Repository abgelehnt, d. h. die  Schülerinnen und Schüler können sich nicht mehr versehentlich gegenseitig  ihre Arbeiten überschreiben. Wird ein «Push» abgelehnt, holt sich das Pair mit  einem weiteren «Pull» (4.) die jetzt aktuellste Version vom Server-Repository.  Diese wird vom git-Client automatisch mit der lokalen Version von Pair B zu sammengeführt (engl. merge) (5.). Das Ergebnis der Zusammenführung kann  dann mit einem weiteren «Push» (6) beim Server-Repository abgegeben werden  und wird automatisch als Version 4 abgespeichert. Idealerweise führen die Pairs  ihre Änderungen in unterschiedlichen Bereichen des Quelltextes durch, denn  sonst können beim automatischen Zusammenführen (5.) Konflikte auftreten,  die das Pair manuell klären muss, wobei das Werkzeug diese Arbeit durch eine  geschickte Darstellung unterstützt. Genauer betrachtet gibt es bei Git-Systemen neben dem oben beschriebenen  Server-Repository auch bei jedem der beiden Programming-Pairs ein eigenes  lokales Repository, welches Änderungen automatisch versioniert und verwal tet. Bei Softwareprojekten in der Schule ist es empfehlenswert, didaktische  Entwicklungsumgebungen zu verwenden, die bereits einen Repository-Client Repositorys und andere kollaborative Werkzeuge 183enthalten. Dadurch entfällt eine zusätzliche Installation und Einarbeitung, so wohl in der Schule als auch zu Hause. Das Werkzeug soll ja die Arbeitsprozesse  entlasten! Ein Blick ins Klassenzimmer Informatiklehrer Herr Turing berichtet: Wie oft habe ich schon gehört, dass eine Schülergruppe bei einem Projekt nicht  weiterarbeiten kann, weil genau der kranke Schüler die Datei mit dem aktuellen  Zwischenstand hat. Das senkt die Motivation und bremst den Arbeitsfortschritt.  Online-Repositorys lösen das Problem, weil damit jederzeit (auch für die Hausaufgabe) der aktuelle Stand abrufbar ist. Am Ende einer Iteration sind nun auch die  Leistungsträgerinnen und Leistungsträger der Teams deutlich entlastet, denn sie  müssen nicht mehr dafür sorgen, dass die unterschiedlichen Quelltextteile zu einer  lauffähigen Version zusammengesetzt werden. Außerdem bin ich begeistert, weil  ich mitverfolgen kann, wie einige Schülerinnen und Schüler so vom Projektthema  gefangen sind, dass sie auch von zu Hause vieles einbringen. Herausforderungen Sicherheitseinstellungen in schulischen Netzwerken blockieren mitunter digitale kollaborative Werkzeuge. Aus diesem Grund sollten diese vorbereitend mit  Schüleraccounts getestet werden, um ggfs. rechtzeitig Freigaben beantragen  zu können. Tipps und Tricks aus der Unterrichtspraxis • Bei datenschutzrechtlichen Bedenken können Accounts über die Vergabe von  Nicknames anonymisiert werden.  • Viele kollaborative Werkzeuge geben einen guten Einblick darin, wie und  wann die Teammitglieder welche Inhalte beigesteuert haben. Das darf man  nicht überbewerten, insbesondere bei ↑ Pair-Programming. Diese Informa tionen stellen aber durchaus gute Gesprächsanlässe dar. • Der Umgang mit Software-Repositorys sollte nach Möglichkeit bereits vor  dem Projekt schrittweise eingeführt werden: Das Verteilen von Dateien z.B.  mit vorgefertigten Quelltextrümpfen oder Lösungen über Repositorys ist  für die Lehrkraft ein Weg, der auch im regulären Unterricht den Aufwand  minimiert. Auch für die Schülerinnen und Schüler ist es zeitsparend, da die  Dateien nach dem Holen über das Werkzeug direkt in der Entwicklungsum-Agiler Methodenkoffer II  184gebung verfügbar sind. So sparen sie sich den Umweg über das Zwischenspei chern und Entpacken einer Zip-Datei. Der Mehrwert der Kollaboration kann  gut durch entsprechende Aufgaben für Schülerinnen und Schüler erfahrbar  gemacht werden (Kapitel 3.3).Agile Methoden   für alle Schule agil  gestalten6 Zum Abschluss des Buches werfen wir einen umfassenderen Blick auf  die Entwicklung der Projektmethode, die mit ihr verbundenen Ziele und  den Beitrag agiler Methoden, um diese in der Unterrichtspraxis zu errei­ chen. Anschließend verdeutlichen wir anhand verschiedener Beispiele,  wie Schule über den Informatikunterricht hinaus agil gestaltet werden  kann.Agile Methoden in Theorie und Praxis 1876.1 Agile Methoden in Theorie und Praxis Die Bedeutung der Projektmethode für die Schule Die Projektmethode hat an allgemeinbildenden Schulen eine mehr als hundert jährige Geschichte. Während die amerikanischen Pädagogen Dewey und Kil patrick zu Beginn des 20. Jahrhunderts vor allem das «herzhaft absichtsvolle  Tun» und die subjektiven Einstellungen der Lernenden stärker im Unterricht  berücksichtigt haben wollten, prägte später zunächst Gudjons die deutsche Dis kussion mit dem Konzept des handlungsorientierten Lernens, das Schule und  reale Welt wieder stärker miteinander verbinden sollte. Der Schweizer Pädagoge  Frey entwickelt später für die Praxis ein aus sieben Komponenten bestehendes  Grundmuster der Projektmethode, an dem sich heute viele Unterrichtsprojekte  im deutschsprachigen Raum orientieren. Da auch in der gegenwärtigen Bildungsdiskussion ein Stärken und Verknüp fen fachlicher, sozialer, methodischer und personaler Kompetenzen gewünscht  ist, wird die Projektmethode zunehmend als geeignete Unterrichtsmethode  angesehen, um Selbstorganisation, individualisiertes, kooperatives und selbstreguliertes Lernen sowie das gemeinsame Übernehmen von Verantwortung  im Unterricht zu adressieren. Aufgabe der Lehrkraft in einem solchen Unterricht ist es, im Klassenzimmer die Rahmenbedingungen zu schaffen, die es den  Schülerinnen und Schülern ermöglichen, motiviert und ihren Kompetenzen  entsprechend projektorientiert arbeiten und lernen zu können. Dabei sollen sie  unterstützend betreut und letztlich auch bewertet werden. Informatikunter richt ist gegenüber anderen Fächern insofern besonders, als Prozessmodelle der  professionellen Softwareentwicklung herangezogen werden können, die neben  der Strukturierung von Unterrichtsprojekten auch einen Einblick in den Ar beitsalltag bieten können. Entsprechend greift unter anderem auch Frey für den  Informatikunterricht ein traditionelles Vorgehensmodell der Softwareentwick lung auf und zeigt, wie es mit den sieben Komponenten seines Grundmusters  verknüpft werden kann.Agile Methoden für alle  188Probleme der traditionellen Projektmethode Projektarbeit wird typischerweise in Phasen gegliedert, die das Vorgehen struk turieren und traditionell eine nach der anderen durchlaufen werden: Nach der  Ideensammlung wird ein genauer Plan erstellt, dieser wird arbeitsteilig um gesetzt und zum Schluss wird überprüft, ob die Projektziele erreicht wurden.  Im Informatikunterricht orientierten sich Projekte bisher meist am Wasserfall modell der professionellen Softwareentwicklung, welches einen vergleichbaren  Aufbau aufweist. In der praktischen Umsetzung stößt dieses Vorgehen allerdings  in der Schule wie in der Industrie an Grenzen. So werden Projekte in der pro fessionellen Softwareentwicklung ebenso wie im Informatikunterricht oftmals  nicht erfolgreich abgeschlossen. Wo genau liegen aber die Probleme? Wir haben in einer qualitativ angelegten Studie Informatiklehrkräfte mit  unterschiedlichen Erfahrungshintergründen verschiedener Schultypen und  Bundesländer dazu befragt mit dem Ziel, eine Erklärung zu finden. Als Kernprobleme werden das Fehlen von methodischen Kompetenzen so wie Defizite hinsichtlich fachlicher, sozialer und persönlicher Kompetenzen der  Schülerinnen und Schüler gesehen. So sind viele der Kompetenzen, die anhand  des Projekts erworben werden sollen, eigentlich Voraussetzung für die Projektarbeit. Der Freiraum im Projekt allein genügt kaum, um die benötigten Kompe tenzen auszubilden. Hierzu zählt die oftmals fehlende Fähigkeit zur Selbstorga nisation, sowohl bezogen auf den Prozess der Produktentwicklung als auch auf  das Lösen von Problemen. Zwar soll in Projekten gemeinsam Verantwortung  übernommen werden, aber auch das scheitert regelmäßig an fehlenden fachlichen und methodischen Kompetenzen, sodass die Verantwortung stattdessen  an die Lehrkraft oder an einzelne leistungsstarke Schülerinnen und Schüler de legiert wird. Auch zu Beginn noch sehr motivierte Kurse leiden an abnehmender  Motivation, wenn sich die Projektaufgaben als zu schwer zu bewältigen oder  als eintönig erweisen. Alle Lehrkräfte berichten von Erfahrungen mit Projek ten, in denen am Ende Zeit fehlte, was sich direkt auf den Projekterfolg (kein  lauffähiges Produkt) auswirkte. Das Bewerten der Schülerleistungen verläuft  mangels Einblick in die Arbeitsprozesse und unfertiger Produkte oftmals nicht  zufriedenstellend. Ebenso erweisen sich das Planen inhaltlicher und methodischer Unterstützung sowie die Adressierung von neuen Themen für die Lehrkräfte als schwie rig. So berichten die Lehrkräfte übereinstimmend, dass der Betreuungsaufwand  meist während des gesamten Projekts hoch und der Grad der Selbstorganisation  entsprechend niedrig ausfällt. Für den schulischen Alltag werden traditionelle  Vorgehensweisen als zu unflexibel erlebt. Agile Methoden in Theorie und Praxis 189Andere Studien der letzten Jahre zur Projektpraxis legen darüber hinaus  nahe, dass die Situation auch in anderen Fächern ähnlich ist: Die mit der Pro jektmethode in der Theorie verfolgten Absichten, denen die Lehr-Lern-For schung, die Fachdidaktiken, aber auch die Wirtschaft einen zunehmend höheren  Stellenwert innerhalb der Bildung beimessen, können in der Unterrichtspraxis  von Lehrkräften oft nur unzureichend realisiert werden. Wie agile Projekte das Lernen und das Unterrichten unterstützen Seit 2013 begleiten wir Lehrkräfte bei der Umsetzung agiler Unterrichtsprojekte  in ganz Deutschland und beobachten, wie die damit verbundenen Praktiken und  Techniken an individuelle fachliche und pädagogische Zielen angepasst und in  unterschiedlichsten Kontexten erfolgreich eingesetzt werden. Da wir inzwischen  Erfahrungen aus über 20 Projekten sammeln und auswerten konnten, lassen  sich Schlussfolgerungen hinsichtlich des Potenzials agiler Methoden im Un terricht ziehen: Die Praktiken und Techniken agiler Projekte und ihr iterativer  Aufbau füllen die Lücke zwischen den pädagogisch-didaktischen Zielen und dem  sich im Unterricht allmählich entwickelnden Kompetenzerwerb optimal.  Die Selbstorganisation gelingt leichter Wie erstellt man einen Plan? Wie werden Absprachen getroffen und festge halten? Wie ist ein komplexes Vorhaben aufzubereiten, sodass man Schritt für  Schritt zum Ziel kommt? In agilen Projekten unterstützen die Praktiken und  Techniken als konkrete umsetzbare Handlungsschemata den Prozess, indem  sie vorgeben, wann was gemacht werden muss: «Die Teams können gar nicht  anders, als den vorgegebenen Planungsund Kommunikationsprozessen zu  folgen.» Die Schülerinnen und Schüler schätzen die Iterationen, da sie über schaubare Zeitrahmen schaffen, die Problemkomplexität durch das Zerlegen in  Teilziele auf ein bewältigbares Maß reduzieren und da der Einstieg mit zunächst  einfachen Aufgaben für alle gut möglich ist. Erforderlich für das Gelingen ist  das Vertrauen der Lehrkraft, die Schülerinnen und Schüler loslegen zu lassen,  selbst wenn dabei zunächst auch nicht ideale Lösungsansätze verfolgt werden. Aufbau und Werte agiler Projekte unterstützen das Lernen Lernen setzt voraus, dass Handlungen mehrfach durchgeführt, dabei geübt und  vor dem eigenen Erfahrungsund Wissenshorizont reflektiert werden. Entspre chend erlaubt das iterative Vorgehen in agilen Projekten, aus eigenen Fehlern  und solchen der Teammitglieder zu lernen und daraus Konsequenzen zu ziehen.  Das bezieht sich auf fachliche, aber auch auf soziale, methodische und organisa -Agile Methoden für alle  190torische Kompetenzen. Die Lehrkräfte berichten, dass ein tieferes Verständnis  für fachliche Zusammenhänge erzeugt wurde, da die Schülerinnen und Schüler  in jeder Iteration – und damit wesentlich häufiger als bisher – zwischen der Kun den-, Entwickler-, Testerund Nutzerperspektive wechselten. Wissenstransfer  in den Projekten wird über die regelmäßige Kommunikation, z.B. über fachbe zogene Themen, gefördert. Die Lehrkräfte unterstreichen, dass Lernprozesse in  agilen Projekten besser unterstützt werden, da die Schülerinnen und Schüler  hier mit einfachen Problemstellungen beginnen können und die Komplexität  dann langsam entsprechend dem Kompetenzerwerb im Projekt zunehmen kann.  Da auch die Reflexionen der Kooperation und des Arbeitsergebnisses am Ende  jeder Iteration wiederholte Bestandteile des Projekts darstellen, werden Lern prozesse bewusst und erfolgen zielgerichtet.  Durch die regelmäßig sichtbaren Erfolge, die das Selbstbewusstsein stärk ten, sowie eine hohe Identifizierung der Teams mit ihren Produkten waren die  Schülerinnen und Schüler durchgehend motiviert.  Agile Projekte fördern soziale Kompetenz Als Vorbereitung für das Berufsleben ist das konstruktive gemeinsame Arbeiten  im Team als «Soft Skill» eine wichtige Voraussetzung. Die vielfältigen kommunikationsfördernden und strukturierenden Praktiken agiler Projekte führten  in den unterschiedlichsten Kursen dazu, dass die Schülerinnen und Schüler im  Laufe der Projekte lernten, sich strukturiert, effektiv sowie zum passenden Zeit punkt auszutauschen und dabei jedes Teammitglied miteinzubeziehen. Dieser  Aspekt wurde von den Lehrkräften als sehr wichtig erachtet und deshalb oft  durch eigene Adaptionen zusätzlich gestärkt. Lehrkräfte erhalten Freiraum  Die Komplexität von Schulprojekten stellt auch für Lehrkräfte eine Herausforderung dar. In den untersuchten agilen Projekten wurde deutlich, dass das Planen von agilem Projektunterricht besser gelingt, weil Projekte auch dann mit  einem lauffähigen Produkt abgeschlossen werden können, wenn nicht alle Pläne  umgesetzt werden. Die zur Verfügung stehenden Praktiken und Techniken und  der Projektablauf erwiesen sich als sehr flexibel, sodass sie an den jeweiligen  Kontext angepasst werden konnten. Da die Teams sich schnell selbst organisierten, änderte sich die Rolle der  Lehrkräfte insofern, als nun weniger Betreuungsaufwand notwendig war. Die  Lehrkräfte schätzen insbesondere die Zeit, die sie nun hatten, um die Lernpro zesse der Schülerinnen und Schüler zu beobachten und Einzelne bei Problemen  zu beraten.Agile Methoden in Theorie und Praxis 191Das wirkte sich auch auf die Qualität und Quantität des Lehrerfeedbacks und  der Bewertung aus. Rückmeldungen waren aufgrund der Transparenz und der  Zeit, die die Lehrkräfte für die Beobachtung hatten, nun wesentlich fundierter.  In die Bewertung konnten hierdurch nicht nur das Produkt und der Beitrag des  Einzelnen, sondern auch die Entwicklung unterschiedlicher Kompetenzen einbezogen werden.  Heterogenität wird zur Bereicherung Im Hinblick auf Schule wird in den letzten Jahren verstärkt diskutiert, wie man  der Heterogenität der Schülerschaft gerecht werden kann. Heterogenität kann  eine hervorragende Chance darstellen, Lernprozesse im Unterricht zu berei chern. Je nach Unterrichtsgegenstand stellt sie aber auch eine große Herausfor derung dar. In der Informatik ist die Heterogenität besonders groß. Hier haben  einige Schülerinnen und Schüler teils verblüffende Fertigkeiten, während an dere nur langsam einen Zugang finden. In den untersuchten Projekten stellte  sich heraus, dass die agilen Methoden sich auch hervorragend dazu eignen, mit  Heterogenität konstruktiv und produktiv umzugehen. Den Teams gelang es mit  Hilfe der Praktiken und Techniken, die unterschiedlichen Vorerfahrungen, Vor stellungen und Persönlichkeiten der einzelnen Teammitglieder zugunsten eines  gemeinsamen Verständnisses durch fokussierte Diskussionen und Aushand lungsprozesse zu integrieren. Durch die häufigen Meetings, das Project-Board  und die Prototypen werden Probleme, die einer effektiven Kooperation im Wege  stehen, früh für alle (Team und Lehrkraft) sichtbar. Unkooperatives Verhalten  wurde für einzelne Teammitglieder wesentlich unangenehmer. Probleme konn ten regelmäßig, offen und ehrlich in den Reviews (bspw. fehlende Beiträge Einzelner) und Retrospektiven (bspw. soziales Verhalten) angesprochen werden  und Lösungsideen konnten in der folgenden Iteration erprobt werden. Positives  Feed back zur individuellen Entwicklung stärkte das Verständnis füreinander  und damit den Teamgeist. Die Lehrkräfte konnten die Schülerinnen und Schüler  falls nötig unterstützen und für Einzelne individuelle Ziele und Kriterien ergän zen, die zur Reflexion der Leistungsentwicklung in jeder Iteration herangezogen  werden konnten. Agil lossprinten  In der Gesamtschau wird deutlich, dass es den Schülerinnen und Schülern in  agilen Projekten fast immer gelingt, ihre Abhängigkeit von der Lehrkraft und  einzelnen Schülerinnen und Schülern zu überwinden und echte Teamfähigkeiten zu entwickeln. Sie sind dank des Vertrauens ihrer Lehrkräfte und unterstützt Agile Methoden für alle  192durch agile Methoden einfach «losgesprintet», haben angefangen zu arbeiten  und Erstaunliches geschafft. Lehrkräfte, die agile Projekte über fünf Monate  oder länger durchführten, beobachteten einen deutlichen individuellen Zuwachs  an unterschiedlichsten Kompetenzen, den sie bei nahezu allen Schülerinnen  und Schülern als deutlich höher und nachhaltiger bewerten als in früheren,  vergleichbaren traditionellen Projekten. «Man muss ihnen nur vertrauen», re sümierte ein Lehrer, «es ist erstaunlich, wie gut das funktioniert.»Agile Schule über den Informatikunterricht hinaus  1936.2 Agile Schule über den Informatikunterricht  hinaus  Zunehmend werden agile Methoden auch außerhalb des IT-Bereichs zur Organi sation von Aufgaben und Arbeitsabläufen herangezogen. Es gibt Vereine die sich  agil organisieren, selbst Familien nutzen agile Praktiken wie das Project-Board  für die Organisation des Alltags, und auch immer mehr Schulen entdecken agile  Projektarbeit als hilfreich in unterschiedlichen Fächern. Für Schülerinnen und  Schüler sind agile Projekte ideale Wegbereiter, um Fähigkeiten und Fertigkeiten  zu erlernen, die beim Berufseinstieg geschätzt werden. In den von uns begleite ten Unterrichtsprojekten konnte beobachtet werden, wie die Schülerinnen und  Schüler ganz von selbst agile Vorgehensweisen aus dem Informatikunterricht  gewinnbringend auf andere Fächer übertragen. Beispielsweise tun sich Schüle rinnen und Schüler in der Qualifikationsphase auch ein Jahr nach ihrem agilen  Projekt hervor, indem sie ihre Teams in unterschiedlichsten Projektseminaren  durch agile Methoden unterstützen und voranbringen – unabhängig von ihren  fachlichen Fähigkeiten. Ein Mitschüler, für den agiles Vorgehen neu war, stellte  anerkennend fest: «Ihr habt einen echten Vorteil, ihr habt das ja gelernt!» Auch  solche gemischten Teams finden in der Regel ihr selbst entwickeltes, an ihren  Kontext angepasstes agiles Vorgehen. Agile Projektarbeit verändert die Arbeits weise nachhaltig und über Fächergrenzen hinweg. Die Vielfältigkeit der Lern gelegenheiten und Ziele agiler Vorgehensweisen zeigt sich an der je nach Fach  und Thema geprägten Sicht von Lehrkräften darauf, was es in ihrem Unterricht  letztlich bedeutet, agil vorzugehen: «Im Kern geht es bei agilem Vorgehen um  Innovationen», «In agilen Projekten geht es im Grunde um Lernen, Menschen  und Veränderung», «Agil ist eine Einstellung, eine Kultur», «Agil ist im Wesentlichen eine kreative Art des Problemlösens und der Zusammenarbeit» oder «Agil  sein bedeutet, sich mit Feedback und Korrekturen stetig zu verbessern.» Vier  Beispiele, die zeigen, wie der Transfer agiler Methoden in andere Schulfächer  gelingen kann, wollen wir als Ausblick ans Ende unseres Buches setzen – denn  da, wo agile Methoden eingesetzt wurden, sind Lehrkräfte ebenso wie Schülerin nen und Schüler jeden Alters und jeder Schulart von den agilen Ideen begeistert. Agile Methoden für alle  194Agile Grundschule In verschiedenen Grundschulen wird der agile Ansatz bereits verwendet, um pä dagogische Ziele, bspw. des selbstorganisierten Lernens, zu unterstützen. Durch  den geschickten Einsatz agiler Praktiken und Techniken können Kinder hier  nicht nur lernen, sich die Arbeit selbst einzuteilen, wie man es bspw. vom Wo chenplan kennt. Ebenso konkretisieren, visualisieren und priorisieren sie ihre  Ziele und Aufgaben am Project-Board oder führen tägliche Stand-up-Meetings  durch. Einfache Fragen unterstützen ihre Re flexionsund Planungsprozesse:  «Was haben wir erreicht?», «Was wollen wir als Nächstes erreichen?» und «Was  müssen wir dazu noch überwinden?» Die Formulierung zeigt den Stellenwert  der Kooperation: «Macht es gemeinsam!» als Wert bedeutet, dass die Kinder  mehr lernen, als nur für sich selbst zu sorgen. Die Entscheidungsund Hand lungsmöglichkeiten und Freiräume der Kinder sollten mit Hilfsmitteln für de ren Umsetzung (den agilen Praktiken) einhergehen. Visualisierung, Nachdenken  und produktives Tun bieten hervorragende und individuell gestaltbare Rahmen  für die Grundschule und werden so zu Werkzeugen des Denkens, die beim Prob lemlösen und gemeinsamen Arbeiten helfen, indem hierdurch Kommunikation  effektiv verläuft und Fortschritt nachvollziehbar wird. Sie erfahren Handlungs muster, die sich positiv auf das Lernen im Team auswirken und ein wichtiger  Beitrag zum «Lernen Lernen» sind.  Eine Methode zur Umsetzung agiler Ideen in der Grundschule, die aber  auch in anderen Kontexten eingesetzt werden kann, ist das denkbar einfache  «Themen-Café», welches sich an die Praktik des «Lean Coffee» anlehnt und mit  Grundschülern erprobt wurde: Die Kinder erhalten hierbei jeweils zwei Klebezet tel oder Karteikarten und notieren hierauf Themen, die ihnen wichtig sind. Von  den gesammelten Themen bestimmen sie dann die für alle interessantesten,  indem jedes Kind mit zwei Stickern die persönlich spannendsten auswählt. Danach werden die Themen der Priorität nach auf einer Art Project-Board sortiert  und wandern über die Spalte «In Diskussion» nach «Diskutiert», solange die Zeit  reicht. Der Unterricht erhält mit dem «Themen-Café» eine simple und zugleich  zweckmäßige Struktur zur Selbstorganisation: Die Kinder schaffen ihre eigene  aktuell für sie relevante Agenda, visualisieren und priorisieren sie und sprechen  zielgerichtet und produktiv über die Themen. Es benötigt keine Rolle für die  Gesprächsleitung oder Moderation, vielmehr engagiert sich jedes Kind für ein  Gesprächsund Arbeitsklima, das auf Agilen Werten wie Respekt, Offenheit,  Fokussierung und Feedback basiert. Agile Schule über den Informatikunterricht hinaus  195Das «Themen-Café» kann auch in anderen Unterrichtssituationen gewinnbringend eingesetzt werden, wo eine Einbeziehung aller Schülerinnen und Schüler und die Bearbeitung priorisierter Themen sinnvoll ist. Selbst Meetings im  Kollegenkreis können so strukturiert und eine Agenda der wichtigen Themen  schnell zusammengestellt werden. Agile Aufgabenbearbeitung in der Mathematik  Im Mathematikunterricht gehört Gruppenarbeit nicht zu den naheliegenden  Unterrichtsmethoden, aber gerade dann, wenn Aufgaben komplexer oder of fener werden, können Schülerinnen und Schüler bessere Ergebnisse erzielen,  wenn sie regelmäßig gemeinsam Aufgaben besprechen, Lösungsansätze diskutieren und sich gegenseitig Dinge erklären. Um das anzuregen und ihnen eine  simple, aber strukturierende Herangehensweise für kooperatives Lernen in der  Mathematik an die Hand zu geben, haben sich agile Praktiken als sehr hilfreich  erwiesen. In der Oberstufe hat sich folgendes Vorgehen zur gemeinsamen Lösung einer komplexen Aufgabe bewährt, welches aber grundsätzlich auch in anderen  Schulstufen denkbar wäre: Damit nicht immer die Gleichen zusammenarbeiten,  werden die Teams, die jeweils aus sechs bis acht Schülerinnen und Schülern  bestehen, zufällig gebildet. Im Folgenden ist das ↑ Timeboxing für die ersten  Schritte sehr kurz. Nachdem alle zunächst die Aufgabe gelesen haben, benennen  die Teams in einem Planungs-Meeting die zu lösenden Teilprobleme und notie ren sie auf Klebezetteln. Anschließend erklärt sich jedes Teammitglied für ein  Teilproblem zuständig, wobei Doppelbesetzungen möglich sind, und skizziert  am eigenen Arbeitsplatz eine mögliche Lösungsstrategie. Im Stand-up-Mee ting werden nun reihum die gefundenen Strategien vorgestellt, wobei deutlich  wird, dass es für ein Teilproblem durchaus unterschiedliche Vorgehensweisen  geben kann. Fehlende Lösungsansätze ergänzt das Team ggf. noch. Nun legen  die Teams die Teilprobleme endgültig fest und entwickeln dann arbeitsteilig in  Paaren einen relativ detaillierten Lösungsweg, wobei analog zum Pair-Program ming der Driver laut denkt und der Navigator als Diskussionspartner fungiert  und sich bei Fragen, Schwierigkeiten oder Fehlern einschaltet. Im nächsten  Stand-up-Meeting präsentieren die Paare ihre Lösungswege und sprechen of fene Fragen, Schwierigkeiten und ggf. auch Irrwege an. In der nun folgenden  längeren Arbeitsphase am Platz befassen sich die Schülerinnen und Schüler  individuell mit dem konkreten Lösen ihrer Teilprobleme. Schließlich werden  die Teillösungen im Team zur Gesamtlösung zusammengefügt. Rückblickend  sprechen die Teams anschließend über zu beachtende Aspekte und diskutie -Agile Methoden für alle  196ren, erfahrungsgemäß durchaus heftig, die Vorund Nachteile verschiedener  Strategien.  Die Erfahrung zeigt, dass der Zeitbedarf für dieses Vorgehen nicht wesentlich  länger als im fragend-entwickelnden Unterricht sein muss. Allerdings erleben  die Schülerinnen und Schüler hierbei, wie Lösungen komplexer Aufgaben ge meinsam entwickelt werden können und dass man dabei auch ohne ein «Ma thegenie» im Team gut zurechtkommt. Viele arbeiten jetzt gern, zielgerichtet  und immer wieder in wechselnden Teams beim Lösen von Hausaufgaben, beim  Voroder Nachbereiten des Unterrichts und insbesondere auch in der Vorbe reitung für schriftliche Prüfungen zusammen. Einzelkämpfer gibt es natürlich  weiterhin, viele davon sind aber auf Dauer deutlich weniger erfolgreich als die  Teamarbeiter. Agile Methoden in einem Physik-Projektseminar der Oberstufe  Ein Ziel der Bayerischen Projektseminare in der Oberstufe ist die Durchführung  eines umfangreichen Projekts. Die Schülerinnen und Schüler haben ein Jahr  Zeit, sich ausgehend von einer Idee eigene Ziele zu setzen und diese selbstorganisiert umzusetzen. Für die meist 15 bis 18 Schülerinnen und Schüler ist es eine  Herausforderung, einen so langen Zeitrahmen gemeinsam zu gestalten. Agile  Werte wie eine Feedbackkultur, Offenheit und Transparenz, der Mut, Fehler  zu machen, und Fokussierung sind hervorragende übergreifende Ziele, die im  Rahmen eines solchen selbstorganisierten Prozesses verfolgt und dann auch in  einem Zertifikat rückgemeldet werden können. Teams entwickeln basierend auf Agilen Werten innovative Produkte Ziel des Physik-Projektseminars «Erfinderwerkstatt» war es, in Teams eine Idee  für ein innovatives technisches Produkt zu erarbeiten und dieses Produkt auch  auf einer Prototypebene umzusetzen. In einem iterativen und inkrementellen  Prozess entwickelten die Schülerinnen und Schüler zuerst Ideen und Hypothe sen, wie eine Lösung aussehen könnte, bauten einen zunächst einfachen Pro totyp und erprobten ihn. Die Testdaten wurden analysiert und lieferten einen  Erkenntnisgewinn, der dann zu einer Verbesserung des Lösungsansatzes führte.   Ein Beispiel eines dreiköpfigen Teams aus dem Projektseminar Erfinder werkstatt veranschaulicht den Ablauf: «Intelligente Straßenschilder» haben den Zweck, nur im Fall einer Gefahr In formationen anzuzeigen. Beispielsweise soll ein Schild «Wildwechsel» nur dann  leuchten, wenn wirklich Lebewesen auf eine Landstraße laufen. Agile Schule über den Informatikunterricht hinaus  197Mit einem ersten, sehr einfachen Prototyp, der eine über Sensoren schalt bare Farbdiode hatte, wurde durch das Team die generelle Machbarkeit geklärt.  In einem zweiten Schritt wurde nach einer Möglichkeit gesucht, die Anzeige  auf mehrere einzeln schaltbare Farbdioden zu erweitern. Über diesen Prototyp  konnten auch Kosten-/Aufwandsüberlegungen konkretisiert werden, sodass  am Ende eine Anzeige aus 256 Farbdioden entstand. Parallel dazu wurden die  Reichweite der Sensorik erhöht sowie Haltevorrichtungen für die Anzeige und  die Sensoren gebaut. So entstand im letzten Schritt ein Prototyp, bei dem ein  Mensch, der sich in der Gefahrenzone befindet, das Warnsignal auf dem Schild  auslöst. Agile Praktiken in der Erfinderwerkstatt Das ↑ agile Spiel «Kekse backen» bietet für Projekte, in denen Innovationen ent stehen sollen, einen optimalen Einstieg, da die Schülerinnen und Schüler hierbei  den iterativen Prozess, insbesondere die Reflexionsphasen zur Produktqualität,  erfahren, ebenso wie die Weiterentwicklung eines Produkts bei unvollständigen,  sich ändernden Anforderungen. Im Projekt pflegte dann jedes Team ein selbstgestaltetes ↑ Project-Board, dessen Zustand regelmäßig festgehalten wurde und  so auch einen wichtigen Teil der Projektdokumentation darstellte. Der Unterricht fand vierzehntägig statt und hatte ausgerichtet auf eine vertiefte Arbeitsphase den zeitlichen Umfang von vier Schulstunden. Vor der Ar beitsphase fand mit Unterstützung einer Checkliste jeweils eine Planung statt.  Abgeschlossen wurde jede Arbeitsphase mit einer ↑ Reflexion. Auch hier arbei teten die Schülerinnen und Schüler mit Checklisten sowohl für das Review als  auch für die Retrospektive. Hierbei wurde nicht nur kommuniziert, sondern die  Ergebnisse wurden zugleich in einfacher, aber passender Weise dokumentiert. Checkliste zu Beginn des Unterrichts • Wie ist der aktuelle Stand? In welcher Phase des Projekts befinden wir uns?  • Wer hat welche Aufgaben seit dem letzten Treffen zu Hause erledigt?  • Was ist die Zielsetzung für das heutige Treffen?  Checkliste am Ende des Unterrichts  • Was haben wir während der Unterrichtszeit gemacht/geschafft? Wie effizient  waren wir dabei? • [Optional] Welche speziellen Ereignisse (Probleme; erreichte Meilensteine;  Verbesserungsansätze) gab es? • Ist das Board auf dem aktuellen Stand gebracht? Falls nein, wer aktualisiert? • [Optional] Gibt es Wünsche und Fragen an die Seminarleiter?Agile Methoden für alle  198Das Protokoll erforderte wie jede ↑ Dokumentation einen Zusatzaufwand.  Dieser war jedoch gering und die Dokumentation half den Schülerinnen und  Schülern, sich zu fokussieren und den am Ende des Seminars erwarteten Ab schlussbericht zu erstellen. Der Lehrkraft gab sie einen guten Überblick über die  aktuellen individuellen Aktivitäten und ermöglichte so einen guten Einstieg in  die durchzuführenden persönlichen Feedbackgespräche.  Eine für alle geltende Iterationsdauer ist hinderlich in Projekten, in denen  die Themen der einzelnen Teams sehr unterschiedlich sind, wie es hier der Fall  war. Sie ist auch nicht nötig, solange die Teams ohnehin von sich aus immer  wieder konkrete, erprobbare Prototypen anstreben. In derart langen Projekten  helfen Prototypen besonders gut, die Motivation zu erhalten. Das Feedback der  anderen während einer Vorstellung im Plenum, die die Lehrkraft anregte, hatte  eine sehr belebende Wirkung und ist ideal, um müde Phasen zu überwinden: Alle  Beteiligten hatten dann wieder Lust, das nächste Problem anzugehen.  Es zeigt sich, dass agile Methoden durch ihre Unterstützung eigenverant wortlichen, selbstorganisierten Arbeitens bei verschiedensten Projekten ge winnbringend sind, nicht nur bei Projekten in der Softwareentwicklung. Der  hier skizzierte Ablauf eignet sich nicht nur für innovative Produkte aus der Tech nik, sondern kann auch für solche bspw. aus den Bereichen Musik oder Film  verwendet werden. Gemäß agilen Denkweisen und Wertvorstellungen darf die  Vorgehensweise dabei nicht als starre Vorgabe gesehen werden. Vielmehr wählt  die Lehrkraft nur die Praktiken und Techniken aus, die im konkreten Projekt  einen Mehrwert versprechen, und sollte dabei auch keine Scheu haben, diese zu  adaptieren und Neues zu ergänzen. Agile Schule als Unterrichtsprinzip Erste positive Erfahrungen existieren auch mit der Verwendung der Agilen  Schule als durchgängiges Unterrichtsprinzip. In der Softwareentwicklung legt  der Kunde fest, was gemacht werden soll. Wie und auf welchem Weg ein agiles  Entwicklerteam dieses Ziel erreicht, bestimmt es dagegen selbst. So ähnlich ist  es auch in agilen Klassenzimmern, in denen der gesamte Unterricht Agilen Wer ten folgt. Die Inhalte und Ziele des Unterrichts sind im Curriculum festgelegt  und entsprechend durch die Lehrkraft vorgegeben, die auch geeignetes Mate rial zur Verfügung stellt. Die Art der jeweiligen Ergebnisse (Produkte) legt die  Lehrkraft entweder für alle fest oder handelt sie mit den Teams aus. Zudem de finiert sie entsprechende Qualitätskriterien, anhand derer die Schülerinnen und  Schüler ihre Arbeitsergebnisse überprüfen können. In den Iterationen erledigen  die Teams Theoriestudien und praktische Arbeiten und entwickeln in kleinen Agile Schule über den Informatikunterricht hinaus  199Schritten und in der Regel im Wechsel Präsentationen, Berichte, Kurzfilme oder  andere Produkte. Typische Teamgrößen sind vier Schülerinnen und Schüler.  Sobald die Lehrkraft einen guten Überblick über die individuellen Stärken und  Schwächen hat, setzt sie die Teams abwechselnd so neu zusammen, dass in je dem Team verschiedene Stärken vorhanden sind. Damit das möglich ist, muss  die Lehrkraft auch die Reihenfolge festlegen, in der bestimmte übergeordnete  Themen bearbeitet werden. Die Dauer einer Iteration wird so festgelegt, dass die  Teams in der gegebenen Zeit ein (Unter-)Thema bearbeiten und dort konkrete  Ergebnisse entwickeln können. Die Planung und Priorisierung wird mit einem  Project-Board visualisiert, das um Bereiche für Probleme sowie für Arbeiten, die  besonders viel Spaß gemacht haben, erweitert werden kann. Jede Stunde beginnt  mit einem Stand-up-Meeting, danach wird besprochen, was in der Stunde bear beitet werden soll, und das Team legt los. Wann die Schülerinnen und Schüler  allein, paarweise oder im Team arbeiten, legen sie selbst fest und sie priorisieren  auch ihre konkreten Tätigkeiten selbst.  Lehrkräfte berichten, dass die Schülerinnen und Schüler das selbstbestimm te Arbeiten im eigenen Tempo schätzen, sich gern gegenseitig unterstützen und  je nach Teamzusammensetzung auch lernen, mit Konflikten umzugehen. An fangs erscheint das Arbeiten oft etwas chaotisch, aber langfristig ist es intensiver, nachhaltiger und macht beobachtbar mehr Spaß. Lehrkräfte berichten, dass  agil lernende Klassen schneller sind und in kompetenzorientierten Prüfungen  im Durchschnitt besser abschneiden. Erste Vergleiche des Bearbeitungstempos  lassen vermuten, dass im lehrerzentrierten Unterricht die Schnellen mitunter  erheblich ausgebremst werden, während die Schwachen vor allem unter zeitlichem Druck stehen. Agile Schule lohnt sich. Übereinstimmend berichten Lehrkräfte, dass sich  agiler Unterricht für jedes Fach, jedes Alter, alle Schülergruppen und jeden  Schultyp eignet. Wann sprinten Sie mit Ihren Schülerinnen und Schülern los?Agile Methoden für alle  200GlossarGlossar 202Agiles Manifest Das Agile Manifest stellt den kleinsten gemeinsamen Nenner agiler Methoden dar  und beschreibt anhand von vier Leitsätzen  und zwölf Prinzipien die grundlegenden  Werte und Ziele agiler Softwareentwick lung. Es entstand 2001 bei einem Treffen  von erfahrenen Praktikern aus dem Bereich  der Softwareentwicklung, deren gemein sames Anliegen es war, bessere Wege zur  Entwicklung von Software zu erschließen. Agile Spiele Agile Spiele dienen dem Einstieg in agiles  Denken und Handeln und der Vermittlung  damit verbundener Werte, Prinzipien und  Methoden (Kapitel 4.8). Agile Teams Teams sind der Drehund Angelpunkt agilen Arbeitens. Agile Teams organisieren  sich selbst und orientieren sich dabei am  Nutzen für den Kunden sowie an gemein sam verabredeten Regeln, die im Einklang  mit Agilen Werten stehen. Die Teammitglie der begegnen sich auf Augenhöhe, kommu nizieren offen miteinander und reflektieren  ihr Tun regelmäßig. Agile Teams bestehen  selten aus mehr als zehn Personen, da mit die direkte Kommunikation gelingt. Da  häufig Spezialisten aus unterschiedlichen  Bereichen zusammenarbeiten, ist der Wis senstransfer innerhalb des Teams wichtig.  Er wird durch verschiedene agile Praktiken  unterstützt, damit das Projektziel beim  Ausoder Wegfall einzelner Personen mög lichst nicht gefährdet wird.  Akzeptanzkriterien Mit den Akzeptanzkriterien beschreibt der  Kunde/Product-Owner, welche fachlichen  Anforderungen eine User-Story bis zum  Review erfüllen muss. Dies ist für das Entwicklungsteam sowohl zum Verständnis der User-Story als auch zum Erstellen von  Tests hilfreich. Die Erfüllung der Akzep tanzkriterien ist eine echte Untermenge  der Definition of Done. Aufwandsabschätzung Zeitabschätzungen unterstützen den Planungsprozess. Häufig erfolgt agiles Schät zen nicht durch Bestimmung des absolu ten Aufwands, sondern relativ zu einem  Erfahrungswert. Weit verbreitet ist dabei  die Vergabe von T-Shirt-Größen (S, M, L  …) oder Story-Points. Eine handlungsori entierte Technik, durch die das gesamte  Team sich an der Abschätzung beteiligt,  ist das Planning-Poker. Zur Visualisierung  des Aufwands können Burn-Down-Charts  verwendet werden (Kapitel 5.7). Backlog Das Backlog, auch Product-Backlog, ist  eine Liste von Aufgaben, die in einem Projekt zu erledigen sind, beispielsweise die  User-Storys zur Umsetzung der Anforde rungen an eine Software. Bei der Samm lung und Priorisierung der Aufgaben ist  der Kunde maßgeblich beteiligt. Ein Back log hat jedoch keinen verbindlichen Ver tragscharakter. Inhalt und Priorisierung  der einzelnen Aufgaben können während  des Projekts nach jeder Iteration einver nehmlich geändert werden – ganz nach  dem Prinzip, wonach das Reagieren auf  Veränderungen einen höheren Stellenwert  hat als das Festhalten an ursprünglichen  (vertraglichen) Abmachungen. Das Sprint-Backlog ist ein Begriff der  Scrum-Vorgehensweise und umfasst dieje nigen User-Storys des (Product-)Backlogs,  die in der anstehenden Iteration (Sprint)  erledigt werden sollen. Ein Sprint-Backlog  ist, anders als das Product-Backlog, nicht  veränderbar, weil mit diesem die Planungs phase beendet wird und ab dann der Fokus Glossar  203auf dem Umsetzen der ausgewählten Aufgaben und dem Erreichen der festgelegten  Ziele liegt. Burn-Down-Chart Ein Burn-Down-Chart ist eine grafische  Darstellung des Projektverlaufs. Es visua lisiert den Zusammenhang zwischen dem  noch zu leistenden Aufwand (horizontale  Achse) und der verbleibenden Zeit (verti kale Achse).  Zu Beginn eines Zeitraums – entweder  die Dauer einer Iteration oder die gesamte  Projektlaufzeit – wird der Aufwand über  die User-Storys geschätzt. Verbindet man  diesen Startpunkt mit dem Aufwand 0 zum  Ende des Zeitraums, ergibt sich die Ideal linie. Liegt im Verlauf die reale Kurve zu  einem gegebenen Zeitpunkt oberhalb der  Ideallinie, so ist das Team im Verzug. Liegt  die reale Kurve dagegen unterhalb der   Ideallinie, so liegt das Team vor der geplan ten Zeit.  Sind einzelne Aufgaben erledigt, reduziert  sich der Restaufwand. Die Aktualisierung  des Restaufwands im Burn-Down-Chart  erfolgt entweder toolgestützt und auto matisch, oder sie wird in regelmäßigen  Abständen vom Team erledigt. Das BurnDown-Chart schafft einerseits den Anreiz,  fokussiert einzelne User-Storys fertigzu stellen, und sorgt andererseits für Trans parenz, um gegebenenfalls bei Abwei chungen rechtzeitig reagieren zu können  (Kapitel 5.7). Commitment Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23 Definition of Done Die Definition of Done ist eine vom Team  festgelegte Kriterienliste, anhand derer  entschieden wird, wann eine Aufgabe tat -sächlich erledigt ist. Die Kriterien legen  somit die Qualität des Produkts fest. Sie  können sich von Projekt zu Projekt unter scheiden. Die Definition of Done umfasst  beispielsweise die Prüfung der in den  User-Storys festgelegten Anforderungen,  die Durchführung von Tests oder das Er stellen einer Dokumentation. Nur Produk te, die der Definition of Done entsprechen,  werden am Ende einer Iteration dem Kunden vorgestellt. Dokumentation Da innerhalb eines Softwareprojekts ver schiedene Beteiligte zusammenarbeiten,  ist es wichtig, zentrale Informationen  nicht nur direkt zu kommunizieren, son dern auch transparent zu dokumentieren.  Typische Bestandteile einer Dokumenta tion sind Prozessabsprachen, Texte oder  Diagramme, die das Verständnis für den  Aufbau und die Funktionsweise der Soft ware erhöhen, sowie Vereinbarungen der  Qualitätsstandards. In agilen Projekten  ist die Dokumentation zwar wichtig, steht  aber nicht im Mittelpunkt: Funktionierende  Software wird als wichtiger angesehen als  umfassende Dokumentation (Kapitel 5.5). Driver Siehe Pair-Programming Einfachheit Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23 Epic Ein Epic ist eine eher grob skizzierte um fangreiche Anforderung, die wie eine  User-Story aus Anwendersicht formuliert  ist. In der strategischen Planungsphase  einiger professioneller Projekte entwerfen  der Kunde und das Entwicklerteam von  der Produktversion ausgehend gemein -Glossar 204sam Epics. Durch Detaillieren und Aufteilen  entstehen aus den Epics im Weiteren die  User-Storys. Feedback und Bewertung Durch Feedback und Bewertung erfolgt  eine auf den individuellen und kollabora tiven Projektbeitrag bezogene Rückmel dung, die das Geleistete wertschätzt und  dem einzelnen Teammitglied Anlass und  Anhaltspunkte bietet, verschiedene Leis tungsaspekte und die eigene Arbeitsweise  zu reflektieren. In agilen Projekten arbei ten Teams selbstorganisiert, weshalb die  Teammitglieder sich gegenseitig auch das  fundierteste Feedback geben können (Kapitel 5.4). Fokussierung Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23  Iteration Eine Iteration ist eine definierte, sich wiederholende Zeitspanne, in der das Team  den Prototyp (weiter)entwickelt. Jede Ite ration umfasst eine Planung, in der das  Iterationsziel festgelegt wird, eine Ar beitsphase sowie eine Reflexion. Damit  das Team fokussiert arbeiten kann, dürfen  während der Iteration keine Ziele geän dert werden. Iterationen folgen im agilen  Prozess direkt aufeinander und sind in der  Regel alle gleich lang. KISS-Prinzip (Keep It Small and Simple) Gemäß der Leitfrage «Kann ich es sinnvoll  einfacher gestalten?» soll nur das imple mentiert werden, was für die unmittelba re Zielsetzung notwendig ist. Es sollten  also keine eventuell zukünftig hinzukom menden Bedingungen und Anforderungen  berücksichtigt werden. Gibt es mehrere  Lösungen, so ist die einfachere zu bevorzu -gen, denn sie ist leichter nachzuvollziehen.  Dies erleichtert später die Fehlersuche  oder Erweiterungen. Auch zur Projektor ganisation werden nur diejenigen Techni ken und Praktiken herangezogen, die einen  Mehrwert bieten. Kommunikation Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23  Lean Coffee Das Lean Coffee ist eine strukturgebende  Methode für Veranstaltungen mit dem Ziel  eines einfach organisierten kollegialen  Wissensaustauschs. Teilnehmende brin gen Themen ein, die zunächst auf Mode rationskarten gesammelt und an einem  Project-Board in der linken Spalte sichtbar  angebracht werden. Anschließend erfolgt  eine Priorisierung, indem jeder Teilnehmer  zwei Punkte vergibt. Dann werden die Kar ten entsprechend in absteigender Reihenfolge der vergebenen Punkte sortiert. Die  Diskussion der Themen folgt nun dieser  Reihenfolge und wird visuell unterstützt,  indem das jeweils aktuelle Thema in die  Spalte «In Progress» und abschließend in  die Spalte «Done» verschoben wird. Mock-up Ein Mock-up (engl. für Simulation, Modell)  ist ein einfaches (strukturelles), nicht funk tionsfähiges Anschauungsmodell. Es zeigt  beispielsweise das Design der grafischen  Benutzeroberfläche mit Menüs und Icons.  Mithilfe eines oder mehrerer Mock-ups  können potenzielle Nutzer oder Kunden  beispielsweise hinsichtlich des Designs  (Farben, Layouts, Schriftarten) und der  Benutzerfreundlichkeit (Usability) befragt  werden.Glossar  205Modeling-Story Die Modeling-Story wurde von Lehrkräf ten für die Agile Schule eingeführt und  enthält einen Modellierungsauftrag. Mo deling-Storys sorgen für Transparenz von  Modellierungstätigkeiten. Bei der Iterati onsplanung werden sie wie User-Storys  priorisiert und am Project-Board visua lisiert. Sie können von den Schülerinnen  und Schülern eines Teams geschrieben,  aber auch von der Lehrkraft vorgegeben  werden, um eine Reflexion über Strukturen  anzustoßen (Kapitel 4.1). Mut Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23 Navigator Pair-Programming Pair-Programming Pair-Programming (engl. für Paarprogrammierung) ist eine Arbeitstechnik, bei der  zwei Teammitglieder in verschiedenen  Rollen gemeinsam programmieren. Der  Entwickler, der die Tastatur und die Maus  kontrolliert, ist der Driver. Er erstellt den  Programmcode, kümmert sich um die De tails der Implementierung und erklärt, was  er tut. Sein Partner übernimmt die Rolle  des Navigators, der das gesamte Projekt  sowie die getroffenen Absprachen etwa  zum Programmierstil im Blick behält. Er  hinterfragt die Aktivität des Drivers und  spricht funktionale Unklarheiten, eventuel le Fehler oder einfachere Umsetzungsmög lichkeiten an. Die Rollen werden regelmä ßig getauscht und auch die Paare sollten  idealerweise ab und an neu zusammengesetzt werden. Durch dieses Vorgehen soll  die Qualität des Quelltextes gesteigert und  das Wissen im Team verteilt werden (Ka pitel 4.6).Planning-Poker Planning-Poker ist eine spielerische Technik zur Abschätzung des Aufwands einer  Aufgabe (User-Story, Task), an der sich das  gesamte Team aktiv beteiligt. Benutzt wer den spezielle Spielkarten mit unterschied lichen (Zeit-)Werten (Kapitel 5.7). Product-Backlog Backlog Product-Owner Rollen Project-Board Ein Project-Board (auch Taskboard ge nannt) visualisiert die Projektziele, den  Entwicklungsprozess sowie den aktuellen  Projektstand und dient als Kommunika tionsund Wissensschnittstelle, an der  die Stand-up-Meetings stattfinden. Am  Project-Board sind die User-Storys in der  linken Spalte der Priorität nach von oben  nach unten angebracht. Die zugehörigen  Tasks werden während einer Iteration entsprechend ihrem Bearbeitungszustand in  die Spalten «In Progress» und «Done» ver schoben (Kapitel 4.3). Prototyp Prototyping  Prototyping Prototyping ist ein methodisches Vor gehen, bei dem früh und meist in kurzen  Abständen Zwischenergebnisse (Prototy pen) erzeugt werden. Ein Prototyp ist ein  getestetes und lauffähiges Produkt, das  nicht vollumfänglich sein muss. Mit inkrementell wachsenden Teilfunktionalitäten,  die der Kunde erproben und nutzen kann,  entsteht so schrittweise ein Endprodukt.  In diesem Prozess erhält das Entwickler team früh und häufig wertvolles Feedback Glossar 206des Kunden und kann auf notwendige oder  sinnvolle Änderungen reagieren. Zudem  bleiben die Änderungen so klein und über schaubar (Kapitel 4.7). Refactoring Unter Refactoring versteht man das Über arbeiten des bisherigen Arbeitsstandes  des Quelltextes mit dem Ziel, diesen bes ser verständlich und leichter erweiterbar  zu machen, ohne dass sich seine Funk tion nach außen verändert. Nach dem  KISS-Prinzip wird der einfachste Entwurf  für die aktuelle Iteration gewählt und die  Struktur des Quelltextes später regelmä ßig überarbeitet. Das Refactoring findet in  einer Iteration immer dann statt, wenn neu  implementierte Tasks getestet worden sind  und die Software lauffähig ist. Als wichti ge Voraussetzung für das Gelingen eines  Refactorings gilt eine gute Testabdeckung.  So kann auf Änderungen während des Ent wicklungsprozesses reagiert werden, ohne  vorab aufwendig Geplantes zu verwerfen  (Kapitel 5.6).   Repository Digitale Werkzeuge können kollaboratives  Arbeiten unterstützen, indem sie das zeitgleiche Editieren, das Zusammenführen  verschiedener Bestandteile und eine Ver sionskontrolle ermöglichen. Die automa tische Versionierung macht den Entste hungsverlauf überblickbar und ermöglicht,  eine Datei auf eine ältere Version zurück zusetzen (Rollback). Das automatische  Zusammenführen (engl. merge) von Quell texten mit einer automatischen Konflikter kennung ist eine Arbeitserleichterung und  reduziert die Fehlerhäufigkeit (Kapitel 5.8). Respekt Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23Retrospektive Die Retrospektive ist ein Reflexionstreffen  der Projektbeteiligten am Ende einer Itera tion. Das Entwicklerteam hinterfragt hier bei Stärken und Schwächen seiner bishe rigen Arbeitsweise. Ziel ist es, konstruktiv  und zukunftsgerichtet Verbesserungsmög lichkeiten zu erkennen, Missstände zu beseitigen und Erfolge zu feiern. Die Organi sation einer Retrospektive wird durch das  Gliedern in Phasen (Rückblick, Auswahl  von Themen, Gewinnen subjektiver und  objektiver Einsichten sowie Beschließen  von Maßnahmen) und die Visualisierung  der Ergebnisse der Phasen unterstützt  (Kapitel 5.1). Review Im Review zeigt das Team dem Kunden die  umgesetzten User-Storys der letzten Ite ration und das Erreichte wird diskutiert.  Positives Feedback des Kunden ist moti vierend für das Entwicklerteam, negatives  Feedback wiederum ist wichtig, um Fehler  oder Schwächen frühzeitig zu erkennen  und darauf zu reagieren. Zudem spre chen das Entwicklerteam oder der Kunde  auch größere Probleme oder notwendige  Änderungen im Plan offen und ehrlich an  und überlegen sich gemeinsam Lösungen   (Kapitel 5.1). Rollen In professionellen agilen Projekten sind  vor allem drei im Scrum-Vorgehensmodell  definierte Rollen weithin bekannt, nämlich  der Product-Owner, das Entwicklerteam  und der Scrum-Master.  Der Product-Owner ist der Vertreter des  Kunden und interner Ansprechpartner für  das Entwicklerteam. Das Entwicklerteam entscheidet, wie es  die Kundenwünsche technisch umsetzt,  ermittelt den Zeitbedarf und kommuniziert Glossar  207diesen dem Kunden. Es arbeitet fokussiert  auf das Ziel der jeweiligen Iteration hin. Der Scrum-Master unterstützt das Team  und sorgt dafür, dass es möglichst un gestört und effektiv arbeiten kann. Dazu  achtet er ähnlich einem Schiedsrichter im  Sport darauf, dass das Team vereinbarte  Regeln einhält, moderiert die Meetings,  unterstützt gruppendynamische Prozesse,  beseitigt Hindernisse und sorgt für einen  guten Informationsfluss im Team und zum  Product-Owner. Scrum-Master Rollen Selbstorganisation Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23 Sprint In Anlehnung an das Scrum-Vorgehens modell werden Iterationen auch als Sprint  bezeichnet. Stand-up-Meeting Ein Stand-up-Meeting ist eine kurze, im  Allgemeinen täglich stattfindende Bespre chung, in der sich alle Teammitglieder über  den aktuellen Projektstand austauschen.  Das Stand-up-Meeting soll so kurz sein,  dass es sich nicht lohnt, dafür eine Sitz gelegenheit zu suchen. Diskussionen über  einzelne Themen oder Probleme werden,  falls sie nötig sind, im Anschluss geführt  (Kapitel 4.5). Story-Points Story-Points werden verwendet, um die  Komplexität von User-Storys abzuschät zen. Dieses Abschätzen erfolgt verglei chend: Zunächst wählt das Team dazu  eine User-Story aus und legt für sie einver nehmlich eine Anzahl an Story-Points fest. Im Folgenden schätzt das Team die Kom plexität weiterer User-Storys durch Ver gleiche mit bereits geschätzten User-Storys ab. Student-Story Die Student-Story wurde von Lehrkräften  für die Agile Schule eingeführt und stellt  eine Lernaufgabe dar. Student-Storys er möglichen es, neben den User-Storys für  die Weiterentwicklung des Prototyps auch  notwendige Lernaktivitäten transparent zu  machen und beim Planen einer Iteration zu  berücksichtigen. Student-Storys können  von den Schülerinnen und Schülern eines  Teams geschrieben werden. Ebenso kön nen sie von der Lehrkraft vorgegeben wer den, ggf. auch zusammen mit dem nötigen  Material oder den Tasks, also den zu be arbeitenden Teilaufgaben. Student-Storys  werden ebenso wie User-Storys priorisiert  und am Project-Board visualisiert (Kapitel  4.1). Task Tasks sind kleine, aus Entwicklersicht beschriebene Aufgaben, die zu bearbeiten  sind, um eine User-Story umzusetzen. Sie  werden zu Beginn jeder Iteration für die  ausgewählten User-Storys vom Team ge plant. Ein Task sollte so klein sein, dass  er in überschaubarer Zeit (einige Stunden)  erledigt werden kann (Kapitel 4.4). Test-Driven Development (TDD) Die testgetriebene Entwicklung (2003 von  Kent Beck vorgeschlagen) ist eine meist in  der agilen Softwareentwicklung verwende te Vorgehensweise, bei der zunächst Tests  für das geforderte Verhalten geschrieben  werden. Danach wird so lange implemen tiert, bis keiner der Tests mehr fehlschlägt.Glossar 208Testen Beim Testen wird anhand konkreter Bei spiele systematisch überprüft, ob die  Software die festgelegten Anforderungen  erfüllt. Während bei klassischen Vorge hensweisen nur am Ende des Projekts und  dann meist unter Zeitdruck getestet wird,  wird in agilen Projekten in jeder Iteration  der neue Prototyp getestet (Kapitel 5.3). Timeboxing Timeboxing bezeichnet die Vergabe von  festen Zeitrahmen für Vorgänge wie Mee tings oder Iterationen, die hierdurch effizienter werden. Es vereinfacht die zeitliche  Planung der Vorgänge und fördert meh rere  Agile Werte, z.B. Einfachheit, Fokus und  Zusicherung. In der Agilen Schule muss  eine Balance zwischen Zeitdruck und  Raum für kreatives Arbeiten und Lernprozesse gefunden werden (Kapitel 5.2). Transparenz Siehe Abb. 2.3 «Werte in agilen Projekten»  S. 23 Truck-Factor Der Truck-Factor geht auf Kent Beck zu rück und gibt die Wahrscheinlichkeit an,  mit der ein Projekt scheitert, wenn eine  Person (spontan) ausfällt, die spezielles  Wissen oder spezielle Fähigkeiten hat, die  für das Projekt unverzichtbar sind.  User-Story Eine User-Story beschreibt eine Anforde rung an das Softwaresystem aus Sicht des  Kunden. Sie besteht aus wenigen Sätzen  und ist in Alltagssprache formuliert. Jede  User-Story ist für den Kunden nützlich und  nur so umfangreich, dass das Entwickler team mehrere User-Storys in einer Iteration umsetzen kann (Kapitel 4.2).Velocity  Die Velocity (engl. für Geschwindigkeit)  gibt an, wie viele Aufgaben ein Team in einem Zeitintervall (z.B. Iteration) umsetzen  kann. Ein neu zusammengestelltes Team  muss seine Velocity zunächst in einer Ite ration ermitteln, ehe es in den folgenden  Iterationen dem Kunden gegenüber ver lässliche Zusagen (Commitments) machen  kann.