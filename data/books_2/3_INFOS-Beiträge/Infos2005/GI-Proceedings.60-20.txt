- 243 -Spielerisches Erlernen der Programmierung mit dem  Java-Hamster -Modell Dietrich BolesDepa rtment für Informatik, A bteilun gInformationssy stem e Universität Oldenburg, Fakultät II Esche rweg 2 D-26121 Oldenburgboles@inf ormatik .uni-oldenburg.de Abstract:  Das Java-Ham ster-Modell ist ein spezielles didaktisches Modell zum spielerischen Erlernen der Programmi erung. Programmiera nfänger lernen die grundl egend en Programmierkonzepte und den Programmentwu rf kennen, indem sie so genannte Hamster-Programme entwickel n, mit denen sie virtuelle Hamsterdurch virtuelle Landschaf ten steuern und dabei bestimmte Aufgaben lösen  lassen. Die Prog rammierkonzept e werden schrittw eise eingeführt und anhand vieler Bei-spiele motiviertund demonstrier t. Das Mode ll besteht aktuell aus fünf Teilen , die neben der Vermittlung der Konzepte der imperat iven, objektorien tierten und paral-lelen Programmierung in grundlegende Algorithmen und Datenstrukturen und indie objektor ientierte Modellierun g einführ en. 1  Einleitun gHeftig diskutiert wird immer wied er die Frage, ob die Programmierung  noch zur Infor-matik-Grundausbildung gehören soll. Für fast alles gibtes heutzutage berei tsfertigeComputer-Anwendungen. Reicht es nichtaus, den Umgang mit diesen zu erlernen, alszu wissen, wie sie intern funktionieren?Probleme einer solchen anwendungsorientiertenEinführung in die Informatik sinddie Kurzlebigkeit heutiger Anwendungen und die entstehe nde Abhä ngigkeit von den Produkten bzw. Anbietern. Gefra gt ist daher eher Konzeptwissen (wie funktionieren  Softwaresy steme, wie werd en sie erstellt), das letzt-endlich denTransfer auf konkrete Anwendungen erlaubt. Das Erlernen von Programmiersprachen und die Entwicklung von Programme n ist aller-dings nicht trivial. Sicher gibt es Schüler, die sehr schnell damit zurecht kommen. Viele haben aber Problememit der Kom plexität der Them atik und sind schnell frustriert. DasHam ster-Mo dell, das in diesem Artik el vorgestellt wird, ist genau für diese Zielg ruppe entwickelt worden. Es ist ein spezielles didaktisches Mod ell, das Prog rammieranfängern einen spielerischen Zugang zu der doch eher technischen Welt der Programmierung bietet. Programmieranfä nger erlernen die grundlegenden Konzepte der Programmierungsowi e den Programmentwicklungsprozess, indem sie virtuelle Hamster durch eine virtu-elle Lands chaft steuern und dabei bestimmte Au fgaben lösen lassen. Das Ham ster-Mo dell ist aktuell in insgesamt fünf Teile gegliedert, die nebender Ver-mittlung der Konzeptederimperat iven,objektorientierten und parallelen Program-mierung in grundlegende Algorithmen und Datenstrukturen und indie objektorientierte- 244 -Modellierung einführen. Das Ham ster-Mo dell reduziert die Komplexität eines Com-puters auf einen minimalen Satz von Befeh len, die den Ham stern erteilt werd en können. Die Programmierkonzepte werd en schrittweise und aufein ander aufbauen d eingeführtund jeweils durch zahlreiche Beispiele demonstriert. Anhand vieler Aufgaben mit ein-fach zu verstehenden Aufgabenstellungen können die Programmieranfä nger selbstüber-prüfen, ob sieden Stoff nicht nur verstanden habe n, sondern auchpraktisch umsetzen können. Für die Bearbeitung der Aufga ben existiert eine einfach zu bedienende Pro-gram mierumgebung, die die Erstellung undden Test vonProgrammen unterstützt undProgrammausführungen, d. h. die Aktionen der Ham ster, visuell auf dem Bildschirm darstellt. Mit diesen Eigenschaften  trägt das Ham ster-Mo dell Empfehlungen von Didak-tikern, wie der Einstieg in die Programmierung erfolgen könnte,voll und ganzRechnung[Br97, BOM99]. Prinzipiell ist das Ham ster-Mo dell programmi ersprac henunabhängig. Zum praktischen Umgang mitdem Modell wurde jedoch bewusstdie Programmiersprac he Java als Grundlage gewähl t. Java ist eine moderne Programmiersprac he, die sich in den letztenJahre n sowohl im Ausbildungsbereich als auch im indus triellen Umfeld immer mehr durchgesetzt hat. In den folgenden Abschnitten werdendieeinzelnen Komponenten  des Java-Ham ster-Modells kurz vorgestellt. Die Ausführungen orientieren  sich dabei am didaktischen Auf-bau des Mod ells. Zum Schluss erfolgt ein Verg leich mit ähnlichen Ansätzen und es werden Erfahrungen beim Einsat z des Mode lls geschildert.Weitere Informationen fin-densichauf der Websi te www.java-hamster-modell.de. 2  Das Ja va-Ha mster -Mode ll Die Grundidee des Hamster-Modells ist ausgesprochen einfach: Programmierer müssenvirtuelle Hamster durch eine vorgegebene virtuelle Landsc haft steuern und sie gegebeneAufgabe n lösen lassen. Dazu müssen sie entspreche nde Programme - Hamster-Programme genannt - in der Hamster- Sprache entwick eln.1Die Landschaft, in der die Hamster leben, wird durch eine gekachel te Ebene repräsen-tiert. Die Größe der Landschaft, d.h. die Anza hlder Kacheln, ist dabei flexibel. Aufeinzelnen Kacheln können ein oder mehrere Körner liegen oder sie können durch Mau-ern blockiert sein. Im Terri torium befindet sich immer mindest ens ein Ham ster, auchStandard-Hamster  genannt.2 Hamster können in vierunterschiedlichen Blickrichtungen(Nord, Süd, West , Ost) auf nicht blockierten Kachel n stehen . Sie können prinzipiellbeliebig viele Körner imMaul haben. Abbildung 1 zeigt ein typisches Ham ster-Terri torium inklusive Legende.  1 Die Ham ster-Sprache ist fast deckungsgleich mit der Programmiersprache Java.  Es gibt aus didaktischen Gründen lediglich einen kleinen Unte rschied: Das Hauptpr ogramm(main-Prozedur )muss nicht inner halb einerKlasse definiert werden. 2 Im objektor ientierten Modell können weitere Hamster erzeugt werden.- 245 -Symbol Bede utungHamster (Blickrichtung Ost)Hamster (BlickrichtungSüd)Hamster (Blickrichtung West)Hamster (Blickrichtung Nord)Kachel mit MauerKachel mit KörnernAbbildung 1: Hamster-Territorium und Legende Mit Hilfe bestim mter Befehle kann ein Programmierer Ham ster durch  ein gegebene sHam ster-Territ orium steuern:•vor:H üpfe eine Kachel in Blickrichtung nachvorne. •linksUm:D rehe dichum90 Grad nach links. •nimm:N imm von der Kachel , auf der dugerade stehst, ein Korn auf. •gib:L ege auf der Kachel , auf der du gerade stehst, ein Korn aus deinem M aul ab. Probleme können dabei auftreten, wenn ein Ham ster durch den vor-B efehl  gegen eineMauer renntoder versucht, ein Kornvon einer leeren Kachel zu fressen oder ein Kornabzul egen, obwohl er gar keins im Maul hat. Um derartig e Laufzeitfeh ler verhindernzu können, existieren die dreiTestbefehle vornFrei, korn Da u nd maulLeer. 3  Der Hamster-Simulator Programmieren lernt man nicht durch Lesen, sondern durch Üben. Zu diesem Zweck gibt es den so gena nnten Ham ster-Simulator. Er stellt eine Reih e von Prog ramm ierwerk-zeuge n zur Verfügung:einenEditor zumEingeben und Verwalten vonHamster-Pro-gram men, einen Compiler zum Überset zen von Ham ster-Program men, einen Terri-toriumsgestalter zum Gestalten  undVerwa lten vonHamster-Territorien, einen Inter-preter zum Ausfü hren von Hamster-Programme n und einen Debugger zum Testen von Ham ster-Programmen.  Der Ham ster-Sim ulator wurde funktionalund bedienungsmäßig bewusstan pro-fession elle Entwicklungsumgebungenfür Java(z. B. Eclipse) angelehnt,um einen späte-ren Umstieg auf diese zu  erleichtern. Abbildung 2 zeigt den Simulator inAktion. - 246 -Abbildung 2: Der Hamster-Simulator 4  Imperativ e Programmie rung spielen d gelernt Im ersten  Teil des Java-Ham ster-Mod ells werdendie wesentlich en Konzepte der impera-tiven Programmieru ng schrittweise eingeführt [Bo02]. Dabei existiert lediglich ein ein-zelner Ham ster. Anweisungen und Programme: In der imperativenProgrammierung bestehenPro-gram me aus Anweisungen, die in der angegebe nen Reihenfolge hintereinander ausge-führt werden. Das folgende Ham ster-Programm löst das Problem, den Standa rd-Hamster in dem in Abbildung 1 skizzierten  Territorium zwei Körner fressen zu lassen.      void main() {        vor(); vor(); nimm(); // erstes Korn        linksUm();        vor(); vor(); nimm(); // zweites Korn      }  Proz eduren und boolesche Funktionen: Mit Hilfe von Prozeduren können dem Hams-ter neue Befehle und mit Hilfe von booleschen Funktionen neue Testbefehle beigebrachtwerden.  Kontrollstruk turen : Bis hierhin sind die Territorien  zu dengestellten Hamster-Auf-gabe n immer fest vorgegeben. Durch Einführung von Kontrollstrukturen (if-, while - und do-An weisungen) wird es nun möglich, Programme für mehrere  Hamster-Terri-- 247 -torien mit bestimmten Charakteristik en zu entwick eln; zumBeispiel: Der Ham ster soll ineinem beliebigen recht eckigen Territorium ohne innere M auern alleKörner sammeln.  Program mentwurf: Gegeben ist ein Problem, wie entwirftman ein korrektes und ver-ständliches Programm, das dieses Problemlöst? Das ist die zentrale Frage, der an-schließendnachgegangen wird. Vorgestellt wird der Top-Down -Entwurf (prozedurale Zerlegung), bei dem das Problem sukzessi ve inweniger komplexe Teilprobleme zerlegt wird, die dannjewei ls inüberschaubaren Prozedu renbzw. Funktionen gelöst werden.  Variablen und Ausdrücke: Die meisten Lehr bücherfür Programmiersprachen begin-nen mit Typen,Variablen, Operationen und Ausdrücken. Viele Programmieranfänger werden aber durch die Kom plexität dieses Themengebi etes und seine vielen syntak-tischen Feinheiten berei ts abgeschreckt. Beim Java-Ham ster-M odell erfolgt die Einfüh-rung erst an dieser Stelle. Über Variable n bekommt der Hamster ein Gedächt nis und erlernt rechnen. Typen sind im Java-Hamster-Modell zunäc hst auf die Typen int ( Zah-len) und boolean ( Wahrheit swerte )beschränkt.  Verallge mein erung des Funktionskonzeptes :Nachdem der Typ-Begriff behandeltwurde, kann nun das Funktionskonzept verallgemeinert werden. Funktionen berechnenund liefern Werte eines bestimmt en Typs. Mit Hilfe vonParam etern lässt sich ihre Fle-xibilität erhöhen.Rekursi on: Durch das visuelle Feedback sindHamster-Pro gramm e außerordentlich gutdafür geeignet, das Prinzip rekursiver Funktionen zu veranschaulichen. Die Kornsucheeines Ham sters in einem Labyrinth ist beispielsweise eine komplexe Aufgabe, die sichrelativ  einfach rekursiv lösen lässt. 5  Objektorientierte Progra mmierung spielen d gelernt Aufbauend auf den imperat iven Sprachkonzepten werden im zweiten Teil des Java-Ham ster-Modells die grundlegenden Konzepte der objektorientierten Programmierungvorgestellt [BB0 4]. Kenn zeichen dieses objektorien tierten  Hamster-Mod ells ist, dass mehrere Ham ster erzeugt und durch das Territorium gesteuert  werden können, um ge-meinsam gege bene  Ham ster-Aufgaben zu lösen. Hams ter(obje kte): Objekte sind Instanzen so gena nnter Klassen . Im objektorien tierten Ham ster-Mo dell existiert eine vordefinierte Klasse Hamster, die die vierHam ster-Be-fehle und die drei Hamster-Testbefehle als Methoden definiert. Von der Klasse Hams-ter k önnen Ham ster(-O bjekte) erzeugt werden. Objektvariablen , die Refere nzen aufHam ster-Objekte speichern, entsprechenNamen für die Hamster. Im folgenden objekt-orientierten  Hamster-Pro gramm wird auf der Kachel in Reihe 1 und Spalte 2mit Blick-richtungOsten und 3 Körnern im Maul ein Ham ster namens paul erzeugt, der an-schließendbis zur nächsten Mauer läuft und dabei - fallsvorhanden -auf jederKachelein Korn frisst. - 248 -void main() {        Hamster paul = new Hamster(1, 2, Hamster.OST, 3);       while (paul.vornFrei()) {         paul.vor();          if (paul.kornDa()) paul.nimm();       }     } Vererbung und Klasse ndefi nition: Im objektorien tierten Ham ster-Mo dell lässt sich der Befehlsvorratder Ham ster durch das Konzept der Vererbung erweitern, indem von der Klasse Hamster n eue Klassen abgeleitet werden. Diese erben automatisch alle Metho-den der Klasse Hamster u nd könnenweitere definieren. Arrays : Array s, die eigentlich zur imperativenProgrammierun ggehören, sind in Javaals Obje kte realisiert und werden dahe r - zusammen mit der for-S chleife - erst im ob-jektorientierten Hamster-Modell eingeführt.Arrays erlauben zum einen das Anlegen vonHam ster-Kolonnen und zum anderen eine Erwei terung des Ham ster-Gedächtnisses, umbeispielsweise ein Abbild des Ham ster-Terri toriums (Matrix mit Körne rn und Mauern)abzuspeic hern.  Ein- und Ausgabe: UmHam ster-Programme noch flexibler gestalten zu können, wirdder Befehlsvorrat der Ham ster um Lese- und Schreibbefehle sowie den Typ String e r-weitert. Damit können die Ham ster nun zur Laufzeit mit dem Benutzer eines Programms kommunizieren. Im Hamster-Simulator wird die Kommunikation über Dialogboxen rea-lisiert.  Inter faces, Polymor phie und dynamische s Binden: Mit Hilfe von Interfaces in Zu-sammenhan g mit Polymorphie und dem dynamischen Binden von Methoden lassen sichgenerische Framewor ks entwickeln. Das Prinzip und der Nutzen dieses Konzeptes lässt sich sehr schönanhand von Spiele-Frameworks demonstrieren,bei denen die Hamstermitverschi edenenSpielstrategien gegeneinander oder gegen Menschen spielen. Fehlerbehandlung mit Exce ptions: Anstattmithilfe der drei vordefinierten Testbefehledie Ham ster vor ihrem Tod zu bewahren, wenn sie beispielsweise gegen eine Mauer ren-nen, können auch Exceptions abgefa ngen werden, die die entsprec henden Grundbefe hleliefern. Zugriffsrechte und Pakete: Unter dem Motto „Die Hamster haben auch eine Pri-vatsphäre“ werden anschließend Zugriffsrechte und das Paket -Konzept eingeführt. Zu-griffsrechteregulieren den Zugriff auf Attribute und Methoden einer Klasse. Pakete die-nen dazu, Klassen zu Klassenbibliotheken zusammen zufassen und anderen Program-mierern zur Verfügung zu stellen. - 249 -6  Parallele Programmierung spielend gelernt Ein Problem von Hamster-Programmen mit mehreren zusammenarbei tenden Ham sternist, dass die Lösu ngen zum Teil künstlich wirken. Der Grun d hierfür liegt darin,dass der Programmierer die Hamster explizit steuernund koordinieren  muss. Im dritten Teil des Java- Hamster-Modells3 werden die Ham ster selbstständi g und müssen sich selbst koor-dinieren. Erreichtwird dies durch Nutzung des Thread-Konzeptes von Java, mitdempa-rallele Programme entwickelt werdenkönnen .Threads : Die vordefinie rte Klasse Hamster ist von der Klasse Thread der Java-Klas-senbibliothek abgeleitet und ermöglicht somit auf einfache Art undWeise die Defin itionund Erzeugung selbstständiger Hamster.  Komm unikati on zwischen Hams tern: Um gemeinsam gegebene Probleme zu lösen,müssen selbstständige Ham ster miteinande r kommunizieren, d. h. Daten austauschenkönnen. Da sich Java-Threads einen virtuellen Adressra umteilen, kann dies über ge-meinsam zugreifbare Objektegeschehe n.Mehrseiti ge Synchronisation: Die Nutzunggemeinsamer Ressourcendurch mehrereThreads kann zu unerwarteten Zuständen bzw. Fehlern führen. Führt beispielsweise einselbstständiger Ham ster die Anweisung if (kornDa()) nimm(); aus, kann es zueinem Fehler kommen, da bei einem Thread- Wechsel nach dem Testbefehl  später evtl.gar kein Korn mehr auf der Kachel  liegt. Zur Vermeidung derartiger Probleme ist es in Java möglich, Aufrufe von Methodenmittels dersynchronized -Anweisung  zu syn-chronisieren.  Einseitige Synchronisation :Wenn mehrere selbstständige Ham ster gemeinsam einProblem lösen, müssen sie manchm al während ihrer Aktionen auf andere Ham ster war-ten,bis eine bestimmte Bedingung erfüllt ist und sie vondiesen darüber informiert wer-den. Hierzu  stellt Java allen Objekten die Meth oden wait und notify z ur Verfügung.  Deadlock s: Die Ham ster könnten „verhungern“, wenn sie alle auf die Erfüllung be-stimmter Bedingungen warten und keiner mehr aktiv ist. Solche Situationen werdenDeadlocksgenannt. Sie gilt es natürlich zu verm eiden bzw. zu erkennen.  Realisierun g und Visu alisierung klassis cher Synchronisati onsprobleme: Die Kon-zepteder parallelen Programmierung werdenanhand zahlreicher klassischer Syn-chronisationsprobleme, die auf die Hamster-Welt übertragen werd en, demonstriert undvisualisiert. Beisp ielsweise sitzen  beim„Hamster-Philos ophen-P roblem“ mehrere Philo-sophen-Hamster um einen Tisch und teilen sich mit ihren Nachbarndie Gabeln, die durch Körner repräsentiert werden. Zum Essen werden immer zwei  Gabeln benötigt.Umnicht zuverhungern, gilt es, sich mit seinenNachb arn abzusti mmen .3 Dietrich Boles: Parallele Programmierung spielend gelernt mit dem Java-Ham ster-Modell.  Online- Buch unterwww.java -hamster-modell.de - 250 -7  Algorithmen und Datenstrukturen spielend gelernt Die Meinungen, inwieweit heutzutage noch klassische Algorithmen und Daten-strukturen, wie Sortier- , Such-, Baum -, Graphen-, Kom pressions- oderMustererken-nungsalgo rithmen ,in der Programmierau sbildung vorgestellt und analysiert werden sollen, gehe n auseinander. Wir halten dies jedoch für sehr wichtig. Sicher gibt es heut-zutage Klassenbibliotheken, in denen alle bedeutenden Algorithmen und Datenstruk-turen fertig implementiert zur Verfü gunggestellt werd en. Aber durch das Kennenlernen der zugrunde liegenden Konzepte können Program mieranfänge r Kenntnisse und Erfah-rungen beimAlgorithmenentwurf sammeln und diese nutzen, wenn sie selbst Algorith-men zur Lösungbestimmter Pro bleme entwerfen müssen.An diese r Stelle setzen wir im vierten Teil des Java-Hamster-Mod ells4an. Wir nutze ndas Mod ell und insbesond ere seine Visu alisierun g, d. h. das Ham ster-Territoriu m unddie Aktionen der Hamster, umm it entsprechenden Ham ster-Programmen die Konzepteund Funktionswei sen wichtiger Algorithmen und Datenstrukturenzu demonstrieren.Das Java-Hamster-M odellwird also zur sogena nntenAlgorithmen visua lisieru ng oder Algo -rithmenanimation eingesetzt. 8  Objektorientierte Modellierung spielend gelernt Zum Vermitte ln bzw. Erlern ender wich tigsten Konzepte der imperativen, objekt-orientierten und parallelen Programmierung ist das Java- Ham ster-M odell hervorragendgeeignet. Bei der objektorientierten Softwareent wicklung mit dem der Program mierungvor geschalteten Phasender Analyse unddem Entwurf stößt es jedoch an seine Grenzen.Hauptgrundhierfür ist, dassHam ster-Probleme nicht wirklich komplex genug sind, umdie entsprechenden Vorgehensweisen und Konzepte an geeigneten Beispielen demons-trieren zukönnen.Nich tsdestotrotz besitzt die objektorien tierte Softwareen twick lung bzw. Modellierungheutzutage eine immense Bedeutungund sollte daher bereits frühzeitig nebender eigent-lichen Programmi erung erlern t werden, umdie Gefahr einer Hacker-Men talität5 beiden Programmieranfä ngern zu minimieren. Diesem  Aspekt versuchen wir im fünft en Teil des Java-Hamster-Modells6 gerecht zuwerden. Wir haben nämlich eine Problemklasse entdeckt, die nicht zu umfangreich, aberkomplex genug und sehr motivierend  für eine ordentliche objektorien tierte Modellieru ngist, nämlich die Entwicklung von Spielprogrammen, wie Schac h, Reversi oder 4-Ge-winn t (sieh e auch[Bo0 3]). Spielfeld  ist hierbei jeweils das Ham ster-Territo rium, Hams-ter oder Körner repräse ntieren die Spielfiguren. Spieler sind entwede r Menschen, denenjewei ls ein Hamster zuge ordnet ist, der f ür sie Spi elzüge ausführt, oder Hamster von spe -4 Dietrich Boles: Algor ithmen und Datenstr uktur en spielend gelernt mit dem Java- Hamster-Modell. Online-Buch  unter www.j ava-ha mster-modell.de 5 direkt eintippen,  ohne vorher zu konzipier en 6 Dietrich Boles:  Objektorientierte Modellierung spiele nd gelernt mit demJava-Ha mster-Mo dell. Online-Buch unter www. java-ha mster-modell.de - 251 -ziellen  Hamster-Klassen, die intellig ente Spielstrateg ien implementieren . Anhanddieser Problem klasse zeigen wir, wie vor der eigentlichen Program mierung eine ordentlicheobjektorientierte Anal yse und ein objektorientierter Entwurf durchgeführtwerden. Grundlag e ist dabei ein allgemein  gültiges Fram ework für 2-Person en/Ham ster-Strate-giespiele, das bei der Umsetzu ng der jeweiligen Spiele konkretisiert werd en muss. Ausgesprochen wichtig beider objektorientierten Softwareentwicklung sind so genannte Entwurfsmuster. Ein Entwurfsmuster besch reibt eine in der Praxisbewährte, generische Lösung für ein häufig wiederkehrendes Entwurfsproble m und stellt damit eine wieder verw endbare Vorlage  zur Problem lösung dar. Die gängigstenEntwurfsmuster (AbstrakteFabrik, Beobachter, ...) lassen sich ganz hervorragend an dem Hamster-Spiele-Beispieldemonstrieren. Zusät zlich zeigen wir ihren Einsatz und ihren Nutzen aber auchnoch anweiteren kleineren Ham ster-Beisp ielen .9  Andere Programmierlernumgeb ungen Die Entwicklung von speziellen Programmiersprac hen und Programmierum gebun gen zum Erlernen der Programmierungreicht weitzurüc k. Ambekanntesten sind die Schild-kröten-Graphik mit LOGO [Pa80] und „Karel the Robot“ [PRS 95]. Kare l war auchVor-bild für das Hamster-Modell, das seinen Ursprung bereits in den 1980er Jahren hatte[Am87]. Grundlage war damalsdie Programmiersprac he ELAN. Auf diesen Mod ellenaufbauend sind inden letzten Jahren eine Reihe von Nachfolgern entwickelt worden.Einen schönen Überblick überderartige Programmierlernumgebun gen enthält [RNH04]. In diesem  Buch wird mit „Kara dem Marien käfer“ auch ein alternativer Ansatz vor-gestellt, bei dem Prog ramme nicht in einer textuellen  Programmiersp rache verfasst, sondern graphisch als endliche Automaten erstellt werd en. Die Hauptvorteile aller dieser Modelle undLernumgebungen sind, dass die Befehlssätze stark eingeschränktsind und sich an beka nnten (spielerischen) Dingen der realen Weltund nicht an technischen Feinheiten von Computern orientieren.Weiterhinwerden dieAuswirku ngen der Befeh le mit graphischenMitteln auf dem Bildschirmveranschaulicht,ohne dass sich die Programmieranfä nger mit der Kom plexität der Programmie rung gra-phischer Benutzungsoberflächen herumschlagen müssen. An dieser Stelle soll und kann keine Bewertung erfolgen, welche dieser Programmier-lernumgebu ngen die beste ist. Jede hat ihre ganz spezi ellen didaktischen Merkmale undVorteile. Die wesen tlichenVorteile des Java-Ham ster-Mo dells sind sein Umfang(impe-rative, objektorientierte undparallele Programmieru ng), der in diesem Artik el vorge-stellte didaktische Aufb au sowie die ausführlich en Begleitbücher mit vielen Beispielen und Aufgaben. Als weiteren Vorteil sehen wir auchdie Wahlvon Java als zugrunde lie-gende Progra mmiersprac he. Programmieran fänger lernen mit demHam ster-Mo dellgleichzeitig  diese moderne Programmiersp rache kennen und nebendem Lösen vonHamster-Prob lemen könnenProgrammieran fänger auchbereits frühzeitig  „echte“ Prob-lememit Java lösen.- 252 -10  Erfahrungen und F azit Das Java-Hamster -Modell wird seit nunmehr9 Jahrenbei der Programmier ausbildungvon Studienanfängern an der Universität Oldenburg eingesetzt. Durch die dabeigewon-nene n Erfahrungen hat es sich inkrementell weiterentwickelt. Ob sein Einsatz den Lern-erfolg der Studierenden tatsächlich verbessert hat, ist zwar kaum messbar.  Die Meinun-gen und Rückmeldungen der Studierenden als auch  vieler anderer Nutzer sindjedochfast ausnahmslos positiv. Dabei sei jedoch  anzumerken, dass das Hamster-Mod ell insbesondere für solche Schü ler und Studierenden gedacht  ist, die sich mit dem Erlernen der Programmierung schwertun. Denjenigen Programmieranfängern, die keine Probleme haben, wird es durch die ge-ringe Komplexität der Aufgaben schnell langweilig. Sie wollengrößere Anwendu ngen mit graphischen Oberflächen oder Java-Applets entwickeln. Aus diesem Grund und derErfahrung,dass auchdie erstgenannte Gruppe mal echte und nicht nurHamster-Proble-me lösenwill, sollte das Java-Ham ster-Mo dell nicht ausschließlich, sondernnur motivie-rendund begleitend zur „richtigen“ Java-Program mierung  eingeset ztwerden. Literaturverzeichnis [Am87 ]A mbros, W.: Der Hamster: Progr ammi eren in einer Modellwelt. Metzler, 1987. [BB04] B oles, D.; Boles, C.: Obje ktorientierte Programmierung spielend gelernt mit dem Java-Hamster-Modell. Teubner ,2004. [Bo02] Boles, D.: Progr ammieren spielend gelern t mit dem Java-Hamst er-Modell. Teubn er, 2. Auflage, 2002. [Bo03] B oles, D.: Progr ammierkurse für Anfänger  und Fortgeschritt ene. In K. Dittr ich,W.König, A. Ober weis, K. Rannen berg und W. Wahlster, Hrsg., Informatik 2003, P-35 ofLecture Notes in Informatics (LNI) - Proceedings, Köllen Druck+Ve rlag GmBH, Bonn, 2003;  S. 45 - 49. [BOM99] du Boulay , B.; O'Shea, T.; Monk, J.: The black box inside the glass box: Presentingcomputing concepts to novices. Intern ational Journal of Human-Computer Studies, 51(2), 1999; S. 265 – 277. [Br97] B rusilovsk y, P. et. all.: Mini-lan guage s: A way to learn programming principles. Edu-cation and Information Technolo gies, 2(1), 1997; S. 65-83. [Pa80]  P apert, S.: Mindstorms, children, comput ers and powe rful ideas. Basic Books, New York, 1980. [PRS95 ] Pattis, R.; Robert, J.; Stehlik , M.: Karelthe Robot : A Gent le Intro duction  to the Art ofProgramming.  Wiley, 1995. [RNH04] Reichert,R.;Nievergelt , J.; Hartmann,W .: Program mieren mit Kara: Ein spielerischer Zugang zur Informatik. Spring er, 2004. - 243 -Spielerisches Erlernen der Programmierung mit dem   Java-Hamster -Modell  Dietrich Boles Depa rtment für Informatik, A bteilun gInformationssy stem e  Universität Oldenburg, Fakultät II  Esche rweg 2  D-26121 Oldenburg boles@inf ormatik .uni-oldenburg.de  Abstract:  Das Java-Ham ster-Modell ist ein spezielles didaktisches Modell zum  spielerischen Erlernen der Programmi erung. Programmiera nfänger lernen die  grundl egend en Programmierkonzepte und den Programmentwu rf kennen, indem  sie so genannte Hamster-Programme entwickel n, mit denen sie virtuelle Hamster durch virtuelle Landschaf ten steuern und dabei bestimmte Aufgaben lösen  lassen.  Die Prog rammierkonzept e werden schrittw eise eingeführt und anhand vieler Bei- spiele motiviertund demonstrier t. Das Mode ll besteht aktuell aus fünf Teilen , die  neben der Vermittlung der Konzepte der imperat iven, objektorien tierten und paral- lelen Programmierung in grundlegende Algorithmen und Datenstrukturen und in die objektor ientierte Modellierun g einführ en.  1  Einleitun g Heftig diskutiert wird immer wied er die Frage, ob die Programmierung  noch zur Infor- matik-Grundausbildung gehören soll. Für fast alles gibtes heutzutage berei tsfertige Computer-Anwendungen. Reicht es nichtaus, den Umgang mit diesen zu erlernen, als zu wissen, wie sie intern funktionieren?Probleme einer solchen anwendungsorientierten Einführung in die Informatik sinddie Kurzlebigkeit heutiger Anwendungen und die  entstehe nde Abhä ngigkeit von den Produkten bzw. Anbietern. Gefra gt ist daher eher  Konzeptwissen (wie funktionieren  Softwaresy steme, wie werd en sie erstellt), das letzt- endlich denTransfer auf konkrete Anwendungen erlaubt.  Das Erlernen von Programmiersprachen und die Entwicklung von Programme n ist aller- dings nicht trivial. Sicher gibt es Schüler, die sehr schnell damit zurecht kommen. Viele  haben aber Problememit der Kom plexität der Them atik und sind schnell frustriert. Das Ham ster-Mo dell, das in diesem Artik el vorgestellt wird, ist genau für diese Zielg ruppe  entwickelt worden. Es ist ein spezielles didaktisches Mod ell, das Prog rammieranfängern  einen spielerischen Zugang zu der doch eher technischen Welt der Programmierung  bietet. Programmieranfä nger erlernen die grundlegenden Konzepte der Programmierung sowi e den Programmentwicklungsprozess, indem sie virtuelle Hamster durch eine virtu- elle Lands chaft steuern und dabei bestimmte Au fgaben lösen lassen.  Das Ham ster-Mo dell ist aktuell in insgesamt fünf Teile gegliedert, die nebender Ver- mittlung der Konzeptederimperat iven,objektorientierten und parallelen Program- mierung in grundlegende Algorithmen und Datenstrukturen und indie objektorientierte- 244 -Modellierung einführen. Das Ham ster-Mo dell reduziert die Komplexität eines Com- puters auf einen minimalen Satz von Befeh len, die den Ham stern erteilt werd en können.  Die Programmierkonzepte werd en schrittweise und aufein ander aufbauen d eingeführt und jeweils durch zahlreiche Beispiele demonstriert. Anhand vieler Aufgaben mit ein- fach zu verstehenden Aufgabenstellungen können die Programmieranfä nger selbstüber- prüfen, ob sieden Stoff nicht nur verstanden habe n, sondern auchpraktisch umsetzen  können. Für die Bearbeitung der Aufga ben existiert eine einfach zu bedienende Pro- gram mierumgebung, die die Erstellung undden Test vonProgrammen unterstützt und Programmausführungen, d. h. die Aktionen der Ham ster, visuell auf dem Bildschirm  darstellt. Mit diesen Eigenschaften  trägt das Ham ster-Mo dell Empfehlungen von Didak- tikern, wie der Einstieg in die Programmierung erfolgen könnte,voll und ganzRechnung [Br97, BOM99].  Prinzipiell ist das Ham ster-Mo dell programmi ersprac henunabhängig. Zum praktischen  Umgang mitdem Modell wurde jedoch bewusstdie Programmiersprac he Java als  Grundlage gewähl t. Java ist eine moderne Programmiersprac he, die sich in den letzten Jahre n sowohl im Ausbildungsbereich als auch im indus triellen Umfeld immer mehr  durchgesetzt hat.  In den folgenden Abschnitten werdendieeinzelnen Komponenten  des Java-Ham ster- Modells kurz vorgestellt. Die Ausführungen orientieren  sich dabei am didaktischen Auf- bau des Mod ells. Zum Schluss erfolgt ein Verg leich mit ähnlichen Ansätzen und es  werden Erfahrungen beim Einsat z des Mode lls geschildert.Weitere Informationen fin- densichauf der Websi te www.java-hamster-modell.de.  2  Das Ja va-Ha mster -Mode ll  Die Grundidee des Hamster-Modells ist ausgesprochen einfach: Programmierer müssen virtuelle Hamster durch eine vorgegebene virtuelle Landsc haft steuern und sie gegebene Aufgabe n lösen lassen. Dazu müssen sie entspreche nde Programme - Hamster- Programme genannt - in der Hamster- Sprache entwick eln.1 Die Landschaft, in der die Hamster leben, wird durch eine gekachel te Ebene repräsen- tiert. Die Größe der Landschaft, d.h. die Anza hlder Kacheln, ist dabei flexibel. Auf einzelnen Kacheln können ein oder mehrere Körner liegen oder sie können durch Mau- ern blockiert sein. Im Terri torium befindet sich immer mindest ens ein Ham ster, auch Standard-Hamster  genannt.2 Hamster können in vierunterschiedlichen Blickrichtungen (Nord, Süd, West , Ost) auf nicht blockierten Kachel n stehen . Sie können prinzipiell beliebig viele Körner imMaul haben. Abbildung 1 zeigt ein typisches Ham ster- Terri torium inklusive Legende.   1 Die Ham ster-Sprache ist fast deckungsgleich mit der Programmiersprache Java.  Es gibt aus didaktischen  Gründen lediglich einen kleinen Unte rschied: Das Hauptpr ogramm(main-Prozedur )muss nicht inner halb einer Klasse definiert werden.  2 Im objektor ientierten Modell können weitere Hamster erzeugt werden.- 245 -Symbol Bede utung Hamster (Blickrichtung Ost) Hamster (BlickrichtungSüd) Hamster (Blickrichtung West) Hamster (Blickrichtung Nord) Kachel mit Mauer Kachel mit Körnern Abbildung 1: Hamster-Territorium und Legende  Mit Hilfe bestim mter Befehle kann ein Programmierer Ham ster durch  ein gegebene s Ham ster-Territ orium steuern: •vor:H üpfe eine Kachel in Blickrichtung nachvorne.  •linksUm:D rehe dichum90 Grad nach links.  •nimm:N imm von der Kachel , auf der dugerade stehst, ein Korn auf.  •gib:L ege auf der Kachel , auf der du gerade stehst, ein Korn aus deinem  M aul ab.  Probleme können dabei auftreten, wenn ein Ham ster durch den vor-B efehl  gegen eine Mauer renntoder versucht, ein Kornvon einer leeren Kachel zu fressen oder ein Korn abzul egen, obwohl er gar keins im Maul hat. Um derartig e Laufzeitfeh ler verhindernzu  können, existieren die dreiTestbefehle vornFrei, korn Da u nd maulLeer.  3  Der Hamster-Simulator  Programmieren lernt man nicht durch Lesen, sondern durch Üben. Zu diesem Zweck  gibt es den so gena nnten Ham ster-Simulator. Er stellt eine Reih e von Prog ramm ierwerk- zeuge n zur Verfügung:einenEditor zumEingeben und Verwalten vonHamster-Pro- gram men, einen Compiler zum Überset zen von Ham ster-Program men, einen Terri- toriumsgestalter zum Gestalten  undVerwa lten vonHamster-Territorien, einen Inter- preter zum Ausfü hren von Hamster-Programme n und einen Debugger zum Testen von  Ham ster-Programmen.   Der Ham ster-Sim ulator wurde funktionalund bedienungsmäßig bewusstan pro- fession elle Entwicklungsumgebungenfür Java(z. B. Eclipse) angelehnt,um einen späte- ren Umstieg auf diese zu  erleichtern. Abbildung 2 zeigt den Simulator inAktion. - 246 - Abbildung 2: Der Hamster-Simulator  4  Imperativ e Programmie rung spielen d gelernt  Im ersten  Teil des Java-Ham ster-Mod ells werdendie wesentlich en Konzepte der impera- tiven Programmieru ng schrittweise eingeführt [Bo02]. Dabei existiert lediglich ein ein- zelner Ham ster.  Anweisungen und Programme: In der imperativenProgrammierung bestehenPro- gram me aus Anweisungen, die in der angegebe nen Reihenfolge hintereinander ausge- führt werden. Das folgende Ham ster-Programm löst das Problem, den Standa rd-Hamster  in dem in Abbildung 1 skizzierten  Territorium zwei Körner fressen zu lassen.       void main() {         vor(); vor(); nimm(); // erstes Korn         linksUm();         vor(); vor(); nimm(); // zweites Korn       }   Proz eduren und boolesche Funktionen: Mit Hilfe von Prozeduren können dem Hams- ter neue Befehle und mit Hilfe von booleschen Funktionen neue Testbefehle beigebracht werden.   Kontrollstruk turen : Bis hierhin sind die Territorien  zu dengestellten Hamster-Auf- gabe n immer fest vorgegeben. Durch Einführung von Kontrollstrukturen (if-, while -  und do-An weisungen) wird es nun möglich, Programme für mehrere  Hamster-Terri-- 247 -torien mit bestimmten Charakteristik en zu entwick eln; zumBeispiel: Der Ham ster soll in einem beliebigen recht eckigen Territorium ohne innere M auern alleKörner sammeln.   Program mentwurf: Gegeben ist ein Problem, wie entwirftman ein korrektes und ver- ständliches Programm, das dieses Problemlöst? Das ist die zentrale Frage, der an- schließendnachgegangen wird. Vorgestellt wird der Top-Down -Entwurf (prozedurale  Zerlegung), bei dem das Problem sukzessi ve inweniger komplexe Teilprobleme zerlegt  wird, die dannjewei ls inüberschaubaren Prozedu renbzw. Funktionen gelöst werden.   Variablen und Ausdrücke: Die meisten Lehr bücherfür Programmiersprachen begin- nen mit Typen,Variablen, Operationen und Ausdrücken. Viele Programmieranfänger  werden aber durch die Kom plexität dieses Themengebi etes und seine vielen syntak- tischen Feinheiten berei ts abgeschreckt. Beim Java-Ham ster-M odell erfolgt die Einfüh- rung erst an dieser Stelle. Über Variable n bekommt der Hamster ein Gedächt nis und er lernt rechnen. Typen sind im Java-Hamster-Modell zunäc hst auf die Typen int ( Zah- len) und boolean ( Wahrheit swerte )beschränkt.   Verallge mein erung des Funktionskonzeptes :Nachdem der Typ-Begriff behandelt wurde, kann nun das Funktionskonzept verallgemeinert werden. Funktionen berechnen und liefern Werte eines bestimmt en Typs. Mit Hilfe vonParam etern lässt sich ihre Fle- xibilität erhöhen. Rekursi on: Durch das visuelle Feedback sindHamster-Pro gramm e außerordentlich gut dafür geeignet, das Prinzip rekursiver Funktionen zu veranschaulichen. Die Kornsuche eines Ham sters in einem Labyrinth ist beispielsweise eine komplexe Aufgabe, die sich relativ  einfach rekursiv lösen lässt.  5  Objektorientierte Progra mmierung spielen d gelernt  Aufbauend auf den imperat iven Sprachkonzepten werden im zweiten Teil des Java- Ham ster-Modells die grundlegenden Konzepte der objektorientierten Programmierung vorgestellt [BB0 4]. Kenn zeichen dieses objektorien tierten  Hamster-Mod ells ist, dass  mehrere Ham ster erzeugt und durch das Territorium gesteuert  werden können, um ge- meinsam gege bene  Ham ster-Aufgaben zu lösen.  Hams ter(obje kte): Objekte sind Instanzen so gena nnter Klassen . Im objektorien tierten  Ham ster-Mo dell existiert eine vordefinierte Klasse Hamster, die die vierHam ster-Be- fehle und die drei Hamster-Testbefehle als Methoden definiert. Von der Klasse Hams- ter k önnen Ham ster(-O bjekte) erzeugt werden. Objektvariablen , die Refere nzen auf Ham ster-Objekte speichern, entsprechenNamen für die Hamster. Im folgenden objekt- orientierten  Hamster-Pro gramm wird auf der Kachel in Reihe 1 und Spalte 2mit Blick- richtungOsten und 3 Körnern im Maul ein Ham ster namens paul erzeugt, der an- schließendbis zur nächsten Mauer läuft und dabei - fallsvorhanden -auf jederKachel ein Korn frisst. - 248 -void main() {         Hamster paul = new Hamster(1, 2, Hamster.OST, 3);        while (paul.vornFrei()) {          paul.vor();           if (paul.kornDa()) paul.nimm();        }      }  Vererbung und Klasse ndefi nition: Im objektorien tierten Ham ster-Mo dell lässt sich der  Befehlsvorratder Ham ster durch das Konzept der Vererbung erweitern, indem von der  Klasse Hamster n eue Klassen abgeleitet werden. Diese erben automatisch alle Metho- den der Klasse Hamster u nd könnenweitere definieren.  Arrays : Array s, die eigentlich zur imperativenProgrammierun ggehören, sind in Java als Obje kte realisiert und werden dahe r - zusammen mit der for-S chleife - erst im ob- jektorientierten Hamster-Modell eingeführt.Arrays erlauben zum einen das Anlegen von Ham ster-Kolonnen und zum anderen eine Erwei terung des Ham ster-Gedächtnisses, um beispielsweise ein Abbild des Ham ster-Terri toriums (Matrix mit Körne rn und Mauern) abzuspeic hern.   Ein- und Ausgabe: UmHam ster-Programme noch flexibler gestalten zu können, wird der Befehlsvorrat der Ham ster um Lese- und Schreibbefehle sowie den Typ String e r- weitert. Damit können die Ham ster nun zur Laufzeit mit dem Benutzer eines Programms  kommunizieren. Im Hamster-Simulator wird die Kommunikation über Dialogboxen rea- lisiert.   Inter faces, Polymor phie und dynamische s Binden: Mit Hilfe von Interfaces in Zu- sammenhan g mit Polymorphie und dem dynamischen Binden von Methoden lassen sich generische Framewor ks entwickeln. Das Prinzip und der Nutzen dieses Konzeptes lässt  sich sehr schönanhand von Spiele-Frameworks demonstrieren,bei denen die Hamster mitverschi edenenSpielstrategien gegeneinander oder gegen Menschen spielen.  Fehlerbehandlung mit Exce ptions: Anstattmithilfe der drei vordefinierten Testbefehle die Ham ster vor ihrem Tod zu bewahren, wenn sie beispielsweise gegen eine Mauer ren- nen, können auch Exceptions abgefa ngen werden, die die entsprec henden Grundbefe hle liefern.  Zugriffsrechte und Pakete: Unter dem Motto „Die Hamster haben auch eine Pri- vatsphäre“ werden anschließend Zugriffsrechte und das Paket -Konzept eingeführt. Zu- griffsrechteregulieren den Zugriff auf Attribute und Methoden einer Klasse. Pakete die- nen dazu, Klassen zu Klassenbibliotheken zusammen zufassen und anderen Program- mierern zur Verfügung zu stellen. - 249 -6  Parallele Programmierung spielend gelernt  Ein Problem von Hamster-Programmen mit mehreren zusammenarbei tenden Ham stern ist, dass die Lösu ngen zum Teil künstlich wirken. Der Grun d hierfür liegt darin,dass der  Programmierer die Hamster explizit steuernund koordinieren  muss. Im dritten Teil des  Java- Hamster-Modells3 werden die Ham ster selbstständi g und müssen sich selbst koor- dinieren. Erreichtwird dies durch Nutzung des Thread-Konzeptes von Java, mitdempa- rallele Programme entwickelt werdenkönnen . Threads : Die vordefinie rte Klasse Hamster ist von der Klasse Thread der Java-Klas- senbibliothek abgeleitet und ermöglicht somit auf einfache Art undWeise die Defin ition und Erzeugung selbstständiger Hamster.   Komm unikati on zwischen Hams tern: Um gemeinsam gegebene Probleme zu lösen, müssen selbstständige Ham ster miteinande r kommunizieren, d. h. Daten austauschen können. Da sich Java-Threads einen virtuellen Adressra umteilen, kann dies über ge- meinsam zugreifbare Objektegeschehe n. Mehrseiti ge Synchronisation: Die Nutzunggemeinsamer Ressourcendurch mehrere Threads kann zu unerwarteten Zuständen bzw. Fehlern führen. Führt beispielsweise ein selbstständiger Ham ster die Anweisung if (kornDa()) nimm(); aus, kann es zu einem Fehler kommen, da bei einem Thread- Wechsel nach dem Testbefehl  später evtl. gar kein Korn mehr auf der Kachel  liegt. Zur Vermeidung derartiger Probleme ist es in  Java möglich, Aufrufe von Methodenmittels dersynchronized -Anweisung  zu syn- chronisieren.   Einseitige Synchronisation :Wenn mehrere selbstständige Ham ster gemeinsam ein Problem lösen, müssen sie manchm al während ihrer Aktionen auf andere Ham ster war- ten,bis eine bestimmte Bedingung erfüllt ist und sie vondiesen darüber informiert wer- den. Hierzu  stellt Java allen Objekten die Meth oden wait und notify z ur Verfügung.   Deadlock s: Die Ham ster könnten „verhungern“, wenn sie alle auf die Erfüllung be- stimmter Bedingungen warten und keiner mehr aktiv ist. Solche Situationen werden Deadlocksgenannt. Sie gilt es natürlich zu verm eiden bzw. zu erkennen.   Realisierun g und Visu alisierung klassis cher Synchronisati onsprobleme: Die Kon- zepteder parallelen Programmierung werdenanhand zahlreicher klassischer Syn- chronisationsprobleme, die auf die Hamster-Welt übertragen werd en, demonstriert und visualisiert. Beisp ielsweise sitzen  beim„Hamster-Philos ophen-P roblem“ mehrere Philo- sophen-Hamster um einen Tisch und teilen sich mit ihren Nachbarndie Gabeln, die  durch Körner repräsentiert werden. Zum Essen werden immer zwei  Gabeln benötigt.Um nicht zuverhungern, gilt es, sich mit seinenNachb arn abzusti mmen . 3 Dietrich Boles: Parallele Programmierung spielend gelernt mit dem Java-Ham ster-Modell.  Online- Buch unter www.java -hamster-modell.de - 250 -7  Algorithmen und Datenstrukturen spielend gelernt  Die Meinungen, inwieweit heutzutage noch klassische Algorithmen und Daten- strukturen, wie Sortier- , Such-, Baum -, Graphen-, Kom pressions- oderMustererken- nungsalgo rithmen ,in der Programmierau sbildung vorgestellt und analysiert werden  sollen, gehe n auseinander. Wir halten dies jedoch für sehr wichtig. Sicher gibt es heut- zutage Klassenbibliotheken, in denen alle bedeutenden Algorithmen und Datenstruk- turen fertig implementiert zur Verfü gunggestellt werd en. Aber durch das Kennenlernen  der zugrunde liegenden Konzepte können Program mieranfänge r Kenntnisse und Erfah- rungen beimAlgorithmenentwurf sammeln und diese nutzen, wenn sie selbst Algorith- men zur Lösungbestimmter Pro bleme entwerfen müssen. An diese r Stelle setzen wir im vierten Teil des Java-Hamster-Mod ells4an. Wir nutze n das Mod ell und insbesond ere seine Visu alisierun g, d. h. das Ham ster-Territoriu m und die Aktionen der Hamster, umm it entsprechenden Ham ster-Programmen die Konzepte und Funktionswei sen wichtiger Algorithmen und Datenstrukturenzu demonstrieren.Das  Java-Hamster-M odellwird also zur sogena nntenAlgorithmen visua lisieru ng oder Algo - rithmenanimation eingesetzt.  8  Objektorientierte Modellierung spielend gelernt  Zum Vermitte ln bzw. Erlern ender wich tigsten Konzepte der imperativen, objekt- orientierten und parallelen Programmierung ist das Java- Ham ster-M odell hervorragend geeignet. Bei der objektorientierten Softwareent wicklung mit dem der Program mierung vor geschalteten Phasender Analyse unddem Entwurf stößt es jedoch an seine Grenzen. Hauptgrundhierfür ist, dassHam ster-Probleme nicht wirklich komplex genug sind, um die entsprechenden Vorgehensweisen und Konzepte an geeigneten Beispielen demons- trieren zukönnen. Nich tsdestotrotz besitzt die objektorien tierte Softwareen twick lung bzw. Modellierung heutzutage eine immense Bedeutungund sollte daher bereits frühzeitig nebender eigent- lichen Programmi erung erlern t werden, umdie Gefahr einer Hacker-Men talität5 beiden  Programmieranfä ngern zu minimieren.  Diesem  Aspekt versuchen wir im fünft en Teil des Java-Hamster-Modells6 gerecht zu werden. Wir haben nämlich eine Problemklasse entdeckt, die nicht zu umfangreich, aber komplex genug und sehr motivierend  für eine ordentliche objektorien tierte Modellieru ng ist, nämlich die Entwicklung von Spielprogrammen, wie Schac h, Reversi oder 4-Ge- winn t (sieh e auch[Bo0 3]). Spielfeld  ist hierbei jeweils das Ham ster-Territo rium, Hams- ter oder Körner repräse ntieren die Spielfiguren. Spieler sind entwede r Menschen, denen jewei ls ein Hamster zuge ordnet ist, der f ür sie Spi elzüge ausführt, oder Hamster von spe - 4 Dietrich Boles: Algor ithmen und Datenstr uktur en spielend gelernt mit dem Java- Hamster-Modell. Online- Buch  unter www.j ava-ha mster-modell.de  5 direkt eintippen,  ohne vorher zu konzipier en  6 Dietrich Boles:  Objektorientierte Modellierung spiele nd gelernt mit demJava-Ha mster-Mo dell. Online-Buch  unter www. java-ha mster-modell.de - 251 -ziellen  Hamster-Klassen, die intellig ente Spielstrateg ien implementieren . Anhanddieser  Problem klasse zeigen wir, wie vor der eigentlichen Program mierung eine ordentliche objektorientierte Anal yse und ein objektorientierter Entwurf durchgeführtwerden.  Grundlag e ist dabei ein allgemein  gültiges Fram ework für 2-Person en/Ham ster-Strate- giespiele, das bei der Umsetzu ng der jeweiligen Spiele konkretisiert werd en muss.  Ausgesprochen wichtig beider objektorientierten Softwareentwicklung sind so genannte  Entwurfsmuster. Ein Entwurfsmuster besch reibt eine in der Praxisbewährte, generische  Lösung für ein häufig wiederkehrendes Entwurfsproble m und stellt damit eine wieder  verw endbare Vorlage  zur Problem lösung dar. Die gängigstenEntwurfsmuster (Abstrakte Fabrik, Beobachter, ...) lassen sich ganz hervorragend an dem Hamster-Spiele-Beispiel demonstrieren. Zusät zlich zeigen wir ihren Einsatz und ihren Nutzen aber auchnoch an weiteren kleineren Ham ster-Beisp ielen . 9  Andere Programmierlernumgeb ungen  Die Entwicklung von speziellen Programmiersprac hen und Programmierum gebun gen  zum Erlernen der Programmierungreicht weitzurüc k. Ambekanntesten sind die Schild- kröten-Graphik mit LOGO [Pa80] und „Karel the Robot“ [PRS 95]. Kare l war auchVor- bild für das Hamster-Modell, das seinen Ursprung bereits in den 1980er Jahren hatte [Am87]. Grundlage war damalsdie Programmiersprac he ELAN. Auf diesen Mod ellen aufbauend sind inden letzten Jahren eine Reihe von Nachfolgern entwickelt worden. Einen schönen Überblick überderartige Programmierlernumgebun gen enthält [RNH04].  In diesem  Buch wird mit „Kara dem Marien käfer“ auch ein alternativer Ansatz vor- gestellt, bei dem Prog ramme nicht in einer textuellen  Programmiersp rache verfasst,  sondern graphisch als endliche Automaten erstellt werd en.  Die Hauptvorteile aller dieser Modelle undLernumgebungen sind, dass die Befehlssätze  stark eingeschränktsind und sich an beka nnten (spielerischen) Dingen der realen Welt und nicht an technischen Feinheiten von Computern orientieren.Weiterhinwerden die Auswirku ngen der Befeh le mit graphischenMitteln auf dem Bildschirmveranschaulicht, ohne dass sich die Programmieranfä nger mit der Kom plexität der Programmie rung gra- phischer Benutzungsoberflächen herumschlagen müssen.  An dieser Stelle soll und kann keine Bewertung erfolgen, welche dieser Programmier- lernumgebu ngen die beste ist. Jede hat ihre ganz spezi ellen didaktischen Merkmale und Vorteile. Die wesen tlichenVorteile des Java-Ham ster-Mo dells sind sein Umfang(impe- rative, objektorientierte undparallele Programmieru ng), der in diesem Artik el vorge- stellte didaktische Aufb au sowie die ausführlich en Begleitbücher mit vielen Beispielen  und Aufgaben. Als weiteren Vorteil sehen wir auchdie Wahlvon Java als zugrunde lie- gende Progra mmiersprac he. Programmieran fänger lernen mit demHam ster-Mo dell gleichzeitig  diese moderne Programmiersp rache kennen und nebendem Lösen von Hamster-Prob lemen könnenProgrammieran fänger auchbereits frühzeitig  „echte“ Prob- lememit Java lösen.- 252 -10  Erfahrungen und F azit  Das Java-Hamster -Modell wird seit nunmehr9 Jahrenbei der Programmier ausbildung von Studienanfängern an der Universität Oldenburg eingesetzt. Durch die dabeigewon- nene n Erfahrungen hat es sich inkrementell weiterentwickelt. Ob sein Einsatz den Lern- erfolg der Studierenden tatsächlich verbessert hat, ist zwar kaum messbar.  Die Meinun- gen und Rückmeldungen der Studierenden als auch  vieler anderer Nutzer sindjedoch fast ausnahmslos positiv.  Dabei sei jedoch  anzumerken, dass das Hamster-Mod ell insbesondere für solche Schü ler  und Studierenden gedacht  ist, die sich mit dem Erlernen der Programmierung schwer tun. Denjenigen Programmieranfängern, die keine Probleme haben, wird es durch die ge- ringe Komplexität der Aufgaben schnell langweilig. Sie wollengrößere Anwendu ngen  mit graphischen Oberflächen oder Java-Applets entwickeln. Aus diesem Grund und der Erfahrung,dass auchdie erstgenannte Gruppe mal echte und nicht nurHamster-Proble- me lösenwill, sollte das Java-Ham ster-Mo dell nicht ausschließlich, sondernnur motivie- rendund begleitend zur „richtigen“ Java-Program mierung  eingeset ztwerden.  Literaturverzeichnis  [Am87 ]A mbros, W.: Der Hamster: Progr ammi eren in einer Modellwelt. Metzler, 1987.  [BB04] B oles, D.; Boles, C.: Obje ktorientierte Programmierung spielend gelernt mit dem  Java-Hamster-Modell. Teubner ,2004.  [Bo02] Boles, D.: Progr ammieren spielend gelern t mit dem Java-Hamst er-Modell. Teubn er, 2.  Auflage, 2002.  [Bo03] B oles, D.: Progr ammierkurse für Anfänger  und Fortgeschritt ene. In K. Dittr ich,W. König, A. Ober weis, K. Rannen berg und W. Wahlster, Hrsg., Informatik 2003, P-35 of Lecture Notes in Informatics (LNI) - Proceedings, Köllen Druck+Ve rlag GmBH,  Bonn, 2003;  S. 45 - 49.  [BOM99] du Boulay , B.; O'Shea, T.; Monk, J.: The black box inside the glass box: Presenting computing concepts to novices. Intern ational Journal of Human-Computer Studies,  51(2), 1999; S. 265 – 277.  [Br97] B rusilovsk y, P. et. all.: Mini-lan guage s: A way to learn programming principles. Edu- cation and Information Technolo gies, 2(1), 1997; S. 65-83.  [Pa80]  P apert, S.: Mindstorms, children, comput ers and powe rful ideas. Basic Books, New  York, 1980.  [PRS95 ] Pattis, R.; Robert, J.; Stehlik , M.: Karelthe Robot : A Gent le Intro duction  to the Art of Programming.  Wiley, 1995.  [RNH04] Reichert,R.;Nievergelt , J.; Hartmann,W .: Program mieren mit Kara: Ein spielerischer  Zugang zur Informatik. Spring er, 2004. 243 -Spielerisches Erlernen der Programmierung mit dem   Java-Hamster -Modell  Dietrich Boles Depa rtment für Informatik, A bteilun gInformationssy stem e  Universität Oldenburg, Fakultät II  Esche rweg 2  D-26121 Oldenburg boles@inf ormatik .uni-oldenburg.de  Abstract:  Das Java-Ham ster-Modell ist ein spezielles didaktisches Modell zum  spielerischen Erlernen der Programmi erung. Programmiera nfänger lernen die  grundl egend en Programmierkonzepte und den Programmentwu rf kennen, indem  sie so genannte Hamster-Programme entwickel n, mit denen sie virtuelle Hamster durch virtuelle Landschaf ten steuern und dabei bestimmte Aufgaben lösen  lassen.  Die Prog rammierkonzept e werden schrittw eise eingeführt und anhand vieler Beispiele motiviertund demonstrier t. Das Mode ll besteht aktuell aus fünf Teilen , die  neben der Vermittlung der Konzepte der imperat iven, objektorien tierten und parallelen Programmierung in grundlegende Algorithmen und Datenstrukturen und in die objektor ientierte Modellierun g einführ en.  1  Einleitun g Heftig diskutiert wird immer wied er die Frage, ob die Programmierung  noch zur Informatik-Grundausbildung gehören soll. Für fast alles gibtes heutzutage berei tsfertige Computer-Anwendungen. Reicht es nichtaus, den Umgang mit diesen zu erlernen, als zu wissen, wie sie intern funktionieren?Probleme einer solchen anwendungsorientierten Einführung in die Informatik sinddie Kurzlebigkeit heutiger Anwendungen und die  entstehe nde Abhä ngigkeit von den Produkten bzw. Anbietern. Gefra gt ist daher eher  Konzeptwissen (wie funktionieren  Softwaresy steme, wie werd en sie erstellt), das letztendlich denTransfer auf konkrete Anwendungen erlaubt.  Das Erlernen von Programmiersprachen und die Entwicklung von Programme n ist allerdings nicht trivial. Sicher gibt es Schüler, die sehr schnell damit zurecht kommen. Viele  haben aber Problememit der Kom plexität der Them atik und sind schnell frustriert. Das Ham ster-Mo dell, das in diesem Artik el vorgestellt wird, ist genau für diese Zielg ruppe  entwickelt worden. Es ist ein spezielles didaktisches Mod ell, das Prog rammieranfängern  einen spielerischen Zugang zu der doch eher technischen Welt der Programmierung  bietet. Programmieranfä nger erlernen die grundlegenden Konzepte der Programmierung sowi e den Programmentwicklungsprozess, indem sie virtuelle Hamster durch eine virtuelle Lands chaft steuern und dabei bestimmte Au fgaben lösen lassen.  Das Ham ster-Mo dell ist aktuell in insgesamt fünf Teile gegliedert, die nebender Vermittlung der Konzeptederimperat iven,objektorientierten und parallelen Programmierung in grundlegende Algorithmen und Datenstrukturen und indie objektorientierte244 -Modellierung einführen. Das Ham ster-Mo dell reduziert die Komplexität eines Computers auf einen minimalen Satz von Befeh len, die den Ham stern erteilt werd en können.  Die Programmierkonzepte werd en schrittweise und aufein ander aufbauen d eingeführt und jeweils durch zahlreiche Beispiele demonstriert. Anhand vieler Aufgaben mit einfach zu verstehenden Aufgabenstellungen können die Programmieranfä nger selbstüberprüfen, ob sieden Stoff nicht nur verstanden habe n, sondern auchpraktisch umsetzen  können. Für die Bearbeitung der Aufga ben existiert eine einfach zu bedienende Program mierumgebung, die die Erstellung undden Test vonProgrammen unterstützt und Programmausführungen, d. h. die Aktionen der Ham ster, visuell auf dem Bildschirm  darstellt. Mit diesen Eigenschaften  trägt das Ham ster-Mo dell Empfehlungen von Didaktikern, wie der Einstieg in die Programmierung erfolgen könnte,voll und ganzRechnung [Br97, BOM99].  Prinzipiell ist das Ham ster-Mo dell programmi ersprac henunabhängig. Zum praktischen  Umgang mitdem Modell wurde jedoch bewusstdie Programmiersprac he Java als  Grundlage gewähl t. Java ist eine moderne Programmiersprac he, die sich in den letzten Jahre n sowohl im Ausbildungsbereich als auch im indus triellen Umfeld immer mehr  durchgesetzt hat.  In den folgenden Abschnitten werdendieeinzelnen Komponenten  des Java-Ham sterModells kurz vorgestellt. Die Ausführungen orientieren  sich dabei am didaktischen Aufbau des Mod ells. Zum Schluss erfolgt ein Verg leich mit ähnlichen Ansätzen und es  werden Erfahrungen beim Einsat z des Mode lls geschildert.Weitere Informationen findensichauf der Websi te www.java-hamster-modell.de.  2  Das Ja va-Ha mster -Mode ll  Die Grundidee des Hamster-Modells ist ausgesprochen einfach: Programmierer müssen virtuelle Hamster durch eine vorgegebene virtuelle Landsc haft steuern und sie gegebene Aufgabe n lösen lassen. Dazu müssen sie entspreche nde Programme HamsterProgramme genannt in der HamsterSprache entwick eln.1 Die Landschaft, in der die Hamster leben, wird durch eine gekachel te Ebene repräsentiert. Die Größe der Landschaft, d.h. die Anza hlder Kacheln, ist dabei flexibel. Auf einzelnen Kacheln können ein oder mehrere Körner liegen oder sie können durch Mauern blockiert sein. Im Terri torium befindet sich immer mindest ens ein Ham ster, auch Standard-Hamster  genannt.2 Hamster können in vierunterschiedlichen Blickrichtungen (Nord, Süd, West , Ost) auf nicht blockierten Kachel n stehen . Sie können prinzipiell beliebig viele Körner imMaul haben. Abbildung 1 zeigt ein typisches Ham sterTerri torium inklusive Legende.   1 Die Ham ster-Sprache ist fast deckungsgleich mit der Programmiersprache Java.  Es gibt aus didaktischen  Gründen lediglich einen kleinen Unte rschied: Das Hauptpr ogramm(main-Prozedur )muss nicht inner halb einer Klasse definiert werden.  2 Im objektor ientierten Modell können weitere Hamster erzeugt werden.245 -Symbol Bede utung Hamster (Blickrichtung Ost) Hamster (BlickrichtungSüd) Hamster (Blickrichtung West) Hamster (Blickrichtung Nord) Kachel mit Mauer Kachel mit Körnern Abbildung 1: Hamster-Territorium und Legende  Mit Hilfe bestim mter Befehle kann ein Programmierer Ham ster durch  ein gegebene s Ham ster-Territ orium steuern: •vor:H üpfe eine Kachel in Blickrichtung nachvorne.  •linksUm:D rehe dichum90 Grad nach links.  •nimm:N imm von der Kachel , auf der dugerade stehst, ein Korn auf.  •gib:L ege auf der Kachel , auf der du gerade stehst, ein Korn aus deinem  M aul ab.  Probleme können dabei auftreten, wenn ein Ham ster durch den vor-B efehl  gegen eine Mauer renntoder versucht, ein Kornvon einer leeren Kachel zu fressen oder ein Korn abzul egen, obwohl er gar keins im Maul hat. Um derartig e Laufzeitfeh ler verhindernzu  können, existieren die dreiTestbefehle vornFrei, korn Da u nd maulLeer.  3  Der Hamster-Simulator  Programmieren lernt man nicht durch Lesen, sondern durch Üben. Zu diesem Zweck  gibt es den so gena nnten Ham ster-Simulator. Er stellt eine Reih e von Prog ramm ierwerkzeuge n zur Verfügung:einenEditor zumEingeben und Verwalten vonHamster-Program men, einen Compiler zum Überset zen von Ham ster-Program men, einen Territoriumsgestalter zum Gestalten  undVerwa lten vonHamster-Territorien, einen Interpreter zum Ausfü hren von Hamster-Programme n und einen Debugger zum Testen von  Ham ster-Programmen.   Der Ham ster-Sim ulator wurde funktionalund bedienungsmäßig bewusstan profession elle Entwicklungsumgebungenfür Java(z. B. Eclipse) angelehnt,um einen späteren Umstieg auf diese zu  erleichtern. Abbildung 2 zeigt den Simulator inAktion. 246 Abbildung 2: Der Hamster-Simulator  4  Imperativ e Programmie rung spielen d gelernt  Im ersten  Teil des Java-Ham ster-Mod ells werdendie wesentlich en Konzepte der imperativen Programmieru ng schrittweise eingeführt [Bo02]. Dabei existiert lediglich ein einzelner Ham ster.  Anweisungen und Programme: In der imperativenProgrammierung bestehenProgram me aus Anweisungen, die in der angegebe nen Reihenfolge hintereinander ausgeführt werden. Das folgende Ham ster-Programm löst das Problem, den Standa rd-Hamster  in dem in Abbildung 1 skizzierten  Territorium zwei Körner fressen zu lassen.       void main() {         vor(); vor(); nimm(); // erstes Korn         linksUm();         vor(); vor(); nimm(); // zweites Korn       }   Proz eduren und boolesche Funktionen: Mit Hilfe von Prozeduren können dem Hamster neue Befehle und mit Hilfe von booleschen Funktionen neue Testbefehle beigebracht werden.   Kontrollstruk turen : Bis hierhin sind die Territorien  zu dengestellten Hamster-Aufgabe n immer fest vorgegeben. Durch Einführung von Kontrollstrukturen (if-, while  und do-An weisungen) wird es nun möglich, Programme für mehrere  Hamster-Terri-247 -torien mit bestimmten Charakteristik en zu entwick eln; zumBeispiel: Der Ham ster soll in einem beliebigen recht eckigen Territorium ohne innere M auern alleKörner sammeln.   Program mentwurf: Gegeben ist ein Problem, wie entwirftman ein korrektes und verständliches Programm, das dieses Problemlöst? Das ist die zentrale Frage, der anschließendnachgegangen wird. Vorgestellt wird der Top-Down -Entwurf (prozedurale  Zerlegung), bei dem das Problem sukzessi ve inweniger komplexe Teilprobleme zerlegt  wird, die dannjewei ls inüberschaubaren Prozedu renbzw. Funktionen gelöst werden.   Variablen und Ausdrücke: Die meisten Lehr bücherfür Programmiersprachen beginnen mit Typen,Variablen, Operationen und Ausdrücken. Viele Programmieranfänger  werden aber durch die Kom plexität dieses Themengebi etes und seine vielen syntaktischen Feinheiten berei ts abgeschreckt. Beim Java-Ham ster-M odell erfolgt die Einführung erst an dieser Stelle. Über Variable n bekommt der Hamster ein Gedächt nis und er lernt rechnen. Typen sind im Java-Hamster-Modell zunäc hst auf die Typen int ( Zahlen) und boolean ( Wahrheit swerte )beschränkt.   Verallge mein erung des Funktionskonzeptes :Nachdem der Typ-Begriff behandelt wurde, kann nun das Funktionskonzept verallgemeinert werden. Funktionen berechnen und liefern Werte eines bestimmt en Typs. Mit Hilfe vonParam etern lässt sich ihre Flexibilität erhöhen. Rekursi on: Durch das visuelle Feedback sindHamster-Pro gramm e außerordentlich gut dafür geeignet, das Prinzip rekursiver Funktionen zu veranschaulichen. Die Kornsuche eines Ham sters in einem Labyrinth ist beispielsweise eine komplexe Aufgabe, die sich relativ  einfach rekursiv lösen lässt.  5  Objektorientierte Progra mmierung spielen d gelernt  Aufbauend auf den imperat iven Sprachkonzepten werden im zweiten Teil des JavaHam ster-Modells die grundlegenden Konzepte der objektorientierten Programmierung vorgestellt [BB0 4]. Kenn zeichen dieses objektorien tierten  Hamster-Mod ells ist, dass  mehrere Ham ster erzeugt und durch das Territorium gesteuert  werden können, um gemeinsam gege bene  Ham ster-Aufgaben zu lösen.  Hams ter(obje kte): Objekte sind Instanzen so gena nnter Klassen . Im objektorien tierten  Ham ster-Mo dell existiert eine vordefinierte Klasse Hamster, die die vierHam ster-Befehle und die drei Hamster-Testbefehle als Methoden definiert. Von der Klasse Hamster k önnen Ham ster(-O bjekte) erzeugt werden. Objektvariablen , die Refere nzen auf Ham ster-Objekte speichern, entsprechenNamen für die Hamster. Im folgenden objektorientierten  Hamster-Pro gramm wird auf der Kachel in Reihe 1 und Spalte 2mit BlickrichtungOsten und 3 Körnern im Maul ein Ham ster namens paul erzeugt, der anschließendbis zur nächsten Mauer läuft und dabei fallsvorhanden -auf jederKachel ein Korn frisst. 248 -void main() {         Hamster paul = new Hamster(1, 2, Hamster.OST, 3);        while (paul.vornFrei()) {          paul.vor();           if (paul.kornDa()) paul.nimm();        }      }  Vererbung und Klasse ndefi nition: Im objektorien tierten Ham ster-Mo dell lässt sich der  Befehlsvorratder Ham ster durch das Konzept der Vererbung erweitern, indem von der  Klasse Hamster n eue Klassen abgeleitet werden. Diese erben automatisch alle Methoden der Klasse Hamster u nd könnenweitere definieren.  Arrays : Array s, die eigentlich zur imperativenProgrammierun ggehören, sind in Java als Obje kte realisiert und werden dahe r zusammen mit der for-S chleife erst im objektorientierten Hamster-Modell eingeführt.Arrays erlauben zum einen das Anlegen von Ham ster-Kolonnen und zum anderen eine Erwei terung des Ham ster-Gedächtnisses, um beispielsweise ein Abbild des Ham ster-Terri toriums (Matrix mit Körne rn und Mauern) abzuspeic hern.   Einund Ausgabe: UmHam ster-Programme noch flexibler gestalten zu können, wird der Befehlsvorrat der Ham ster um Leseund Schreibbefehle sowie den Typ String e rweitert. Damit können die Ham ster nun zur Laufzeit mit dem Benutzer eines Programms  kommunizieren. Im Hamster-Simulator wird die Kommunikation über Dialogboxen realisiert.   Inter faces, Polymor phie und dynamische s Binden: Mit Hilfe von Interfaces in Zusammenhan g mit Polymorphie und dem dynamischen Binden von Methoden lassen sich generische Framewor ks entwickeln. Das Prinzip und der Nutzen dieses Konzeptes lässt  sich sehr schönanhand von Spiele-Frameworks demonstrieren,bei denen die Hamster mitverschi edenenSpielstrategien gegeneinander oder gegen Menschen spielen.  Fehlerbehandlung mit Exce ptions: Anstattmithilfe der drei vordefinierten Testbefehle die Ham ster vor ihrem Tod zu bewahren, wenn sie beispielsweise gegen eine Mauer rennen, können auch Exceptions abgefa ngen werden, die die entsprec henden Grundbefe hle liefern.  Zugriffsrechte und Pakete: Unter dem Motto „Die Hamster haben auch eine Privatsphäre“ werden anschließend Zugriffsrechte und das Paket -Konzept eingeführt. Zugriffsrechteregulieren den Zugriff auf Attribute und Methoden einer Klasse. Pakete dienen dazu, Klassen zu Klassenbibliotheken zusammen zufassen und anderen Programmierern zur Verfügung zu stellen. 249 -6  Parallele Programmierung spielend gelernt  Ein Problem von Hamster-Programmen mit mehreren zusammenarbei tenden Ham stern ist, dass die Lösu ngen zum Teil künstlich wirken. Der Grun d hierfür liegt darin,dass der  Programmierer die Hamster explizit steuernund koordinieren  muss. Im dritten Teil des  JavaHamster-Modells3 werden die Ham ster selbstständi g und müssen sich selbst koordinieren. Erreichtwird dies durch Nutzung des Thread-Konzeptes von Java, mitdemparallele Programme entwickelt werdenkönnen . Threads : Die vordefinie rte Klasse Hamster ist von der Klasse Thread der Java-Klassenbibliothek abgeleitet und ermöglicht somit auf einfache Art undWeise die Defin ition und Erzeugung selbstständiger Hamster.   Komm unikati on zwischen Hams tern: Um gemeinsam gegebene Probleme zu lösen, müssen selbstständige Ham ster miteinande r kommunizieren, d. h. Daten austauschen können. Da sich Java-Threads einen virtuellen Adressra umteilen, kann dies über gemeinsam zugreifbare Objektegeschehe n. Mehrseiti ge Synchronisation: Die Nutzunggemeinsamer Ressourcendurch mehrere Threads kann zu unerwarteten Zuständen bzw. Fehlern führen. Führt beispielsweise ein selbstständiger Ham ster die Anweisung if (kornDa()) nimm(); aus, kann es zu einem Fehler kommen, da bei einem ThreadWechsel nach dem Testbefehl  später evtl. gar kein Korn mehr auf der Kachel  liegt. Zur Vermeidung derartiger Probleme ist es in  Java möglich, Aufrufe von Methodenmittels dersynchronized -Anweisung  zu synchronisieren.   Einseitige Synchronisation :Wenn mehrere selbstständige Ham ster gemeinsam ein Problem lösen, müssen sie manchm al während ihrer Aktionen auf andere Ham ster warten,bis eine bestimmte Bedingung erfüllt ist und sie vondiesen darüber informiert werden. Hierzu  stellt Java allen Objekten die Meth oden wait und notify z ur Verfügung.   Deadlock s: Die Ham ster könnten „verhungern“, wenn sie alle auf die Erfüllung bestimmter Bedingungen warten und keiner mehr aktiv ist. Solche Situationen werden Deadlocksgenannt. Sie gilt es natürlich zu verm eiden bzw. zu erkennen.   Realisierun g und Visu alisierung klassis cher Synchronisati onsprobleme: Die Konzepteder parallelen Programmierung werdenanhand zahlreicher klassischer Synchronisationsprobleme, die auf die Hamster-Welt übertragen werd en, demonstriert und visualisiert. Beisp ielsweise sitzen  beim„Hamster-Philos ophen-P roblem“ mehrere Philosophen-Hamster um einen Tisch und teilen sich mit ihren Nachbarndie Gabeln, die  durch Körner repräsentiert werden. Zum Essen werden immer zwei  Gabeln benötigt.Um nicht zuverhungern, gilt es, sich mit seinenNachb arn abzusti mmen . 3 Dietrich Boles: Parallele Programmierung spielend gelernt mit dem Java-Ham ster-Modell.  OnlineBuch unter www.java -hamster-modell.de 250 -7  Algorithmen und Datenstrukturen spielend gelernt  Die Meinungen, inwieweit heutzutage noch klassische Algorithmen und Datenstrukturen, wie Sortier, Such-, Baum -, Graphen-, Kom pressionsoderMustererkennungsalgo rithmen ,in der Programmierau sbildung vorgestellt und analysiert werden  sollen, gehe n auseinander. Wir halten dies jedoch für sehr wichtig. Sicher gibt es heutzutage Klassenbibliotheken, in denen alle bedeutenden Algorithmen und Datenstrukturen fertig implementiert zur Verfü gunggestellt werd en. Aber durch das Kennenlernen  der zugrunde liegenden Konzepte können Program mieranfänge r Kenntnisse und Erfahrungen beimAlgorithmenentwurf sammeln und diese nutzen, wenn sie selbst Algorithmen zur Lösungbestimmter Pro bleme entwerfen müssen. An diese r Stelle setzen wir im vierten Teil des Java-Hamster-Mod ells4an. Wir nutze n das Mod ell und insbesond ere seine Visu alisierun g, d. h. das Ham ster-Territoriu m und die Aktionen der Hamster, umm it entsprechenden Ham ster-Programmen die Konzepte und Funktionswei sen wichtiger Algorithmen und Datenstrukturenzu demonstrieren.Das  Java-Hamster-M odellwird also zur sogena nntenAlgorithmen visua lisieru ng oder Algo rithmenanimation eingesetzt.  8  Objektorientierte Modellierung spielend gelernt  Zum Vermitte ln bzw. Erlern ender wich tigsten Konzepte der imperativen, objektorientierten und parallelen Programmierung ist das JavaHam ster-M odell hervorragend geeignet. Bei der objektorientierten Softwareent wicklung mit dem der Program mierung vor geschalteten Phasender Analyse unddem Entwurf stößt es jedoch an seine Grenzen. Hauptgrundhierfür ist, dassHam ster-Probleme nicht wirklich komplex genug sind, um die entsprechenden Vorgehensweisen und Konzepte an geeigneten Beispielen demonstrieren zukönnen. Nich tsdestotrotz besitzt die objektorien tierte Softwareen twick lung bzw. Modellierung heutzutage eine immense Bedeutungund sollte daher bereits frühzeitig nebender eigentlichen Programmi erung erlern t werden, umdie Gefahr einer Hacker-Men talität5 beiden  Programmieranfä ngern zu minimieren.  Diesem  Aspekt versuchen wir im fünft en Teil des Java-Hamster-Modells6 gerecht zu werden. Wir haben nämlich eine Problemklasse entdeckt, die nicht zu umfangreich, aber komplex genug und sehr motivierend  für eine ordentliche objektorien tierte Modellieru ng ist, nämlich die Entwicklung von Spielprogrammen, wie Schac h, Reversi oder 4-Gewinn t (sieh e auch[Bo0 3]). Spielfeld  ist hierbei jeweils das Ham ster-Territo rium, Hamster oder Körner repräse ntieren die Spielfiguren. Spieler sind entwede r Menschen, denen jewei ls ein Hamster zuge ordnet ist, der f ür sie Spi elzüge ausführt, oder Hamster von spe 4 Dietrich Boles: Algor ithmen und Datenstr uktur en spielend gelernt mit dem JavaHamster-Modell. OnlineBuch  unter www.j ava-ha mster-modell.de  5 direkt eintippen,  ohne vorher zu konzipier en  6 Dietrich Boles:  Objektorientierte Modellierung spiele nd gelernt mit demJava-Ha mster-Mo dell. Online-Buch  unter www. java-ha mster-modell.de 251 -ziellen  Hamster-Klassen, die intellig ente Spielstrateg ien implementieren . Anhanddieser  Problem klasse zeigen wir, wie vor der eigentlichen Program mierung eine ordentliche objektorientierte Anal yse und ein objektorientierter Entwurf durchgeführtwerden.  Grundlag e ist dabei ein allgemein  gültiges Fram ework für 2-Person en/Ham ster-Strategiespiele, das bei der Umsetzu ng der jeweiligen Spiele konkretisiert werd en muss.  Ausgesprochen wichtig beider objektorientierten Softwareentwicklung sind so genannte  Entwurfsmuster. Ein Entwurfsmuster besch reibt eine in der Praxisbewährte, generische  Lösung für ein häufig wiederkehrendes Entwurfsproble m und stellt damit eine wieder  verw endbare Vorlage  zur Problem lösung dar. Die gängigstenEntwurfsmuster (Abstrakte Fabrik, Beobachter, ...) lassen sich ganz hervorragend an dem Hamster-Spiele-Beispiel demonstrieren. Zusät zlich zeigen wir ihren Einsatz und ihren Nutzen aber auchnoch an weiteren kleineren Ham ster-Beisp ielen . 9  Andere Programmierlernumgeb ungen  Die Entwicklung von speziellen Programmiersprac hen und Programmierum gebun gen  zum Erlernen der Programmierungreicht weitzurüc k. Ambekanntesten sind die Schildkröten-Graphik mit LOGO [Pa80] und „Karel the Robot“ [PRS 95]. Kare l war auchVorbild für das Hamster-Modell, das seinen Ursprung bereits in den 1980er Jahren hatte [Am87]. Grundlage war damalsdie Programmiersprac he ELAN. Auf diesen Mod ellen aufbauend sind inden letzten Jahren eine Reihe von Nachfolgern entwickelt worden. Einen schönen Überblick überderartige Programmierlernumgebun gen enthält [RNH04].  In diesem  Buch wird mit „Kara dem Marien käfer“ auch ein alternativer Ansatz vorgestellt, bei dem Prog ramme nicht in einer textuellen  Programmiersp rache verfasst,  sondern graphisch als endliche Automaten erstellt werd en.  Die Hauptvorteile aller dieser Modelle undLernumgebungen sind, dass die Befehlssätze  stark eingeschränktsind und sich an beka nnten (spielerischen) Dingen der realen Welt und nicht an technischen Feinheiten von Computern orientieren.Weiterhinwerden die Auswirku ngen der Befeh le mit graphischenMitteln auf dem Bildschirmveranschaulicht, ohne dass sich die Programmieranfä nger mit der Kom plexität der Programmie rung graphischer Benutzungsoberflächen herumschlagen müssen.  An dieser Stelle soll und kann keine Bewertung erfolgen, welche dieser Programmierlernumgebu ngen die beste ist. Jede hat ihre ganz spezi ellen didaktischen Merkmale und Vorteile. Die wesen tlichenVorteile des Java-Ham ster-Mo dells sind sein Umfang(imperative, objektorientierte undparallele Programmieru ng), der in diesem Artik el vorgestellte didaktische Aufb au sowie die ausführlich en Begleitbücher mit vielen Beispielen  und Aufgaben. Als weiteren Vorteil sehen wir auchdie Wahlvon Java als zugrunde liegende Progra mmiersprac he. Programmieran fänger lernen mit demHam ster-Mo dell gleichzeitig  diese moderne Programmiersp rache kennen und nebendem Lösen von Hamster-Prob lemen könnenProgrammieran fänger auchbereits frühzeitig  „echte“ Problememit Java lösen.252 -10  Erfahrungen und F azit  Das Java-Hamster -Modell wird seit nunmehr9 Jahrenbei der Programmier ausbildung von Studienanfängern an der Universität Oldenburg eingesetzt. Durch die dabeigewonnene n Erfahrungen hat es sich inkrementell weiterentwickelt. Ob sein Einsatz den Lernerfolg der Studierenden tatsächlich verbessert hat, ist zwar kaum messbar.  Die Meinungen und Rückmeldungen der Studierenden als auch  vieler anderer Nutzer sindjedoch fast ausnahmslos positiv.  Dabei sei jedoch  anzumerken, dass das Hamster-Mod ell insbesondere für solche Schü ler  und Studierenden gedacht  ist, die sich mit dem Erlernen der Programmierung schwer tun. Denjenigen Programmieranfängern, die keine Probleme haben, wird es durch die geringe Komplexität der Aufgaben schnell langweilig. Sie wollengrößere Anwendu ngen  mit graphischen Oberflächen oder Java-Applets entwickeln. Aus diesem Grund und der Erfahrung,dass auchdie erstgenannte Gruppe mal echte und nicht nurHamster-Probleme lösenwill, sollte das Java-Ham ster-Mo dell nicht ausschließlich, sondernnur motivierendund begleitend zur „richtigen“ Java-Program mierung  eingeset ztwerden.  Literaturverzeichnis  [Am87 ]A mbros, W.: Der Hamster: Progr ammi eren in einer Modellwelt. Metzler, 1987.  [BB04] B oles, D.; Boles, C.: Obje ktorientierte Programmierung spielend gelernt mit dem  Java-Hamster-Modell. Teubner ,2004.  [Bo02] Boles, D.: Progr ammieren spielend gelern t mit dem Java-Hamst er-Modell. Teubn er, 2.  Auflage, 2002.  [Bo03] B oles, D.: Progr ammierkurse für Anfänger  und Fortgeschritt ene. In K. Dittr ich,W. König, A. Ober weis, K. Rannen berg und W. Wahlster, Hrsg., Informatik 2003, P-35 of Lecture Notes in Informatics (LNI) Proceedings, Köllen Druck+Ve rlag GmBH,  Bonn, 2003;  S. 45 49.  [BOM99] du Boulay , B.; O'Shea, T.; Monk, J.: The black box inside the glass box: Presenting computing concepts to novices. Intern ational Journal of Human-Computer Studies,  51(2), 1999; S. 265 – 277.  [Br97] B rusilovsk y, P. et. all.: Mini-lan guage s: A way to learn programming principles. Education and Information Technolo gies, 2(1), 1997; S. 65-83.  [Pa80]  P apert, S.: Mindstorms, children, comput ers and powe rful ideas. Basic Books, New  York, 1980.  [PRS95 ] Pattis, R.; Robert, J.; Stehlik , M.: Karelthe Robot : A Gent le Intro duction  to the Art of Programming.  Wiley, 1995.  [RNH04] Reichert,R.;Nievergelt , J.; Hartmann,W .: Program mieren mit Kara: Ein spielerischer  Zugang zur Informatik. Spring er, 2004. 