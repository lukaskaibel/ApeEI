- 275 -Intuitive Modelle in der InformatikMichael Weigend Holzkamp-Gesamtschule  Willy-Brand t-Str. 2D-58452 Wittenmichael.weige nd@fe rnuni-ha gen.de Abstract:  Bei der Analy se und Kreation  von Programmtexten verwenden wir Intu-itionen , die nicht durch die Programmiersp rache determiniertsind, sondern auf Alltag serfahrungen gründen . Indiesem  Beitrag werden intuitive Modell e zur Be-nennung von Objekten diskutiert und mit der "Python Visual Sandbox" ein metho-discher Ansatz zu ihrer  Erforsch ung vorgestellt. 1  Was sind int uitive M odelle?  Wir verwend en intuitive Modelle der Informatik, wenn wir versuchen, einen Prog ramm-text zu verstehen oder jemandem  zu erklären. We nnwir nach der  Lösung eines Problems suchen und plötzlich vor unserem geistigen Auge die Gestalt einer algorithmischen Idee auftaucht („So müsste es eigentlich klappen!“), so ist das auch ein intuitives Mod ell. Typische Beisp iele für intuitive Modelle aus der Inform atik sind folgendeGedanken: •Objekte kann man benennen und überihren Nam en ansprechen. •Eine Liste ist aufsteig end sortiert, wenn nirgendwo der linke Nachbar größer ist.Nach  Efraim  Fischbein [Fi87] ist eine Intuition einegedankliche Vorstellu ng, die insbe-sonde re folgende Merkmale aufweist: Sie ist selbstevident, das heißt, sie ist unmittelbar einleuchtend und bedarf keiner weiteren Erklärung. Eine Intuition hat Gestalt-Ch arakter. Sie erschein t gewiss und wird deshalb als Grundlage fürEntscheidungen und Handeln verwendet. Menschen sind so sicher, dass ihre Intuitionen stimmen, dass sie berei t sind, das Risiko persönlicher Nachteile einzugehen,wenn sie einer Intuition folgen. Intuitio-nen sind dauerhafte Vorstellungen. Oft werden sie berei ts in der frühen Kindheit gelerntund sind fester Teil der Persönlichkeit. Sie haben etwas Zwanghaftes. Nicht selten sindintuitive Mode lle unbe wusst und bestim men unser Denke n und Handeln ohne dass wir es merken.  Wir verwende n hier den Begriff „intuitives  Modell“ an Stelle von Intuition, um den Modellcharakter deutlicher zu betonen. Es geht darum,Aspekte der Wirklichkeit ge-danklich abzubilden. Andrea diSessa beschreib t besonders grundlegende intuitive Mo-delle, die er phänomenologische Prim itive oder kurz p-primes nennt. Eine solche Intuiti-on ist z. B. das Konzept des Widerstandes, das zur Erklärung mechan ischer, elektrischeroder psychologischer Phänomene Anwendung findet. P-Primes basieren in hohem  Maßeauf persönlichen sensorischen Erfahrungen und sind inder Regel sofundamental, dassman sie kaumin Worte kleiden kann [Se01]. - 276 -2  Intuitiv e Modelle sichtbar machen – die Python Visual Sandbox Wie findet man heraus, welche intuitivenModelle Informatik  Schüler/innen verwenden ?Ein Ansat z sind„Teac h back“-Befragungen. Dabei werden die Teilnehmer aufgefordert, in die Lehrerrolle zu schlüpfen und best immte Sachv erhalte mit Hilfe von selbst angefer-tigten Textenund Bildern zu erklären [Ve94]. Eine zwei te Methode sind individuelleInterviews (z. B. [Ch96], [Ch01]), beidenen verborgene Vorstellungen durch eine ge-schickte Gesp rächsführung ans Licht geholt werden. Dritten s gibt es Untersu chungen, in dene n aus beobac htetem Verhal ten (Bevorzugung bestimmter Programmkonstrukte,Fehler etc.) auf die interne Verwe ndung bestimmter mentaler Konzepte rückgeschlossenwird. In diesem Fall ist das vermutete Konzep t inhaltlich das Prod ukt des Untersu chen-den. Es besteht dann natürlich die Möglichkeit, dass die Interpretation des Experimenta-tors falsch ist und inWahrh eit andere interne Überlegungen zudem beobacht eten Ver-halten geführt haben.Einanderer Weg  der Erforsch ungintuitiver Mod elle wird mit der Python Visu al Sand -box(PVS) beschritten. Die PVS ist eineüber das Internet erreichb are Sammlu ngvonSpielen und Experimentierumgebun gen zur Veranschaulichungund zum Auspr obierenvorgegebener oder selbst geschri ebener Python-Programme. Sie enthält über hundertAnimationen, kleineFilme mit Grafik en und textuellen Elementen, die untersch iedlicheintuitive Modelle zur Arbeitsweise von Prog ramm en verwend en. Wer mit der PVS spielt, setzt in verschiedenen Kontexten und auf verschieden e Weise diese Animationen(und die enthalten enIntuitionen) mit formalem Programm text in Bezieh ung.  Eine Gruppe der PVS-Applikationen heißtPython Visual. Hier wird ein kurzer Pro-gram mtext vorgege ben – eventuell nur eine einzige Anweisung. Der Spieler betrachtetverschiedene Modelleund beantwortetverschiedene Fragen . Beisp iel: Welch eAnimati-on würden Sie verwenden, wenn Sie jemandem die Arbeitsweise des Programms erklä-ren müssten?Eine Weiterentwick lungist das Python Quiz. Hier analysieren die Spieler einen Pro-grammtext Zeile für Zeile und entscheiden,ob ein Mod ell zu der jeweiligen Anweisung passt  oder nicht. Dabei haben sie die Möglichkeit, Punkte zu setzen, die sie gewi nnenoder verlieren können. Auf diese Weise kannein Beobacht er abschätze n, wie siche r sichein Spieler bei seiner Beurteilung ist.   Ein  Python Puzzle ist eine Art Editor, bei demman aus vorgege benen Programmzeile n („Bausteine“) durch Bewegen mit der Maus einen Programmtext zusam mensetzt (Abbil-dung 1). Das „gepuzzel te“ Programm kann jederzeit getestet werden. In einem Ausgabe-fenster wird das Ergebnis des Programmlau fs dargestellt. Die Aufg abe ist, eine Funk tionzu definieren (z. B. Sortieren einer Liste).  Erst wenn die Funktion das erwartete Erge b-nis liefert, gibt es Punkte unddie nächste Aufg abe ersch eint. Die intuitiv en Modelle werdenhier inForm  von "Tipps" dargeboten, die ein Spieler abrufen kann, wenn er oder sie nicht weiter kommt. ImHindergrund sammelt die PVS versc hiedene Daten der Sit-zung und speichert sie zur späteren Auswertung auf dem Server. Registriert werden z. B. Bewertungen von Tipps, Reaktio nszeiten und Fehler. - 277 -Abbildung 1: Screenshot aus einem Python Puzzle. Rechts gibt es einen  Vorrat an"Bausteinen" , die auf der Arbeitsfläch e links zueinem P rogrammtext zusamm engebaut werden können. 3  Intuitive Modelle zur Benennung von Objekten Wir diskutieren  nun einige intuitive Mod elle, die sich um die Benennung  von Objektendrehen. UmM issverst ändnissezu vermeiden, seidarauf hingewiesen, dass wir hier denBegriff Obje kt in zwei Bedeutungen verwenden: Erstens in einem allgemeinen Sinne als Entität in einer realen oder gedankliche n Welt und zweitens  in der progra mmtechnische n Bedeutung (Einheit von zusamme ngehö rigen Daten und auf diesen arbeitenden Operati-onen).  Nam en für Objekte der Realwelt (z. B. Gegenstände, Personen, Ereigni sse) werden in früher Kindheit gelernt. Sie ermöglichen die interne gedankliche Repräsent ation derexternen Welt– nach Piaget der Beginn der Intellig enz. Nam en haben verschiedene Funktionen. Sie identifizieren ein Objekt, ermöglichen den Zugriff (Adressierungsfunk-tion), bringen die Funktion des Objektes innerhalb eines Kontextes zum Ausdruck und repräsentieren somit auch Beziehungen zwischen Objekten. Namen können explizit, aber auch implizit sein. Sokann man eineStecknad el auf einer Landkarte als Nam e für einen Ort auffasse n. 3.1  Variablennam en In Computerprogrammen werden Nam en imZusam menhang  mit Variablen verwendet.Eine bekannte Intuition für Variablen ist die Vorstellung eines Behälters für Daten (Be-hälterm odell). Der Behälter – z. B. eine Schach tel - ist mit einem Etikett versehen, das den Variablennamen trägt. Eine Zuweisung der Formx = 1 wird so interpretiert, dass der Behälter mit Nam en (Etikett) x mit einem neuen Inhalt,- 278 -einer R epräsentation de r  Zahl1 gefüllt wird. Der vorigeInhalt wird dabei vernichtet.  Ein alternatives intuitives Modell sieht eine Zuweisun g als Benennung. Der Variab len-name kann als Nam e eines Objektes interpretiertwerden (Namenmodell). Im obigenBeispiel wird der Zahl1 Namex zugeor dnet. Anschaulich kann man sich eine Benen-nung so vorstellen: Man zeichnet  einen Pfeil von dem Namen zum Objekt oder etiket-tiert ein Objekt mit einem Zettel, das einen Namen trägt.Was sind die Unterschiede zwisch en beiden intuitiven Modellen? Ein Objekt kann erst bena nnt werden, wenn es existiert. Dage gen kann ein Behälter auch leer sein. Insofernunterstützen nicht-typisierendeProgrammiersprachen, wie z. B. Python, eher das Na-mensmodell. Denn erst mit einer Zuweisung (= Benennung) wird ein neuer Nam e einge-führt.Dagegen kann man sich eine Variablendeklaration bei Java oder Pascal so vorstel-len, dass ein zunächst leerer Behälter bereitgestellt wird, der erst später mit Inhalt gefülltwird. Gravierende Unterschiede werdensichtbar, wennman folgende Anweisungsfolge inter-pretiert. x = 1 y = x Im Namenmodell erhäl t das Objekt1 nun einen zweiten Nam en, nämlich y. Das ent-spricht vollkommen  dem Alltagsgebrauch vonNamen. Für einund dasselb eObjekt der Realität werd en häufigverschiedene Namen verwend et. Wend et man das Behälterm odellkorrekt an, soergibt sich folgende Interpretation: Der Inhalt der Variablen (= Behälter)xwird kopiert und in derVariablen y gespeichert. Abbildung 2: Modelle für Mehrfachnamen Bei unveränderbaren Objekten, wie z. B. Zahlen, ist diese Vorstellungunproblematisch. Schwierig wirdes, wenn essich umänder bare Objekte handelt, wie z. B. Liste n(Python). Solche Objekte können ihren internen Zustand ände rn. Betrachten wir die folgende Python-Anweisungsfolge: s = [1, 1, 1] t = s s[0] = 5 print t - 279 -Die Ausgabe auf dem Bildsc hirm lautet [5, 1, 1]un d nichtetwa [1, 1, 1]. Die-ses Verhalten lässt sich mit dem Nam enmodell leicht erklären. Bei der Zuweisun g t=serhäl t das Listenobjekt einen zweiten Nam en, nämlich t(Abbildung 3links). In der Zuweisung s[0]=5 wird das erste Element des Listenobje ktes an die Zahl 5 gebunden. Das Listeno bjekt hat seine Identität behalten, so dass t der Nam e des inzwisch en geän-derten Objektes ist.Abbildung. 3: Konsistentes Zeigermodell für die Veränderung  einer Liste mit zwei NamenVerwendet man das Behältermodell, so muss die Zuweisung t=s als eine Art Kopier-vorgang interpretiert werd en. Es entsteh t einneuer Behälter mit Etikett t, der den glei-chen Inhalt wie s hat (Abb ildung 4 links). Allerd ings ist der Behälter t keine Kopie imüblichen Sinne. Stattdessen handelt es sich um zwei Erschei nungen des gleichen Objek-tes. Jede Veränderung von s –wie z. B. die Neubelegung der ersten Kammer mit derZahl 5 - wirdauf magische Weise ebenfalls mit t ausgeführt (Abbildung 4 recht s). Abbildung 4: Behälter modell für die Veränderung  einer Liste mit zwei Namen  (Erscheinungsmodell) . 3.2  Mischung von Namensmod ellen – die Frage der KonsistenzAbbildung 5 zeigt Screenshots aus versc hiedenen Animationen,die die Arbeitsweiseeiner Iteration  der folgenden Form(Pytho n) modellieren :for (n, a) in personen: tue etwas Das erste Modell verwe ndet konsequentdas Nam ensmodell, wobei Namen durch Zeigerdargestellt werd en. In der zweiten Animation werd enalle Variab len durchBehälter dar-- 280 -gestellt. Nach  und nach werden  Kopien der Daten aus demBehälter personen h eraus-genommen und in die Behälter n und agelegt. Die dritte Animation schließ lich verwen-det eine Kombination aus Zeigern und Behälte rn. Die Zeiger n unda „wande rn“ über den Listenbehälter und zeigen nachund nach auf die Zet tel inden Fächern.Abbildung 5:  Modelle für eine Iteration über eine Liste von Paaren Informale Befragungen von Schülern zeigen, dass trotz seiner Inkonsistenz häufig gera-de das dritte Modell zur Besch reibung der Iteration bevorzugt wird. Der Grund könntedarin liegen, dass es einhäufig vorkommen de Alltagssituatio n wied ergibt: Man durch-sucht z. B. Bücher im Bücherre gal, indem man nachei nander einen Blick auf jedes Buchwirft, ohne es zu bewegen.Das dritte Modell in Abbildung 5 repräsen tiert also ein intui-tives Mod ell, eine Metaph er für einenvertrau tenAblauf. Das gilt für die anderen Model-le nicht. Konsisten zkann also im Widerspruch  zuIntuitivität liegen.Im Zusam menhan g mit Benutzungsoberflächen hat Grudin (1989)beobachtet, dass esnicht imme r auf die interneKonsistenz des konze ptuellen Modells ankommt. Anal ogienzur Realwelt sindhäufig wich tiger für die Qualität eines User Interfaces hinsich tlich Erlern barkeit und „intuitive“ Anwen dbarkeit in neuen Situationen. 3.3  Wem gehört ein Name ? Wen n ich einen Menschen mit seinem Namen anspreche, um ihm eine Botschaft zu-kommen zu lassen, gehe ich davon aus, dass die Angesprochene den Namen kennt.Der Nam e, der imPersonalausweis steht, wird als Eigentum des Benannten gesehen. Er ist Teil der persönlich enDaten und das Besitzrech t ist sogar durch Gesetze geschützt.  Andererseits existieren  im Alltag  auchNamen , die dem benanntenObjekt unbekanntsind. Zum  Beispiel erfinden Schüler hinter demRücken ihrer Lehrer Spitznamen für sie.- 281 -Diese Nam en gehören den Individuen, die sie verwenden.Sie eignen sich zur Identifika-tion eines Objektes, nicht aber zur Kom munikation mit ihm.Auch im Zusammen hang mit Nam en in Com puterprogrammen  werden beide intuitiven Modelle verwendet.Die Botschaft smetapher der Objektorientierten Programmierungunterstützt eher die Vorstellung, dass ein Objekt seinen Namen kennt. Denn es muss aus vielen kommunizierten Botschaften die herausfinden, die an es gerichtet sind. In Modellen zur Veranschaulichung von Computerprogrammen können Nam en durch Pfeile oder Etiketten  visualisiert werd en. Das Etikett klebt an einem Objekt undgehörtihm damit. Andererseitskann man nicht mehr erkennen,wer das Etikett angeklebtund so die Benennung vorgenomme n hat. Beim Pfeil dage gen sind Nam e und Objekt räum-lich getrennt. Der Pfeil beginnt bei einemNamen und dieser Nam e kann wiederum Att-ribut eines anderen Objektes sein. Hier wird also der Besitzer des Namens mit darge-stellt. 3.4  Namen  und Rollen Nam en haben Bedeutungen und sie werdenin guten Programmen so gewähl t, dass die Bedeutung erkennbar ist. In einem Funktionsaufruf können als Argumente (Positio nsar-gumente) andere Nam en verwendetwerden, als inder Liste der formalen Parameter inder Funktionsdefin ition. def  quadrat (n):    return n*n seitenlaenge = input() flaeche = quadrat (seitenlaenge)Mehrfache Namen  kommen auch im Allta g vor ("Ma ma", "Frau  Müller", "Mon ika"). Dam it wird meist zum Ausdruckgebracht, dass ein unddassel be Objekt verschiedene Rollen spielt. Offenb ar ist das Konzept des Namens eng mit dem Rollenkonzept verbun-den,das heißt mit der Tatsache, dass einObjekt in verschiedene „soziale“ Kontexteeingebunden sein kann.  Im obigen Programmbeispiel wird ein Zahlenobjekt,das zur Laufzeit über die Tastatureingegebe n wird, mit zwei  unterschiedlichen Nam en belegt. Im Hauptprogramm reprä-sentiertes die Seitenlängeeines Quadrats. Innerhalb der Definition der Funktion quad-rat()wi rddas gleiche Objekt durch den Namen nreferenziert. Hier wird das Objekt nicht mehr als Seitenlänge einer Fläche gesehen, sondern als abstra ktes mathe matische sObjekt. Es steht in einem anderenKontext. Es spielt eineandere Rolle. Namensgebungist ein Teil der Modellbildung. Betrac htet man ein Progra mm als System von miteinan-der verwobenen Miniaturmodellen, so wirdüber Mehrfachbenennung ein und dassel be Objekt zum Bestandteil mehrerer M iniaturmodelle.  Jorm a Sajan iemi (2002) hatein System von „Rollen“, die Variablen in einem Program mspielen können, entwick elt undgibt für jede Rolle eine Visu alisierun g an. Typische- 282 -Rollen, die in Programmbeispielen von Anfänger-Lehrbüchern vorkommen, sind:•Stepper: EineVariab le, die mit einem Anfangswert initialisiert wird unddie imLaufe einer Rechnung eine bestimmte Folge von Werten durchlaufen kann. Ein Zähler, der in einer Schleife inkrem entiert  wird, ist ein Beisp iel für einen Step-per.•Most-wanted holder: Eine Variable, die den besten bisher gefundenenWert ent-hält. Zum Beispiel braucht man beider Suche nachdemMinimum in einer Se-quenz ei nen most-wanted-holder für das bisher gefundenekleinsteObjekt. Oft steck t hinter einer Rolle ein intuitives Modell, das Bestandteil einer Problemlösungist.Wenn ich einen Algorithmus fürdie Suche nachdem Minimum in einer unsortiertenSequenz  entwickle und auf die Idee komme, einen most-want ed holder zu verwenden,habe  ich bereits einen Tei lder Lösunggefunden.  Auf der anderen Seite sind Rollen konzepte für Variablen „sehr dicht amProgrammtext“. Sajaniemi verwendet seine Visualisierungen für die (halbautomatische) Veransc hauli-chung von Program men. Das Gesam tsystem aus Rollendarstellungen ist zwar eine Ver-ständnishilfe, aber es ist zukomplex, um intuitiv zu sein. Ein intuitives Mod ell, das ineiner zusammenhängenden Gestalt die Idee eines Algorithmus wiederge ben soll, ist oftabstrakter und deutet Variablen nur an. Abbildung 6 zeigt Screenshots versc hiedenerAnim ationen aus der Python Visual Sandbox , die die „in place“-Sortierung einer Listenach  dem  Verfahrender direkten Auswahl (straight selection) veranschaulichen.s = [10, 4, 1, 3] for i in range(len(s)):     for j in range(i+1, len(s)):          if s [j] < s[i]:               s[i], s[j] = s[j], s[i] Die Laufvariablen i undj sind Stepper in Sajaniem is Systematik. Sie werde n im ersten Modell entsprech end seinemVorsch lag durch Papierstreif en mit Zahlen dargestellt, auf dene n die aktuelle Zahldurch ein „Sichtfenster“ hervorgehoben wird. In den beidenfolgenden Animationen werden i und j durch Zeiger und Marken repräsentiert. IhreRolle ergibt sich allein aus dem Kontext der Animation. Die vierte Animatio n geht noch einen Schritt weiter. Hier wird die Existenzvon Steppernnicht explizit erwähn t, sondern nur dadurch angede utet, dass immer zwei  Karten ein Stück aus der Kiste herausgezo gen sind.  Die Kunst der Entwick lung eines Programm s auf der Basis eines intuitiven Mod ells für den Lösungsansatz liegt inder Verfeinerung,d. h. Entfaltung der im Ausgangsmodell nur angedeuteten Facet ten. Im letzten Beispielmuss man noch auf die Idee kommen, die Indexe der durch Herausziehen markiertenDatenobjekte explizit zu benennen und ent-sprec hende Variablen einzuführen. - 283 -Abbildung 6: Modelle für die Sortierung  einer Liste nach dem Algorithmus straig ht selection  4  Intuitiv e Modelle im Unterricht thematisieren Intuitive Mode lle können für das Verständni s der Semantik eines Program mtextes unge -eignet sein. Man bezeichnet sie dann als Fehlvorstellung (misconception). Unbewusste Fehlvorstellungen können Problemlösungen und den Erwerb neuen Wissens behindern.Deshalb  wird gelegentlich gefordert, imSchu lunterricht müssten  Fehlvorstellun gendurch bessere (wissen schaftlich e) Konzepte ersetzt werd en. DiSessa u. a. (Smith , diSessa und Roschelle  1993, vgl. auchdiSessa 2001) kritisieren diese Auffassung . Sie argumen-tieren konstruktivistisch und weisen darauf hin, dasshinterFehlvorstellungen fundamen-tale Konze pte stecken , die sich in vielen Lebenssituationen bewährt haben. Außerdemwird durch das Erlernen eines neue n elaborierteren Konzeptes das alte nicht vergessen.In Lernp rozessen werd en zuvor gelernte intuitive Modelle nicht ersetzt, sond ernnur ergänzt. Das R epertoire wird größer.Ein intuitives Modell ist niemals per se falsch. Es kann allerdings irrefüh rend sein, wennes in einem bestimmten Kontext falsch angewendetwird. So kann die Behälteranal ogiefür Varia blen zu derfalsc hen Vorstellun g führen,dass bei einer Zuweisungder Form x = y der Inhalt des Behälters x inden Behälter x wandertundy anschließend leer ist. Dam it ist die Behälter-In tuition aber nicht generell schlecht. In anderenKontexten ist sie sinnvoll und leistu ngsfähig. Worauf es ankommt, ist die inspi rierende Kraft, aber auch die Grenzen und Fallstric ke intuitiver Modelle zu kennen. Sitzungenmit der PVS, die Schü lerinnen  und Schüler meist zu mehreren  am Rechner  durchführen, sindvon ausgiebigen Diskussionenderdargebotenen Visualisierungen begleitet. Derartige Übungen könnten eine sinnvolleErgänzung eines ansonsten projektorientierten  Informatikunterrich tes sein, weil sie zu einer kritisch enAuseinandersetzu ng mit den eigenen intuitiven Modellen anregenund so zu ei nem vertieften Verständnis der Semantik formaler Programm texte führenkönnen. - 284 -Literaturv erzeichnis [Ch96] C hiu, Ming Ming: Explor ing the origins, uses and interactions of students intuitions.In: Journal for Research  in Math ematical Education 27 (1996) , S. 478-504. [Ch0 1] Chiu , Ming  Ming: Using Metaphors to understand and solve arithmetic problems:Novices and experts working with negative numbers. In: Mathematical Thinki ng andLearning, 3.3 (2001), S. 93-124. [Fi87] F ischbein, Efraim:Intuition in Mathem atics and Science, Dord recht Boston LancasterTokyo 1987. [Gr89] G rudin, Jonath an: The Case Against User Interface Consistenc y. In: Communications of the ACM. Oktober 1989  Vol. 32. S. 1164-117 3. [Sa02] S ajani emi, Jorm a: Visuali zing Roles of Variab les to Novice Program mers. In: Kuljis,J.; Baldwi n, L.; Scoble , R. (Hrsg.): Proc PPIG 14, Brunel Univ ersity  2002. [Se01] diSessa, Andrea: Chan ging Mind s. Cambridge, London (MIT Press) 2001. [SSR93 ] Smith, John P.; diSessa, Andrea A.; Rosc helle, Jeremy: Misconceptions Recon ceived: A Constructivist Analysis of Knowledge in Transition. In: Journal of the Learning  Sci-ences, Vol. 3 (1993/94) Nr. 2. [Ve94] van der Veer, Gerrit C.: Mental Models of Computer Systems: Visual Languag es in the Mind. In: Tauber, M. J.; Mahling, D.E.; Arefi, F.(Hrsg.): Cognitive Aspect s of Visual Languages and Visual Interfaces. Amst erdam Lond on New York  Tokyo (North-Holland) 1994, S. 3 ff. [We04] W eigend, Michael: Objektor ientie rte Progr ammierung mit Python. Bonn (MITP) 2004. [We05] Weigend, Michael: Python-Gepackt. Bonn (MITP) 2. Aufl. 2005 . - 275 -Intuitive Modelle in der Informatik Michael Weigend  Holzkamp-Gesamtschule   Willy-Brand t-Str. 2 D-58452 Witten michael.weige nd@fe rnuni-ha gen.de  Abstract:  Bei der Analy se und Kreation  von Programmtexten verwenden wir Intu- itionen , die nicht durch die Programmiersp rache determiniertsind, sondern auf  Alltag serfahrungen gründen . Indiesem  Beitrag werden intuitive Modell e zur Be- nennung von Objekten diskutiert und mit der "Python Visual Sandbox" ein metho- discher Ansatz zu ihrer  Erforsch ung vorgestellt.  1  Was sind int uitive M odelle?   Wir verwend en intuitive Modelle der Informatik, wenn wir versuchen, einen Prog ramm- text zu verstehen oder jemandem  zu erklären. We nnwir nach der  Lösung eines Problems  suchen und plötzlich vor unserem geistigen Auge die Gestalt einer algorithmischen Idee  auftaucht („So müsste es eigentlich klappen!“), so ist das auch ein intuitives Mod ell.  Typische Beisp iele für intuitive Modelle aus der Inform atik sind folgendeGedanken:  •Objekte kann man benennen und überihren Nam en ansprechen.  •Eine Liste ist aufsteig end sortiert, wenn nirgendwo der linke Nachbar größer ist. Nach  Efraim  Fischbein [Fi87] ist eine Intuition einegedankliche Vorstellu ng, die insbe- sonde re folgende Merkmale aufweist: Sie ist selbstevident, das heißt, sie ist unmittelbar  einleuchtend und bedarf keiner weiteren Erklärung. Eine Intuition hat Gestalt-Ch arakter.  Sie erschein t gewiss und wird deshalb als Grundlage fürEntscheidungen und Handeln  verwendet. Menschen sind so sicher, dass ihre Intuitionen stimmen, dass sie berei t sind,  das Risiko persönlicher Nachteile einzugehen,wenn sie einer Intuition folgen. Intuitio- nen sind dauerhafte Vorstellungen. Oft werden sie berei ts in der frühen Kindheit gelernt und sind fester Teil der Persönlichkeit. Sie haben etwas Zwanghaftes. Nicht selten sind intuitive Mode lle unbe wusst und bestim men unser Denke n und Handeln ohne dass wir  es merken.   Wir verwende n hier den Begriff „intuitives  Modell“ an Stelle von Intuition, um den  Modellcharakter deutlicher zu betonen. Es geht darum,Aspekte der Wirklichkeit ge- danklich abzubilden. Andrea diSessa beschreib t besonders grundlegende intuitive Mo- delle, die er phänomenologische Prim itive oder kurz p-primes nennt. Eine solche Intuiti- on ist z. B. das Konzept des Widerstandes, das zur Erklärung mechan ischer, elektrischer oder psychologischer Phänomene Anwendung findet. P-Primes basieren in hohem  Maße auf persönlichen sensorischen Erfahrungen und sind inder Regel sofundamental, dass man sie kaumin Worte kleiden kann [Se01]. - 276 -2  Intuitiv e Modelle sichtbar machen – die Python Visual Sandbox  Wie findet man heraus, welche intuitivenModelle Informatik  Schüler/innen verwenden ? Ein Ansat z sind„Teac h back“-Befragungen. Dabei werden die Teilnehmer aufgefordert,  in die Lehrerrolle zu schlüpfen und best immte Sachv erhalte mit Hilfe von selbst angefer- tigten Textenund Bildern zu erklären [Ve94]. Eine zwei te Methode sind individuelle Interviews (z. B. [Ch96], [Ch01]), beidenen verborgene Vorstellungen durch eine ge- schickte Gesp rächsführung ans Licht geholt werden. Dritten s gibt es Untersu chungen, in  dene n aus beobac htetem Verhal ten (Bevorzugung bestimmter Programmkonstrukte, Fehler etc.) auf die interne Verwe ndung bestimmter mentaler Konzepte rückgeschlossen wird. In diesem Fall ist das vermutete Konzep t inhaltlich das Prod ukt des Untersu chen- den. Es besteht dann natürlich die Möglichkeit, dass die Interpretation des Experimenta- tors falsch ist und inWahrh eit andere interne Überlegungen zudem beobacht eten Ver- halten geführt haben. Einanderer Weg  der Erforsch ungintuitiver Mod elle wird mit der Python Visu al Sand - box(PVS) beschritten. Die PVS ist eineüber das Internet erreichb are Sammlu ngvon Spielen und Experimentierumgebun gen zur Veranschaulichungund zum Auspr obieren vorgegebener oder selbst geschri ebener Python-Programme. Sie enthält über hundert Animationen, kleineFilme mit Grafik en und textuellen Elementen, die untersch iedliche intuitive Modelle zur Arbeitsweise von Prog ramm en verwend en. Wer mit der PVS  spielt, setzt in verschiedenen Kontexten und auf verschieden e Weise diese Animationen (und die enthalten enIntuitionen) mit formalem Programm text in Bezieh ung.   Eine Gruppe der PVS-Applikationen heißtPython Visual. Hier wird ein kurzer Pro- gram mtext vorgege ben – eventuell nur eine einzige Anweisung. Der Spieler betrachtet verschiedene Modelleund beantwortetverschiedene Fragen . Beisp iel: Welch eAnimati- on würden Sie verwenden, wenn Sie jemandem die Arbeitsweise des Programms erklä- ren müssten? Eine Weiterentwick lungist das Python Quiz. Hier analysieren die Spieler einen Pro- grammtext Zeile für Zeile und entscheiden,ob ein Mod ell zu der jeweiligen Anweisung  passt  oder nicht. Dabei haben sie die Möglichkeit, Punkte zu setzen, die sie gewi nnen oder verlieren können. Auf diese Weise kannein Beobacht er abschätze n, wie siche r sich ein Spieler bei seiner Beurteilung ist.    Ein  Python Puzzle ist eine Art Editor, bei demman aus vorgege benen Programmzeile n  („Bausteine“) durch Bewegen mit der Maus einen Programmtext zusam mensetzt (Abbil- dung 1). Das „gepuzzel te“ Programm kann jederzeit getestet werden. In einem Ausgabe- fenster wird das Ergebnis des Programmlau fs dargestellt. Die Aufg abe ist, eine Funk tion zu definieren (z. B. Sortieren einer Liste).  Erst wenn die Funktion das erwartete Erge b- nis liefert, gibt es Punkte unddie nächste Aufg abe ersch eint. Die intuitiv en Modelle  werdenhier inForm  von "Tipps" dargeboten, die ein Spieler abrufen kann, wenn er oder  sie nicht weiter kommt. ImHindergrund sammelt die PVS versc hiedene Daten der Sit- zung und speichert sie zur späteren Auswertung auf dem Server. Registriert werden z. B.  Bewertungen von Tipps, Reaktio nszeiten und Fehler. - 277 - Abbildung 1: Screenshot aus einem Python Puzzle. Rechts gibt es einen  Vorrat an"Bausteinen" ,  die auf der Arbeitsfläch e links zueinem P rogrammtext zusamm engebaut werden können.  3  Intuitive Modelle zur Benennung von Objekten  Wir diskutieren  nun einige intuitive Mod elle, die sich um die Benennung  von Objekten drehen. UmM issverst ändnissezu vermeiden, seidarauf hingewiesen, dass wir hier den Begriff Obje kt in zwei Bedeutungen verwenden: Erstens in einem allgemeinen Sinne als  Entität in einer realen oder gedankliche n Welt und zweitens  in der progra mmtechnische n  Bedeutung (Einheit von zusamme ngehö rigen Daten und auf diesen arbeitenden Operati- onen).   Nam en für Objekte der Realwelt (z. B. Gegenstände, Personen, Ereigni sse) werden in  früher Kindheit gelernt. Sie ermöglichen die interne gedankliche Repräsent ation der externen Welt– nach Piaget der Beginn der Intellig enz. Nam en haben verschiedene  Funktionen. Sie identifizieren ein Objekt, ermöglichen den Zugriff (Adressierungsfunk- tion), bringen die Funktion des Objektes innerhalb eines Kontextes zum Ausdruck und  repräsentieren somit auch Beziehungen zwischen Objekten. Namen können explizit, aber  auch implizit sein. Sokann man eineStecknad el auf einer Landkarte als Nam e für einen  Ort auffasse n.  3.1  Variablennam en  In Computerprogrammen werden Nam en imZusam menhang  mit Variablen verwendet. Eine bekannte Intuition für Variablen ist die Vorstellung eines Behälters für Daten (Be- hälterm odell). Der Behälter – z. B. eine Schach tel - ist mit einem Etikett versehen, das  den Variablennamen trägt. Eine Zuweisung der Form x = 1  wird so interpretiert, dass der Behälter mit Nam en (Etikett) x mit einem neuen Inhalt,- 278 -einer R epräsentation de r  Zahl1 gefüllt wird. Der vorigeInhalt wird dabei vernichtet.   Ein alternatives intuitives Modell sieht eine Zuweisun g als Benennung. Der Variab len- name kann als Nam e eines Objektes interpretiertwerden (Namenmodell). Im obigen Beispiel wird der Zahl1 Namex zugeor dnet. Anschaulich kann man sich eine Benen- nung so vorstellen: Man zeichnet  einen Pfeil von dem Namen zum Objekt oder etiket- tiert ein Objekt mit einem Zettel, das einen Namen trägt. Was sind die Unterschiede zwisch en beiden intuitiven Modellen? Ein Objekt kann erst  bena nnt werden, wenn es existiert. Dage gen kann ein Behälter auch leer sein. Insofern unterstützen nicht-typisierendeProgrammiersprachen, wie z. B. Python, eher das Na- mensmodell. Denn erst mit einer Zuweisung (= Benennung) wird ein neuer Nam e einge- führt.Dagegen kann man sich eine Variablendeklaration bei Java oder Pascal so vorstel- len, dass ein zunächst leerer Behälter bereitgestellt wird, der erst später mit Inhalt gefüllt wird.  Gravierende Unterschiede werdensichtbar, wennman folgende Anweisungsfolge inter- pretiert.  x = 1  y = x  Im Namenmodell erhäl t das Objekt1 nun einen zweiten Nam en, nämlich y. Das ent- spricht vollkommen  dem Alltagsgebrauch vonNamen. Für einund dasselb eObjekt der  Realität werd en häufigverschiedene Namen verwend et. Wend et man das Behälterm odell korrekt an, soergibt sich folgende Interpretation: Der Inhalt der Variablen (= Behälter) xwird kopiert und in derVariablen y gespeichert.  Abbildung 2: Modelle für Mehrfachnamen  Bei unveränderbaren Objekten, wie z. B. Zahlen, ist diese Vorstellungunproblematisch.  Schwierig wirdes, wenn essich umänder bare Objekte handelt, wie z. B. Liste n (Python). Solche Objekte können ihren internen Zustand ände rn. Betrachten wir die  folgende Python-Anweisungsfolge:  s = [1, 1, 1]  t = s  s[0] = 5  print t - 279 -Die Ausgabe auf dem Bildsc hirm lautet [5, 1, 1]un d nichtetwa [1, 1, 1]. Die- ses Verhalten lässt sich mit dem Nam enmodell leicht erklären. Bei der Zuweisun g t=s erhäl t das Listenobjekt einen zweiten Nam en, nämlich t(Abbildung 3links). In der  Zuweisung s[0]=5 wird das erste Element des Listenobje ktes an die Zahl 5 gebunden.  Das Listeno bjekt hat seine Identität behalten, so dass t der Nam e des inzwisch en geän- derten Objektes ist. Abbildung. 3: Konsistentes Zeigermodell für die Veränderung  einer Liste mit zwei Namen Verwendet man das Behältermodell, so muss die Zuweisung t=s als eine Art Kopier- vorgang interpretiert werd en. Es entsteh t einneuer Behälter mit Etikett t, der den glei- chen Inhalt wie s hat (Abb ildung 4 links). Allerd ings ist der Behälter t keine Kopie im üblichen Sinne. Stattdessen handelt es sich um zwei Erschei nungen des gleichen Objek- tes. Jede Veränderung von s –wie z. B. die Neubelegung der ersten Kammer mit der Zahl 5 - wirdauf magische Weise ebenfalls mit t ausgeführt (Abbildung 4 recht s).  Abbildung 4: Behälter modell für die Veränderung  einer Liste mit zwei Namen   (Erscheinungsmodell) .  3.2  Mischung von Namensmod ellen – die Frage der Konsistenz Abbildung 5 zeigt Screenshots aus versc hiedenen Animationen,die die Arbeitsweise einer Iteration  der folgenden Form(Pytho n) modellieren : for (n, a) in personen:  tue etwas  Das erste Modell verwe ndet konsequentdas Nam ensmodell, wobei Namen durch Zeiger dargestellt werd en. In der zweiten Animation werd enalle Variab len durchBehälter dar-- 280 -gestellt. Nach  und nach werden  Kopien der Daten aus demBehälter personen h eraus- genommen und in die Behälter n und agelegt. Die dritte Animation schließ lich verwen- det eine Kombination aus Zeigern und Behälte rn. Die Zeiger n unda „wande rn“ über  den Listenbehälter und zeigen nachund nach auf die Zet tel inden Fächern. Abbildung 5:  Modelle für eine Iteration über eine Liste von Paaren  Informale Befragungen von Schülern zeigen, dass trotz seiner Inkonsistenz häufig gera- de das dritte Modell zur Besch reibung der Iteration bevorzugt wird. Der Grund könnte darin liegen, dass es einhäufig vorkommen de Alltagssituatio n wied ergibt: Man durch- sucht z. B. Bücher im Bücherre gal, indem man nachei nander einen Blick auf jedes Buch wirft, ohne es zu bewegen.Das dritte Modell in Abbildung 5 repräsen tiert also ein intui- tives Mod ell, eine Metaph er für einenvertrau tenAblauf. Das gilt für die anderen Model- le nicht. Konsisten zkann also im Widerspruch  zuIntuitivität liegen. Im Zusam menhan g mit Benutzungsoberflächen hat Grudin (1989)beobachtet, dass es nicht imme r auf die interneKonsistenz des konze ptuellen Modells ankommt. Anal ogien zur Realwelt sindhäufig wich tiger für die Qualität eines User Interfaces hinsich tlich  Erlern barkeit und „intuitive“ Anwen dbarkeit in neuen Situationen.  3.3  Wem gehört ein Name ?  Wen n ich einen Menschen mit seinem Namen anspreche, um ihm eine Botschaft zu- kommen zu lassen, gehe ich davon aus, dass die Angesprochene den Namen kennt.Der  Nam e, der imPersonalausweis steht, wird als Eigentum des Benannten gesehen. Er ist  Teil der persönlich enDaten und das Besitzrech t ist sogar durch Gesetze geschützt.   Andererseits existieren  im Alltag  auchNamen , die dem benanntenObjekt unbekannt sind. Zum  Beispiel erfinden Schüler hinter demRücken ihrer Lehrer Spitznamen für sie.- 281 -Diese Nam en gehören den Individuen, die sie verwenden.Sie eignen sich zur Identifika- tion eines Objektes, nicht aber zur Kom munikation mit ihm. Auch im Zusammen hang mit Nam en in Com puterprogrammen  werden beide intuitiven  Modelle verwendet.Die Botschaft smetapher der Objektorientierten Programmierung unterstützt eher die Vorstellung, dass ein Objekt seinen Namen kennt. Denn es muss aus  vielen kommunizierten Botschaften die herausfinden, die an es gerichtet sind.  In Modellen zur Veranschaulichung von Computerprogrammen können Nam en durch  Pfeile oder Etiketten  visualisiert werd en. Das Etikett klebt an einem Objekt undgehört ihm damit. Andererseitskann man nicht mehr erkennen,wer das Etikett angeklebtund  so die Benennung vorgenomme n hat. Beim Pfeil dage gen sind Nam e und Objekt räum- lich getrennt. Der Pfeil beginnt bei einemNamen und dieser Nam e kann wiederum Att- ribut eines anderen Objektes sein. Hier wird also der Besitzer des Namens mit darge- stellt.  3.4  Namen  und Rollen  Nam en haben Bedeutungen und sie werdenin guten Programmen so gewähl t, dass die  Bedeutung erkennbar ist. In einem Funktionsaufruf können als Argumente (Positio nsar- gumente) andere Nam en verwendetwerden, als inder Liste der formalen Parameter in der Funktionsdefin ition.  def  quadrat (n):     return n*n  seitenlaenge = input()  flaeche = quadrat (seitenlaenge) Mehrfache Namen  kommen auch im Allta g vor ("Ma ma", "Frau  Müller", "Mon ika").  Dam it wird meist zum Ausdruckgebracht, dass ein unddassel be Objekt verschiedene  Rollen spielt. Offenb ar ist das Konzept des Namens eng mit dem Rollenkonzept verbun- den,das heißt mit der Tatsache, dass einObjekt in verschiedene „soziale“ Kontexte eingebunden sein kann.   Im obigen Programmbeispiel wird ein Zahlenobjekt,das zur Laufzeit über die Tastatur eingegebe n wird, mit zwei  unterschiedlichen Nam en belegt. Im Hauptprogramm reprä- sentiertes die Seitenlängeeines Quadrats. Innerhalb der Definition der Funktion quad- rat()wi rddas gleiche Objekt durch den Namen nreferenziert. Hier wird das Objekt  nicht mehr als Seitenlänge einer Fläche gesehen, sondern als abstra ktes mathe matische s Objekt. Es steht in einem anderenKontext. Es spielt eineandere Rolle. Namensgebung ist ein Teil der Modellbildung. Betrac htet man ein Progra mm als System von miteinan- der verwobenen Miniaturmodellen, so wirdüber Mehrfachbenennung ein und dassel be  Objekt zum Bestandteil mehrerer M iniaturmodelle.   Jorm a Sajan iemi (2002) hatein System von „Rollen“, die Variablen in einem Program m spielen können, entwick elt undgibt für jede Rolle eine Visu alisierun g an. Typische- 282 -Rollen, die in Programmbeispielen von Anfänger-Lehrbüchern vorkommen, sind: •Stepper: EineVariab le, die mit einem Anfangswert initialisiert wird unddie im Laufe einer Rechnung eine bestimmte Folge von Werten durchlaufen kann. Ein  Zähler, der in einer Schleife inkrem entiert  wird, ist ein Beisp iel für einen Step- per. •Most-wanted holder: Eine Variable, die den besten bisher gefundenenWert ent- hält. Zum Beispiel braucht man beider Suche nachdemMinimum in einer Se- quenz ei nen most-wanted-holder für das bisher gefundenekleinsteObjekt.  Oft steck t hinter einer Rolle ein intuitives Modell, das Bestandteil einer Problemlösung ist.Wenn ich einen Algorithmus fürdie Suche nachdem Minimum in einer unsortierten Sequenz  entwickle und auf die Idee komme, einen most-want ed holder zu verwenden, habe  ich bereits einen Tei lder Lösunggefunden.   Auf der anderen Seite sind Rollen konzepte für Variablen „sehr dicht amProgrammtext“.  Sajaniemi verwendet seine Visualisierungen für die (halbautomatische) Veransc hauli- chung von Program men. Das Gesam tsystem aus Rollendarstellungen ist zwar eine Ver- ständnishilfe, aber es ist zukomplex, um intuitiv zu sein. Ein intuitives Mod ell, das in einer zusammenhängenden Gestalt die Idee eines Algorithmus wiederge ben soll, ist oft abstrakter und deutet Variablen nur an. Abbildung 6 zeigt Screenshots versc hiedener Anim ationen aus der Python Visual Sandbox , die die „in place“-Sortierung einer Liste nach  dem  Verfahrender direkten Auswahl (straight selection) veranschaulichen. s = [10, 4, 1, 3]  for i in range(len(s)):      for j in range(i+1, len(s)):           if s [j] < s[i]:                s[i], s[j] = s[j], s[i]  Die Laufvariablen i undj sind Stepper in Sajaniem is Systematik. Sie werde n im ersten  Modell entsprech end seinemVorsch lag durch Papierstreif en mit Zahlen dargestellt, auf  dene n die aktuelle Zahldurch ein „Sichtfenster“ hervorgehoben wird. In den beiden folgenden Animationen werden i und j durch Zeiger und Marken repräsentiert. Ihre Rolle ergibt sich allein aus dem Kontext der Animation. Die vierte Animatio n geht noch  einen Schritt weiter. Hier wird die Existenzvon Steppernnicht explizit erwähn t, sondern  nur dadurch angede utet, dass immer zwei  Karten ein Stück aus der Kiste herausgezo gen  sind.   Die Kunst der Entwick lung eines Programm s auf der Basis eines intuitiven Mod ells für  den Lösungsansatz liegt inder Verfeinerung,d. h. Entfaltung der im Ausgangsmodell  nur angedeuteten Facet ten. Im letzten Beispielmuss man noch auf die Idee kommen, die  Indexe der durch Herausziehen markiertenDatenobjekte explizit zu benennen und ent- sprec hende Variablen einzuführen. - 283 - Abbildung 6: Modelle für die Sortierung  einer Liste nach dem Algorithmus straig ht selection   4  Intuitiv e Modelle im Unterricht thematisieren  Intuitive Mode lle können für das Verständni s der Semantik eines Program mtextes unge - eignet sein. Man bezeichnet sie dann als Fehlvorstellung (misconception). Unbewusste  Fehlvorstellungen können Problemlösungen und den Erwerb neuen Wissens behindern. Deshalb  wird gelegentlich gefordert, imSchu lunterricht müssten  Fehlvorstellun gen durch bessere (wissen schaftlich e) Konzepte ersetzt werd en. DiSessa u. a. (Smith , diSessa  und Roschelle  1993, vgl. auchdiSessa 2001) kritisieren diese Auffassung . Sie argumen- tieren konstruktivistisch und weisen darauf hin, dasshinterFehlvorstellungen fundamen- tale Konze pte stecken , die sich in vielen Lebenssituationen bewährt haben. Außerdem wird durch das Erlernen eines neue n elaborierteren Konzeptes das alte nicht vergessen. In Lernp rozessen werd en zuvor gelernte intuitive Modelle nicht ersetzt, sond ernnur  ergänzt. Das R epertoire wird größer. Ein intuitives Modell ist niemals per se falsch. Es kann allerdings irrefüh rend sein, wenn es in einem bestimmten Kontext falsch angewendetwird. So kann die Behälteranal ogie für Varia blen zu derfalsc hen Vorstellun g führen,dass bei einer Zuweisungder Form  x = y der Inhalt des Behälters x inden Behälter x wandertundy anschließend leer ist.  Dam it ist die Behälter-In tuition aber nicht generell schlecht. In anderenKontexten ist sie  sinnvoll und leistu ngsfähig.  Worauf es ankommt, ist die inspi rierende Kraft, aber auch die Grenzen und Fallstric ke  intuitiver Modelle zu kennen. Sitzungenmit der PVS, die Schü lerinnen  und Schüler  meist zu mehreren  am Rechner  durchführen, sindvon ausgiebigen Diskussionender dargebotenen Visualisierungen begleitet. Derartige Übungen könnten eine sinnvolle Ergänzung eines ansonsten projektorientierten  Informatikunterrich tes sein, weil sie zu  einer kritisch enAuseinandersetzu ng mit den eigenen intuitiven Modellen anregenund so  zu ei nem vertieften Verständnis der Semantik formaler Programm texte führenkönnen. - 284 -Literaturv erzeichnis  [Ch96] C hiu, Ming Ming: Explor ing the origins, uses and interactions of students intuitions. In: Journal for Research  in Math ematical Education 27 (1996) , S. 478-504.  [Ch0 1] Chiu , Ming  Ming: Using Metaphors to understand and solve arithmetic problems: Novices and experts working with negative numbers. In: Mathematical Thinki ng and Learning, 3.3 (2001), S. 93-124.  [Fi87] F ischbein, Efraim:Intuition in Mathem atics and Science, Dord recht Boston Lancaster Tokyo 1987.  [Gr89] G rudin, Jonath an: The Case Against User Interface Consistenc y. In: Communications  of the ACM. Oktober 1989  Vol. 32. S. 1164-117 3.  [Sa02] S ajani emi, Jorm a: Visuali zing Roles of Variab les to Novice Program mers. In: Kuljis, J.; Baldwi n, L.; Scoble , R. (Hrsg.): Proc PPIG 14, Brunel Univ ersity  2002.  [Se01] diSessa, Andrea: Chan ging Mind s. Cambridge, London (MIT Press) 2001.  [SSR93 ] Smith, John P.; diSessa, Andrea A.; Rosc helle, Jeremy: Misconceptions Recon ceived:  A Constructivist Analysis of Knowledge in Transition. In: Journal of the Learning  Sci- ences, Vol. 3 (1993/94) Nr. 2.  [Ve94] van der Veer, Gerrit C.: Mental Models of Computer Systems: Visual Languag es in the  Mind. In: Tauber, M. J.; Mahling, D.E.; Arefi, F.(Hrsg.): Cognitive Aspect s of Visual  Languages and Visual Interfaces. Amst erdam Lond on New York  Tokyo (North- Holland) 1994, S. 3 ff.  [We04] W eigend, Michael: Objektor ientie rte Progr ammierung mit Python. Bonn (MITP) 2004.  [We05] Weigend, Michael: Python-Gepackt. Bonn (MITP) 2. Aufl. 2005 . 275 -Intuitive Modelle in der Informatik Michael Weigend  Holzkamp-Gesamtschule   Willy-Brand t-Str. 2 D-58452 Witten michael.weige nd@fe rnuni-ha gen.de  Abstract:  Bei der Analy se und Kreation  von Programmtexten verwenden wir Intuitionen , die nicht durch die Programmiersp rache determiniertsind, sondern auf  Alltag serfahrungen gründen . Indiesem  Beitrag werden intuitive Modell e zur Benennung von Objekten diskutiert und mit der "Python Visual Sandbox" ein methodischer Ansatz zu ihrer  Erforsch ung vorgestellt.  1  Was sind int uitive M odelle?   Wir verwend en intuitive Modelle der Informatik, wenn wir versuchen, einen Prog rammtext zu verstehen oder jemandem  zu erklären. We nnwir nach der  Lösung eines Problems  suchen und plötzlich vor unserem geistigen Auge die Gestalt einer algorithmischen Idee  auftaucht („So müsste es eigentlich klappen!“), so ist das auch ein intuitives Mod ell.  Typische Beisp iele für intuitive Modelle aus der Inform atik sind folgendeGedanken:  •Objekte kann man benennen und überihren Nam en ansprechen.  •Eine Liste ist aufsteig end sortiert, wenn nirgendwo der linke Nachbar größer ist. Nach  Efraim  Fischbein [Fi87] ist eine Intuition einegedankliche Vorstellu ng, die insbesonde re folgende Merkmale aufweist: Sie ist selbstevident, das heißt, sie ist unmittelbar  einleuchtend und bedarf keiner weiteren Erklärung. Eine Intuition hat Gestalt-Ch arakter.  Sie erschein t gewiss und wird deshalb als Grundlage fürEntscheidungen und Handeln  verwendet. Menschen sind so sicher, dass ihre Intuitionen stimmen, dass sie berei t sind,  das Risiko persönlicher Nachteile einzugehen,wenn sie einer Intuition folgen. Intuitionen sind dauerhafte Vorstellungen. Oft werden sie berei ts in der frühen Kindheit gelernt und sind fester Teil der Persönlichkeit. Sie haben etwas Zwanghaftes. Nicht selten sind intuitive Mode lle unbe wusst und bestim men unser Denke n und Handeln ohne dass wir  es merken.   Wir verwende n hier den Begriff „intuitives  Modell“ an Stelle von Intuition, um den  Modellcharakter deutlicher zu betonen. Es geht darum,Aspekte der Wirklichkeit gedanklich abzubilden. Andrea diSessa beschreib t besonders grundlegende intuitive Modelle, die er phänomenologische Prim itive oder kurz p-primes nennt. Eine solche Intuition ist z. B. das Konzept des Widerstandes, das zur Erklärung mechan ischer, elektrischer oder psychologischer Phänomene Anwendung findet. P-Primes basieren in hohem  Maße auf persönlichen sensorischen Erfahrungen und sind inder Regel sofundamental, dass man sie kaumin Worte kleiden kann [Se01]. 276 -2  Intuitiv e Modelle sichtbar machen – die Python Visual Sandbox  Wie findet man heraus, welche intuitivenModelle Informatik  Schüler/innen verwenden ? Ein Ansat z sind„Teac h back“-Befragungen. Dabei werden die Teilnehmer aufgefordert,  in die Lehrerrolle zu schlüpfen und best immte Sachv erhalte mit Hilfe von selbst angefertigten Textenund Bildern zu erklären [Ve94]. Eine zwei te Methode sind individuelle Interviews (z. B. [Ch96], [Ch01]), beidenen verborgene Vorstellungen durch eine geschickte Gesp rächsführung ans Licht geholt werden. Dritten s gibt es Untersu chungen, in  dene n aus beobac htetem Verhal ten (Bevorzugung bestimmter Programmkonstrukte, Fehler etc.) auf die interne Verwe ndung bestimmter mentaler Konzepte rückgeschlossen wird. In diesem Fall ist das vermutete Konzep t inhaltlich das Prod ukt des Untersu chenden. Es besteht dann natürlich die Möglichkeit, dass die Interpretation des Experimentators falsch ist und inWahrh eit andere interne Überlegungen zudem beobacht eten Verhalten geführt haben. Einanderer Weg  der Erforsch ungintuitiver Mod elle wird mit der Python Visu al Sand box(PVS) beschritten. Die PVS ist eineüber das Internet erreichb are Sammlu ngvon Spielen und Experimentierumgebun gen zur Veranschaulichungund zum Auspr obieren vorgegebener oder selbst geschri ebener Python-Programme. Sie enthält über hundert Animationen, kleineFilme mit Grafik en und textuellen Elementen, die untersch iedliche intuitive Modelle zur Arbeitsweise von Prog ramm en verwend en. Wer mit der PVS  spielt, setzt in verschiedenen Kontexten und auf verschieden e Weise diese Animationen (und die enthalten enIntuitionen) mit formalem Programm text in Bezieh ung.   Eine Gruppe der PVS-Applikationen heißtPython Visual. Hier wird ein kurzer Program mtext vorgege ben – eventuell nur eine einzige Anweisung. Der Spieler betrachtet verschiedene Modelleund beantwortetverschiedene Fragen . Beisp iel: Welch eAnimation würden Sie verwenden, wenn Sie jemandem die Arbeitsweise des Programms erklären müssten? Eine Weiterentwick lungist das Python Quiz. Hier analysieren die Spieler einen Programmtext Zeile für Zeile und entscheiden,ob ein Mod ell zu der jeweiligen Anweisung  passt  oder nicht. Dabei haben sie die Möglichkeit, Punkte zu setzen, die sie gewi nnen oder verlieren können. Auf diese Weise kannein Beobacht er abschätze n, wie siche r sich ein Spieler bei seiner Beurteilung ist.    Ein  Python Puzzle ist eine Art Editor, bei demman aus vorgege benen Programmzeile n  („Bausteine“) durch Bewegen mit der Maus einen Programmtext zusam mensetzt (Abbildung 1). Das „gepuzzel te“ Programm kann jederzeit getestet werden. In einem Ausgabefenster wird das Ergebnis des Programmlau fs dargestellt. Die Aufg abe ist, eine Funk tion zu definieren (z. B. Sortieren einer Liste).  Erst wenn die Funktion das erwartete Erge bnis liefert, gibt es Punkte unddie nächste Aufg abe ersch eint. Die intuitiv en Modelle  werdenhier inForm  von "Tipps" dargeboten, die ein Spieler abrufen kann, wenn er oder  sie nicht weiter kommt. ImHindergrund sammelt die PVS versc hiedene Daten der Sitzung und speichert sie zur späteren Auswertung auf dem Server. Registriert werden z. B.  Bewertungen von Tipps, Reaktio nszeiten und Fehler. 277 Abbildung 1: Screenshot aus einem Python Puzzle. Rechts gibt es einen  Vorrat an"Bausteinen" ,  die auf der Arbeitsfläch e links zueinem P rogrammtext zusamm engebaut werden können.  3  Intuitive Modelle zur Benennung von Objekten  Wir diskutieren  nun einige intuitive Mod elle, die sich um die Benennung  von Objekten drehen. UmM issverst ändnissezu vermeiden, seidarauf hingewiesen, dass wir hier den Begriff Obje kt in zwei Bedeutungen verwenden: Erstens in einem allgemeinen Sinne als  Entität in einer realen oder gedankliche n Welt und zweitens  in der progra mmtechnische n  Bedeutung (Einheit von zusamme ngehö rigen Daten und auf diesen arbeitenden Operationen).   Nam en für Objekte der Realwelt (z. B. Gegenstände, Personen, Ereigni sse) werden in  früher Kindheit gelernt. Sie ermöglichen die interne gedankliche Repräsent ation der externen Welt– nach Piaget der Beginn der Intellig enz. Nam en haben verschiedene  Funktionen. Sie identifizieren ein Objekt, ermöglichen den Zugriff (Adressierungsfunktion), bringen die Funktion des Objektes innerhalb eines Kontextes zum Ausdruck und  repräsentieren somit auch Beziehungen zwischen Objekten. Namen können explizit, aber  auch implizit sein. Sokann man eineStecknad el auf einer Landkarte als Nam e für einen  Ort auffasse n.  3.1  Variablennam en  In Computerprogrammen werden Nam en imZusam menhang  mit Variablen verwendet. Eine bekannte Intuition für Variablen ist die Vorstellung eines Behälters für Daten (Behälterm odell). Der Behälter – z. B. eine Schach tel ist mit einem Etikett versehen, das  den Variablennamen trägt. Eine Zuweisung der Form x = 1  wird so interpretiert, dass der Behälter mit Nam en (Etikett) x mit einem neuen Inhalt,278 -einer R epräsentation de r  Zahl1 gefüllt wird. Der vorigeInhalt wird dabei vernichtet.   Ein alternatives intuitives Modell sieht eine Zuweisun g als Benennung. Der Variab lenname kann als Nam e eines Objektes interpretiertwerden (Namenmodell). Im obigen Beispiel wird der Zahl1 Namex zugeor dnet. Anschaulich kann man sich eine Benennung so vorstellen: Man zeichnet  einen Pfeil von dem Namen zum Objekt oder etikettiert ein Objekt mit einem Zettel, das einen Namen trägt. Was sind die Unterschiede zwisch en beiden intuitiven Modellen? Ein Objekt kann erst  bena nnt werden, wenn es existiert. Dage gen kann ein Behälter auch leer sein. Insofern unterstützen nicht-typisierendeProgrammiersprachen, wie z. B. Python, eher das Namensmodell. Denn erst mit einer Zuweisung (= Benennung) wird ein neuer Nam e eingeführt.Dagegen kann man sich eine Variablendeklaration bei Java oder Pascal so vorstellen, dass ein zunächst leerer Behälter bereitgestellt wird, der erst später mit Inhalt gefüllt wird.  Gravierende Unterschiede werdensichtbar, wennman folgende Anweisungsfolge interpretiert.  x = 1  y = x  Im Namenmodell erhäl t das Objekt1 nun einen zweiten Nam en, nämlich y. Das entspricht vollkommen  dem Alltagsgebrauch vonNamen. Für einund dasselb eObjekt der  Realität werd en häufigverschiedene Namen verwend et. Wend et man das Behälterm odell korrekt an, soergibt sich folgende Interpretation: Der Inhalt der Variablen (= Behälter) xwird kopiert und in derVariablen y gespeichert.  Abbildung 2: Modelle für Mehrfachnamen  Bei unveränderbaren Objekten, wie z. B. Zahlen, ist diese Vorstellungunproblematisch.  Schwierig wirdes, wenn essich umänder bare Objekte handelt, wie z. B. Liste n (Python). Solche Objekte können ihren internen Zustand ände rn. Betrachten wir die  folgende Python-Anweisungsfolge:  s = [1, 1, 1]  t = s  s[0] = 5  print t 279 -Die Ausgabe auf dem Bildsc hirm lautet [5, 1, 1]un d nichtetwa [1, 1, 1]. Dieses Verhalten lässt sich mit dem Nam enmodell leicht erklären. Bei der Zuweisun g t=s erhäl t das Listenobjekt einen zweiten Nam en, nämlich t(Abbildung 3links). In der  Zuweisung s[0]=5 wird das erste Element des Listenobje ktes an die Zahl 5 gebunden.  Das Listeno bjekt hat seine Identität behalten, so dass t der Nam e des inzwisch en geänderten Objektes ist. Abbildung. 3: Konsistentes Zeigermodell für die Veränderung  einer Liste mit zwei Namen Verwendet man das Behältermodell, so muss die Zuweisung t=s als eine Art Kopiervorgang interpretiert werd en. Es entsteh t einneuer Behälter mit Etikett t, der den gleichen Inhalt wie s hat (Abb ildung 4 links). Allerd ings ist der Behälter t keine Kopie im üblichen Sinne. Stattdessen handelt es sich um zwei Erschei nungen des gleichen Objektes. Jede Veränderung von s –wie z. B. die Neubelegung der ersten Kammer mit der Zahl 5 wirdauf magische Weise ebenfalls mit t ausgeführt (Abbildung 4 recht s).  Abbildung 4: Behälter modell für die Veränderung  einer Liste mit zwei Namen   (Erscheinungsmodell) .  3.2  Mischung von Namensmod ellen – die Frage der Konsistenz Abbildung 5 zeigt Screenshots aus versc hiedenen Animationen,die die Arbeitsweise einer Iteration  der folgenden Form(Pytho n) modellieren : for (n, a) in personen:  tue etwas  Das erste Modell verwe ndet konsequentdas Nam ensmodell, wobei Namen durch Zeiger dargestellt werd en. In der zweiten Animation werd enalle Variab len durchBehälter dar-280 -gestellt. Nach  und nach werden  Kopien der Daten aus demBehälter personen h erausgenommen und in die Behälter n und agelegt. Die dritte Animation schließ lich verwendet eine Kombination aus Zeigern und Behälte rn. Die Zeiger n unda „wande rn“ über  den Listenbehälter und zeigen nachund nach auf die Zet tel inden Fächern. Abbildung 5:  Modelle für eine Iteration über eine Liste von Paaren  Informale Befragungen von Schülern zeigen, dass trotz seiner Inkonsistenz häufig gerade das dritte Modell zur Besch reibung der Iteration bevorzugt wird. Der Grund könnte darin liegen, dass es einhäufig vorkommen de Alltagssituatio n wied ergibt: Man durchsucht z. B. Bücher im Bücherre gal, indem man nachei nander einen Blick auf jedes Buch wirft, ohne es zu bewegen.Das dritte Modell in Abbildung 5 repräsen tiert also ein intuitives Mod ell, eine Metaph er für einenvertrau tenAblauf. Das gilt für die anderen Modelle nicht. Konsisten zkann also im Widerspruch  zuIntuitivität liegen. Im Zusam menhan g mit Benutzungsoberflächen hat Grudin (1989)beobachtet, dass es nicht imme r auf die interneKonsistenz des konze ptuellen Modells ankommt. Anal ogien zur Realwelt sindhäufig wich tiger für die Qualität eines User Interfaces hinsich tlich  Erlern barkeit und „intuitive“ Anwen dbarkeit in neuen Situationen.  3.3  Wem gehört ein Name ?  Wen n ich einen Menschen mit seinem Namen anspreche, um ihm eine Botschaft zukommen zu lassen, gehe ich davon aus, dass die Angesprochene den Namen kennt.Der  Nam e, der imPersonalausweis steht, wird als Eigentum des Benannten gesehen. Er ist  Teil der persönlich enDaten und das Besitzrech t ist sogar durch Gesetze geschützt.   Andererseits existieren  im Alltag  auchNamen , die dem benanntenObjekt unbekannt sind. Zum  Beispiel erfinden Schüler hinter demRücken ihrer Lehrer Spitznamen für sie.281 -Diese Nam en gehören den Individuen, die sie verwenden.Sie eignen sich zur Identifikation eines Objektes, nicht aber zur Kom munikation mit ihm. Auch im Zusammen hang mit Nam en in Com puterprogrammen  werden beide intuitiven  Modelle verwendet.Die Botschaft smetapher der Objektorientierten Programmierung unterstützt eher die Vorstellung, dass ein Objekt seinen Namen kennt. Denn es muss aus  vielen kommunizierten Botschaften die herausfinden, die an es gerichtet sind.  In Modellen zur Veranschaulichung von Computerprogrammen können Nam en durch  Pfeile oder Etiketten  visualisiert werd en. Das Etikett klebt an einem Objekt undgehört ihm damit. Andererseitskann man nicht mehr erkennen,wer das Etikett angeklebtund  so die Benennung vorgenomme n hat. Beim Pfeil dage gen sind Nam e und Objekt räumlich getrennt. Der Pfeil beginnt bei einemNamen und dieser Nam e kann wiederum Attribut eines anderen Objektes sein. Hier wird also der Besitzer des Namens mit dargestellt.  3.4  Namen  und Rollen  Nam en haben Bedeutungen und sie werdenin guten Programmen so gewähl t, dass die  Bedeutung erkennbar ist. In einem Funktionsaufruf können als Argumente (Positio nsargumente) andere Nam en verwendetwerden, als inder Liste der formalen Parameter in der Funktionsdefin ition.  def  quadrat (n):     return n*n  seitenlaenge = input()  flaeche = quadrat (seitenlaenge) Mehrfache Namen  kommen auch im Allta g vor ("Ma ma", "Frau  Müller", "Mon ika").  Dam it wird meist zum Ausdruckgebracht, dass ein unddassel be Objekt verschiedene  Rollen spielt. Offenb ar ist das Konzept des Namens eng mit dem Rollenkonzept verbunden,das heißt mit der Tatsache, dass einObjekt in verschiedene „soziale“ Kontexte eingebunden sein kann.   Im obigen Programmbeispiel wird ein Zahlenobjekt,das zur Laufzeit über die Tastatur eingegebe n wird, mit zwei  unterschiedlichen Nam en belegt. Im Hauptprogramm repräsentiertes die Seitenlängeeines Quadrats. Innerhalb der Definition der Funktion quadrat()wi rddas gleiche Objekt durch den Namen nreferenziert. Hier wird das Objekt  nicht mehr als Seitenlänge einer Fläche gesehen, sondern als abstra ktes mathe matische s Objekt. Es steht in einem anderenKontext. Es spielt eineandere Rolle. Namensgebung ist ein Teil der Modellbildung. Betrac htet man ein Progra mm als System von miteinander verwobenen Miniaturmodellen, so wirdüber Mehrfachbenennung ein und dassel be  Objekt zum Bestandteil mehrerer M iniaturmodelle.   Jorm a Sajan iemi (2002) hatein System von „Rollen“, die Variablen in einem Program m spielen können, entwick elt undgibt für jede Rolle eine Visu alisierun g an. Typische282 -Rollen, die in Programmbeispielen von Anfänger-Lehrbüchern vorkommen, sind: •Stepper: EineVariab le, die mit einem Anfangswert initialisiert wird unddie im Laufe einer Rechnung eine bestimmte Folge von Werten durchlaufen kann. Ein  Zähler, der in einer Schleife inkrem entiert  wird, ist ein Beisp iel für einen Stepper. •Most-wanted holder: Eine Variable, die den besten bisher gefundenenWert enthält. Zum Beispiel braucht man beider Suche nachdemMinimum in einer Sequenz ei nen most-wanted-holder für das bisher gefundenekleinsteObjekt.  Oft steck t hinter einer Rolle ein intuitives Modell, das Bestandteil einer Problemlösung ist.Wenn ich einen Algorithmus fürdie Suche nachdem Minimum in einer unsortierten Sequenz  entwickle und auf die Idee komme, einen most-want ed holder zu verwenden, habe  ich bereits einen Tei lder Lösunggefunden.   Auf der anderen Seite sind Rollen konzepte für Variablen „sehr dicht amProgrammtext“.  Sajaniemi verwendet seine Visualisierungen für die (halbautomatische) Veransc haulichung von Program men. Das Gesam tsystem aus Rollendarstellungen ist zwar eine Verständnishilfe, aber es ist zukomplex, um intuitiv zu sein. Ein intuitives Mod ell, das in einer zusammenhängenden Gestalt die Idee eines Algorithmus wiederge ben soll, ist oft abstrakter und deutet Variablen nur an. Abbildung 6 zeigt Screenshots versc hiedener Anim ationen aus der Python Visual Sandbox , die die „in place“-Sortierung einer Liste nach  dem  Verfahrender direkten Auswahl (straight selection) veranschaulichen. s = [10, 4, 1, 3]  for i in range(len(s)):      for j in range(i+1, len(s)):           if s [j] < s[i]:                s[i], s[j] = s[j], s[i]  Die Laufvariablen i undj sind Stepper in Sajaniem is Systematik. Sie werde n im ersten  Modell entsprech end seinemVorsch lag durch Papierstreif en mit Zahlen dargestellt, auf  dene n die aktuelle Zahldurch ein „Sichtfenster“ hervorgehoben wird. In den beiden folgenden Animationen werden i und j durch Zeiger und Marken repräsentiert. Ihre Rolle ergibt sich allein aus dem Kontext der Animation. Die vierte Animatio n geht noch  einen Schritt weiter. Hier wird die Existenzvon Steppernnicht explizit erwähn t, sondern  nur dadurch angede utet, dass immer zwei  Karten ein Stück aus der Kiste herausgezo gen  sind.   Die Kunst der Entwick lung eines Programm s auf der Basis eines intuitiven Mod ells für  den Lösungsansatz liegt inder Verfeinerung,d. h. Entfaltung der im Ausgangsmodell  nur angedeuteten Facet ten. Im letzten Beispielmuss man noch auf die Idee kommen, die  Indexe der durch Herausziehen markiertenDatenobjekte explizit zu benennen und entsprec hende Variablen einzuführen. 283 Abbildung 6: Modelle für die Sortierung  einer Liste nach dem Algorithmus straig ht selection   4  Intuitiv e Modelle im Unterricht thematisieren  Intuitive Mode lle können für das Verständni s der Semantik eines Program mtextes unge eignet sein. Man bezeichnet sie dann als Fehlvorstellung (misconception). Unbewusste  Fehlvorstellungen können Problemlösungen und den Erwerb neuen Wissens behindern. Deshalb  wird gelegentlich gefordert, imSchu lunterricht müssten  Fehlvorstellun gen durch bessere (wissen schaftlich e) Konzepte ersetzt werd en. DiSessa u. a. (Smith , diSessa  und Roschelle  1993, vgl. auchdiSessa 2001) kritisieren diese Auffassung . Sie argumentieren konstruktivistisch und weisen darauf hin, dasshinterFehlvorstellungen fundamentale Konze pte stecken , die sich in vielen Lebenssituationen bewährt haben. Außerdem wird durch das Erlernen eines neue n elaborierteren Konzeptes das alte nicht vergessen. In Lernp rozessen werd en zuvor gelernte intuitive Modelle nicht ersetzt, sond ernnur  ergänzt. Das R epertoire wird größer. Ein intuitives Modell ist niemals per se falsch. Es kann allerdings irrefüh rend sein, wenn es in einem bestimmten Kontext falsch angewendetwird. So kann die Behälteranal ogie für Varia blen zu derfalsc hen Vorstellun g führen,dass bei einer Zuweisungder Form  x = y der Inhalt des Behälters x inden Behälter x wandertundy anschließend leer ist.  Dam it ist die Behälter-In tuition aber nicht generell schlecht. In anderenKontexten ist sie  sinnvoll und leistu ngsfähig.  Worauf es ankommt, ist die inspi rierende Kraft, aber auch die Grenzen und Fallstric ke  intuitiver Modelle zu kennen. Sitzungenmit der PVS, die Schü lerinnen  und Schüler  meist zu mehreren  am Rechner  durchführen, sindvon ausgiebigen Diskussionender dargebotenen Visualisierungen begleitet. Derartige Übungen könnten eine sinnvolle Ergänzung eines ansonsten projektorientierten  Informatikunterrich tes sein, weil sie zu  einer kritisch enAuseinandersetzu ng mit den eigenen intuitiven Modellen anregenund so  zu ei nem vertieften Verständnis der Semantik formaler Programm texte führenkönnen. 284 -Literaturv erzeichnis  [Ch96] C hiu, Ming Ming: Explor ing the origins, uses and interactions of students intuitions. In: Journal for Research  in Math ematical Education 27 (1996) , S. 478-504.  [Ch0 1] Chiu , Ming  Ming: Using Metaphors to understand and solve arithmetic problems: Novices and experts working with negative numbers. In: Mathematical Thinki ng and Learning, 3.3 (2001), S. 93-124.  [Fi87] F ischbein, Efraim:Intuition in Mathem atics and Science, Dord recht Boston Lancaster Tokyo 1987.  [Gr89] G rudin, Jonath an: The Case Against User Interface Consistenc y. In: Communications  of the ACM. Oktober 1989  Vol. 32. S. 1164-117 3.  [Sa02] S ajani emi, Jorm a: Visuali zing Roles of Variab les to Novice Program mers. In: Kuljis, J.; Baldwi n, L.; Scoble , R. (Hrsg.): Proc PPIG 14, Brunel Univ ersity  2002.  [Se01] diSessa, Andrea: Chan ging Mind s. Cambridge, London (MIT Press) 2001.  [SSR93 ] Smith, John P.; diSessa, Andrea A.; Rosc helle, Jeremy: Misconceptions Recon ceived:  A Constructivist Analysis of Knowledge in Transition. In: Journal of the Learning  Sciences, Vol. 3 (1993/94) Nr. 2.  [Ve94] van der Veer, Gerrit C.: Mental Models of Computer Systems: Visual Languag es in the  Mind. In: Tauber, M. J.; Mahling, D.E.; Arefi, F.(Hrsg.): Cognitive Aspect s of Visual  Languages and Visual Interfaces. Amst erdam Lond on New York  Tokyo (NorthHolland) 1994, S. 3 ff.  [We04] W eigend, Michael: Objektor ientie rte Progr ammierung mit Python. Bonn (MITP) 2004.  [We05] Weigend, Michael: Python-Gepackt. Bonn (MITP) 2. Aufl. 2005 . 