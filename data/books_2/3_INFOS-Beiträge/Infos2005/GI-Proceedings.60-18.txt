- 219 -Programmierparadigmen mit Scheme  C hristian Wagen knecht V eit Berg er  F achbereic h Informatik Fachsc haft Informatik Hochschule Zittau /Görlitz (FH) Gesch wister-Sch oll-Gym nasium LöbauBrückenstr. 1 Pestalo zzistr . 21D-02826 Görlitz D-02708 Löbau c .wagenknecht@hs-zigr.dev .berger@gmx.netAbstract:  Der Beitr ag diskutier t Erfahrung en aus einem Kurs, in dem zahlr eiche Inhalte des Informatiklehrplanes der Klassenstufen 11 und 12 mit funktions-orientierter Program mierung handlungsorienti ert verm ittelt werden. Das betrach-tete Themen spektr um geht dabei über das hinaus, was üblicher weise unter Pro-grammierparadigmen subsu miert wird. Innovativ ist die Behandlung dieser Themenvielfalt ausschließ lich mit Scheme als sprachlich en Träger. Dies erlaubtdie charakteristischen Eigenschaften altern ativer Program mier- und Denkstile so-wie tragende Konzepte der Infor matik in ein und derselben Programmierumgebun gherauszuar beiten . Es ist vorgeseh en, die hier diskutierte fachdidaktische Konzepti-on durch eine speziell entwickelte Lernum gebung mediendid aktisch zu begleiten. 1  Einführung Informatische Bildung ist Allgemeinbildung, die für die komplexen Anforderungen imberuflichen undgesellsch aftlich en Alltag unerlä sslich geworden ist. Mit der Refo rm der sächsi schen Lehrpläne ([LP04]) wurde dieser Aspekt besonders berücksichtigt. Im Eck-werte papier zur inform atischen Bildung ([EW02])wird deshalbfür Schüler  der gymna-sialen Oberstufe form uliert: „ ... Während der Bearbeitung größerer Projekte lernen sie,in der Fachsprache zu argumen tieren, grundlegendeKonzepte inder Informatik  zu erläu -tern, Gestaltungsaufgabe n zu beschreiben und komplexe Anwendungen und Aufgabenzu analysieren. Die Anwendung der Fachs prache zielt insbes onde re auf das in dieser Altersstufe vorhandene Abstraktionsvermögen und erwartet von den Schülern Interpreta-tionen und Begründungen imfachlichenKontext. ... “  Insbesondere funktionsorientierte Programmiersprac hen bieten mit ihremdeskriptivenKonzept geeignete didaktische Ansätze, um den o. g. Anforderungen in einem Grund- bzw. Wahlgrundkurs der Jahrgangsst ufen 11/12 nachzukomme n. Auf der Basis einesLehr buches [Wa04] für Informatik-Studierende im 1. Semester entstand angepasstesUnterrich tsmaterial [La04 ]. Das entwick elte Material wurde in den Schuljahren2003/04und 2004/05 in je einem Wahlgrundkurs der 11. Klasse e rprobt.Die Verwendungder(Turing-vollstän digen) Programmi ersprache Scheme für ausge-wählte didaktische Zweck e ist vor allem anHochschulen weit verbreitet. Es gibt eineReihe von Erprobungen in Schulen.  - 220 -Die in [Wa04 ] erstm als in dieser Breite publizierte Verw endu ng von Scheme zur Einfüh-rung einer breiten Palette informatisch er Grundkonzeptesteht nicht inKonk urren z zu didaktisch spezialisierten Modellwelten , wie etwa der turtle geometry, BlueJ, PAGE, Karel, DrPython , KARA, Ham ster u.v. m.Nach folgend werden die Schwerpunkte und einige ausgewähl te Inhalte dieses Kursesvorgestellt und im Hinblick auf deren didaktisc h-methodisc he Umsetzung reflektiert. Beispiele undweiterführende Übungsaufgaben zeigen,dass der Zugangüber die funkti-onsorientierte Programmierung zum Studiumfundam entaler Wirk- und Funktionsprinzi-pien komplexerer Informatiksy stem e, wie beispielsweise der Clien t-Server-Arch itektur, ausgeweitet werdenkann. 2  Fachdidaktische Kon zeption ZurRepräsentation funktionsorientierter Programmierung verwenden wirScheme. Diese Sprache ist vorrang ig für Lehrzweck e entwickelt word en undgestattet die Formulierungsemantisch anspruc hsvoller Ausdrücke bei äuße rst knappe r Syntax. Dies versetzt uns in die Lage, leistungsstarke Programmierkonz epte, wie dieRekursion , Funktionen höhererOrdnung und verzögerte Evaluation  im Unterrich t zu thematisieren . Diese sind in ande-ren Programmiersystemen nur ansatzweise vorhanden, erfordern starke Zugeständnisse an denCompiler und erfüllen eine unbefriedigende Lernkurve. Scheme liegt in Gestalt von DrScheme alskostenlose didaktische Entwicklungs umge-bung für die Betriebssysteme Windows und Linux vor. Dam it ist DrSchem e eines derganzwenigenProgrammiersyste me, die einen didaktisch en Zuschn itt habenundperma-nent gepflegtund erweitertwerden. DrScheme istintuitiv zu bedienen und ermöglichtinteraktive Entwurfs- und modulare Test zyklen. In Tabelle 1 sinddie Schw erpunkte und Lehrplaninhalte zusamm engestellt, mit denen wir uns hier besonders beschäftigt habe n. Man kann erkennen, dass der betrachtete Kursnichtverengt auf einen Lehrgang „funktionales Programmieren“  angelegtwurde.  Vielmehr gehtes um grundlegendere Datenstrukturen und Wirkprinzipien, die basierendauf dem Parad igma der funktionsorientierten  Programm ierungvermittelt werd en. Dem -entsprechend wird der Schwerpunkt auf die Entwicklung von Mentaltechniken, wie das Abstrahieren und Generalisier en sowie das Beschreiben von Problemlösungen, gelegt.  Diese sehr anspruchsvolle Ziels etzun g erfor dert motivieren de Aufgaben mit praxi srele-vantemSachkontext. Problemstellungen dieser Art finden sich dann auchin den Projekt-arbeiten wieder, siehe Tabelle 1.- 221 -LB Thema Schwerpunkte Inhal te Std. 1 Einführungindie funktions-orientierte Programmi e-rungRead -Eval-Print-Loop(REPL )Datenty pen-Zahlen -Zeich en / Zeichenketten-Wah rheitswert e -Daten struktur Liste Bedingte Ausdrücke Prozedure n-bena nnt / unbenanntRekursionen -echte Reku rsion en-endständ ige Rekursionen-Mehrfachrekursionen Kommunikation im Direkt-modus einstellige / mehrstellig e  Prozedure n-Summe, Fakultät,  Fibonacci-Z ahlen Prozedure n mit Listen -Minimum -Loesc hen, Superloeschen -Element?, Superelem ent?20 2 Prozedurenhöherer Ord-nungProzedur höherer Ordnung Anwendung von Prozedu renauf Listen komplexe Anwendungen Numerisch e Ableitungbeliebiger Funktionen Wertetabellen Nullstellen suche10 3 verzögerteEvaluation Evaluationstechniken Stream s Projektarbeit: Zahlenfo lgen-rekursive, explizite Bil-dungsvorschrift -Grenzwerte von Zahlen-folgen -Partialsummenfolgen 10 4 λ - Kalkül theoretische Grundlage nα-Konvention,β-Reduktion,η-Vereinfachung Symbolverarbeitung einfache Anwendungen der Rechenregel nProjektarbeit: Symbolisches u. numerisches Diffe renziere n10 5 Ausgewäh lte Algo rithmenund ihreEffizienz Intuitiver Algorith musbegriff -Sequ entielle / binäre Suche -Minsort / QuicksortAufwandsbetrachtungen:-Zeitkomplexität und  O-No tationGrenzen der Berechenbarkeitkomplexe Anwendungen aus-gewählter Algo rithmenin einem  Mini-Datenbank-systemImplementation ausgewählterAlgo rithmenempirische E ffizienzunt ersu-chungen Projektarbeit: Mini-Datenba nksystem-Ein- / Ausgabe / Speichern von Datensätze n -Löschen vonDaten sätzen-Such- und Sortierfunktio-nen 15 Tabelle 1: Schwerpunkte und Inhalte - 222 -3  Zur Einführung der funktion sorie ntier ten P rogrammierung Die erste Kom munikationmit Schem e führtdie Schüler zur Präfixno tation. Diese ist zwar zunäch st gewöhnungsbedürftig, bereitet jedoch erfahrungsgemäß kaum Schwi erig-keiten.Dennsehrhäufig benutzen wir in der Mathematik bei derverbalen Beschreibungvon Term strukturen eine „Präfixsprechweise“, z. B.: „Der Quotient aus der Summ e der Zahlen 3 und5 und der Differenz der Zahlen 6 und 2“. Scheme folgt exakt dieser De-skription:(/ (+ 3 5) (- 6 2)). Die Schem e-Repräsentation wird also direkt durch Versp rachlichu ngmathematischer Ausdrücke gewonnen.Durch die Nutzung generi-scher Oper atoren entfallen die Grenzen typischer Binäroperationen: „Die Summe allernatürlichen Zahlen von 1 bis10“ lautet in Scheme:(+ 1 2 3 4 5 6 7 8 9 10) . Mit diesen einfachen Beispielen wirdberei ts die Bedeutung des Beschr eibungsas pektsbei funktionsorientierter Programmierung ange deutet:Wir abstrahieren vom konkretenBerechnungs prozess durch Besch reibung des Resu ltat, also des ‚Was’ und delegierendas ‚Wie’ andie Maschine, siehe a uch in[Wa44]. Zwischenbenutzerdefi niertenund eingebauten Prozeduren besteht keinGebrauchsunter-schied. Hingegen ist die Unte rschei dung „Term vs. Funktion/Prozed ur“ fundamental. Andieser Stelle setzt begrifflich es Arbeiten an, wobeidie funktionsorientierteProgrammie-rung nicht Selbstzweck  ist, sondern Vermittler i. S. eines didaktischen Transportmedi -ums. Die Bezeichnung lambda wird den Schülern kurz begründet.(define volumen   (lambda (radius hoehe)     (* pi (sqr radius) hoehe))) > (volumen 2.5 7.0) 137.44467859455347Ein besond ers leistu ngsfähiges Mittel zur Besc hreibung von Resu ltaten ist die Reku r-sion. Dam it wird von einem meist komplexen Berechnungsprozess abstrahiert.Dieserwird nach entsprechendem  Aufrufvom Computer ausgeführt. Im Kopf des Programmie-rers darf er keinerlei Rolle spielen , wenn die Lösung erfolgreich  entwickelt werd ensoll. Das Denken in der Kontrolleist schädlich für den Entwurfrekursi ver Prozeduren!Den Schülern bereitet diese Denkungsart anfangs große Schwierigkeiten. Hier lässt sichnicht auf Alltag serfahrung zurückgreifen, denn rekursivbeschriebene Prozesse gibt es dort kaum. Deshalb sind intensive Übungen notwendig. Selbstähnliche geometrische Figuren helfen. Gründe, die einem grafischen Zugang den Vorzug geben, kennen wirberei ts von LOGO’s turtlegeom etry. Allerdings eigene n sich auch Inhalte aus der Ma-thematik, wie (explizit und)rekursiv definierte Zahlenfolgen. Die Aufgabe, aus einer rekursiven Beschreibung einen iterativen Prozess abzuleiten, wird dem Programmiersys-tem übert ragen.RekursivesDenken kann trainiertwerden!Die folgenden beiden Beispiele gehen aus Anregungen von Schülern hervor. - 223 -Beispiel 1: Minimumsuche in einer ZahlenlisteBeschrei bung:D as Minimum einer einelementigen Liste ist das Element selbst, ande-renfalls bestimme das Minimum der Restliste (= Liste ohne erstes Ele-ment). Ist dieses kleiner als das erste Liste nelement, so gib es als Mi-nimum der gesam ten Liste zurück, anderenfalls ist das erste Listenelem ent das Resultat. Implementation:(define minimum   (lambda (ls)     (if (null? (cdr ls))         (car ls)         (let ([min (minimum (cdr ls))])           (if (< min (car ls))               min               (car ls)))))) > (minimum '(23 43 4 5 6 7 898 7 65 43 2 1 5 5 56)) 1Beispiel 2: S chnapszahle nprüfe r (keine Schna psidee!) Vorüberlegung:Eine mehrstellige natürliche Zahl heißt Schnapszahl, wenn alle ihre Ziffern untereinander gleich sind. Wir wollen diese Definition mit ei-nem numerisc hen Algorithm us implementieren. Die leistu ngsstarke Ganzza hlarithmetik von DrSchem emacht die Umsetzung besondersattrak tiv. Beschreibung: Eine einstellige Zahl ist keine Schnapszahl. Eine zweistellig e Zahl ist eine Schn apszahl, wenn  beide Ziffern  gleich sind. Einemehrstellig e Zahl ist eine Schnapszahl, wenn ihre letzten beiden Ziffern gleich sindunddie Zahlohne der letzten Ziffer eine Schnapszahl  ist.Implementation:(define schnapszahl?   (lambda (n)     (cond       [(< n 10) #f]       [(= (quotient n 10) (modulo n 10)) #t]       [else         (and (= (modulo n 10) (modulo (quotient n 10) 10))              (schnapszahl? (quotient n 10)))]))) > (schnapszahl? 555555555555555555555555555555555) #t > (schnapszahl? 555555555555555555565555555555555) #fIn Abgrenzung zu anders lautenden, auch aktuellen , aber keineswegsneuendidaktischen Diskussionensind mathematische Einstiegsaufgaben hier keinesfalls kontraproduktiv.Mit der Auswahl einer Programmiersprac he wird das dominierende Paradigma festge-legt. Das Paradig ma bestimmt das Modellierungskonzept. - 224 -Im Falle der Objekt-orientierten  Modellieru ng (OOA/ OOM), die die aktuelle Prog ram-mierwelt prägen, stellt dies eine didaktische Herau sforderung  besonderer Komplexitätdar: „OOM ist für Anfänger keinesweg s intuitiv und einfach . …“ [SS0 4, S. 196]. Dage-gen erweist sichdieser Modellieru ngsaspekt für funktional-app likative Sprachendurch deren natürliche Nähe zur Mathematikals wesentlich „ansp ruchsloser“. Insofern können funktional-applik ative Sprachen  sehr wohlTräger informatischer Konzepte sein, womitwir ältere n Thesen (1996), wie „Funktiona le Sprache n sind für die Schule ungeeignet,sie gehören auf die Universität.“ [RB9 6, S. 240], strikt entgegent reten. Eine Folgerung  aus dieser Überleg ung ist die Wahl mathematischer Anwendungen alsEinstiegsaufgaben. Obwohl wir mindest ens seit 1980 von S. Pape rt wissen, dass grafischrepräsentierbare Sachkontexte zum Einstieg ins Programmieren algebraischen vorzuzie-hen sind, folgen wir der oben beschrieben en Modellierungscharakteristik undwählendeshalb Aufgabenstellungen aus der Mathematik. Auße rdem werden nicht Grundschul-kinder oder noch Jüngere angesprochen, sondern Schülerinnen und Schüler der gymna-sialen Oberst ufe. An dieser Math ematik-Anfangslastig keit, die schon  vor 10 Jahren  in [Wa44] bewusst praktiziert wurde, halten wir auf der Basis von mehr als 20-jährigerLehre rfahrungmit funktional -applikati ven Sprachen fest. Für die Ausarbeitung von Themen, die sichmit der Effizienz von Algorithmen beschä f-tigen, bietet [Wa03] eine Orientierung. Interessierte Lese r finden hier weitere Beispiele rekursiver Prozeduren, wie sie für typische algorithmische Entwurfsmuster durch Pro-zessabstraktion gewonnen werden können. 4  Ausge wählte Inhalte und fachdidaktisch-methodische Analysen 4.1  Raten einer Zahl – ein Einstieg sbeispiel für Effiz ienzuntersuchungen Mit der Implementation des Ratens einer (vom Computer „erdac hten“) Zahl ergibt sichsofortdie Frage nach einem effizienten Algorithmus. Oft wird von den Schülern dasIntervallhal bierungsve rfahren als einfacher Vertreter der Teile -und- Herrsche -Algo rith-men vorgeschlagen . (define computerraten-anzahl   (lambda (zahl max)     (letrec         ([suche           (lambda (li z re)             (let ([mi (quotient (+ li re) 2)])               (cond                 [(= z mi) 1]                 [(< z mi) (+ 1 (suche li z mi))]                 [else                  (+ 1 (suche mi z re))])))])       (suche 1 zahl (+ max 1))))) > (computerraten-anzahl (+ 1 (random 1000000)) 1000000) 19 - 225 -Erwa rtungsgemäß liefert die Verwe ndung von Zufallszahlen  recht untersch iedliche Er-gebnisse, so dass sich nun empirische Untersuchungen anschließen müssen. Die Auswer-tung der entsprechenden Versu chsreihen kann dabei völlig offengehalten werden. Denkbar sind hinreiche nd viele „Vers uchswiederholungen“, die mit Standa rdwerkzeu-gen (Excel, gnuplot )ausgewertet werden. Zu Ausweitungenführen Prozeduren, wiebeispielsweise(computerraten-wdhlgmax wdhlg) und(grafik min max schritt wdhlg). Der Aufruf (grafik 200 10000 200 1000)  liefert das inAbbildung1 darge-stellte qualitative Schaubild mit der Turtlegrafik vonDrSch eme. Abbildung 1:  Schaubild  zur Effizienzu ntersuchun g beim Raten  einer Zahl 4.2  Dokumentbeschreibungssprac hen und Generierung statischer Web-Seite nDas DrSch eme-System hält auch Module bereit , die es ermöglichen, einfache Modellefür die Kommu nikation in Netzwerken zu entwickeln und zu erproben. Ohne in die be-kannte „Technik falle“ zu gehen, werd enwese ntliche Wirkp rinzipien in vertrau ter Ar-beitsumgebung herausgearbeitet undprojektbezo gen angewandt. ZwischenHTML/XML-Sprachen  und Scheme gibt es eine enge strukturelleVerwandt-schaft. Aufdieser Basis könn en bestimmte  Scheme-Ausdrücke–quasi in natürlicher Weise – statisch e HTML-Dokumentegeneri eren. Das kann den Autor stark entlasten. (define wertetabelle   (lambda (von bis step f)     (letrec       ([zeile         (lambda (z)           (if (> z bis)             ()             (cons               `(tr (td ,(number->string z))                (td ,(number->string (f z))))               (zeile (+ z step)))))])       (cons   '(tr (th "x") (th "f(x)"))  (zeile von))))) (define website )Dera rt erzeugte Dokumente müssen vor der Betrachtung mit einem Webbrowser gespei-chert werde n.  - 226 -Die Scheme-Elemente im HTM L-Dokument werden evaluiert und an der vorge sehenenStelle eingefügt. Im Beispiel wirddie durch (wertetabe lle 0 10 1 fak) generierteTabel le (in HTML-Syntax) integriert. Die davon ausgehende Motivation für die Ver-wendu ng von „Produkt-Besch reibungen“ basiert darauf, dass Menschennur widerwillig bereit sind, aufwänd igeund fehleran fällig e Routinetätigk eiten, wie das Abtippen üppiger Tabel len mit separat  berechneten Inhalten, auszuführen. Der Computer soll dies für unsauf der Basis einer geeigneten Beschrei bung unseres Wunschobjektserledigen.4.3  Dynamische Web -Seiten– Client-Ser ver-Archite kur Zur Kommunikation inNetzwerk en stellt DrSch eme einen eigenenWeb server bereit. Dam it wird es möglich,dynamische Websei ten serverseitig  zu generieren, um bestimm-te Dienstleistunge n über ein Web-Interface anzubieten. Abbildung 2 zeigt einen „Funk-tionsanalysator“, der als Projekt unter Rückgriff auf Vorarbeiten zum Schwer punkt„Prozedu renhöherer Ordnung “ (sieheTabellel 1) entwickelt wurde. Abbildung 2:  Nutzer form ular des Clients  / Antwortseite des Servers Server und Clien t sollten auf getrennten Rechnern laufen , um den Schülern die Clien t-Server-Kommu nikation erlebbar zu machen. Dann ist es nur noch ein kleiner Denkschritt zu weltweit verteilten  Systemen. Dennoch sollte der Hinweis nicht fehlen, dass Clien t-Programm  und Server-Programm auch auf einunddemselben PC laufen könnten (so wie es im Entwick lungsablauf zeitlich  vorher auch stattfand ). Hieraus erwäch st die so wich -tige Erke nntnis, dass Client und Server softwarem äßig bestimmte Begriffe sind. Redens-arten, wie „Druckerserver“ und „Fileserver“, verwischen dieses Bild und assoziierenHardwaregebundenheit.- 227 -4.4  Web -Datenbanken Eineweitere Ausbaustufe stellt die Realisieru ng einer kleinen Webd atenbank dar.  Hier wird der berei ts beschriebene n Client-Server-Kommunikation eine Datenbankkom-ponente hinzugefügt.Abbildung 3 zeigtdie Grundstruktur.Client ServerVerarbeitung:Generierung einerdynamischen Webseitehttp-basierteKommunikationCGI /ServletServerSQL-AnfrageDatenbank-ODBC /JDBCVerarbeitung:DatenbankabfragegenerierenAbbildung 3:  Client-Serv er-Komm unikation bei einer Webd atenb ank In Abbildung4 ist ein Kom munikationsbeispiel festgehalten worden. Abbildung 4:  Nutzerformular und Antwortseite zum Webdatenser vice Serverseitig  arbeitet Scheme als Interpreter für die SQL-Ko mman dos, derenGenerierungimIntera ktion sfenste r des Scheme-Webserversmitverfol gt werden kann. Die Zusam -menarbei t mit dem bekannt en relationalen Datenbankmanagem entsystem MyS QL via ODBCgelingt problemlos, siehe [Wa04]. Mit ein und derselben Umgebu ng werdendamit Datenbank- und Netzwer kanwendungen  fürSchü ler erlebbar und nachvollziehb ar. - 228 -5  Bisherige Erfahrungen Die bisherige zweijährige Unterrichtspraxis lässt folgende Schlussfolgerungen zu:•Abstrahierendes Beschrei ben stellt hohe Anforderunge n an die Schüler, sodassfachliche Schwächen  nicht mit „schönen Programmoberfl ächen“  kaschierbar sind. •Zunehm ende P olarisierung der Schülerleistungen, verstärkte Leistungs-und Niveau-unterschiede drücke n sich auch in den Benotungen aus. •Die überschaubare, einfache Syntax unddie intuitive Bedienung von DrSchemesetzen den Fokus stärker auf die Problemlösung. Auch das (gezielte) „Probierendurch Interagieren“ kann in schwierigen Phasen der Problemlösung weiter helfen. •Leistu ngsfähige Programmierk onzepte (verzögerte Evaluation / Prozeduren höhererOrdnung) gewährleisten einen ausgeprägtenPraxisbezug. •Die Software steht kostenlos zur Verfügung, was eine auße rschulische Nutzungermöglicht. Um die Unt errichtsziele zu e rreichen, sindFortführungen notwendig. •Seiteneffe ktfreie funktionsorientierte Programmierung sowie die im Allgemeinenzustand slosen Prozedu rengestatten  nicht nur eine scharfe Modularisierun g, sondern eröffnen auch versc hiedene Möglichkeiten eines differenzierte n Inform atik-Unterrichts. •Der didaktische Zuschnitt vonDrScheme ermöglicht zahlreich e Bezü ge zuden Wirkprinzipien verschiedener Informatiksysteme, die modellhaft nachgebildet wer-denkönnen.Die bet rachteten Zusam menhän ge werden dadurch besser verstanden. •Versc hiedene Vertiefungsrichtungen (Datenbanksystem, Grafik) sowie unterschied-liche Prog rammierparadigmen(z. B. imperative, objektorientierte, logikbasierte, pa-rallele und ereignisgesteuerte Programmierung) können ohne Wechsel der Pro-gram mierumgebung exploriert werden. 6  Fazit Die Verm ittlung von Grundkonzepten und Prinzipien der Informatik via funktionsorien-tierter Programmi erung mit Scheme ist unter Verwendu ng der beschriebenen Mittel ein didaktisch tragfähiger Weg .Dies wurde bereits für ganz besonders abstrakte Inhalte dertheoretisch en Informatik nachgewiesen , vgl. [WF98 ].  - 229 -Literaturv erzeichnis [EW0 2] Eckw erte zur inform atischen Bildung an sächsischen Schu len, Comenius-Institut, 2002 . [La04] Landfr ied, Carste n: Entwic klung  und Erprobung lehrplangere chter Unterrich tsmateria-lien für den Informatik-Unterrich t inder Sekundarstufe II, Diplom arbeit 2004 . [LP04] h ttp://www. sn.schule. de/~ci/dow nload/l p_gy_informatik. pdf: Lehr plan für Informatik an Gymnasien im Freistaat Sach sen, 2004 . [RB9 6] Dida ktik der Informatik. Stuttgart: Klett-Ver lag, 1996. [SS04] Schubert, Sigrid ; Schill, Andreas: Didaktik der Inform atik. Heidelberg , Berlin: Spekt-rum Akademischer Verlag, 2004 . [Wa44] W agenknecht, Christian: Rekursion. Ein didaktischer Zugang mit Funktionen. Bonn: Dümmler, 1994. [Wa03] W agenknecht, Christia n: Algorithmen und Komplexität.  München: Hanser-V erlag ,2003. [Wa04]  W agenknecht, Christian:  Programmierparadigmen – eine Einfüh rung auf der Grundla-ge von Scheme. Wiesbaden: Teubner-Verlag ,2004. [WF98]W agenknecht , Christian;  Friedm an, Daniel P.: Teaching Nondet erministic and Univer-sal Autom ata Using Schem e. In: Com puter Science Education, Swets & Zeitli nger,vol. 8, no. 3, pp. 197-227, 1998 . - 219 -Programmierparadigmen mit Scheme   C hristian Wagen knecht V eit Berg er   F achbereic h Informatik Fachsc haft Informatik  Hochschule Zittau /Görlitz (FH) Gesch wister-Sch oll-Gym nasium Löbau Brückenstr. 1 Pestalo zzistr . 21 D-02826 Görlitz D-02708 Löbau  c .wagenknecht@hs-zigr.dev .berger@gmx.net Abstract:  Der Beitr ag diskutier t Erfahrung en aus einem Kurs, in dem zahlr eiche  Inhalte des Informatiklehrplanes der Klassenstufen 11 und 12 mit funktions- orientierter Program mierung handlungsorienti ert verm ittelt werden. Das betrach- tete Themen spektr um geht dabei über das hinaus, was üblicher weise unter Pro- grammierparadigmen subsu miert wird. Innovativ ist die Behandlung dieser  Themenvielfalt ausschließ lich mit Scheme als sprachlich en Träger. Dies erlaubt die charakteristischen Eigenschaften altern ativer Program mier- und Denkstile so- wie tragende Konzepte der Infor matik in ein und derselben Programmierumgebun g herauszuar beiten . Es ist vorgeseh en, die hier diskutierte fachdidaktische Konzepti- on durch eine speziell entwickelte Lernum gebung mediendid aktisch zu begleiten.  1  Einführung  Informatische Bildung ist Allgemeinbildung, die für die komplexen Anforderungen im beruflichen undgesellsch aftlich en Alltag unerlä sslich geworden ist. Mit der Refo rm der  sächsi schen Lehrpläne ([LP04]) wurde dieser Aspekt besonders berücksichtigt. Im Eck- werte papier zur inform atischen Bildung ([EW02])wird deshalbfür Schüler  der gymna- sialen Oberstufe form uliert: „ ... Während der Bearbeitung größerer Projekte lernen sie, in der Fachsprache zu argumen tieren, grundlegendeKonzepte inder Informatik  zu erläu - tern, Gestaltungsaufgabe n zu beschreiben und komplexe Anwendungen und Aufgaben zu analysieren. Die Anwendung der Fachs prache zielt insbes onde re auf das in dieser  Altersstufe vorhandene Abstraktionsvermögen und erwartet von den Schülern Interpreta- tionen und Begründungen imfachlichenKontext. ... “   Insbesondere funktionsorientierte Programmiersprac hen bieten mit ihremdeskriptiven Konzept geeignete didaktische Ansätze, um den o. g. Anforderungen in einem Grund-  bzw. Wahlgrundkurs der Jahrgangsst ufen 11/12 nachzukomme n. Auf der Basis eines Lehr buches [Wa04] für Informatik-Studierende im 1. Semester entstand angepasstes Unterrich tsmaterial [La04 ]. Das entwick elte Material wurde in den Schuljahren2003/04 und 2004/05 in je einem Wahlgrundkurs der 11. Klasse e rprobt. Die Verwendungder(Turing-vollstän digen) Programmi ersprache Scheme für ausge- wählte didaktische Zweck e ist vor allem anHochschulen weit verbreitet. Es gibt eine Reihe von Erprobungen in Schulen.  - 220 -Die in [Wa04 ] erstm als in dieser Breite publizierte Verw endu ng von Scheme zur Einfüh- rung einer breiten Palette informatisch er Grundkonzeptesteht nicht inKonk urren z zu  didaktisch spezialisierten Modellwelten , wie etwa der turtle geometry, BlueJ, PAGE,  Karel, DrPython , KARA, Ham ster u.v. m. Nach folgend werden die Schwerpunkte und einige ausgewähl te Inhalte dieses Kurses vorgestellt und im Hinblick auf deren didaktisc h-methodisc he Umsetzung reflektiert.  Beispiele undweiterführende Übungsaufgaben zeigen,dass der Zugangüber die funkti- onsorientierte Programmierung zum Studiumfundam entaler Wirk- und Funktionsprinzi- pien komplexerer Informatiksy stem e, wie beispielsweise der Clien t-Server-Arch itektur,  ausgeweitet werdenkann.  2  Fachdidaktische Kon zeption  ZurRepräsentation funktionsorientierter Programmierung verwenden wirScheme. Diese  Sprache ist vorrang ig für Lehrzweck e entwickelt word en undgestattet die Formulierung semantisch anspruc hsvoller Ausdrücke bei äuße rst knappe r Syntax. Dies versetzt uns in  die Lage, leistungsstarke Programmierkonz epte, wie dieRekursion , Funktionen höherer Ordnung und verzögerte Evaluation  im Unterrich t zu thematisieren . Diese sind in ande- ren Programmiersystemen nur ansatzweise vorhanden, erfordern starke Zugeständnisse  an denCompiler und erfüllen eine unbefriedigende Lernkurve.  Scheme liegt in Gestalt von DrScheme alskostenlose didaktische Entwicklungs umge- bung für die Betriebssysteme Windows und Linux vor. Dam it ist DrSchem e eines der ganzwenigenProgrammiersyste me, die einen didaktisch en Zuschn itt habenundperma- nent gepflegtund erweitertwerden. DrScheme istintuitiv zu bedienen und ermöglicht interaktive Entwurfs- und modulare Test zyklen.  In Tabelle 1 sinddie Schw erpunkte und Lehrplaninhalte zusamm engestellt, mit denen  wir uns hier besonders beschäftigt habe n. Man kann erkennen, dass der betrachtete Kurs nichtverengt auf einen Lehrgang „funktionales Programmieren“  angelegtwurde.   Vielmehr gehtes um grundlegendere Datenstrukturen und Wirkprinzipien, die basierend auf dem Parad igma der funktionsorientierten  Programm ierungvermittelt werd en. Dem - entsprechend wird der Schwerpunkt auf die Entwicklung von Mentaltechniken, wie das  Abstrahieren und Generalisier en sowie das Beschreiben von Problemlösungen, gelegt.   Diese sehr anspruchsvolle Ziels etzun g erfor dert motivieren de Aufgaben mit praxi srele- vantemSachkontext. Problemstellungen dieser Art finden sich dann auchin den Projekt- arbeiten wieder, siehe Tabelle 1.- 221 -LB Thema Schwerpunkte Inhal te Std.  1 Einführungin die funktions- orientierte  Programmi e- rungRead -Eval-Print-Loop (REPL ) Datenty pen -Zahlen  -Zeich en / Zeichenketten -Wah rheitswert e  -Daten struktur Liste  Bedingte Ausdrücke  Prozedure n -bena nnt / unbenannt Rekursionen  -echte Reku rsion en -endständ ige Rekursionen -Mehrfachrekursionen Kommunikation im Direkt- modus  einstellige / mehrstellig e   Prozedure n -Summe, Fakultät,   Fibonacci-Z ahlen  Prozedure n mit Listen  -Minimum  -Loesc hen, Superloeschen  -Element?, Superelem ent?20  2 Prozeduren höherer Ord- nungProzedur höherer Ordnung  Anwendung von Prozedu ren auf Listen  komplexe Anwendungen Numerisch e Ableitung beliebiger Funktionen  Wertetabellen  Nullstellen suche10  3 verzögerte Evaluation Evaluationstechniken  Stream s Projektarbeit: Zahlenfo lgen -rekursive, explizite Bil- dungsvorschrift  -Grenzwerte von Zahlen- folgen  -Partialsummenfolgen 10  4 λ - Kalkül theoretische Grundlage n α-Konvention,β-Reduktion, η-Vereinfachung  Symbolverarbeitung einfache Anwendungen der  Rechenregel n Projektarbeit:  Symbolisches u. numerisches  Diffe renziere n10  5 Ausgewäh lte  Algo rithmen und ihre Effizienz Intuitiver Algorith musbegriff  -Sequ entielle / binäre Suche  -Minsort / Quicksort Aufwandsbetrachtungen: -Zeitkomplexität und   O-No tation Grenzen der Berechenbarkeit komplexe Anwendungen  aus-gewählter Algo rithmen in einem  Mini-Datenbank- systemImplementation ausgewählter Algo rithmen empirische E ffizienzunt ersu- chungen  Projektarbeit:  Mini-Datenba nksystem -Ein- / Ausgabe / Speichern  von Datensätze n  -Löschen vonDaten sätzen -Such- und Sortierfunktio- nen 15  Tabelle 1: Schwerpunkte und Inhalte - 222 -3  Zur Einführung der funktion sorie ntier ten P rogrammierung  Die erste Kom munikationmit Schem e führtdie Schüler zur Präfixno tation. Diese ist  zwar zunäch st gewöhnungsbedürftig, bereitet jedoch erfahrungsgemäß kaum Schwi erig- keiten.Dennsehrhäufig benutzen wir in der Mathematik bei derverbalen Beschreibung von Term strukturen eine „Präfixsprechweise“, z. B.: „Der Quotient aus der Summ e der  Zahlen 3 und5 und der Differenz der Zahlen 6 und 2“. Scheme folgt exakt dieser De- skription:(/ (+ 3 5) (- 6 2)). Die Schem e-Repräsentation wird also direkt durch  Versp rachlichu ngmathematischer Ausdrücke gewonnen.Durch die Nutzung generi- scher Oper atoren entfallen die Grenzen typischer Binäroperationen: „Die Summe aller natürlichen Zahlen von 1 bis10“ lautet in Scheme:(+ 1 2 3 4 5 6 7 8 9 10) .  Mit diesen einfachen Beispielen wirdberei ts die Bedeutung des Beschr eibungsas pekts bei funktionsorientierter Programmierung ange deutet:Wir abstrahieren vom konkreten Berechnungs prozess durch Besch reibung des Resu ltat, also des ‚Was’ und delegieren das ‚Wie’ andie Maschine, siehe a uch in[Wa44].  Zwischenbenutzerdefi niertenund eingebauten Prozeduren besteht keinGebrauchsunter- schied. Hingegen ist die Unte rschei dung „Term vs. Funktion/Prozed ur“ fundamental. An dieser Stelle setzt begrifflich es Arbeiten an, wobeidie funktionsorientierteProgrammie- rung nicht Selbstzweck  ist, sondern Vermittler i. S. eines didaktischen Transportmedi - ums. Die Bezeichnung lambda wird den Schülern kurz begründet. (define volumen    (lambda (radius hoehe)      (* pi (sqr radius) hoehe)))  > (volumen 2.5 7.0)  137.44467859455347 Ein besond ers leistu ngsfähiges Mittel zur Besc hreibung von Resu ltaten ist die Reku r- sion. Dam it wird von einem meist komplexen Berechnungsprozess abstrahiert.Dieser wird nach entsprechendem  Aufrufvom Computer ausgeführt. Im Kopf des Programmie- rers darf er keinerlei Rolle spielen , wenn die Lösung erfolgreich  entwickelt werd ensoll.  Das Denken in der Kontrolleist schädlich für den Entwurfrekursi ver Prozeduren! Den Schülern bereitet diese Denkungsart anfangs große Schwierigkeiten. Hier lässt sich nicht auf Alltag serfahrung zurückgreifen, denn rekursivbeschriebene Prozesse gibt es  dort kaum. Deshalb sind intensive Übungen notwendig. Selbstähnliche geometrische  Figuren helfen. Gründe, die einem grafischen Zugang den Vorzug geben, kennen wir berei ts von LOGO’s turtlegeom etry. Allerdings eigene n sich auch Inhalte aus der Ma- thematik, wie (explizit und)rekursiv definierte Zahlenfolgen. Die Aufgabe, aus einer  rekursiven Beschreibung einen iterativen Prozess abzuleiten, wird dem Programmiersys- tem übert ragen. RekursivesDenken kann trainiertwerden!Die folgenden beiden Beispiele gehen aus  Anregungen von Schülern hervor. - 223 -Beispiel 1: Minimumsuche in einer Zahlenliste Beschrei bung:D as Minimum einer einelementigen Liste ist das Element selbst, ande- renfalls bestimme das Minimum der Restliste (= Liste ohne erstes Ele- ment). Ist dieses kleiner als das erste Liste nelement, so gib es als Mi- nimum der gesam ten Liste zurück, anderenfalls ist das erste  Listenelem ent das Resultat.  Implementation:(define minimum    (lambda (ls)      (if (null? (cdr ls))          (car ls)          (let ([min (minimum (cdr ls))])            (if (< min (car ls))                min                (car ls))))))  > (minimum '(23 43 4 5 6 7 898 7 65 43 2 1 5 5 56))  1 Beispiel 2: S chnapszahle nprüfe r (keine Schna psidee!)  Vorüberlegung:Eine mehrstellige natürliche Zahl heißt Schnapszahl, wenn alle ihre  Ziffern untereinander gleich sind. Wir wollen diese Definition mit ei- nem numerisc hen Algorithm us implementieren. Die leistu ngsstarke  Ganzza hlarithmetik von DrSchem emacht die Umsetzung besonders attrak tiv.  Beschreibung: Eine einstellige Zahl ist keine Schnapszahl. Eine zweistellig e Zahl ist  eine Schn apszahl, wenn  beide Ziffern  gleich sind. Einemehrstellig e  Zahl ist eine Schnapszahl, wenn ihre letzten beiden Ziffern gleich sind unddie Zahlohne der letzten Ziffer eine Schnapszahl  ist. Implementation:(define schnapszahl?    (lambda (n)      (cond        [(< n 10) #f]        [(= (quotient n 10) (modulo n 10)) #t]        [else          (and (= (modulo n 10) (modulo (quotient n 10) 10))               (schnapszahl? (quotient n 10)))])))  > (schnapszahl? 555555555555555555555555555555555)  #t  > (schnapszahl? 555555555555555555565555555555555)  #f In Abgrenzung zu anders lautenden, auch aktuellen , aber keineswegsneuendidaktischen  Diskussionensind mathematische Einstiegsaufgaben hier keinesfalls kontraproduktiv. Mit der Auswahl einer Programmiersprac he wird das dominierende Paradigma festge- legt. Das Paradig ma bestimmt das Modellierungskonzept. - 224 -Im Falle der Objekt-orientierten  Modellieru ng (OOA/ OOM), die die aktuelle Prog ram- mierwelt prägen, stellt dies eine didaktische Herau sforderung  besonderer Komplexität dar: „OOM ist für Anfänger keinesweg s intuitiv und einfach . …“ [SS0 4, S. 196]. Dage- gen erweist sichdieser Modellieru ngsaspekt für funktional-app likative Sprachendurch  deren natürliche Nähe zur Mathematikals wesentlich „ansp ruchsloser“. Insofern können  funktional-applik ative Sprachen  sehr wohlTräger informatischer Konzepte sein, womit wir ältere n Thesen (1996), wie „Funktiona le Sprache n sind für die Schule ungeeignet, sie gehören auf die Universität.“ [RB9 6, S. 240], strikt entgegent reten.  Eine Folgerung  aus dieser Überleg ung ist die Wahl mathematischer Anwendungen als Einstiegsaufgaben. Obwohl wir mindest ens seit 1980 von S. Pape rt wissen, dass grafisch repräsentierbare Sachkontexte zum Einstieg ins Programmieren algebraischen vorzuzie- hen sind, folgen wir der oben beschrieben en Modellierungscharakteristik undwählen deshalb Aufgabenstellungen aus der Mathematik. Auße rdem werden nicht Grundschul- kinder oder noch Jüngere angesprochen, sondern Schülerinnen und Schüler der gymna- sialen Oberst ufe. An dieser Math ematik-Anfangslastig keit, die schon  vor 10 Jahren  in  [Wa44] bewusst praktiziert wurde, halten wir auf der Basis von mehr als 20-jähriger Lehre rfahrungmit funktional -applikati ven Sprachen fest.  Für die Ausarbeitung von Themen, die sichmit der Effizienz von Algorithmen beschä f- tigen, bietet [Wa03] eine Orientierung. Interessierte Lese r finden hier weitere Beispiele  rekursiver Prozeduren, wie sie für typische algorithmische Entwurfsmuster durch Pro- zessabstraktion gewonnen werden können.  4  Ausge wählte Inhalte und fachdidaktisch-methodische Analysen  4.1  Raten einer Zahl – ein Einstieg sbeispiel für Effiz ienzuntersuchungen  Mit der Implementation des Ratens einer (vom Computer „erdac hten“) Zahl ergibt sich sofortdie Frage nach einem effizienten Algorithmus. Oft wird von den Schülern das Intervallhal bierungsve rfahren als einfacher Vertreter der Teile -und- Herrsche -Algo rith- men vorgeschlagen .  (define computerraten-anzahl    (lambda (zahl max)      (letrec          ([suche            (lambda (li z re)              (let ([mi (quotient (+ li re) 2)])                (cond                  [(= z mi) 1]                  [(< z mi) (+ 1 (suche li z mi))]                  [else                   (+ 1 (suche mi z re))])))])        (suche 1 zahl (+ max 1)))))  > (computerraten-anzahl (+ 1 (random 1000000)) 1000000)  19 - 225 -Erwa rtungsgemäß liefert die Verwe ndung von Zufallszahlen  recht untersch iedliche Er- gebnisse, so dass sich nun empirische Untersuchungen anschließen müssen. Die Auswer- tung der entsprechenden Versu chsreihen kann dabei völlig offengehalten werden.  Denkbar sind hinreiche nd viele „Vers uchswiederholungen“, die mit Standa rdwerkzeu- gen (Excel, gnuplot )ausgewertet werden. Zu Ausweitungenführen Prozeduren, wie beispielsweise(computerraten-wdhlgmax wdhlg) und(grafik min max schritt  wdhlg). Der Aufruf (grafik 200 10000 200 1000)  liefert das inAbbildung1 darge- stellte qualitative Schaubild mit der Turtlegrafik vonDrSch eme.  Abbildung 1:  Schaubild  zur Effizienzu ntersuchun g beim Raten  einer Zahl  4.2  Dokumentbeschreibungssprac hen und Generierung statischer Web-Seite n Das DrSch eme-System hält auch Module bereit , die es ermöglichen, einfache Modelle für die Kommu nikation in Netzwerken zu entwickeln und zu erproben. Ohne in die be- kannte „Technik falle“ zu gehen, werd enwese ntliche Wirkp rinzipien in vertrau ter Ar- beitsumgebung herausgearbeitet undprojektbezo gen angewandt.  ZwischenHTML/XML-Sprachen  und Scheme gibt es eine enge strukturelleVerwandt- schaft. Aufdieser Basis könn en bestimmte  Scheme-Ausdrücke–quasi in natürlicher  Weise – statisch e HTML-Dokumentegeneri eren. Das kann den Autor stark entlasten.  (define wertetabelle    (lambda (von bis step f)      (letrec        ([zeile          (lambda (z)            (if (> z bis)              ()              (cons                `(tr (td ,(number->string z))                 (td ,(number->string (f z))))                (zeile (+ z step)))))])        (cons    '(tr (th "x") (th "f(x)"))   (zeile von))))) (define website  ) Dera rt erzeugte Dokumente müssen vor der Betrachtung mit einem Webbrowser gespei- chert werde n.  - 226 -Die Scheme-Elemente im HTM L-Dokument werden evaluiert und an der vorge sehenen Stelle eingefügt. Im Beispiel wirddie durch (wertetabe lle 0 10 1 fak) generierte Tabel le (in HTML-Syntax) integriert. Die davon ausgehende Motivation für die Ver- wendu ng von „Produkt-Besch reibungen“ basiert darauf, dass Menschennur widerwillig  bereit sind, aufwänd igeund fehleran fällig e Routinetätigk eiten, wie das Abtippen üppiger  Tabel len mit separat  berechneten Inhalten, auszuführen. Der Computer soll dies für uns auf der Basis einer geeigneten Beschrei bung unseres Wunschobjektserledigen. 4.3  Dynamische Web -Seiten– Client-Ser ver-Archite kur  Zur Kommunikation inNetzwerk en stellt DrSch eme einen eigenenWeb server bereit.  Dam it wird es möglich,dynamische Websei ten serverseitig  zu generieren, um bestimm- te Dienstleistunge n über ein Web-Interface anzubieten. Abbildung 2 zeigt einen „Funk- tionsanalysator“, der als Projekt unter Rückgriff auf Vorarbeiten zum Schwer punkt „Prozedu renhöherer Ordnung “ (sieheTabellel 1) entwickelt wurde.  Abbildung 2:  Nutzer form ular des Clients  / Antwortseite des Servers  Server und Clien t sollten auf getrennten Rechnern laufen , um den Schülern die Clien t- Server-Kommu nikation erlebbar zu machen. Dann ist es nur noch ein kleiner Denkschritt  zu weltweit verteilten  Systemen. Dennoch sollte der Hinweis nicht fehlen, dass Clien t- Programm  und Server-Programm auch auf einunddemselben PC laufen könnten (so wie  es im Entwick lungsablauf zeitlich  vorher auch stattfand ). Hieraus erwäch st die so wich - tige Erke nntnis, dass Client und Server softwarem äßig bestimmte Begriffe sind. Redens- arten, wie „Druckerserver“ und „Fileserver“, verwischen dieses Bild und assoziieren Hardwaregebundenheit.- 227 -4.4  Web -Datenbanken  Eineweitere Ausbaustufe stellt die Realisieru ng einer kleinen Webd atenbank dar.   Hier wird der berei ts beschriebene n Client-Server-Kommunikation eine Datenbankkom- ponente hinzugefügt.Abbildung 3 zeigtdie Grundstruktur. Client Server Verarbeitung: Generierung einer dynamischen Webseitehttp-basierte KommunikationCGI / ServletServer SQL-AnfrageDatenbank- ODBC / JDBC Verarbeitung: Datenbankabfragegenerieren Abbildung 3:  Client-Serv er-Komm unikation bei einer Webd atenb ank  In Abbildung4 ist ein Kom munikationsbeispiel festgehalten worden.  Abbildung 4:  Nutzerformular und Antwortseite zum Webdatenser vice  Serverseitig  arbeitet Scheme als Interpreter für die SQL-Ko mman dos, derenGenerierung imIntera ktion sfenste r des Scheme-Webserversmitverfol gt werden kann. Die Zusam - menarbei t mit dem bekannt en relationalen Datenbankmanagem entsystem MyS QL via  ODBCgelingt problemlos, siehe [Wa04]. Mit ein und derselben Umgebu ng werden damit Datenbank- und Netzwer kanwendungen  fürSchü ler erlebbar und nachvollziehb ar. - 228 -5  Bisherige Erfahrungen  Die bisherige zweijährige Unterrichtspraxis lässt folgende Schlussfolgerungen zu: •Abstrahierendes Beschrei ben stellt hohe Anforderunge n an die Schüler, sodass fachliche Schwächen  nicht mit „schönen Programmoberfl ächen“  kaschierbar sind.  •Zunehm ende P olarisierung der Schülerleistungen, verstärkte Leistungs-und Niveau- unterschiede drücke n sich auch in den Benotungen aus.  •Die überschaubare, einfache Syntax unddie intuitive Bedienung von DrScheme setzen den Fokus stärker auf die Problemlösung. Auch das (gezielte) „Probieren durch Interagieren“ kann in schwierigen Phasen der Problemlösung weiter helfen.  •Leistu ngsfähige Programmierk onzepte (verzögerte Evaluation / Prozeduren höherer Ordnung) gewährleisten einen ausgeprägtenPraxisbezug.  •Die Software steht kostenlos zur Verfügung, was eine auße rschulische Nutzung ermöglicht. Um die Unt errichtsziele zu e rreichen, sindFortführungen notwendig.  •Seiteneffe ktfreie funktionsorientierte Programmierung sowie die im Allgemeinen zustand slosen Prozedu rengestatten  nicht nur eine scharfe Modularisierun g, sondern  eröffnen auch versc hiedene Möglichkeiten eines differenzierte n Inform atik- Unterrichts.  •Der didaktische Zuschnitt vonDrScheme ermöglicht zahlreich e Bezü ge zuden  Wirkprinzipien verschiedener Informatiksysteme, die modellhaft nachgebildet wer- denkönnen.Die bet rachteten Zusam menhän ge werden dadurch besser verstanden.  •Versc hiedene Vertiefungsrichtungen (Datenbanksystem, Grafik) sowie unterschied- liche Prog rammierparadigmen(z. B. imperative, objektorientierte, logikbasierte, pa- rallele und ereignisgesteuerte Programmierung) können ohne Wechsel der Pro- gram mierumgebung exploriert werden.  6  Fazit  Die Verm ittlung von Grundkonzepten und Prinzipien der Informatik via funktionsorien- tierter Programmi erung mit Scheme ist unter Verwendu ng der beschriebenen Mittel ein  didaktisch tragfähiger Weg .Dies wurde bereits für ganz besonders abstrakte Inhalte der theoretisch en Informatik nachgewiesen , vgl. [WF98 ].  - 229 -Literaturv erzeichnis  [EW0 2] Eckw erte zur inform atischen Bildung an sächsischen Schu len, Comenius-Institut,  2002 .  [La04] Landfr ied, Carste n: Entwic klung  und Erprobung lehrplangere chter Unterrich tsmateria- lien für den Informatik-Unterrich t inder Sekundarstufe II, Diplom arbeit 2004 .  [LP04] h ttp://www. sn.schule. de/~ci/dow nload/l p_gy_informatik. pdf: Lehr plan für Informatik  an Gymnasien im Freistaat Sach sen, 2004 .  [RB9 6] Dida ktik der Informatik. Stuttgart: Klett-Ver lag, 1996.  [SS04] Schubert, Sigrid ; Schill, Andreas: Didaktik der Inform atik. Heidelberg , Berlin: Spekt- rum Akademischer Verlag, 2004 .  [Wa44] W agenknecht, Christian: Rekursion. Ein didaktischer Zugang mit Funktionen. Bonn:  Dümmler, 1994.  [Wa03] W agenknecht, Christia n: Algorithmen und Komplexität.  München: Hanser-V erlag , 2003.  [Wa04]  W agenknecht, Christian:  Programmierparadigmen – eine Einfüh rung auf der Grundla- ge von Scheme. Wiesbaden: Teubner-Verlag ,2004.  [WF98]W agenknecht , Christian;  Friedm an, Daniel P.: Teaching Nondet erministic and Univer- sal Autom ata Using Schem e. In: Com puter Science Education, Swets & Zeitli nger, vol. 8, no. 3, pp. 197-227, 1998 . 219 -Programmierparadigmen mit Scheme   C hristian Wagen knecht V eit Berg er   F achbereic h Informatik Fachsc haft Informatik  Hochschule Zittau /Görlitz (FH) Gesch wister-Sch oll-Gym nasium Löbau Brückenstr. 1 Pestalo zzistr . 21 D-02826 Görlitz D-02708 Löbau  c .wagenknecht@hs-zigr.dev .berger@gmx.net Abstract:  Der Beitr ag diskutier t Erfahrung en aus einem Kurs, in dem zahlr eiche  Inhalte des Informatiklehrplanes der Klassenstufen 11 und 12 mit funktionsorientierter Program mierung handlungsorienti ert verm ittelt werden. Das betrachtete Themen spektr um geht dabei über das hinaus, was üblicher weise unter Programmierparadigmen subsu miert wird. Innovativ ist die Behandlung dieser  Themenvielfalt ausschließ lich mit Scheme als sprachlich en Träger. Dies erlaubt die charakteristischen Eigenschaften altern ativer Program mierund Denkstile sowie tragende Konzepte der Infor matik in ein und derselben Programmierumgebun g herauszuar beiten . Es ist vorgeseh en, die hier diskutierte fachdidaktische Konzeption durch eine speziell entwickelte Lernum gebung mediendid aktisch zu begleiten.  1  Einführung  Informatische Bildung ist Allgemeinbildung, die für die komplexen Anforderungen im beruflichen undgesellsch aftlich en Alltag unerlä sslich geworden ist. Mit der Refo rm der  sächsi schen Lehrpläne ([LP04]) wurde dieser Aspekt besonders berücksichtigt. Im Eckwerte papier zur inform atischen Bildung ([EW02])wird deshalbfür Schüler  der gymnasialen Oberstufe form uliert: „ ... Während der Bearbeitung größerer Projekte lernen sie, in der Fachsprache zu argumen tieren, grundlegendeKonzepte inder Informatik  zu erläu tern, Gestaltungsaufgabe n zu beschreiben und komplexe Anwendungen und Aufgaben zu analysieren. Die Anwendung der Fachs prache zielt insbes onde re auf das in dieser  Altersstufe vorhandene Abstraktionsvermögen und erwartet von den Schülern Interpretationen und Begründungen imfachlichenKontext. ... “   Insbesondere funktionsorientierte Programmiersprac hen bieten mit ihremdeskriptiven Konzept geeignete didaktische Ansätze, um den o. g. Anforderungen in einem Grund bzw. Wahlgrundkurs der Jahrgangsst ufen 11/12 nachzukomme n. Auf der Basis eines Lehr buches [Wa04] für Informatik-Studierende im 1. Semester entstand angepasstes Unterrich tsmaterial [La04 ]. Das entwick elte Material wurde in den Schuljahren2003/04 und 2004/05 in je einem Wahlgrundkurs der 11. Klasse e rprobt. Die Verwendungder(Turing-vollstän digen) Programmi ersprache Scheme für ausgewählte didaktische Zweck e ist vor allem anHochschulen weit verbreitet. Es gibt eine Reihe von Erprobungen in Schulen.  220 -Die in [Wa04 ] erstm als in dieser Breite publizierte Verw endu ng von Scheme zur Einführung einer breiten Palette informatisch er Grundkonzeptesteht nicht inKonk urren z zu  didaktisch spezialisierten Modellwelten , wie etwa der turtle geometry, BlueJ, PAGE,  Karel, DrPython , KARA, Ham ster u.v. m. Nach folgend werden die Schwerpunkte und einige ausgewähl te Inhalte dieses Kurses vorgestellt und im Hinblick auf deren didaktisc h-methodisc he Umsetzung reflektiert.  Beispiele undweiterführende Übungsaufgaben zeigen,dass der Zugangüber die funktionsorientierte Programmierung zum Studiumfundam entaler Wirkund Funktionsprinzipien komplexerer Informatiksy stem e, wie beispielsweise der Clien t-Server-Arch itektur,  ausgeweitet werdenkann.  2  Fachdidaktische Kon zeption  ZurRepräsentation funktionsorientierter Programmierung verwenden wirScheme. Diese  Sprache ist vorrang ig für Lehrzweck e entwickelt word en undgestattet die Formulierung semantisch anspruc hsvoller Ausdrücke bei äuße rst knappe r Syntax. Dies versetzt uns in  die Lage, leistungsstarke Programmierkonz epte, wie dieRekursion , Funktionen höherer Ordnung und verzögerte Evaluation  im Unterrich t zu thematisieren . Diese sind in anderen Programmiersystemen nur ansatzweise vorhanden, erfordern starke Zugeständnisse  an denCompiler und erfüllen eine unbefriedigende Lernkurve.  Scheme liegt in Gestalt von DrScheme alskostenlose didaktische Entwicklungs umgebung für die Betriebssysteme Windows und Linux vor. Dam it ist DrSchem e eines der ganzwenigenProgrammiersyste me, die einen didaktisch en Zuschn itt habenundpermanent gepflegtund erweitertwerden. DrScheme istintuitiv zu bedienen und ermöglicht interaktive Entwurfsund modulare Test zyklen.  In Tabelle 1 sinddie Schw erpunkte und Lehrplaninhalte zusamm engestellt, mit denen  wir uns hier besonders beschäftigt habe n. Man kann erkennen, dass der betrachtete Kurs nichtverengt auf einen Lehrgang „funktionales Programmieren“  angelegtwurde.   Vielmehr gehtes um grundlegendere Datenstrukturen und Wirkprinzipien, die basierend auf dem Parad igma der funktionsorientierten  Programm ierungvermittelt werd en. Dem entsprechend wird der Schwerpunkt auf die Entwicklung von Mentaltechniken, wie das  Abstrahieren und Generalisier en sowie das Beschreiben von Problemlösungen, gelegt.   Diese sehr anspruchsvolle Ziels etzun g erfor dert motivieren de Aufgaben mit praxi srelevantemSachkontext. Problemstellungen dieser Art finden sich dann auchin den Projektarbeiten wieder, siehe Tabelle 1.221 -LB Thema Schwerpunkte Inhal te Std.  1 Einführungin die funktionsorientierte  Programmi erungRead -Eval-Print-Loop (REPL ) Datenty pen -Zahlen  -Zeich en / Zeichenketten -Wah rheitswert e  -Daten struktur Liste  Bedingte Ausdrücke  Prozedure n -bena nnt / unbenannt Rekursionen  -echte Reku rsion en -endständ ige Rekursionen -Mehrfachrekursionen Kommunikation im Direktmodus  einstellige / mehrstellig e   Prozedure n -Summe, Fakultät,   Fibonacci-Z ahlen  Prozedure n mit Listen  -Minimum  -Loesc hen, Superloeschen  -Element?, Superelem ent?20  2 Prozeduren höherer OrdnungProzedur höherer Ordnung  Anwendung von Prozedu ren auf Listen  komplexe Anwendungen Numerisch e Ableitung beliebiger Funktionen  Wertetabellen  Nullstellen suche10  3 verzögerte Evaluation Evaluationstechniken  Stream s Projektarbeit: Zahlenfo lgen -rekursive, explizite Bildungsvorschrift  -Grenzwerte von Zahlenfolgen  -Partialsummenfolgen 10  4 λ Kalkül theoretische Grundlage n α-Konvention,β-Reduktion, η-Vereinfachung  Symbolverarbeitung einfache Anwendungen der  Rechenregel n Projektarbeit:  Symbolisches u. numerisches  Diffe renziere n10  5 Ausgewäh lte  Algo rithmen und ihre Effizienz Intuitiver Algorith musbegriff  -Sequ entielle / binäre Suche  -Minsort / Quicksort Aufwandsbetrachtungen: -Zeitkomplexität und   O-No tation Grenzen der Berechenbarkeit komplexe Anwendungen  aus-gewählter Algo rithmen in einem  Mini-DatenbanksystemImplementation ausgewählter Algo rithmen empirische E ffizienzunt ersuchungen  Projektarbeit:  Mini-Datenba nksystem -Ein/ Ausgabe / Speichern  von Datensätze n  -Löschen vonDaten sätzen -Suchund Sortierfunktionen 15  Tabelle 1: Schwerpunkte und Inhalte 222 -3  Zur Einführung der funktion sorie ntier ten P rogrammierung  Die erste Kom munikationmit Schem e führtdie Schüler zur Präfixno tation. Diese ist  zwar zunäch st gewöhnungsbedürftig, bereitet jedoch erfahrungsgemäß kaum Schwi erigkeiten.Dennsehrhäufig benutzen wir in der Mathematik bei derverbalen Beschreibung von Term strukturen eine „Präfixsprechweise“, z. B.: „Der Quotient aus der Summ e der  Zahlen 3 und5 und der Differenz der Zahlen 6 und 2“. Scheme folgt exakt dieser Deskription:(/ (+ 3 5) (6 2)). Die Schem e-Repräsentation wird also direkt durch  Versp rachlichu ngmathematischer Ausdrücke gewonnen.Durch die Nutzung generischer Oper atoren entfallen die Grenzen typischer Binäroperationen: „Die Summe aller natürlichen Zahlen von 1 bis10“ lautet in Scheme:(+ 1 2 3 4 5 6 7 8 9 10) .  Mit diesen einfachen Beispielen wirdberei ts die Bedeutung des Beschr eibungsas pekts bei funktionsorientierter Programmierung ange deutet:Wir abstrahieren vom konkreten Berechnungs prozess durch Besch reibung des Resu ltat, also des ‚Was’ und delegieren das ‚Wie’ andie Maschine, siehe a uch in[Wa44].  Zwischenbenutzerdefi niertenund eingebauten Prozeduren besteht keinGebrauchsunterschied. Hingegen ist die Unte rschei dung „Term vs. Funktion/Prozed ur“ fundamental. An dieser Stelle setzt begrifflich es Arbeiten an, wobeidie funktionsorientierteProgrammierung nicht Selbstzweck  ist, sondern Vermittler i. S. eines didaktischen Transportmedi ums. Die Bezeichnung lambda wird den Schülern kurz begründet. (define volumen    (lambda (radius hoehe)      (* pi (sqr radius) hoehe)))  > (volumen 2.5 7.0)  137.44467859455347 Ein besond ers leistu ngsfähiges Mittel zur Besc hreibung von Resu ltaten ist die Reku rsion. Dam it wird von einem meist komplexen Berechnungsprozess abstrahiert.Dieser wird nach entsprechendem  Aufrufvom Computer ausgeführt. Im Kopf des Programmierers darf er keinerlei Rolle spielen , wenn die Lösung erfolgreich  entwickelt werd ensoll.  Das Denken in der Kontrolleist schädlich für den Entwurfrekursi ver Prozeduren! Den Schülern bereitet diese Denkungsart anfangs große Schwierigkeiten. Hier lässt sich nicht auf Alltag serfahrung zurückgreifen, denn rekursivbeschriebene Prozesse gibt es  dort kaum. Deshalb sind intensive Übungen notwendig. Selbstähnliche geometrische  Figuren helfen. Gründe, die einem grafischen Zugang den Vorzug geben, kennen wir berei ts von LOGO’s turtlegeom etry. Allerdings eigene n sich auch Inhalte aus der Mathematik, wie (explizit und)rekursiv definierte Zahlenfolgen. Die Aufgabe, aus einer  rekursiven Beschreibung einen iterativen Prozess abzuleiten, wird dem Programmiersystem übert ragen. RekursivesDenken kann trainiertwerden!Die folgenden beiden Beispiele gehen aus  Anregungen von Schülern hervor. 223 -Beispiel 1: Minimumsuche in einer Zahlenliste Beschrei bung:D as Minimum einer einelementigen Liste ist das Element selbst, anderenfalls bestimme das Minimum der Restliste (= Liste ohne erstes Element). Ist dieses kleiner als das erste Liste nelement, so gib es als Minimum der gesam ten Liste zurück, anderenfalls ist das erste  Listenelem ent das Resultat.  Implementation:(define minimum    (lambda (ls)      (if (null? (cdr ls))          (car ls)          (let ([min (minimum (cdr ls))])            (if (< min (car ls))                min                (car ls))))))  > (minimum '(23 43 4 5 6 7 898 7 65 43 2 1 5 5 56))  1 Beispiel 2: S chnapszahle nprüfe r (keine Schna psidee!)  Vorüberlegung:Eine mehrstellige natürliche Zahl heißt Schnapszahl, wenn alle ihre  Ziffern untereinander gleich sind. Wir wollen diese Definition mit einem numerisc hen Algorithm us implementieren. Die leistu ngsstarke  Ganzza hlarithmetik von DrSchem emacht die Umsetzung besonders attrak tiv.  Beschreibung: Eine einstellige Zahl ist keine Schnapszahl. Eine zweistellig e Zahl ist  eine Schn apszahl, wenn  beide Ziffern  gleich sind. Einemehrstellig e  Zahl ist eine Schnapszahl, wenn ihre letzten beiden Ziffern gleich sind unddie Zahlohne der letzten Ziffer eine Schnapszahl  ist. Implementation:(define schnapszahl?    (lambda (n)      (cond        [(< n 10) #f]        [(= (quotient n 10) (modulo n 10)) #t]        [else          (and (= (modulo n 10) (modulo (quotient n 10) 10))               (schnapszahl? (quotient n 10)))])))  > (schnapszahl? 555555555555555555555555555555555)  #t  > (schnapszahl? 555555555555555555565555555555555)  #f In Abgrenzung zu anders lautenden, auch aktuellen , aber keineswegsneuendidaktischen  Diskussionensind mathematische Einstiegsaufgaben hier keinesfalls kontraproduktiv. Mit der Auswahl einer Programmiersprac he wird das dominierende Paradigma festgelegt. Das Paradig ma bestimmt das Modellierungskonzept. 224 -Im Falle der Objekt-orientierten  Modellieru ng (OOA/ OOM), die die aktuelle Prog rammierwelt prägen, stellt dies eine didaktische Herau sforderung  besonderer Komplexität dar: „OOM ist für Anfänger keinesweg s intuitiv und einfach . …“ [SS0 4, S. 196]. Dagegen erweist sichdieser Modellieru ngsaspekt für funktional-app likative Sprachendurch  deren natürliche Nähe zur Mathematikals wesentlich „ansp ruchsloser“. Insofern können  funktional-applik ative Sprachen  sehr wohlTräger informatischer Konzepte sein, womit wir ältere n Thesen (1996), wie „Funktiona le Sprache n sind für die Schule ungeeignet, sie gehören auf die Universität.“ [RB9 6, S. 240], strikt entgegent reten.  Eine Folgerung  aus dieser Überleg ung ist die Wahl mathematischer Anwendungen als Einstiegsaufgaben. Obwohl wir mindest ens seit 1980 von S. Pape rt wissen, dass grafisch repräsentierbare Sachkontexte zum Einstieg ins Programmieren algebraischen vorzuziehen sind, folgen wir der oben beschrieben en Modellierungscharakteristik undwählen deshalb Aufgabenstellungen aus der Mathematik. Auße rdem werden nicht Grundschulkinder oder noch Jüngere angesprochen, sondern Schülerinnen und Schüler der gymnasialen Oberst ufe. An dieser Math ematik-Anfangslastig keit, die schon  vor 10 Jahren  in  [Wa44] bewusst praktiziert wurde, halten wir auf der Basis von mehr als 20-jähriger Lehre rfahrungmit funktional -applikati ven Sprachen fest.  Für die Ausarbeitung von Themen, die sichmit der Effizienz von Algorithmen beschä ftigen, bietet [Wa03] eine Orientierung. Interessierte Lese r finden hier weitere Beispiele  rekursiver Prozeduren, wie sie für typische algorithmische Entwurfsmuster durch Prozessabstraktion gewonnen werden können.  4  Ausge wählte Inhalte und fachdidaktisch-methodische Analysen  4.1  Raten einer Zahl – ein Einstieg sbeispiel für Effiz ienzuntersuchungen  Mit der Implementation des Ratens einer (vom Computer „erdac hten“) Zahl ergibt sich sofortdie Frage nach einem effizienten Algorithmus. Oft wird von den Schülern das Intervallhal bierungsve rfahren als einfacher Vertreter der Teile -undHerrsche -Algo rithmen vorgeschlagen .  (define computerraten-anzahl    (lambda (zahl max)      (letrec          ([suche            (lambda (li z re)              (let ([mi (quotient (+ li re) 2)])                (cond                  [(= z mi) 1]                  [(< z mi) (+ 1 (suche li z mi))]                  [else                   (+ 1 (suche mi z re))])))])        (suche 1 zahl (+ max 1)))))  > (computerraten-anzahl (+ 1 (random 1000000)) 1000000)  19 225 -Erwa rtungsgemäß liefert die Verwe ndung von Zufallszahlen  recht untersch iedliche Ergebnisse, so dass sich nun empirische Untersuchungen anschließen müssen. Die Auswertung der entsprechenden Versu chsreihen kann dabei völlig offengehalten werden.  Denkbar sind hinreiche nd viele „Vers uchswiederholungen“, die mit Standa rdwerkzeugen (Excel, gnuplot )ausgewertet werden. Zu Ausweitungenführen Prozeduren, wie beispielsweise(computerraten-wdhlgmax wdhlg) und(grafik min max schritt  wdhlg). Der Aufruf (grafik 200 10000 200 1000)  liefert das inAbbildung1 dargestellte qualitative Schaubild mit der Turtlegrafik vonDrSch eme.  Abbildung 1:  Schaubild  zur Effizienzu ntersuchun g beim Raten  einer Zahl  4.2  Dokumentbeschreibungssprac hen und Generierung statischer Web-Seite n Das DrSch eme-System hält auch Module bereit , die es ermöglichen, einfache Modelle für die Kommu nikation in Netzwerken zu entwickeln und zu erproben. Ohne in die bekannte „Technik falle“ zu gehen, werd enwese ntliche Wirkp rinzipien in vertrau ter Arbeitsumgebung herausgearbeitet undprojektbezo gen angewandt.  ZwischenHTML/XML-Sprachen  und Scheme gibt es eine enge strukturelleVerwandtschaft. Aufdieser Basis könn en bestimmte  Scheme-Ausdrücke–quasi in natürlicher  Weise – statisch e HTML-Dokumentegeneri eren. Das kann den Autor stark entlasten.  (define wertetabelle    (lambda (von bis step f)      (letrec        ([zeile          (lambda (z)            (if (> z bis)              ()              (cons                `(tr (td ,(number->string z))                 (td ,(number->string (f z))))                (zeile (+ z step)))))])        (cons    '(tr (th "x") (th "f(x)"))   (zeile von))))) (define website  ) Dera rt erzeugte Dokumente müssen vor der Betrachtung mit einem Webbrowser gespeichert werde n.  226 -Die Scheme-Elemente im HTM L-Dokument werden evaluiert und an der vorge sehenen Stelle eingefügt. Im Beispiel wirddie durch (wertetabe lle 0 10 1 fak) generierte Tabel le (in HTML-Syntax) integriert. Die davon ausgehende Motivation für die Verwendu ng von „Produkt-Besch reibungen“ basiert darauf, dass Menschennur widerwillig  bereit sind, aufwänd igeund fehleran fällig e Routinetätigk eiten, wie das Abtippen üppiger  Tabel len mit separat  berechneten Inhalten, auszuführen. Der Computer soll dies für uns auf der Basis einer geeigneten Beschrei bung unseres Wunschobjektserledigen. 4.3  Dynamische Web -Seiten– Client-Ser ver-Archite kur  Zur Kommunikation inNetzwerk en stellt DrSch eme einen eigenenWeb server bereit.  Dam it wird es möglich,dynamische Websei ten serverseitig  zu generieren, um bestimmte Dienstleistunge n über ein Web-Interface anzubieten. Abbildung 2 zeigt einen „Funktionsanalysator“, der als Projekt unter Rückgriff auf Vorarbeiten zum Schwer punkt „Prozedu renhöherer Ordnung “ (sieheTabellel 1) entwickelt wurde.  Abbildung 2:  Nutzer form ular des Clients  / Antwortseite des Servers  Server und Clien t sollten auf getrennten Rechnern laufen , um den Schülern die Clien tServer-Kommu nikation erlebbar zu machen. Dann ist es nur noch ein kleiner Denkschritt  zu weltweit verteilten  Systemen. Dennoch sollte der Hinweis nicht fehlen, dass Clien tProgramm  und Server-Programm auch auf einunddemselben PC laufen könnten (so wie  es im Entwick lungsablauf zeitlich  vorher auch stattfand ). Hieraus erwäch st die so wich tige Erke nntnis, dass Client und Server softwarem äßig bestimmte Begriffe sind. Redensarten, wie „Druckerserver“ und „Fileserver“, verwischen dieses Bild und assoziieren Hardwaregebundenheit.227 -4.4  Web -Datenbanken  Eineweitere Ausbaustufe stellt die Realisieru ng einer kleinen Webd atenbank dar.   Hier wird der berei ts beschriebene n Client-Server-Kommunikation eine Datenbankkomponente hinzugefügt.Abbildung 3 zeigtdie Grundstruktur. Client Server Verarbeitung: Generierung einer dynamischen Webseitehttp-basierte KommunikationCGI / ServletServer SQL-AnfrageDatenbankODBC / JDBC Verarbeitung: Datenbankabfragegenerieren Abbildung 3:  Client-Serv er-Komm unikation bei einer Webd atenb ank  In Abbildung4 ist ein Kom munikationsbeispiel festgehalten worden.  Abbildung 4:  Nutzerformular und Antwortseite zum Webdatenser vice  Serverseitig  arbeitet Scheme als Interpreter für die SQL-Ko mman dos, derenGenerierung imIntera ktion sfenste r des Scheme-Webserversmitverfol gt werden kann. Die Zusam menarbei t mit dem bekannt en relationalen Datenbankmanagem entsystem MyS QL via  ODBCgelingt problemlos, siehe [Wa04]. Mit ein und derselben Umgebu ng werden damit Datenbankund Netzwer kanwendungen  fürSchü ler erlebbar und nachvollziehb ar. 228 -5  Bisherige Erfahrungen  Die bisherige zweijährige Unterrichtspraxis lässt folgende Schlussfolgerungen zu: •Abstrahierendes Beschrei ben stellt hohe Anforderunge n an die Schüler, sodass fachliche Schwächen  nicht mit „schönen Programmoberfl ächen“  kaschierbar sind.  •Zunehm ende P olarisierung der Schülerleistungen, verstärkte Leistungs-und Niveauunterschiede drücke n sich auch in den Benotungen aus.  •Die überschaubare, einfache Syntax unddie intuitive Bedienung von DrScheme setzen den Fokus stärker auf die Problemlösung. Auch das (gezielte) „Probieren durch Interagieren“ kann in schwierigen Phasen der Problemlösung weiter helfen.  •Leistu ngsfähige Programmierk onzepte (verzögerte Evaluation / Prozeduren höherer Ordnung) gewährleisten einen ausgeprägtenPraxisbezug.  •Die Software steht kostenlos zur Verfügung, was eine auße rschulische Nutzung ermöglicht. Um die Unt errichtsziele zu e rreichen, sindFortführungen notwendig.  •Seiteneffe ktfreie funktionsorientierte Programmierung sowie die im Allgemeinen zustand slosen Prozedu rengestatten  nicht nur eine scharfe Modularisierun g, sondern  eröffnen auch versc hiedene Möglichkeiten eines differenzierte n Inform atikUnterrichts.  •Der didaktische Zuschnitt vonDrScheme ermöglicht zahlreich e Bezü ge zuden  Wirkprinzipien verschiedener Informatiksysteme, die modellhaft nachgebildet werdenkönnen.Die bet rachteten Zusam menhän ge werden dadurch besser verstanden.  •Versc hiedene Vertiefungsrichtungen (Datenbanksystem, Grafik) sowie unterschiedliche Prog rammierparadigmen(z. B. imperative, objektorientierte, logikbasierte, parallele und ereignisgesteuerte Programmierung) können ohne Wechsel der Program mierumgebung exploriert werden.  6  Fazit  Die Verm ittlung von Grundkonzepten und Prinzipien der Informatik via funktionsorientierter Programmi erung mit Scheme ist unter Verwendu ng der beschriebenen Mittel ein  didaktisch tragfähiger Weg .Dies wurde bereits für ganz besonders abstrakte Inhalte der theoretisch en Informatik nachgewiesen , vgl. [WF98 ].  229 -Literaturv erzeichnis  [EW0 2] Eckw erte zur inform atischen Bildung an sächsischen Schu len, Comenius-Institut,  2002 .  [La04] Landfr ied, Carste n: Entwic klung  und Erprobung lehrplangere chter Unterrich tsmaterialien für den Informatik-Unterrich t inder Sekundarstufe II, Diplom arbeit 2004 .  [LP04] h ttp://www. sn.schule. de/~ci/dow nload/l p_gy_informatik. pdf: Lehr plan für Informatik  an Gymnasien im Freistaat Sach sen, 2004 .  [RB9 6] Dida ktik der Informatik. Stuttgart: Klett-Ver lag, 1996.  [SS04] Schubert, Sigrid ; Schill, Andreas: Didaktik der Inform atik. Heidelberg , Berlin: Spektrum Akademischer Verlag, 2004 .  [Wa44] W agenknecht, Christian: Rekursion. Ein didaktischer Zugang mit Funktionen. Bonn:  Dümmler, 1994.  [Wa03] W agenknecht, Christia n: Algorithmen und Komplexität.  München: Hanser-V erlag , 2003.  [Wa04]  W agenknecht, Christian:  Programmierparadigmen – eine Einfüh rung auf der Grundlage von Scheme. Wiesbaden: Teubner-Verlag ,2004.  [WF98]W agenknecht , Christian;  Friedm an, Daniel P.: Teaching Nondet erministic and Universal Autom ata Using Schem e. In: Com puter Science Education, Swets & Zeitli nger, vol. 8, no. 3, pp. 197-227, 1998 . 