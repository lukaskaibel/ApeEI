- 309 -Puck - eine visuelle Programmiersp rache für  die Schule Lutz Kohl Abteilun g für DidaktikFakultät für Mathematik und Inform atikFriedr ich-S chiller-Universität JenaErnst-Abb e-Platz 2D-07743 JenaLutz.Koh l@uni-jena.de Abstract:  Im Rahmen der Diplomarbeit des Autors wurde an der Friedri ch-Schil-ler-Universität Jena eine visuelle Programmiersprache für den Einsatz in Schulenentwick elt. In einer vorang egangenen Studienarbeit wurden  hierfür theoretischeGrundlagen gelegt und bestehen de Systeme gesichtet. Durch Interviews mit Leh-rern sind Anfor derungen an eine solche Sprach e zusammengetr agen worden. Ziel war es, ein System zu entwicke ln, das Anfängern einen leichten Einstieg in das Programmieren ermöglicht und Syntaxf ehler vermeidet. Das Ergebnis der Arbeiten – das Puck-Sy stem – wird in diesem Beitrag  vorgestellt. Außerd em wird eine erste Erprobung in der Schule beschr ieben. 1  Einl eitungStellung undBedeutung des Programmierens im Informatikunterricht an allgemein bil-denden Schulen werden innerhalb der Fach didaktik Informatik imme r wieder neu disku-tiert. Eines scheint aber klar zu sein: Das Programmieren zu lernen, ist nicht einfach. Gerade durchdie vielfältig en Syntaxreg eln, erscheinendem Anfänger die Hürd enoftunüberwindbar. Durchvisuelle Programmi erung1 ist es mit Hilfe von Bausteinen, die aufgrund ihrerForm nur in richtigerArt undWeise miteinanderverbunden  werdenkön-nen, möglich, Syntaxfehler weitestgehe nd zu vermeiden (vgl. [KP03]). Somit wird deranfängliche „Schoc k“ beiProgrammierneul ingen (vgl. [RRR03]),der dadurch entsteht, dass in kurzer Zeit verschiedene schwierig e Aufgaben zu bewältig en sind2, entschä rft, indem das E rlernender Syntaxberei tsvon einem Programm übern ommen wurde. Der größte Nach teil visueller Prog ramm iersp rachen, komplexe Inhalte vergleich sweise unübersich tlich darzustellen , tritt bei vonAnfängernkonstruierten Prog ramm en nicht1 Mit visuellen Programmiersprachen sind im Folgende n solche Sprachen gemeint, bei denen  ein Programmvollständig mit Hilfe von visuellen Elementen entwickelt wird.Auf Systeme,die eine einfache visuelle Erstel-lung der Oberfläche ermöglichen, bei denen die Funktio nalität aber textuel l entwicke lt werdenmuss, wird in diesem  Beitrag nicht näher  eingegang en.2 In [RRR03]  sind folgende schwier ige Aufgaben fürProgrammieranfänger  angegeben:  generelle Orientier ung,wofür Programmeda sind und was man mit ihnen machen kann; ein imaginär erMaschinenbegr iff: ein Compu-termodell , das mit der Programmausführung verbunden ist; Notation des Programms, das heißt Syntax und Semantik einer Programmiersprache; Schem as und Pläne zumLösen von Aufgaben; praktisc he Fähigkeiten wie Planen, Entwi ckeln, Testen, Fehlersuchen.  - 310 -auf,da diese nur einen geringen Umfang haben3. In einer vom Autor an der Friedrich-Schiller-Un iversität Jenaverfass ten Diplomarbeit wurde, nach einer vorherigen Erhe-bungvon Anforderungen, eine visuelleProgrammierspra che mit einem dazugehörigenProgrammiersyste m für den Einsatz in Schulen entwickelt. Mit Hilfe dieses Systemskönnen Anfänger ein Programm per Dragand Drop konstruiere n. Im Verlauf des Lern-prozesses  werden dem Schüler – je nachKonfiguration durch den Lehrer– nur be-stimmte Bausteine zur Verfüg ung gestellt. Dadurchbekommt ein Anfänger die Mög-lichkeit, das Programmieren  schrittweise, alsoAnweisungfür Anweisun g, zu erlern en.  Abbildung 1: Ein mit Puck  erstelltes Programm zur Berechnung der ersten 20 Quadratzahlen Zu einem visuell erstellten Programm  kann der Benu tzer denQuelltext in der Sprache Oberon-2generieren und anzeigen lassen .Der so erstellte textuelle Code kann mit der Programmierumgebung Pow! geöffnet, kompiliert und ausgeführt werd en4.  2  Ent wicklung von Anforderungen Ein Ziel der Studienarbeit des Autors war es, Anforderungen an eine visuelle Program-miersprac he, die an Schulen eingeset ztwerdenkann, zu erheben (vgl. [Ko04a]). Zu-näch st wurden verschiedeneSysteme analysiert. Lehrer stellen neben Schülern die Ziel-gruppe für ein visuelles Programmiersystem  dar undbestimmen auf Grundlage des Lehrplans über den Einsatz eines Werkzeuges im Unterricht. Außerdem besitzen sie wertvolle Erfahrungen, die für die Entwicklung einer Programmiersprac he für den Ein-satz in Schulen nützlich  sind. Desh alb erwies es sich als sinnvoll, die Mein ungenvon Lehre rn zu erheben. In einem ersten leitfade norien tierten Interview wurden diese nach3 Vor- und Nachteile visueller  Programmiersprachen sind in [Sc98]  und [Ko04a]  ausführlicher  zusam menge-stellt. 4 Die Quelltextgener ierung wurde exemplarisch für die Programmiersprache Ober on-2 implem entier t, da diese an vielen Thüringer  Schulen eingesetz t wird. Es istmöglich, das System so zu modifizieren, dass textueller Code für eine andere Progra mmiersprache erzeugt wird.- 311 -ihrer Unterrichtspraxis und ihren Forderungen an eine visuelle Programmiersprac he fürden Einsatz in Schulen befragt. Da den Interviewpartnern meist keine visuellen Pro-gram miersysteme beka nntwaren, wurdenihnen die Beispiele LabView, LogoBlocksund Agentsheets vorgestellt. Dadurch  wurde abgesichert, dass sie eine Einführung in die Möglichkeiten dervisuellenProgrammier ung erhielten .Die Ergebnisse der Befragungwurden zu einem Anforderu ngsdokument zusam mengefa sst. Dieses wurde den Lehrern in einem zweiten Interview vorgestellt und konkretere Fragenwurd en ausfüh rlicher dis-kutiert.  Die Anforderungen der Lehrer ware n auf die Umsetzung des Lehrplans ausgerichtet. Sowurden die Erwartungen formuliert, dass sich die visuelle Programmiersprac he am im-perativen Programmierparadi gma orientieren und auf das Arbeiten mit textuellen Spra-chen vorbereiten  soll. Auf die im Unterricht zu vermittelnden Konzepte wie Variab len,Anweisunge n, Rekursion sowie Globalität und Lokalität wurde viel Wert gelegt. Auße r-dem wurde gefordert, dass zu einem visuell erstellten  Programm der Oberon-2- bzw. Pascal-Qu elltex tgeneriert werden kann. Des Weiteren  wurdeneine Hilfe undeine Auf-gabensam mlung gewünsc ht. Die visuelle Programmiersprache sollte nach Möglichkeit den Schulen im Internetkostenlos zur Verfügung gestellt werden. Für die Entwicklungvon schulisch geeigneter Software wird in [Fo04] außerdem gefordert,besonderenWertauf die sorgfältig e Ausgestaltu ng der „Schüler-Computer-Schn ittstelle“  zu legen. ImRahmen der Diplomarbei t des Autors wurde ein diesenAnforderungen entsprechendesSyste m entwick elt. 3  Fragen zu Puck 3.1  Was  ist Puck?  Puck ist eine visuelle Programmiersprac he mit dem zugeh örigen visuellen Programmier-system, das dem Benutzer ermöglicht, mitHilfe von Bausteinen einfache Programme zu erstellen. Somit können Anfänger die Verwendung vonVariablen, Anweisungen undProzeduren erlernen, ohne gleich mit der komplexen Syntax einer Programmiersprac he konfrontiert zu werd en. Bei anspruchsvo lleren Aufgabenmuss dann auf textuelle Pro-gram mierung umgestiegen werden. Dies soll dadurch erleichtert werden, dass sich derNutzer zum aktuellen  visuellen Programm  auch stets denQuelltext ansehenkann.  3.2  Was  kann Puck ? In der visuellen Programmiersprac he Puckkönnen typische Programme des Anfangsun-terrichtes entwick elt werd en. Mit elf Anweisungsbausteinen(Zuweisu ng, Eingabe, Aus-gabe , Texta usgabe, IF THE N, WHILE D O, REPEAT UNTIL, FOR, Prozedura ufruf, Dot und Line) ist es möglich, die Grundstrukturen imperat iver Programmierung kennen zulernen. Innerhalb der Anw eisungen können nur vorher deklarierte Variablen verwendet- 312 -werden. Als Datentypenstehen Integer und Boolean zur Verfügung5. Es ist möglich, Prozeduren zuerstellen, dene n eine beliebige Anzahl anWert- und Referenzparam eternübergeben werden kann. Somit könne n auch rekursive Program me, zum Beispiel zumLöse n des Problem s der Türm e von Hanoi  oder zum Berechne n von Fibonacci-Z ahlen, implementiert werd en. Mit Dot und Line wurd en zwei Anweisung sbaustein e indas Puck-System aufgenommen, die es ermöglichen, motivierende  Fadengrafiken zu erstel-len. Es wurdebewusstauf weitere Datentypen, komplexe Anweisungen unddie Ver-wendung von Funktionen verzichtet, umeine Ei gnung der visuellen Programmiersprac hefür den Anfangsunterricht sicherzustellen .3.3  Wesh alb Puck ? „Herr Lehrer, ich hab da so eine komische Fehlermeldung.“ „Du hastdort ein Semikolonvergessen.“ „Wenn du eine Variable verwendest, musst du sie vorher deklarieren.“ „Duhast dortdas Schlüssel wort ‚WHILE’ falschgeschrieben.“ „In deinem Programm ist ein‚END’ zu wenig.“ Wer einen dieser Sätze schon einmal im Unterrichtgehörtoder gesagt hat, wirddie Vor-teile von Puckzu schätzen wissen. Nun mag der Leser entgegnen, dass die dargestelltenProbleme beim Übergang zu einer textuellen Sprache trotzd em auftreten können. In derTat sind dazu weitere Untersu chungen erforderlich. Der Autor ging bei seiner Arbeitaber davon aus, dass es einfacher ist,die Syntax einer abstrakten textuellen Pro-gram miersprac he zu erlernen, wenn die verwendeten Konstrukte berei ts bekannt sind.Außerdem  werden di e Schüler schon während der Ar beitmit Puck durch den generiertenQuelltex t auf die richtigen Schreibweisen vorbereitet. Des Weiteren  erscheint der Zu-gang zur Inform atikmit Hilfe von Bausteinen, die zu einem Programm zusam mengefü gtwerden, für Schüler motivierende r als das Erstellen eines Textes, der einer großen Men-ge von syntaktischen Regeln entsprechen muss.  Puck ist ein Open -Source-Projekt und kann so problemlos erwei tert werden. Es bestehtdurchaus die Möglichkeit,dass besonders interessierte Schüler im Rahmen von Projekt-arbeiten zum Beisp iel zusätzlich e Bausteine entwick eln6. 4  Ein Beispiel Ein rechteckiges Grundstück soll mit quadratischen Steinplatten gleicherGröße lücken-los gepflastertwerden. Sowohl die gesam te Fläche als auch die Steinplatten haben ganz-zahlige Seiten längen. Ermitteln Sie die Stein platten maße so, dass für das Pflasternder Fläche m öglichst großePlatten verwendet werden können. 5 Die verwendeten Datenty pen reichen für eine Einführ ung in die Programmierung aus. In [Fo02]  werden die Grundb egriffe imperativer Programmierung mit der Programmiersprache Python in einem  ersten Kapitel auch unter  ausschließlicher  Verwendung der Datentypen Integer  und Boolean erklärt.6 Puck ist unter  derURL www. uni-jena.de/Puck. html verfügbar . Das Programmist in Java implem entier t. Indem ausführbaren Archiv Puck.jar sind ca. 100 Klassen  mit den zugehörigen  Quelltexten enthalten. Das Ent-wick eln eines Baus teines für das Puck -System ist in [Ko04b] exemplarisch an einem Beispie l dargestellt. - 313 -Bei genauerer Betrach tung dieser Aufg abe stellt sich heraus, dass der größte gemeinsa-me Teiler der Seitenlängen des Grundstücks gesucht ist.Dieser kann geometrisch ermit-telt werde n: Von einem Rechteck wird stets ein Quadrat mit den Seitenlängen der kürze-ren SeitedesRechteckes abgezogen. Anschließend wird nur das entstehende Rest-Rechteck betrachtet und mitdiesem wird wieder gena u so verfahren. Gibt es kein Rest-Rech teck, sohat das als letztes abgezog ene Quadrat das gesuchte Platten maß (vgl. Ab-bildung 3). Das in Abbildung 2 dargestellte Programm„Rech teckPflas tern“ zeigt eine mögliche Lö-sungder Aufgabe, m it einer Darst ellung des besc hriebenen geom etrischen Prozesses. Abbildung 2: Das Programm zum Pflastern eines Rechteck es Der von Puck generierte Quelltex t zum Programm  aus Abbildung2 wurde mit Pow! geöffnet, kompiliert und ausgeführt. EineFehlersu che nach dem Kompilieren  war nichterforderlich. Die Ausgabendes Programms bei den Eingabewe rten 308 und 66 sind inAbbildung 3 dargestellt. - 314 -Abbildung 3: Ausgabe des Programms RechteckPflastern oben: der geometrische Lösungspro zess; unten: Ausgabe des Ergebnisses An diesem  Beispiel sollen nun einige Ei genschafte n des Puck-System s erläutert werden.  4.1  BausteineFür die Lösung deroben genannten Aufgabe wurdennur die Baus teine Eingabe, Aus-gabe , Zuweisung, IF THEN, Prozeduraufruf und Line benötigt.Alle anderen Bausteinewurden im Program m unter dem PunktOptionen ausgeblendet7.  4.2  Variablendeklaration Variablen werden deklariert, indem  das kleine schwarze  Dreieck rechts neben demSchlüsselwortVAR  angeklickt wird. Sie werden fortlaufend mit kleinen Buchstaben des Alphabetes benannt. Nam eund Datentyp könnenin derAttributtabelle, die sichbeimAnklicken der Bausteine jeweils auf der rechten Seite des Bildschirms befindet,verän-dert werden. Es wird nachjeder Verä nderung überprüft, ob ein Variablenname im gege-benen Kontextbereits vergebenwurde bzw. ober den Nam enskonventionen derver-wendeten Sprache (Oberon-2) entspricht. Variablen vomTyp Integer sind dunkelblau,Variab lenvom Typ Boolean sindgrau dargestellt. 7 Der Lehrer hat zusätzlich zu demM enüpu nkt „Opti onen“ die Möglichke it,mit einem Setup-Pr ogrammdas Puck- System jede Unter richtsstunde neu einzu stellen und für die Schüler so die zu verwendenden Bausteine festzulegen. Außerdem kann derMenüpun kt „Optio nen“ für die Schül er unzugänglich geschal tet werden, so dass diese nichts an der aktuellen Einstellung  des System s verändern können.Dekl arieren einer neuer Variablen Dekl aration der Integer-Variablen a Verwenden der Integer-Variablen b - 315 -4.3  Proz edur aufruf Bei einem Prozedura ufruf müsse n die aktuelle n mit den formalen Parametern  inAnzahl, Typ und Reihenfolge übereinstimme n. Um dies zugarantieren,wurde im Puck-Sy stemdurchgängig mit dem Observer-Entwurfsmuster (vgl. [Ga97]) gearbeitet. Wennder Be-nutzer die Signatur einer Prozed ur verändert, indem er zum Beispieleinen weiterenWert parameter vom Typ Integer hinzunimmt, so wird vom System in jeder Anweisung, in der diese Prozed ur aufgerufen wird, ein Integer-Ausdruck eingefügt, der der Prozedurals aktuellerParameter übergebenwird. Auch das Verä ndern des Nam ens einer Prozeduroder einer Variablen wirkt sich nicht nur auf die Deklaration, sondern auch auf jedeVerwendung derselben im gesam ten Programm aus. 4.4  Erstellen von Ausdr ücken Ausdrücke werdenin verschiedenen Anweisungen verwendetund könneninnerhalb des Puck-System s immer in der gleichen Art und Weise modifiziert werden. Ein Ausdruckinnerhalb eines Anweisungsbausteins besteht zunäch st aus einem Wert8, der in der Attri-buttabelleverändert odernach einem Rechtsklick durch eine im aktuellen Kontextgül-tige Variab le des richtigen Typs ersetzt werd en kann9. Sollen zu einem Ausdruck nochweitere Operatoren und Operanden hinzugefügt werden, so kann dies durch einen Links-klick auf das kleine Dreieck an der recht en Seite des Ausdrucks geschehen. Daraufhinwerdenimme r ein Operator und ein Operandin den Ausdruckeingefügt. Die je nachDatentyp möglichen Operatorenkönnenüber ein Kontextmenü ausgewähl twerden. Nach jeder Aktion entsteh t stets einkorrekter Ausdruck des jeweilig en Typs. Klammern werde n paarweise um einen Opera nden gesetzt und können anschließendeinzeln verschoben werd en, wenn ein Versch ieben in die jeweilig e Rich tung möglich ist.  8 Der Wert ist bei Integer  0 und bei Boolean je nach  Anweisung TRUE oder FALSE. Boolean- Ausdr ücke in Schleifen sind so initialisiert, dass eine Schleife höchst ens einmal durchla ufen wird. 9 In einen Boolean-Ausdr uck kann derVergleich zweierIntege r-Ausdrücke als Oper and eingefügt werden. DerVergleichsoper ator kann über ein Kontextm enü ausgewählt werden und die Integer -Ausdrücke können verän-dert werd en.Implementierung der Pro-zedur Abziehe n mit drei formalen Para metern Aufruf derProzed ur Recht-eckZeichn en mit den aktuellenParametern a und bInteger-OperandEinfügen weiterer Operanden Integer-Operat or - 316 -4.5  BEG IN-END-Struk turen Die Grenzen eines Blockes werden in textuellen Programmiersprac hen meist durchge-schweifte Klammern, durch BEGIN-END-Strukturenoder durch Einrückung gekenn-zeichnet . In Puck wirdein Block durch eine Anweisungsfolge charakterisiert.Diesebesteht anfänglich aus einer einzelne n Anschlussstelle für einen Anweisungs -Baustei n. Klickt der Benutzer eines der beiden Dreieck e der Ansc hlussstelle an, so entsteht ober-halbbzw.unterhal b eine weitere Anschlussstelle, die wieder ebenso erweitert werdenkann. Wenn zum Beispiel ein IF-THEN-B austein an eine Anschl ussste lle ange hängt wird, so beinhaltet dieser zwei nach rechtsverset zte Anwe isungsfolgen, die den Block des THEN- und des ELSE -Zweig s beschreiben. Um Überschneidungenzu verhindern,werde n im übergeordneten Block leere Ansc hlussstellen eingefügt. 5  Eine erste Erprobung Das Puck-Syste m wurde im ersten Halbjahr des Schuljahres 2004/05 am Adolf-Reich wein-Gymnasium Jena in zwei Grundk ursen Informatik der11. Klasse eingesetzt. Der Lehrerwurde indie Bedienungdes Systems eingewiesen,  gestaltete seinenUnter-richt aber selbstständig. AmEnde des Halbjahres wurde die Verwe ndung des Systemsmit Hilfe eines schriftlichenErfah rungsberichtes des Lehrers, eines Interviews undder Erkenntnisse aus Unterrich tshospitationen10 ausgewertet. Der Unterricht untergliederte sich in drei Phasen. In der ersten Phase arbeiteten die Schüler nur mit Puck. Der Über-gang zur textuellen  Programmierung mit dem Pow!-System wurde in einer zweiten  Pha-se vollzogen.Inder dritten  Phase arbeiteten die Schüler ausschließlich mit textuellenOberon-2 Programmen. Zum Einstieg indas Programmieren wurden Punkte, Linienund Fadengrafiken gezeich-net. Im Verlauf der ersten Phase wurden den Schülern die benötigten Baustein e schritt-weise zur Verfügung gestellt. Dies wurde vom Lehrer als wichtiges methodisc hes Mittel für den Anfangsunterrichterkannt, denn die Schüler wurden dadurch nichtmiteiner Vielzahl von Befehlen konfrontiert, sondern konnten, je nach Problem, nur mit den vor-gege benen Anw eisungen arbeiten. Am Anfang einer Doppelstunde ware n die Computergesperrt. Das jeweils zu bearbeiten de Problem wurde im Klassenve rband analysiert, in Teilprobleme zerlegtund mögliche Schwierigkeiten, wie zum Beispiel der Datenflusszwischen den Programmteilen, wurden besprochen. Struktogramme wurden im Unter-richtsgespräch an der Tafel erstellt. Anschließend entwickelten die Schüler in Einzelar-beit das Programm im Puck-System. Durc h die ausführliche Vorarbeit entstanden nur 10 Der Autor  hatte die Möglichkeit,  in vier Doppelstunde n, in denen das Puck- System verwendet wurde, zu hospitieren. Anweisung sfolge mit zwei Ansc hlussstellen Einfügen weiterer An-schlussstellen- 317 -weni ge semantische Fehler. Durch die Verwendung der visuellen Programmiersprac heware n syntaktische Fehlerpraktisch ausgeschlossen. Somit hatten nahez u alle Schülerjeweils am Ende einer Doppelstunde ein funktionstüchtiges Programm . Nach Mein ung des Lehr ers konnten die Schüler inder ersten  Phase selbständiger als bisher arbeiten und auch schneller mit neuen  Befehlen umgehen , da die Syntax nicht imMittelpunkt stand. Auße rdem wurde  mehr Kreativität und Experimentierfreude ver-zeichnet.  Wan n genau der Übergang vom Erstellen der Programme mit Puck hin zum direktenEntwickelndes Oberon-2-Quelltextes stattfind et, wurde den Schü lern inder zweitenPhase freig estellt. Dadurchhatte der Lehrer mehr Zeit für die jeweilig enUmsteig er. Währen d einige Schü ler noch lange mit Puck arbeiteten , hatten sich andere schnell andie textuelle Programmierung gewöhnt. Das Verändern des von Puckgene rierten Quell-textes war für viele Schüler ein wichtiger Zwisch enschritt. Der Lehrer empfanddas Kompilieren  der Programm e im Pow!-Syst em als wich tig, da sich die Schüler sovonAnfang an mit der Oberfläche der Oberon-2-Entwicklungsumgebung vertraut machenkonnten.Auf den direkten Umgang mit dem Puck-Sy stem gab es keine Zensuren. Die Leistungs-kontrollen bezogen sich inden ersten zwei Phasen ausschließlich auf Problemanalysenund das Erstellen von Struktogrammen. Erst nachdem alle Schül er denWechsel von Puck zu Pow! vollzogen hatten, beganndie dritte Phase, in der auch der Quelltext mit in die Leistungsbewert ung aufgenomm en wurde. Nach Meinung des Lehrers bietet das Puck- System eine gute Möglichkeit, erste Pro-gramm iererfolge zu erlangen und die Kom plexität des Anfan gsunterrichts zu vermin-dern. Im Schu ljahr 2005/06 wird Puck im Adolf-Reichwein-Gymnasium Jena wieder eingeset zt. An dieser Stellemöchte sich der Autorbei demunterrichtendenLehrer Herrn GertStamm für die Kooperation bedanken. 6  Resümee Das in diesem Artik el vorgestellte Puck-Syste m zeigt exemplarisch , wie visuelle Pro-gramm iersprac hen für den Unterricht entwickelt werd en können. Das Einbeziehen der Lehrerschaft indie Anford erung sanalyse hat sich als sinnvoller Schritt herausgestellt. Hierdurchkonnte konsequ ente Zielo rientierung sowie Akzeptanz in der Schule sicher-gestellt werd en. Durch das Ausnutzen der Möglichkeiten der Visu alisierun g können Syntaxfehler zumindest  imA nfangsunterricht nahezu vollständig verm ieden werden. Obwo hl eineerste Erprobungdes vorgestellten  Systems positiv verlaufen  ist, stehen gena uere Untersuchungen desUnterrichtsverlaufes  noch aus.Als weitere Forschun gsfragen stellten  sichherau s:  •Wie gestaltet sich ein gesamtes Curricu lum bei Einb ezieh ungvisueller Pro-gram miersprac hen?- 318 -•Erzeuge n visuelle Programmiersprache nein eingeschränktes mentales Modell , das dem sprac hlich abstraktenArbeiten mittextuellen Sprachen  entgegensteht?•Ist es möglich, eine visuelle Sprache zuentwickeln, die so flexibel ist, dass sie den Anforderungen des Informatikunterrichts in der Schule gerecht  wird undsomit textuelle Sprach en imUnterrich t ersetzen  kann?Literaturv erzeichnis [Fo0 2] Fothe, M.: Problem lösen mit Python. Thüringer Institut für Lehr erfortbi ldung, Lehr-planen twicklung  und Medien (Hrsg.): Reihe Materialien , Heft 72, Bad Berka, 2002. http://www.uni-jena. de/data/unijena_/faculties/minet/casio /Publikationen/python.pdf (Stand: Mai 2005). [Fo04] Fothe, Michael: Unterrich t – bald nur noch mit Com puter ? (Antrittsvorlesung) , JenaerSchrif ten zur M athematik  und Inform atik, Math /Inf/1 3/04, Jena, 2004. http://www.m inet.uni- jena.de/preprints /fothe_04/avl.pdf (Stand : Mai 2005). [Ga9 7] Gamm a, Erich; Helm , Rich ard; Johns on, Ralph; Vlissides, John : Design Patterns: Elements of Reusable Object-Oriented  Software. 11. Auflag e, Reading, 1997 . [KP03]  K elleh er, Caitlin; Pausch, Rand y: Lowering the Barrie rs to Progra mming: a surve y ofprogramming environm ents and languag es for novice progr ammers. Pittsburgh, 2003. http://reports-archive.adm .cs.cmu.edu/anon/2003/CMU-CS -03-13 7.pdf (Stand : Mai 2005). [Ko04a] Kohl, Lutz: Konzepte der visuellen Progra mmieru ng und ihrer Einsat zmögli chkeiten an Schulen. (Studienarbeit), 2004. http://www. uni-jena.de/Lutz_Kohl.html (Stand: Mai 2005). [Ko04b] Kohl, Lutz: Entwurf und Implementierung einer  visuellen Programmiersprache für den Einsatz in Schulen. (Diplomar beit), 2004.  http://www.uni-jen a.de/Lutz_Kohl.html (Stand: Mai 2005). [RRR03 ] Robins , Anthon y; Rountr ee, Janet; Rountr ee, Nathan: Learnin g and Teach ing Pro-gramming: A Review and Discussion. In: Computer Science Education, 2003, Vol. 13, Nr. 2; S. 137-17 2. [Sc98] S chiffer, Stephan: Visuelle Prog ramm ierung: Grun dlagen undEinsatzmöglichk eiten. Bonn, 1998. - 309 -Puck - eine visuelle Programmiersp rache für  die Schule  Lutz Kohl  Abteilun g für Didaktik Fakultät für Mathematik und Inform atik Friedr ich-S chiller-Universität Jena Ernst-Abb e-Platz 2 D-07743 Jena Lutz.Koh l@uni-jena.de  Abstract:  Im Rahmen der Diplomarbeit des Autors wurde an der Friedri ch-Schil- ler-Universität Jena eine visuelle Programmiersprache für den Einsatz in Schulen entwick elt. In einer vorang egangenen Studienarbeit wurden  hierfür theoretische Grundlagen gelegt und bestehen de Systeme gesichtet. Durch Interviews mit Leh- rern sind Anfor derungen an eine solche Sprach e zusammengetr agen worden. Ziel  war es, ein System zu entwicke ln, das Anfängern einen leichten Einstieg in das  Programmieren ermöglicht und Syntaxf ehler vermeidet. Das Ergebnis der Arbeiten  – das Puck-Sy stem – wird in diesem Beitrag  vorgestellt. Außerd em wird eine erste  Erprobung in der Schule beschr ieben.  1  Einl eitung Stellung undBedeutung des Programmierens im Informatikunterricht an allgemein bil- denden Schulen werden innerhalb der Fach didaktik Informatik imme r wieder neu disku- tiert. Eines scheint aber klar zu sein: Das Programmieren zu lernen, ist nicht einfach.  Gerade durchdie vielfältig en Syntaxreg eln, erscheinendem Anfänger die Hürd enoft unüberwindbar. Durchvisuelle Programmi erung1 ist es mit Hilfe von Bausteinen, die  aufgrund ihrerForm nur in richtigerArt undWeise miteinanderverbunden  werdenkön- nen, möglich, Syntaxfehler weitestgehe nd zu vermeiden (vgl. [KP03]). Somit wird der anfängliche „Schoc k“ beiProgrammierneul ingen (vgl. [RRR03]),der dadurch entsteht,  dass in kurzer Zeit verschiedene schwierig e Aufgaben zu bewältig en sind2, entschä rft,  indem das E rlernender Syntaxberei tsvon einem Programm übern ommen wurde.  Der größte Nach teil visueller Prog ramm iersp rachen, komplexe Inhalte vergleich sweise  unübersich tlich darzustellen , tritt bei vonAnfängernkonstruierten Prog ramm en nicht 1 Mit visuellen Programmiersprachen sind im Folgende n solche Sprachen gemeint, bei denen  ein Programm vollständig mit Hilfe von visuellen Elementen entwickelt wird.Auf Systeme,die eine einfache visuelle Erstel- lung der Oberfläche ermöglichen, bei denen die Funktio nalität aber textuel l entwicke lt werdenmuss, wird in  diesem  Beitrag nicht näher  eingegang en. 2 In [RRR03]  sind folgende schwier ige Aufgaben fürProgrammieranfänger  angegeben:  generelle Orientier ung, wofür Programmeda sind und was man mit ihnen machen kann; ein imaginär erMaschinenbegr iff: ein Compu- termodell , das mit der Programmausführung verbunden ist; Notation des Programms, das heißt Syntax und  Semantik einer Programmiersprache; Schem as und Pläne zumLösen von Aufgaben; praktisc he Fähigkeiten  wie Planen, Entwi ckeln, Testen, Fehlersuchen.  - 310 -auf,da diese nur einen geringen Umfang haben3. In einer vom Autor an der Friedrich- Schiller-Un iversität Jenaverfass ten Diplomarbeit wurde, nach einer vorherigen Erhe- bungvon Anforderungen, eine visuelleProgrammierspra che mit einem dazugehörigen Programmiersyste m für den Einsatz in Schulen entwickelt. Mit Hilfe dieses Systems können Anfänger ein Programm per Dragand Drop konstruiere n. Im Verlauf des Lern- prozesses  werden dem Schüler – je nachKonfiguration durch den Lehrer– nur be- stimmte Bausteine zur Verfüg ung gestellt. Dadurchbekommt ein Anfänger die Mög- lichkeit, das Programmieren  schrittweise, alsoAnweisungfür Anweisun g, zu erlern en.   Abbildung 1: Ein mit Puck  erstelltes Programm zur Berechnung der ersten 20 Quadratzahlen  Zu einem visuell erstellten Programm  kann der Benu tzer denQuelltext in der Sprache  Oberon-2generieren und anzeigen lassen .Der so erstellte textuelle Code kann mit der  Programmierumgebung Pow! geöffnet, kompiliert und ausgeführt werd en4.   2  Ent wicklung von Anforderungen  Ein Ziel der Studienarbeit des Autors war es, Anforderungen an eine visuelle Program- miersprac he, die an Schulen eingeset ztwerdenkann, zu erheben (vgl. [Ko04a]). Zu- näch st wurden verschiedeneSysteme analysiert. Lehrer stellen neben Schülern die Ziel- gruppe für ein visuelles Programmiersystem  dar undbestimmen auf Grundlage des  Lehrplans über den Einsatz eines Werkzeuges im Unterricht. Außerdem besitzen sie  wertvolle Erfahrungen, die für die Entwicklung einer Programmiersprac he für den Ein- satz in Schulen nützlich  sind. Desh alb erwies es sich als sinnvoll, die Mein ungenvon  Lehre rn zu erheben. In einem ersten leitfade norien tierten Interview wurden diese nach 3 Vor- und Nachteile visueller  Programmiersprachen sind in [Sc98]  und [Ko04a]  ausführlicher  zusam menge- stellt.  4 Die Quelltextgener ierung wurde exemplarisch für die Programmiersprache Ober on-2 implem entier t, da diese  an vielen Thüringer  Schulen eingesetz t wird. Es istmöglich, das System so zu modifizieren, dass textueller  Code für eine andere Progra mmiersprache erzeugt wird.- 311 -ihrer Unterrichtspraxis und ihren Forderungen an eine visuelle Programmiersprac he für den Einsatz in Schulen befragt. Da den Interviewpartnern meist keine visuellen Pro- gram miersysteme beka nntwaren, wurdenihnen die Beispiele LabView, LogoBlocks und Agentsheets vorgestellt. Dadurch  wurde abgesichert, dass sie eine Einführung in die  Möglichkeiten dervisuellenProgrammier ung erhielten .Die Ergebnisse der Befragung wurden zu einem Anforderu ngsdokument zusam mengefa sst. Dieses wurde den Lehrern  in einem zweiten Interview vorgestellt und konkretere Fragenwurd en ausfüh rlicher dis- kutiert.   Die Anforderungen der Lehrer ware n auf die Umsetzung des Lehrplans ausgerichtet. So wurden die Erwartungen formuliert, dass sich die visuelle Programmiersprac he am im- perativen Programmierparadi gma orientieren und auf das Arbeiten mit textuellen Spra- chen vorbereiten  soll. Auf die im Unterricht zu vermittelnden Konzepte wie Variab len, Anweisunge n, Rekursion sowie Globalität und Lokalität wurde viel Wert gelegt. Auße r- dem wurde gefordert, dass zu einem visuell erstellten  Programm der Oberon-2- bzw.  Pascal-Qu elltex tgeneriert werden kann. Des Weiteren  wurdeneine Hilfe undeine Auf- gabensam mlung gewünsc ht. Die visuelle Programmiersprache sollte nach Möglichkeit  den Schulen im Internetkostenlos zur Verfügung gestellt werden. Für die Entwicklung von schulisch geeigneter Software wird in [Fo04] außerdem gefordert,besonderenWert auf die sorgfältig e Ausgestaltu ng der „Schüler-Computer-Schn ittstelle“  zu legen. Im Rahmen der Diplomarbei t des Autors wurde ein diesenAnforderungen entsprechendes Syste m entwick elt.  3  Fragen zu Puck  3.1  Was  ist Puck?   Puck ist eine visuelle Programmiersprac he mit dem zugeh örigen visuellen Programmier- system, das dem Benutzer ermöglicht, mitHilfe von Bausteinen einfache Programme zu  erstellen. Somit können Anfänger die Verwendung vonVariablen, Anweisungen und Prozeduren erlernen, ohne gleich mit der komplexen Syntax einer Programmiersprac he  konfrontiert zu werd en. Bei anspruchsvo lleren Aufgabenmuss dann auf textuelle Pro- gram mierung umgestiegen werden. Dies soll dadurch erleichtert werden, dass sich der Nutzer zum aktuellen  visuellen Programm  auch stets denQuelltext ansehenkann.   3.2  Was  kann Puck ?  In der visuellen Programmiersprac he Puckkönnen typische Programme des Anfangsun- terrichtes entwick elt werd en. Mit elf Anweisungsbausteinen(Zuweisu ng, Eingabe, Aus- gabe , Texta usgabe, IF THE N, WHILE D O, REPEAT UNTIL, FOR, Prozedura ufruf, Dot  und Line) ist es möglich, die Grundstrukturen imperat iver Programmierung kennen zu lernen. Innerhalb der Anw eisungen können nur vorher deklarierte Variablen verwendet- 312 -werden. Als Datentypenstehen Integer und Boolean zur Verfügung5. Es ist möglich,  Prozeduren zuerstellen, dene n eine beliebige Anzahl anWert- und Referenzparam etern übergeben werden kann. Somit könne n auch rekursive Program me, zum Beispiel zum Löse n des Problem s der Türm e von Hanoi  oder zum Berechne n von Fibonacci-Z ahlen,  implementiert werd en. Mit Dot und Line wurd en zwei Anweisung sbaustein e indas  Puck-System aufgenommen, die es ermöglichen, motivierende  Fadengrafiken zu erstel- len. Es wurdebewusstauf weitere Datentypen, komplexe Anweisungen unddie Ver- wendung von Funktionen verzichtet, umeine Ei gnung der visuellen Programmiersprac he für den Anfangsunterricht sicherzustellen . 3.3  Wesh alb Puck ?  „Herr Lehrer, ich hab da so eine komische Fehlermeldung.“ „Du hastdort ein Semikolon vergessen.“ „Wenn du eine Variable verwendest, musst du sie vorher deklarieren.“ „Du hast dortdas Schlüssel wort ‚WHILE’ falschgeschrieben.“ „In deinem Programm ist ein ‚END’ zu wenig.“  Wer einen dieser Sätze schon einmal im Unterrichtgehörtoder gesagt hat, wirddie Vor- teile von Puckzu schätzen wissen. Nun mag der Leser entgegnen, dass die dargestellten Probleme beim Übergang zu einer textuellen Sprache trotzd em auftreten können. In der Tat sind dazu weitere Untersu chungen erforderlich. Der Autor ging bei seiner Arbeit aber davon aus, dass es einfacher ist,die Syntax einer abstrakten textuellen Pro- gram miersprac he zu erlernen, wenn die verwendeten Konstrukte berei ts bekannt sind. Außerdem  werden di e Schüler schon während der Ar beitmit Puck durch den generierten Quelltex t auf die richtigen Schreibweisen vorbereitet. Des Weiteren  erscheint der Zu- gang zur Inform atikmit Hilfe von Bausteinen, die zu einem Programm zusam mengefü gt werden, für Schüler motivierende r als das Erstellen eines Textes, der einer großen Men- ge von syntaktischen Regeln entsprechen muss.   Puck ist ein Open -Source-Projekt und kann so problemlos erwei tert werden. Es besteht durchaus die Möglichkeit,dass besonders interessierte Schüler im Rahmen von Projekt- arbeiten zum Beisp iel zusätzlich e Bausteine entwick eln6.  4  Ein Beispiel  Ein rechteckiges Grundstück soll mit quadratischen Steinplatten gleicherGröße lücken- los gepflastertwerden. Sowohl die gesam te Fläche als auch die Steinplatten haben ganz- zahlige Seiten längen. Ermitteln Sie die Stein platten maße so, dass für das Pflasternder  Fläche m öglichst großePlatten verwendet werden können.  5 Die verwendeten Datenty pen reichen für eine Einführ ung in die Programmierung aus. In [Fo02]  werden die  Grundb egriffe imperativer Programmierung mit der Programmiersprache Python in einem  ersten Kapitel auch  unter  ausschließlicher  Verwendung der Datentypen Integer  und Boolean erklärt. 6 Puck ist unter  derURL www. uni-jena.de/Puck. html verfügbar . Das Programmist in Java implem entier t. In dem ausführbaren Archiv Puck.jar sind ca. 100 Klassen  mit den zugehörigen  Quelltexten enthalten. Das Ent- wick eln eines Baus teines für das Puck -System ist in [Ko04b] exemplarisch an einem Beispie l dargestellt. - 313 -Bei genauerer Betrach tung dieser Aufg abe stellt sich heraus, dass der größte gemeinsa- me Teiler der Seitenlängen des Grundstücks gesucht ist.Dieser kann geometrisch ermit- telt werde n: Von einem Rechteck wird stets ein Quadrat mit den Seitenlängen der kürze- ren SeitedesRechteckes abgezogen. Anschließend wird nur das entstehende Rest- Rechteck betrachtet und mitdiesem wird wieder gena u so verfahren. Gibt es kein Rest- Rech teck, sohat das als letztes abgezog ene Quadrat das gesuchte Platten maß (vgl. Ab- bildung 3).  Das in Abbildung 2 dargestellte Programm„Rech teckPflas tern“ zeigt eine mögliche Lö- sungder Aufgabe, m it einer Darst ellung des besc hriebenen geom etrischen Prozesses.  Abbildung 2: Das Programm zum Pflastern eines Rechteck es  Der von Puck generierte Quelltex t zum Programm  aus Abbildung2 wurde mit Pow!  geöffnet, kompiliert und ausgeführt. EineFehlersu che nach dem Kompilieren  war nicht erforderlich. Die Ausgabendes Programms bei den Eingabewe rten 308 und 66 sind in Abbildung 3 dargestellt. - 314 - Abbildung 3: Ausgabe des Programms RechteckPflastern  oben: der geometrische Lösungspro zess; unten: Ausgabe des Ergebnisses  An diesem  Beispiel sollen nun einige Ei genschafte n des Puck-System s erläutert werden.   4.1  Bausteine Für die Lösung deroben genannten Aufgabe wurdennur die Baus teine Eingabe, Aus- gabe , Zuweisung, IF THEN, Prozeduraufruf und Line benötigt.Alle anderen Bausteine wurden im Program m unter dem PunktOptionen ausgeblendet7.   4.2  Variablendeklaration  Variablen werden deklariert, indem  das kleine schwarze  Dreieck rechts neben dem SchlüsselwortVAR  angeklickt wird. Sie werden fortlaufend mit kleinen Buchstaben des  Alphabetes benannt. Nam eund Datentyp könnenin derAttributtabelle, die sichbeim Anklicken der Bausteine jeweils auf der rechten Seite des Bildschirms befindet,verän- dert werden. Es wird nachjeder Verä nderung überprüft, ob ein Variablenname im gege- benen Kontextbereits vergebenwurde bzw. ober den Nam enskonventionen derver- wendeten Sprache (Oberon-2) entspricht. Variablen vomTyp Integer sind dunkelblau, Variab lenvom Typ Boolean sindgrau dargestellt.  7 Der Lehrer hat zusätzlich zu demM enüpu nkt „Opti onen“ die Möglichke it,mit einem Setup-Pr ogrammdas  Puck- System jede Unter richtsstunde neu einzu stellen und für die Schüler so die zu verwendenden Bausteine  festzulegen. Außerdem kann derMenüpun kt „Optio nen“ für die Schül er unzugänglich geschal tet werden, so  dass diese nichts an der aktuellen Einstellung  des System s verändern können.Dekl arieren einer neuer Variablen  Dekl aration der Integer-Variablen a  Verwenden der Integer-Variablen b - 315 -4.3  Proz edur aufruf  Bei einem Prozedura ufruf müsse n die aktuelle n mit den formalen Parametern  inAnzahl,  Typ und Reihenfolge übereinstimme n. Um dies zugarantieren,wurde im Puck-Sy stem durchgängig mit dem Observer-Entwurfsmuster (vgl. [Ga97]) gearbeitet. Wennder Be- nutzer die Signatur einer Prozed ur verändert, indem er zum Beispieleinen weiteren Wert parameter vom Typ Integer hinzunimmt, so wird vom System in jeder Anweisung,  in der diese Prozed ur aufgerufen wird, ein Integer-Ausdruck eingefügt, der der Prozedur als aktuellerParameter übergebenwird. Auch das Verä ndern des Nam ens einer Prozedur oder einer Variablen wirkt sich nicht nur auf die Deklaration, sondern auch auf jede Verwendung derselben im gesam ten Programm aus.  4.4  Erstellen von Ausdr ücken  Ausdrücke werdenin verschiedenen Anweisungen verwendetund könneninnerhalb des  Puck-System s immer in der gleichen Art und Weise modifiziert werden. Ein Ausdruck innerhalb eines Anweisungsbausteins besteht zunäch st aus einem Wert8, der in der Attri- buttabelleverändert odernach einem Rechtsklick durch eine im aktuellen Kontextgül- tige Variab le des richtigen Typs ersetzt werd en kann9. Sollen zu einem Ausdruck noch weitere Operatoren und Operanden hinzugefügt werden, so kann dies durch einen Links- klick auf das kleine Dreieck an der recht en Seite des Ausdrucks geschehen. Daraufhin werdenimme r ein Operator und ein Operandin den Ausdruckeingefügt. Die je nach Datentyp möglichen Operatorenkönnenüber ein Kontextmenü ausgewähl twerden.  Nach jeder Aktion entsteh t stets einkorrekter Ausdruck des jeweilig en Typs.  Klammern werde n paarweise um einen Opera nden gesetzt und können anschließend einzeln verschoben werd en, wenn ein Versch ieben in die jeweilig e Rich tung möglich ist.   8 Der Wert ist bei Integer  0 und bei Boolean je nach  Anweisung TRUE oder FALSE. Boolean- Ausdr ücke in  Schleifen sind so initialisiert, dass eine Schleife höchst ens einmal durchla ufen wird.  9 In einen Boolean-Ausdr uck kann derVergleich zweierIntege r-Ausdrücke als Oper and eingefügt werden. Der Vergleichsoper ator kann über ein Kontextm enü ausgewählt werden und die Integer -Ausdrücke können verän- dert werd en. Implementierung der Pro- zedur Abziehe n mit drei  formalen Para metern  Aufruf derProzed ur Recht- eckZeichn en mit den aktuellen Parametern a und b Integer-OperandEinfügen weiterer  Operanden  Integer-Operat or - 316 -4.5  BEG IN-END-Struk turen  Die Grenzen eines Blockes werden in textuellen Programmiersprac hen meist durchge- schweifte Klammern, durch BEGIN-END-Strukturenoder durch Einrückung gekenn- zeichnet . In Puck wirdein Block durch eine Anweisungsfolge charakterisiert.Diese besteht anfänglich aus einer einzelne n Anschlussstelle für einen Anweisungs -Baustei n.  Klickt der Benutzer eines der beiden Dreieck e der Ansc hlussstelle an, so entsteht ober- halbbzw.unterhal b eine weitere Anschlussstelle, die wieder ebenso erweitert werden kann. Wenn zum Beispiel ein IF-THEN-B austein an eine Anschl ussste lle ange hängt  wird, so beinhaltet dieser zwei nach rechtsverset zte Anwe isungsfolgen, die den Block  des THEN- und des ELSE -Zweig s beschreiben. Um Überschneidungenzu verhindern, werde n im übergeordneten Block leere Ansc hlussstellen eingefügt.  5  Eine erste Erprobung  Das Puck-Syste m wurde im ersten Halbjahr des Schuljahres 2004/05 am Adolf- Reich wein-Gymnasium Jena in zwei Grundk ursen Informatik der11. Klasse eingesetzt.  Der Lehrerwurde indie Bedienungdes Systems eingewiesen,  gestaltete seinenUnter- richt aber selbstständig. AmEnde des Halbjahres wurde die Verwe ndung des Systems mit Hilfe eines schriftlichenErfah rungsberichtes des Lehrers, eines Interviews undder  Erkenntnisse aus Unterrich tshospitationen10 ausgewertet. Der Unterricht untergliederte  sich in drei Phasen. In der ersten Phase arbeiteten die Schüler nur mit Puck. Der Über- gang zur textuellen  Programmierung mit dem Pow!-System wurde in einer zweiten  Pha- se vollzogen.Inder dritten  Phase arbeiteten die Schüler ausschließlich mit textuellen Oberon-2 Programmen.  Zum Einstieg indas Programmieren wurden Punkte, Linienund Fadengrafiken gezeich- net. Im Verlauf der ersten Phase wurden den Schülern die benötigten Baustein e schritt- weise zur Verfügung gestellt. Dies wurde vom Lehrer als wichtiges methodisc hes Mittel  für den Anfangsunterrichterkannt, denn die Schüler wurden dadurch nichtmiteiner  Vielzahl von Befehlen konfrontiert, sondern konnten, je nach Problem, nur mit den vor- gege benen Anw eisungen arbeiten. Am Anfang einer Doppelstunde ware n die Computer gesperrt. Das jeweils zu bearbeiten de Problem wurde im Klassenve rband analysiert, in  Teilprobleme zerlegtund mögliche Schwierigkeiten, wie zum Beispiel der Datenfluss zwischen den Programmteilen, wurden besprochen. Struktogramme wurden im Unter- richtsgespräch an der Tafel erstellt. Anschließend entwickelten die Schüler in Einzelar- beit das Programm im Puck-System. Durc h die ausführliche Vorarbeit entstanden nur  10 Der Autor  hatte die Möglichkeit,  in vier Doppelstunde n, in denen das Puck- System verwendet wurde, zu  hospitieren. Anweisung sfolge mit zwei  Ansc hlussstellen  Einfügen weiterer An- schlussstellen- 317 -weni ge semantische Fehler. Durch die Verwendung der visuellen Programmiersprac he ware n syntaktische Fehlerpraktisch ausgeschlossen. Somit hatten nahez u alle Schüler jeweils am Ende einer Doppelstunde ein funktionstüchtiges Programm .  Nach Mein ung des Lehr ers konnten die Schüler inder ersten  Phase selbständiger als  bisher arbeiten und auch schneller mit neuen  Befehlen umgehen , da die Syntax nicht im Mittelpunkt stand. Auße rdem wurde  mehr Kreativität und Experimentierfreude ver- zeichnet.   Wan n genau der Übergang vom Erstellen der Programme mit Puck hin zum direkten Entwickelndes Oberon-2-Quelltextes stattfind et, wurde den Schü lern inder zweiten Phase freig estellt. Dadurchhatte der Lehrer mehr Zeit für die jeweilig enUmsteig er.  Währen d einige Schü ler noch lange mit Puck arbeiteten , hatten sich andere schnell an die textuelle Programmierung gewöhnt. Das Verändern des von Puckgene rierten Quell- textes war für viele Schüler ein wichtiger Zwisch enschritt. Der Lehrer empfanddas  Kompilieren  der Programm e im Pow!-Syst em als wich tig, da sich die Schüler sovon Anfang an mit der Oberfläche der Oberon-2-Entwicklungsumgebung vertraut machen konnten. Auf den direkten Umgang mit dem Puck-Sy stem gab es keine Zensuren. Die Leistungs- kontrollen bezogen sich inden ersten zwei Phasen ausschließlich auf Problemanalysen und das Erstellen von Struktogrammen. Erst nachdem alle Schül er denWechsel von  Puck zu Pow! vollzogen hatten, beganndie dritte Phase, in der auch der Quelltext mit in  die Leistungsbewert ung aufgenomm en wurde.  Nach Meinung des Lehrers bietet das Puck- System eine gute Möglichkeit, erste Pro- gramm iererfolge zu erlangen und die Kom plexität des Anfan gsunterrichts zu vermin- dern. Im Schu ljahr 2005/06 wird Puck im Adolf-Reichwein-Gymnasium Jena wieder  eingeset zt. An dieser Stellemöchte sich der Autorbei demunterrichtendenLehrer Herrn  GertStamm für die Kooperation bedanken.  6  Resümee  Das in diesem Artik el vorgestellte Puck-Syste m zeigt exemplarisch , wie visuelle Pro- gramm iersprac hen für den Unterricht entwickelt werd en können. Das Einbeziehen der  Lehrerschaft indie Anford erung sanalyse hat sich als sinnvoller Schritt herausgestellt.  Hierdurchkonnte konsequ ente Zielo rientierung sowie Akzeptanz in der Schule sicher- gestellt werd en. Durch das Ausnutzen der Möglichkeiten der Visu alisierun g können  Syntaxfehler zumindest  imA nfangsunterricht nahezu vollständig verm ieden werden.  Obwo hl eineerste Erprobungdes vorgestellten  Systems positiv verlaufen  ist, stehen  gena uere Untersuchungen desUnterrichtsverlaufes  noch aus. Als weitere Forschun gsfragen stellten  sichherau s:   •Wie gestaltet sich ein gesamtes Curricu lum bei Einb ezieh ungvisueller Pro- gram miersprac hen?- 318 -•Erzeuge n visuelle Programmiersprache nein eingeschränktes mentales Modell ,  das dem sprac hlich abstraktenArbeiten mittextuellen Sprachen  entgegensteht? •Ist es möglich, eine visuelle Sprache zuentwickeln, die so flexibel ist, dass sie  den Anforderungen des Informatikunterrichts in der Schule gerecht  wird und somit textuelle Sprach en imUnterrich t ersetzen  kann? Literaturv erzeichnis  [Fo0 2] Fothe, M.: Problem lösen mit Python. Thüringer Institut für Lehr erfortbi ldung, Lehr- planen twicklung  und Medien (Hrsg.): Reihe Materialien , Heft 72, Bad Berka, 2002.  http://www.uni-jena. de/data/unijena_/faculties/minet/casio /Publikationen/python.pdf  (Stand: Mai 2005).  [Fo04] Fothe, Michael: Unterrich t – bald nur noch mit Com puter ? (Antrittsvorlesung) , Jenaer Schrif ten zur M athematik  und Inform atik, Math /Inf/1 3/04, Jena, 2004.  http://www.m inet.uni- jena.de/preprints /fothe_04/avl.pdf (Stand : Mai 2005).  [Ga9 7] Gamm a, Erich; Helm , Rich ard; Johns on, Ralph; Vlissides, John : Design Patterns:  Elements of Reusable Object-Oriented  Software. 11. Auflag e, Reading, 1997 .  [KP03]  K elleh er, Caitlin; Pausch, Rand y: Lowering the Barrie rs to Progra mming: a surve y of programming environm ents and languag es for novice progr ammers. Pittsburgh, 2003.  http://reports-archive.adm .cs.cmu.edu/anon/2003/CMU-CS -03-13 7.pdf (Stand : Mai  2005).  [Ko04a] Kohl, Lutz: Konzepte der visuellen Progra mmieru ng und ihrer Einsat zmögli chkeiten  an Schulen. (Studienarbeit), 2004. http://www. uni-jena.de/Lutz_Kohl.html (Stand: Mai  2005).  [Ko04b] Kohl, Lutz: Entwurf und Implementierung einer  visuellen Programmiersprache für den  Einsatz in Schulen. (Diplomar beit), 2004.  http://www.uni-jen a.de/Lutz_Kohl.html  (Stand: Mai 2005).  [RRR03 ] Robins , Anthon y; Rountr ee, Janet; Rountr ee, Nathan: Learnin g and Teach ing Pro- gramming: A Review and Discussion. In: Computer Science Education, 2003, Vol. 13,  Nr. 2; S. 137-17 2.  [Sc98] S chiffer, Stephan: Visuelle Prog ramm ierung: Grun dlagen undEinsatzmöglichk eiten.  Bonn, 1998. 309 -Puck eine visuelle Programmiersp rache für  die Schule  Lutz Kohl  Abteilun g für Didaktik Fakultät für Mathematik und Inform atik Friedr ich-S chiller-Universität Jena Ernst-Abb e-Platz 2 D-07743 Jena Lutz.Koh l@uni-jena.de  Abstract:  Im Rahmen der Diplomarbeit des Autors wurde an der Friedri ch-Schiller-Universität Jena eine visuelle Programmiersprache für den Einsatz in Schulen entwick elt. In einer vorang egangenen Studienarbeit wurden  hierfür theoretische Grundlagen gelegt und bestehen de Systeme gesichtet. Durch Interviews mit Lehrern sind Anfor derungen an eine solche Sprach e zusammengetr agen worden. Ziel  war es, ein System zu entwicke ln, das Anfängern einen leichten Einstieg in das  Programmieren ermöglicht und Syntaxf ehler vermeidet. Das Ergebnis der Arbeiten  – das Puck-Sy stem – wird in diesem Beitrag  vorgestellt. Außerd em wird eine erste  Erprobung in der Schule beschr ieben.  1  Einl eitung Stellung undBedeutung des Programmierens im Informatikunterricht an allgemein bildenden Schulen werden innerhalb der Fach didaktik Informatik imme r wieder neu diskutiert. Eines scheint aber klar zu sein: Das Programmieren zu lernen, ist nicht einfach.  Gerade durchdie vielfältig en Syntaxreg eln, erscheinendem Anfänger die Hürd enoft unüberwindbar. Durchvisuelle Programmi erung1 ist es mit Hilfe von Bausteinen, die  aufgrund ihrerForm nur in richtigerArt undWeise miteinanderverbunden  werdenkönnen, möglich, Syntaxfehler weitestgehe nd zu vermeiden (vgl. [KP03]). Somit wird der anfängliche „Schoc k“ beiProgrammierneul ingen (vgl. [RRR03]),der dadurch entsteht,  dass in kurzer Zeit verschiedene schwierig e Aufgaben zu bewältig en sind2, entschä rft,  indem das E rlernender Syntaxberei tsvon einem Programm übern ommen wurde.  Der größte Nach teil visueller Prog ramm iersp rachen, komplexe Inhalte vergleich sweise  unübersich tlich darzustellen , tritt bei vonAnfängernkonstruierten Prog ramm en nicht 1 Mit visuellen Programmiersprachen sind im Folgende n solche Sprachen gemeint, bei denen  ein Programm vollständig mit Hilfe von visuellen Elementen entwickelt wird.Auf Systeme,die eine einfache visuelle Erstellung der Oberfläche ermöglichen, bei denen die Funktio nalität aber textuel l entwicke lt werdenmuss, wird in  diesem  Beitrag nicht näher  eingegang en. 2 In [RRR03]  sind folgende schwier ige Aufgaben fürProgrammieranfänger  angegeben:  generelle Orientier ung, wofür Programmeda sind und was man mit ihnen machen kann; ein imaginär erMaschinenbegr iff: ein Computermodell , das mit der Programmausführung verbunden ist; Notation des Programms, das heißt Syntax und  Semantik einer Programmiersprache; Schem as und Pläne zumLösen von Aufgaben; praktisc he Fähigkeiten  wie Planen, Entwi ckeln, Testen, Fehlersuchen.  310 -auf,da diese nur einen geringen Umfang haben3. In einer vom Autor an der FriedrichSchiller-Un iversität Jenaverfass ten Diplomarbeit wurde, nach einer vorherigen Erhebungvon Anforderungen, eine visuelleProgrammierspra che mit einem dazugehörigen Programmiersyste m für den Einsatz in Schulen entwickelt. Mit Hilfe dieses Systems können Anfänger ein Programm per Dragand Drop konstruiere n. Im Verlauf des Lernprozesses  werden dem Schüler – je nachKonfiguration durch den Lehrer– nur bestimmte Bausteine zur Verfüg ung gestellt. Dadurchbekommt ein Anfänger die Möglichkeit, das Programmieren  schrittweise, alsoAnweisungfür Anweisun g, zu erlern en.   Abbildung 1: Ein mit Puck  erstelltes Programm zur Berechnung der ersten 20 Quadratzahlen  Zu einem visuell erstellten Programm  kann der Benu tzer denQuelltext in der Sprache  Oberon-2generieren und anzeigen lassen .Der so erstellte textuelle Code kann mit der  Programmierumgebung Pow! geöffnet, kompiliert und ausgeführt werd en4.   2  Ent wicklung von Anforderungen  Ein Ziel der Studienarbeit des Autors war es, Anforderungen an eine visuelle Programmiersprac he, die an Schulen eingeset ztwerdenkann, zu erheben (vgl. [Ko04a]). Zunäch st wurden verschiedeneSysteme analysiert. Lehrer stellen neben Schülern die Zielgruppe für ein visuelles Programmiersystem  dar undbestimmen auf Grundlage des  Lehrplans über den Einsatz eines Werkzeuges im Unterricht. Außerdem besitzen sie  wertvolle Erfahrungen, die für die Entwicklung einer Programmiersprac he für den Einsatz in Schulen nützlich  sind. Desh alb erwies es sich als sinnvoll, die Mein ungenvon  Lehre rn zu erheben. In einem ersten leitfade norien tierten Interview wurden diese nach 3 Vorund Nachteile visueller  Programmiersprachen sind in [Sc98]  und [Ko04a]  ausführlicher  zusam mengestellt.  4 Die Quelltextgener ierung wurde exemplarisch für die Programmiersprache Ober on-2 implem entier t, da diese  an vielen Thüringer  Schulen eingesetz t wird. Es istmöglich, das System so zu modifizieren, dass textueller  Code für eine andere Progra mmiersprache erzeugt wird.311 -ihrer Unterrichtspraxis und ihren Forderungen an eine visuelle Programmiersprac he für den Einsatz in Schulen befragt. Da den Interviewpartnern meist keine visuellen Program miersysteme beka nntwaren, wurdenihnen die Beispiele LabView, LogoBlocks und Agentsheets vorgestellt. Dadurch  wurde abgesichert, dass sie eine Einführung in die  Möglichkeiten dervisuellenProgrammier ung erhielten .Die Ergebnisse der Befragung wurden zu einem Anforderu ngsdokument zusam mengefa sst. Dieses wurde den Lehrern  in einem zweiten Interview vorgestellt und konkretere Fragenwurd en ausfüh rlicher diskutiert.   Die Anforderungen der Lehrer ware n auf die Umsetzung des Lehrplans ausgerichtet. So wurden die Erwartungen formuliert, dass sich die visuelle Programmiersprac he am imperativen Programmierparadi gma orientieren und auf das Arbeiten mit textuellen Sprachen vorbereiten  soll. Auf die im Unterricht zu vermittelnden Konzepte wie Variab len, Anweisunge n, Rekursion sowie Globalität und Lokalität wurde viel Wert gelegt. Auße rdem wurde gefordert, dass zu einem visuell erstellten  Programm der Oberon-2bzw.  Pascal-Qu elltex tgeneriert werden kann. Des Weiteren  wurdeneine Hilfe undeine Aufgabensam mlung gewünsc ht. Die visuelle Programmiersprache sollte nach Möglichkeit  den Schulen im Internetkostenlos zur Verfügung gestellt werden. Für die Entwicklung von schulisch geeigneter Software wird in [Fo04] außerdem gefordert,besonderenWert auf die sorgfältig e Ausgestaltu ng der „Schüler-Computer-Schn ittstelle“  zu legen. Im Rahmen der Diplomarbei t des Autors wurde ein diesenAnforderungen entsprechendes Syste m entwick elt.  3  Fragen zu Puck  3.1  Was  ist Puck?   Puck ist eine visuelle Programmiersprac he mit dem zugeh örigen visuellen Programmiersystem, das dem Benutzer ermöglicht, mitHilfe von Bausteinen einfache Programme zu  erstellen. Somit können Anfänger die Verwendung vonVariablen, Anweisungen und Prozeduren erlernen, ohne gleich mit der komplexen Syntax einer Programmiersprac he  konfrontiert zu werd en. Bei anspruchsvo lleren Aufgabenmuss dann auf textuelle Program mierung umgestiegen werden. Dies soll dadurch erleichtert werden, dass sich der Nutzer zum aktuellen  visuellen Programm  auch stets denQuelltext ansehenkann.   3.2  Was  kann Puck ?  In der visuellen Programmiersprac he Puckkönnen typische Programme des Anfangsunterrichtes entwick elt werd en. Mit elf Anweisungsbausteinen(Zuweisu ng, Eingabe, Ausgabe , Texta usgabe, IF THE N, WHILE D O, REPEAT UNTIL, FOR, Prozedura ufruf, Dot  und Line) ist es möglich, die Grundstrukturen imperat iver Programmierung kennen zu lernen. Innerhalb der Anw eisungen können nur vorher deklarierte Variablen verwendet312 -werden. Als Datentypenstehen Integer und Boolean zur Verfügung5. Es ist möglich,  Prozeduren zuerstellen, dene n eine beliebige Anzahl anWertund Referenzparam etern übergeben werden kann. Somit könne n auch rekursive Program me, zum Beispiel zum Löse n des Problem s der Türm e von Hanoi  oder zum Berechne n von Fibonacci-Z ahlen,  implementiert werd en. Mit Dot und Line wurd en zwei Anweisung sbaustein e indas  Puck-System aufgenommen, die es ermöglichen, motivierende  Fadengrafiken zu erstellen. Es wurdebewusstauf weitere Datentypen, komplexe Anweisungen unddie Verwendung von Funktionen verzichtet, umeine Ei gnung der visuellen Programmiersprac he für den Anfangsunterricht sicherzustellen . 3.3  Wesh alb Puck ?  „Herr Lehrer, ich hab da so eine komische Fehlermeldung.“ „Du hastdort ein Semikolon vergessen.“ „Wenn du eine Variable verwendest, musst du sie vorher deklarieren.“ „Du hast dortdas Schlüssel wort ‚WHILE’ falschgeschrieben.“ „In deinem Programm ist ein ‚END’ zu wenig.“  Wer einen dieser Sätze schon einmal im Unterrichtgehörtoder gesagt hat, wirddie Vorteile von Puckzu schätzen wissen. Nun mag der Leser entgegnen, dass die dargestellten Probleme beim Übergang zu einer textuellen Sprache trotzd em auftreten können. In der Tat sind dazu weitere Untersu chungen erforderlich. Der Autor ging bei seiner Arbeit aber davon aus, dass es einfacher ist,die Syntax einer abstrakten textuellen Program miersprac he zu erlernen, wenn die verwendeten Konstrukte berei ts bekannt sind. Außerdem  werden di e Schüler schon während der Ar beitmit Puck durch den generierten Quelltex t auf die richtigen Schreibweisen vorbereitet. Des Weiteren  erscheint der Zugang zur Inform atikmit Hilfe von Bausteinen, die zu einem Programm zusam mengefü gt werden, für Schüler motivierende r als das Erstellen eines Textes, der einer großen Menge von syntaktischen Regeln entsprechen muss.   Puck ist ein Open -Source-Projekt und kann so problemlos erwei tert werden. Es besteht durchaus die Möglichkeit,dass besonders interessierte Schüler im Rahmen von Projektarbeiten zum Beisp iel zusätzlich e Bausteine entwick eln6.  4  Ein Beispiel  Ein rechteckiges Grundstück soll mit quadratischen Steinplatten gleicherGröße lückenlos gepflastertwerden. Sowohl die gesam te Fläche als auch die Steinplatten haben ganzzahlige Seiten längen. Ermitteln Sie die Stein platten maße so, dass für das Pflasternder  Fläche m öglichst großePlatten verwendet werden können.  5 Die verwendeten Datenty pen reichen für eine Einführ ung in die Programmierung aus. In [Fo02]  werden die  Grundb egriffe imperativer Programmierung mit der Programmiersprache Python in einem  ersten Kapitel auch  unter  ausschließlicher  Verwendung der Datentypen Integer  und Boolean erklärt. 6 Puck ist unter  derURL www. uni-jena.de/Puck. html verfügbar . Das Programmist in Java implem entier t. In dem ausführbaren Archiv Puck.jar sind ca. 100 Klassen  mit den zugehörigen  Quelltexten enthalten. Das Entwick eln eines Baus teines für das Puck -System ist in [Ko04b] exemplarisch an einem Beispie l dargestellt. 313 -Bei genauerer Betrach tung dieser Aufg abe stellt sich heraus, dass der größte gemeinsame Teiler der Seitenlängen des Grundstücks gesucht ist.Dieser kann geometrisch ermittelt werde n: Von einem Rechteck wird stets ein Quadrat mit den Seitenlängen der kürzeren SeitedesRechteckes abgezogen. Anschließend wird nur das entstehende RestRechteck betrachtet und mitdiesem wird wieder gena u so verfahren. Gibt es kein RestRech teck, sohat das als letztes abgezog ene Quadrat das gesuchte Platten maß (vgl. Abbildung 3).  Das in Abbildung 2 dargestellte Programm„Rech teckPflas tern“ zeigt eine mögliche Lösungder Aufgabe, m it einer Darst ellung des besc hriebenen geom etrischen Prozesses.  Abbildung 2: Das Programm zum Pflastern eines Rechteck es  Der von Puck generierte Quelltex t zum Programm  aus Abbildung2 wurde mit Pow!  geöffnet, kompiliert und ausgeführt. EineFehlersu che nach dem Kompilieren  war nicht erforderlich. Die Ausgabendes Programms bei den Eingabewe rten 308 und 66 sind in Abbildung 3 dargestellt. 314 Abbildung 3: Ausgabe des Programms RechteckPflastern  oben: der geometrische Lösungspro zess; unten: Ausgabe des Ergebnisses  An diesem  Beispiel sollen nun einige Ei genschafte n des Puck-System s erläutert werden.   4.1  Bausteine Für die Lösung deroben genannten Aufgabe wurdennur die Baus teine Eingabe, Ausgabe , Zuweisung, IF THEN, Prozeduraufruf und Line benötigt.Alle anderen Bausteine wurden im Program m unter dem PunktOptionen ausgeblendet7.   4.2  Variablendeklaration  Variablen werden deklariert, indem  das kleine schwarze  Dreieck rechts neben dem SchlüsselwortVAR  angeklickt wird. Sie werden fortlaufend mit kleinen Buchstaben des  Alphabetes benannt. Nam eund Datentyp könnenin derAttributtabelle, die sichbeim Anklicken der Bausteine jeweils auf der rechten Seite des Bildschirms befindet,verändert werden. Es wird nachjeder Verä nderung überprüft, ob ein Variablenname im gegebenen Kontextbereits vergebenwurde bzw. ober den Nam enskonventionen derverwendeten Sprache (Oberon-2) entspricht. Variablen vomTyp Integer sind dunkelblau, Variab lenvom Typ Boolean sindgrau dargestellt.  7 Der Lehrer hat zusätzlich zu demM enüpu nkt „Opti onen“ die Möglichke it,mit einem Setup-Pr ogrammdas  PuckSystem jede Unter richtsstunde neu einzu stellen und für die Schüler so die zu verwendenden Bausteine  festzulegen. Außerdem kann derMenüpun kt „Optio nen“ für die Schül er unzugänglich geschal tet werden, so  dass diese nichts an der aktuellen Einstellung  des System s verändern können.Dekl arieren einer neuer Variablen  Dekl aration der Integer-Variablen a  Verwenden der Integer-Variablen b 315 -4.3  Proz edur aufruf  Bei einem Prozedura ufruf müsse n die aktuelle n mit den formalen Parametern  inAnzahl,  Typ und Reihenfolge übereinstimme n. Um dies zugarantieren,wurde im Puck-Sy stem durchgängig mit dem Observer-Entwurfsmuster (vgl. [Ga97]) gearbeitet. Wennder Benutzer die Signatur einer Prozed ur verändert, indem er zum Beispieleinen weiteren Wert parameter vom Typ Integer hinzunimmt, so wird vom System in jeder Anweisung,  in der diese Prozed ur aufgerufen wird, ein Integer-Ausdruck eingefügt, der der Prozedur als aktuellerParameter übergebenwird. Auch das Verä ndern des Nam ens einer Prozedur oder einer Variablen wirkt sich nicht nur auf die Deklaration, sondern auch auf jede Verwendung derselben im gesam ten Programm aus.  4.4  Erstellen von Ausdr ücken  Ausdrücke werdenin verschiedenen Anweisungen verwendetund könneninnerhalb des  Puck-System s immer in der gleichen Art und Weise modifiziert werden. Ein Ausdruck innerhalb eines Anweisungsbausteins besteht zunäch st aus einem Wert8, der in der Attributtabelleverändert odernach einem Rechtsklick durch eine im aktuellen Kontextgültige Variab le des richtigen Typs ersetzt werd en kann9. Sollen zu einem Ausdruck noch weitere Operatoren und Operanden hinzugefügt werden, so kann dies durch einen Linksklick auf das kleine Dreieck an der recht en Seite des Ausdrucks geschehen. Daraufhin werdenimme r ein Operator und ein Operandin den Ausdruckeingefügt. Die je nach Datentyp möglichen Operatorenkönnenüber ein Kontextmenü ausgewähl twerden.  Nach jeder Aktion entsteh t stets einkorrekter Ausdruck des jeweilig en Typs.  Klammern werde n paarweise um einen Opera nden gesetzt und können anschließend einzeln verschoben werd en, wenn ein Versch ieben in die jeweilig e Rich tung möglich ist.   8 Der Wert ist bei Integer  0 und bei Boolean je nach  Anweisung TRUE oder FALSE. BooleanAusdr ücke in  Schleifen sind so initialisiert, dass eine Schleife höchst ens einmal durchla ufen wird.  9 In einen Boolean-Ausdr uck kann derVergleich zweierIntege r-Ausdrücke als Oper and eingefügt werden. Der Vergleichsoper ator kann über ein Kontextm enü ausgewählt werden und die Integer -Ausdrücke können verändert werd en. Implementierung der Prozedur Abziehe n mit drei  formalen Para metern  Aufruf derProzed ur RechteckZeichn en mit den aktuellen Parametern a und b Integer-OperandEinfügen weiterer  Operanden  Integer-Operat or 316 -4.5  BEG IN-END-Struk turen  Die Grenzen eines Blockes werden in textuellen Programmiersprac hen meist durchgeschweifte Klammern, durch BEGIN-END-Strukturenoder durch Einrückung gekennzeichnet . In Puck wirdein Block durch eine Anweisungsfolge charakterisiert.Diese besteht anfänglich aus einer einzelne n Anschlussstelle für einen Anweisungs -Baustei n.  Klickt der Benutzer eines der beiden Dreieck e der Ansc hlussstelle an, so entsteht oberhalbbzw.unterhal b eine weitere Anschlussstelle, die wieder ebenso erweitert werden kann. Wenn zum Beispiel ein IF-THEN-B austein an eine Anschl ussste lle ange hängt  wird, so beinhaltet dieser zwei nach rechtsverset zte Anwe isungsfolgen, die den Block  des THENund des ELSE -Zweig s beschreiben. Um Überschneidungenzu verhindern, werde n im übergeordneten Block leere Ansc hlussstellen eingefügt.  5  Eine erste Erprobung  Das Puck-Syste m wurde im ersten Halbjahr des Schuljahres 2004/05 am AdolfReich wein-Gymnasium Jena in zwei Grundk ursen Informatik der11. Klasse eingesetzt.  Der Lehrerwurde indie Bedienungdes Systems eingewiesen,  gestaltete seinenUnterricht aber selbstständig. AmEnde des Halbjahres wurde die Verwe ndung des Systems mit Hilfe eines schriftlichenErfah rungsberichtes des Lehrers, eines Interviews undder  Erkenntnisse aus Unterrich tshospitationen10 ausgewertet. Der Unterricht untergliederte  sich in drei Phasen. In der ersten Phase arbeiteten die Schüler nur mit Puck. Der Übergang zur textuellen  Programmierung mit dem Pow!-System wurde in einer zweiten  Phase vollzogen.Inder dritten  Phase arbeiteten die Schüler ausschließlich mit textuellen Oberon-2 Programmen.  Zum Einstieg indas Programmieren wurden Punkte, Linienund Fadengrafiken gezeichnet. Im Verlauf der ersten Phase wurden den Schülern die benötigten Baustein e schrittweise zur Verfügung gestellt. Dies wurde vom Lehrer als wichtiges methodisc hes Mittel  für den Anfangsunterrichterkannt, denn die Schüler wurden dadurch nichtmiteiner  Vielzahl von Befehlen konfrontiert, sondern konnten, je nach Problem, nur mit den vorgege benen Anw eisungen arbeiten. Am Anfang einer Doppelstunde ware n die Computer gesperrt. Das jeweils zu bearbeiten de Problem wurde im Klassenve rband analysiert, in  Teilprobleme zerlegtund mögliche Schwierigkeiten, wie zum Beispiel der Datenfluss zwischen den Programmteilen, wurden besprochen. Struktogramme wurden im Unterrichtsgespräch an der Tafel erstellt. Anschließend entwickelten die Schüler in Einzelarbeit das Programm im Puck-System. Durc h die ausführliche Vorarbeit entstanden nur  10 Der Autor  hatte die Möglichkeit,  in vier Doppelstunde n, in denen das PuckSystem verwendet wurde, zu  hospitieren. Anweisung sfolge mit zwei  Ansc hlussstellen  Einfügen weiterer Anschlussstellen317 -weni ge semantische Fehler. Durch die Verwendung der visuellen Programmiersprac he ware n syntaktische Fehlerpraktisch ausgeschlossen. Somit hatten nahez u alle Schüler jeweils am Ende einer Doppelstunde ein funktionstüchtiges Programm .  Nach Mein ung des Lehr ers konnten die Schüler inder ersten  Phase selbständiger als  bisher arbeiten und auch schneller mit neuen  Befehlen umgehen , da die Syntax nicht im Mittelpunkt stand. Auße rdem wurde  mehr Kreativität und Experimentierfreude verzeichnet.   Wan n genau der Übergang vom Erstellen der Programme mit Puck hin zum direkten Entwickelndes Oberon-2-Quelltextes stattfind et, wurde den Schü lern inder zweiten Phase freig estellt. Dadurchhatte der Lehrer mehr Zeit für die jeweilig enUmsteig er.  Währen d einige Schü ler noch lange mit Puck arbeiteten , hatten sich andere schnell an die textuelle Programmierung gewöhnt. Das Verändern des von Puckgene rierten Quelltextes war für viele Schüler ein wichtiger Zwisch enschritt. Der Lehrer empfanddas  Kompilieren  der Programm e im Pow!-Syst em als wich tig, da sich die Schüler sovon Anfang an mit der Oberfläche der Oberon-2-Entwicklungsumgebung vertraut machen konnten. Auf den direkten Umgang mit dem Puck-Sy stem gab es keine Zensuren. Die Leistungskontrollen bezogen sich inden ersten zwei Phasen ausschließlich auf Problemanalysen und das Erstellen von Struktogrammen. Erst nachdem alle Schül er denWechsel von  Puck zu Pow! vollzogen hatten, beganndie dritte Phase, in der auch der Quelltext mit in  die Leistungsbewert ung aufgenomm en wurde.  Nach Meinung des Lehrers bietet das PuckSystem eine gute Möglichkeit, erste Programm iererfolge zu erlangen und die Kom plexität des Anfan gsunterrichts zu vermindern. Im Schu ljahr 2005/06 wird Puck im Adolf-Reichwein-Gymnasium Jena wieder  eingeset zt. An dieser Stellemöchte sich der Autorbei demunterrichtendenLehrer Herrn  GertStamm für die Kooperation bedanken.  6  Resümee  Das in diesem Artik el vorgestellte Puck-Syste m zeigt exemplarisch , wie visuelle Programm iersprac hen für den Unterricht entwickelt werd en können. Das Einbeziehen der  Lehrerschaft indie Anford erung sanalyse hat sich als sinnvoller Schritt herausgestellt.  Hierdurchkonnte konsequ ente Zielo rientierung sowie Akzeptanz in der Schule sichergestellt werd en. Durch das Ausnutzen der Möglichkeiten der Visu alisierun g können  Syntaxfehler zumindest  imA nfangsunterricht nahezu vollständig verm ieden werden.  Obwo hl eineerste Erprobungdes vorgestellten  Systems positiv verlaufen  ist, stehen  gena uere Untersuchungen desUnterrichtsverlaufes  noch aus. Als weitere Forschun gsfragen stellten  sichherau s:   •Wie gestaltet sich ein gesamtes Curricu lum bei Einb ezieh ungvisueller Program miersprac hen?318 -•Erzeuge n visuelle Programmiersprache nein eingeschränktes mentales Modell ,  das dem sprac hlich abstraktenArbeiten mittextuellen Sprachen  entgegensteht? •Ist es möglich, eine visuelle Sprache zuentwickeln, die so flexibel ist, dass sie  den Anforderungen des Informatikunterrichts in der Schule gerecht  wird und somit textuelle Sprach en imUnterrich t ersetzen  kann? Literaturv erzeichnis  [Fo0 2] Fothe, M.: Problem lösen mit Python. Thüringer Institut für Lehr erfortbi ldung, Lehrplanen twicklung  und Medien (Hrsg.): Reihe Materialien , Heft 72, Bad Berka, 2002.  http://www.uni-jena. de/data/unijena_/faculties/minet/casio /Publikationen/python.pdf  (Stand: Mai 2005).  [Fo04] Fothe, Michael: Unterrich t – bald nur noch mit Com puter ? (Antrittsvorlesung) , Jenaer Schrif ten zur M athematik  und Inform atik, Math /Inf/1 3/04, Jena, 2004.  http://www.m inet.unijena.de/preprints /fothe_04/avl.pdf (Stand : Mai 2005).  [Ga9 7] Gamm a, Erich; Helm , Rich ard; Johns on, Ralph; Vlissides, John : Design Patterns:  Elements of Reusable Object-Oriented  Software. 11. Auflag e, Reading, 1997 .  [KP03]  K elleh er, Caitlin; Pausch, Rand y: Lowering the Barrie rs to Progra mming: a surve y of programming environm ents and languag es for novice progr ammers. Pittsburgh, 2003.  http://reports-archive.adm .cs.cmu.edu/anon/2003/CMU-CS -03-13 7.pdf (Stand : Mai  2005).  [Ko04a] Kohl, Lutz: Konzepte der visuellen Progra mmieru ng und ihrer Einsat zmögli chkeiten  an Schulen. (Studienarbeit), 2004. http://www. uni-jena.de/Lutz_Kohl.html (Stand: Mai  2005).  [Ko04b] Kohl, Lutz: Entwurf und Implementierung einer  visuellen Programmiersprache für den  Einsatz in Schulen. (Diplomar beit), 2004.  http://www.uni-jen a.de/Lutz_Kohl.html  (Stand: Mai 2005).  [RRR03 ] Robins , Anthon y; Rountr ee, Janet; Rountr ee, Nathan: Learnin g and Teach ing Programming: A Review and Discussion. In: Computer Science Education, 2003, Vol. 13,  Nr. 2; S. 137-17 2.  [Sc98] S chiffer, Stephan: Visuelle Prog ramm ierung: Grun dlagen undEinsatzmöglichk eiten.  Bonn, 1998. 