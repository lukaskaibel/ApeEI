Fujaba goes Mindstorms: Objektorientierte Modellierungzum AnfassenIra Diethelm1, Leif Geiger2, Albert Zündorf21Gaußschule2FPM, Universität KasselLöwenwall 18a Wilhelmshöher Allee 7338100 Braunschweig 34121 Kassel(ira.diethelm |leif.geiger |albert.zuendorf )@uni-kassel.dehttp://www.uni-kassel.de/fb16/fpmAbstract: Ziel des”Fujaba goes Mindstorms“ war es, ein praktisches Softwarepro-jekt mit anspruchsvollen algorithmischen Aufgabenstellungen durchzuführen und da-bei die hohe Motivation zu Nutzen, die durch die LEGO Mindstorms Roboter entsteht.Die von LEGO mitgelieferte Programmierumgebung/-sprache für Mindstorms reichtef¨ur unsere algorithmischen Anforderungen nicht aus. Die Programmierung von Mind-storms in der Sprache Java stellt zwar die nötigen algorithmischen Mittel (z.B. Rekur-sion) zur Verfügung aber die Fehlersuche ist bei einem in dem Mindstorms Brick ab-laufenden Java Programm aufgrund der fehlenden Debugging-Möglichkeiten ein frus-trierendes Unterfangen. Daher haben wir uns für eine Fernsteuerung der MindstormsRoboter durch ein auf einem PC laufenden Programm, entschieden. Zum Testen diesesFernsteuerungsprogramms verwenden wir Dobs, einen graﬁschen Browser/Debugger,der die Datenstrukturen eines laufenden Java Programms als UML Objektdiagrammdarstellen kann und interaktiv das Aufrufen einzelner Methoden und die Verfolgungihrer Abarbeitung und der daraus resultierenden Veränderung der aktuellen Objekt-struktur erlaubt. Durch eine objektorientierte Modellierung des Mindstorms Robotersund seiner Umgebung und die Ausführung im Dobs wird eine sehr direkte Abbildungvom abstrakten Programm auf die reale Welt erreicht. Dieses Papier berichtet über un-sere Erfahrungen mit dieser V orgehensweise und gibt wichtige Hilfestellungen für dieDurchführung ähnlicher Projekte.1 EinleitungDas Projekt”Fujaba goes Mindstorms“ entstand aus einer Zusammenarbeit der Gauß-schule mit der Technischen Universität Braunschweig. Im Zuge dieser Zusammenarbeitwerden Konzepte für den Anfangsunterricht Informatik entwickelt. Die hierdurch erarbei-teten wichtigsten Ziele in Klasse 11 (vgl. Rahmenrichtlinien Informatik) sind das Erlernendes objektorientierten Modellierens, das Verinnerlichen objektorientierter Strukturen und202Denkweisen, das Erlernen klassischer Problemlösungsstrategien der Informatik sowie derAufbau von Kommunikations- und Kooperationsbereitschaft.Um diese Ziele zu erreichen, beginnen wir in Klasse 11 mit Modellierungs- und Ab-straktionsübungen. Die Modelle werden hierbei in UML erstellt. Anschließend erlernendie Schüler die auf UML basierende graﬁsche Programmiersprache Fujaba [Fu02]. Da-bei werden die wichtigsten UML-Diagrammtypen und deren systematische Verwendungbehandelt. Hinzu kommen Problemlösungsstrategien, wie z.B. strukturierte Zerlegung inTeilprobleme oder Story Driven Modeling (siehe [DGZ02]). Die Programmiersprache Fu-jaba bietet bisher leider noch keine Anbindung an eine GUI Bibliothek. Es können le-diglich in dem zur Fujaba Umgebung gehörenden Dynamischen Objekt Browser (Dobs)die Laufzeitdaten von Programmen als UML Objektdiagramm dargestellt werden und imDobs können einzelne Methoden interaktiv aufgerufen werden. Dies ist sehr anschaulichf¨ur Debug- und Testzwecke, aber eben keine dem Programm angepasste graﬁsche Benut-zeroberﬂäche. Wir beobachteten hier ein Motivationsdeﬁzit bei den Schülern. Die durchDobs visualisierten ¨Anderungen der Objektstruktur im Modell sind einfach nicht so”bunt“und interaktiv wie man es von Standardsoftware gewohnt ist.Um am Anfang von Klasse 12 eine wesentlich komplexere Programmierübung mit Fu-jaba durchzuführen, entwickelten wir die Idee zu”Fujaba goes Mindstorms“. Per ge-eigneter Schnittstelle sollen LEGO Mindstorms Roboter aus UML heraus ferngesteuertwerden. Dieses Projekt wurde in Zusammenarbeit mit der TU Braunschweig als kleinesIndustriepraktikum durchgeführt. Die Schüler vertiefen also ihre Modellierungs- und Pro-blemlösungsfähigkeiten, erlernen Grundlagen der Softwaretechnik und das Zusammen-spiel Realität - Modell ist weniger abstrakt, da hier Abläufe nicht nur simuliert, sonderntats¨achlich gesteuert werden. Diese realitätsnahe Herangehensweise wirkt zusätzlich aufdie Schüler extrem motivierend und Kreativität f¨ordernd. Im Folgenden wird dieses Pro-jekt beschrieben und diskutiert.2 VoraussetzungenDas Projekt wurde mit einem jahrgangsübergreifenden Informatikkurs der GaußschuleBraunschweig durchgeführt. Die Schüler der Klasse 12 haben im Informatikunterricht vonAnfang an objektorientiertes Modellieren mit UML gelernt, die Schüler des Jahrgangs 13behandelten in 11 und 12 Pascal und Delphi.Wir setzen im Unterricht das CASE-Tool Fujaba ein. Fujaba ermöglicht es ganze Program-me komplett graﬁsch mittels UML zu speziﬁzieren, zu implementieren und zu testen. ZurSpeziﬁkation verwenden die Schüler UML-Klassendiagramme. Zur Implementierung derMethodenrümpfe stehen in Fujaba sog. Storydiagramme (UML-Aktivitätsdiagramme miteingebetteten Kolaborationsdiagrammen) zur Verfügung. Aus diesen Diagrammen gene-riert Fujaba ausführbaren Java Quelltext, der dann mit dem in Fujaba integrierten Objekt-browser und Debugger Dobs (Dynamic Object Browsing System) getestet werden kann.Dobs visualisiert die Objektstruktur eines Programms zur Laufzeit, siehe Abbildung 1. An-gezeigt werden Objekte, deren Attribute, Methoden und deren Links. Dobs ist zusätzlich203noch interaktiv. Das heißt, zur Laufzeit können neue Objekte angelegt und Methoden vonbekannten Objekten ausgeführt werden. Die hierdurch entstehenden ¨Anderungen in derObjektstruktur werden ebenfalls im Dobs visualisiert. Abbildung 1 zeigt den Aufruf derMethode forward() des Objektes f1im Dobs.Abbildung 1: Dobs im Einsatz3 LEGO Mindstorms RoboterZur Durchführung unseres Projekts verwendeten wir das LEGO Mindstorms Robotics In-vention System sowie das LEGO Mindstorms Ultimate Accessory Set, wie sie in jederSpielwarenhandlung erhältlich sind. Herzstück dieses Sets ist der sog. Brick, ein Mikro-controller mit drei Eingängen, drei Ausgängen, Soundchip und einem Infrarotport. An denBrick lassen sich Motoren und Sensoren (Berührungs-, Licht-, oder Rotationssensoren)anschließen. Abbildung 2 zeigt ein Objektdiagramm, das diesen Brick und die angeschlos-senen Sensoren und Motoren objektorientiert modelliert.204Abbildung 2: Objektdiagramm der UML-LEGO-SchnittstelleHieraus lässt sich unmittelbar und für die Schüler nachvollziehbar das zugehörige Klas-sendiagramm ableiten, siehe Abbildung 3. Die Kommunikation zwischen Dobs und demMindstorms Roboter erfolgt per Infrarot. Hierfür stellt Fujaba eine Reihe von einfachenBibliotheksfunktionen zur Verfügung. In unserem Beispiel werden diese Bibliotheksfunk-tionen durch die Methoden des Bricks, der Motoren und der Sensoren verkapselt. Dadurchbewirkt ein Aufruf der Methode forward() auf einem FMotor Objekt, dass sich tatsächlichder entsprechende LEGO Motor in diese Richtung dreht. Dies können die Schüler sehr an-schaulich im Dobs testen, siehe Abbildung 1. Ebenso können die Schüler per Dobs die ver-schiedenen Sensoren auslesen und z.B. einen Taster betätigen und direkt die Veränderungdes Sensorwertes prüfen.Abbildung 3: Klassendiagramm der UML-LEGO-Schnittstelle205Da Entwicklung und Aufbau eines Roboters durch die Schüler sehr umfangreich und fürden weiteren Unterricht wenig gewinnbringend sind, haben wir für das Projekt einen Ro-boter vorgegeben. Der Roboter sollte den folgenden Ansprüche genügen:– Mobilität um möglichst wenig Einschränkungen an die Umgebung vorzugeben–F ¨ahigkeit Gegenstände zu heben– Erkennung der Umgebung mittels Sensorik zur OrientierungWir haben uns daher für einen Gabelstapler mit Ketten entschieden (Abbildung 4). Mittelseines Lichtsensors hinten und eines Berührungssensors vorne kann sich unser Gabelstaplerorientieren. Die Kontrolle der Gabel läuft ¨uber zwei in Reihe geschaltete Berührungssenso-ren. Die Schüler durften während des Projekts nur kleine bauliche Verbesserungen amRoboter vornehmen.Abbildung 4: Der LEGO Gabelstapler2064 ProjektEine zentrale Idee dieses Projekts war es, den Schülern Grundzüge der Softwaretechnik zuvermitteln und ihnen ein Gefühl dafür zu geben, wie Software in der Wirtschaft entwickeltwird. Aus diesem Grund führten wir es ähnlich eines Industriepraktikums durch. Diesbeinhaltete folgende Punkte:– Aufteilung der Schüler in Teams mit jeweils eigenem Büro in den Räumlichkeitender TU Braunschweig und eigenem Betreuer, der den Kunden repräsentierte– Aufteilung des Projekts in Phasen (Pﬂichtenheft, Analyse, Design), vgl. [Ba98]– Phasenabschluß mit V orstellung des Phasendokuments– Abschlußpräsentation in Form eines Turnieres4.1 ProblemstellungDie Idee für das Projekt war, mittels der oben vorgestellten UML-LEGO Schnittstelleund dem von uns vorgegebenen Gabelstapler, ein klassisches Problem der Informatik zul¨osen: das der Türme von Hanoi. Dieses Problem ist ausreichend komplex, jedoch gutsystematisch lösbar. Die Aufgabenstellung lautete wie folgt:Entwirf ein Programm, das einen Mindstorms-Roboter so steuert, dass er das Problem”T¨urme von Hanoi mit 4 Scheiben“ l ¨ost.4.2 Vorbereitung im UnterrichtIm Unterricht wurden zuerst die Türme von Hanoi objektorientiert modelliert. Wir benutz-ten das Prinzip des Story Driven Modeling um eine Lösung für das Problem der Türmevon Hanoi zu ﬁnden. Dieses Prinzip ermöglicht es aus Szenarien systematisch die Metho-den abzuleiten. Unser V orgehen ist in [DGZ02] beschrieben. Die so erstellten Programmewurden zuerst im Dobs getestet. Die Lösungen konnten beliebig viele Scheiben gemäßder Regeln umstapeln. Jedoch ist die Animation dieses Umstapelns im Dobs nicht sehr be-eindruckend und wird der Leistung der Schüler die dorthin geführt hat, nicht gerecht. ImDobs ändern sich lediglich Links zwischen Objekten, das heißt Linien zwischen Objektenerscheinen bzw. verschwinden.Eine weitaus ansprechendere und motivierendere Animation wäre es, wenn sich bei jeder¨Anderung der Objektstruktur auch unser Gabelstapler bewegen und die ¨Anderung in derWirklichkeit nachvollziehen würde. Dies war die Aufgabe unseres Projekts”Fujaba goesMindstorms“.2074.3 PﬂichtenheftDie erste Phase begann mit dem Erstellen des Pﬂichtenheftes noch vor dem Umzug indie Räume der TU. Die Struktur eines Pﬂichtenheftes wurde im Unterricht besprochenund die Erstellung als Hausaufgabe aufgegeben. Die Ergebnisse wurden zu Anfang deszweitägigen Aufenthalts in der TU Braunschweig von den Schülern vorgestellt.Das Erstellen eines Pﬂichtenheftes zwang die Schüler dazu, sich vor Beginn der Arbeit mitden Robotern Gedanken über die Anforderungen, den weiteren Ablauf und die zugrundeliegende Problematik zu machen. Dies stellte sich in den weiteren Phasen als enormerV orteil heraus, da somit eine Grundlage geschaffen wurde, auf der das weitere V orgehendiskutiert werden konnte. Auch zeigte sich, dass die Schüler im Erstellen von Dokumen-tation und im Präsentieren eben dieser relativ ungeübt waren. Hier konnte im Verlaufe desProjekts ein erheblicher Lernfortschritt festgestellt werden.4.4 AnalyseZu Beginn der Analysephase mussten die Schüler sich zunächst mit dem gegebenen Ma-terial vertraut machen, um eine geeignete”Welt“ für die Lösung des Problems zu entwer-fen. Das Material, dass ihnen zur Verfügung stand, beinhaltete den Stapler, eine weißeGrundplatte, drei Holzklötze als Ablageﬂächen, vier Paletten, die die Hanoi Scheiben re-pr¨asentierten, sowie eine Menge an farbigem Klebeband zur Markierung der Wege auf derGrundplatte (siehe Abbildung 4). Mit Hilfe einer Fernbedienung konnte der Ablauf desUmstapelns in der selbst entworfenen Umgebung als Objektspiel durchgeführt werden.Nun galt es diesen einen großen Ablauf gemäß dem Prinzip der strukturierten Zerlegung inmehrere kleinere Teilabläufe zu zerlegen. Diese wurden im Analysedokument als spätereMethoden dokumentiert und ihr Verhalten textuell beschrieben. Alle Gruppen entschiedensich, hierbei bottom-up vorzugehen. Das heißt, sie beschrieben erst die atomaren Abläufeund setzten dann die komplexeren daraus zusammen. Mitte des ersten Arbeitstages stelltendie Schüler die Ergebnisse der Analysephase den anderen Gruppen vor.Wie auch schon bei weniger komplexen Beispielen, beobachteten wir, dass dem Objekt-spiel und dessen ausführlicher Dokumentation eine zentrale Bedeutung zukommt. Die Zer-legung in Teilprobleme entstand unmittelbar aus dem Objektspiel. Wenn die Schüler zumBeispiel den Stapler rückwärts steuerten, wurde darüber diskutiert, wie lange der Roboterwohl rückwärtsfahren sollte. Da der Stapler hinten über einen auf den Boden gerichtetenLichtsensor verfügt, wurde so zum Beispiel die Methode backwardTillBlack() und dessenBeschreibung ins Analysedokument aufgenommen. Weiterhin wurden schwarze Markie-rungen auf die Bodenplatte geklebt.2084.5 DesignIn der Designphase wurden die textuellen Beschreibungen im Analysedokument schritt-weise in UML-Aktivitätsdiagramme in Fujaba umgesetzt. Hierzu verwendeten die Schülereigenständig die Methodik des Story Driven Modeling um Fallunterscheidungen und Schlei-fen zu erkennen. Für manche Methoden musste das Klassendiagramm um Attribute undAssoziationen erweitert werden. So ist es zum Beispiel notwendig, den Türmen eine Po-sition zuzuordnen, um sie bei der Berechnung der Route unterscheiden zu können. Ausden so erstellten Klassen und Methoden generiert Fujaba automatisch Java Quelltext unddieser kann dann im Dobs getestet werden. Hierzu ist das Implementieren einer Testumge-bung nicht erforderlich. So kann zum Beispiel die Methode backwardTillBlack() direkt imDobs aufgerufen werden (Abbildung 5). Ist diese Methode korrekt implementiert, sollteder Stapler durch Dobs ferngesteuert rückwärts fahren, bis er über einer schwarzen Mar-kierung steht. Sollte der Stapler beispielsweise zu schnell gefahren sein, kann man im Dobsleicht die Werte der Geschwindigkeitsattribute der zugehörigen Motorobjekte ändern unddie Methode erneut aufrufen. Auch diese Phase endete wieder mit einer Präsentation dererarbeiteten Ergebnisse.Abbildung 5: Dobs steuert Gabelstapler fern2094.6 TurnierAm Ende des Projekts war ein Turnier geplant, in dem die drei Gruppen ihre Roboter umdie Wette stapeln lassen sollten. Zu Beginn dieser Phase wurden die fertigen Program-me daher ausgiebig getestet und Programme wie Roboter auf Geschwindigkeit optimiert.Da die Turnierregeln eine Strafminute vorsahen, wenn per Hand in den Ablauf eingegrif-fen werden musste, falls zum Beispiel eine Scheibe von der Gabel gerutscht war, mussteallerdings auch auf den fehlerfreien Ablauf wert gelegt werden. Die einzelnen Gruppenzeigten hier einen großen Ehrgeiz und wenn sich vorher noch geholfen wurde und Ideenund Lösungsstrategien zwischen den Gruppen ausgetauscht wurden, blieben die Bürot¨urenjetzt verschlossen. Dementsprechen groß war auch das Mitﬁebern während des Turniersund der Jubel, wenn der eigene Roboter eine Scheibe fehlerfrei umgestapelt hatte. Diebeste Gruppe schaffte die drei Scheiben in 12 Minuten.4.7 AuswertungZur Nachbereitung des Projekts stellten wir den Schülern folgende Aufgaben:– Ein Phasendokument (Pﬂichtenheft, Analyse- oder Designdokument) sollte vervoll-st¨andigt und überarbeitet werden.– Eine Präsentation, die die einzelnen Phasen des Projekts vorstellt und den Ablaufveranschaulicht, sollte erstellt werden.– Ein Poster, das das Projekt und die geleistete Arbeit der Schüler darstellt, sollteerstellt werden.Die Schüler durften sich jeweils eine Aufgabe aussuchen, mussten diese zu Hause bear-beiten und das Ergebnis wurde als Klausurersatz gewertet.Diese Ergebnisse sowie die Roboter und die lauffähigen Programme wurden in einem spe-ziell geförderten Formel-X Projekt von den Schülern der ¨Offentlichkeit vorgestellt. Hierfürwurden wir vom Niedersächsischen Kultusministerium mit einem Preis ausgezeichnet.5 Zusammenfassung und AusblickDas Projekt”Fujaba goes Mindstorms“ war die erste komplexere Programmieraufgabeeines 12. Klasse Informatikkurses. Im Stile eines Industriepraktikums entwickelten dieSch¨uler zwei Tage lang in den Räumen der TU Braunschweig eine Robotersteuerungdie das Problem der Türme von Hanoi löst. Die von uns bereitgestellte Schnittstelle zurSteuerung der Roboter ermöglichte es den Schülern ihre im Unterricht erlangten Model-lierungsfähigkeiten hier eins zu eins umzusetzen. Die bereits im Unterricht eingesetzte210Software Fujaba und Dobs zeigten hier ihre Stärken. Wurde sonst immer nur die Wirk-lichkeit betrachtet und daraus am Rechner ein Model entwickelt, sorgte hier das direkteAbbild Modell →Wirklichkeit (Objektdiagramm im Dobs steuert Roboter fern) für eintieferes Verständnis der objektorientierten Modellierung. Die Objekte wurden anfassbar.Das sorgte für eine enorme Motivation auf Seiten der Schüler. Es wurden freiwillig undtrotz mehrfacher Aufforderungen sehr wenig Pausen gemacht, es gab niemanden der nichtmitgearbeitet hat und die vorgegebenen Arbeitszeiten wurden weit überschritten. Sollte amersten Tag beispielsweise um 17 Uhr Schluß sein, arbeiteten die Schüler fast geschlossenbis 19:30 Uhr.Auch die Entscheidung, die entwickelten Java Programme nicht direkt auf dem LEGOMindstorms Brick ablaufen zu lassen, sondern mit einem Java Programm auf einem PCdie Roboter fernzusteuern hat sich sehr bewährt. Aus anderen Mindstorms Projekten wur-de uns von verschiedener Seite berichtet, dass die Fehlersuche in einem komplexen Pro-gramm, dass direkt auf dem LEGO Brick abläuft extrem zeitaufwändig und frustrierendsein kann. Unser Ansatz machte den Einsatz von Dobs möglich und erlaubte den Schülernin komfortabler Weise ihre Programmentwürfe zu testen. Nachteil unseres Fernsteuerungs-ansatzes ist aber, dass die Infrarot-Kommunikation zwischen Steuerungs-PC und LEGOBrick sehr langsam ist. So können nur etwa 10 Sensoranfragen pro Sekunde abgearbeitetwerden. Dies machte es für Methoden wie backwardTillBlack() notwendig, den Staplerrelativ langsam fahren zu lassen und relativ breite Markierungen zu verwenden, damit derSensor die Markierung (den Taster) nicht schon wieder verlassen hat, bevor der entspre-chende Wert ausgelesen wird. Die resultierenden Ungenauigkeiten setzten den”feinmoto-rischen“ Fähigkeiten unseres Staplers enge Grenzen. Zur Lösung dieses Problems planenwir, dass demnächst fertig ausgeteste Methoden schrittweise in den LEGO Brick transfe-riert werden sollen, so dass nur noch die darauf aufbauenden höheren Methoden auf demSteuerungs-PC verbleiben. Dadurch kann der Kommunikationsaufwand verringert und die”Feinmotorik“ verbessert werden. Dies erfordert jedoch einige Erweiterungen an den Mo-dellierungsmöglichkeiten und an der Code-Generierung von Fujaba.Das Fujaba goes Mindstorms Projekt wird mit dem Informatikkurs der aktuellen 11. Klas-se in diesem Jahr voraussichtlich wieder statt ﬁnden, dann aber vermutlich in den Räumender Universität Kassel. Weiterhin ist für die 13. Klasse eine Art Software EntwicklungsPraktikum vorgesehen und wir werden unseren Schüler auch hier die Möglichkeit geben,Software für die Mindstorms Roboter zu entwickeln.Zus¨atzlich Informationen zu unserem Projekt sowie Bilder und die Bauanleitung des Ga-belstaplers sind zu ﬁnden unter:http://www.uni-kassel.de/fb16/fpm/projects/FujabaGoesMindstorms/index.html.Literatur[DGMZ02] I. Diethelm, L. Geiger, T. Maier, A. Zündorf: Turning Collaboration Diagram Stripsinto Storycharts; Workshop on Scenarios and state machines: models, algorithms, andtools; ICSE 2002, Orlando, Florida, USA, 2002.211[DGZ02] I. Diethelm, L. Geiger, A. Zündorf: UML im Unterricht: Systematische objektorien-tierte Problemlösung mit Hilfe von Szenarien am Beispiel der Türme von Hanoi; inForschungsbeiträge zur ”Didaktik der Informatik“ - Theorie, Praxis und Evaluation;GI-Lecture Notes, pp. 33-42 (2002)[Fu02] Fujaba Homepage, Universität Paderborn, http://www.fujaba.de/.[Hu00] P. Hubwieser: Didaktik der Informatik - Grundlagen, Konzepte, Beispiele, SpringerVerlag, Berlin, 2000.[Ba98] Helmut Balzert: Lehrbuch der Software - Technik 1, 2. Auﬂ.,Spektrum, 1998[KNNZ00] H. Köhler, U. Nickel, J. Niere, A. Zündorf: Integrating UML Diagrams for ProductionControl Systems; in Proc. of ICSE 2000 - The 22nd International Conference onSoftware Engineering, June 4-11th, Limerick, Ireland, acm press, pp. 241-251 (2000)[life02] life3-Homepage, Universität Paderborn, http://life.uni-paderborn.de/.[SN02] C. Schulte, J. Niere: Thinking in Object Structures: Teaching Modelling in SecondarySchools; in Sixth Workshop on Pedagogies and Tools for Learning Object OrientedConcepts, ECOOP, Malaga, Spanien, 2002.[Z¨u01] A. Zündorf: Rigorous Object Oriented Software Development, Habilitation Thesis,University of Paderborn, 2001.212Fujaba goes Mindstorms: Objektorientierte Modellierung zum Anfassen Ira Diethelm1, Leif Geiger2, Albert Zündorf2 1Gaußschule2FPM, Universität Kassel L¨owenwall 18a Wilhelmshöher Allee 73 38100 Braunschweig 34121 Kassel (ira.diethelm |leif.geiger |albert.zuendorf )@uni-kassel.de http://www.uni-kassel.de/fb16/fpm Abstract: Ziel des”Fujaba goes Mindstorms“ war es, ein praktisches Softwareprojekt mit anspruchsvollen algorithmischen Aufgabenstellungen durchzuführen und dabei die hohe Motivation zu Nutzen, die durch die LEGO Mindstorms Roboter entsteht. Die von LEGO mitgelieferte Programmierumgebung/-sprache für Mindstorms reichte f¨ur unsere algorithmischen Anforderungen nicht aus. Die Programmierung von Mindstorms in der Sprache Java stellt zwar die nötigen algorithmischen Mittel (z.B. Rekursion) zur Verfügung aber die Fehlersuche ist bei einem in dem Mindstorms Brick ablaufenden Java Programm aufgrund der fehlenden Debugging-Möglichkeiten ein frustrierendes Unterfangen. Daher haben wir uns für eine Fernsteuerung der Mindstorms Roboter durch ein auf einem PC laufenden Programm, entschieden. Zum Testen diesesFernsteuerungsprogramms verwenden wir Dobs, einen graﬁschen Browser/Debugger, der die Datenstrukturen eines laufenden Java Programms als UML Objektdiagramm darstellen kann und interaktiv das Aufrufen einzelner Methoden und die Verfolgungihrer Abarbeitung und der daraus resultierenden Veränderung der aktuellen Objektstruktur erlaubt. Durch eine objektorientierte Modellierung des Mindstorms Robotersund seiner Umgebung und die Ausführung im Dobs wird eine sehr direkte Abbildung vom abstrakten Programm auf die reale Welt erreicht. Dieses Papier berichtet über unsere Erfahrungen mit dieser V orgehensweise und gibt wichtige Hilfestellungen für die Durchführung ähnlicher Projekte. 1 Einleitung Das Projekt”Fujaba goes Mindstorms“ entstand aus einer Zusammenarbeit der Gaußschule mit der Technischen Universität Braunschweig. Im Zuge dieser Zusammenarbeit werden Konzepte für den Anfangsunterricht Informatik entwickelt. Die hierdurch erarbeiteten wichtigsten Ziele in Klasse 11 (vgl. Rahmenrichtlinien Informatik) sind das Erlernen des objektorientierten Modellierens, das Verinnerlichen objektorientierter Strukturen und 202Denkweisen, das Erlernen klassischer Problemlösungsstrategien der Informatik sowie der Aufbau von Kommunikationsund Kooperationsbereitschaft. Um diese Ziele zu erreichen, beginnen wir in Klasse 11 mit Modellierungsund Abstraktionsübungen. Die Modelle werden hierbei in UML erstellt. Anschließend erlernen die Schüler die auf UML basierende graﬁsche Programmiersprache Fujaba [Fu02]. Dabei werden die wichtigsten UML-Diagrammtypen und deren systematische Verwendungbehandelt. Hinzu kommen Problemlösungsstrategien, wie z.B. strukturierte Zerlegung in Teilprobleme oder Story Driven Modeling (siehe [DGZ02]). Die Programmiersprache Fu-jaba bietet bisher leider noch keine Anbindung an eine GUI Bibliothek. Es können lediglich in dem zur Fujaba Umgebung gehörenden Dynamischen Objekt Browser (Dobs) die Laufzeitdaten von Programmen als UML Objektdiagramm dargestellt werden und imDobs können einzelne Methoden interaktiv aufgerufen werden. Dies ist sehr anschaulich f¨ur Debugund Testzwecke, aber eben keine dem Programm angepasste graﬁsche Benutzeroberﬂäche. Wir beobachteten hier ein Motivationsdeﬁzit bei den Schülern. Die durch Dobs visualisierten ¨Anderungen der Objektstruktur im Modell sind einfach nicht so”bunt“ und interaktiv wie man es von Standardsoftware gewohnt ist. Um am Anfang von Klasse 12 eine wesentlich komplexere Programmierübung mit Fujaba durchzuführen, entwickelten wir die Idee zu”Fujaba goes Mindstorms“. Per geeigneter Schnittstelle sollen LEGO Mindstorms Roboter aus UML heraus ferngesteuert werden. Dieses Projekt wurde in Zusammenarbeit mit der TU Braunschweig als kleines Industriepraktikum durchgeführt. Die Schüler vertiefen also ihre Modellierungsund Problemlösungsfähigkeiten, erlernen Grundlagen der Softwaretechnik und das Zusammenspiel Realität Modell ist weniger abstrakt, da hier Abläufe nicht nur simuliert, sondern tats¨achlich gesteuert werden. Diese realitätsnahe Herangehensweise wirkt zusätzlich auf die Schüler extrem motivierend und Kreativität f¨ordernd. Im Folgenden wird dieses Projekt beschrieben und diskutiert. 2 Voraussetzungen Das Projekt wurde mit einem jahrgangsübergreifenden Informatikkurs der Gaußschule Braunschweig durchgeführt. Die Schüler der Klasse 12 haben im Informatikunterricht von Anfang an objektorientiertes Modellieren mit UML gelernt, die Schüler des Jahrgangs 13 behandelten in 11 und 12 Pascal und Delphi. Wir setzen im Unterricht das CASE-Tool Fujaba ein. Fujaba ermöglicht es ganze Programme komplett graﬁsch mittels UML zu speziﬁzieren, zu implementieren und zu testen. Zur Speziﬁkation verwenden die Schüler UML-Klassendiagramme. Zur Implementierung der Methodenrümpfe stehen in Fujaba sog. Storydiagramme (UML-Aktivitätsdiagramme mit eingebetteten Kolaborationsdiagrammen) zur Verfügung. Aus diesen Diagrammen generiert Fujaba ausführbaren Java Quelltext, der dann mit dem in Fujaba integrierten Objektbrowser und Debugger Dobs (Dynamic Object Browsing System) getestet werden kann.Dobs visualisiert die Objektstruktur eines Programms zur Laufzeit, siehe Abbildung 1. Angezeigt werden Objekte, deren Attribute, Methoden und deren Links. Dobs ist zusätzlich 203noch interaktiv. Das heißt, zur Laufzeit können neue Objekte angelegt und Methoden von bekannten Objekten ausgeführt werden. Die hierdurch entstehenden ¨Anderungen in der Objektstruktur werden ebenfalls im Dobs visualisiert. Abbildung 1 zeigt den Aufruf der Methode forward() des Objektes f1im Dobs. Abbildung 1: Dobs im Einsatz 3 LEGO Mindstorms Roboter Zur Durchführung unseres Projekts verwendeten wir das LEGO Mindstorms Robotics Invention System sowie das LEGO Mindstorms Ultimate Accessory Set, wie sie in jederSpielwarenhandlung erhältlich sind. Herzstück dieses Sets ist der sog. Brick, ein Mikrocontroller mit drei Eingängen, drei Ausgängen, Soundchip und einem Infrarotport. An den Brick lassen sich Motoren und Sensoren (Berührungs-, Licht-, oder Rotationssensoren) anschließen. Abbildung 2 zeigt ein Objektdiagramm, das diesen Brick und die angeschlossenen Sensoren und Motoren objektorientiert modelliert. 204Abbildung 2: Objektdiagramm der UML-LEGO-Schnittstelle Hieraus lässt sich unmittelbar und für die Schüler nachvollziehbar das zugehörige Klassendiagramm ableiten, siehe Abbildung 3. Die Kommunikation zwischen Dobs und dem Mindstorms Roboter erfolgt per Infrarot. Hierfür stellt Fujaba eine Reihe von einfachen Bibliotheksfunktionen zur Verfügung. In unserem Beispiel werden diese Bibliotheksfunktionen durch die Methoden des Bricks, der Motoren und der Sensoren verkapselt. Dadurch bewirkt ein Aufruf der Methode forward() auf einem FMotor Objekt, dass sich tatsächlich der entsprechende LEGO Motor in diese Richtung dreht. Dies können die Schüler sehr anschaulich im Dobs testen, siehe Abbildung 1. Ebenso können die Schüler per Dobs die verschiedenen Sensoren auslesen und z.B. einen Taster betätigen und direkt die Veränderung des Sensorwertes prüfen. Abbildung 3: Klassendiagramm der UML-LEGO-Schnittstelle 205Da Entwicklung und Aufbau eines Roboters durch die Schüler sehr umfangreich und für den weiteren Unterricht wenig gewinnbringend sind, haben wir für das Projekt einen Roboter vorgegeben. Der Roboter sollte den folgenden Ansprüche genügen: – Mobilität um möglichst wenig Einschränkungen an die Umgebung vorzugeben –F ¨ahigkeit Gegenstände zu heben – Erkennung der Umgebung mittels Sensorik zur Orientierung Wir haben uns daher für einen Gabelstapler mit Ketten entschieden (Abbildung 4). Mittels eines Lichtsensors hinten und eines Berührungssensors vorne kann sich unser Gabelstapler orientieren. Die Kontrolle der Gabel läuft ¨uber zwei in Reihe geschaltete Berührungssensoren. Die Schüler durften während des Projekts nur kleine bauliche Verbesserungen am Roboter vornehmen. Abbildung 4: Der LEGO Gabelstapler 2064 Projekt Eine zentrale Idee dieses Projekts war es, den Schülern Grundzüge der Softwaretechnik zu vermitteln und ihnen ein Gefühl dafür zu geben, wie Software in der Wirtschaft entwickelt wird. Aus diesem Grund führten wir es ähnlich eines Industriepraktikums durch. Dies beinhaltete folgende Punkte: – Aufteilung der Schüler in Teams mit jeweils eigenem Büro in den Räumlichkeiten der TU Braunschweig und eigenem Betreuer, der den Kunden repräsentierte – Aufteilung des Projekts in Phasen (Pﬂichtenheft, Analyse, Design), vgl. [Ba98] – Phasenabschluß mit V orstellung des Phasendokuments– Abschlußpräsentation in Form eines Turnieres 4.1 Problemstellung Die Idee für das Projekt war, mittels der oben vorgestellten UML-LEGO Schnittstelle und dem von uns vorgegebenen Gabelstapler, ein klassisches Problem der Informatik zu l¨osen: das der Türme von Hanoi. Dieses Problem ist ausreichend komplex, jedoch gut systematisch lösbar. Die Aufgabenstellung lautete wie folgt: Entwirf ein Programm, das einen Mindstorms-Roboter so steuert, dass er das Problem ”T¨urme von Hanoi mit 4 Scheiben“ l ¨ost. 4.2 Vorbereitung im Unterricht Im Unterricht wurden zuerst die Türme von Hanoi objektorientiert modelliert. Wir benutzten das Prinzip des Story Driven Modeling um eine Lösung für das Problem der Türme von Hanoi zu ﬁnden. Dieses Prinzip ermöglicht es aus Szenarien systematisch die Methoden abzuleiten. Unser V orgehen ist in [DGZ02] beschrieben. Die so erstellten Programme wurden zuerst im Dobs getestet. Die Lösungen konnten beliebig viele Scheiben gemäß der Regeln umstapeln. Jedoch ist die Animation dieses Umstapelns im Dobs nicht sehr beeindruckend und wird der Leistung der Schüler die dorthin geführt hat, nicht gerecht. Im Dobs ändern sich lediglich Links zwischen Objekten, das heißt Linien zwischen Objekten erscheinen bzw. verschwinden. Eine weitaus ansprechendere und motivierendere Animation wäre es, wenn sich bei jeder ¨Anderung der Objektstruktur auch unser Gabelstapler bewegen und die ¨Anderung in der Wirklichkeit nachvollziehen würde. Dies war die Aufgabe unseres Projekts”Fujaba goes Mindstorms“. 2074.3 Pﬂichtenheft Die erste Phase begann mit dem Erstellen des Pﬂichtenheftes noch vor dem Umzug in die Räume der TU. Die Struktur eines Pﬂichtenheftes wurde im Unterricht besprochen und die Erstellung als Hausaufgabe aufgegeben. Die Ergebnisse wurden zu Anfang des zweitägigen Aufenthalts in der TU Braunschweig von den Schülern vorgestellt. Das Erstellen eines Pﬂichtenheftes zwang die Schüler dazu, sich vor Beginn der Arbeit mit den Robotern Gedanken über die Anforderungen, den weiteren Ablauf und die zugrunde liegende Problematik zu machen. Dies stellte sich in den weiteren Phasen als enormerV orteil heraus, da somit eine Grundlage geschaffen wurde, auf der das weitere V orgehen diskutiert werden konnte. Auch zeigte sich, dass die Schüler im Erstellen von Dokumentation und im Präsentieren eben dieser relativ ungeübt waren. Hier konnte im Verlaufe des Projekts ein erheblicher Lernfortschritt festgestellt werden. 4.4 Analyse Zu Beginn der Analysephase mussten die Schüler sich zunächst mit dem gegebenen Material vertraut machen, um eine geeignete”Welt“ für die Lösung des Problems zu entwerfen. Das Material, dass ihnen zur Verfügung stand, beinhaltete den Stapler, eine weiße Grundplatte, drei Holzklötze als Ablageﬂächen, vier Paletten, die die Hanoi Scheiben repr¨asentierten, sowie eine Menge an farbigem Klebeband zur Markierung der Wege auf der Grundplatte (siehe Abbildung 4). Mit Hilfe einer Fernbedienung konnte der Ablauf des Umstapelns in der selbst entworfenen Umgebung als Objektspiel durchgeführt werden. Nun galt es diesen einen großen Ablauf gemäß dem Prinzip der strukturierten Zerlegung in mehrere kleinere Teilabläufe zu zerlegen. Diese wurden im Analysedokument als spätere Methoden dokumentiert und ihr Verhalten textuell beschrieben. Alle Gruppen entschieden sich, hierbei bottom-up vorzugehen. Das heißt, sie beschrieben erst die atomaren Abläufe und setzten dann die komplexeren daraus zusammen. Mitte des ersten Arbeitstages stelltendie Schüler die Ergebnisse der Analysephase den anderen Gruppen vor. Wie auch schon bei weniger komplexen Beispielen, beobachteten wir, dass dem Objekt-spiel und dessen ausführlicher Dokumentation eine zentrale Bedeutung zukommt. Die Zerlegung in Teilprobleme entstand unmittelbar aus dem Objektspiel. Wenn die Schüler zum Beispiel den Stapler rückwärts steuerten, wurde darüber diskutiert, wie lange der Roboter wohl rückwärtsfahren sollte. Da der Stapler hinten über einen auf den Boden gerichteten Lichtsensor verfügt, wurde so zum Beispiel die Methode backwardTillBlack() und dessen Beschreibung ins Analysedokument aufgenommen. Weiterhin wurden schwarze Markie-rungen auf die Bodenplatte geklebt. 2084.5 Design In der Designphase wurden die textuellen Beschreibungen im Analysedokument schrittweise in UML-Aktivitätsdiagramme in Fujaba umgesetzt. Hierzu verwendeten die Schüler eigenständig die Methodik des Story Driven Modeling um Fallunterscheidungen und Schleifen zu erkennen. Für manche Methoden musste das Klassendiagramm um Attribute und Assoziationen erweitert werden. So ist es zum Beispiel notwendig, den Türmen eine Position zuzuordnen, um sie bei der Berechnung der Route unterscheiden zu können. Aus den so erstellten Klassen und Methoden generiert Fujaba automatisch Java Quelltext unddieser kann dann im Dobs getestet werden. Hierzu ist das Implementieren einer Testumgebung nicht erforderlich. So kann zum Beispiel die Methode backwardTillBlack() direkt im Dobs aufgerufen werden (Abbildung 5). Ist diese Methode korrekt implementiert, sollte der Stapler durch Dobs ferngesteuert rückwärts fahren, bis er über einer schwarzen Markierung steht. Sollte der Stapler beispielsweise zu schnell gefahren sein, kann man im Dobsleicht die Werte der Geschwindigkeitsattribute der zugehörigen Motorobjekte ändern und die Methode erneut aufrufen. Auch diese Phase endete wieder mit einer Präsentation der erarbeiteten Ergebnisse. Abbildung 5: Dobs steuert Gabelstapler fern 2094.6 Turnier Am Ende des Projekts war ein Turnier geplant, in dem die drei Gruppen ihre Roboter um die Wette stapeln lassen sollten. Zu Beginn dieser Phase wurden die fertigen Program-me daher ausgiebig getestet und Programme wie Roboter auf Geschwindigkeit optimiert. Da die Turnierregeln eine Strafminute vorsahen, wenn per Hand in den Ablauf eingegriffen werden musste, falls zum Beispiel eine Scheibe von der Gabel gerutscht war, musste allerdings auch auf den fehlerfreien Ablauf wert gelegt werden. Die einzelnen Gruppen zeigten hier einen großen Ehrgeiz und wenn sich vorher noch geholfen wurde und Ideenund Lösungsstrategien zwischen den Gruppen ausgetauscht wurden, blieben die Bürot¨uren jetzt verschlossen. Dementsprechen groß war auch das Mitﬁebern während des Turniers und der Jubel, wenn der eigene Roboter eine Scheibe fehlerfrei umgestapelt hatte. Diebeste Gruppe schaffte die drei Scheiben in 12 Minuten. 4.7 Auswertung Zur Nachbereitung des Projekts stellten wir den Schülern folgende Aufgaben: – Ein Phasendokument (Pﬂichtenheft, Analyseoder Designdokument) sollte vervollst¨andigt und überarbeitet werden. – Eine Präsentation, die die einzelnen Phasen des Projekts vorstellt und den Ablauf veranschaulicht, sollte erstellt werden. – Ein Poster, das das Projekt und die geleistete Arbeit der Schüler darstellt, sollte erstellt werden. Die Schüler durften sich jeweils eine Aufgabe aussuchen, mussten diese zu Hause bearbeiten und das Ergebnis wurde als Klausurersatz gewertet. Diese Ergebnisse sowie die Roboter und die lauffähigen Programme wurden in einem speziell geförderten Formel-X Projekt von den Schülern der ¨Offentlichkeit vorgestellt. Hierfür wurden wir vom Niedersächsischen Kultusministerium mit einem Preis ausgezeichnet. 5 Zusammenfassung und Ausblick Das Projekt”Fujaba goes Mindstorms“ war die erste komplexere Programmieraufgabe eines 12. Klasse Informatikkurses. Im Stile eines Industriepraktikums entwickelten die Sch¨uler zwei Tage lang in den Räumen der TU Braunschweig eine Robotersteuerung die das Problem der Türme von Hanoi löst. Die von uns bereitgestellte Schnittstelle zur Steuerung der Roboter ermöglichte es den Schülern ihre im Unterricht erlangten Modellierungsfähigkeiten hier eins zu eins umzusetzen. Die bereits im Unterricht eingesetzte 210Software Fujaba und Dobs zeigten hier ihre Stärken. Wurde sonst immer nur die Wirklichkeit betrachtet und daraus am Rechner ein Model entwickelt, sorgte hier das direkte Abbild Modell →Wirklichkeit (Objektdiagramm im Dobs steuert Roboter fern) für ein tieferes Verständnis der objektorientierten Modellierung. Die Objekte wurden anfassbar. Das sorgte für eine enorme Motivation auf Seiten der Schüler. Es wurden freiwillig und trotz mehrfacher Aufforderungen sehr wenig Pausen gemacht, es gab niemanden der nichtmitgearbeitet hat und die vorgegebenen Arbeitszeiten wurden weit überschritten. Sollte am ersten Tag beispielsweise um 17 Uhr Schluß sein, arbeiteten die Schüler fast geschlossen bis 19:30 Uhr. Auch die Entscheidung, die entwickelten Java Programme nicht direkt auf dem LEGO Mindstorms Brick ablaufen zu lassen, sondern mit einem Java Programm auf einem PC die Roboter fernzusteuern hat sich sehr bewährt. Aus anderen Mindstorms Projekten wurde uns von verschiedener Seite berichtet, dass die Fehlersuche in einem komplexen Programm, dass direkt auf dem LEGO Brick abläuft extrem zeitaufwändig und frustrierend sein kann. Unser Ansatz machte den Einsatz von Dobs möglich und erlaubte den Schülern in komfortabler Weise ihre Programmentwürfe zu testen. Nachteil unseres Fernsteuerungsansatzes ist aber, dass die Infrarot-Kommunikation zwischen Steuerungs-PC und LEGO Brick sehr langsam ist. So können nur etwa 10 Sensoranfragen pro Sekunde abgearbeitet werden. Dies machte es für Methoden wie backwardTillBlack() notwendig, den Stapler relativ langsam fahren zu lassen und relativ breite Markierungen zu verwenden, damit derSensor die Markierung (den Taster) nicht schon wieder verlassen hat, bevor der entsprechende Wert ausgelesen wird. Die resultierenden Ungenauigkeiten setzten den”feinmotorischen“ Fähigkeiten unseres Staplers enge Grenzen. Zur Lösung dieses Problems planen wir, dass demnächst fertig ausgeteste Methoden schrittweise in den LEGO Brick transferiert werden sollen, so dass nur noch die darauf aufbauenden höheren Methoden auf dem Steuerungs-PC verbleiben. Dadurch kann der Kommunikationsaufwand verringert und die ”Feinmotorik“ verbessert werden. Dies erfordert jedoch einige Erweiterungen an den Modellierungsmöglichkeiten und an der Code-Generierung von Fujaba. Das Fujaba goes Mindstorms Projekt wird mit dem Informatikkurs der aktuellen 11. Klasse in diesem Jahr voraussichtlich wieder statt ﬁnden, dann aber vermutlich in den Räumen der Universität Kassel. Weiterhin ist für die 13. Klasse eine Art Software Entwicklungs Praktikum vorgesehen und wir werden unseren Schüler auch hier die Möglichkeit geben, Software für die Mindstorms Roboter zu entwickeln. Zus¨atzlich Informationen zu unserem Projekt sowie Bilder und die Bauanleitung des Gabelstaplers sind zu ﬁnden unter:http://www.uni-kassel.de/fb16/fpm/projects/FujabaGoesMindstorms/index.html. Literatur [DGMZ02] I. Diethelm, L. Geiger, T. Maier, A. Zündorf: Turning Collaboration Diagram Strips into Storycharts; Workshop on Scenarios and state machines: models, algorithms, and tools; ICSE 2002, Orlando, Florida, USA, 2002. 211[DGZ02] I. Diethelm, L. Geiger, A. Zündorf: UML im Unterricht: Systematische objektorientierte Problemlösung mit Hilfe von Szenarien am Beispiel der Türme von Hanoi; in Forschungsbeiträge zur ”Didaktik der Informatik“ Theorie, Praxis und Evaluation; GI-Lecture Notes, pp. 33-42 (2002) [Fu02] Fujaba Homepage, Universität Paderborn, http://www.fujaba.de/. [Hu00] P. Hubwieser: Didaktik der Informatik Grundlagen, Konzepte, Beispiele, Springer Verlag, Berlin, 2000. [Ba98] Helmut Balzert: Lehrbuch der Software Technik 1, 2. Auﬂ.,Spektrum, 1998 [KNNZ00] H. Köhler, U. Nickel, J. Niere, A. Zündorf: Integrating UML Diagrams for Production Control Systems; in Proc. of ICSE 2000 The 22nd International Conference on Software Engineering, June 4-11th, Limerick, Ireland, acm press, pp. 241-251 (2000) [life02] life3-Homepage, Universität Paderborn, http://life.uni-paderborn.de/. [SN02] C. Schulte, J. Niere: Thinking in Object Structures: Teaching Modelling in Secondary Schools; in Sixth Workshop on Pedagogies and Tools for Learning Object OrientedConcepts, ECOOP, Malaga, Spanien, 2002. [Z¨u01] A. Zündorf: Rigorous Object Oriented Software Development, Habilitation Thesis, University of Paderborn, 2001. 212